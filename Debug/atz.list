
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08005340  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000340  08005340  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daa1  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271c  00000000  00000000  00014b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00017248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a0  00000000  00000000  00017d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cb7  00000000  00000000  00018638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f422  00000000  00000000  0002e2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833e4  00000000  00000000  0003d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  000c0b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c3590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005224 	.word	0x08005224

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005224 	.word	0x08005224

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f000 fcb6 	bl	8000df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 fcc8 	bl	8000e1a <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f004 fdef 	bl	800508c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b20      	ldr	r3, [pc, #128]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_GPIO_Init+0x98>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_GPIO_Init+0x9c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f873 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2220      	movs	r2, #32
 8000508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2201      	movs	r2, #1
 800050e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2202      	movs	r2, #2
 8000514:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800051c:	187b      	adds	r3, r7, r1
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <MX_GPIO_Init+0x9c>)
 8000520:	0019      	movs	r1, r3
 8000522:	0010      	movs	r0, r2
 8000524:	f000 fee2 	bl	80012ec <HAL_GPIO_Init>

}
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	@ 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	50000400 	.word	0x50000400

08000538 <cb_WAKE>:
    MX_DMA_Init();
}


void cb_WAKE(const char* str)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __NOP();
 8000540:	46c0      	nop			@ (mov r8, r8)
}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fb0d 	bl	8000b70 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f845 	bl	80005e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f7ff ff9d 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 800055e:	f7ff ff7d 	bl	800045c <MX_DMA_Init>
  MX_RTC_Init();
 8000562:	f000 f8e7 	bl	8000734 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8000566:	f000 fa05 	bl	8000974 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <main+0x78>)
 800056c:	2280      	movs	r2, #128	@ 0x80
 800056e:	0092      	lsls	r2, r2, #2
 8000570:	4915      	ldr	r1, [pc, #84]	@ (80005c8 <main+0x7c>)
 8000572:	4816      	ldr	r0, [pc, #88]	@ (80005cc <main+0x80>)
 8000574:	f004 fa56 	bl	8004a24 <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000578:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <main+0x84>)
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <main+0x80>)
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f004 fb07 	bl	8004b92 <ATC_SetEvents>
  HAL_Delay(10000);
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <main+0x88>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fb62 	bl	8000c50 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int resp = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  char* ATSEND_Result = NULL;
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
  resp = ATC_SendReceive(&lora, "AT\r\n", 200, &ATSEND_Result, 2000, 2, "OK", "ERROR");
 8000594:	003a      	movs	r2, r7
 8000596:	4910      	ldr	r1, [pc, #64]	@ (80005d8 <main+0x8c>)
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <main+0x80>)
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <main+0x90>)
 800059c:	9303      	str	r3, [sp, #12]
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <main+0x94>)
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2302      	movs	r3, #2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	23fa      	movs	r3, #250	@ 0xfa
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	0013      	movs	r3, r2
 80005ae:	22c8      	movs	r2, #200	@ 0xc8
 80005b0:	f004 fb37 	bl	8004c22 <ATC_SendReceive>
 80005b4:	0003      	movs	r3, r0
 80005b6:	607b      	str	r3, [r7, #4]
  while(1)
    {
	  ATC_Loop(&lora);
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <main+0x80>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f004 fb21 	bl	8004c02 <ATC_Loop>
 80005c0:	e7fa      	b.n	80005b8 <main+0x6c>
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	08005244 	.word	0x08005244
 80005c8:	200000dc 	.word	0x200000dc
 80005cc:	20000078 	.word	0x20000078
 80005d0:	08005260 	.word	0x08005260
 80005d4:	00002710 	.word	0x00002710
 80005d8:	0800524c 	.word	0x0800524c
 80005dc:	08005254 	.word	0x08005254
 80005e0:	0800525c 	.word	0x0800525c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b09f      	sub	sp, #124	@ 0x7c
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2440      	movs	r4, #64	@ 0x40
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2338      	movs	r3, #56	@ 0x38
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f004 fd49 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	232c      	movs	r3, #44	@ 0x2c
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2314      	movs	r3, #20
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f004 fd41 	bl	800508c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	0018      	movs	r0, r3
 800060e:	2328      	movs	r3, #40	@ 0x28
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f004 fd3a 	bl	800508c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <SystemClock_Config+0xe0>)
 800061e:	401a      	ands	r2, r3
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <SystemClock_Config+0xdc>)
 8000622:	2180      	movs	r1, #128	@ 0x80
 8000624:	0109      	lsls	r1, r1, #4
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2218      	movs	r2, #24
 8000630:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	22a0      	movs	r2, #160	@ 0xa0
 8000648:	0212      	lsls	r2, r2, #8
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	0018      	movs	r0, r3
 8000656:	f000 ffe5 	bl	8001624 <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800065e:	f000 f863 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	212c      	movs	r1, #44	@ 0x2c
 8000664:	187b      	adds	r3, r7, r1
 8000666:	220f      	movs	r2, #15
 8000668:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fba0 	bl	8001dcc <HAL_RCC_ClockConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000690:	f000 f84a 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2224      	movs	r2, #36	@ 0x24
 8000698:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	0292      	lsls	r2, r2, #10
 80006a6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fd92 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b4:	f000 f838 	bl	8000728 <Error_Handler>
  }
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b01f      	add	sp, #124	@ 0x7c
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40007000 	.word	0x40007000
 80006c4:	ffffe7ff 	.word	0xffffe7ff

080006c8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	000a      	movs	r2, r1
 80006d2:	1cbb      	adds	r3, r7, #2
 80006d4:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <HAL_UARTEx_RxEventCallback+0x30>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <HAL_UARTEx_RxEventCallback+0x34>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f004 fb94 	bl	8004e16 <ATC_IdleLineCallback>
  }
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40004800 	.word	0x40004800
 80006fc:	20000078 	.word	0x20000078

08000700 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <HAL_UART_ErrorCallback+0x24>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d104      	bne.n	800071c <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2201      	movs	r2, #1
 8000718:	4252      	negs	r2, r2
 800071a:	621a      	str	r2, [r3, #32]
  }
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40004800 	.word	0x40004800

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 800073a:	003b      	movs	r3, r7
 800073c:	0018      	movs	r0, r3
 800073e:	2328      	movs	r3, #40	@ 0x28
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f004 fca2 	bl	800508c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_RTC_Init+0xc4>)
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <MX_RTC_Init+0xc8>)
 800074c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_RTC_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_RTC_Init+0xc4>)
 8000756:	227f      	movs	r2, #127	@ 0x7f
 8000758:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_RTC_Init+0xc4>)
 800075c:	22ff      	movs	r2, #255	@ 0xff
 800075e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_RTC_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <MX_RTC_Init+0xc4>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_RTC_Init+0xc4>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_RTC_Init+0xc4>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_RTC_Init+0xc4>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fec8 	bl	8002510 <HAL_RTC_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000784:	f7ff ffd0 	bl	8000728 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20492, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000788:	491d      	ldr	r1, [pc, #116]	@ (8000800 <MX_RTC_Init+0xcc>)
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_RTC_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f002 f994 	bl	8002abc <HAL_RTCEx_SetWakeUpTimer_IT>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000798:	f7ff ffc6 	bl	8000728 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 800079c:	003b      	movs	r3, r7
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	605a      	str	r2, [r3, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 80007da:	003a      	movs	r2, r7
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_RTC_Init+0xc4>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ffc7 	bl	8002774 <HAL_RTCEx_SetTamper_IT>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_RTC_Init+0xba>
  {
    Error_Handler();
 80007ea:	f7ff ff9d 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b00a      	add	sp, #40	@ 0x28
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	200000b4 	.word	0x200000b4
 80007fc:	40002800 	.word	0x40002800
 8000800:	0000500c 	.word	0x0000500c

08000804 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_RTC_MspInit+0x38>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d10e      	bne.n	8000834 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_RTC_MspInit+0x3c>)
 8000818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_RTC_MspInit+0x3c>)
 800081c:	2180      	movs	r1, #128	@ 0x80
 800081e:	02c9      	lsls	r1, r1, #11
 8000820:	430a      	orrs	r2, r1
 8000822:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2002      	movs	r0, #2
 800082a:	f000 fae1 	bl	8000df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800082e:	2002      	movs	r0, #2
 8000830:	f000 faf3 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40002800 	.word	0x40002800
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <HAL_MspInit+0x24>)
 800084a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x24>)
 800084e:	2101      	movs	r1, #1
 8000850:	430a      	orrs	r2, r1
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <HAL_MspInit+0x24>)
 8000856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <HAL_MspInit+0x24>)
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0549      	lsls	r1, r1, #21
 800085e:	430a      	orrs	r2, r1
 8000860:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f9c0 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <RTC_IRQHandler+0x1c>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 f9e0 	bl	8002c6c <HAL_RTCEx_WakeUpTimerIRQHandler>
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 80008ac:	4b03      	ldr	r3, [pc, #12]	@ (80008bc <RTC_IRQHandler+0x1c>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 f856 	bl	8002960 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	200000b4 	.word	0x200000b4

080008c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fc29 	bl	800111e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fc25 	bl	800111e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	200001ac 	.word	0x200001ac
 80008e0:	20000164 	.word	0x20000164

080008e4 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <RNG_LPUART1_IRQHandler+0x14>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fbee 	bl	80030cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000dc 	.word	0x200000dc

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f004 fbf2 	bl	8005114 <__errno>
 8000930:	0003      	movs	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	2301      	movs	r3, #1
 8000938:	425b      	negs	r3, r3
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	18d2      	adds	r2, r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <_sbrk+0x64>)
 800094c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b006      	add	sp, #24
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20005000 	.word	0x20005000
 800095c:	00000400 	.word	0x00000400
 8000960:	200000d8 	.word	0x200000d8
 8000964:	20000340 	.word	0x20000340

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_LPUART1_UART_Init+0x58>)
 800097c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000980:	22e1      	movs	r2, #225	@ 0xe1
 8000982:	0252      	lsls	r2, r2, #9
 8000984:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 f992 	bl	8002cdc <HAL_UART_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f7ff feb4 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	200000dc 	.word	0x200000dc
 80009cc:	40004800 	.word	0x40004800

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	240c      	movs	r4, #12
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f004 fb52 	bl	800508c <memset>
  if(uartHandle->Instance==LPUART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a45      	ldr	r2, [pc, #276]	@ (8000b04 <HAL_UART_MspInit+0x134>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d000      	beq.n	80009f4 <HAL_UART_MspInit+0x24>
 80009f2:	e083      	b.n	8000afc <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009f4:	4b44      	ldr	r3, [pc, #272]	@ (8000b08 <HAL_UART_MspInit+0x138>)
 80009f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009f8:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <HAL_UART_MspInit+0x138>)
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	02c9      	lsls	r1, r1, #11
 80009fe:	430a      	orrs	r2, r1
 8000a00:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b41      	ldr	r3, [pc, #260]	@ (8000b08 <HAL_UART_MspInit+0x138>)
 8000a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a06:	4b40      	ldr	r3, [pc, #256]	@ (8000b08 <HAL_UART_MspInit+0x138>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b08 <HAL_UART_MspInit+0x138>)
 8000a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2202      	movs	r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2203      	movs	r2, #3
 8000a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2206      	movs	r2, #6
 8000a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	23a0      	movs	r3, #160	@ 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fc52 	bl	80012ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000a48:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a4a:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <HAL_UART_MspInit+0x140>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a50:	2205      	movs	r2, #5
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6c:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000a72:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000a7e:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 f9e7 	bl	8000e54 <HAL_DMA_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000a8a:	f7ff fe4d 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a1e      	ldr	r2, [pc, #120]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a92:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_UART_MspInit+0x13c>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b18 <HAL_UART_MspInit+0x148>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f9be 	bl	8000e54 <HAL_DMA_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000adc:	f7ff fe24 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ae4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <HAL_UART_MspInit+0x144>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	201d      	movs	r0, #29
 8000af2:	f000 f97d 	bl	8000df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000af6:	201d      	movs	r0, #29
 8000af8:	f000 f98f 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b009      	add	sp, #36	@ 0x24
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	20000164 	.word	0x20000164
 8000b10:	40020030 	.word	0x40020030
 8000b14:	200001ac 	.word	0x200001ac
 8000b18:	4002001c 	.word	0x4002001c

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff ff22 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f004 fae9 	bl	8005120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fcfd 	bl	800054c <main>

08000b52 <LoopForever>:

LoopForever:
    b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
   ldr   r0, =_estack
 8000b54:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b60:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8000b64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b68:	20000340 	.word	0x20000340

08000b6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_COMP_IRQHandler>
	...

08000b70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <HAL_Init+0x3c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <HAL_Init+0x3c>)
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f811 	bl	8000bb0 <HAL_InitTick>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f7ff fe53 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_InitTick+0x5c>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_InitTick+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	23fa      	movs	r3, #250	@ 0xfa
 8000bc4:	0098      	lsls	r0, r3, #2
 8000bc6:	f7ff faa7 	bl	8000118 <__udivsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f7ff faa2 	bl	8000118 <__udivsi3>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f92f 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e00f      	b.n	8000c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d80b      	bhi.n	8000c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f8fc 	bl	8000df0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_InitTick+0x64>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	18d2      	adds	r2, r2, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	20000008 	.word	0x20000008
 8000c38:	200001f4 	.word	0x200001f4

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	@ (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	200001f4 	.word	0x200001f4

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000caa:	d809      	bhi.n	8000cc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	231f      	movs	r3, #31
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_EnableIRQ+0x30>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
  }
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce0:	d828      	bhi.n	8000d34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8000da0 <__NVIC_SetPriority+0xd4>)
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	33c0      	adds	r3, #192	@ 0xc0
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	589b      	ldr	r3, [r3, r2]
 8000cf2:	1dfa      	adds	r2, r7, #7
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	21ff      	movs	r1, #255	@ 0xff
 8000d00:	4091      	lsls	r1, r2
 8000d02:	000a      	movs	r2, r1
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	22ff      	movs	r2, #255	@ 0xff
 8000d10:	401a      	ands	r2, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	4003      	ands	r3, r0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	481f      	ldr	r0, [pc, #124]	@ (8000da0 <__NVIC_SetPriority+0xd4>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	33c0      	adds	r3, #192	@ 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d32:	e031      	b.n	8000d98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	400b      	ands	r3, r1
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3306      	adds	r3, #6
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	0011      	movs	r1, r2
 8000d54:	2203      	movs	r2, #3
 8000d56:	400a      	ands	r2, r1
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	21ff      	movs	r1, #255	@ 0xff
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	22ff      	movs	r2, #255	@ 0xff
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0018      	movs	r0, r3
 8000d74:	2303      	movs	r3, #3
 8000d76:	4003      	ands	r3, r0
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	001c      	movs	r4, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	4023      	ands	r3, r4
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	3306      	adds	r3, #6
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	18c3      	adds	r3, r0, r3
 8000d94:	3304      	adds	r3, #4
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	045b      	lsls	r3, r3, #17
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d301      	bcc.n	8000dc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e010      	b.n	8000de2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <SysTick_Config+0x44>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	425b      	negs	r3, r3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ff7c 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x44>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x44>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	1c02      	adds	r2, r0, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	0002      	movs	r2, r0
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ff33 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ffaf 	bl	8000da8 <SysTick_Config>
 8000e4a:	0003      	movs	r3, r0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e061      	b.n	8000f2a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a32      	ldr	r2, [pc, #200]	@ (8000f34 <HAL_DMA_Init+0xe0>)
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	2114      	movs	r1, #20
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f950 	bl	8000118 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a2d      	ldr	r2, [pc, #180]	@ (8000f38 <HAL_DMA_Init+0xe4>)
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2225      	movs	r2, #37	@ 0x25
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <HAL_DMA_Init+0xe8>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	01db      	lsls	r3, r3, #7
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d018      	beq.n	8000f12 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_DMA_Init+0xec>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	211c      	movs	r1, #28
 8000eea:	400b      	ands	r3, r1
 8000eec:	210f      	movs	r1, #15
 8000eee:	4099      	lsls	r1, r3
 8000ef0:	000b      	movs	r3, r1
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_DMA_Init+0xec>)
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_DMA_Init+0xec>)
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	201c      	movs	r0, #28
 8000f08:	4003      	ands	r3, r0
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_DMA_Init+0xec>)
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2225      	movs	r2, #37	@ 0x25
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2224      	movs	r2, #36	@ 0x24
 8000f24:	2100      	movs	r1, #0
 8000f26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	bffdfff8 	.word	0xbffdfff8
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	ffff800f 	.word	0xffff800f
 8000f40:	400200a8 	.word	0x400200a8

08000f44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2317      	movs	r3, #23
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2224      	movs	r2, #36	@ 0x24
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_DMA_Start_IT+0x24>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e04f      	b.n	8001008 <HAL_DMA_Start_IT+0xc4>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2224      	movs	r2, #36	@ 0x24
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2225      	movs	r2, #37	@ 0x25
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d13a      	bne.n	8000ff2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2225      	movs	r2, #37	@ 0x25
 8000f80:	2102      	movs	r1, #2
 8000f82:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	438a      	bics	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f974 	bl	800128e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d008      	beq.n	8000fc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	210e      	movs	r1, #14
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00f      	b.n	8000fe0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2104      	movs	r1, #4
 8000fcc:	438a      	bics	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	210a      	movs	r1, #10
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e007      	b.n	8001002 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2224      	movs	r2, #36	@ 0x24
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ffa:	2317      	movs	r3, #23
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001002:	2317      	movs	r3, #23
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b006      	add	sp, #24
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001018:	230f      	movs	r3, #15
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2225      	movs	r2, #37	@ 0x25
 8001024:	5c9b      	ldrb	r3, [r3, r2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d008      	beq.n	800103e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2224      	movs	r2, #36	@ 0x24
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e024      	b.n	8001088 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	210e      	movs	r1, #14
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	221c      	movs	r2, #28
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	2101      	movs	r1, #1
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2225      	movs	r2, #37	@ 0x25
 8001076:	2101      	movs	r1, #1
 8001078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2224      	movs	r2, #36	@ 0x24
 800107e:	2100      	movs	r1, #0
 8001080:	5499      	strb	r1, [r3, r2]

    return status;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	210f      	movs	r1, #15
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2225      	movs	r2, #37	@ 0x25
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d006      	beq.n	80010ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e02a      	b.n	8001110 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	210e      	movs	r1, #14
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	438a      	bics	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	221c      	movs	r2, #28
 80010e0:	401a      	ands	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	2101      	movs	r1, #1
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2225      	movs	r2, #37	@ 0x25
 80010f2:	2101      	movs	r1, #1
 80010f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2224      	movs	r2, #36	@ 0x24
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	0010      	movs	r0, r2
 800110e:	4798      	blx	r3
    }
  }
  return status;
 8001110:	230f      	movs	r3, #15
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	781b      	ldrb	r3, [r3, #0]
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	221c      	movs	r2, #28
 800113c:	4013      	ands	r3, r2
 800113e:	2204      	movs	r2, #4
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	d026      	beq.n	8001198 <HAL_DMA_IRQHandler+0x7a>
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2204      	movs	r2, #4
 800114e:	4013      	ands	r3, r2
 8001150:	d022      	beq.n	8001198 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2220      	movs	r2, #32
 800115a:	4013      	ands	r3, r2
 800115c:	d107      	bne.n	800116e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2104      	movs	r1, #4
 800116a:	438a      	bics	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	221c      	movs	r2, #28
 8001174:	401a      	ands	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	2104      	movs	r1, #4
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <HAL_DMA_IRQHandler+0x6e>
 800118a:	e071      	b.n	8001270 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	0010      	movs	r0, r2
 8001194:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001196:	e06b      	b.n	8001270 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119c:	221c      	movs	r2, #28
 800119e:	4013      	ands	r3, r2
 80011a0:	2202      	movs	r2, #2
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	d02d      	beq.n	8001208 <HAL_DMA_IRQHandler+0xea>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d029      	beq.n	8001208 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2220      	movs	r2, #32
 80011bc:	4013      	ands	r3, r2
 80011be:	d10b      	bne.n	80011d8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	210a      	movs	r1, #10
 80011cc:	438a      	bics	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2225      	movs	r2, #37	@ 0x25
 80011d4:	2101      	movs	r1, #1
 80011d6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011dc:	221c      	movs	r2, #28
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	2102      	movs	r1, #2
 80011e6:	4091      	lsls	r1, r2
 80011e8:	000a      	movs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	@ 0x24
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d039      	beq.n	8001270 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	0010      	movs	r0, r2
 8001204:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001206:	e033      	b.n	8001270 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120c:	221c      	movs	r2, #28
 800120e:	4013      	ands	r3, r2
 8001210:	2208      	movs	r2, #8
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	d02a      	beq.n	8001272 <HAL_DMA_IRQHandler+0x154>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2208      	movs	r2, #8
 8001220:	4013      	ands	r3, r2
 8001222:	d026      	beq.n	8001272 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	210e      	movs	r1, #14
 8001230:	438a      	bics	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001238:	221c      	movs	r2, #28
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	2101      	movs	r1, #1
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2225      	movs	r2, #37	@ 0x25
 8001252:	2101      	movs	r1, #1
 8001254:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2224      	movs	r2, #36	@ 0x24
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	0010      	movs	r0, r2
 800126e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46c0      	nop			@ (mov r8, r8)
}
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}

0800128e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	221c      	movs	r2, #28
 80012a2:	401a      	ands	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	2101      	movs	r1, #1
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d108      	bne.n	80012d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012d0:	e007      	b.n	80012e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	60da      	str	r2, [r3, #12]
}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001302:	e155      	b.n	80015b0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x30>
 800131a:	e146      	b.n	80015aa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	2201      	movs	r2, #1
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	4013      	ands	r3, r2
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	58d3      	ldr	r3, [r2, r3]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2207      	movs	r2, #7
 80013f0:	4013      	ands	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2107      	movs	r1, #7
 800140a:	400b      	ands	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	23c0      	movs	r3, #192	@ 0xc0
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d100      	bne.n	8001468 <HAL_GPIO_Init+0x17c>
 8001466:	e0a0      	b.n	80015aa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b57      	ldr	r3, [pc, #348]	@ (80015c8 <HAL_GPIO_Init+0x2dc>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800146c:	4b56      	ldr	r3, [pc, #344]	@ (80015c8 <HAL_GPIO_Init+0x2dc>)
 800146e:	2101      	movs	r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001474:	4a55      	ldr	r2, [pc, #340]	@ (80015cc <HAL_GPIO_Init+0x2e0>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	589b      	ldr	r3, [r3, r2]
 8001480:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2203      	movs	r2, #3
 8001486:	4013      	ands	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	409a      	lsls	r2, r3
 800148e:	0013      	movs	r3, r2
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	23a0      	movs	r3, #160	@ 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	429a      	cmp	r2, r3
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x1f6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <HAL_GPIO_Init+0x2e4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x1f2>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a49      	ldr	r2, [pc, #292]	@ (80015d4 <HAL_GPIO_Init+0x2e8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1ee>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a48      	ldr	r2, [pc, #288]	@ (80015d8 <HAL_GPIO_Init+0x2ec>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1ea>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <HAL_GPIO_Init+0x2f0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1e6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <HAL_GPIO_Init+0x2f4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1e2>
 80014ca:	2305      	movs	r3, #5
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014ce:	2306      	movs	r3, #6
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x1f8>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	2103      	movs	r1, #3
 80014e8:	400a      	ands	r2, r1
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	@ (80015cc <HAL_GPIO_Init+0x2e0>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43da      	mvns	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	035b      	lsls	r3, r3, #13
 800151a:	4013      	ands	r3, r2
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	4013      	ands	r3, r2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	4013      	ands	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	40da      	lsrs	r2, r3
 80015b8:	1e13      	subs	r3, r2, #0
 80015ba:	d000      	beq.n	80015be <HAL_GPIO_Init+0x2d2>
 80015bc:	e6a2      	b.n	8001304 <HAL_GPIO_Init+0x18>
  }
}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b006      	add	sp, #24
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	50000400 	.word	0x50000400
 80015d4:	50000800 	.word	0x50000800
 80015d8:	50000c00 	.word	0x50000c00
 80015dc:	50001000 	.word	0x50001000
 80015e0:	50001c00 	.word	0x50001c00
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	0008      	movs	r0, r1
 80015f2:	0011      	movs	r1, r2
 80015f4:	1cbb      	adds	r3, r7, #2
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	1c7b      	adds	r3, r7, #1
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001600:	1c7b      	adds	r3, r7, #1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001608:	1cbb      	adds	r3, r7, #2
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001612:	1cbb      	adds	r3, r7, #2
 8001614:	881a      	ldrh	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	f000 fbbf 	bl	8001db6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001638:	4bc9      	ldr	r3, [pc, #804]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	220c      	movs	r2, #12
 800163e:	4013      	ands	r3, r2
 8001640:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001642:	4bc7      	ldr	r3, [pc, #796]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x36>
 8001658:	e07e      	b.n	8001758 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d007      	beq.n	8001670 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d112      	bne.n	800168c <HAL_RCC_OscConfig+0x68>
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	025b      	lsls	r3, r3, #9
 800166c:	429a      	cmp	r2, r3
 800166e:	d10d      	bne.n	800168c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4bbb      	ldr	r3, [pc, #748]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d100      	bne.n	800167e <HAL_RCC_OscConfig+0x5a>
 800167c:	e06b      	b.n	8001756 <HAL_RCC_OscConfig+0x132>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d167      	bne.n	8001756 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f000 fb95 	bl	8001db6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x84>
 8001698:	4bb1      	ldr	r3, [pc, #708]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4bb0      	ldr	r3, [pc, #704]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800169e:	2180      	movs	r1, #128	@ 0x80
 80016a0:	0249      	lsls	r1, r1, #9
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e027      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	23a0      	movs	r3, #160	@ 0xa0
 80016ae:	02db      	lsls	r3, r3, #11
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10e      	bne.n	80016d2 <HAL_RCC_OscConfig+0xae>
 80016b4:	4baa      	ldr	r3, [pc, #680]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4ba9      	ldr	r3, [pc, #676]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016ba:	2180      	movs	r1, #128	@ 0x80
 80016bc:	02c9      	lsls	r1, r1, #11
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	4ba7      	ldr	r3, [pc, #668]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4ba6      	ldr	r3, [pc, #664]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0249      	lsls	r1, r1, #9
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e012      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016d2:	4ba3      	ldr	r3, [pc, #652]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016d8:	49a2      	ldr	r1, [pc, #648]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016da:	400a      	ands	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	4ba0      	ldr	r3, [pc, #640]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b9b      	ldr	r3, [pc, #620]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80016f2:	499d      	ldr	r1, [pc, #628]	@ (8001968 <HAL_RCC_OscConfig+0x344>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d015      	beq.n	800172c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fa9c 	bl	8000c3c <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001708:	e009      	b.n	800171e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fa97 	bl	8000c3c <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	@ 0x64
 8001716:	d902      	bls.n	800171e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	f000 fb4c 	bl	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171e:	4b90      	ldr	r3, [pc, #576]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d0ef      	beq.n	800170a <HAL_RCC_OscConfig+0xe6>
 800172a:	e015      	b.n	8001758 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa86 	bl	8000c3c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001736:	f7ff fa81 	bl	8000c3c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b64      	cmp	r3, #100	@ 0x64
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e336      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001748:	4b85      	ldr	r3, [pc, #532]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4013      	ands	r3, r2
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x112>
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d100      	bne.n	8001764 <HAL_RCC_OscConfig+0x140>
 8001762:	e099      	b.n	8001898 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	2220      	movs	r2, #32
 800176e:	4013      	ands	r3, r2
 8001770:	d009      	beq.n	8001786 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001772:	4b7b      	ldr	r3, [pc, #492]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b7a      	ldr	r3, [pc, #488]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001778:	2120      	movs	r1, #32
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	2220      	movs	r2, #32
 8001782:	4393      	bics	r3, r2
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d13e      	bne.n	8001810 <HAL_RCC_OscConfig+0x1ec>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d13b      	bne.n	8001810 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001798:	4b71      	ldr	r3, [pc, #452]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2204      	movs	r2, #4
 800179e:	4013      	ands	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x188>
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e304      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a6e      	ldr	r2, [pc, #440]	@ (800196c <HAL_RCC_OscConfig+0x348>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	021a      	lsls	r2, r3, #8
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2209      	movs	r2, #9
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b64      	ldr	r3, [pc, #400]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d4:	f000 fc42 	bl	800205c <HAL_RCC_GetSysClockFreq>
 80017d8:	0001      	movs	r1, r0
 80017da:	4b61      	ldr	r3, [pc, #388]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	220f      	movs	r2, #15
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a62      	ldr	r2, [pc, #392]	@ (8001970 <HAL_RCC_OscConfig+0x34c>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	000a      	movs	r2, r1
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_RCC_OscConfig+0x350>)
 80017ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017f0:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x354>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2513      	movs	r5, #19
 80017f6:	197c      	adds	r4, r7, r5
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff f9d9 	bl	8000bb0 <HAL_InitTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d046      	beq.n	8001898 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800180a:	197b      	adds	r3, r7, r5
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	e2d2      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d027      	beq.n	8001866 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001816:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2209      	movs	r2, #9
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	4b4f      	ldr	r3, [pc, #316]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa08 	bl	8000c3c <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fa03 	bl	8000c3c <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e2b8      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001844:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2204      	movs	r2, #4
 800184a:	4013      	ands	r3, r2
 800184c:	d0f1      	beq.n	8001832 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a46      	ldr	r2, [pc, #280]	@ (800196c <HAL_RCC_OscConfig+0x348>)
 8001854:	4013      	ands	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	4b40      	ldr	r3, [pc, #256]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800186c:	2101      	movs	r1, #1
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff f9e3 	bl	8000c3c <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff f9de 	bl	8000c3c <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e293      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2204      	movs	r2, #4
 8001894:	4013      	ands	r3, r2
 8001896:	d1f1      	bne.n	800187c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_RCC_OscConfig+0x280>
 80018a2:	e0a2      	b.n	80019ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d140      	bne.n	800192c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x29e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e279      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <HAL_RCC_OscConfig+0x358>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	0a19      	lsrs	r1, r3, #8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	061a      	lsls	r2, r3, #24
 80018e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	0b5b      	lsrs	r3, r3, #13
 80018f0:	3301      	adds	r3, #1
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	0212      	lsls	r2, r2, #8
 80018f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	210f      	movs	r1, #15
 8001900:	400b      	ands	r3, r1
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x34c>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_RCC_OscConfig+0x350>)
 800190a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <HAL_RCC_OscConfig+0x354>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2513      	movs	r5, #19
 8001912:	197c      	adds	r4, r7, r5
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff f94b 	bl	8000bb0 <HAL_InitTick>
 800191a:	0003      	movs	r3, r0
 800191c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800191e:	197b      	adds	r3, r7, r5
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d061      	beq.n	80019ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	e244      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d040      	beq.n	80019b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_OscConfig+0x33c>)
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0049      	lsls	r1, r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f97b 	bl	8000c3c <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800194a:	e019      	b.n	8001980 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff f976 	bl	8000c3c <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d912      	bls.n	8001980 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e22b      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	fffeffff 	.word	0xfffeffff
 8001968:	fffbffff 	.word	0xfffbffff
 800196c:	ffffe0ff 	.word	0xffffe0ff
 8001970:	08005268 	.word	0x08005268
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004
 800197c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001980:	4bca      	ldr	r3, [pc, #808]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d0df      	beq.n	800194c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4bc7      	ldr	r3, [pc, #796]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4ac7      	ldr	r2, [pc, #796]	@ (8001cb0 <HAL_RCC_OscConfig+0x68c>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199a:	4bc4      	ldr	r3, [pc, #784]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a0:	4bc2      	ldr	r3, [pc, #776]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	0a19      	lsrs	r1, r3, #8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	061a      	lsls	r2, r3, #24
 80019ae:	4bbf      	ldr	r3, [pc, #764]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	e019      	b.n	80019ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019b6:	4bbd      	ldr	r3, [pc, #756]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4bbc      	ldr	r3, [pc, #752]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019bc:	49bd      	ldr	r1, [pc, #756]	@ (8001cb4 <HAL_RCC_OscConfig+0x690>)
 80019be:	400a      	ands	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f93b 	bl	8000c3c <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff f936 	bl	8000c3c <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1eb      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019de:	4bb3      	ldr	r3, [pc, #716]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2208      	movs	r2, #8
 80019f0:	4013      	ands	r3, r2
 80019f2:	d036      	beq.n	8001a62 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d019      	beq.n	8001a30 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fc:	4bab      	ldr	r3, [pc, #684]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 80019fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a00:	4baa      	ldr	r3, [pc, #680]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f918 	bl	8000c3c <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f913 	bl	8000c3c <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1c8      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a24:	4ba1      	ldr	r3, [pc, #644]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d0f1      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3ee>
 8001a2e:	e018      	b.n	8001a62 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b9e      	ldr	r3, [pc, #632]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a34:	4b9d      	ldr	r3, [pc, #628]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	438a      	bics	r2, r1
 8001a3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f8fe 	bl	8000c3c <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff f8f9 	bl	8000c3c <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1ae      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a58:	4b94      	ldr	r3, [pc, #592]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f1      	bne.n	8001a46 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2204      	movs	r2, #4
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCC_OscConfig+0x44a>
 8001a6c:	e0ae      	b.n	8001bcc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2023      	movs	r0, #35	@ 0x23
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b8d      	ldr	r3, [pc, #564]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	055b      	lsls	r3, r3, #21
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a86:	4b89      	ldr	r3, [pc, #548]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x694>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d11a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_RCC_OscConfig+0x694>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b84      	ldr	r3, [pc, #528]	@ (8001cb8 <HAL_RCC_OscConfig+0x694>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f8c4 	bl	8000c3c <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f8bf 	bl	8000c3c <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	@ 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e174      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <HAL_RCC_OscConfig+0x694>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4d0>
 8001ae4:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ae8:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001aea:	2180      	movs	r1, #128	@ 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001af2:	e031      	b.n	8001b58 <HAL_RCC_OscConfig+0x534>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4f2>
 8001afc:	4b6b      	ldr	r3, [pc, #428]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001afe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b00:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b02:	496c      	ldr	r1, [pc, #432]	@ (8001cb4 <HAL_RCC_OscConfig+0x690>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b08:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b0c:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b0e:	496b      	ldr	r1, [pc, #428]	@ (8001cbc <HAL_RCC_OscConfig+0x698>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b14:	e020      	b.n	8001b58 <HAL_RCC_OscConfig+0x534>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	23a0      	movs	r3, #160	@ 0xa0
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10e      	bne.n	8001b40 <HAL_RCC_OscConfig+0x51c>
 8001b22:	4b62      	ldr	r3, [pc, #392]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	00c9      	lsls	r1, r1, #3
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b30:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b34:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	0049      	lsls	r1, r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x534>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b44:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b46:	495b      	ldr	r1, [pc, #364]	@ (8001cb4 <HAL_RCC_OscConfig+0x690>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b50:	4b56      	ldr	r3, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b52:	495a      	ldr	r1, [pc, #360]	@ (8001cbc <HAL_RCC_OscConfig+0x698>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff f86c 	bl	8000c3c <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f867 	bl	8000c3c <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a52      	ldr	r2, [pc, #328]	@ (8001cc0 <HAL_RCC_OscConfig+0x69c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e11b      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0ef      	beq.n	8001b6a <HAL_RCC_OscConfig+0x546>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f856 	bl	8000c3c <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff f851 	bl	8000c3c <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a47      	ldr	r2, [pc, #284]	@ (8001cc0 <HAL_RCC_OscConfig+0x69c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e105      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bb6:	2323      	movs	r3, #35	@ 0x23
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001bc6:	493f      	ldr	r1, [pc, #252]	@ (8001cc4 <HAL_RCC_OscConfig+0x6a0>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d049      	beq.n	8001c6a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d026      	beq.n	8001c2c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001be4:	2101      	movs	r1, #1
 8001be6:	430a      	orrs	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bee:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bf6:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <HAL_RCC_OscConfig+0x6a4>)
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_RCC_OscConfig+0x6a4>)
 8001bfc:	2180      	movs	r1, #128	@ 0x80
 8001bfe:	0189      	lsls	r1, r1, #6
 8001c00:	430a      	orrs	r2, r1
 8001c02:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff f81a 	bl	8000c3c <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0e:	f7ff f815 	bl	8000c3c <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0ca      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d0f1      	beq.n	8001c0e <HAL_RCC_OscConfig+0x5ea>
 8001c2a:	e01e      	b.n	8001c6a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	438a      	bics	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_RCC_OscConfig+0x6a4>)
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <HAL_RCC_OscConfig+0x6a4>)
 8001c3e:	4923      	ldr	r1, [pc, #140]	@ (8001ccc <HAL_RCC_OscConfig+0x6a8>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe fffa 	bl	8000c3c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4e:	f7fe fff5 	bl	8000c3c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0aa      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f1      	bne.n	8001c4e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x650>
 8001c72:	e09f      	b.n	8001db4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x658>
 8001c7a:	e078      	b.n	8001d6e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d159      	bne.n	8001d38 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_RCC_OscConfig+0x688>)
 8001c8a:	4911      	ldr	r1, [pc, #68]	@ (8001cd0 <HAL_RCC_OscConfig+0x6ac>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffd4 	bl	8000c3c <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe ffcf 	bl	8000c3c <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d915      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e084      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	ffff1fff 	.word	0xffff1fff
 8001cb4:	fffffeff 	.word	0xfffffeff
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	fffffbff 	.word	0xfffffbff
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	efffffff 	.word	0xefffffff
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	ffffdfff 	.word	0xffffdfff
 8001cd0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	049b      	lsls	r3, r3, #18
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d1dc      	bne.n	8001c9a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <HAL_RCC_OscConfig+0x7a0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	0449      	lsls	r1, r1, #17
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff95 	bl	8000c3c <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe ff90 	bl	8000c3c <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e045      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d2a:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	4013      	ands	r3, r2
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x6f4>
 8001d36:	e03d      	b.n	8001db4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d3e:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <HAL_RCC_OscConfig+0x7a4>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff7a 	bl	8000c3c <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe ff75 	bl	8000c3c <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e02a      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	049b      	lsls	r3, r3, #18
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x72a>
 8001d6c:	e022      	b.n	8001db4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01d      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_RCC_OscConfig+0x79c>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	23f0      	movs	r3, #240	@ 0xf0
 8001d94:	039b      	lsls	r3, r3, #14
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	23c0      	movs	r3, #192	@ 0xc0
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b00a      	add	sp, #40	@ 0x28
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	ff02ffff 	.word	0xff02ffff
 8001dc8:	feffffff 	.word	0xfeffffff

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e128      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b96      	ldr	r3, [pc, #600]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d91e      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b93      	ldr	r3, [pc, #588]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4393      	bics	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	4b90      	ldr	r3, [pc, #576]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e00:	f7fe ff1c 	bl	8000c3c <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0a:	f7fe ff17 	bl	8000c3c <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4a8a      	ldr	r2, [pc, #552]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e109      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b87      	ldr	r3, [pc, #540]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e36:	4b83      	ldr	r3, [pc, #524]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	22f0      	movs	r2, #240	@ 0xf0
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b7f      	ldr	r3, [pc, #508]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
 8001e54:	e089      	b.n	8001f6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e5e:	4b79      	ldr	r3, [pc, #484]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	4013      	ands	r3, r2
 8001e68:	d120      	bne.n	8001eac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e1      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e76:	4b73      	ldr	r3, [pc, #460]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	049b      	lsls	r3, r3, #18
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d114      	bne.n	8001eac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0d5      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	4013      	ands	r3, r2
 8001e96:	d109      	bne.n	8001eac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ca      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e9c:	4b69      	ldr	r3, [pc, #420]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0c2      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eac:	4b65      	ldr	r3, [pc, #404]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7fe febc 	bl	8000c3c <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d111      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7fe feb3 	bl	8000c3c <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0a5      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee6:	4b57      	ldr	r3, [pc, #348]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	220c      	movs	r2, #12
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d1ef      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x106>
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d111      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efe:	f7fe fe9d 	bl	8000c3c <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e08f      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f12:	4b4c      	ldr	r3, [pc, #304]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	220c      	movs	r2, #12
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_ClockConfig+0x132>
 8001f1e:	e024      	b.n	8001f6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d11b      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7fe fe87 	bl	8000c3c <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a42      	ldr	r2, [pc, #264]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e079      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b41      	ldr	r3, [pc, #260]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	220c      	movs	r2, #12
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d1ef      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x15e>
 8001f4a:	e00e      	b.n	8001f6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7fe fe76 	bl	8000c3c <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4a3a      	ldr	r2, [pc, #232]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e068      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	220c      	movs	r2, #12
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6a:	4b34      	ldr	r3, [pc, #208]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d21e      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f78:	4b30      	ldr	r3, [pc, #192]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fe57 	bl	8000c3c <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fe52 	bl	8000c3c <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	4a28      	ldr	r2, [pc, #160]	@ (8002040 <HAL_RCC_ClockConfig+0x274>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e044      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa8:	4b24      	ldr	r3, [pc, #144]	@ (800203c <HAL_RCC_ClockConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d1ee      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	@ (8002048 <HAL_RCC_ClockConfig+0x27c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <HAL_RCC_ClockConfig+0x280>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	00da      	lsls	r2, r3, #3
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff4:	f000 f832 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_RCC_ClockConfig+0x278>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	220f      	movs	r2, #15
 8002002:	4013      	ands	r3, r2
 8002004:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <HAL_RCC_ClockConfig+0x284>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	000a      	movs	r2, r1
 800200a:	40da      	lsrs	r2, r3
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_ClockConfig+0x288>)
 800200e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_RCC_ClockConfig+0x28c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	250b      	movs	r5, #11
 8002016:	197c      	adds	r4, r7, r5
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fdc9 	bl	8000bb0 <HAL_InitTick>
 800201e:	0003      	movs	r3, r0
 8002020:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002022:	197b      	adds	r3, r7, r5
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800202a:	197b      	adds	r3, r7, r5
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	e000      	b.n	8002032 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b004      	add	sp, #16
 8002038:	bdb0      	pop	{r4, r5, r7, pc}
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	40022000 	.word	0x40022000
 8002040:	00001388 	.word	0x00001388
 8002044:	40021000 	.word	0x40021000
 8002048:	fffff8ff 	.word	0xfffff8ff
 800204c:	ffffc7ff 	.word	0xffffc7ff
 8002050:	08005268 	.word	0x08005268
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002062:	4b3c      	ldr	r3, [pc, #240]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	220c      	movs	r2, #12
 800206c:	4013      	ands	r3, r2
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d013      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x3e>
 8002072:	d85c      	bhi.n	800212e <HAL_RCC_GetSysClockFreq+0xd2>
 8002074:	2b04      	cmp	r3, #4
 8002076:	d002      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x22>
 8002078:	2b08      	cmp	r3, #8
 800207a:	d00b      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x38>
 800207c:	e057      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800207e:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	4013      	ands	r3, r2
 8002086:	d002      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002088:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xfc>)
 800208a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800208c:	e05d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800208e:	4b33      	ldr	r3, [pc, #204]	@ (800215c <HAL_RCC_GetSysClockFreq+0x100>)
 8002090:	613b      	str	r3, [r7, #16]
      break;
 8002092:	e05a      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x104>)
 8002096:	613b      	str	r3, [r7, #16]
      break;
 8002098:	e057      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	220f      	movs	r2, #15
 80020a0:	4013      	ands	r3, r2
 80020a2:	4a30      	ldr	r2, [pc, #192]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0d9b      	lsrs	r3, r3, #22
 80020ac:	2203      	movs	r2, #3
 80020ae:	4013      	ands	r3, r2
 80020b0:	3301      	adds	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	025b      	lsls	r3, r3, #9
 80020bc:	4013      	ands	r3, r2
 80020be:	d00f      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	000a      	movs	r2, r1
 80020c4:	0152      	lsls	r2, r2, #5
 80020c6:	1a52      	subs	r2, r2, r1
 80020c8:	0193      	lsls	r3, r2, #6
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	185b      	adds	r3, r3, r1
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe f81f 	bl	8000118 <__udivsi3>
 80020da:	0003      	movs	r3, r0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e023      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2210      	movs	r2, #16
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00f      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	000a      	movs	r2, r1
 80020ee:	0152      	lsls	r2, r2, #5
 80020f0:	1a52      	subs	r2, r2, r1
 80020f2:	0193      	lsls	r3, r2, #6
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	185b      	adds	r3, r3, r1
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f7fe f80a 	bl	8000118 <__udivsi3>
 8002104:	0003      	movs	r3, r0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e00e      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	000a      	movs	r2, r1
 800210e:	0152      	lsls	r2, r2, #5
 8002110:	1a52      	subs	r2, r2, r1
 8002112:	0193      	lsls	r3, r2, #6
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	185b      	adds	r3, r3, r1
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f7fd fffa 	bl	8000118 <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
      break;
 800212c:	e00d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	2207      	movs	r2, #7
 8002136:	4013      	ands	r3, r2
 8002138:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	2280      	movs	r2, #128	@ 0x80
 8002140:	0212      	lsls	r2, r2, #8
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800214a:	693b      	ldr	r3, [r7, #16]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	003d0900 	.word	0x003d0900
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200
 8002164:	08005280 	.word	0x08005280

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	@ (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	0001      	movs	r1, r0
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	2207      	movs	r2, #7
 800218e:	4013      	ands	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	40d9      	lsrs	r1, r3
 8002196:	000b      	movs	r3, r1
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08005278 	.word	0x08005278

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffdc 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b0:	0001      	movs	r1, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	2207      	movs	r2, #7
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	000b      	movs	r3, r1
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08005278 	.word	0x08005278

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021dc:	2317      	movs	r3, #23
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2220      	movs	r2, #32
 80021ea:	4013      	ands	r3, r2
 80021ec:	d106      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4013      	ands	r3, r2
 80021f8:	d100      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80021fa:	e104      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4bb9      	ldr	r3, [pc, #740]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	055b      	lsls	r3, r3, #21
 8002204:	4013      	ands	r3, r2
 8002206:	d10a      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4bb6      	ldr	r3, [pc, #728]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800220a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800220c:	4bb5      	ldr	r3, [pc, #724]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	0549      	lsls	r1, r1, #21
 8002212:	430a      	orrs	r2, r1
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4bb2      	ldr	r3, [pc, #712]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	@ 0x80
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d11a      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4baf      	ldr	r3, [pc, #700]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4bae      	ldr	r3, [pc, #696]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002230:	2180      	movs	r1, #128	@ 0x80
 8002232:	0049      	lsls	r1, r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002238:	f7fe fd00 	bl	8000c3c <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fcfb 	bl	8000c3c <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	@ 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e143      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4ba4      	ldr	r3, [pc, #656]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d0f0      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002260:	4ba0      	ldr	r3, [pc, #640]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	23c0      	movs	r3, #192	@ 0xc0
 8002266:	039b      	lsls	r3, r3, #14
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	23c0      	movs	r3, #192	@ 0xc0
 8002272:	039b      	lsls	r3, r3, #14
 8002274:	4013      	ands	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	23c0      	movs	r3, #192	@ 0xc0
 8002282:	039b      	lsls	r3, r3, #14
 8002284:	4013      	ands	r3, r2
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d013      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	23c0      	movs	r3, #192	@ 0xc0
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	401a      	ands	r2, r3
 8002296:	23c0      	movs	r3, #192	@ 0xc0
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	429a      	cmp	r2, r3
 800229c:	d10a      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800229e:	4b91      	ldr	r3, [pc, #580]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	029b      	lsls	r3, r3, #10
 80022a6:	401a      	ands	r2, r3
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d101      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e113      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022b4:	4b8b      	ldr	r3, [pc, #556]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022b8:	23c0      	movs	r3, #192	@ 0xc0
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d049      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	23c0      	movs	r3, #192	@ 0xc0
 80022cc:	029b      	lsls	r3, r3, #10
 80022ce:	4013      	ands	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d004      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	4013      	ands	r3, r2
 80022de:	d10d      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	23c0      	movs	r3, #192	@ 0xc0
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d034      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	d02e      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022fc:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002300:	4a7a      	ldr	r2, [pc, #488]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002306:	4b77      	ldr	r3, [pc, #476]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800230a:	4b76      	ldr	r3, [pc, #472]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800230c:	2180      	movs	r1, #128	@ 0x80
 800230e:	0309      	lsls	r1, r1, #12
 8002310:	430a      	orrs	r2, r1
 8002312:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	4b73      	ldr	r3, [pc, #460]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002318:	4b72      	ldr	r3, [pc, #456]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800231a:	4975      	ldr	r1, [pc, #468]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800231c:	400a      	ands	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002320:	4b70      	ldr	r3, [pc, #448]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d014      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fc84 	bl	8000c3c <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002338:	e009      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fc7f 	bl	8000c3c <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a6b      	ldr	r2, [pc, #428]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0c6      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234e:	4b65      	ldr	r3, [pc, #404]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d0ef      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4013      	ands	r3, r2
 8002364:	d01f      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	23c0      	movs	r3, #192	@ 0xc0
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	401a      	ands	r2, r3
 8002370:	23c0      	movs	r3, #192	@ 0xc0
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	429a      	cmp	r2, r3
 8002376:	d10c      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002378:	4b5a      	ldr	r3, [pc, #360]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5e      	ldr	r2, [pc, #376]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	039b      	lsls	r3, r3, #14
 800238a:	401a      	ands	r2, r3
 800238c:	4b55      	ldr	r3, [pc, #340]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002394:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	23c0      	movs	r3, #192	@ 0xc0
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	401a      	ands	r2, r3
 80023a0:	4b50      	ldr	r3, [pc, #320]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d01f      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	23c0      	movs	r3, #192	@ 0xc0
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	401a      	ands	r2, r3
 80023ba:	23c0      	movs	r3, #192	@ 0xc0
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	429a      	cmp	r2, r3
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80023c2:	4b48      	ldr	r3, [pc, #288]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4c      	ldr	r2, [pc, #304]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	23c0      	movs	r3, #192	@ 0xc0
 80023d2:	039b      	lsls	r3, r3, #14
 80023d4:	401a      	ands	r2, r3
 80023d6:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	4b41      	ldr	r3, [pc, #260]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023de:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	23c0      	movs	r3, #192	@ 0xc0
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	401a      	ands	r2, r3
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f0:	2317      	movs	r3, #23
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023fe:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002400:	493e      	ldr	r1, [pc, #248]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002402:	400a      	ands	r2, r1
 8002404:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002410:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	2203      	movs	r2, #3
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002420:	430a      	orrs	r2, r1
 8002422:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	220c      	movs	r2, #12
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800243e:	430a      	orrs	r2, r1
 8002440:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d009      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800245c:	430a      	orrs	r2, r1
 800245e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	4013      	ands	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800247a:	430a      	orrs	r2, r1
 800247c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b16      	ldr	r3, [pc, #88]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800249a:	430a      	orrs	r2, r1
 800249c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2240      	movs	r2, #64	@ 0x40
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ac:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2280      	movs	r2, #128	@ 0x80
 80024c2:	4013      	ands	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a10      	ldr	r2, [pc, #64]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b006      	add	sp, #24
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
 80024ec:	fffcffff 	.word	0xfffcffff
 80024f0:	fff7ffff 	.word	0xfff7ffff
 80024f4:	00001388 	.word	0x00001388
 80024f8:	ffcfffff 	.word	0xffcfffff
 80024fc:	efffffff 	.word	0xefffffff
 8002500:	fffff3ff 	.word	0xfffff3ff
 8002504:	ffffcfff 	.word	0xffffcfff
 8002508:	fbffffff 	.word	0xfbffffff
 800250c:	fff3ffff 	.word	0xfff3ffff

08002510 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002518:	230f      	movs	r3, #15
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e088      	b.n	800263c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2221      	movs	r2, #33	@ 0x21
 800252e:	5c9b      	ldrb	r3, [r3, r2]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	2100      	movs	r1, #0
 800253c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f7fe f95f 	bl	8000804 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2221      	movs	r2, #33	@ 0x21
 800254a:	2102      	movs	r1, #2
 800254c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05f      	beq.n	800261c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	22ca      	movs	r2, #202	@ 0xca
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2253      	movs	r2, #83	@ 0x53
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800256c:	250f      	movs	r5, #15
 800256e:	197c      	adds	r4, r7, r5
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f890 	bl	8002698 <RTC_EnterInitMode>
 8002578:	0003      	movs	r3, r0
 800257a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800257c:	0028      	movs	r0, r5
 800257e:	183b      	adds	r3, r7, r0
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d12c      	bne.n	80025e0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	492c      	ldr	r1, [pc, #176]	@ (8002644 <HAL_RTC_Init+0x134>)
 8002592:	400a      	ands	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68d2      	ldr	r2, [r2, #12]
 80025bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025d2:	183c      	adds	r4, r7, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f8a2 	bl	8002720 <RTC_ExitInitMode>
 80025dc:	0003      	movs	r3, r0
 80025de:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80025e0:	230f      	movs	r3, #15
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d113      	bne.n	8002612 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2103      	movs	r1, #3
 80025f6:	438a      	bics	r2, r1
 80025f8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	22ff      	movs	r2, #255	@ 0xff
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
 800261a:	e003      	b.n	8002624 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800261c:	230f      	movs	r3, #15
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2221      	movs	r2, #33	@ 0x21
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002636:	230f      	movs	r3, #15
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	ff8fffbf 	.word	0xff8fffbf

08002648 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0e      	ldr	r2, [pc, #56]	@ (8002694 <HAL_RTC_WaitForSynchro+0x4c>)
 800265a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800265c:	f7fe faee 	bl	8000c3c <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002664:	e00a      	b.n	800267c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002666:	f7fe fae9 	bl	8000c3c <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	23fa      	movs	r3, #250	@ 0xfa
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d901      	bls.n	800267c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e006      	b.n	800268a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	4013      	ands	r3, r2
 8002686:	d0ee      	beq.n	8002666 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	0001ff5f 	.word	0x0001ff5f

08002698 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	230f      	movs	r3, #15
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	4013      	ands	r3, r2
 80026b6:	d12c      	bne.n	8002712 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2180      	movs	r1, #128	@ 0x80
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fab8 	bl	8000c3c <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026d0:	e014      	b.n	80026fc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026d2:	f7fe fab3 	bl	8000c3c <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	200f      	movs	r0, #15
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	1839      	adds	r1, r7, r0
 80026e2:	7809      	ldrb	r1, [r1, #0]
 80026e4:	7019      	strb	r1, [r3, #0]
 80026e6:	23fa      	movs	r3, #250	@ 0xfa
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d906      	bls.n	80026fc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2221      	movs	r2, #33	@ 0x21
 80026f2:	2104      	movs	r1, #4
 80026f4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	4013      	ands	r3, r2
 8002706:	d104      	bne.n	8002712 <RTC_EnterInitMode+0x7a>
 8002708:	230f      	movs	r3, #15
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d1df      	bne.n	80026d2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002712:	230f      	movs	r3, #15
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}

08002720 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	240f      	movs	r4, #15
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2180      	movs	r1, #128	@ 0x80
 800273c:	438a      	bics	r2, r1
 800273e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	d10c      	bne.n	8002766 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff ff7a 	bl	8002648 <HAL_RTC_WaitForSynchro>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d006      	beq.n	8002766 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2221      	movs	r2, #33	@ 0x21
 800275c:	2104      	movs	r1, #4
 800275e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002760:	193b      	adds	r3, r7, r4
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002766:	230f      	movs	r3, #15
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b005      	add	sp, #20
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <HAL_RTCEx_SetTamper_IT>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to RTC Tamper.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_RTCEx_SetTamper_IT+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e0d3      	b.n	8002938 <HAL_RTCEx_SetTamper_IT+0x1c4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	2101      	movs	r1, #1
 8002796:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2221      	movs	r2, #33	@ 0x21
 800279c:	2102      	movs	r1, #2
 800279e:	5499      	strb	r1, [r3, r2]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d106      	bne.n	80027c8 <HAL_RTCEx_SetTamper_IT+0x54>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e006      	b.n	80027d6 <HAL_RTCEx_SetTamper_IT+0x62>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the backup registers erasure enabling bits */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01e      	beq.n	800281c <HAL_RTCEx_SetTamper_IT+0xa8>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_RTCEx_SetTamper_IT+0x7e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	0292      	lsls	r2, r2, #10
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2208      	movs	r2, #8
 80027f8:	4013      	ands	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_RTCEx_SetTamper_IT+0x92>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2280      	movs	r2, #128	@ 0x80
 8002800:	0352      	lsls	r2, r2, #13
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2220      	movs	r2, #32
 800280c:	4013      	ands	r3, r2
 800280e:	d020      	beq.n	8002852 <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	0412      	lsls	r2, r2, #16
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e01a      	b.n	8002852 <HAL_RTCEx_SetTamper_IT+0xde>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d003      	beq.n	800282e <HAL_RTCEx_SetTamper_IT+0xba>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a45      	ldr	r2, [pc, #276]	@ (8002940 <HAL_RTCEx_SetTamper_IT+0x1cc>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2208      	movs	r2, #8
 8002834:	4013      	ands	r3, r2
 8002836:	d003      	beq.n	8002840 <HAL_RTCEx_SetTamper_IT+0xcc>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a42      	ldr	r2, [pc, #264]	@ (8002944 <HAL_RTCEx_SetTamper_IT+0x1d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2220      	movs	r2, #32
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a3e      	ldr	r2, [pc, #248]	@ (8002948 <HAL_RTCEx_SetTamper_IT+0x1d4>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Configure the tamper flags masking bits */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01e      	beq.n	8002898 <HAL_RTCEx_SetTamper_IT+0x124>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_RTCEx_SetTamper_IT+0xfa>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	02d2      	lsls	r2, r2, #11
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2208      	movs	r2, #8
 8002874:	4013      	ands	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_RTCEx_SetTamper_IT+0x10e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0392      	lsls	r2, r2, #14
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2220      	movs	r2, #32
 8002888:	4013      	ands	r3, r2
 800288a:	d020      	beq.n	80028ce <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0452      	lsls	r2, r2, #17
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e01a      	b.n	80028ce <HAL_RTCEx_SetTamper_IT+0x15a>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d003      	beq.n	80028aa <HAL_RTCEx_SetTamper_IT+0x136>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a29      	ldr	r2, [pc, #164]	@ (800294c <HAL_RTCEx_SetTamper_IT+0x1d8>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2208      	movs	r2, #8
 80028b0:	4013      	ands	r3, r2
 80028b2:	d003      	beq.n	80028bc <HAL_RTCEx_SetTamper_IT+0x148>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_RTCEx_SetTamper_IT+0x1dc>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2220      	movs	r2, #32
 80028c2:	4013      	ands	r3, r2
 80028c4:	d003      	beq.n	80028ce <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a22      	ldr	r2, [pc, #136]	@ (8002954 <HAL_RTCEx_SetTamper_IT+0x1e0>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a21      	ldr	r2, [pc, #132]	@ (8002958 <HAL_RTCEx_SetTamper_IT+0x1e4>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK   | \
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80028de:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 80028e4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 80028ea:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 80028f0:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Enable interrupt on selected tamper */
  tmpreg |= (uint32_t)sTamper->Interrupt;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Enable and configure the EXTI line associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 800290a:	4b14      	ldr	r3, [pc, #80]	@ (800295c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 8002910:	2180      	movs	r1, #128	@ 0x80
 8002912:	0309      	lsls	r1, r1, #12
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	0309      	lsls	r1, r1, #12
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2221      	movs	r2, #33	@ 0x21
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	fffdffff 	.word	0xfffdffff
 8002944:	ffefffff 	.word	0xffefffff
 8002948:	ff7fffff 	.word	0xff7fffff
 800294c:	fffbffff 	.word	0xfffbffff
 8002950:	ffdfffff 	.word	0xffdfffff
 8002954:	feffffff 	.word	0xfeffffff
 8002958:	ffff007f 	.word	0xffff007f
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8002968:	4b3c      	ldr	r3, [pc, #240]	@ (8002a5c <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0312      	lsls	r2, r2, #12
 800296e:	615a      	str	r2, [r3, #20]

  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	4013      	ands	r3, r2
 800297c:	d014      	beq.n	80029a8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d00d      	beq.n	80029a8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f874 	bl	8002a7c <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit after returning from callback
         as RTC_TSTR and RTC_TSDR registers are cleared when TSF bit is reset */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	22ff      	movs	r2, #255	@ 0xff
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	492f      	ldr	r1, [pc, #188]	@ (8002a60 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002a64 <HAL_RTCEx_TamperTimeStampIRQHandler+0x104>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	d014      	beq.n	80029de <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	4013      	ands	r3, r2
 80029c0:	d00d      	beq.n	80029de <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	22ff      	movs	r2, #255	@ 0xff
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <HAL_RTCEx_TamperTimeStampIRQHandler+0x108>)
 80029d2:	430a      	orrs	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f857 	bl	8002a8c <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <HAL_RTCEx_TamperTimeStampIRQHandler+0x10c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	d014      	beq.n	8002a14 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	01db      	lsls	r3, r3, #7
 80029f4:	4013      	ands	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	22ff      	movs	r2, #255	@ 0xff
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	491a      	ldr	r1, [pc, #104]	@ (8002a70 <HAL_RTCEx_TamperTimeStampIRQHandler+0x110>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 f844 	bl	8002a9c <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper 3 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a16      	ldr	r2, [pc, #88]	@ (8002a74 <HAL_RTCEx_TamperTimeStampIRQHandler+0x114>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d014      	beq.n	8002a4a <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
  {
    /* Get the pending status of the Tamper 3 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	22ff      	movs	r2, #255	@ 0xff
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	490e      	ldr	r1, [pc, #56]	@ (8002a78 <HAL_RTCEx_TamperTimeStampIRQHandler+0x118>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f831 	bl	8002aac <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2221      	movs	r2, #33	@ 0x21
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b002      	add	sp, #8
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	fffff77f 	.word	0xfffff77f
 8002a64:	00010004 	.word	0x00010004
 8002a68:	ffffdf7f 	.word	0xffffdf7f
 8002a6c:	00080004 	.word	0x00080004
 8002a70:	ffffbf7f 	.word	0xffffbf7f
 8002a74:	00400004 	.word	0x00400004
 8002a78:	ffff7f7f 	.word	0xffff7f7f

08002a7c <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ac8:	4b64      	ldr	r3, [pc, #400]	@ (8002c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	22fa      	movs	r2, #250	@ 0xfa
 8002ace:	01d1      	lsls	r1, r2, #7
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fd fb21 	bl	8000118 <__udivsi3>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	001a      	movs	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	015b      	lsls	r3, r3, #5
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0ad      	b.n	8002c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2221      	movs	r2, #33	@ 0x21
 8002b02:	2102      	movs	r1, #2
 8002b04:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	22ca      	movs	r2, #202	@ 0xca
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2253      	movs	r2, #83	@ 0x53
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	d019      	beq.n	8002b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	22ff      	movs	r2, #255	@ 0xff
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2221      	movs	r2, #33	@ 0x21
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e082      	b.n	8002c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	d1e5      	bne.n	8002b24 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	493f      	ldr	r1, [pc, #252]	@ (8002c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	401a      	ands	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	493b      	ldr	r1, [pc, #236]	@ (8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b7c:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	22fa      	movs	r2, #250	@ 0xfa
 8002b82:	01d1      	lsls	r1, r2, #7
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fd fac7 	bl	8000118 <__udivsi3>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	015b      	lsls	r3, r3, #5
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	22ff      	movs	r2, #255	@ 0xff
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2221      	movs	r2, #33	@ 0x21
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e046      	b.n	8002c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d0e5      	beq.n	8002b9c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2107      	movs	r1, #7
 8002bdc:	438a      	bics	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	0349      	lsls	r1, r1, #13
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002c06:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	0349      	lsls	r1, r1, #13
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2180      	movs	r1, #128	@ 0x80
 8002c20:	01c9      	lsls	r1, r1, #7
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	00c9      	lsls	r1, r1, #3
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	22ff      	movs	r2, #255	@ 0xff
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2221      	movs	r2, #33	@ 0x21
 8002c44:	2101      	movs	r1, #1
 8002c46:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	fffffbff 	.word	0xfffffbff
 8002c64:	fffffb7f 	.word	0xfffffb7f
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	0352      	lsls	r2, r2, #13
 8002c7a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	d014      	beq.n	8002cb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	22ff      	movs	r2, #255	@ 0xff
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f80c 	bl	8002ccc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2221      	movs	r2, #33	@ 0x21
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010400 	.word	0x40010400
 8002cc8:	fffffb7f 	.word	0xfffffb7f

08002ccc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e044      	b.n	8002d78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2278      	movs	r2, #120	@ 0x78
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd fe65 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2224      	movs	r2, #36	@ 0x24
 8002d0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 ffac 	bl	8003c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fd0a 	bl	8003748 <UART_SetConfig>
 8002d34:	0003      	movs	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01c      	b.n	8002d78 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <HAL_UART_Init+0xa4>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	212a      	movs	r1, #42	@ 0x2a
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f001 f83b 	bl	8003dec <UART_CheckIdleState>
 8002d76:	0003      	movs	r3, r0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	ffffb7ff 	.word	0xffffb7ff

08002d84 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	1dbb      	adds	r3, r7, #6
 8002d90:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d000      	beq.n	8002d9c <HAL_UART_Transmit_DMA+0x18>
 8002d9a:	e077      	b.n	8002e8c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_Transmit_DMA+0x26>
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06f      	b.n	8002e8e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d109      	bne.n	8002dce <HAL_UART_Transmit_DMA+0x4a>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e05f      	b.n	8002e8e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1dba      	adds	r2, r7, #6
 8002dd8:	2150      	movs	r1, #80	@ 0x50
 8002dda:	8812      	ldrh	r2, [r2, #0]
 8002ddc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1dba      	adds	r2, r7, #6
 8002de2:	2152      	movs	r1, #82	@ 0x52
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2284      	movs	r2, #132	@ 0x84
 8002dec:	2100      	movs	r1, #0
 8002dee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	@ 0x21
 8002df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d027      	beq.n	8002e4e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	4a25      	ldr	r2, [pc, #148]	@ (8002e98 <HAL_UART_Transmit_DMA+0x114>)
 8002e04:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	4a24      	ldr	r2, [pc, #144]	@ (8002e9c <HAL_UART_Transmit_DMA+0x118>)
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <HAL_UART_Transmit_DMA+0x11c>)
 8002e14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	0019      	movs	r1, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3328      	adds	r3, #40	@ 0x28
 8002e2e:	001a      	movs	r2, r3
 8002e30:	1dbb      	adds	r3, r7, #6
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f7fe f886 	bl	8000f44 <HAL_DMA_Start_IT>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2284      	movs	r2, #132	@ 0x84
 8002e40:	2110      	movs	r1, #16
 8002e42:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01f      	b.n	8002e8e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2240      	movs	r2, #64	@ 0x40
 8002e54:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e56:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5a:	613b      	str	r3, [r7, #16]
  return(result);
 8002e5c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	2301      	movs	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b008      	add	sp, #32
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	0800426d 	.word	0x0800426d
 8002e9c:	08004305 	.word	0x08004305
 8002ea0:	0800450b 	.word	0x0800450b

08002ea4 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8002eb2:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	21c0      	movs	r1, #192	@ 0xc0
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2280      	movs	r2, #128	@ 0x80
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b80      	cmp	r3, #128	@ 0x80
 8002eea:	d135      	bne.n	8002f58 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			@ (mov r8, r8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2180      	movs	r1, #128	@ 0x80
 8002f0e:	438a      	bics	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7fe f86c 	bl	8001010 <HAL_DMA_Abort>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d00d      	beq.n	8002f58 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fe f99a 	bl	800127a <HAL_DMA_GetError>
 8002f46:	0003      	movs	r3, r0
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d105      	bne.n	8002f58 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2284      	movs	r2, #132	@ 0x84
 8002f50:	2110      	movs	r1, #16
 8002f52:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e007      	b.n	8002f68 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2252      	movs	r2, #82	@ 0x52
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b00a      	add	sp, #40	@ 0x28
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b092      	sub	sp, #72	@ 0x48
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f78:	f3ef 8310 	mrs	r3, PRIMASK
 8002f7c:	623b      	str	r3, [r7, #32]
  return(result);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f82:	2301      	movs	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	494b      	ldr	r1, [pc, #300]	@ (80030c8 <HAL_UART_AbortReceive+0x158>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002faa:	f3ef 8310 	mrs	r3, PRIMASK
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fba:	f383 8810 	msr	PRIMASK, r3
}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	438a      	bics	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d118      	bne.n	8003016 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2110      	movs	r1, #16
 8003006:	438a      	bics	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	4013      	ands	r3, r2
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d135      	bne.n	8003090 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	60bb      	str	r3, [r7, #8]
  return(result);
 800302a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800302e:	2301      	movs	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			@ (mov r8, r8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2140      	movs	r1, #64	@ 0x40
 8003046:	438a      	bics	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	0018      	movs	r0, r3
 800306c:	f7fd ffd0 	bl	8001010 <HAL_DMA_Abort>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d00d      	beq.n	8003090 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe f8fe 	bl	800127a <HAL_DMA_GetError>
 800307e:	0003      	movs	r3, r0
 8003080:	2b20      	cmp	r3, #32
 8003082:	d105      	bne.n	8003090 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2284      	movs	r2, #132	@ 0x84
 8003088:	2110      	movs	r1, #16
 800308a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e017      	b.n	80030c0 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	225a      	movs	r2, #90	@ 0x5a
 8003094:	2100      	movs	r1, #0
 8003096:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	220f      	movs	r2, #15
 800309e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2108      	movs	r1, #8
 80030ac:	430a      	orrs	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	@ 0x80
 80030b4:	2120      	movs	r1, #32
 80030b6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b012      	add	sp, #72	@ 0x48
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	fffffedf 	.word	0xfffffedf

080030cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b0ab      	sub	sp, #172	@ 0xac
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	22a4      	movs	r2, #164	@ 0xa4
 80030dc:	18b9      	adds	r1, r7, r2
 80030de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	20a0      	movs	r0, #160	@ 0xa0
 80030e8:	1839      	adds	r1, r7, r0
 80030ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	219c      	movs	r1, #156	@ 0x9c
 80030f4:	1879      	adds	r1, r7, r1
 80030f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030f8:	0011      	movs	r1, r2
 80030fa:	18bb      	adds	r3, r7, r2
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a99      	ldr	r2, [pc, #612]	@ (8003364 <HAL_UART_IRQHandler+0x298>)
 8003100:	4013      	ands	r3, r2
 8003102:	2298      	movs	r2, #152	@ 0x98
 8003104:	18bc      	adds	r4, r7, r2
 8003106:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003108:	18bb      	adds	r3, r7, r2
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d114      	bne.n	800313a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003110:	187b      	adds	r3, r7, r1
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	4013      	ands	r3, r2
 8003118:	d00f      	beq.n	800313a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800311a:	183b      	adds	r3, r7, r0
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d00a      	beq.n	800313a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <HAL_UART_IRQHandler+0x62>
 800312c:	e2be      	b.n	80036ac <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	0010      	movs	r0, r2
 8003136:	4798      	blx	r3
      }
      return;
 8003138:	e2b8      	b.n	80036ac <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800313a:	2398      	movs	r3, #152	@ 0x98
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d100      	bne.n	8003146 <HAL_UART_IRQHandler+0x7a>
 8003144:	e114      	b.n	8003370 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003146:	239c      	movs	r3, #156	@ 0x9c
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d106      	bne.n	8003160 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003152:	23a0      	movs	r3, #160	@ 0xa0
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a83      	ldr	r2, [pc, #524]	@ (8003368 <HAL_UART_IRQHandler+0x29c>)
 800315a:	4013      	ands	r3, r2
 800315c:	d100      	bne.n	8003160 <HAL_UART_IRQHandler+0x94>
 800315e:	e107      	b.n	8003370 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003160:	23a4      	movs	r3, #164	@ 0xa4
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d012      	beq.n	8003192 <HAL_UART_IRQHandler+0xc6>
 800316c:	23a0      	movs	r3, #160	@ 0xa0
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4013      	ands	r3, r2
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2284      	movs	r2, #132	@ 0x84
 8003186:	589b      	ldr	r3, [r3, r2]
 8003188:	2201      	movs	r2, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2184      	movs	r1, #132	@ 0x84
 8003190:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003192:	23a4      	movs	r3, #164	@ 0xa4
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d011      	beq.n	80031c2 <HAL_UART_IRQHandler+0xf6>
 800319e:	239c      	movs	r3, #156	@ 0x9c
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2202      	movs	r2, #2
 80031b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2284      	movs	r2, #132	@ 0x84
 80031b6:	589b      	ldr	r3, [r3, r2]
 80031b8:	2204      	movs	r2, #4
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2184      	movs	r1, #132	@ 0x84
 80031c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031c2:	23a4      	movs	r3, #164	@ 0xa4
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	d011      	beq.n	80031f2 <HAL_UART_IRQHandler+0x126>
 80031ce:	239c      	movs	r3, #156	@ 0x9c
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2284      	movs	r2, #132	@ 0x84
 80031e6:	589b      	ldr	r3, [r3, r2]
 80031e8:	2202      	movs	r2, #2
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2184      	movs	r1, #132	@ 0x84
 80031f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031f2:	23a4      	movs	r3, #164	@ 0xa4
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2208      	movs	r2, #8
 80031fa:	4013      	ands	r3, r2
 80031fc:	d017      	beq.n	800322e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031fe:	23a0      	movs	r3, #160	@ 0xa0
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	4013      	ands	r3, r2
 8003208:	d105      	bne.n	8003216 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800320a:	239c      	movs	r3, #156	@ 0x9c
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003214:	d00b      	beq.n	800322e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2208      	movs	r2, #8
 800321c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2284      	movs	r2, #132	@ 0x84
 8003222:	589b      	ldr	r3, [r3, r2]
 8003224:	2208      	movs	r2, #8
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2184      	movs	r1, #132	@ 0x84
 800322c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800322e:	23a4      	movs	r3, #164	@ 0xa4
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4013      	ands	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_UART_IRQHandler+0x198>
 800323c:	23a0      	movs	r3, #160	@ 0xa0
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	04db      	lsls	r3, r3, #19
 8003246:	4013      	ands	r3, r2
 8003248:	d00c      	beq.n	8003264 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2284      	movs	r2, #132	@ 0x84
 8003258:	589b      	ldr	r3, [r3, r2]
 800325a:	2220      	movs	r2, #32
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2184      	movs	r1, #132	@ 0x84
 8003262:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2284      	movs	r2, #132	@ 0x84
 8003268:	589b      	ldr	r3, [r3, r2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x1a4>
 800326e:	e21f      	b.n	80036b0 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003270:	23a4      	movs	r3, #164	@ 0xa4
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2220      	movs	r2, #32
 8003278:	4013      	ands	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800327c:	23a0      	movs	r3, #160	@ 0xa0
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2220      	movs	r2, #32
 8003284:	4013      	ands	r3, r2
 8003286:	d008      	beq.n	800329a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	0010      	movs	r0, r2
 8003298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2284      	movs	r2, #132	@ 0x84
 800329e:	589b      	ldr	r3, [r3, r2]
 80032a0:	2194      	movs	r1, #148	@ 0x94
 80032a2:	187a      	adds	r2, r7, r1
 80032a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2240      	movs	r2, #64	@ 0x40
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d004      	beq.n	80032be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2228      	movs	r2, #40	@ 0x28
 80032ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032bc:	d047      	beq.n	800334e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 ff6f 	bl	80041a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2240      	movs	r2, #64	@ 0x40
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b40      	cmp	r3, #64	@ 0x40
 80032d2:	d137      	bne.n	8003344 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d4:	f3ef 8310 	mrs	r3, PRIMASK
 80032d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80032da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032dc:	2090      	movs	r0, #144	@ 0x90
 80032de:	183a      	adds	r2, r7, r0
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	2301      	movs	r3, #1
 80032e4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2140      	movs	r1, #64	@ 0x40
 80032fa:	438a      	bics	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <HAL_UART_IRQHandler+0x2a0>)
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd feb5 	bl	8001090 <HAL_DMA_Abort_IT>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d01a      	beq.n	8003360 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	0018      	movs	r0, r3
 8003336:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e012      	b.n	8003360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f7fd f9df 	bl	8000700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003342:	e00d      	b.n	8003360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f7fd f9da 	bl	8000700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	e008      	b.n	8003360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd f9d5 	bl	8000700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2284      	movs	r2, #132	@ 0x84
 800335a:	2100      	movs	r1, #0
 800335c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800335e:	e1a7      	b.n	80036b0 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	46c0      	nop			@ (mov r8, r8)
    return;
 8003362:	e1a5      	b.n	80036b0 <HAL_UART_IRQHandler+0x5e4>
 8003364:	0000080f 	.word	0x0000080f
 8003368:	04000120 	.word	0x04000120
 800336c:	0800458f 	.word	0x0800458f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	2b01      	cmp	r3, #1
 8003376:	d000      	beq.n	800337a <HAL_UART_IRQHandler+0x2ae>
 8003378:	e159      	b.n	800362e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800337a:	23a4      	movs	r3, #164	@ 0xa4
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2210      	movs	r2, #16
 8003382:	4013      	ands	r3, r2
 8003384:	d100      	bne.n	8003388 <HAL_UART_IRQHandler+0x2bc>
 8003386:	e152      	b.n	800362e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003388:	23a0      	movs	r3, #160	@ 0xa0
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2210      	movs	r2, #16
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <HAL_UART_IRQHandler+0x2ca>
 8003394:	e14b      	b.n	800362e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2240      	movs	r2, #64	@ 0x40
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b40      	cmp	r3, #64	@ 0x40
 80033aa:	d000      	beq.n	80033ae <HAL_UART_IRQHandler+0x2e2>
 80033ac:	e0bf      	b.n	800352e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	217e      	movs	r1, #126	@ 0x7e
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d100      	bne.n	80033c6 <HAL_UART_IRQHandler+0x2fa>
 80033c4:	e095      	b.n	80034f2 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2258      	movs	r2, #88	@ 0x58
 80033ca:	5a9b      	ldrh	r3, [r3, r2]
 80033cc:	187a      	adds	r2, r7, r1
 80033ce:	8812      	ldrh	r2, [r2, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d300      	bcc.n	80033d6 <HAL_UART_IRQHandler+0x30a>
 80033d4:	e08d      	b.n	80034f2 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	187a      	adds	r2, r7, r1
 80033da:	215a      	movs	r1, #90	@ 0x5a
 80033dc:	8812      	ldrh	r2, [r2, #0]
 80033de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2220      	movs	r2, #32
 80033ea:	4013      	ands	r3, r2
 80033ec:	d16f      	bne.n	80034ce <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ee:	f3ef 8310 	mrs	r3, PRIMASK
 80033f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033f8:	2301      	movs	r3, #1
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	49ad      	ldr	r1, [pc, #692]	@ (80036c4 <HAL_UART_IRQHandler+0x5f8>)
 8003410:	400a      	ands	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003416:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8310 	mrs	r3, PRIMASK
 8003424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	677b      	str	r3, [r7, #116]	@ 0x74
 800342a:	2301      	movs	r3, #1
 800342c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	438a      	bics	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003452:	f3ef 8310 	mrs	r3, PRIMASK
 8003456:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345a:	673b      	str	r3, [r7, #112]	@ 0x70
 800345c:	2301      	movs	r3, #1
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2140      	movs	r1, #64	@ 0x40
 8003474:	438a      	bics	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800347a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	@ 0x80
 8003488:	2120      	movs	r1, #32
 800348a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800349c:	2301      	movs	r3, #1
 800349e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2110      	movs	r1, #16
 80034b4:	438a      	bics	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fd fda1 	bl	8001010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2258      	movs	r2, #88	@ 0x58
 80034d8:	5a9a      	ldrh	r2, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	215a      	movs	r1, #90	@ 0x5a
 80034de:	5a5b      	ldrh	r3, [r3, r1]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0011      	movs	r1, r2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7fd f8ec 	bl	80006c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80034f0:	e0e0      	b.n	80036b4 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2258      	movs	r2, #88	@ 0x58
 80034f6:	5a9b      	ldrh	r3, [r3, r2]
 80034f8:	227e      	movs	r2, #126	@ 0x7e
 80034fa:	18ba      	adds	r2, r7, r2
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d000      	beq.n	8003504 <HAL_UART_IRQHandler+0x438>
 8003502:	e0d7      	b.n	80036b4 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2220      	movs	r2, #32
 800350e:	4013      	ands	r3, r2
 8003510:	2b20      	cmp	r3, #32
 8003512:	d000      	beq.n	8003516 <HAL_UART_IRQHandler+0x44a>
 8003514:	e0ce      	b.n	80036b4 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2258      	movs	r2, #88	@ 0x58
 8003520:	5a9a      	ldrh	r2, [r3, r2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f7fd f8ce 	bl	80006c8 <HAL_UARTEx_RxEventCallback>
      return;
 800352c:	e0c2      	b.n	80036b4 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2258      	movs	r2, #88	@ 0x58
 8003532:	5a99      	ldrh	r1, [r3, r2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	225a      	movs	r2, #90	@ 0x5a
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29a      	uxth	r2, r3
 800353c:	208e      	movs	r0, #142	@ 0x8e
 800353e:	183b      	adds	r3, r7, r0
 8003540:	1a8a      	subs	r2, r1, r2
 8003542:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	225a      	movs	r2, #90	@ 0x5a
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x486>
 8003550:	e0b2      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003552:	183b      	adds	r3, r7, r0
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_UART_IRQHandler+0x490>
 800355a:	e0ad      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	60fb      	str	r3, [r7, #12]
  return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	2488      	movs	r4, #136	@ 0x88
 8003566:	193a      	adds	r2, r7, r4
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4951      	ldr	r1, [pc, #324]	@ (80036c8 <HAL_UART_IRQHandler+0x5fc>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	193b      	adds	r3, r7, r4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	61bb      	str	r3, [r7, #24]
  return(result);
 800359a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	2484      	movs	r4, #132	@ 0x84
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	438a      	bics	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	2480      	movs	r4, #128	@ 0x80
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			@ (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2110      	movs	r1, #16
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	193b      	adds	r3, r7, r4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361e:	183b      	adds	r3, r7, r0
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7fd f84e 	bl	80006c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362c:	e044      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362e:	23a4      	movs	r3, #164	@ 0xa4
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	4013      	ands	r3, r2
 800363a:	d010      	beq.n	800365e <HAL_UART_IRQHandler+0x592>
 800363c:	239c      	movs	r3, #156	@ 0x9c
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	03db      	lsls	r3, r3, #15
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	0352      	lsls	r2, r2, #13
 8003652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 ffd7 	bl	800460a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800365c:	e02f      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800365e:	23a4      	movs	r3, #164	@ 0xa4
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2280      	movs	r2, #128	@ 0x80
 8003666:	4013      	ands	r3, r2
 8003668:	d00f      	beq.n	800368a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800366a:	23a0      	movs	r3, #160	@ 0xa0
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	@ 0x80
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	0010      	movs	r0, r2
 8003686:	4798      	blx	r3
    }
    return;
 8003688:	e018      	b.n	80036bc <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368a:	23a4      	movs	r3, #164	@ 0xa4
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2240      	movs	r2, #64	@ 0x40
 8003692:	4013      	ands	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x5f2>
 8003696:	23a0      	movs	r3, #160	@ 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2240      	movs	r2, #64	@ 0x40
 800369e:	4013      	ands	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 ff85 	bl	80045b4 <UART_EndTransmit_IT>
    return;
 80036aa:	e008      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
      return;
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	e006      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
    return;
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
      return;
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
      return;
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x5f2>
    return;
 80036bc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80036be:	46bd      	mov	sp, r7
 80036c0:	b02b      	add	sp, #172	@ 0xac
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	fffffeff 	.word	0xfffffeff
 80036c8:	fffffedf 	.word	0xfffffedf

080036cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003718:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4313      	orrs	r3, r2
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2284      	movs	r2, #132	@ 0x84
 800373c:	589b      	ldr	r3, [r3, r2]
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b08e      	sub	sp, #56	@ 0x38
 800374c:	af00      	add	r7, sp, #0
 800374e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003750:	231a      	movs	r3, #26
 8003752:	2218      	movs	r2, #24
 8003754:	189b      	adds	r3, r3, r2
 8003756:	19db      	adds	r3, r3, r7
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	431a      	orrs	r2, r3
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	431a      	orrs	r2, r3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4313      	orrs	r3, r2
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4ac3      	ldr	r2, [pc, #780]	@ (8003a88 <UART_SetConfig+0x340>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4abe      	ldr	r2, [pc, #760]	@ (8003a8c <UART_SetConfig+0x344>)
 8003792:	4013      	ands	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4ab8      	ldr	r2, [pc, #736]	@ (8003a90 <UART_SetConfig+0x348>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037b8:	4313      	orrs	r3, r2
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4ab4      	ldr	r2, [pc, #720]	@ (8003a94 <UART_SetConfig+0x34c>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4ab0      	ldr	r2, [pc, #704]	@ (8003a98 <UART_SetConfig+0x350>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d131      	bne.n	8003840 <UART_SetConfig+0xf8>
 80037dc:	4baf      	ldr	r3, [pc, #700]	@ (8003a9c <UART_SetConfig+0x354>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e0:	2203      	movs	r2, #3
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d01d      	beq.n	8003824 <UART_SetConfig+0xdc>
 80037e8:	d823      	bhi.n	8003832 <UART_SetConfig+0xea>
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d00c      	beq.n	8003808 <UART_SetConfig+0xc0>
 80037ee:	d820      	bhi.n	8003832 <UART_SetConfig+0xea>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <UART_SetConfig+0xb2>
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00e      	beq.n	8003816 <UART_SetConfig+0xce>
 80037f8:	e01b      	b.n	8003832 <UART_SetConfig+0xea>
 80037fa:	231b      	movs	r3, #27
 80037fc:	2218      	movs	r2, #24
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	19db      	adds	r3, r3, r7
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e0b4      	b.n	8003972 <UART_SetConfig+0x22a>
 8003808:	231b      	movs	r3, #27
 800380a:	2218      	movs	r2, #24
 800380c:	189b      	adds	r3, r3, r2
 800380e:	19db      	adds	r3, r3, r7
 8003810:	2202      	movs	r2, #2
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e0ad      	b.n	8003972 <UART_SetConfig+0x22a>
 8003816:	231b      	movs	r3, #27
 8003818:	2218      	movs	r2, #24
 800381a:	189b      	adds	r3, r3, r2
 800381c:	19db      	adds	r3, r3, r7
 800381e:	2204      	movs	r2, #4
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e0a6      	b.n	8003972 <UART_SetConfig+0x22a>
 8003824:	231b      	movs	r3, #27
 8003826:	2218      	movs	r2, #24
 8003828:	189b      	adds	r3, r3, r2
 800382a:	19db      	adds	r3, r3, r7
 800382c:	2208      	movs	r2, #8
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e09f      	b.n	8003972 <UART_SetConfig+0x22a>
 8003832:	231b      	movs	r3, #27
 8003834:	2218      	movs	r2, #24
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2210      	movs	r2, #16
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e098      	b.n	8003972 <UART_SetConfig+0x22a>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a96      	ldr	r2, [pc, #600]	@ (8003aa0 <UART_SetConfig+0x358>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d131      	bne.n	80038ae <UART_SetConfig+0x166>
 800384a:	4b94      	ldr	r3, [pc, #592]	@ (8003a9c <UART_SetConfig+0x354>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	220c      	movs	r2, #12
 8003850:	4013      	ands	r3, r2
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d01d      	beq.n	8003892 <UART_SetConfig+0x14a>
 8003856:	d823      	bhi.n	80038a0 <UART_SetConfig+0x158>
 8003858:	2b08      	cmp	r3, #8
 800385a:	d00c      	beq.n	8003876 <UART_SetConfig+0x12e>
 800385c:	d820      	bhi.n	80038a0 <UART_SetConfig+0x158>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <UART_SetConfig+0x120>
 8003862:	2b04      	cmp	r3, #4
 8003864:	d00e      	beq.n	8003884 <UART_SetConfig+0x13c>
 8003866:	e01b      	b.n	80038a0 <UART_SetConfig+0x158>
 8003868:	231b      	movs	r3, #27
 800386a:	2218      	movs	r2, #24
 800386c:	189b      	adds	r3, r3, r2
 800386e:	19db      	adds	r3, r3, r7
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e07d      	b.n	8003972 <UART_SetConfig+0x22a>
 8003876:	231b      	movs	r3, #27
 8003878:	2218      	movs	r2, #24
 800387a:	189b      	adds	r3, r3, r2
 800387c:	19db      	adds	r3, r3, r7
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e076      	b.n	8003972 <UART_SetConfig+0x22a>
 8003884:	231b      	movs	r3, #27
 8003886:	2218      	movs	r2, #24
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2204      	movs	r2, #4
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e06f      	b.n	8003972 <UART_SetConfig+0x22a>
 8003892:	231b      	movs	r3, #27
 8003894:	2218      	movs	r2, #24
 8003896:	189b      	adds	r3, r3, r2
 8003898:	19db      	adds	r3, r3, r7
 800389a:	2208      	movs	r2, #8
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e068      	b.n	8003972 <UART_SetConfig+0x22a>
 80038a0:	231b      	movs	r3, #27
 80038a2:	2218      	movs	r2, #24
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	2210      	movs	r2, #16
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e061      	b.n	8003972 <UART_SetConfig+0x22a>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa4 <UART_SetConfig+0x35c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d106      	bne.n	80038c6 <UART_SetConfig+0x17e>
 80038b8:	231b      	movs	r3, #27
 80038ba:	2218      	movs	r2, #24
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	19db      	adds	r3, r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e055      	b.n	8003972 <UART_SetConfig+0x22a>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	@ (8003aa8 <UART_SetConfig+0x360>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d106      	bne.n	80038de <UART_SetConfig+0x196>
 80038d0:	231b      	movs	r3, #27
 80038d2:	2218      	movs	r2, #24
 80038d4:	189b      	adds	r3, r3, r2
 80038d6:	19db      	adds	r3, r3, r7
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e049      	b.n	8003972 <UART_SetConfig+0x22a>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003a90 <UART_SetConfig+0x348>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13e      	bne.n	8003966 <UART_SetConfig+0x21e>
 80038e8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a9c <UART_SetConfig+0x354>)
 80038ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	22c0      	movs	r2, #192	@ 0xc0
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d027      	beq.n	800394a <UART_SetConfig+0x202>
 80038fa:	22c0      	movs	r2, #192	@ 0xc0
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	4293      	cmp	r3, r2
 8003900:	d82a      	bhi.n	8003958 <UART_SetConfig+0x210>
 8003902:	2280      	movs	r2, #128	@ 0x80
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	4293      	cmp	r3, r2
 8003908:	d011      	beq.n	800392e <UART_SetConfig+0x1e6>
 800390a:	2280      	movs	r2, #128	@ 0x80
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	4293      	cmp	r3, r2
 8003910:	d822      	bhi.n	8003958 <UART_SetConfig+0x210>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <UART_SetConfig+0x1d8>
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <UART_SetConfig+0x1f4>
 800391e:	e01b      	b.n	8003958 <UART_SetConfig+0x210>
 8003920:	231b      	movs	r3, #27
 8003922:	2218      	movs	r2, #24
 8003924:	189b      	adds	r3, r3, r2
 8003926:	19db      	adds	r3, r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e021      	b.n	8003972 <UART_SetConfig+0x22a>
 800392e:	231b      	movs	r3, #27
 8003930:	2218      	movs	r2, #24
 8003932:	189b      	adds	r3, r3, r2
 8003934:	19db      	adds	r3, r3, r7
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e01a      	b.n	8003972 <UART_SetConfig+0x22a>
 800393c:	231b      	movs	r3, #27
 800393e:	2218      	movs	r2, #24
 8003940:	189b      	adds	r3, r3, r2
 8003942:	19db      	adds	r3, r3, r7
 8003944:	2204      	movs	r2, #4
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e013      	b.n	8003972 <UART_SetConfig+0x22a>
 800394a:	231b      	movs	r3, #27
 800394c:	2218      	movs	r2, #24
 800394e:	189b      	adds	r3, r3, r2
 8003950:	19db      	adds	r3, r3, r7
 8003952:	2208      	movs	r2, #8
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e00c      	b.n	8003972 <UART_SetConfig+0x22a>
 8003958:	231b      	movs	r3, #27
 800395a:	2218      	movs	r2, #24
 800395c:	189b      	adds	r3, r3, r2
 800395e:	19db      	adds	r3, r3, r7
 8003960:	2210      	movs	r2, #16
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e005      	b.n	8003972 <UART_SetConfig+0x22a>
 8003966:	231b      	movs	r3, #27
 8003968:	2218      	movs	r2, #24
 800396a:	189b      	adds	r3, r3, r2
 800396c:	19db      	adds	r3, r3, r7
 800396e:	2210      	movs	r2, #16
 8003970:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a46      	ldr	r2, [pc, #280]	@ (8003a90 <UART_SetConfig+0x348>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d000      	beq.n	800397e <UART_SetConfig+0x236>
 800397c:	e09a      	b.n	8003ab4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800397e:	231b      	movs	r3, #27
 8003980:	2218      	movs	r2, #24
 8003982:	189b      	adds	r3, r3, r2
 8003984:	19db      	adds	r3, r3, r7
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d01d      	beq.n	80039c8 <UART_SetConfig+0x280>
 800398c:	dc20      	bgt.n	80039d0 <UART_SetConfig+0x288>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d015      	beq.n	80039be <UART_SetConfig+0x276>
 8003992:	dc1d      	bgt.n	80039d0 <UART_SetConfig+0x288>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <UART_SetConfig+0x256>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0x260>
 800399c:	e018      	b.n	80039d0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399e:	f7fe fbed 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80039a2:	0003      	movs	r3, r0
 80039a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039a6:	e01c      	b.n	80039e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a8:	4b3c      	ldr	r3, [pc, #240]	@ (8003a9c <UART_SetConfig+0x354>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	4013      	ands	r3, r2
 80039b0:	d002      	beq.n	80039b8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039b2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aac <UART_SetConfig+0x364>)
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039b6:	e014      	b.n	80039e2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80039b8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab0 <UART_SetConfig+0x368>)
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039bc:	e011      	b.n	80039e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039be:	f7fe fb4d 	bl	800205c <HAL_RCC_GetSysClockFreq>
 80039c2:	0003      	movs	r3, r0
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039c6:	e00c      	b.n	80039e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ce:	e008      	b.n	80039e2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80039d4:	231a      	movs	r3, #26
 80039d6:	2218      	movs	r2, #24
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
        break;
 80039e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d100      	bne.n	80039ea <UART_SetConfig+0x2a2>
 80039e8:	e133      	b.n	8003c52 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	0013      	movs	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d305      	bcc.n	8003a06 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d906      	bls.n	8003a14 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003a06:	231a      	movs	r3, #26
 8003a08:	2218      	movs	r2, #24
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	19db      	adds	r3, r3, r7
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e11e      	b.n	8003c52 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	6939      	ldr	r1, [r7, #16]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	000b      	movs	r3, r1
 8003a22:	0e1b      	lsrs	r3, r3, #24
 8003a24:	0010      	movs	r0, r2
 8003a26:	0205      	lsls	r5, r0, #8
 8003a28:	431d      	orrs	r5, r3
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	021c      	lsls	r4, r3, #8
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68b8      	ldr	r0, [r7, #8]
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	1900      	adds	r0, r0, r4
 8003a40:	4169      	adcs	r1, r5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f7fc fbee 	bl	8000230 <__aeabi_uldivmod>
 8003a54:	0002      	movs	r2, r0
 8003a56:	000b      	movs	r3, r1
 8003a58:	0013      	movs	r3, r2
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a5e:	23c0      	movs	r3, #192	@ 0xc0
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d309      	bcc.n	8003a7a <UART_SetConfig+0x332>
 8003a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	035b      	lsls	r3, r3, #13
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d204      	bcs.n	8003a7a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	e0eb      	b.n	8003c52 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003a7a:	231a      	movs	r3, #26
 8003a7c:	2218      	movs	r2, #24
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	19db      	adds	r3, r3, r7
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e0e4      	b.n	8003c52 <UART_SetConfig+0x50a>
 8003a88:	efff69f3 	.word	0xefff69f3
 8003a8c:	ffffcfff 	.word	0xffffcfff
 8003a90:	40004800 	.word	0x40004800
 8003a94:	fffff4ff 	.word	0xfffff4ff
 8003a98:	40013800 	.word	0x40013800
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	40004c00 	.word	0x40004c00
 8003aa8:	40005000 	.word	0x40005000
 8003aac:	003d0900 	.word	0x003d0900
 8003ab0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d000      	beq.n	8003ac2 <UART_SetConfig+0x37a>
 8003ac0:	e070      	b.n	8003ba4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003ac2:	231b      	movs	r3, #27
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d822      	bhi.n	8003b16 <UART_SetConfig+0x3ce>
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	4b67      	ldr	r3, [pc, #412]	@ (8003c70 <UART_SetConfig+0x528>)
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ada:	f7fe fb4f 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ae2:	e021      	b.n	8003b28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe fb60 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aec:	e01c      	b.n	8003b28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aee:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <UART_SetConfig+0x52c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2210      	movs	r2, #16
 8003af4:	4013      	ands	r3, r2
 8003af6:	d002      	beq.n	8003afe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003af8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c78 <UART_SetConfig+0x530>)
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003afc:	e014      	b.n	8003b28 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <UART_SetConfig+0x534>)
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b02:	e011      	b.n	8003b28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b04:	f7fe faaa 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b0c:	e00c      	b.n	8003b28 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	2380      	movs	r3, #128	@ 0x80
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b14:	e008      	b.n	8003b28 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003b1a:	231a      	movs	r3, #26
 8003b1c:	2218      	movs	r2, #24
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d100      	bne.n	8003b30 <UART_SetConfig+0x3e8>
 8003b2e:	e090      	b.n	8003c52 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	005a      	lsls	r2, r3, #1
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	18d2      	adds	r2, r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	0019      	movs	r1, r3
 8003b42:	0010      	movs	r0, r2
 8003b44:	f7fc fae8 	bl	8000118 <__udivsi3>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d921      	bls.n	8003b96 <UART_SetConfig+0x44e>
 8003b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b54:	2380      	movs	r3, #128	@ 0x80
 8003b56:	025b      	lsls	r3, r3, #9
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d21c      	bcs.n	8003b96 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	200e      	movs	r0, #14
 8003b62:	2418      	movs	r4, #24
 8003b64:	1903      	adds	r3, r0, r4
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	210f      	movs	r1, #15
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2207      	movs	r2, #7
 8003b76:	4013      	ands	r3, r2
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	1903      	adds	r3, r0, r4
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	1902      	adds	r2, r0, r4
 8003b80:	19d2      	adds	r2, r2, r7
 8003b82:	8812      	ldrh	r2, [r2, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1902      	adds	r2, r0, r4
 8003b8e:	19d2      	adds	r2, r2, r7
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	e05d      	b.n	8003c52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b96:	231a      	movs	r3, #26
 8003b98:	2218      	movs	r2, #24
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e056      	b.n	8003c52 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba4:	231b      	movs	r3, #27
 8003ba6:	2218      	movs	r2, #24
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d822      	bhi.n	8003bf8 <UART_SetConfig+0x4b0>
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	4b32      	ldr	r3, [pc, #200]	@ (8003c80 <UART_SetConfig+0x538>)
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7fe fade 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bc4:	e021      	b.n	8003c0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc6:	f7fe faef 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bce:	e01c      	b.n	8003c0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <UART_SetConfig+0x52c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d002      	beq.n	8003be0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bda:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <UART_SetConfig+0x530>)
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <UART_SetConfig+0x534>)
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003be4:	e011      	b.n	8003c0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7fe fa39 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8003bea:	0003      	movs	r3, r0
 8003bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bee:	e00c      	b.n	8003c0a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bf6:	e008      	b.n	8003c0a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003bfc:	231a      	movs	r3, #26
 8003bfe:	2218      	movs	r2, #24
 8003c00:	189b      	adds	r3, r3, r2
 8003c02:	19db      	adds	r3, r3, r7
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
        break;
 8003c08:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	085a      	lsrs	r2, r3, #1
 8003c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c18:	18d2      	adds	r2, r2, r3
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0019      	movs	r1, r3
 8003c20:	0010      	movs	r0, r2
 8003c22:	f7fc fa79 	bl	8000118 <__udivsi3>
 8003c26:	0003      	movs	r3, r0
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d90a      	bls.n	8003c46 <UART_SetConfig+0x4fe>
 8003c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	025b      	lsls	r3, r3, #9
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d205      	bcs.n	8003c46 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	e005      	b.n	8003c52 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c46:	231a      	movs	r3, #26
 8003c48:	2218      	movs	r2, #24
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	19db      	adds	r3, r3, r7
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2200      	movs	r2, #0
 8003c56:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c5e:	231a      	movs	r3, #26
 8003c60:	2218      	movs	r2, #24
 8003c62:	189b      	adds	r3, r3, r2
 8003c64:	19db      	adds	r3, r3, r7
 8003c66:	781b      	ldrb	r3, [r3, #0]
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b00e      	add	sp, #56	@ 0x38
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	0800528c 	.word	0x0800528c
 8003c74:	40021000 	.word	0x40021000
 8003c78:	003d0900 	.word	0x003d0900
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	080052b0 	.word	0x080052b0

08003c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	2208      	movs	r2, #8
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00b      	beq.n	8003cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc8 <UART_AdvFeatureConfig+0x144>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a43      	ldr	r2, [pc, #268]	@ (8003dcc <UART_AdvFeatureConfig+0x148>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd0 <UART_AdvFeatureConfig+0x14c>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a34      	ldr	r2, [pc, #208]	@ (8003dd4 <UART_AdvFeatureConfig+0x150>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	2210      	movs	r2, #16
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <UART_AdvFeatureConfig+0x154>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4a25      	ldr	r2, [pc, #148]	@ (8003ddc <UART_AdvFeatureConfig+0x158>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	2240      	movs	r2, #64	@ 0x40
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <UART_AdvFeatureConfig+0x15c>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	035b      	lsls	r3, r3, #13
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10b      	bne.n	8003d9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <UART_AdvFeatureConfig+0x160>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	4013      	ands	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <UART_AdvFeatureConfig+0x164>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	ffff7fff 	.word	0xffff7fff
 8003dcc:	fffdffff 	.word	0xfffdffff
 8003dd0:	fffeffff 	.word	0xfffeffff
 8003dd4:	fffbffff 	.word	0xfffbffff
 8003dd8:	ffffefff 	.word	0xffffefff
 8003ddc:	ffffdfff 	.word	0xffffdfff
 8003de0:	ffefffff 	.word	0xffefffff
 8003de4:	ff9fffff 	.word	0xff9fffff
 8003de8:	fff7ffff 	.word	0xfff7ffff

08003dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b092      	sub	sp, #72	@ 0x48
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2284      	movs	r2, #132	@ 0x84
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dfc:	f7fc ff1e 	bl	8000c3c <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d12c      	bne.n	8003e6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e14:	2280      	movs	r2, #128	@ 0x80
 8003e16:	0391      	lsls	r1, r2, #14
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	@ (8003f34 <UART_CheckIdleState+0x148>)
 8003e1c:	9200      	str	r2, [sp, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f000 f88c 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e24:	1e03      	subs	r3, r0, #0
 8003e26:	d021      	beq.n	8003e6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e32:	2301      	movs	r3, #1
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2278      	movs	r2, #120	@ 0x78
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e05f      	b.n	8003f2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d146      	bne.n	8003f08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	2280      	movs	r2, #128	@ 0x80
 8003e7e:	03d1      	lsls	r1, r2, #15
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4a2c      	ldr	r2, [pc, #176]	@ (8003f34 <UART_CheckIdleState+0x148>)
 8003e84:	9200      	str	r2, [sp, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f000 f858 	bl	8003f3c <UART_WaitOnFlagUntilTimeout>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d03b      	beq.n	8003f08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4921      	ldr	r1, [pc, #132]	@ (8003f38 <UART_CheckIdleState+0x14c>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2278      	movs	r2, #120	@ 0x78
 8003f00:	2100      	movs	r1, #0
 8003f02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e011      	b.n	8003f2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2280      	movs	r2, #128	@ 0x80
 8003f12:	2120      	movs	r1, #32
 8003f14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2278      	movs	r2, #120	@ 0x78
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b010      	add	sp, #64	@ 0x40
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	01ffffff 	.word	0x01ffffff
 8003f38:	fffffedf 	.word	0xfffffedf

08003f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4c:	e051      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3301      	adds	r3, #1
 8003f52:	d04e      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fc fe72 	bl	8000c3c <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e051      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2204      	movs	r2, #4
 8003f76:	4013      	ands	r3, r2
 8003f78:	d03b      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d038      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d035      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d111      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 f900 	bl	80041a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2284      	movs	r2, #132	@ 0x84
 8003fa8:	2108      	movs	r1, #8
 8003faa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2278      	movs	r2, #120	@ 0x78
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e02c      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d112      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 f8e3 	bl	80041a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2284      	movs	r2, #132	@ 0x84
 8003fe2:	2120      	movs	r1, #32
 8003fe4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2278      	movs	r2, #120	@ 0x78
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e00f      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	425a      	negs	r2, r3
 8004002:	4153      	adcs	r3, r2
 8004004:	b2db      	uxtb	r3, r3
 8004006:	001a      	movs	r2, r3
 8004008:	1dfb      	adds	r3, r7, #7
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d09e      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b090      	sub	sp, #64	@ 0x40
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	1dbb      	adds	r3, r7, #6
 8004028:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1dba      	adds	r2, r7, #6
 8004034:	2158      	movs	r1, #88	@ 0x58
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2284      	movs	r2, #132	@ 0x84
 800403e:	2100      	movs	r1, #0
 8004040:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	2122      	movs	r1, #34	@ 0x22
 8004048:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004056:	4a3e      	ldr	r2, [pc, #248]	@ (8004150 <UART_Start_Receive_DMA+0x134>)
 8004058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405e:	4a3d      	ldr	r2, [pc, #244]	@ (8004154 <UART_Start_Receive_DMA+0x138>)
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <UART_Start_Receive_DMA+0x13c>)
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406e:	2200      	movs	r2, #0
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3324      	adds	r3, #36	@ 0x24
 800407c:	0019      	movs	r1, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	001a      	movs	r2, r3
 8004084:	1dbb      	adds	r3, r7, #6
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f7fc ff5c 	bl	8000f44 <HAL_DMA_Start_IT>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d009      	beq.n	80040a4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2284      	movs	r2, #132	@ 0x84
 8004094:	2110      	movs	r1, #16
 8004096:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2280      	movs	r2, #128	@ 0x80
 800409c:	2120      	movs	r1, #32
 800409e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e050      	b.n	8004146 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d019      	beq.n	80040e0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b6:	2301      	movs	r3, #1
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2180      	movs	r1, #128	@ 0x80
 80040ce:	0049      	lsls	r1, r1, #1
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
 80040e4:	613b      	str	r3, [r7, #16]
  return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ea:	2301      	movs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	46c0      	nop			@ (mov r8, r8)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004112:	f3ef 8310 	mrs	r3, PRIMASK
 8004116:	61fb      	str	r3, [r7, #28]
  return(result);
 8004118:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 800411c:	2301      	movs	r3, #1
 800411e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2140      	movs	r1, #64	@ 0x40
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b010      	add	sp, #64	@ 0x40
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	08004325 	.word	0x08004325
 8004154:	0800448d 	.word	0x0800448d
 8004158:	0800450b 	.word	0x0800450b

0800415c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004164:	f3ef 8310 	mrs	r3, PRIMASK
 8004168:	60bb      	str	r3, [r7, #8]
  return(result);
 800416a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	2301      	movs	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f383 8810 	msr	PRIMASK, r3
}
 8004178:	46c0      	nop			@ (mov r8, r8)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	21c0      	movs	r1, #192	@ 0xc0
 8004186:	438a      	bics	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b006      	add	sp, #24
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	@ 0x38
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ac:	f3ef 8310 	mrs	r3, PRIMASK
 80041b0:	617b      	str	r3, [r7, #20]
  return(result);
 80041b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f383 8810 	msr	PRIMASK, r3
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4926      	ldr	r1, [pc, #152]	@ (8004268 <UART_EndRxTransfer+0xc4>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041de:	f3ef 8310 	mrs	r3, PRIMASK
 80041e2:	623b      	str	r3, [r7, #32]
  return(result);
 80041e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e8:	2301      	movs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2101      	movs	r1, #1
 8004200:	438a      	bics	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	2b01      	cmp	r3, #1
 8004216:	d118      	bne.n	800424a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004218:	f3ef 8310 	mrs	r3, PRIMASK
 800421c:	60bb      	str	r3, [r7, #8]
  return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004222:	2301      	movs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f383 8810 	msr	PRIMASK, r3
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2110      	movs	r1, #16
 800423a:	438a      	bics	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2280      	movs	r2, #128	@ 0x80
 800424e:	2120      	movs	r1, #32
 8004250:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b00e      	add	sp, #56	@ 0x38
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	fffffedf 	.word	0xfffffedf

0800426c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2220      	movs	r2, #32
 8004282:	4013      	ands	r3, r2
 8004284:	d135      	bne.n	80042f2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	2252      	movs	r2, #82	@ 0x52
 800428a:	2100      	movs	r1, #0
 800428c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428e:	f3ef 8310 	mrs	r3, PRIMASK
 8004292:	60fb      	str	r3, [r7, #12]
  return(result);
 8004294:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004298:	2301      	movs	r3, #1
 800429a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2180      	movs	r1, #128	@ 0x80
 80042b0:	438a      	bics	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f383 8810 	msr	PRIMASK, r3
}
 80042be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80042c6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	e004      	b.n	80042fc <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80042f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff f9e9 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	46c0      	nop			@ (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b00c      	add	sp, #48	@ 0x30
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff f9e1 	bl	80036dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b094      	sub	sp, #80	@ 0x50
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2220      	movs	r2, #32
 800433a:	4013      	ands	r3, r2
 800433c:	d16f      	bne.n	800441e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800433e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004340:	225a      	movs	r2, #90	@ 0x5a
 8004342:	2100      	movs	r1, #0
 8004344:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004346:	f3ef 8310 	mrs	r3, PRIMASK
 800434a:	617b      	str	r3, [r7, #20]
  return(result);
 800434c:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800434e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004350:	2301      	movs	r3, #1
 8004352:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f383 8810 	msr	PRIMASK, r3
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4948      	ldr	r1, [pc, #288]	@ (8004488 <UART_DMAReceiveCplt+0x164>)
 8004368:	400a      	ands	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004378:	f3ef 8310 	mrs	r3, PRIMASK
 800437c:	623b      	str	r3, [r7, #32]
  return(result);
 800437e:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	2301      	movs	r3, #1
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	438a      	bics	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043aa:	f3ef 8310 	mrs	r3, PRIMASK
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b4:	2301      	movs	r3, #1
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2140      	movs	r1, #64	@ 0x40
 80043cc:	438a      	bics	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043de:	2280      	movs	r2, #128	@ 0x80
 80043e0:	2120      	movs	r1, #32
 80043e2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d118      	bne.n	800441e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ec:	f3ef 8310 	mrs	r3, PRIMASK
 80043f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043f2:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f6:	2301      	movs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f383 8810 	msr	PRIMASK, r3
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2110      	movs	r1, #16
 800440e:	438a      	bics	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f383 8810 	msr	PRIMASK, r3
}
 800441c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004420:	2200      	movs	r2, #0
 8004422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	2b01      	cmp	r3, #1
 800442a:	d124      	bne.n	8004476 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 800442c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442e:	225a      	movs	r2, #90	@ 0x5a
 8004430:	2100      	movs	r1, #0
 8004432:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	213a      	movs	r1, #58	@ 0x3a
 800443c:	187b      	adds	r3, r7, r1
 800443e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004442:	2258      	movs	r2, #88	@ 0x58
 8004444:	5a9b      	ldrh	r3, [r3, r2]
 8004446:	187a      	adds	r2, r7, r1
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d204      	bcs.n	8004458 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800444e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004450:	187a      	adds	r2, r7, r1
 8004452:	215a      	movs	r1, #90	@ 0x5a
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800445a:	2258      	movs	r2, #88	@ 0x58
 800445c:	5a9a      	ldrh	r2, [r3, r2]
 800445e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004460:	215a      	movs	r1, #90	@ 0x5a
 8004462:	5a5b      	ldrh	r3, [r3, r1]
 8004464:	b29b      	uxth	r3, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b29a      	uxth	r2, r3
 800446a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f7fc f92a 	bl	80006c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004474:	e003      	b.n	800447e <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004478:	0018      	movs	r0, r3
 800447a:	f7ff f937 	bl	80036ec <HAL_UART_RxCpltCallback>
}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b014      	add	sp, #80	@ 0x50
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	fffffeff 	.word	0xfffffeff

0800448c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d128      	bne.n	80044fa <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2258      	movs	r2, #88	@ 0x58
 80044ac:	5a9b      	ldrh	r3, [r3, r2]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	b299      	uxth	r1, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	225a      	movs	r2, #90	@ 0x5a
 80044b6:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	210a      	movs	r1, #10
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2258      	movs	r2, #88	@ 0x58
 80044c8:	5a9b      	ldrh	r3, [r3, r2]
 80044ca:	187a      	adds	r2, r7, r1
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d804      	bhi.n	80044dc <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	187a      	adds	r2, r7, r1
 80044d6:	215a      	movs	r1, #90	@ 0x5a
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2258      	movs	r2, #88	@ 0x58
 80044e0:	5a9a      	ldrh	r2, [r3, r2]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	215a      	movs	r1, #90	@ 0x5a
 80044e6:	5a5b      	ldrh	r3, [r3, r1]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7fc f8e8 	bl	80006c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044f8:	e003      	b.n	8004502 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff f8fd 	bl	80036fc <HAL_UART_RxHalfCpltCallback>
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b004      	add	sp, #16
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	589b      	ldr	r3, [r3, r2]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2280      	movs	r2, #128	@ 0x80
 800452e:	4013      	ands	r3, r2
 8004530:	2b80      	cmp	r3, #128	@ 0x80
 8004532:	d10a      	bne.n	800454a <UART_DMAError+0x40>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b21      	cmp	r3, #33	@ 0x21
 8004538:	d107      	bne.n	800454a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2252      	movs	r2, #82	@ 0x52
 800453e:	2100      	movs	r1, #0
 8004540:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff fe09 	bl	800415c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	4013      	ands	r3, r2
 8004554:	2b40      	cmp	r3, #64	@ 0x40
 8004556:	d10a      	bne.n	800456e <UART_DMAError+0x64>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b22      	cmp	r3, #34	@ 0x22
 800455c:	d107      	bne.n	800456e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	225a      	movs	r2, #90	@ 0x5a
 8004562:	2100      	movs	r1, #0
 8004564:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	0018      	movs	r0, r3
 800456a:	f7ff fe1b 	bl	80041a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2284      	movs	r2, #132	@ 0x84
 8004572:	589b      	ldr	r3, [r3, r2]
 8004574:	2210      	movs	r2, #16
 8004576:	431a      	orrs	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2184      	movs	r1, #132	@ 0x84
 800457c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fc f8bd 	bl	8000700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	b006      	add	sp, #24
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	225a      	movs	r2, #90	@ 0x5a
 80045a0:	2100      	movs	r1, #0
 80045a2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fc f8aa 	bl	8000700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045bc:	f3ef 8310 	mrs	r3, PRIMASK
 80045c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	2301      	movs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f383 8810 	msr	PRIMASK, r3
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2140      	movs	r1, #64	@ 0x40
 80045de:	438a      	bics	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff f865 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b006      	add	sp, #24
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b002      	add	sp, #8
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800461a:	b5b0      	push	{r4, r5, r7, lr}
 800461c:	b08a      	sub	sp, #40	@ 0x28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	1dbb      	adds	r3, r7, #6
 8004626:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2280      	movs	r2, #128	@ 0x80
 800462c:	589b      	ldr	r3, [r3, r2]
 800462e:	2b20      	cmp	r3, #32
 8004630:	d156      	bne.n	80046e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004638:	1dbb      	adds	r3, r7, #6
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04e      	b.n	80046e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	015b      	lsls	r3, r3, #5
 800464c:	429a      	cmp	r2, r3
 800464e:	d109      	bne.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2201      	movs	r2, #1
 800465c:	4013      	ands	r3, r2
 800465e:	d001      	beq.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e03e      	b.n	80046e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004670:	2527      	movs	r5, #39	@ 0x27
 8004672:	197c      	adds	r4, r7, r5
 8004674:	1dbb      	adds	r3, r7, #6
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff fccd 	bl	800401c <UART_Start_Receive_DMA>
 8004682:	0003      	movs	r3, r0
 8004684:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004686:	197b      	adds	r3, r7, r5
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d124      	bne.n	80046d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11c      	bne.n	80046d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	617b      	str	r3, [r7, #20]
  return(result);
 80046a4:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	2301      	movs	r3, #1
 80046aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2110      	movs	r1, #16
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	e003      	b.n	80046d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80046d0:	2327      	movs	r3, #39	@ 0x27
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80046d8:	2327      	movs	r3, #39	@ 0x27
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	e000      	b.n	80046e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b00a      	add	sp, #40	@ 0x28
 80046e8:	bdb0      	pop	{r4, r5, r7, pc}

080046ea <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fc01 	bl	8004f00 <malloc>
 80046fe:	0003      	movs	r3, r0
 8004700:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b004      	add	sp, #16
 800470a:	bd80      	pop	{r7, pc}

0800470c <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <ATC_Free+0x26>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 fbf4 	bl	8004f14 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
  }
}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}

0800473a <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8a9b      	ldrh	r3, [r3, #20]
 8004750:	001a      	movs	r2, r3
 8004752:	2100      	movs	r1, #0
 8004754:	f000 fc9a 	bl	800508c <memset>
}
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b002      	add	sp, #8
 800475e:	bd80      	pop	{r7, pc}

08004760 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	1dbb      	adds	r3, r7, #6
 800476c:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 800476e:	2417      	movs	r4, #23
 8004770:	193b      	adds	r3, r7, r4
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1dba      	adds	r2, r7, #6
 800477a:	8812      	ldrh	r2, [r2, #0]
 800477c:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	1dbb      	adds	r3, r7, #6
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0019      	movs	r1, r3
 800478a:	f7fe fafb 	bl	8002d84 <HAL_UART_Transmit_DMA>
 800478e:	1e03      	subs	r3, r0, #0
 8004790:	d103      	bne.n	800479a <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8004792:	193b      	adds	r3, r7, r4
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e000      	b.n	800479c <ATC_TxRaw+0x3c>
      break;
 800479a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 800479c:	2317      	movs	r3, #23
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	781b      	ldrb	r3, [r3, #0]
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b007      	add	sp, #28
 80047a8:	bd90      	pop	{r4, r7, pc}

080047aa <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7fe ffa8 	bl	800370c <HAL_UART_GetState>
 80047bc:	0003      	movs	r3, r0
 80047be:	2b21      	cmp	r3, #33	@ 0x21
 80047c0:	d007      	beq.n	80047d2 <ATC_TxBusy+0x28>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7fe ffa0 	bl	800370c <HAL_UART_GetState>
 80047cc:	0003      	movs	r3, r0
 80047ce:	2b23      	cmp	r3, #35	@ 0x23
 80047d0:	d101      	bne.n	80047d6 <ATC_TxBusy+0x2c>
  {
    return true;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80047d6:	2300      	movs	r3, #0
  }
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}

080047e0 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80047ea:	230f      	movs	r3, #15
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 80047f2:	f7fc fa23 	bl	8000c3c <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80047fa:	2001      	movs	r0, #1
 80047fc:	f000 fb73 	bl	8004ee6 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0018      	movs	r0, r3
 8004806:	f7fe ff81 	bl	800370c <HAL_UART_GetState>
 800480a:	0003      	movs	r3, r0
 800480c:	2b22      	cmp	r3, #34	@ 0x22
 800480e:	d007      	beq.n	8004820 <ATC_TxWait+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0018      	movs	r0, r3
 8004816:	f7fe ff79 	bl	800370c <HAL_UART_GetState>
 800481a:	0003      	movs	r3, r0
 800481c:	2b20      	cmp	r3, #32
 800481e:	d104      	bne.n	800482a <ATC_TxWait+0x4a>
    {
      answer = true;
 8004820:	230f      	movs	r3, #15
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
      break;
 8004828:	e01c      	b.n	8004864 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	0018      	movs	r0, r3
 8004830:	f7fe ff6c 	bl	800370c <HAL_UART_GetState>
 8004834:	0003      	movs	r3, r0
 8004836:	2be0      	cmp	r3, #224	@ 0xe0
 8004838:	d014      	beq.n	8004864 <ATC_TxWait+0x84>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	0018      	movs	r0, r3
 8004840:	f7fe ff64 	bl	800370c <HAL_UART_GetState>
 8004844:	0003      	movs	r3, r0
 8004846:	2ba0      	cmp	r3, #160	@ 0xa0
 8004848:	d00c      	beq.n	8004864 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800484a:	f7fc f9f7 	bl	8000c3c <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d8cf      	bhi.n	80047fa <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	0018      	movs	r0, r3
 8004860:	f7fe fb20 	bl	8002ea4 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8004864:	230f      	movs	r3, #15
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}

08004872 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8b1b      	ldrh	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d027      	beq.n	80048d2 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e01b      	b.n	80048c0 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0019      	movs	r1, r3
 800489a:	f000 fc13 	bl	80050c4 <strstr>
 800489e:	0003      	movs	r3, r0
 80048a0:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	0010      	movs	r0, r2
 80048b8:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3de      	bcc.n	8004888 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7ff ff34 	bl	800473a <ATC_RxFlush>
  }
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}

080048da <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80048e4:	230f      	movs	r3, #15
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8b1b      	ldrh	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80048f4:	230c      	movs	r3, #12
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e025      	b.n	800494a <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004902:	230c      	movs	r3, #12
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	320a      	adds	r2, #10
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	58d3      	ldr	r3, [r2, r3]
 8004910:	0019      	movs	r1, r3
 8004912:	f000 fbd7 	bl	80050c4 <strstr>
 8004916:	0003      	movs	r3, r0
 8004918:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800492c:	230c      	movs	r3, #12
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	230f      	movs	r3, #15
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	3201      	adds	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
        break;
 800493c:	e00c      	b.n	8004958 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800493e:	210c      	movs	r1, #12
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	187b      	adds	r3, r7, r1
 8004946:	3201      	adds	r2, #1
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8adb      	ldrh	r3, [r3, #22]
 800494e:	220c      	movs	r2, #12
 8004950:	18ba      	adds	r2, r7, r2
 8004952:	8812      	ldrh	r2, [r2, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3d2      	bcc.n	80048fe <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8004958:	230f      	movs	r3, #15
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b004      	add	sp, #16
 8004964:	bd80      	pop	{r7, pc}

08004966 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0018      	movs	r0, r3
 8004974:	f7fe fedc 	bl	8003730 <HAL_UART_GetError>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d01f      	beq.n	80049bc <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	4252      	negs	r2, r2
 8004986:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe faef 	bl	8002f70 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69d9      	ldr	r1, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8a9b      	ldrh	r3, [r3, #20]
 800499e:	001a      	movs	r2, r3
 80049a0:	f7ff fe3b 	bl	800461a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2104      	movs	r1, #4
 80049b8:	438a      	bics	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fe fea3 	bl	800370c <HAL_UART_GetState>
 80049c6:	0003      	movs	r3, r0
 80049c8:	2b22      	cmp	r3, #34	@ 0x22
 80049ca:	d027      	beq.n	8004a1c <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fe fe9b 	bl	800370c <HAL_UART_GetState>
 80049d6:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80049d8:	2b23      	cmp	r3, #35	@ 0x23
 80049da:	d01f      	beq.n	8004a1c <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	4252      	negs	r2, r2
 80049e6:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fe fabf 	bl	8002f70 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69d9      	ldr	r1, [r3, #28]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8a9b      	ldrh	r3, [r3, #20]
 80049fe:	001a      	movs	r2, r3
 8004a00:	f7ff fe0b 	bl	800461a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2104      	movs	r1, #4
 8004a18:	438a      	bics	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]
  }
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	1dbb      	adds	r3, r7, #6
 8004a32:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004a34:	2317      	movs	r3, #23
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d100      	bne.n	8004a44 <ATC_Init+0x20>
 8004a42:	e07f      	b.n	8004b44 <ATC_Init+0x120>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d100      	bne.n	8004a4c <ATC_Init+0x28>
 8004a4a:	e07b      	b.n	8004b44 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	223c      	movs	r2, #60	@ 0x3c
 8004a50:	2100      	movs	r1, #0
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 fb1a 	bl	800508c <memset>
    if (pName != NULL)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	2207      	movs	r2, #7
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 fb18 	bl	800509c <strncpy>
    }
    hAtc->hUart = hUart;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8004a72:	1dbb      	adds	r3, r7, #6
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7ff fe37 	bl	80046ea <ATC_Malloc>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d055      	beq.n	8004b36 <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	69d8      	ldr	r0, [r3, #28]
 8004a8e:	1dbb      	adds	r3, r7, #6
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	001a      	movs	r2, r3
 8004a94:	2100      	movs	r1, #0
 8004a96:	f000 faf9 	bl	800508c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8004a9a:	1dbb      	adds	r3, r7, #6
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7ff fe23 	bl	80046ea <ATC_Malloc>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d043      	beq.n	8004b3a <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a18      	ldr	r0, [r3, #32]
 8004ab6:	1dbb      	adds	r3, r7, #6
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	001a      	movs	r2, r3
 8004abc:	2100      	movs	r1, #0
 8004abe:	f000 fae5 	bl	800508c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8004ac2:	1dbb      	adds	r3, r7, #6
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7ff fe0f 	bl	80046ea <ATC_Malloc>
 8004acc:	0002      	movs	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d031      	beq.n	8004b3e <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004ade:	1dbb      	adds	r3, r7, #6
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f000 fad1 	bl	800508c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1dba      	adds	r2, r7, #6
 8004aee:	8812      	ldrh	r2, [r2, #0]
 8004af0:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4252      	negs	r2, r2
 8004afc:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	69d9      	ldr	r1, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8a9b      	ldrh	r3, [r3, #20]
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	f7ff fd85 	bl	800461a <HAL_UARTEx_ReceiveToIdle_DMA>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d116      	bne.n	8004b42 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2104      	movs	r1, #4
 8004b28:	438a      	bics	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
    answer = true;
 8004b2c:	2317      	movs	r3, #23
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e006      	b.n	8004b44 <ATC_Init+0x120>
      break;
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	e004      	b.n	8004b44 <ATC_Init+0x120>
      break;
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	e002      	b.n	8004b44 <ATC_Init+0x120>
      break;
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	e000      	b.n	8004b44 <ATC_Init+0x120>
      break;
 8004b42:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8004b44:	2317      	movs	r3, #23
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4053      	eors	r3, r2
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d017      	beq.n	8004b84 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	331c      	adds	r3, #28
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7ff fdd3 	bl	800470c <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3324      	adds	r3, #36	@ 0x24
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7ff fdca 	bl	800470c <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	223c      	movs	r2, #60	@ 0x3c
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 fa84 	bl	800508c <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8004b84:	2317      	movs	r3, #23
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	781b      	ldrb	r3, [r3, #0]
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b006      	add	sp, #24
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01f      	beq.n	8004bee <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01e      	beq.n	8004bf2 <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8004bb4:	e002      	b.n	8004bbc <ATC_SetEvents+0x2a>
    {
      ev++;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	18d3      	adds	r3, r2, r3
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <ATC_SetEvents+0x46>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	18d3      	adds	r3, r2, r3
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ee      	bne.n	8004bb6 <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	611a      	str	r2, [r3, #16]
    answer = true;
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <ATC_SetEvents+0x62>
      break;
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	e000      	b.n	8004bf4 <ATC_SetEvents+0x62>
      break;
 8004bf2:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	781b      	ldrb	r3, [r3, #0]
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff feaa 	bl	8004966 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f7ff fe2c 	bl	8004872 <ATC_CheckEvents>
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8004c22:	b5b0      	push	{r4, r5, r7, lr}
 8004c24:	b08c      	sub	sp, #48	@ 0x30
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7ff fdb7 	bl	80047aa <ATC_TxBusy>
 8004c3c:	1e03      	subs	r3, r0, #0
 8004c3e:	d002      	beq.n	8004c46 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8004c40:	2304      	movs	r3, #4
 8004c42:	425b      	negs	r3, r3
 8004c44:	e0e3      	b.n	8004e0e <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8004c46:	2344      	movs	r3, #68	@ 0x44
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d902      	bls.n	8004c56 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8004c50:	2305      	movs	r3, #5
 8004c52:	425b      	negs	r3, r3
 8004c54:	e0db      	b.n	8004e0e <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff fe84 	bl	8004966 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8004c5e:	2348      	movs	r3, #72	@ 0x48
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c68:	e051      	b.n	8004d0e <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1d1a      	adds	r2, r3, #4
 8004c6e:	617a      	str	r2, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fb fa46 	bl	8000108 <strlen>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	3301      	adds	r3, #1
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff fd32 	bl	80046ea <ATC_Malloc>
 8004c86:	0001      	movs	r1, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c8c:	320a      	adds	r2, #10
 8004c8e:	0092      	lsls	r2, r2, #2
 8004c90:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c96:	320a      	adds	r2, #10
 8004c98:	0092      	lsls	r2, r2, #2
 8004c9a:	58d3      	ldr	r3, [r2, r3]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11c      	bne.n	8004cda <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8004ca0:	2327      	movs	r3, #39	@ 0x27
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e00e      	b.n	8004cc8 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8004caa:	2427      	movs	r4, #39	@ 0x27
 8004cac:	193b      	adds	r3, r7, r4
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	330a      	adds	r3, #10
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7ff fd27 	bl	800470c <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	193b      	adds	r3, r7, r4
 8004cc4:	3201      	adds	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	2327      	movs	r3, #39	@ 0x27
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	dcea      	bgt.n	8004caa <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	425b      	negs	r3, r3
 8004cd8:	e099      	b.n	8004e0e <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cde:	320a      	adds	r2, #10
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	58d3      	ldr	r3, [r2, r3]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0011      	movs	r1, r2
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 fa3f 	bl	800516c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cf2:	320a      	adds	r2, #10
 8004cf4:	0092      	lsls	r2, r2, #2
 8004cf6:	58d4      	ldr	r4, [r2, r3]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7fb fa04 	bl	8000108 <strlen>
 8004d00:	0003      	movs	r3, r0
 8004d02:	18e3      	adds	r3, r4, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0e:	2344      	movs	r3, #68	@ 0x44
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dba7      	blt.n	8004c6a <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff fd0c 	bl	800473a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fb f9ef 	bl	8000108 <strlen>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff fd14 	bl	8004760 <ATC_TxRaw>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4053      	eors	r3, r2
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	425b      	negs	r3, r3
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004d4c:	e010      	b.n	8004d70 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	0011      	movs	r1, r2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7ff fd43 	bl	80047e0 <ATC_TxWait>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4053      	eors	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	425b      	negs	r3, r3
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8004d6e:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8004d70:	2444      	movs	r4, #68	@ 0x44
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d029      	beq.n	8004dce <ATC_SendReceive+0x1ac>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d126      	bne.n	8004dce <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8004d80:	f7fb ff5c 	bl	8000c3c <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8004d92:	e014      	b.n	8004dbe <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8004d94:	2001      	movs	r0, #1
 8004d96:	f000 f8a6 	bl	8004ee6 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8004d9a:	251f      	movs	r5, #31
 8004d9c:	197c      	adds	r4, r7, r5
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0011      	movs	r1, r2
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff fd98 	bl	80048da <ATC_CheckResponse>
 8004daa:	0003      	movs	r3, r0
 8004dac:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8004dae:	197b      	adds	r3, r7, r5
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8004db6:	197b      	adds	r3, r7, r5
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004dbc:	e007      	b.n	8004dce <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8004dbe:	f7fb ff3d 	bl	8000c3c <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d8e2      	bhi.n	8004d94 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8004dd4:	2326      	movs	r3, #38	@ 0x26
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e00e      	b.n	8004dfc <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8004dde:	2426      	movs	r4, #38	@ 0x26
 8004de0:	193b      	adds	r3, r7, r4
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	330a      	adds	r3, #10
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fc8d 	bl	800470c <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8004df2:	193b      	adds	r3, r7, r4
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	193b      	adds	r3, r7, r4
 8004df8:	3201      	adds	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	2326      	movs	r3, #38	@ 0x26
 8004dfe:	18fa      	adds	r2, r7, r3
 8004e00:	2344      	movs	r3, #68	@ 0x44
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3e8      	bcc.n	8004dde <ATC_SendReceive+0x1bc>
  }
  return answer;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b00c      	add	sp, #48	@ 0x30
 8004e14:	bdb0      	pop	{r4, r5, r7, pc}

08004e16 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	000a      	movs	r2, r1
 8004e20:	1cbb      	adds	r3, r7, #2
 8004e22:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8004e24:	1cbb      	adds	r3, r7, #2
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8a9b      	ldrh	r3, [r3, #20]
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8b1b      	ldrh	r3, [r3, #24]
 8004e32:	1acb      	subs	r3, r1, r3
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dd06      	ble.n	8004e46 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8a99      	ldrh	r1, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8b1a      	ldrh	r2, [r3, #24]
 8004e40:	1cbb      	adds	r3, r7, #2
 8004e42:	1a8a      	subs	r2, r1, r2
 8004e44:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	8b12      	ldrh	r2, [r2, #24]
 8004e4e:	1898      	adds	r0, r3, r2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	1cbb      	adds	r3, r7, #2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	001a      	movs	r2, r3
 8004e5a:	f000 f98f 	bl	800517c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8b1a      	ldrh	r2, [r3, #24]
 8004e62:	1cbb      	adds	r3, r7, #2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	18d3      	adds	r3, r2, r3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69d9      	ldr	r1, [r3, #28]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8a9b      	ldrh	r3, [r3, #20]
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	f7ff fbcd 	bl	800461a <HAL_UARTEx_ReceiveToIdle_DMA>
 8004e80:	1e03      	subs	r3, r0, #0
 8004e82:	d10c      	bne.n	8004e9e <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2104      	movs	r1, #4
 8004e98:	438a      	bics	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8004e9c:	e01f      	b.n	8004ede <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4252      	negs	r2, r2
 8004ea8:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fe f85e 	bl	8002f70 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8a9b      	ldrh	r3, [r3, #20]
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	f7ff fbaa 	bl	800461a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2104      	movs	r1, #4
 8004eda:	438a      	bics	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7fb fead 	bl	8000c50 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <malloc>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4b03      	ldr	r3, [pc, #12]	@ (8004f10 <malloc+0x10>)
 8004f04:	0001      	movs	r1, r0
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f000 f830 	bl	8004f6c <_malloc_r>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <free>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4b03      	ldr	r3, [pc, #12]	@ (8004f24 <free+0x10>)
 8004f18:	0001      	movs	r1, r0
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	f000 f938 	bl	8005190 <_free_r>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	2000000c 	.word	0x2000000c

08004f28 <sbrk_aligned>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f68 <sbrk_aligned+0x40>)
 8004f2c:	000d      	movs	r5, r1
 8004f2e:	6831      	ldr	r1, [r6, #0]
 8004f30:	0004      	movs	r4, r0
 8004f32:	2900      	cmp	r1, #0
 8004f34:	d102      	bne.n	8004f3c <sbrk_aligned+0x14>
 8004f36:	f000 f8db 	bl	80050f0 <_sbrk_r>
 8004f3a:	6030      	str	r0, [r6, #0]
 8004f3c:	0029      	movs	r1, r5
 8004f3e:	0020      	movs	r0, r4
 8004f40:	f000 f8d6 	bl	80050f0 <_sbrk_r>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d103      	bne.n	8004f50 <sbrk_aligned+0x28>
 8004f48:	2501      	movs	r5, #1
 8004f4a:	426d      	negs	r5, r5
 8004f4c:	0028      	movs	r0, r5
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	2303      	movs	r3, #3
 8004f52:	1cc5      	adds	r5, r0, #3
 8004f54:	439d      	bics	r5, r3
 8004f56:	42a8      	cmp	r0, r5
 8004f58:	d0f8      	beq.n	8004f4c <sbrk_aligned+0x24>
 8004f5a:	1a29      	subs	r1, r5, r0
 8004f5c:	0020      	movs	r0, r4
 8004f5e:	f000 f8c7 	bl	80050f0 <_sbrk_r>
 8004f62:	3001      	adds	r0, #1
 8004f64:	d1f2      	bne.n	8004f4c <sbrk_aligned+0x24>
 8004f66:	e7ef      	b.n	8004f48 <sbrk_aligned+0x20>
 8004f68:	200001f8 	.word	0x200001f8

08004f6c <_malloc_r>:
 8004f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6e:	2203      	movs	r2, #3
 8004f70:	1ccb      	adds	r3, r1, #3
 8004f72:	4393      	bics	r3, r2
 8004f74:	3308      	adds	r3, #8
 8004f76:	0005      	movs	r5, r0
 8004f78:	001f      	movs	r7, r3
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d234      	bcs.n	8004fe8 <_malloc_r+0x7c>
 8004f7e:	270c      	movs	r7, #12
 8004f80:	42b9      	cmp	r1, r7
 8004f82:	d833      	bhi.n	8004fec <_malloc_r+0x80>
 8004f84:	0028      	movs	r0, r5
 8004f86:	f000 f871 	bl	800506c <__malloc_lock>
 8004f8a:	4e37      	ldr	r6, [pc, #220]	@ (8005068 <_malloc_r+0xfc>)
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	001c      	movs	r4, r3
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d12f      	bne.n	8004ff4 <_malloc_r+0x88>
 8004f94:	0039      	movs	r1, r7
 8004f96:	0028      	movs	r0, r5
 8004f98:	f7ff ffc6 	bl	8004f28 <sbrk_aligned>
 8004f9c:	0004      	movs	r4, r0
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d15f      	bne.n	8005062 <_malloc_r+0xf6>
 8004fa2:	6834      	ldr	r4, [r6, #0]
 8004fa4:	9400      	str	r4, [sp, #0]
 8004fa6:	9b00      	ldr	r3, [sp, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d14a      	bne.n	8005042 <_malloc_r+0xd6>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d052      	beq.n	8005056 <_malloc_r+0xea>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	0028      	movs	r0, r5
 8004fb4:	18e3      	adds	r3, r4, r3
 8004fb6:	9900      	ldr	r1, [sp, #0]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	f000 f899 	bl	80050f0 <_sbrk_r>
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	d148      	bne.n	8005056 <_malloc_r+0xea>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	0028      	movs	r0, r5
 8004fc8:	1aff      	subs	r7, r7, r3
 8004fca:	0039      	movs	r1, r7
 8004fcc:	f7ff ffac 	bl	8004f28 <sbrk_aligned>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d040      	beq.n	8005056 <_malloc_r+0xea>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	19db      	adds	r3, r3, r7
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	6833      	ldr	r3, [r6, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d133      	bne.n	800504a <_malloc_r+0xde>
 8004fe2:	9b00      	ldr	r3, [sp, #0]
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	e019      	b.n	800501c <_malloc_r+0xb0>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dac9      	bge.n	8004f80 <_malloc_r+0x14>
 8004fec:	230c      	movs	r3, #12
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ff4:	6821      	ldr	r1, [r4, #0]
 8004ff6:	1bc9      	subs	r1, r1, r7
 8004ff8:	d420      	bmi.n	800503c <_malloc_r+0xd0>
 8004ffa:	290b      	cmp	r1, #11
 8004ffc:	d90a      	bls.n	8005014 <_malloc_r+0xa8>
 8004ffe:	19e2      	adds	r2, r4, r7
 8005000:	6027      	str	r7, [r4, #0]
 8005002:	42a3      	cmp	r3, r4
 8005004:	d104      	bne.n	8005010 <_malloc_r+0xa4>
 8005006:	6032      	str	r2, [r6, #0]
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	6011      	str	r1, [r2, #0]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	e005      	b.n	800501c <_malloc_r+0xb0>
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e7f9      	b.n	8005008 <_malloc_r+0x9c>
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	42a3      	cmp	r3, r4
 8005018:	d10e      	bne.n	8005038 <_malloc_r+0xcc>
 800501a:	6032      	str	r2, [r6, #0]
 800501c:	0028      	movs	r0, r5
 800501e:	f000 f82d 	bl	800507c <__malloc_unlock>
 8005022:	0020      	movs	r0, r4
 8005024:	2207      	movs	r2, #7
 8005026:	300b      	adds	r0, #11
 8005028:	1d23      	adds	r3, r4, #4
 800502a:	4390      	bics	r0, r2
 800502c:	1ac2      	subs	r2, r0, r3
 800502e:	4298      	cmp	r0, r3
 8005030:	d0df      	beq.n	8004ff2 <_malloc_r+0x86>
 8005032:	1a1b      	subs	r3, r3, r0
 8005034:	50a3      	str	r3, [r4, r2]
 8005036:	e7dc      	b.n	8004ff2 <_malloc_r+0x86>
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e7ef      	b.n	800501c <_malloc_r+0xb0>
 800503c:	0023      	movs	r3, r4
 800503e:	6864      	ldr	r4, [r4, #4]
 8005040:	e7a6      	b.n	8004f90 <_malloc_r+0x24>
 8005042:	9c00      	ldr	r4, [sp, #0]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	e7ad      	b.n	8004fa6 <_malloc_r+0x3a>
 800504a:	001a      	movs	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	42a3      	cmp	r3, r4
 8005050:	d1fb      	bne.n	800504a <_malloc_r+0xde>
 8005052:	2300      	movs	r3, #0
 8005054:	e7da      	b.n	800500c <_malloc_r+0xa0>
 8005056:	230c      	movs	r3, #12
 8005058:	0028      	movs	r0, r5
 800505a:	602b      	str	r3, [r5, #0]
 800505c:	f000 f80e 	bl	800507c <__malloc_unlock>
 8005060:	e7c6      	b.n	8004ff0 <_malloc_r+0x84>
 8005062:	6007      	str	r7, [r0, #0]
 8005064:	e7da      	b.n	800501c <_malloc_r+0xb0>
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	200001fc 	.word	0x200001fc

0800506c <__malloc_lock>:
 800506c:	b510      	push	{r4, lr}
 800506e:	4802      	ldr	r0, [pc, #8]	@ (8005078 <__malloc_lock+0xc>)
 8005070:	f000 f87a 	bl	8005168 <__retarget_lock_acquire_recursive>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	2000033c 	.word	0x2000033c

0800507c <__malloc_unlock>:
 800507c:	b510      	push	{r4, lr}
 800507e:	4802      	ldr	r0, [pc, #8]	@ (8005088 <__malloc_unlock+0xc>)
 8005080:	f000 f873 	bl	800516a <__retarget_lock_release_recursive>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	2000033c 	.word	0x2000033c

0800508c <memset>:
 800508c:	0003      	movs	r3, r0
 800508e:	1882      	adds	r2, r0, r2
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	7019      	strb	r1, [r3, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <strncpy>:
 800509c:	0003      	movs	r3, r0
 800509e:	b530      	push	{r4, r5, lr}
 80050a0:	001d      	movs	r5, r3
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	d006      	beq.n	80050b4 <strncpy+0x18>
 80050a6:	780c      	ldrb	r4, [r1, #0]
 80050a8:	3a01      	subs	r2, #1
 80050aa:	3301      	adds	r3, #1
 80050ac:	702c      	strb	r4, [r5, #0]
 80050ae:	3101      	adds	r1, #1
 80050b0:	2c00      	cmp	r4, #0
 80050b2:	d1f5      	bne.n	80050a0 <strncpy+0x4>
 80050b4:	2100      	movs	r1, #0
 80050b6:	189a      	adds	r2, r3, r2
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d100      	bne.n	80050be <strncpy+0x22>
 80050bc:	bd30      	pop	{r4, r5, pc}
 80050be:	7019      	strb	r1, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	e7f9      	b.n	80050b8 <strncpy+0x1c>

080050c4 <strstr>:
 80050c4:	780a      	ldrb	r2, [r1, #0]
 80050c6:	b530      	push	{r4, r5, lr}
 80050c8:	2a00      	cmp	r2, #0
 80050ca:	d10c      	bne.n	80050e6 <strstr+0x22>
 80050cc:	bd30      	pop	{r4, r5, pc}
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d108      	bne.n	80050e4 <strstr+0x20>
 80050d2:	2301      	movs	r3, #1
 80050d4:	5ccc      	ldrb	r4, [r1, r3]
 80050d6:	2c00      	cmp	r4, #0
 80050d8:	d0f8      	beq.n	80050cc <strstr+0x8>
 80050da:	5cc5      	ldrb	r5, [r0, r3]
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d101      	bne.n	80050e4 <strstr+0x20>
 80050e0:	3301      	adds	r3, #1
 80050e2:	e7f7      	b.n	80050d4 <strstr+0x10>
 80050e4:	3001      	adds	r0, #1
 80050e6:	7803      	ldrb	r3, [r0, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <strstr+0xa>
 80050ec:	0018      	movs	r0, r3
 80050ee:	e7ed      	b.n	80050cc <strstr+0x8>

080050f0 <_sbrk_r>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b570      	push	{r4, r5, r6, lr}
 80050f4:	4d06      	ldr	r5, [pc, #24]	@ (8005110 <_sbrk_r+0x20>)
 80050f6:	0004      	movs	r4, r0
 80050f8:	0008      	movs	r0, r1
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	f7fb fbfe 	bl	80008fc <_sbrk>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d103      	bne.n	800510c <_sbrk_r+0x1c>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d000      	beq.n	800510c <_sbrk_r+0x1c>
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	20000338 	.word	0x20000338

08005114 <__errno>:
 8005114:	4b01      	ldr	r3, [pc, #4]	@ (800511c <__errno+0x8>)
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	4770      	bx	lr
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	2000000c 	.word	0x2000000c

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	2600      	movs	r6, #0
 8005124:	4c0c      	ldr	r4, [pc, #48]	@ (8005158 <__libc_init_array+0x38>)
 8005126:	4d0d      	ldr	r5, [pc, #52]	@ (800515c <__libc_init_array+0x3c>)
 8005128:	1b64      	subs	r4, r4, r5
 800512a:	10a4      	asrs	r4, r4, #2
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	2600      	movs	r6, #0
 8005132:	f000 f877 	bl	8005224 <_init>
 8005136:	4c0a      	ldr	r4, [pc, #40]	@ (8005160 <__libc_init_array+0x40>)
 8005138:	4d0a      	ldr	r5, [pc, #40]	@ (8005164 <__libc_init_array+0x44>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	00b3      	lsls	r3, r6, #2
 8005146:	58eb      	ldr	r3, [r5, r3]
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	00b3      	lsls	r3, r6, #2
 8005150:	58eb      	ldr	r3, [r5, r3]
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	080052dc 	.word	0x080052dc
 800515c:	080052dc 	.word	0x080052dc
 8005160:	080052e0 	.word	0x080052e0
 8005164:	080052dc 	.word	0x080052dc

08005168 <__retarget_lock_acquire_recursive>:
 8005168:	4770      	bx	lr

0800516a <__retarget_lock_release_recursive>:
 800516a:	4770      	bx	lr

0800516c <strcpy>:
 800516c:	0003      	movs	r3, r0
 800516e:	780a      	ldrb	r2, [r1, #0]
 8005170:	3101      	adds	r1, #1
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	2a00      	cmp	r2, #0
 8005178:	d1f9      	bne.n	800516e <strcpy+0x2>
 800517a:	4770      	bx	lr

0800517c <memcpy>:
 800517c:	2300      	movs	r3, #0
 800517e:	b510      	push	{r4, lr}
 8005180:	429a      	cmp	r2, r3
 8005182:	d100      	bne.n	8005186 <memcpy+0xa>
 8005184:	bd10      	pop	{r4, pc}
 8005186:	5ccc      	ldrb	r4, [r1, r3]
 8005188:	54c4      	strb	r4, [r0, r3]
 800518a:	3301      	adds	r3, #1
 800518c:	e7f8      	b.n	8005180 <memcpy+0x4>
	...

08005190 <_free_r>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	0005      	movs	r5, r0
 8005194:	1e0c      	subs	r4, r1, #0
 8005196:	d010      	beq.n	80051ba <_free_r+0x2a>
 8005198:	3c04      	subs	r4, #4
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	da00      	bge.n	80051a2 <_free_r+0x12>
 80051a0:	18e4      	adds	r4, r4, r3
 80051a2:	0028      	movs	r0, r5
 80051a4:	f7ff ff62 	bl	800506c <__malloc_lock>
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <_free_r+0x90>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <_free_r+0x2c>
 80051b0:	6063      	str	r3, [r4, #4]
 80051b2:	6014      	str	r4, [r2, #0]
 80051b4:	0028      	movs	r0, r5
 80051b6:	f7ff ff61 	bl	800507c <__malloc_unlock>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d908      	bls.n	80051d2 <_free_r+0x42>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	1821      	adds	r1, r4, r0
 80051c4:	428b      	cmp	r3, r1
 80051c6:	d1f3      	bne.n	80051b0 <_free_r+0x20>
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	1809      	adds	r1, r1, r0
 80051ce:	6021      	str	r1, [r4, #0]
 80051d0:	e7ee      	b.n	80051b0 <_free_r+0x20>
 80051d2:	001a      	movs	r2, r3
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <_free_r+0x4e>
 80051da:	42a3      	cmp	r3, r4
 80051dc:	d9f9      	bls.n	80051d2 <_free_r+0x42>
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	1850      	adds	r0, r2, r1
 80051e2:	42a0      	cmp	r0, r4
 80051e4:	d10b      	bne.n	80051fe <_free_r+0x6e>
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	1809      	adds	r1, r1, r0
 80051ea:	1850      	adds	r0, r2, r1
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	4283      	cmp	r3, r0
 80051f0:	d1e0      	bne.n	80051b4 <_free_r+0x24>
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	1841      	adds	r1, r0, r1
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	6053      	str	r3, [r2, #4]
 80051fc:	e7da      	b.n	80051b4 <_free_r+0x24>
 80051fe:	42a0      	cmp	r0, r4
 8005200:	d902      	bls.n	8005208 <_free_r+0x78>
 8005202:	230c      	movs	r3, #12
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	e7d5      	b.n	80051b4 <_free_r+0x24>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	1821      	adds	r1, r4, r0
 800520c:	428b      	cmp	r3, r1
 800520e:	d103      	bne.n	8005218 <_free_r+0x88>
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	1809      	adds	r1, r1, r0
 8005216:	6021      	str	r1, [r4, #0]
 8005218:	6063      	str	r3, [r4, #4]
 800521a:	6054      	str	r4, [r2, #4]
 800521c:	e7ca      	b.n	80051b4 <_free_r+0x24>
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	200001fc 	.word	0x200001fc

08005224 <_init>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr

08005230 <_fini>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr
