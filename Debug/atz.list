
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800686c  0800686c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800686c  0800686c  0000786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006874  08006874  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006874  08006874  00007874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006878  08006878  00007878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800687c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000060  080068dc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  200004f0  080068dc  000084f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c57  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa2  00000000  00000000  00019cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  0001dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a23  00000000  00000000  0001e796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149fb  00000000  00000000  000351b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086678  00000000  00000000  00049bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d022c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  000d0270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d3d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066f8 	.word	0x080066f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080066f8 	.word	0x080066f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <MX_DMA_Init+0x48>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_DMA_Init+0x48>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <MX_DMA_Init+0x48>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 f89a 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 f8ac 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	200b      	movs	r0, #11
 80004a4:	f001 f892 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004a8:	200b      	movs	r0, #11
 80004aa:	f001 f8a4 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b089      	sub	sp, #36	@ 0x24
 80004c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	240c      	movs	r4, #12
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f005 fd17 	bl	8005f00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d2:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004d6:	4b27      	ldr	r3, [pc, #156]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004d8:	2104      	movs	r1, #4
 80004da:	430a      	orrs	r2, r1
 80004dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004de:	4b25      	ldr	r3, [pc, #148]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e2:	2204      	movs	r2, #4
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b22      	ldr	r3, [pc, #136]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ee:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <MX_GPIO_Init+0xb8>)
 80004f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004fa:	2201      	movs	r2, #1
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <MX_GPIO_Init+0xb8>)
 8000504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <MX_GPIO_Init+0xb8>)
 8000508:	2102      	movs	r1, #2
 800050a:	430a      	orrs	r2, r1
 800050c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <MX_GPIO_Init+0xb8>)
 8000510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000512:	2202      	movs	r2, #2
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 800051a:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <MX_GPIO_Init+0xbc>)
 800051c:	2200      	movs	r2, #0
 800051e:	2120      	movs	r1, #32
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fd9f 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2220      	movs	r2, #32
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000538:	193a      	adds	r2, r7, r4
 800053a:	23a0      	movs	r3, #160	@ 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fb2f 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2220      	movs	r2, #32
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000560:	187b      	adds	r3, r7, r1
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <MX_GPIO_Init+0xbc>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f001 fb1c 	bl	8001ba4 <HAL_GPIO_Init>

}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	50000400 	.word	0x50000400

0800057c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_I2C1_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	@ (80005f4 <MX_I2C1_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 8000586:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <MX_I2C1_Init+0x74>)
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <MX_I2C1_Init+0x7c>)
 800058a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800058c:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000592:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <MX_I2C1_Init+0x74>)
 8000594:	2201      	movs	r2, #1
 8000596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fd71 	bl	80020a0 <HAL_I2C_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c2:	f000 fb95 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fe3e 	bl	800224c <HAL_I2CEx_ConfigAnalogFilter>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d4:	f000 fb8c 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <MX_I2C1_Init+0x74>)
 80005da:	2100      	movs	r1, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe81 	bl	80022e4 <HAL_I2CEx_ConfigDigitalFilter>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f000 fb83 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	40005400 	.word	0x40005400
 80005f8:	00000202 	.word	0x00000202

080005fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	@ 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	240c      	movs	r4, #12
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	2314      	movs	r3, #20
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f005 fc76 	bl	8005f00 <memset>
  if(i2cHandle->Instance==I2C1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <HAL_I2C_MspInit+0x7c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d128      	bne.n	8000670 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <HAL_I2C_MspInit+0x80>)
 8000620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <HAL_I2C_MspInit+0x80>)
 8000624:	2102      	movs	r1, #2
 8000626:	430a      	orrs	r2, r1
 8000628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <HAL_I2C_MspInit+0x80>)
 800062c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062e:	2202      	movs	r2, #2
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000636:	0021      	movs	r1, r4
 8000638:	187b      	adds	r3, r7, r1
 800063a:	22c0      	movs	r2, #192	@ 0xc0
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2212      	movs	r2, #18
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <HAL_I2C_MspInit+0x84>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f001 faa1 	bl	8001ba4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <HAL_I2C_MspInit+0x80>)
 8000664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_I2C_MspInit+0x80>)
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	0389      	lsls	r1, r1, #14
 800066c:	430a      	orrs	r2, r1
 800066e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b009      	add	sp, #36	@ 0x24
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000
 8000680:	50000400 	.word	0x50000400

08000684 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <HAL_I2C_MspDeInit+0x3c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d10f      	bne.n	80006b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <HAL_I2C_MspDeInit+0x40>)
 8000698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_I2C_MspDeInit+0x40>)
 800069c:	490a      	ldr	r1, [pc, #40]	@ (80006c8 <HAL_I2C_MspDeInit+0x44>)
 800069e:	400a      	ands	r2, r1
 80006a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <HAL_I2C_MspDeInit+0x48>)
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fbfa 	bl	8001ea0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <HAL_I2C_MspDeInit+0x48>)
 80006ae:	2180      	movs	r1, #128	@ 0x80
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fbf5 	bl	8001ea0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	40005400 	.word	0x40005400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	ffdfffff 	.word	0xffdfffff
 80006cc:	50000400 	.word	0x50000400

080006d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80006e2:	d80a      	bhi.n	80006fa <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	231f      	movs	r3, #31
 80006ec:	4013      	ands	r3, r2
 80006ee:	4905      	ldr	r1, [pc, #20]	@ (8000704 <__NVIC_ClearPendingIRQ+0x34>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	409a      	lsls	r2, r3
 80006f4:	23c0      	movs	r3, #192	@ 0xc0
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	50ca      	str	r2, [r1, r3]
  }
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	e000e100 	.word	0xe000e100

08000708 <cb_WAKE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cb_WAKE(const char* str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  __NOP();
 8000710:	46c0      	nop			@ (mov r8, r8)
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}

0800071a <cb_OK>:
void cb_OK(const char* str)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  __NOP();
 8000722:	46c0      	nop			@ (mov r8, r8)
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <cb_JOIN>:
void cb_JOIN(const char* str)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	switch (str[7]) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3307      	adds	r3, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b46      	cmp	r3, #70	@ 0x46
 800073c:	d008      	beq.n	8000750 <cb_JOIN+0x24>
 800073e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000740:	d10a      	bne.n	8000758 <cb_JOIN+0x2c>
		case 'O':
			joined = true;
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <cb_JOIN+0x40>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
			device_state = DEVICE_COLLECT_DATA;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <cb_JOIN+0x44>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
			break;
 800074e:	e004      	b.n	800075a <cb_JOIN+0x2e>
		case 'F':
			joined = false;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <cb_JOIN+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
			break;
 8000756:	e000      	b.n	800075a <cb_JOIN+0x2e>
		default:
			__NOP();
 8000758:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_Delay(500);
 800075a:	23fa      	movs	r3, #250	@ 0xfa
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fe42 	bl	80013e8 <HAL_Delay>
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000148 	.word	0x20000148
 8000770:	20000000 	.word	0x20000000

08000774 <Get_RTC_Timestamp>:
	{ "OK",              cb_OK                  }, // I will remove this later as it is not imporant to know this
	{ "JOIN: [",         cb_JOIN                },
	{ NULL,              NULL                   }  // CRITICAL: Add this terminator!
};

void Get_RTC_Timestamp(char *buffer, uint16_t buffer_size) {
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	46c6      	mov	lr, r8
 8000778:	b500      	push	{lr}
 800077a:	b08e      	sub	sp, #56	@ 0x38
 800077c:	af06      	add	r7, sp, #24
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	000a      	movs	r2, r1
 8000782:	1cbb      	adds	r3, r7, #2
 8000784:	801a      	strh	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 8000786:	241c      	movs	r4, #28
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 800078e:	2608      	movs	r6, #8
 8000790:	19bb      	adds	r3, r7, r6
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f005 fbb1 	bl	8005f00 <memset>

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800079e:	19b9      	adds	r1, r7, r6
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <Get_RTC_Timestamp+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fe57 	bl	8003458 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80007aa:	1939      	adds	r1, r7, r4
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Get_RTC_Timestamp+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 feaf 	bl	8003514 <HAL_RTC_GetDate>

    // Format the timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007b6:	1cbb      	adds	r3, r7, #2
 80007b8:	8819      	ldrh	r1, [r3, #0]
             sDate.Year, sDate.Month, sDate.Date,
 80007ba:	0022      	movs	r2, r4
 80007bc:	18bb      	adds	r3, r7, r2
 80007be:	78db      	ldrb	r3, [r3, #3]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007c0:	4698      	mov	r8, r3
             sDate.Year, sDate.Month, sDate.Date,
 80007c2:	18bb      	adds	r3, r7, r2
 80007c4:	785b      	ldrb	r3, [r3, #1]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007c6:	001c      	movs	r4, r3
             sDate.Year, sDate.Month, sDate.Date,
 80007c8:	18bb      	adds	r3, r7, r2
 80007ca:	789b      	ldrb	r3, [r3, #2]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007cc:	001d      	movs	r5, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 80007ce:	0032      	movs	r2, r6
 80007d0:	18bb      	adds	r3, r7, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007d4:	001e      	movs	r6, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 80007d6:	18bb      	adds	r3, r7, r2
 80007d8:	785b      	ldrb	r3, [r3, #1]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007da:	469c      	mov	ip, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 80007dc:	18bb      	adds	r3, r7, r2
 80007de:	789b      	ldrb	r3, [r3, #2]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80007e0:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <Get_RTC_Timestamp+0x94>)
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	9304      	str	r3, [sp, #16]
 80007e6:	4663      	mov	r3, ip
 80007e8:	9303      	str	r3, [sp, #12]
 80007ea:	9602      	str	r6, [sp, #8]
 80007ec:	9501      	str	r5, [sp, #4]
 80007ee:	9400      	str	r4, [sp, #0]
 80007f0:	4643      	mov	r3, r8
 80007f2:	f005 fb4f 	bl	8005e94 <sniprintf>
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b008      	add	sp, #32
 80007fc:	bc80      	pop	{r7}
 80007fe:	46b8      	mov	r8, r7
 8000800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	2000014c 	.word	0x2000014c
 8000808:	08006724 	.word	0x08006724

0800080c <Debug_Print>:

void Debug_Print(const char *message) {
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b0ce      	sub	sp, #312	@ 0x138
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
    char buffer[256]; // Adjust size as needed
    char timestamp[32];

    // Get the timestamp
    Get_RTC_Timestamp(timestamp, sizeof(timestamp));
 8000814:	2408      	movs	r4, #8
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2120      	movs	r1, #32
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff ffaa 	bl	8000774 <Get_RTC_Timestamp>

    // Combine timestamp and message
    snprintf(buffer, sizeof(buffer), "%s%s", timestamp, message);
 8000820:	193c      	adds	r4, r7, r4
 8000822:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <Debug_Print+0x4c>)
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	0059      	lsls	r1, r3, #1
 8000828:	2528      	movs	r5, #40	@ 0x28
 800082a:	1978      	adds	r0, r7, r5
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	0023      	movs	r3, r4
 8000832:	f005 fb2f 	bl	8005e94 <sniprintf>

    // Send the debug message
    ATC_SendReceive(&dbg, buffer, 1000, NULL, 3000, 1, "OK");
 8000836:	23fa      	movs	r3, #250	@ 0xfa
 8000838:	009a      	lsls	r2, r3, #2
 800083a:	1979      	adds	r1, r7, r5
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <Debug_Print+0x50>)
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <Debug_Print+0x54>)
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	2301      	movs	r3, #1
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <Debug_Print+0x58>)
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	f005 f8ee 	bl	8005a2c <ATC_SendReceive>
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b04a      	add	sp, #296	@ 0x128
 8000856:	bdb0      	pop	{r4, r5, r7, pc}
 8000858:	08006748 	.word	0x08006748
 800085c:	2000010c 	.word	0x2000010c
 8000860:	08006718 	.word	0x08006718
 8000864:	00000bb8 	.word	0x00000bb8

08000868 <enter_low_power_mode>:

void enter_low_power_mode(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	Debug_Print("Going to sleep\r\n");
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <enter_low_power_mode+0x128>)
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ffcb 	bl	800080c <Debug_Print>

	// De-init I2C
	HAL_I2C_DeInit(&hi2c1);
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <enter_low_power_mode+0x12c>)
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fcb7 	bl	80021ec <HAL_I2C_DeInit>
	HAL_UART_DeInit(&huart1);
 800087e:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <enter_low_power_mode+0x130>)
 8000880:	0018      	movs	r0, r3
 8000882:	f003 f915 	bl	8003ab0 <HAL_UART_DeInit>
	// De-init LPUART1 (LoRaWAN UART)
	HAL_UART_DeInit(&hlpuart1);
 8000886:	4b45      	ldr	r3, [pc, #276]	@ (800099c <enter_low_power_mode+0x134>)
 8000888:	0018      	movs	r0, r3
 800088a:	f003 f911 	bl	8003ab0 <HAL_UART_DeInit>

	// Disable LPUART wake-up from Stop mode
	__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE); // Disable RXNE interrupt
 800088e:	4b43      	ldr	r3, [pc, #268]	@ (800099c <enter_low_power_mode+0x134>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b41      	ldr	r3, [pc, #260]	@ (800099c <enter_low_power_mode+0x134>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2120      	movs	r1, #32
 800089a:	438a      	bics	r2, r1
 800089c:	601a      	str	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE); // Disable IDLE interrupt
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <enter_low_power_mode+0x134>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <enter_low_power_mode+0x134>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2110      	movs	r1, #16
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 80008ae:	4b3b      	ldr	r3, [pc, #236]	@ (800099c <enter_low_power_mode+0x134>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2230      	movs	r2, #48	@ 0x30
 80008b4:	621a      	str	r2, [r3, #32]
	HAL_UARTEx_DisableStopMode(&hlpuart1); // Explicitly disable LPUART wake-up from Stop mode
 80008b6:	4b39      	ldr	r3, [pc, #228]	@ (800099c <enter_low_power_mode+0x134>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f004 fd82 	bl	80053c2 <HAL_UARTEx_DisableStopMode>



	// Disable EXTI interrupts to prevent GPIO-related wake-ups
	    for (uint32_t i = 0; i <= 15; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e007      	b.n	80008d4 <enter_low_power_mode+0x6c>
	        HAL_NVIC_DisableIRQ(i); // Disable EXTI lines 0-15
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fea4 	bl	8001616 <HAL_NVIC_DisableIRQ>
	    for (uint32_t i = 0; i <= 15; i++) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3301      	adds	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d9f4      	bls.n	80008c4 <enter_low_power_mode+0x5c>
	    }

	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <enter_low_power_mode+0x138>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 fff7 	bl	80038d0 <HAL_RTCEx_DeactivateWakeUpTimer>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <enter_low_power_mode+0x82>
	    {
	        Error_Handler();
 80008e6:	f000 fa03 	bl	8000cf0 <Error_Handler>
	    }

	    /* Configure RTC wake‑up timer for 60 seconds */
	    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <enter_low_power_mode+0x138>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	213b      	movs	r1, #59	@ 0x3b
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 ff15 	bl	8003720 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <enter_low_power_mode+0x96>
	    {
	        Error_Handler();
 80008fa:	f000 f9f9 	bl	8000cf0 <Error_Handler>
	    }

	/* Configure RTC wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <enter_low_power_mode+0x138>)
 8000900:	2204      	movs	r2, #4
 8000902:	213b      	movs	r1, #59	@ 0x3b
 8000904:	0018      	movs	r0, r3
 8000906:	f002 ff0b 	bl	8003720 <HAL_RTCEx_SetWakeUpTimer_IT>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <enter_low_power_mode+0xaa>
	{
	Error_Handler();
 800090e:	f000 f9ef 	bl	8000cf0 <Error_Handler>
	}

	// Clear all pending interrupts to prevent spurious wake-ups
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000914:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000916:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	0409      	lsls	r1, r1, #16
 800091c:	430a      	orrs	r2, r1
 800091e:	651a      	str	r2, [r3, #80]	@ 0x50
	NVIC_ClearPendingIRQ(LPUART1_IRQn);
 8000920:	201d      	movs	r0, #29
 8000922:	f7ff fed5 	bl	80006d0 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(USART1_IRQn);
 8000926:	201b      	movs	r0, #27
 8000928:	f7ff fed2 	bl	80006d0 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(RTC_IRQn); // Clear RTC interrupt pending bits
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff fecf 	bl	80006d0 <__NVIC_ClearPendingIRQ>
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF); // Clear RTC wake-up flag
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <enter_low_power_mode+0x138>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	22ff      	movs	r2, #255	@ 0xff
 800093a:	401a      	ands	r2, r3
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <enter_low_power_mode+0x138>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4919      	ldr	r1, [pc, #100]	@ (80009a8 <enter_low_power_mode+0x140>)
 8000942:	430a      	orrs	r2, r1
 8000944:	60da      	str	r2, [r3, #12]

	// Disable unused peripheral clocks to reduce power consumption
	__HAL_RCC_I2C1_CLK_DISABLE();
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <enter_low_power_mode+0x13c>)
 800094c:	4917      	ldr	r1, [pc, #92]	@ (80009ac <enter_low_power_mode+0x144>)
 800094e:	400a      	ands	r2, r1
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_DISABLE();
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000958:	4915      	ldr	r1, [pc, #84]	@ (80009b0 <enter_low_power_mode+0x148>)
 800095a:	400a      	ands	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_DMA1_CLK_DISABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <enter_low_power_mode+0x13c>)
 8000964:	2101      	movs	r1, #1
 8000966:	438a      	bics	r2, r1
 8000968:	631a      	str	r2, [r3, #48]	@ 0x30

	// Ensure debug connection is disabled in Stop mode (if using SWD/JTAG)
	DBGMCU->CR &= ~(DBGMCU_CR_DBG_STOP); // Disable debug in Stop mode
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <enter_low_power_mode+0x14c>)
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <enter_low_power_mode+0x14c>)
 8000970:	2102      	movs	r1, #2
 8000972:	438a      	bics	r2, r1
 8000974:	605a      	str	r2, [r3, #4]

	// Enter Stop Mode with low power regulator
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000976:	2101      	movs	r1, #1
 8000978:	2001      	movs	r0, #1
 800097a:	f001 fcff 	bl	800237c <HAL_PWR_EnterSTOPMode>

	// When we wake up, execution continues here
	SystemClock_Config();
 800097e:	f000 f90f 	bl	8000ba0 <SystemClock_Config>
	exit_low_power_mode();
 8000982:	f000 f819 	bl	80009b8 <exit_low_power_mode>
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	08006750 	.word	0x08006750
 8000994:	2000007c 	.word	0x2000007c
 8000998:	200001fc 	.word	0x200001fc
 800099c:	20000174 	.word	0x20000174
 80009a0:	2000014c 	.word	0x2000014c
 80009a4:	40021000 	.word	0x40021000
 80009a8:	fffffb7f 	.word	0xfffffb7f
 80009ac:	ffdfffff 	.word	0xffdfffff
 80009b0:	ffffbfff 	.word	0xffffbfff
 80009b4:	40015800 	.word	0x40015800

080009b8 <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ca:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009dc:	2102      	movs	r1, #2
 80009de:	430a      	orrs	r2, r1
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	2202      	movs	r2, #2
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009f4:	2104      	movs	r1, #4
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <exit_low_power_mode+0xd8>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	2204      	movs	r2, #4
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	0389      	lsls	r1, r1, #14
 8000a10:	430a      	orrs	r2, r1
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a14:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	02c9      	lsls	r1, r1, #11
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <exit_low_power_mode+0xd8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs (this will restore PB5 to its normal configuration)
    MX_GPIO_Init();
 8000a3a:	f7ff fd3f 	bl	80004bc <MX_GPIO_Init>
    MX_DMA_Init();                              // I did this because it is in the same order as it was generated
 8000a3e:	f7ff fd17 	bl	8000470 <MX_DMA_Init>
    MX_I2C1_Init();
 8000a42:	f7ff fd9b 	bl	800057c <MX_I2C1_Init>
    MX_LPUART1_UART_Init();
 8000a46:	f000 fa55 	bl	8000ef4 <MX_LPUART1_UART_Init>
    MX_USART1_UART_Init();
 8000a4a:	f000 fa81 	bl	8000f50 <MX_USART1_UART_Init>
    MX_RTC_Init();
 8000a4e:	f000 f955 	bl	8000cfc <MX_RTC_Init>
    ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // this SHOULD make the ATC serial commands workagain
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <exit_low_power_mode+0xdc>)
 8000a54:	2280      	movs	r2, #128	@ 0x80
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	490f      	ldr	r1, [pc, #60]	@ (8000a98 <exit_low_power_mode+0xe0>)
 8000a5a:	4810      	ldr	r0, [pc, #64]	@ (8000a9c <exit_low_power_mode+0xe4>)
 8000a5c:	f004 fee7 	bl	800582e <ATC_Init>
    ATC_Init(&dbg, &huart1, 512, "Debug");
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <exit_low_power_mode+0xe8>)
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	490f      	ldr	r1, [pc, #60]	@ (8000aa4 <exit_low_power_mode+0xec>)
 8000a68:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <exit_low_power_mode+0xf0>)
 8000a6a:	f004 fee0 	bl	800582e <ATC_Init>
    ATC_SetEvents(&lora, events);               // Setup all async events again
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <exit_low_power_mode+0xf4>)
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <exit_low_power_mode+0xe4>)
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f004 ff91 	bl	800599c <ATC_SetEvents>
    device_state = DEVICE_COLLECT_DATA;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <exit_low_power_mode+0xf8>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]

	Debug_Print("Waking UP!\r\n");
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <exit_low_power_mode+0xfc>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fec2 	bl	800080c <Debug_Print>

}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	08006764 	.word	0x08006764
 8000a98:	20000174 	.word	0x20000174
 8000a9c:	200000d0 	.word	0x200000d0
 8000aa0:	0800676c 	.word	0x0800676c
 8000aa4:	200001fc 	.word	0x200001fc
 8000aa8:	2000010c 	.word	0x2000010c
 8000aac:	080067ac 	.word	0x080067ac
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	08006774 	.word	0x08006774

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fc23 	bl	8001308 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f86d 	bl	8000ba0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f7ff fcf9 	bl	80004bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f7ff fcd1 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ace:	f7ff fd55 	bl	800057c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000ad2:	f000 fa0f 	bl	8000ef4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000ad6:	f000 f911 	bl	8000cfc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ada:	f000 fa39 	bl	8000f50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <main+0xb8>)
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	4923      	ldr	r1, [pc, #140]	@ (8000b74 <main+0xbc>)
 8000ae6:	4824      	ldr	r0, [pc, #144]	@ (8000b78 <main+0xc0>)
 8000ae8:	f004 fea1 	bl	800582e <ATC_Init>
  ATC_Init(&dbg, &huart1, 512, "Debug");
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <main+0xc4>)
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	4923      	ldr	r1, [pc, #140]	@ (8000b80 <main+0xc8>)
 8000af4:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <main+0xcc>)
 8000af6:	f004 fe9a 	bl	800582e <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000afa:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <main+0xd0>)
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <main+0xc0>)
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f004 ff4b 	bl	800599c <ATC_SetEvents>

  Debug_Print("RDY\r\n");
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <main+0xd4>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fe7f 	bl	800080c <Debug_Print>

  HAL_Delay(10000); // This makes it easier to debug, don't remove
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <main+0xd8>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fc69 	bl	80013e8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char* ATSEND_Result = NULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  uint32_t last_command_time = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]

  Debug_Print("DeviceState=Sleep\r\n");
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <main+0xdc>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fe73 	bl	800080c <Debug_Print>
  HAL_Delay(100); // This makes it easier to debug, don't remove
 8000b26:	2064      	movs	r0, #100	@ 0x64
 8000b28:	f000 fc5e 	bl	80013e8 <HAL_Delay>
  device_state = DEVICE_SLEEP;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <main+0xe0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]

  while(1)
  {
      ATC_Loop(&lora);
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <main+0xc0>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f004 ff69 	bl	8005a0c <ATC_Loop>
	  Debug_Print("loop!!!\r\n");
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <main+0xe4>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fe65 	bl	800080c <Debug_Print>
      HAL_Delay(100); // This makes it easier to debug, don't remove
 8000b42:	2064      	movs	r0, #100	@ 0x64
 8000b44:	f000 fc50 	bl	80013e8 <HAL_Delay>
      switch (device_state)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <main+0xe0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d00c      	beq.n	8000b6c <main+0xb4>
 8000b52:	dcee      	bgt.n	8000b32 <main+0x7a>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <main+0xa6>
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d003      	beq.n	8000b64 <main+0xac>
 8000b5c:	e007      	b.n	8000b6e <main+0xb6>
//              ATC_SendReceive(&lora, "AT+JOIN\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
//              last_command_time = HAL_GetTick();
//          }
	  break;
	  case DEVICE_SLEEP:
		  enter_low_power_mode();
 8000b5e:	f7ff fe83 	bl	8000868 <enter_low_power_mode>
	  break;
 8000b62:	e004      	b.n	8000b6e <main+0xb6>
	  case DEVICE_COLLECT_DATA:
//		  ATC_SendReceive(&dbg, "Sending data...\r\n", 1000, NULL, 3000, 1, "OK");
//		  // what sucks is when the device sleeps, I loose debugger session, so i can't get a break point here after sleep!
//		  ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
//		  ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
		  device_state = DEVICE_SLEEP;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <main+0xe0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	  break;
 8000b6a:	e000      	b.n	8000b6e <main+0xb6>
	  break;
 8000b6c:	46c0      	nop			@ (mov r8, r8)
      ATC_Loop(&lora);
 8000b6e:	e7e0      	b.n	8000b32 <main+0x7a>
 8000b70:	08006764 	.word	0x08006764
 8000b74:	20000174 	.word	0x20000174
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	0800676c 	.word	0x0800676c
 8000b80:	200001fc 	.word	0x200001fc
 8000b84:	2000010c 	.word	0x2000010c
 8000b88:	080067ac 	.word	0x080067ac
 8000b8c:	08006784 	.word	0x08006784
 8000b90:	00002710 	.word	0x00002710
 8000b94:	0800678c 	.word	0x0800678c
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	080067a0 	.word	0x080067a0

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b09f      	sub	sp, #124	@ 0x7c
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	2440      	movs	r4, #64	@ 0x40
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2338      	movs	r3, #56	@ 0x38
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f005 f9a5 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	232c      	movs	r3, #44	@ 0x2c
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f005 f99d 	bl	8005f00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2328      	movs	r3, #40	@ 0x28
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f005 f996 	bl	8005f00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <SystemClock_Config+0xe8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000c8c <SystemClock_Config+0xec>)
 8000bda:	401a      	ands	r2, r3
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <SystemClock_Config+0xe8>)
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	0109      	lsls	r1, r1, #4
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000be6:	0021      	movs	r1, r4
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2218      	movs	r2, #24
 8000bec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	0212      	lsls	r2, r2, #8
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fc0f 	bl	8002434 <HAL_RCC_OscConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c1a:	f000 f869 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	212c      	movs	r1, #44	@ 0x2c
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	220f      	movs	r2, #15
 8000c24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2100      	movs	r1, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 ffca 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c4c:	f000 f850 	bl	8000cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	222d      	movs	r2, #45	@ 0x2d
 8000c54:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2280      	movs	r2, #128	@ 0x80
 8000c6c:	0292      	lsls	r2, r2, #10
 8000c6e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 f9b6 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000c7c:	f000 f838 	bl	8000cf0 <Error_Handler>
  }
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b01f      	add	sp, #124	@ 0x7c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	ffffe7ff 	.word	0xffffe7ff

08000c90 <HAL_UARTEx_RxEventCallback>:
  __NOP();

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	000a      	movs	r2, r1
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d106      	bne.n	8000cb6 <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 8000ca8:	1cbb      	adds	r3, r7, #2
 8000caa:	881a      	ldrh	r2, [r3, #0]
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 ffb5 	bl	8005c20 <ATC_IdleLineCallback>
  }
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	200000d0 	.word	0x200000d0

08000cc8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <HAL_UART_ErrorCallback+0x24>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d104      	bne.n	8000ce4 <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	621a      	str	r2, [r3, #32]
  }
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40004800 	.word	0x40004800

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d02:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <MX_RTC_Init+0x64>)
 8000d04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d0e:	227f      	movs	r2, #127	@ 0x7f
 8000d10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d14:	22ff      	movs	r2, #255	@ 0xff
 8000d16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 faf4 	bl	8003320 <HAL_RTC_Init>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d3c:	f7ff ffd8 	bl	8000cf0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d40:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <MX_RTC_Init+0x68>)
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_RTC_Init+0x60>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f002 fcea 	bl	8003720 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d50:	f7ff ffce 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	2000014c 	.word	0x2000014c
 8000d60:	40002800 	.word	0x40002800
 8000d64:	0000500b 	.word	0x0000500b

08000d68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_RTC_MspInit+0x38>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10e      	bne.n	8000d98 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_RTC_MspInit+0x3c>)
 8000d7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_RTC_MspInit+0x3c>)
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	02c9      	lsls	r1, r1, #11
 8000d84:	430a      	orrs	r2, r1
 8000d86:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f000 fc1d 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f000 fc2f 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40002800 	.word	0x40002800
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_MspInit+0x24>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_MspInit+0x24>)
 8000dbe:	2180      	movs	r1, #128	@ 0x80
 8000dc0:	0549      	lsls	r1, r1, #21
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 fada 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <RTC_IRQHandler+0x14>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fdc4 	bl	8003998 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	2000014c 	.word	0x2000014c

08000e1c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fdd7 	bl	80019d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <DMA1_Channel2_3_IRQHandler+0x20>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fdd3 	bl	80019d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	200002cc 	.word	0x200002cc
 8000e3c:	20000284 	.word	0x20000284

08000e40 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 fdc5 	bl	80019d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 fdc1 	bl	80019d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	2000035c 	.word	0x2000035c
 8000e60:	20000314 	.word	0x20000314

08000e64 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <RNG_LPUART1_IRQHandler+0x14>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f003 f802 	bl	8003e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000174 	.word	0x20000174

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f005 f86c 	bl	8005f88 <__errno>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	425b      	negs	r3, r3
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	18d2      	adds	r2, r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20005000 	.word	0x20005000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000170 	.word	0x20000170
 8000ee4:	200004f0 	.word	0x200004f0

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <MX_LPUART1_UART_Init+0x58>)
 8000efc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f00:	22e1      	movs	r2, #225	@ 0xe1
 8000f02:	0252      	lsls	r2, r2, #9
 8000f04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <MX_LPUART1_UART_Init+0x54>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 fd68 	bl	8003a08 <HAL_UART_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f7ff fed8 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000174 	.word	0x20000174
 8000f4c:	40004800 	.word	0x40004800

08000f50 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <MX_USART1_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f5c:	2296      	movs	r2, #150	@ 0x96
 8000f5e:	0192      	lsls	r2, r2, #6
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <MX_USART1_UART_Init+0x58>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f002 fd37 	bl	8003a08 <HAL_UART_Init>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f7ff fea7 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001fc 	.word	0x200001fc
 8000fac:	40013800 	.word	0x40013800

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	@ 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	2414      	movs	r4, #20
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f004 ff9c 	bl	8005f00 <memset>
  if(uartHandle->Instance==LPUART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a87      	ldr	r2, [pc, #540]	@ (80011ec <HAL_UART_MspInit+0x23c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d000      	beq.n	8000fd4 <HAL_UART_MspInit+0x24>
 8000fd2:	e084      	b.n	80010de <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fd4:	4b86      	ldr	r3, [pc, #536]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8000fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fd8:	4b85      	ldr	r3, [pc, #532]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8000fda:	2180      	movs	r1, #128	@ 0x80
 8000fdc:	02c9      	lsls	r1, r1, #11
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b83      	ldr	r3, [pc, #524]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8000fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe6:	4b82      	ldr	r3, [pc, #520]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fee:	4b80      	ldr	r3, [pc, #512]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8000ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2203      	movs	r2, #3
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2206      	movs	r2, #6
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	187a      	adds	r2, r7, r1
 800101c:	23a0      	movs	r3, #160	@ 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fdbe 	bl	8001ba4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8001028:	4b72      	ldr	r3, [pc, #456]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 800102a:	4a73      	ldr	r2, [pc, #460]	@ (80011f8 <HAL_UART_MspInit+0x248>)
 800102c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 800102e:	4b71      	ldr	r3, [pc, #452]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001030:	2205      	movs	r2, #5
 8001032:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001034:	4b6f      	ldr	r3, [pc, #444]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103a:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001040:	4b6c      	ldr	r3, [pc, #432]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001046:	4b6b      	ldr	r3, [pc, #428]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104c:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001052:	4b68      	ldr	r3, [pc, #416]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800105e:	4b65      	ldr	r3, [pc, #404]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001060:	0018      	movs	r0, r3
 8001062:	f000 faf5 	bl	8001650 <HAL_DMA_Init>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800106a:	f7ff fe41 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a60      	ldr	r2, [pc, #384]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001072:	675a      	str	r2, [r3, #116]	@ 0x74
 8001074:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <HAL_UART_MspInit+0x244>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800107a:	4b60      	ldr	r3, [pc, #384]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 800107c:	4a60      	ldr	r2, [pc, #384]	@ (8001200 <HAL_UART_MspInit+0x250>)
 800107e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8001080:	4b5e      	ldr	r3, [pc, #376]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 8001082:	2205      	movs	r2, #5
 8001084:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001086:	4b5d      	ldr	r3, [pc, #372]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 8001088:	2210      	movs	r2, #16
 800108a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b5b      	ldr	r3, [pc, #364]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b5a      	ldr	r3, [pc, #360]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001098:	4b58      	ldr	r3, [pc, #352]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109e:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80010a4:	4b55      	ldr	r3, [pc, #340]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010aa:	4b54      	ldr	r3, [pc, #336]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80010b0:	4b52      	ldr	r3, [pc, #328]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 facc 	bl	8001650 <HAL_DMA_Init>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80010bc:	f7ff fe18 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4e      	ldr	r2, [pc, #312]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_UART_MspInit+0x24c>)
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	201d      	movs	r0, #29
 80010d2:	f000 fa7b 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80010d6:	201d      	movs	r0, #29
 80010d8:	f000 fa8d 	bl	80015f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010dc:	e082      	b.n	80011e4 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a48      	ldr	r2, [pc, #288]	@ (8001204 <HAL_UART_MspInit+0x254>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d000      	beq.n	80010ea <HAL_UART_MspInit+0x13a>
 80010e8:	e07c      	b.n	80011e4 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ea:	4b41      	ldr	r3, [pc, #260]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 80010ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ee:	4b40      	ldr	r3, [pc, #256]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	01c9      	lsls	r1, r1, #7
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b3d      	ldr	r3, [pc, #244]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 80010fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010fc:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001104:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <HAL_UART_MspInit+0x240>)
 8001106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001110:	2114      	movs	r1, #20
 8001112:	187b      	adds	r3, r7, r1
 8001114:	22c0      	movs	r2, #192	@ 0xc0
 8001116:	00d2      	lsls	r2, r2, #3
 8001118:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2202      	movs	r2, #2
 800111e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2203      	movs	r2, #3
 800112a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2204      	movs	r2, #4
 8001130:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	187a      	adds	r2, r7, r1
 8001134:	23a0      	movs	r3, #160	@ 0xa0
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fd32 	bl	8001ba4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001142:	4a32      	ldr	r2, [pc, #200]	@ (800120c <HAL_UART_MspInit+0x25c>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001148:	2203      	movs	r2, #3
 800114a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114c:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <HAL_UART_MspInit+0x258>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001158:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <HAL_UART_MspInit+0x258>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <HAL_UART_MspInit+0x258>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <HAL_UART_MspInit+0x258>)
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fa69 	bl	8001650 <HAL_DMA_Init>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8001182:	f7ff fdb5 	bl	8000cf0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <HAL_UART_MspInit+0x258>)
 800118a:	675a      	str	r2, [r3, #116]	@ 0x74
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <HAL_UART_MspInit+0x258>)
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_UART_MspInit+0x260>)
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_UART_MspInit+0x264>)
 8001196:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_UART_MspInit+0x260>)
 800119a:	2203      	movs	r2, #3
 800119c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 fa40 	bl	8001650 <HAL_DMA_Init>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80011d4:	f7ff fd8c 	bl	8000cf0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <HAL_UART_MspInit+0x260>)
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b00b      	add	sp, #44	@ 0x2c
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	40004800 	.word	0x40004800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	20000284 	.word	0x20000284
 80011f8:	40020030 	.word	0x40020030
 80011fc:	200002cc 	.word	0x200002cc
 8001200:	4002001c 	.word	0x4002001c
 8001204:	40013800 	.word	0x40013800
 8001208:	20000314 	.word	0x20000314
 800120c:	40020058 	.word	0x40020058
 8001210:	2000035c 	.word	0x2000035c
 8001214:	40020044 	.word	0x40020044

08001218 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_UART_MspDeInit+0x88>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d119      	bne.n	800125e <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <HAL_UART_MspDeInit+0x8c>)
 800122c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_UART_MspDeInit+0x8c>)
 8001230:	491d      	ldr	r1, [pc, #116]	@ (80012a8 <HAL_UART_MspDeInit+0x90>)
 8001232:	400a      	ands	r2, r1
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001236:	23a0      	movs	r3, #160	@ 0xa0
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	210c      	movs	r1, #12
 800123c:	0018      	movs	r0, r3
 800123e:	f000 fe2f 	bl	8001ea0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fa7a 	bl	8001740 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001250:	0018      	movs	r0, r3
 8001252:	f000 fa75 	bl	8001740 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(RNG_LPUART1_IRQn);
 8001256:	201d      	movs	r0, #29
 8001258:	f000 f9dd 	bl	8001616 <HAL_NVIC_DisableIRQ>
    HAL_DMA_DeInit(uartHandle->hdmatx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800125c:	e01c      	b.n	8001298 <HAL_UART_MspDeInit+0x80>
  else if(uartHandle->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <HAL_UART_MspDeInit+0x94>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d117      	bne.n	8001298 <HAL_UART_MspDeInit+0x80>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_UART_MspDeInit+0x8c>)
 800126a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_UART_MspDeInit+0x8c>)
 800126e:	4910      	ldr	r1, [pc, #64]	@ (80012b0 <HAL_UART_MspDeInit+0x98>)
 8001270:	400a      	ands	r2, r1
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001274:	23c0      	movs	r3, #192	@ 0xc0
 8001276:	00da      	lsls	r2, r3, #3
 8001278:	23a0      	movs	r3, #160	@ 0xa0
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	0011      	movs	r1, r2
 800127e:	0018      	movs	r0, r3
 8001280:	f000 fe0e 	bl	8001ea0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001288:	0018      	movs	r0, r3
 800128a:	f000 fa59 	bl	8001740 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fa54 	bl	8001740 <HAL_DMA_DeInit>
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004800 	.word	0x40004800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	fffbffff 	.word	0xfffbffff
 80012ac:	40013800 	.word	0x40013800
 80012b0:	ffffbfff 	.word	0xffffbfff

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80012b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff fe16 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80012e2:	f004 fe57 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fbe7 	bl	8000ab8 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
   ldr   r0, =_estack
 80012ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012f8:	0800687c 	.word	0x0800687c
  ldr r2, =_sbss
 80012fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001300:	200004f0 	.word	0x200004f0

08001304 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_COMP_IRQHandler>
	...

08001308 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_Init+0x3c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Init+0x3c>)
 800131a:	2140      	movs	r1, #64	@ 0x40
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001320:	2000      	movs	r0, #0
 8001322:	f000 f811 	bl	8001348 <HAL_InitTick>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d003      	beq.n	8001332 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e001      	b.n	8001336 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001332:	f7ff fd39 	bl	8000da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	40022000 	.word	0x40022000

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_InitTick+0x5c>)
 8001352:	681c      	ldr	r4, [r3, #0]
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	23fa      	movs	r3, #250	@ 0xfa
 800135c:	0098      	lsls	r0, r3, #2
 800135e:	f7fe fee5 	bl	800012c <__udivsi3>
 8001362:	0003      	movs	r3, r0
 8001364:	0019      	movs	r1, r3
 8001366:	0020      	movs	r0, r4
 8001368:	f7fe fee0 	bl	800012c <__udivsi3>
 800136c:	0003      	movs	r3, r0
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f961 	bl	8001636 <HAL_SYSTICK_Config>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d001      	beq.n	800137c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e00f      	b.n	800139c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d80b      	bhi.n	800139a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	2200      	movs	r2, #0
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f91e 	bl	80015cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_InitTick+0x64>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b003      	add	sp, #12
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	20000004 	.word	0x20000004
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_IncTick+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	001a      	movs	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	18d2      	adds	r2, r2, r3
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_IncTick+0x20>)
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	200003a4 	.word	0x200003a4

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <HAL_GetTick+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	200003a4 	.word	0x200003a4

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	001a      	movs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	189b      	adds	r3, r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	f7ff ffe0 	bl	80013d4 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	2000000c 	.word	0x2000000c

08001430 <__NVIC_EnableIRQ>:
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b7f      	cmp	r3, #127	@ 0x7f
 8001442:	d809      	bhi.n	8001458 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	231f      	movs	r3, #31
 800144c:	401a      	ands	r2, r3
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_EnableIRQ+0x30>)
 8001450:	2101      	movs	r1, #1
 8001452:	4091      	lsls	r1, r2
 8001454:	000a      	movs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_DisableIRQ>:
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b7f      	cmp	r3, #127	@ 0x7f
 8001476:	d810      	bhi.n	800149a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	001a      	movs	r2, r3
 800147e:	231f      	movs	r3, #31
 8001480:	4013      	ands	r3, r2
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <__NVIC_DisableIRQ+0x40>)
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800148e:	f3bf 8f4f 	dsb	sy
}
 8001492:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001494:	f3bf 8f6f 	isb	sy
}
 8001498:	46c0      	nop			@ (mov r8, r8)
}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80014bc:	d828      	bhi.n	8001510 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014be:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <__NVIC_SetPriority+0xd4>)
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	33c0      	adds	r3, #192	@ 0xc0
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	589b      	ldr	r3, [r3, r2]
 80014ce:	1dfa      	adds	r2, r7, #7
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	0011      	movs	r1, r2
 80014d4:	2203      	movs	r2, #3
 80014d6:	400a      	ands	r2, r1
 80014d8:	00d2      	lsls	r2, r2, #3
 80014da:	21ff      	movs	r1, #255	@ 0xff
 80014dc:	4091      	lsls	r1, r2
 80014de:	000a      	movs	r2, r1
 80014e0:	43d2      	mvns	r2, r2
 80014e2:	401a      	ands	r2, r3
 80014e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	22ff      	movs	r2, #255	@ 0xff
 80014ec:	401a      	ands	r2, r3
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	2303      	movs	r3, #3
 80014f6:	4003      	ands	r3, r0
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fc:	481f      	ldr	r0, [pc, #124]	@ (800157c <__NVIC_SetPriority+0xd4>)
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	430a      	orrs	r2, r1
 8001508:	33c0      	adds	r3, #192	@ 0xc0
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800150e:	e031      	b.n	8001574 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <__NVIC_SetPriority+0xd8>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0019      	movs	r1, r3
 8001518:	230f      	movs	r3, #15
 800151a:	400b      	ands	r3, r1
 800151c:	3b08      	subs	r3, #8
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3306      	adds	r3, #6
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0011      	movs	r1, r2
 8001530:	2203      	movs	r2, #3
 8001532:	400a      	ands	r2, r1
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	21ff      	movs	r1, #255	@ 0xff
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	401a      	ands	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	2303      	movs	r3, #3
 8001552:	4003      	ands	r3, r0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <__NVIC_SetPriority+0xd8>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	001c      	movs	r4, r3
 8001560:	230f      	movs	r3, #15
 8001562:	4023      	ands	r3, r4
 8001564:	3b08      	subs	r3, #8
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	3306      	adds	r3, #6
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	18c3      	adds	r3, r0, r3
 8001570:	3304      	adds	r3, #4
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	46c0      	nop			@ (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b003      	add	sp, #12
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	045b      	lsls	r3, r3, #17
 8001594:	429a      	cmp	r2, r3
 8001596:	d301      	bcc.n	800159c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001598:	2301      	movs	r3, #1
 800159a:	e010      	b.n	80015be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <SysTick_Config+0x44>)
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	3a01      	subs	r2, #1
 80015a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	2103      	movs	r1, #3
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff ff7c 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x44>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x44>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	210f      	movs	r1, #15
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	1c02      	adds	r2, r0, #0
 80015dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	0002      	movs	r2, r0
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b25b      	sxtb	r3, r3
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff11 	bl	8001430 <__NVIC_EnableIRQ>
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	0002      	movs	r2, r0
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff1b 	bl	8001464 <__NVIC_DisableIRQ>
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff ff9f 	bl	8001584 <SysTick_Config>
 8001646:	0003      	movs	r3, r0
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e061      	b.n	8001726 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_DMA_Init+0xe0>)
 8001668:	4694      	mov	ip, r2
 800166a:	4463      	add	r3, ip
 800166c:	2114      	movs	r1, #20
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe fd5c 	bl	800012c <__udivsi3>
 8001674:	0003      	movs	r3, r0
 8001676:	009a      	lsls	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a2d      	ldr	r2, [pc, #180]	@ (8001734 <HAL_DMA_Init+0xe4>)
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2225      	movs	r2, #37	@ 0x25
 8001686:	2102      	movs	r1, #2
 8001688:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a28      	ldr	r2, [pc, #160]	@ (8001738 <HAL_DMA_Init+0xe8>)
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	01db      	lsls	r3, r3, #7
 80016d8:	429a      	cmp	r2, r3
 80016da:	d018      	beq.n	800170e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_DMA_Init+0xec>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	211c      	movs	r1, #28
 80016e6:	400b      	ands	r3, r1
 80016e8:	210f      	movs	r1, #15
 80016ea:	4099      	lsls	r1, r3
 80016ec:	000b      	movs	r3, r1
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_DMA_Init+0xec>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_DMA_Init+0xec>)
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	201c      	movs	r0, #28
 8001704:	4003      	ands	r3, r0
 8001706:	409a      	lsls	r2, r3
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <HAL_DMA_Init+0xec>)
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2225      	movs	r2, #37	@ 0x25
 8001718:	2101      	movs	r1, #1
 800171a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	@ 0x24
 8001720:	2100      	movs	r1, #0
 8001722:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	bffdfff8 	.word	0xbffdfff8
 8001734:	40020000 	.word	0x40020000
 8001738:	ffff800f 	.word	0xffff800f
 800173c:	400200a8 	.word	0x400200a8

08001740 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e04a      	b.n	80017e8 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <HAL_DMA_DeInit+0xb0>)
 8001768:	4694      	mov	ip, r2
 800176a:	4463      	add	r3, ip
 800176c:	2114      	movs	r1, #20
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fcdc 	bl	800012c <__udivsi3>
 8001774:	0003      	movs	r3, r0
 8001776:	009a      	lsls	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a1d      	ldr	r2, [pc, #116]	@ (80017f4 <HAL_DMA_DeInit+0xb4>)
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	221c      	movs	r2, #28
 8001790:	401a      	ands	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	2101      	movs	r1, #1
 8001798:	4091      	lsls	r1, r2
 800179a:	000a      	movs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_DMA_DeInit+0xb8>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	211c      	movs	r1, #28
 80017a8:	400b      	ands	r3, r1
 80017aa:	210f      	movs	r1, #15
 80017ac:	4099      	lsls	r1, r3
 80017ae:	000b      	movs	r3, r1
 80017b0:	43d9      	mvns	r1, r3
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_DMA_DeInit+0xb8>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2225      	movs	r2, #37	@ 0x25
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2224      	movs	r2, #36	@ 0x24
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	bffdfff8 	.word	0xbffdfff8
 80017f4:	40020000 	.word	0x40020000
 80017f8:	400200a8 	.word	0x400200a8

080017fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180a:	2317      	movs	r3, #23
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2224      	movs	r2, #36	@ 0x24
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Start_IT+0x24>
 800181c:	2302      	movs	r3, #2
 800181e:	e04f      	b.n	80018c0 <HAL_DMA_Start_IT+0xc4>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	2101      	movs	r1, #1
 8001826:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2225      	movs	r2, #37	@ 0x25
 800182c:	5c9b      	ldrb	r3, [r3, r2]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d13a      	bne.n	80018aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2225      	movs	r2, #37	@ 0x25
 8001838:	2102      	movs	r1, #2
 800183a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	438a      	bics	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f974 	bl	8001b46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	210e      	movs	r1, #14
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e00f      	b.n	8001898 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2104      	movs	r1, #4
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	210a      	movs	r1, #10
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2101      	movs	r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2224      	movs	r2, #36	@ 0x24
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b2:	2317      	movs	r3, #23
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80018ba:	2317      	movs	r3, #23
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b006      	add	sp, #24
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d0:	230f      	movs	r3, #15
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2225      	movs	r2, #37	@ 0x25
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2224      	movs	r2, #36	@ 0x24
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e024      	b.n	8001940 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	210e      	movs	r1, #14
 8001902:	438a      	bics	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	438a      	bics	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	221c      	movs	r2, #28
 800191c:	401a      	ands	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	4091      	lsls	r1, r2
 8001926:	000a      	movs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2225      	movs	r2, #37	@ 0x25
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2224      	movs	r2, #36	@ 0x24
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]

    return status;
 800193a:	230f      	movs	r3, #15
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	210f      	movs	r1, #15
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2225      	movs	r2, #37	@ 0x25
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d006      	beq.n	8001972 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2204      	movs	r2, #4
 8001968:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e02a      	b.n	80019c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	210e      	movs	r1, #14
 800197e:	438a      	bics	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	438a      	bics	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	221c      	movs	r2, #28
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	2101      	movs	r1, #1
 80019a0:	4091      	lsls	r1, r2
 80019a2:	000a      	movs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2225      	movs	r2, #37	@ 0x25
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2224      	movs	r2, #36	@ 0x24
 80019b2:	2100      	movs	r1, #0
 80019b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	0010      	movs	r0, r2
 80019c6:	4798      	blx	r3
    }
  }
  return status;
 80019c8:	230f      	movs	r3, #15
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	781b      	ldrb	r3, [r3, #0]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b004      	add	sp, #16
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	221c      	movs	r2, #28
 80019f4:	4013      	ands	r3, r2
 80019f6:	2204      	movs	r2, #4
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	d026      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x7a>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2204      	movs	r2, #4
 8001a06:	4013      	ands	r3, r2
 8001a08:	d022      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2220      	movs	r2, #32
 8001a12:	4013      	ands	r3, r2
 8001a14:	d107      	bne.n	8001a26 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2104      	movs	r1, #4
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	221c      	movs	r2, #28
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	2104      	movs	r1, #4
 8001a34:	4091      	lsls	r1, r2
 8001a36:	000a      	movs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d100      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x6e>
 8001a42:	e071      	b.n	8001b28 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a4e:	e06b      	b.n	8001b28 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	221c      	movs	r2, #28
 8001a56:	4013      	ands	r3, r2
 8001a58:	2202      	movs	r2, #2
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	d02d      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0xea>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d029      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2220      	movs	r2, #32
 8001a74:	4013      	ands	r3, r2
 8001a76:	d10b      	bne.n	8001a90 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	210a      	movs	r1, #10
 8001a84:	438a      	bics	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2225      	movs	r2, #37	@ 0x25
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	221c      	movs	r2, #28
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	4091      	lsls	r1, r2
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	@ 0x24
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d039      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	0010      	movs	r0, r2
 8001abc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001abe:	e033      	b.n	8001b28 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	221c      	movs	r2, #28
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2208      	movs	r2, #8
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d02a      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x154>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d026      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	210e      	movs	r1, #14
 8001ae8:	438a      	bics	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af0:	221c      	movs	r2, #28
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	2101      	movs	r1, #1
 8001afa:	4091      	lsls	r1, r2
 8001afc:	000a      	movs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2225      	movs	r2, #37	@ 0x25
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2224      	movs	r2, #36	@ 0x24
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	0010      	movs	r0, r2
 8001b26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46c0      	nop			@ (mov r8, r8)
}
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	221c      	movs	r2, #28
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	2101      	movs	r1, #1
 8001b62:	4091      	lsls	r1, r2
 8001b64:	000a      	movs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d108      	bne.n	8001b8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b88:	e007      	b.n	8001b9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	60da      	str	r2, [r3, #12]
}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bba:	e155      	b.n	8001e68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d100      	bne.n	8001bd4 <HAL_GPIO_Init+0x30>
 8001bd2:	e146      	b.n	8001e62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	0013      	movs	r3, r2
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	2201      	movs	r2, #1
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	58d3      	ldr	r3, [r2, r3]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4013      	ands	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2107      	movs	r1, #7
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	6939      	ldr	r1, [r7, #16]
 8001cdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	23c0      	movs	r3, #192	@ 0xc0
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <HAL_GPIO_Init+0x17c>
 8001d1e:	e0a0      	b.n	8001e62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d24:	4b56      	ldr	r3, [pc, #344]	@ (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2c:	4a55      	ldr	r2, [pc, #340]	@ (8001e84 <HAL_GPIO_Init+0x2e0>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	589b      	ldr	r3, [r3, r2]
 8001d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	23a0      	movs	r3, #160	@ 0xa0
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x1f6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e88 <HAL_GPIO_Init+0x2e4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x1f2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a49      	ldr	r2, [pc, #292]	@ (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a48      	ldr	r2, [pc, #288]	@ (8001e90 <HAL_GPIO_Init+0x2ec>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x1ea>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a47      	ldr	r2, [pc, #284]	@ (8001e94 <HAL_GPIO_Init+0x2f0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x1e6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a46      	ldr	r2, [pc, #280]	@ (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x1f8>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	2103      	movs	r1, #3
 8001da0:	400a      	ands	r2, r1
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_GPIO_Init+0x2e0>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	035b      	lsls	r3, r3, #13
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dde:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	039b      	lsls	r3, r3, #14
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43da      	mvns	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43da      	mvns	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	4013      	ands	r3, r2
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	1e13      	subs	r3, r2, #0
 8001e72:	d000      	beq.n	8001e76 <HAL_GPIO_Init+0x2d2>
 8001e74:	e6a2      	b.n	8001bbc <HAL_GPIO_Init+0x18>
  }
}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	46c0      	nop			@ (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b006      	add	sp, #24
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	50000400 	.word	0x50000400
 8001e8c:	50000800 	.word	0x50000800
 8001e90:	50000c00 	.word	0x50000c00
 8001e94:	50001000 	.word	0x50001000
 8001e98:	50001c00 	.word	0x50001c00
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001eb6:	e0bc      	b.n	8002032 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d100      	bne.n	8001ecc <HAL_GPIO_DeInit+0x2c>
 8001eca:	e0af      	b.n	800202c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8002048 <HAL_GPIO_DeInit+0x1a8>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	589b      	ldr	r3, [r3, r2]
 8001ed8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	23a0      	movs	r3, #160	@ 0xa0
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_DeInit+0x96>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	@ (800204c <HAL_GPIO_DeInit+0x1ac>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_DeInit+0x92>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a53      	ldr	r2, [pc, #332]	@ (8002050 <HAL_GPIO_DeInit+0x1b0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_DeInit+0x8e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a52      	ldr	r2, [pc, #328]	@ (8002054 <HAL_GPIO_DeInit+0x1b4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_DeInit+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a51      	ldr	r2, [pc, #324]	@ (8002058 <HAL_GPIO_DeInit+0x1b8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_DeInit+0x86>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a50      	ldr	r2, [pc, #320]	@ (800205c <HAL_GPIO_DeInit+0x1bc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_DeInit+0x82>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_DeInit+0x98>
 8001f36:	2300      	movs	r3, #0
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	2103      	movs	r1, #3
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d132      	bne.n	8001fae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001f48:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001f56:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43d9      	mvns	r1, r3
 8001f5e:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001f64:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f72:	4b3b      	ldr	r3, [pc, #236]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43d9      	mvns	r1, r3
 8001f7a:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <HAL_GPIO_DeInit+0x1c0>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2203      	movs	r2, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001f90:	4a2d      	ldr	r2, [pc, #180]	@ (8002048 <HAL_GPIO_DeInit+0x1a8>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	589a      	ldr	r2, [r3, r2]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	4829      	ldr	r0, [pc, #164]	@ (8002048 <HAL_GPIO_DeInit+0x1a8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	3302      	adds	r3, #2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	4099      	lsls	r1, r3
 8001fba:	000b      	movs	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	58d3      	ldr	r3, [r2, r3]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	2107      	movs	r1, #7
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	43d1      	mvns	r1, r2
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	08d2      	lsrs	r2, r2, #3
 8001fe2:	4019      	ands	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	43d2      	mvns	r2, r2
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2101      	movs	r1, #1
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4091      	lsls	r1, r2
 800200c:	000a      	movs	r2, r1
 800200e:	43d2      	mvns	r2, r2
 8002010:	401a      	ands	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	0052      	lsls	r2, r2, #1
 800201e:	2103      	movs	r1, #3
 8002020:	4091      	lsls	r1, r2
 8002022:	000a      	movs	r2, r1
 8002024:	43d2      	mvns	r2, r2
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	40da      	lsrs	r2, r3
 8002038:	1e13      	subs	r3, r2, #0
 800203a:	d000      	beq.n	800203e <HAL_GPIO_DeInit+0x19e>
 800203c:	e73c      	b.n	8001eb8 <HAL_GPIO_DeInit+0x18>
  }
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b006      	add	sp, #24
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40010000 	.word	0x40010000
 800204c:	50000400 	.word	0x50000400
 8002050:	50000800 	.word	0x50000800
 8002054:	50000c00 	.word	0x50000c00
 8002058:	50001000 	.word	0x50001000
 800205c:	50001c00 	.word	0x50001c00
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	0008      	movs	r0, r1
 800206e:	0011      	movs	r1, r2
 8002070:	1cbb      	adds	r3, r7, #2
 8002072:	1c02      	adds	r2, r0, #0
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	1c7b      	adds	r3, r7, #1
 8002078:	1c0a      	adds	r2, r1, #0
 800207a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	1c7b      	adds	r3, r7, #1
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002084:	1cbb      	adds	r3, r7, #2
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800208e:	1cbb      	adds	r3, r7, #2
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e08f      	b.n	80021d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2241      	movs	r2, #65	@ 0x41
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2240      	movs	r2, #64	@ 0x40
 80020c2:	2100      	movs	r1, #0
 80020c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe fa97 	bl	80005fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2241      	movs	r2, #65	@ 0x41
 80020d2:	2124      	movs	r1, #36	@ 0x24
 80020d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	438a      	bics	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	493b      	ldr	r1, [pc, #236]	@ (80021dc <HAL_I2C_Init+0x13c>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4938      	ldr	r1, [pc, #224]	@ (80021e0 <HAL_I2C_Init+0x140>)
 8002100:	400a      	ands	r2, r1
 8002102:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d108      	bne.n	800211e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2180      	movs	r1, #128	@ 0x80
 8002116:	0209      	lsls	r1, r1, #8
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e007      	b.n	800212e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2184      	movs	r1, #132	@ 0x84
 8002128:	0209      	lsls	r1, r1, #8
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d109      	bne.n	800214a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	0109      	lsls	r1, r1, #4
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	e007      	b.n	800215a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4923      	ldr	r1, [pc, #140]	@ (80021e4 <HAL_I2C_Init+0x144>)
 8002156:	400a      	ands	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4920      	ldr	r1, [pc, #128]	@ (80021e8 <HAL_I2C_Init+0x148>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	491a      	ldr	r1, [pc, #104]	@ (80021e0 <HAL_I2C_Init+0x140>)
 8002176:	400a      	ands	r2, r1
 8002178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	431a      	orrs	r2, r3
 8002184:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69d9      	ldr	r1, [r3, #28]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2241      	movs	r2, #65	@ 0x41
 80021be:	2120      	movs	r1, #32
 80021c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2242      	movs	r2, #66	@ 0x42
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	f0ffffff 	.word	0xf0ffffff
 80021e0:	ffff7fff 	.word	0xffff7fff
 80021e4:	fffff7ff 	.word	0xfffff7ff
 80021e8:	02008000 	.word	0x02008000

080021ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2241      	movs	r2, #65	@ 0x41
 8002202:	2124      	movs	r1, #36	@ 0x24
 8002204:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	438a      	bics	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fa33 	bl	8000684 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2241      	movs	r2, #65	@ 0x41
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2242      	movs	r2, #66	@ 0x42
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2241      	movs	r2, #65	@ 0x41
 800225a:	5c9b      	ldrb	r3, [r3, r2]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	d138      	bne.n	80022d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2240      	movs	r2, #64	@ 0x40
 8002266:	5c9b      	ldrb	r3, [r3, r2]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800226c:	2302      	movs	r3, #2
 800226e:	e032      	b.n	80022d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	2101      	movs	r1, #1
 8002276:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2241      	movs	r2, #65	@ 0x41
 800227c:	2124      	movs	r1, #36	@ 0x24
 800227e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2101      	movs	r1, #1
 800228c:	438a      	bics	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4911      	ldr	r1, [pc, #68]	@ (80022e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800229c:	400a      	ands	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2101      	movs	r1, #1
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2241      	movs	r2, #65	@ 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	ffffefff 	.word	0xffffefff

080022e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2241      	movs	r2, #65	@ 0x41
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d139      	bne.n	800236e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2240      	movs	r2, #64	@ 0x40
 80022fe:	5c9b      	ldrb	r3, [r3, r2]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002304:	2302      	movs	r3, #2
 8002306:	e033      	b.n	8002370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2241      	movs	r2, #65	@ 0x41
 8002314:	2124      	movs	r1, #36	@ 0x24
 8002316:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2101      	movs	r1, #1
 8002324:	438a      	bics	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a11      	ldr	r2, [pc, #68]	@ (8002378 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2241      	movs	r2, #65	@ 0x41
 800235e:	2120      	movs	r1, #32
 8002360:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2240      	movs	r2, #64	@ 0x40
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fffff0ff 	.word	0xfffff0ff

0800237c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	000a      	movs	r2, r1
 8002386:	1cfb      	adds	r3, r7, #3
 8002388:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800238e:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_PWR_EnterSTOPMode+0xac>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2201      	movs	r2, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_PWR_EnterSTOPMode+0x40>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80023b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 80023b6:	491d      	ldr	r1, [pc, #116]	@ (800242c <HAL_PWR_EnterSTOPMode+0xb0>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2203      	movs	r2, #3
 80023c6:	4393      	bics	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_PWR_EnterSTOPMode+0xb4>)
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <HAL_PWR_EnterSTOPMode+0xb4>)
 80023de:	2104      	movs	r1, #4
 80023e0:	430a      	orrs	r2, r1
 80023e2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80023e4:	1cfb      	adds	r3, r7, #3
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80023ec:	bf30      	wfi
 80023ee:	e002      	b.n	80023f6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80023f0:	bf40      	sev
    __WFE();
 80023f2:	bf20      	wfe
    __WFE();
 80023f4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_PWR_EnterSTOPMode+0xb4>)
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_PWR_EnterSTOPMode+0xb4>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	438a      	bics	r2, r1
 8002400:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_PWR_EnterSTOPMode+0xa0>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002414:	2180      	movs	r1, #128	@ 0x80
 8002416:	0089      	lsls	r1, r1, #2
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b006      	add	sp, #24
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40007000 	.word	0x40007000
 8002428:	40010000 	.word	0x40010000
 800242c:	fffffdff 	.word	0xfffffdff
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f000 fbbf 	bl	8002bc6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002448:	4bc9      	ldr	r3, [pc, #804]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	220c      	movs	r2, #12
 800244e:	4013      	ands	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002452:	4bc7      	ldr	r3, [pc, #796]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d100      	bne.n	800246a <HAL_RCC_OscConfig+0x36>
 8002468:	e07e      	b.n	8002568 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d007      	beq.n	8002480 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x68>
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	429a      	cmp	r2, r3
 800247e:	d10d      	bne.n	800249c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4bbb      	ldr	r3, [pc, #748]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	4013      	ands	r3, r2
 800248a:	d100      	bne.n	800248e <HAL_RCC_OscConfig+0x5a>
 800248c:	e06b      	b.n	8002566 <HAL_RCC_OscConfig+0x132>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d167      	bne.n	8002566 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	f000 fb95 	bl	8002bc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	025b      	lsls	r3, r3, #9
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x84>
 80024a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	0249      	lsls	r1, r1, #9
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e027      	b.n	8002508 <HAL_RCC_OscConfig+0xd4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	23a0      	movs	r3, #160	@ 0xa0
 80024be:	02db      	lsls	r3, r3, #11
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10e      	bne.n	80024e2 <HAL_RCC_OscConfig+0xae>
 80024c4:	4baa      	ldr	r3, [pc, #680]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4ba9      	ldr	r3, [pc, #676]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024ca:	2180      	movs	r1, #128	@ 0x80
 80024cc:	02c9      	lsls	r1, r1, #11
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	0249      	lsls	r1, r1, #9
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e012      	b.n	8002508 <HAL_RCC_OscConfig+0xd4>
 80024e2:	4ba3      	ldr	r3, [pc, #652]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024e8:	49a2      	ldr	r1, [pc, #648]	@ (8002774 <HAL_RCC_OscConfig+0x340>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	4013      	ands	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b9b      	ldr	r3, [pc, #620]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002502:	499d      	ldr	r1, [pc, #628]	@ (8002778 <HAL_RCC_OscConfig+0x344>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d015      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe ff60 	bl	80013d4 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002518:	e009      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7fe ff5b 	bl	80013d4 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	@ 0x64
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 fb4c 	bl	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252e:	4b90      	ldr	r3, [pc, #576]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	4013      	ands	r3, r2
 8002538:	d0ef      	beq.n	800251a <HAL_RCC_OscConfig+0xe6>
 800253a:	e015      	b.n	8002568 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe ff4a 	bl	80013d4 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002546:	f7fe ff45 	bl	80013d4 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	@ 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e336      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002558:	4b85      	ldr	r3, [pc, #532]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x112>
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002566:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x140>
 8002572:	e099      	b.n	80026a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	2220      	movs	r2, #32
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002582:	4b7b      	ldr	r3, [pc, #492]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002588:	2120      	movs	r1, #32
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	2220      	movs	r2, #32
 8002592:	4393      	bics	r3, r2
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d13e      	bne.n	8002620 <HAL_RCC_OscConfig+0x1ec>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d13b      	bne.n	8002620 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80025a8:	4b71      	ldr	r3, [pc, #452]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2204      	movs	r2, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_RCC_OscConfig+0x188>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e304      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6e      	ldr	r2, [pc, #440]	@ (800277c <HAL_RCC_OscConfig+0x348>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025d2:	4b67      	ldr	r3, [pc, #412]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2209      	movs	r2, #9
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	4b64      	ldr	r3, [pc, #400]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e4:	f000 fc42 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80025e8:	0001      	movs	r1, r0
 80025ea:	4b61      	ldr	r3, [pc, #388]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	220f      	movs	r2, #15
 80025f2:	4013      	ands	r3, r2
 80025f4:	4a62      	ldr	r2, [pc, #392]	@ (8002780 <HAL_RCC_OscConfig+0x34c>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	000a      	movs	r2, r1
 80025fa:	40da      	lsrs	r2, r3
 80025fc:	4b61      	ldr	r3, [pc, #388]	@ (8002784 <HAL_RCC_OscConfig+0x350>)
 80025fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x354>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2513      	movs	r5, #19
 8002606:	197c      	adds	r4, r7, r5
 8002608:	0018      	movs	r0, r3
 800260a:	f7fe fe9d 	bl	8001348 <HAL_InitTick>
 800260e:	0003      	movs	r3, r0
 8002610:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002612:	197b      	adds	r3, r7, r5
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d046      	beq.n	80026a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	e2d2      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d027      	beq.n	8002676 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002626:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2209      	movs	r2, #9
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	4b4f      	ldr	r3, [pc, #316]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fecc 	bl	80013d4 <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fec7 	bl	80013d4 <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e2b8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002654:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2204      	movs	r2, #4
 800265a:	4013      	ands	r3, r2
 800265c:	d0f1      	beq.n	8002642 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b44      	ldr	r3, [pc, #272]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a46      	ldr	r2, [pc, #280]	@ (800277c <HAL_RCC_OscConfig+0x348>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	021a      	lsls	r2, r3, #8
 800266e:	4b40      	ldr	r3, [pc, #256]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 800267c:	2101      	movs	r1, #1
 800267e:	438a      	bics	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fea7 	bl	80013d4 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fea2 	bl	80013d4 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e293      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f1      	bne.n	800268c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2210      	movs	r2, #16
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_RCC_OscConfig+0x280>
 80026b2:	e0a2      	b.n	80027fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d140      	bne.n	800273c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x29e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e279      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a2d      	ldr	r2, [pc, #180]	@ (800278c <HAL_RCC_OscConfig+0x358>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e0:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	0a19      	lsrs	r1, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	061a      	lsls	r2, r3, #24
 80026f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	3301      	adds	r3, #1
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	0212      	lsls	r2, r2, #8
 8002706:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	210f      	movs	r1, #15
 8002710:	400b      	ands	r3, r1
 8002712:	491b      	ldr	r1, [pc, #108]	@ (8002780 <HAL_RCC_OscConfig+0x34c>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_RCC_OscConfig+0x350>)
 800271a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_RCC_OscConfig+0x354>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2513      	movs	r5, #19
 8002722:	197c      	adds	r4, r7, r5
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe fe0f 	bl	8001348 <HAL_InitTick>
 800272a:	0003      	movs	r3, r0
 800272c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800272e:	197b      	adds	r3, r7, r5
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d061      	beq.n	80027fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002736:	197b      	adds	r3, r7, r5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	e244      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d040      	beq.n	80027c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x33c>)
 800274a:	2180      	movs	r1, #128	@ 0x80
 800274c:	0049      	lsls	r1, r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe fe3f 	bl	80013d4 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800275a:	e019      	b.n	8002790 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275c:	f7fe fe3a 	bl	80013d4 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d912      	bls.n	8002790 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e22b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	40021000 	.word	0x40021000
 8002774:	fffeffff 	.word	0xfffeffff
 8002778:	fffbffff 	.word	0xfffbffff
 800277c:	ffffe0ff 	.word	0xffffe0ff
 8002780:	080067cc 	.word	0x080067cc
 8002784:	20000004 	.word	0x20000004
 8002788:	20000008 	.word	0x20000008
 800278c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002790:	4bca      	ldr	r3, [pc, #808]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d0df      	beq.n	800275c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279c:	4bc7      	ldr	r3, [pc, #796]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4ac7      	ldr	r2, [pc, #796]	@ (8002ac0 <HAL_RCC_OscConfig+0x68c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027aa:	4bc4      	ldr	r3, [pc, #784]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	4bc2      	ldr	r3, [pc, #776]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	0a19      	lsrs	r1, r3, #8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	061a      	lsls	r2, r3, #24
 80027be:	4bbf      	ldr	r3, [pc, #764]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	e019      	b.n	80027fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c6:	4bbd      	ldr	r3, [pc, #756]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4bbc      	ldr	r3, [pc, #752]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027cc:	49bd      	ldr	r1, [pc, #756]	@ (8002ac4 <HAL_RCC_OscConfig+0x690>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe fdff 	bl	80013d4 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027dc:	f7fe fdfa 	bl	80013d4 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1eb      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027ee:	4bb3      	ldr	r3, [pc, #716]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2208      	movs	r2, #8
 8002800:	4013      	ands	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280c:	4bab      	ldr	r3, [pc, #684]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800280e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002810:	4baa      	ldr	r3, [pc, #680]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002812:	2101      	movs	r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe fddc 	bl	80013d4 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fdd7 	bl	80013d4 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1c8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002834:	4ba1      	ldr	r3, [pc, #644]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d0f1      	beq.n	8002822 <HAL_RCC_OscConfig+0x3ee>
 800283e:	e018      	b.n	8002872 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b9e      	ldr	r3, [pc, #632]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002844:	4b9d      	ldr	r3, [pc, #628]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7fe fdc2 	bl	80013d4 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe fdbd 	bl	80013d4 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1ae      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002868:	4b94      	ldr	r3, [pc, #592]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800286a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d1f1      	bne.n	8002856 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCC_OscConfig+0x44a>
 800287c:	e0ae      	b.n	80029dc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2023      	movs	r0, #35	@ 0x23
 8002880:	183b      	adds	r3, r7, r0
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b8d      	ldr	r3, [pc, #564]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	4013      	ands	r3, r2
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b8a      	ldr	r3, [pc, #552]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002896:	4b89      	ldr	r3, [pc, #548]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	0549      	lsls	r1, r1, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b88      	ldr	r3, [pc, #544]	@ (8002ac8 <HAL_RCC_OscConfig+0x694>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d11a      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b85      	ldr	r3, [pc, #532]	@ (8002ac8 <HAL_RCC_OscConfig+0x694>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b84      	ldr	r3, [pc, #528]	@ (8002ac8 <HAL_RCC_OscConfig+0x694>)
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	0049      	lsls	r1, r1, #1
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fd88 	bl	80013d4 <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ca:	f7fe fd83 	bl	80013d4 <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b64      	cmp	r3, #100	@ 0x64
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e174      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ac8 <HAL_RCC_OscConfig+0x694>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4d0>
 80028f4:	4b71      	ldr	r3, [pc, #452]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80028f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028f8:	4b70      	ldr	r3, [pc, #448]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80028fa:	2180      	movs	r1, #128	@ 0x80
 80028fc:	0049      	lsls	r1, r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	651a      	str	r2, [r3, #80]	@ 0x50
 8002902:	e031      	b.n	8002968 <HAL_RCC_OscConfig+0x534>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x4f2>
 800290c:	4b6b      	ldr	r3, [pc, #428]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800290e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002910:	4b6a      	ldr	r3, [pc, #424]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002912:	496c      	ldr	r1, [pc, #432]	@ (8002ac4 <HAL_RCC_OscConfig+0x690>)
 8002914:	400a      	ands	r2, r1
 8002916:	651a      	str	r2, [r3, #80]	@ 0x50
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800291a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800291c:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800291e:	496b      	ldr	r1, [pc, #428]	@ (8002acc <HAL_RCC_OscConfig+0x698>)
 8002920:	400a      	ands	r2, r1
 8002922:	651a      	str	r2, [r3, #80]	@ 0x50
 8002924:	e020      	b.n	8002968 <HAL_RCC_OscConfig+0x534>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	23a0      	movs	r3, #160	@ 0xa0
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	429a      	cmp	r2, r3
 8002930:	d10e      	bne.n	8002950 <HAL_RCC_OscConfig+0x51c>
 8002932:	4b62      	ldr	r3, [pc, #392]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002936:	4b61      	ldr	r3, [pc, #388]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	00c9      	lsls	r1, r1, #3
 800293c:	430a      	orrs	r2, r1
 800293e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002940:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002944:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002946:	2180      	movs	r1, #128	@ 0x80
 8002948:	0049      	lsls	r1, r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	651a      	str	r2, [r3, #80]	@ 0x50
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0x534>
 8002950:	4b5a      	ldr	r3, [pc, #360]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002956:	495b      	ldr	r1, [pc, #364]	@ (8002ac4 <HAL_RCC_OscConfig+0x690>)
 8002958:	400a      	ands	r2, r1
 800295a:	651a      	str	r2, [r3, #80]	@ 0x50
 800295c:	4b57      	ldr	r3, [pc, #348]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 800295e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002960:	4b56      	ldr	r3, [pc, #344]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002962:	495a      	ldr	r1, [pc, #360]	@ (8002acc <HAL_RCC_OscConfig+0x698>)
 8002964:	400a      	ands	r2, r1
 8002966:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fd30 	bl	80013d4 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002978:	e009      	b.n	800298e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fd2b 	bl	80013d4 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_RCC_OscConfig+0x69c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e11b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298e:	4b4b      	ldr	r3, [pc, #300]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d0ef      	beq.n	800297a <HAL_RCC_OscConfig+0x546>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7fe fd1a 	bl	80013d4 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029a4:	e009      	b.n	80029ba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fd15 	bl	80013d4 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	4a47      	ldr	r2, [pc, #284]	@ (8002ad0 <HAL_RCC_OscConfig+0x69c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e105      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ba:	4b40      	ldr	r3, [pc, #256]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1ef      	bne.n	80029a6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c6:	2323      	movs	r3, #35	@ 0x23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d4:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029d6:	493f      	ldr	r1, [pc, #252]	@ (8002ad4 <HAL_RCC_OscConfig+0x6a0>)
 80029d8:	400a      	ands	r2, r1
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2220      	movs	r2, #32
 80029e2:	4013      	ands	r3, r2
 80029e4:	d049      	beq.n	8002a7a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d026      	beq.n	8002a3c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029ee:	4b33      	ldr	r3, [pc, #204]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	430a      	orrs	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	4b30      	ldr	r3, [pc, #192]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fe:	4b2f      	ldr	r3, [pc, #188]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x6a4>)
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <HAL_RCC_OscConfig+0x6a4>)
 8002a0c:	2180      	movs	r1, #128	@ 0x80
 8002a0e:	0189      	lsls	r1, r1, #6
 8002a10:	430a      	orrs	r2, r1
 8002a12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fcde 	bl	80013d4 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1e:	f7fe fcd9 	bl	80013d4 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0ca      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a30:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d0f1      	beq.n	8002a1e <HAL_RCC_OscConfig+0x5ea>
 8002a3a:	e01e      	b.n	8002a7a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <HAL_RCC_OscConfig+0x6a4>)
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_OscConfig+0x6a4>)
 8002a4e:	4923      	ldr	r1, [pc, #140]	@ (8002adc <HAL_RCC_OscConfig+0x6a8>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fcbe 	bl	80013d4 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a5e:	f7fe fcb9 	bl	80013d4 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0aa      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d1f1      	bne.n	8002a5e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <HAL_RCC_OscConfig+0x650>
 8002a82:	e09f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d100      	bne.n	8002a8c <HAL_RCC_OscConfig+0x658>
 8002a8a:	e078      	b.n	8002b7e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d159      	bne.n	8002b48 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_RCC_OscConfig+0x688>)
 8002a9a:	4911      	ldr	r1, [pc, #68]	@ (8002ae0 <HAL_RCC_OscConfig+0x6ac>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fc98 	bl	80013d4 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe fc93 	bl	80013d4 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d915      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e084      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	ffff1fff 	.word	0xffff1fff
 8002ac4:	fffffeff 	.word	0xfffffeff
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	fffffbff 	.word	0xfffffbff
 8002ad0:	00001388 	.word	0x00001388
 8002ad4:	efffffff 	.word	0xefffffff
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	ffffdfff 	.word	0xffffdfff
 8002ae0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	049b      	lsls	r3, r3, #18
 8002aec:	4013      	ands	r3, r2
 8002aee:	d1dc      	bne.n	8002aaa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af0:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a37      	ldr	r2, [pc, #220]	@ (8002bd4 <HAL_RCC_OscConfig+0x7a0>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b16:	2180      	movs	r1, #128	@ 0x80
 8002b18:	0449      	lsls	r1, r1, #17
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fc59 	bl	80013d4 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fc54 	bl	80013d4 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e045      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b3a:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	049b      	lsls	r3, r3, #18
 8002b42:	4013      	ands	r3, r2
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x6f4>
 8002b46:	e03d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b4e:	4922      	ldr	r1, [pc, #136]	@ (8002bd8 <HAL_RCC_OscConfig+0x7a4>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc3e 	bl	80013d4 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fc39 	bl	80013d4 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e02a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b70:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	049b      	lsls	r3, r3, #18
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x72a>
 8002b7c:	e022      	b.n	8002bc4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x79c>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	025b      	lsls	r3, r3, #9
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	23f0      	movs	r3, #240	@ 0xf0
 8002ba4:	039b      	lsls	r3, r3, #14
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	23c0      	movs	r3, #192	@ 0xc0
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b00a      	add	sp, #40	@ 0x28
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	ff02ffff 	.word	0xff02ffff
 8002bd8:	feffffff 	.word	0xfeffffff

08002bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e128      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b96      	ldr	r3, [pc, #600]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d91e      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b93      	ldr	r3, [pc, #588]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4393      	bics	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	4b90      	ldr	r3, [pc, #576]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fbe0 	bl	80013d4 <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	e009      	b.n	8002c2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1a:	f7fe fbdb 	bl	80013d4 <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a8a      	ldr	r2, [pc, #552]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e109      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b87      	ldr	r3, [pc, #540]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1ee      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b83      	ldr	r3, [pc, #524]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	22f0      	movs	r2, #240	@ 0xf0
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b7f      	ldr	r3, [pc, #508]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x8a>
 8002c64:	e089      	b.n	8002d7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6e:	4b79      	ldr	r3, [pc, #484]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	029b      	lsls	r3, r3, #10
 8002c76:	4013      	ands	r3, r2
 8002c78:	d120      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e1      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c86:	4b73      	ldr	r3, [pc, #460]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	049b      	lsls	r3, r3, #18
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d114      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0d5      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ca      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cac:	4b69      	ldr	r3, [pc, #420]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0c2      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbc:	4b65      	ldr	r3, [pc, #404]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4b62      	ldr	r3, [pc, #392]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fb80 	bl	80013d4 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce0:	e009      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	f7fe fb77 	bl	80013d4 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0a5      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf6:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d1ef      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x106>
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d111      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7fe fb61 	bl	80013d4 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	4a4d      	ldr	r2, [pc, #308]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e08f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d22:	4b4c      	ldr	r3, [pc, #304]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	220c      	movs	r2, #12
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d1ef      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x132>
 8002d2e:	e024      	b.n	8002d7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d11b      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3a:	f7fe fb4b 	bl	80013d4 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a42      	ldr	r2, [pc, #264]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e079      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	220c      	movs	r2, #12
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1ef      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x15e>
 8002d5a:	e00e      	b.n	8002d7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fb3a 	bl	80013d4 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	4a3a      	ldr	r2, [pc, #232]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e068      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d70:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	220c      	movs	r2, #12
 8002d76:	4013      	ands	r3, r2
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7a:	4b34      	ldr	r3, [pc, #208]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d21e      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d88:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4393      	bics	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	4b2e      	ldr	r3, [pc, #184]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fb1b 	bl	80013d4 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe fb16 	bl	80013d4 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a28      	ldr	r2, [pc, #160]	@ (8002e50 <HAL_RCC_ClockConfig+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e044      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db8:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <HAL_RCC_ClockConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <HAL_RCC_ClockConfig+0x27c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2208      	movs	r2, #8
 8002dea:	4013      	ands	r3, r2
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dee:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e5c <HAL_RCC_ClockConfig+0x280>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	0019      	movs	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00da      	lsls	r2, r3, #3
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e04:	f000 f832 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e08:	0001      	movs	r1, r0
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_RCC_ClockConfig+0x278>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	220f      	movs	r2, #15
 8002e12:	4013      	ands	r3, r2
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <HAL_RCC_ClockConfig+0x284>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	000a      	movs	r2, r1
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCC_ClockConfig+0x288>)
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_RCC_ClockConfig+0x28c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	250b      	movs	r5, #11
 8002e26:	197c      	adds	r4, r7, r5
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fe fa8d 	bl	8001348 <HAL_InitTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e32:	197b      	adds	r3, r7, r5
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002e3a:	197b      	adds	r3, r7, r5
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	00001388 	.word	0x00001388
 8002e54:	40021000 	.word	0x40021000
 8002e58:	fffff8ff 	.word	0xfffff8ff
 8002e5c:	ffffc7ff 	.word	0xffffc7ff
 8002e60:	080067cc 	.word	0x080067cc
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e72:	4b3c      	ldr	r3, [pc, #240]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d013      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3e>
 8002e82:	d85c      	bhi.n	8002f3e <HAL_RCC_GetSysClockFreq+0xd2>
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d002      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x22>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x38>
 8002e8c:	e057      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e8e:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2210      	movs	r2, #16
 8002e94:	4013      	ands	r3, r2
 8002e96:	d002      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e98:	4b33      	ldr	r3, [pc, #204]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e9a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e9c:	e05d      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x100>)
 8002ea0:	613b      	str	r3, [r7, #16]
      break;
 8002ea2:	e05a      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea4:	4b32      	ldr	r3, [pc, #200]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ea6:	613b      	str	r3, [r7, #16]
      break;
 8002ea8:	e057      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0c9b      	lsrs	r3, r3, #18
 8002eae:	220f      	movs	r2, #15
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	4a30      	ldr	r2, [pc, #192]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	0d9b      	lsrs	r3, r3, #22
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec4:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	025b      	lsls	r3, r3, #9
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00f      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	000a      	movs	r2, r1
 8002ed4:	0152      	lsls	r2, r2, #5
 8002ed6:	1a52      	subs	r2, r2, r1
 8002ed8:	0193      	lsls	r3, r2, #6
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	185b      	adds	r3, r3, r1
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd f921 	bl	800012c <__udivsi3>
 8002eea:	0003      	movs	r3, r0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e023      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00f      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	000a      	movs	r2, r1
 8002efe:	0152      	lsls	r2, r2, #5
 8002f00:	1a52      	subs	r2, r2, r1
 8002f02:	0193      	lsls	r3, r2, #6
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	185b      	adds	r3, r3, r1
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fd f90c 	bl	800012c <__udivsi3>
 8002f14:	0003      	movs	r3, r0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e00e      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	0152      	lsls	r2, r2, #5
 8002f20:	1a52      	subs	r2, r2, r1
 8002f22:	0193      	lsls	r3, r2, #6
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	185b      	adds	r3, r3, r1
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fd f8fc 	bl	800012c <__udivsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	613b      	str	r3, [r7, #16]
      break;
 8002f3c:	e00d      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f3e:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0b5b      	lsrs	r3, r3, #13
 8002f44:	2207      	movs	r2, #7
 8002f46:	4013      	ands	r3, r2
 8002f48:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	2280      	movs	r2, #128	@ 0x80
 8002f50:	0212      	lsls	r2, r2, #8
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
      break;
 8002f58:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f5a:	693b      	ldr	r3, [r7, #16]
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b006      	add	sp, #24
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	003d0900 	.word	0x003d0900
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	080067e4 	.word	0x080067e4

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff2 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f94:	0001      	movs	r1, r0
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	40d9      	lsrs	r1, r3
 8002fa6:	000b      	movs	r3, r1
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	080067dc 	.word	0x080067dc

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffdc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fc0:	0001      	movs	r1, r0
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	0adb      	lsrs	r3, r3, #11
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	40d9      	lsrs	r1, r3
 8002fd2:	000b      	movs	r3, r1
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	080067dc 	.word	0x080067dc

08002fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d106      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4013      	ands	r3, r2
 8003008:	d100      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800300a:	e104      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4bb9      	ldr	r3, [pc, #740]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800300e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	055b      	lsls	r3, r3, #21
 8003014:	4013      	ands	r3, r2
 8003016:	d10a      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4bb6      	ldr	r3, [pc, #728]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301c:	4bb5      	ldr	r3, [pc, #724]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0549      	lsls	r1, r1, #21
 8003022:	430a      	orrs	r2, r1
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003026:	2317      	movs	r3, #23
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4bb2      	ldr	r3, [pc, #712]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4013      	ands	r3, r2
 8003038:	d11a      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303a:	4baf      	ldr	r3, [pc, #700]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4bae      	ldr	r3, [pc, #696]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	0049      	lsls	r1, r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003048:	f7fe f9c4 	bl	80013d4 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe f9bf 	bl	80013d4 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	@ 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e143      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4ba4      	ldr	r3, [pc, #656]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d0f0      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003070:	4ba0      	ldr	r3, [pc, #640]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	23c0      	movs	r3, #192	@ 0xc0
 8003076:	039b      	lsls	r3, r3, #14
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	039b      	lsls	r3, r3, #14
 8003084:	4013      	ands	r3, r2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d107      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	23c0      	movs	r3, #192	@ 0xc0
 8003092:	039b      	lsls	r3, r3, #14
 8003094:	4013      	ands	r3, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d013      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	23c0      	movs	r3, #192	@ 0xc0
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	401a      	ands	r2, r3
 80030a6:	23c0      	movs	r3, #192	@ 0xc0
 80030a8:	029b      	lsls	r3, r3, #10
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10a      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030ae:	4b91      	ldr	r3, [pc, #580]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	401a      	ands	r2, r3
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	429a      	cmp	r2, r3
 80030be:	d101      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e113      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80030c4:	4b8b      	ldr	r3, [pc, #556]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030c8:	23c0      	movs	r3, #192	@ 0xc0
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d049      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	23c0      	movs	r3, #192	@ 0xc0
 80030dc:	029b      	lsls	r3, r3, #10
 80030de:	4013      	ands	r3, r2
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2220      	movs	r2, #32
 80030ec:	4013      	ands	r3, r2
 80030ee:	d10d      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	23c0      	movs	r3, #192	@ 0xc0
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	4013      	ands	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d034      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	4013      	ands	r3, r2
 800310a:	d02e      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800310c:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	4a7a      	ldr	r2, [pc, #488]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003116:	4b77      	ldr	r3, [pc, #476]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800311a:	4b76      	ldr	r3, [pc, #472]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800311c:	2180      	movs	r1, #128	@ 0x80
 800311e:	0309      	lsls	r1, r1, #12
 8003120:	430a      	orrs	r2, r1
 8003122:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003124:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003128:	4b72      	ldr	r3, [pc, #456]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800312a:	4975      	ldr	r1, [pc, #468]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800312c:	400a      	ands	r2, r1
 800312e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003130:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d014      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe f948 	bl	80013d4 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003148:	e009      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe f943 	bl	80013d4 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	4a6b      	ldr	r2, [pc, #428]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e0c6      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315e:	4b65      	ldr	r3, [pc, #404]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003160:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d0ef      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4013      	ands	r3, r2
 8003174:	d01f      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	23c0      	movs	r3, #192	@ 0xc0
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	401a      	ands	r2, r3
 8003180:	23c0      	movs	r3, #192	@ 0xc0
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	429a      	cmp	r2, r3
 8003186:	d10c      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003188:	4b5a      	ldr	r3, [pc, #360]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5e      	ldr	r2, [pc, #376]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	23c0      	movs	r3, #192	@ 0xc0
 8003198:	039b      	lsls	r3, r3, #14
 800319a:	401a      	ands	r2, r3
 800319c:	4b55      	ldr	r3, [pc, #340]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	4b54      	ldr	r3, [pc, #336]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	23c0      	movs	r3, #192	@ 0xc0
 80031ac:	029b      	lsls	r3, r3, #10
 80031ae:	401a      	ands	r2, r3
 80031b0:	4b50      	ldr	r3, [pc, #320]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031b2:	430a      	orrs	r2, r1
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d01f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	23c0      	movs	r3, #192	@ 0xc0
 80031c6:	029b      	lsls	r3, r3, #10
 80031c8:	401a      	ands	r2, r3
 80031ca:	23c0      	movs	r3, #192	@ 0xc0
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d10c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x208>
 80031d2:	4b48      	ldr	r3, [pc, #288]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	23c0      	movs	r3, #192	@ 0xc0
 80031e2:	039b      	lsls	r3, r3, #14
 80031e4:	401a      	ands	r2, r3
 80031e6:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ee:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	23c0      	movs	r3, #192	@ 0xc0
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	401a      	ands	r2, r3
 80031fa:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003200:	2317      	movs	r3, #23
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b3a      	ldr	r3, [pc, #232]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800320c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800320e:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003210:	493e      	ldr	r1, [pc, #248]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003212:	400a      	ands	r2, r1
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003220:	4b34      	ldr	r3, [pc, #208]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003224:	2203      	movs	r2, #3
 8003226:	4393      	bics	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003230:	430a      	orrs	r2, r1
 8003232:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800323e:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	220c      	movs	r2, #12
 8003244:	4393      	bics	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800324e:	430a      	orrs	r2, r1
 8003250:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800326c:	430a      	orrs	r2, r1
 800326e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2208      	movs	r2, #8
 8003276:	4013      	ands	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	4a25      	ldr	r2, [pc, #148]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800328a:	430a      	orrs	r2, r1
 800328c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800329a:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	4013      	ands	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b8:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032bc:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2280      	movs	r2, #128	@ 0x80
 80032d2:	4013      	ands	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	fffcffff 	.word	0xfffcffff
 8003300:	fff7ffff 	.word	0xfff7ffff
 8003304:	00001388 	.word	0x00001388
 8003308:	ffcfffff 	.word	0xffcfffff
 800330c:	efffffff 	.word	0xefffffff
 8003310:	fffff3ff 	.word	0xfffff3ff
 8003314:	ffffcfff 	.word	0xffffcfff
 8003318:	fbffffff 	.word	0xfbffffff
 800331c:	fff3ffff 	.word	0xfff3ffff

08003320 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e088      	b.n	800344c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2221      	movs	r2, #33	@ 0x21
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd fd09 	bl	8000d68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2221      	movs	r2, #33	@ 0x21
 800335a:	2102      	movs	r1, #2
 800335c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2210      	movs	r2, #16
 8003366:	4013      	ands	r3, r2
 8003368:	2b10      	cmp	r3, #16
 800336a:	d05f      	beq.n	800342c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	22ca      	movs	r2, #202	@ 0xca
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2253      	movs	r2, #83	@ 0x53
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800337c:	250f      	movs	r5, #15
 800337e:	197c      	adds	r4, r7, r5
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f93e 	bl	8003604 <RTC_EnterInitMode>
 8003388:	0003      	movs	r3, r0
 800338a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800338c:	0028      	movs	r0, r5
 800338e:	183b      	adds	r3, r7, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d12c      	bne.n	80033f0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	492c      	ldr	r1, [pc, #176]	@ (8003454 <HAL_RTC_Init+0x134>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68d2      	ldr	r2, [r2, #12]
 80033cc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6919      	ldr	r1, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	041a      	lsls	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033e2:	183c      	adds	r4, r7, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f950 	bl	800368c <RTC_ExitInitMode>
 80033ec:	0003      	movs	r3, r0
 80033ee:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80033f0:	230f      	movs	r3, #15
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2103      	movs	r1, #3
 8003406:	438a      	bics	r2, r1
 8003408:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	22ff      	movs	r2, #255	@ 0xff
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24
 800342a:	e003      	b.n	8003434 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800342c:	230f      	movs	r3, #15
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003434:	230f      	movs	r3, #15
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2221      	movs	r2, #33	@ 0x21
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bdb0      	pop	{r4, r5, r7, pc}
 8003454:	ff8fffbf 	.word	0xff8fffbf

08003458 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	045b      	lsls	r3, r3, #17
 800347a:	0c5a      	lsrs	r2, r3, #17
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a22      	ldr	r2, [pc, #136]	@ (8003510 <HAL_RTC_GetTime+0xb8>)
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	b2db      	uxtb	r3, r3
 8003492:	223f      	movs	r2, #63	@ 0x3f
 8003494:	4013      	ands	r3, r2
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	227f      	movs	r2, #127	@ 0x7f
 80034a4:	4013      	ands	r3, r2
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	227f      	movs	r2, #127	@ 0x7f
 80034b2:	4013      	ands	r3, r2
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	0d9b      	lsrs	r3, r3, #22
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11a      	bne.n	8003506 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 f903 	bl	80036e0 <RTC_Bcd2ToByte>
 80034da:	0003      	movs	r3, r0
 80034dc:	001a      	movs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f8fa 	bl	80036e0 <RTC_Bcd2ToByte>
 80034ec:	0003      	movs	r3, r0
 80034ee:	001a      	movs	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f8f1 	bl	80036e0 <RTC_Bcd2ToByte>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b006      	add	sp, #24
 800350e:	bd80      	pop	{r7, pc}
 8003510:	007f7f7f 	.word	0x007f7f7f

08003514 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a21      	ldr	r2, [pc, #132]	@ (80035b0 <HAL_RTC_GetDate+0x9c>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	b2db      	uxtb	r3, r3
 8003540:	221f      	movs	r2, #31
 8003542:	4013      	ands	r3, r2
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	223f      	movs	r2, #63	@ 0x3f
 8003550:	4013      	ands	r3, r2
 8003552:	b2da      	uxtb	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2207      	movs	r2, #7
 8003560:	4013      	ands	r3, r2
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11a      	bne.n	80035a4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	78db      	ldrb	r3, [r3, #3]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f8b4 	bl	80036e0 <RTC_Bcd2ToByte>
 8003578:	0003      	movs	r3, r0
 800357a:	001a      	movs	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f8ab 	bl	80036e0 <RTC_Bcd2ToByte>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f8a2 	bl	80036e0 <RTC_Bcd2ToByte>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b006      	add	sp, #24
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	00ffff3f 	.word	0x00ffff3f

080035b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003600 <HAL_RTC_WaitForSynchro+0x4c>)
 80035c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c8:	f7fd ff04 	bl	80013d4 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035d0:	e00a      	b.n	80035e8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035d2:	f7fd feff 	bl	80013d4 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	23fa      	movs	r3, #250	@ 0xfa
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d901      	bls.n	80035e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	4013      	ands	r3, r2
 80035f2:	d0ee      	beq.n	80035d2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	0001ff5f 	.word	0x0001ff5f

08003604 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	230f      	movs	r3, #15
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	4013      	ands	r3, r2
 8003622:	d12c      	bne.n	800367e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2180      	movs	r1, #128	@ 0x80
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003634:	f7fd fece 	bl	80013d4 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800363c:	e014      	b.n	8003668 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800363e:	f7fd fec9 	bl	80013d4 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1ad2      	subs	r2, r2, r3
 8003648:	200f      	movs	r0, #15
 800364a:	183b      	adds	r3, r7, r0
 800364c:	1839      	adds	r1, r7, r0
 800364e:	7809      	ldrb	r1, [r1, #0]
 8003650:	7019      	strb	r1, [r3, #0]
 8003652:	23fa      	movs	r3, #250	@ 0xfa
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	429a      	cmp	r2, r3
 8003658:	d906      	bls.n	8003668 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2221      	movs	r2, #33	@ 0x21
 800365e:	2104      	movs	r1, #4
 8003660:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003662:	183b      	adds	r3, r7, r0
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	4013      	ands	r3, r2
 8003672:	d104      	bne.n	800367e <RTC_EnterInitMode+0x7a>
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d1df      	bne.n	800363e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800367e:	230f      	movs	r3, #15
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	781b      	ldrb	r3, [r3, #0]
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}

0800368c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	240f      	movs	r4, #15
 8003696:	193b      	adds	r3, r7, r4
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2180      	movs	r1, #128	@ 0x80
 80036a8:	438a      	bics	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d10c      	bne.n	80036d2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff ff7a 	bl	80035b4 <HAL_RTC_WaitForSynchro>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d006      	beq.n	80036d2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2221      	movs	r2, #33	@ 0x21
 80036c8:	2104      	movs	r1, #4
 80036ca:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80036cc:	193b      	adds	r3, r7, r4
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80036d2:	230f      	movs	r3, #15
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b005      	add	sp, #20
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	0002      	movs	r2, r0
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	001a      	movs	r2, r3
 80036fa:	0013      	movs	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	210f      	movs	r1, #15
 800370e:	400b      	ands	r3, r1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	b2db      	uxtb	r3, r3
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800372c:	4b64      	ldr	r3, [pc, #400]	@ (80038c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22fa      	movs	r2, #250	@ 0xfa
 8003732:	01d1      	lsls	r1, r2, #7
 8003734:	0018      	movs	r0, r3
 8003736:	f7fc fcf9 	bl	800012c <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	001a      	movs	r2, r3
 800373e:	0013      	movs	r3, r2
 8003740:	015b      	lsls	r3, r3, #5
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	189b      	adds	r3, r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8003756:	2302      	movs	r3, #2
 8003758:	e0ad      	b.n	80038b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	@ 0x21
 8003766:	2102      	movs	r1, #2
 8003768:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	22ca      	movs	r2, #202	@ 0xca
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2253      	movs	r2, #83	@ 0x53
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4013      	ands	r3, r2
 8003786:	d019      	beq.n	80037bc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3b01      	subs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	22ff      	movs	r2, #255	@ 0xff
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2221      	movs	r2, #33	@ 0x21
 80037a0:	2103      	movs	r1, #3
 80037a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e082      	b.n	80038b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2204      	movs	r2, #4
 80037b8:	4013      	ands	r3, r2
 80037ba:	d1e5      	bne.n	8003788 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	493f      	ldr	r1, [pc, #252]	@ (80038c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	22ff      	movs	r2, #255	@ 0xff
 80037d4:	401a      	ands	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	493b      	ldr	r1, [pc, #236]	@ (80038c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80037e0:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	22fa      	movs	r2, #250	@ 0xfa
 80037e6:	01d1      	lsls	r1, r2, #7
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fc fc9f 	bl	800012c <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	001a      	movs	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	015b      	lsls	r3, r3, #5
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3b01      	subs	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	22ff      	movs	r2, #255	@ 0xff
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2221      	movs	r2, #33	@ 0x21
 8003818:	2103      	movs	r1, #3
 800381a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e046      	b.n	80038b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2204      	movs	r2, #4
 8003830:	4013      	ands	r3, r2
 8003832:	d0e5      	beq.n	8003800 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2107      	movs	r1, #7
 8003840:	438a      	bics	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	0349      	lsls	r1, r1, #13
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800386a:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0349      	lsls	r1, r1, #13
 8003874:	430a      	orrs	r2, r1
 8003876:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2180      	movs	r1, #128	@ 0x80
 8003884:	01c9      	lsls	r1, r1, #7
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	00c9      	lsls	r1, r1, #3
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ff      	movs	r2, #255	@ 0xff
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2221      	movs	r2, #33	@ 0x21
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	20000004 	.word	0x20000004
 80038c4:	fffffbff 	.word	0xfffffbff
 80038c8:	fffffb7f 	.word	0xfffffb7f
 80038cc:	40010400 	.word	0x40010400

080038d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e04e      	b.n	8003988 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	2101      	movs	r1, #1
 80038f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2221      	movs	r2, #33	@ 0x21
 80038f6:	2102      	movs	r1, #2
 80038f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	22ca      	movs	r2, #202	@ 0xca
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2253      	movs	r2, #83	@ 0x53
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	491e      	ldr	r1, [pc, #120]	@ (8003990 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003916:	400a      	ands	r2, r1
 8003918:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	491b      	ldr	r1, [pc, #108]	@ (8003994 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8003926:	400a      	ands	r2, r1
 8003928:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800392a:	f7fd fd53 	bl	80013d4 <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003932:	e016      	b.n	8003962 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003934:	f7fd fd4e 	bl	80013d4 <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	23fa      	movs	r3, #250	@ 0xfa
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	429a      	cmp	r2, r3
 8003944:	d90d      	bls.n	8003962 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	22ff      	movs	r2, #255	@ 0xff
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2221      	movs	r2, #33	@ 0x21
 8003952:	2103      	movs	r1, #3
 8003954:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e012      	b.n	8003988 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2204      	movs	r2, #4
 800396a:	4013      	ands	r3, r2
 800396c:	d0e2      	beq.n	8003934 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2221      	movs	r2, #33	@ 0x21
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b004      	add	sp, #16
 800398e:	bd80      	pop	{r7, pc}
 8003990:	fffffbff 	.word	0xfffffbff
 8003994:	ffffbfff 	.word	0xffffbfff

08003998 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80039a2:	2280      	movs	r2, #128	@ 0x80
 80039a4:	0352      	lsls	r2, r2, #13
 80039a6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	01db      	lsls	r3, r3, #7
 80039b2:	4013      	ands	r3, r2
 80039b4:	d014      	beq.n	80039e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4013      	ands	r3, r2
 80039c2:	d00d      	beq.n	80039e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	22ff      	movs	r2, #255	@ 0xff
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f80c 	bl	80039f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2221      	movs	r2, #33	@ 0x21
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40010400 	.word	0x40010400
 80039f4:	fffffb7f 	.word	0xfffffb7f

080039f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e044      	b.n	8003aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2278      	movs	r2, #120	@ 0x78
 8003a26:	2100      	movs	r1, #0
 8003a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fd fabf 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2224      	movs	r2, #36	@ 0x24
 8003a36:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2101      	movs	r1, #1
 8003a44:	438a      	bics	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 ffea 	bl	8004a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fd48 	bl	80044f0 <UART_SetConfig>
 8003a60:	0003      	movs	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01c      	b.n	8003aa4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	490d      	ldr	r1, [pc, #52]	@ (8003aac <HAL_UART_Init+0xa4>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	212a      	movs	r1, #42	@ 0x2a
 8003a86:	438a      	bics	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f001 f879 	bl	8004b94 <UART_CheckIdleState>
 8003aa2:	0003      	movs	r3, r0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	ffffb7ff 	.word	0xffffb7ff

08003ab0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e030      	b.n	8003b24 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2224      	movs	r2, #36	@ 0x24
 8003ac6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fd fb90 	bl	8001218 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2284      	movs	r2, #132	@ 0x84
 8003afc:	2100      	movs	r1, #0
 8003afe:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2280      	movs	r2, #128	@ 0x80
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2278      	movs	r2, #120	@ 0x78
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d000      	beq.n	8003b44 <HAL_UART_Transmit_DMA+0x18>
 8003b42:	e077      	b.n	8003c34 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_UART_Transmit_DMA+0x26>
 8003b4a:	1dbb      	adds	r3, r7, #6
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06f      	b.n	8003c36 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	015b      	lsls	r3, r3, #5
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d109      	bne.n	8003b76 <HAL_UART_Transmit_DMA+0x4a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e05f      	b.n	8003c36 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1dba      	adds	r2, r7, #6
 8003b80:	2150      	movs	r1, #80	@ 0x50
 8003b82:	8812      	ldrh	r2, [r2, #0]
 8003b84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1dba      	adds	r2, r7, #6
 8003b8a:	2152      	movs	r1, #82	@ 0x52
 8003b8c:	8812      	ldrh	r2, [r2, #0]
 8003b8e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2284      	movs	r2, #132	@ 0x84
 8003b94:	2100      	movs	r1, #0
 8003b96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2221      	movs	r2, #33	@ 0x21
 8003b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a25      	ldr	r2, [pc, #148]	@ (8003c40 <HAL_UART_Transmit_DMA+0x114>)
 8003bac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	4a24      	ldr	r2, [pc, #144]	@ (8003c44 <HAL_UART_Transmit_DMA+0x118>)
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <HAL_UART_Transmit_DMA+0x11c>)
 8003bbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	0019      	movs	r1, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3328      	adds	r3, #40	@ 0x28
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	1dbb      	adds	r3, r7, #6
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f7fd fe0e 	bl	80017fc <HAL_DMA_Start_IT>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2284      	movs	r2, #132	@ 0x84
 8003be8:	2110      	movs	r1, #16
 8003bea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e01f      	b.n	8003c36 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2240      	movs	r2, #64	@ 0x40
 8003bfc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003c02:	613b      	str	r3, [r7, #16]
  return(result);
 8003c04:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2180      	movs	r1, #128	@ 0x80
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b008      	add	sp, #32
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	08005015 	.word	0x08005015
 8003c44:	080050ad 	.word	0x080050ad
 8003c48:	080052b3 	.word	0x080052b3

08003c4c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	@ 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c54:	f3ef 8310 	mrs	r3, PRIMASK
 8003c58:	617b      	str	r3, [r7, #20]
  return(result);
 8003c5a:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			@ (mov r8, r8)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	21c0      	movs	r1, #192	@ 0xc0
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2280      	movs	r2, #128	@ 0x80
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d135      	bne.n	8003d00 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c94:	f3ef 8310 	mrs	r3, PRIMASK
 8003c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f383 8810 	msr	PRIMASK, r3
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2180      	movs	r1, #128	@ 0x80
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f383 8810 	msr	PRIMASK, r3
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fd fdf4 	bl	80018c8 <HAL_DMA_Abort>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7fd ff22 	bl	8001b32 <HAL_DMA_GetError>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d105      	bne.n	8003d00 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2284      	movs	r2, #132	@ 0x84
 8003cf8:	2110      	movs	r1, #16
 8003cfa:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e007      	b.n	8003d10 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2252      	movs	r2, #82	@ 0x52
 8003d04:	2100      	movs	r1, #0
 8003d06:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b00a      	add	sp, #40	@ 0x28
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b092      	sub	sp, #72	@ 0x48
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d20:	f3ef 8310 	mrs	r3, PRIMASK
 8003d24:	623b      	str	r3, [r7, #32]
  return(result);
 8003d26:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	494b      	ldr	r1, [pc, #300]	@ (8003e70 <HAL_UART_AbortReceive+0x158>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8310 	mrs	r3, PRIMASK
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	f383 8810 	msr	PRIMASK, r3
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	438a      	bics	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d118      	bne.n	8003dbe <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d90:	617b      	str	r3, [r7, #20]
  return(result);
 8003d92:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d96:	2301      	movs	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2110      	movs	r1, #16
 8003dae:	438a      	bics	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2240      	movs	r2, #64	@ 0x40
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b40      	cmp	r3, #64	@ 0x40
 8003dca:	d135      	bne.n	8003e38 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2140      	movs	r1, #64	@ 0x40
 8003dee:	438a      	bics	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fd fd58 	bl	80018c8 <HAL_DMA_Abort>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d00d      	beq.n	8003e38 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fd fe86 	bl	8001b32 <HAL_DMA_GetError>
 8003e26:	0003      	movs	r3, r0
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d105      	bne.n	8003e38 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2284      	movs	r2, #132	@ 0x84
 8003e30:	2110      	movs	r1, #16
 8003e32:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e017      	b.n	8003e68 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	225a      	movs	r2, #90	@ 0x5a
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	220f      	movs	r2, #15
 8003e46:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2108      	movs	r1, #8
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2280      	movs	r2, #128	@ 0x80
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b012      	add	sp, #72	@ 0x48
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fffffedf 	.word	0xfffffedf

08003e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b0ab      	sub	sp, #172	@ 0xac
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	22a4      	movs	r2, #164	@ 0xa4
 8003e84:	18b9      	adds	r1, r7, r2
 8003e86:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	20a0      	movs	r0, #160	@ 0xa0
 8003e90:	1839      	adds	r1, r7, r0
 8003e92:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	219c      	movs	r1, #156	@ 0x9c
 8003e9c:	1879      	adds	r1, r7, r1
 8003e9e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	18bb      	adds	r3, r7, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a99      	ldr	r2, [pc, #612]	@ (800410c <HAL_UART_IRQHandler+0x298>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2298      	movs	r2, #152	@ 0x98
 8003eac:	18bc      	adds	r4, r7, r2
 8003eae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003eb0:	18bb      	adds	r3, r7, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d114      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d00a      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d100      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x62>
 8003ed4:	e2be      	b.n	8004454 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	0010      	movs	r0, r2
 8003ede:	4798      	blx	r3
      }
      return;
 8003ee0:	e2b8      	b.n	8004454 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ee2:	2398      	movs	r3, #152	@ 0x98
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d100      	bne.n	8003eee <HAL_UART_IRQHandler+0x7a>
 8003eec:	e114      	b.n	8004118 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003eee:	239c      	movs	r3, #156	@ 0x9c
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d106      	bne.n	8003f08 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003efa:	23a0      	movs	r3, #160	@ 0xa0
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a83      	ldr	r2, [pc, #524]	@ (8004110 <HAL_UART_IRQHandler+0x29c>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	d100      	bne.n	8003f08 <HAL_UART_IRQHandler+0x94>
 8003f06:	e107      	b.n	8004118 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f08:	23a4      	movs	r3, #164	@ 0xa4
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d012      	beq.n	8003f3a <HAL_UART_IRQHandler+0xc6>
 8003f14:	23a0      	movs	r3, #160	@ 0xa0
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2284      	movs	r2, #132	@ 0x84
 8003f2e:	589b      	ldr	r3, [r3, r2]
 8003f30:	2201      	movs	r2, #1
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2184      	movs	r1, #132	@ 0x84
 8003f38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f3a:	23a4      	movs	r3, #164	@ 0xa4
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d011      	beq.n	8003f6a <HAL_UART_IRQHandler+0xf6>
 8003f46:	239c      	movs	r3, #156	@ 0x9c
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2202      	movs	r2, #2
 8003f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2284      	movs	r2, #132	@ 0x84
 8003f5e:	589b      	ldr	r3, [r3, r2]
 8003f60:	2204      	movs	r2, #4
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2184      	movs	r1, #132	@ 0x84
 8003f68:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f6a:	23a4      	movs	r3, #164	@ 0xa4
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2204      	movs	r2, #4
 8003f72:	4013      	ands	r3, r2
 8003f74:	d011      	beq.n	8003f9a <HAL_UART_IRQHandler+0x126>
 8003f76:	239c      	movs	r3, #156	@ 0x9c
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2204      	movs	r2, #4
 8003f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2284      	movs	r2, #132	@ 0x84
 8003f8e:	589b      	ldr	r3, [r3, r2]
 8003f90:	2202      	movs	r2, #2
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2184      	movs	r1, #132	@ 0x84
 8003f98:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f9a:	23a4      	movs	r3, #164	@ 0xa4
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d017      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fa6:	23a0      	movs	r3, #160	@ 0xa0
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d105      	bne.n	8003fbe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fb2:	239c      	movs	r3, #156	@ 0x9c
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2284      	movs	r2, #132	@ 0x84
 8003fca:	589b      	ldr	r3, [r3, r2]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2184      	movs	r1, #132	@ 0x84
 8003fd4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fd6:	23a4      	movs	r3, #164	@ 0xa4
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d013      	beq.n	800400c <HAL_UART_IRQHandler+0x198>
 8003fe4:	23a0      	movs	r3, #160	@ 0xa0
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	04db      	lsls	r3, r3, #19
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d00c      	beq.n	800400c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2284      	movs	r2, #132	@ 0x84
 8004000:	589b      	ldr	r3, [r3, r2]
 8004002:	2220      	movs	r2, #32
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2184      	movs	r1, #132	@ 0x84
 800400a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2284      	movs	r2, #132	@ 0x84
 8004010:	589b      	ldr	r3, [r3, r2]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d100      	bne.n	8004018 <HAL_UART_IRQHandler+0x1a4>
 8004016:	e21f      	b.n	8004458 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004018:	23a4      	movs	r3, #164	@ 0xa4
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2220      	movs	r2, #32
 8004020:	4013      	ands	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004024:	23a0      	movs	r3, #160	@ 0xa0
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2220      	movs	r2, #32
 800402c:	4013      	ands	r3, r2
 800402e:	d008      	beq.n	8004042 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	0010      	movs	r0, r2
 8004040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2284      	movs	r2, #132	@ 0x84
 8004046:	589b      	ldr	r3, [r3, r2]
 8004048:	2194      	movs	r1, #148	@ 0x94
 800404a:	187a      	adds	r2, r7, r1
 800404c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2240      	movs	r2, #64	@ 0x40
 8004056:	4013      	ands	r3, r2
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d004      	beq.n	8004066 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800405c:	187b      	adds	r3, r7, r1
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2228      	movs	r2, #40	@ 0x28
 8004062:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004064:	d047      	beq.n	80040f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 ff6f 	bl	8004f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2240      	movs	r2, #64	@ 0x40
 8004076:	4013      	ands	r3, r2
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d137      	bne.n	80040ec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004084:	2090      	movs	r0, #144	@ 0x90
 8004086:	183a      	adds	r2, r7, r0
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	2301      	movs	r3, #1
 800408c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2140      	movs	r1, #64	@ 0x40
 80040a2:	438a      	bics	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	183b      	adds	r3, r7, r0
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c0:	4a14      	ldr	r2, [pc, #80]	@ (8004114 <HAL_UART_IRQHandler+0x2a0>)
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fd fc3d 	bl	8001948 <HAL_DMA_Abort_IT>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d01a      	beq.n	8004108 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	0018      	movs	r0, r3
 80040de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e012      	b.n	8004108 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc fdef 	bl	8000cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ea:	e00d      	b.n	8004108 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7fc fdea 	bl	8000cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e008      	b.n	8004108 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fc fde5 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2284      	movs	r2, #132	@ 0x84
 8004102:	2100      	movs	r1, #0
 8004104:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004106:	e1a7      	b.n	8004458 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	46c0      	nop			@ (mov r8, r8)
    return;
 800410a:	e1a5      	b.n	8004458 <HAL_UART_IRQHandler+0x5e4>
 800410c:	0000080f 	.word	0x0000080f
 8004110:	04000120 	.word	0x04000120
 8004114:	08005337 	.word	0x08005337

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d000      	beq.n	8004122 <HAL_UART_IRQHandler+0x2ae>
 8004120:	e159      	b.n	80043d6 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004122:	23a4      	movs	r3, #164	@ 0xa4
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d100      	bne.n	8004130 <HAL_UART_IRQHandler+0x2bc>
 800412e:	e152      	b.n	80043d6 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004130:	23a0      	movs	r3, #160	@ 0xa0
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	4013      	ands	r3, r2
 800413a:	d100      	bne.n	800413e <HAL_UART_IRQHandler+0x2ca>
 800413c:	e14b      	b.n	80043d6 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2240      	movs	r2, #64	@ 0x40
 800414e:	4013      	ands	r3, r2
 8004150:	2b40      	cmp	r3, #64	@ 0x40
 8004152:	d000      	beq.n	8004156 <HAL_UART_IRQHandler+0x2e2>
 8004154:	e0bf      	b.n	80042d6 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	217e      	movs	r1, #126	@ 0x7e
 8004160:	187b      	adds	r3, r7, r1
 8004162:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004164:	187b      	adds	r3, r7, r1
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d100      	bne.n	800416e <HAL_UART_IRQHandler+0x2fa>
 800416c:	e095      	b.n	800429a <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2258      	movs	r2, #88	@ 0x58
 8004172:	5a9b      	ldrh	r3, [r3, r2]
 8004174:	187a      	adds	r2, r7, r1
 8004176:	8812      	ldrh	r2, [r2, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d300      	bcc.n	800417e <HAL_UART_IRQHandler+0x30a>
 800417c:	e08d      	b.n	800429a <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	187a      	adds	r2, r7, r1
 8004182:	215a      	movs	r1, #90	@ 0x5a
 8004184:	8812      	ldrh	r2, [r2, #0]
 8004186:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2220      	movs	r2, #32
 8004192:	4013      	ands	r3, r2
 8004194:	d16f      	bne.n	8004276 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041a0:	2301      	movs	r3, #1
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	49ad      	ldr	r1, [pc, #692]	@ (800446c <HAL_UART_IRQHandler+0x5f8>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80041ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80041d2:	2301      	movs	r3, #1
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	438a      	bics	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	673b      	str	r3, [r7, #112]	@ 0x70
 8004204:	2301      	movs	r3, #1
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2140      	movs	r1, #64	@ 0x40
 800421c:	438a      	bics	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004222:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	@ 0x80
 8004230:	2120      	movs	r1, #32
 8004232:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423a:	f3ef 8310 	mrs	r3, PRIMASK
 800423e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004244:	2301      	movs	r3, #1
 8004246:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2110      	movs	r1, #16
 800425c:	438a      	bics	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004262:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004270:	0018      	movs	r0, r3
 8004272:	f7fd fb29 	bl	80018c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2258      	movs	r2, #88	@ 0x58
 8004280:	5a9a      	ldrh	r2, [r3, r2]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	215a      	movs	r1, #90	@ 0x5a
 8004286:	5a5b      	ldrh	r3, [r3, r1]
 8004288:	b29b      	uxth	r3, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f7fc fcfc 	bl	8000c90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004298:	e0e0      	b.n	800445c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2258      	movs	r2, #88	@ 0x58
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	227e      	movs	r2, #126	@ 0x7e
 80042a2:	18ba      	adds	r2, r7, r2
 80042a4:	8812      	ldrh	r2, [r2, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d000      	beq.n	80042ac <HAL_UART_IRQHandler+0x438>
 80042aa:	e0d7      	b.n	800445c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d000      	beq.n	80042be <HAL_UART_IRQHandler+0x44a>
 80042bc:	e0ce      	b.n	800445c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2258      	movs	r2, #88	@ 0x58
 80042c8:	5a9a      	ldrh	r2, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fc fcde 	bl	8000c90 <HAL_UARTEx_RxEventCallback>
      return;
 80042d4:	e0c2      	b.n	800445c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2258      	movs	r2, #88	@ 0x58
 80042da:	5a99      	ldrh	r1, [r3, r2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	225a      	movs	r2, #90	@ 0x5a
 80042e0:	5a9b      	ldrh	r3, [r3, r2]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	208e      	movs	r0, #142	@ 0x8e
 80042e6:	183b      	adds	r3, r7, r0
 80042e8:	1a8a      	subs	r2, r1, r2
 80042ea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	225a      	movs	r2, #90	@ 0x5a
 80042f0:	5a9b      	ldrh	r3, [r3, r2]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <HAL_UART_IRQHandler+0x486>
 80042f8:	e0b2      	b.n	8004460 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 80042fa:	183b      	adds	r3, r7, r0
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d100      	bne.n	8004304 <HAL_UART_IRQHandler+0x490>
 8004302:	e0ad      	b.n	8004460 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	60fb      	str	r3, [r7, #12]
  return(result);
 800430a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430c:	2488      	movs	r4, #136	@ 0x88
 800430e:	193a      	adds	r2, r7, r4
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	2301      	movs	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			@ (mov r8, r8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4951      	ldr	r1, [pc, #324]	@ (8004470 <HAL_UART_IRQHandler+0x5fc>)
 800432a:	400a      	ands	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	193b      	adds	r3, r7, r4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433c:	f3ef 8310 	mrs	r3, PRIMASK
 8004340:	61bb      	str	r3, [r7, #24]
  return(result);
 8004342:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	2484      	movs	r4, #132	@ 0x84
 8004346:	193a      	adds	r2, r7, r4
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	2301      	movs	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	438a      	bics	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
 8004366:	193b      	adds	r3, r7, r4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	@ 0x80
 8004378:	2120      	movs	r1, #32
 800437a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004390:	2480      	movs	r4, #128	@ 0x80
 8004392:	193a      	adds	r2, r7, r4
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	2301      	movs	r3, #1
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	f383 8810 	msr	PRIMASK, r3
}
 80043a0:	46c0      	nop			@ (mov r8, r8)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2110      	movs	r1, #16
 80043ae:	438a      	bics	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	193b      	adds	r3, r7, r4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c6:	183b      	adds	r3, r7, r0
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fc fc5e 	bl	8000c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043d4:	e044      	b.n	8004460 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043d6:	23a4      	movs	r3, #164	@ 0xa4
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	@ 0x80
 80043de:	035b      	lsls	r3, r3, #13
 80043e0:	4013      	ands	r3, r2
 80043e2:	d010      	beq.n	8004406 <HAL_UART_IRQHandler+0x592>
 80043e4:	239c      	movs	r3, #156	@ 0x9c
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	03db      	lsls	r3, r3, #15
 80043ee:	4013      	ands	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2280      	movs	r2, #128	@ 0x80
 80043f8:	0352      	lsls	r2, r2, #13
 80043fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 ffd7 	bl	80053b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004404:	e02f      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004406:	23a4      	movs	r3, #164	@ 0xa4
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	4013      	ands	r3, r2
 8004410:	d00f      	beq.n	8004432 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004412:	23a0      	movs	r3, #160	@ 0xa0
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2280      	movs	r2, #128	@ 0x80
 800441a:	4013      	ands	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	0010      	movs	r0, r2
 800442e:	4798      	blx	r3
    }
    return;
 8004430:	e018      	b.n	8004464 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004432:	23a4      	movs	r3, #164	@ 0xa4
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2240      	movs	r2, #64	@ 0x40
 800443a:	4013      	ands	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_UART_IRQHandler+0x5f2>
 800443e:	23a0      	movs	r3, #160	@ 0xa0
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2240      	movs	r2, #64	@ 0x40
 8004446:	4013      	ands	r3, r2
 8004448:	d00d      	beq.n	8004466 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 ff85 	bl	800535c <UART_EndTransmit_IT>
    return;
 8004452:	e008      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	e006      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	e004      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
      return;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e002      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e000      	b.n	8004466 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004464:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004466:	46bd      	mov	sp, r7
 8004468:	b02b      	add	sp, #172	@ 0xac
 800446a:	bd90      	pop	{r4, r7, pc}
 800446c:	fffffeff 	.word	0xfffffeff
 8004470:	fffffedf 	.word	0xfffffedf

08004474 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800449c:	46c0      	nop			@ (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b002      	add	sp, #8
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2280      	movs	r2, #128	@ 0x80
 80044c6:	589b      	ldr	r3, [r3, r2]
 80044c8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2284      	movs	r2, #132	@ 0x84
 80044e4:	589b      	ldr	r3, [r3, r2]
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b002      	add	sp, #8
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b08e      	sub	sp, #56	@ 0x38
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f8:	231a      	movs	r3, #26
 80044fa:	2218      	movs	r2, #24
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	431a      	orrs	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4313      	orrs	r3, r2
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4ac3      	ldr	r2, [pc, #780]	@ (8004830 <UART_SetConfig+0x340>)
 8004524:	4013      	ands	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4abe      	ldr	r2, [pc, #760]	@ (8004834 <UART_SetConfig+0x344>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4ab8      	ldr	r2, [pc, #736]	@ (8004838 <UART_SetConfig+0x348>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004560:	4313      	orrs	r3, r2
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4ab4      	ldr	r2, [pc, #720]	@ (800483c <UART_SetConfig+0x34c>)
 800456c:	4013      	ands	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4ab0      	ldr	r2, [pc, #704]	@ (8004840 <UART_SetConfig+0x350>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d131      	bne.n	80045e8 <UART_SetConfig+0xf8>
 8004584:	4baf      	ldr	r3, [pc, #700]	@ (8004844 <UART_SetConfig+0x354>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004588:	2203      	movs	r2, #3
 800458a:	4013      	ands	r3, r2
 800458c:	2b03      	cmp	r3, #3
 800458e:	d01d      	beq.n	80045cc <UART_SetConfig+0xdc>
 8004590:	d823      	bhi.n	80045da <UART_SetConfig+0xea>
 8004592:	2b02      	cmp	r3, #2
 8004594:	d00c      	beq.n	80045b0 <UART_SetConfig+0xc0>
 8004596:	d820      	bhi.n	80045da <UART_SetConfig+0xea>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <UART_SetConfig+0xb2>
 800459c:	2b01      	cmp	r3, #1
 800459e:	d00e      	beq.n	80045be <UART_SetConfig+0xce>
 80045a0:	e01b      	b.n	80045da <UART_SetConfig+0xea>
 80045a2:	231b      	movs	r3, #27
 80045a4:	2218      	movs	r2, #24
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	19db      	adds	r3, r3, r7
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e0b4      	b.n	800471a <UART_SetConfig+0x22a>
 80045b0:	231b      	movs	r3, #27
 80045b2:	2218      	movs	r2, #24
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	19db      	adds	r3, r3, r7
 80045b8:	2202      	movs	r2, #2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e0ad      	b.n	800471a <UART_SetConfig+0x22a>
 80045be:	231b      	movs	r3, #27
 80045c0:	2218      	movs	r2, #24
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	19db      	adds	r3, r3, r7
 80045c6:	2204      	movs	r2, #4
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e0a6      	b.n	800471a <UART_SetConfig+0x22a>
 80045cc:	231b      	movs	r3, #27
 80045ce:	2218      	movs	r2, #24
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	19db      	adds	r3, r3, r7
 80045d4:	2208      	movs	r2, #8
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e09f      	b.n	800471a <UART_SetConfig+0x22a>
 80045da:	231b      	movs	r3, #27
 80045dc:	2218      	movs	r2, #24
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	19db      	adds	r3, r3, r7
 80045e2:	2210      	movs	r2, #16
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e098      	b.n	800471a <UART_SetConfig+0x22a>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a96      	ldr	r2, [pc, #600]	@ (8004848 <UART_SetConfig+0x358>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d131      	bne.n	8004656 <UART_SetConfig+0x166>
 80045f2:	4b94      	ldr	r3, [pc, #592]	@ (8004844 <UART_SetConfig+0x354>)
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	220c      	movs	r2, #12
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d01d      	beq.n	800463a <UART_SetConfig+0x14a>
 80045fe:	d823      	bhi.n	8004648 <UART_SetConfig+0x158>
 8004600:	2b08      	cmp	r3, #8
 8004602:	d00c      	beq.n	800461e <UART_SetConfig+0x12e>
 8004604:	d820      	bhi.n	8004648 <UART_SetConfig+0x158>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <UART_SetConfig+0x120>
 800460a:	2b04      	cmp	r3, #4
 800460c:	d00e      	beq.n	800462c <UART_SetConfig+0x13c>
 800460e:	e01b      	b.n	8004648 <UART_SetConfig+0x158>
 8004610:	231b      	movs	r3, #27
 8004612:	2218      	movs	r2, #24
 8004614:	189b      	adds	r3, r3, r2
 8004616:	19db      	adds	r3, r3, r7
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e07d      	b.n	800471a <UART_SetConfig+0x22a>
 800461e:	231b      	movs	r3, #27
 8004620:	2218      	movs	r2, #24
 8004622:	189b      	adds	r3, r3, r2
 8004624:	19db      	adds	r3, r3, r7
 8004626:	2202      	movs	r2, #2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e076      	b.n	800471a <UART_SetConfig+0x22a>
 800462c:	231b      	movs	r3, #27
 800462e:	2218      	movs	r2, #24
 8004630:	189b      	adds	r3, r3, r2
 8004632:	19db      	adds	r3, r3, r7
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e06f      	b.n	800471a <UART_SetConfig+0x22a>
 800463a:	231b      	movs	r3, #27
 800463c:	2218      	movs	r2, #24
 800463e:	189b      	adds	r3, r3, r2
 8004640:	19db      	adds	r3, r3, r7
 8004642:	2208      	movs	r2, #8
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e068      	b.n	800471a <UART_SetConfig+0x22a>
 8004648:	231b      	movs	r3, #27
 800464a:	2218      	movs	r2, #24
 800464c:	189b      	adds	r3, r3, r2
 800464e:	19db      	adds	r3, r3, r7
 8004650:	2210      	movs	r2, #16
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e061      	b.n	800471a <UART_SetConfig+0x22a>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7c      	ldr	r2, [pc, #496]	@ (800484c <UART_SetConfig+0x35c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d106      	bne.n	800466e <UART_SetConfig+0x17e>
 8004660:	231b      	movs	r3, #27
 8004662:	2218      	movs	r2, #24
 8004664:	189b      	adds	r3, r3, r2
 8004666:	19db      	adds	r3, r3, r7
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e055      	b.n	800471a <UART_SetConfig+0x22a>
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a77      	ldr	r2, [pc, #476]	@ (8004850 <UART_SetConfig+0x360>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d106      	bne.n	8004686 <UART_SetConfig+0x196>
 8004678:	231b      	movs	r3, #27
 800467a:	2218      	movs	r2, #24
 800467c:	189b      	adds	r3, r3, r2
 800467e:	19db      	adds	r3, r3, r7
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e049      	b.n	800471a <UART_SetConfig+0x22a>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6b      	ldr	r2, [pc, #428]	@ (8004838 <UART_SetConfig+0x348>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d13e      	bne.n	800470e <UART_SetConfig+0x21e>
 8004690:	4b6c      	ldr	r3, [pc, #432]	@ (8004844 <UART_SetConfig+0x354>)
 8004692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004694:	23c0      	movs	r3, #192	@ 0xc0
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4013      	ands	r3, r2
 800469a:	22c0      	movs	r2, #192	@ 0xc0
 800469c:	0112      	lsls	r2, r2, #4
 800469e:	4293      	cmp	r3, r2
 80046a0:	d027      	beq.n	80046f2 <UART_SetConfig+0x202>
 80046a2:	22c0      	movs	r2, #192	@ 0xc0
 80046a4:	0112      	lsls	r2, r2, #4
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d82a      	bhi.n	8004700 <UART_SetConfig+0x210>
 80046aa:	2280      	movs	r2, #128	@ 0x80
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d011      	beq.n	80046d6 <UART_SetConfig+0x1e6>
 80046b2:	2280      	movs	r2, #128	@ 0x80
 80046b4:	0112      	lsls	r2, r2, #4
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d822      	bhi.n	8004700 <UART_SetConfig+0x210>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <UART_SetConfig+0x1d8>
 80046be:	2280      	movs	r2, #128	@ 0x80
 80046c0:	00d2      	lsls	r2, r2, #3
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00e      	beq.n	80046e4 <UART_SetConfig+0x1f4>
 80046c6:	e01b      	b.n	8004700 <UART_SetConfig+0x210>
 80046c8:	231b      	movs	r3, #27
 80046ca:	2218      	movs	r2, #24
 80046cc:	189b      	adds	r3, r3, r2
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e021      	b.n	800471a <UART_SetConfig+0x22a>
 80046d6:	231b      	movs	r3, #27
 80046d8:	2218      	movs	r2, #24
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	19db      	adds	r3, r3, r7
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e01a      	b.n	800471a <UART_SetConfig+0x22a>
 80046e4:	231b      	movs	r3, #27
 80046e6:	2218      	movs	r2, #24
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	19db      	adds	r3, r3, r7
 80046ec:	2204      	movs	r2, #4
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e013      	b.n	800471a <UART_SetConfig+0x22a>
 80046f2:	231b      	movs	r3, #27
 80046f4:	2218      	movs	r2, #24
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	2208      	movs	r2, #8
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e00c      	b.n	800471a <UART_SetConfig+0x22a>
 8004700:	231b      	movs	r3, #27
 8004702:	2218      	movs	r2, #24
 8004704:	189b      	adds	r3, r3, r2
 8004706:	19db      	adds	r3, r3, r7
 8004708:	2210      	movs	r2, #16
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e005      	b.n	800471a <UART_SetConfig+0x22a>
 800470e:	231b      	movs	r3, #27
 8004710:	2218      	movs	r2, #24
 8004712:	189b      	adds	r3, r3, r2
 8004714:	19db      	adds	r3, r3, r7
 8004716:	2210      	movs	r2, #16
 8004718:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a46      	ldr	r2, [pc, #280]	@ (8004838 <UART_SetConfig+0x348>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d000      	beq.n	8004726 <UART_SetConfig+0x236>
 8004724:	e09a      	b.n	800485c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004726:	231b      	movs	r3, #27
 8004728:	2218      	movs	r2, #24
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d01d      	beq.n	8004770 <UART_SetConfig+0x280>
 8004734:	dc20      	bgt.n	8004778 <UART_SetConfig+0x288>
 8004736:	2b04      	cmp	r3, #4
 8004738:	d015      	beq.n	8004766 <UART_SetConfig+0x276>
 800473a:	dc1d      	bgt.n	8004778 <UART_SetConfig+0x288>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <UART_SetConfig+0x256>
 8004740:	2b02      	cmp	r3, #2
 8004742:	d005      	beq.n	8004750 <UART_SetConfig+0x260>
 8004744:	e018      	b.n	8004778 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7fe fc21 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 800474a:	0003      	movs	r3, r0
 800474c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800474e:	e01c      	b.n	800478a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004750:	4b3c      	ldr	r3, [pc, #240]	@ (8004844 <UART_SetConfig+0x354>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	d002      	beq.n	8004760 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800475a:	4b3e      	ldr	r3, [pc, #248]	@ (8004854 <UART_SetConfig+0x364>)
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004760:	4b3d      	ldr	r3, [pc, #244]	@ (8004858 <UART_SetConfig+0x368>)
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004764:	e011      	b.n	800478a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004766:	f7fe fb81 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 800476a:	0003      	movs	r3, r0
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800476e:	e00c      	b.n	800478a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004776:	e008      	b.n	800478a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800477c:	231a      	movs	r3, #26
 800477e:	2218      	movs	r2, #24
 8004780:	189b      	adds	r3, r3, r2
 8004782:	19db      	adds	r3, r3, r7
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
        break;
 8004788:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d100      	bne.n	8004792 <UART_SetConfig+0x2a2>
 8004790:	e133      	b.n	80049fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	0013      	movs	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	189b      	adds	r3, r3, r2
 800479c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d305      	bcc.n	80047ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d906      	bls.n	80047bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80047ae:	231a      	movs	r3, #26
 80047b0:	2218      	movs	r2, #24
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	19db      	adds	r3, r3, r7
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e11e      	b.n	80049fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	6939      	ldr	r1, [r7, #16]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	000b      	movs	r3, r1
 80047ca:	0e1b      	lsrs	r3, r3, #24
 80047cc:	0010      	movs	r0, r2
 80047ce:	0205      	lsls	r5, r0, #8
 80047d0:	431d      	orrs	r5, r3
 80047d2:	000b      	movs	r3, r1
 80047d4:	021c      	lsls	r4, r3, #8
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	1900      	adds	r0, r0, r4
 80047e8:	4169      	adcs	r1, r5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f7fb fd24 	bl	8000244 <__aeabi_uldivmod>
 80047fc:	0002      	movs	r2, r0
 80047fe:	000b      	movs	r3, r1
 8004800:	0013      	movs	r3, r2
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004806:	23c0      	movs	r3, #192	@ 0xc0
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	429a      	cmp	r2, r3
 800480c:	d309      	bcc.n	8004822 <UART_SetConfig+0x332>
 800480e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004810:	2380      	movs	r3, #128	@ 0x80
 8004812:	035b      	lsls	r3, r3, #13
 8004814:	429a      	cmp	r2, r3
 8004816:	d204      	bcs.n	8004822 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	e0eb      	b.n	80049fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004822:	231a      	movs	r3, #26
 8004824:	2218      	movs	r2, #24
 8004826:	189b      	adds	r3, r3, r2
 8004828:	19db      	adds	r3, r3, r7
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e0e4      	b.n	80049fa <UART_SetConfig+0x50a>
 8004830:	efff69f3 	.word	0xefff69f3
 8004834:	ffffcfff 	.word	0xffffcfff
 8004838:	40004800 	.word	0x40004800
 800483c:	fffff4ff 	.word	0xfffff4ff
 8004840:	40013800 	.word	0x40013800
 8004844:	40021000 	.word	0x40021000
 8004848:	40004400 	.word	0x40004400
 800484c:	40004c00 	.word	0x40004c00
 8004850:	40005000 	.word	0x40005000
 8004854:	003d0900 	.word	0x003d0900
 8004858:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	429a      	cmp	r2, r3
 8004866:	d000      	beq.n	800486a <UART_SetConfig+0x37a>
 8004868:	e070      	b.n	800494c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800486a:	231b      	movs	r3, #27
 800486c:	2218      	movs	r2, #24
 800486e:	189b      	adds	r3, r3, r2
 8004870:	19db      	adds	r3, r3, r7
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d822      	bhi.n	80048be <UART_SetConfig+0x3ce>
 8004878:	009a      	lsls	r2, r3, #2
 800487a:	4b67      	ldr	r3, [pc, #412]	@ (8004a18 <UART_SetConfig+0x528>)
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004882:	f7fe fb83 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004886:	0003      	movs	r3, r0
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800488a:	e021      	b.n	80048d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fe fb94 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8004890:	0003      	movs	r3, r0
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004894:	e01c      	b.n	80048d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004896:	4b61      	ldr	r3, [pc, #388]	@ (8004a1c <UART_SetConfig+0x52c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	4013      	ands	r3, r2
 800489e:	d002      	beq.n	80048a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <UART_SetConfig+0x530>)
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048a4:	e014      	b.n	80048d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80048a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a24 <UART_SetConfig+0x534>)
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048aa:	e011      	b.n	80048d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ac:	f7fe fade 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80048b0:	0003      	movs	r3, r0
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048b4:	e00c      	b.n	80048d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048bc:	e008      	b.n	80048d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048c2:	231a      	movs	r3, #26
 80048c4:	2218      	movs	r2, #24
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	19db      	adds	r3, r3, r7
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
        break;
 80048ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d100      	bne.n	80048d8 <UART_SetConfig+0x3e8>
 80048d6:	e090      	b.n	80049fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	005a      	lsls	r2, r3, #1
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	18d2      	adds	r2, r2, r3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0019      	movs	r1, r3
 80048ea:	0010      	movs	r0, r2
 80048ec:	f7fb fc1e 	bl	800012c <__udivsi3>
 80048f0:	0003      	movs	r3, r0
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d921      	bls.n	800493e <UART_SetConfig+0x44e>
 80048fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	025b      	lsls	r3, r3, #9
 8004900:	429a      	cmp	r2, r3
 8004902:	d21c      	bcs.n	800493e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	b29a      	uxth	r2, r3
 8004908:	200e      	movs	r0, #14
 800490a:	2418      	movs	r4, #24
 800490c:	1903      	adds	r3, r0, r4
 800490e:	19db      	adds	r3, r3, r7
 8004910:	210f      	movs	r1, #15
 8004912:	438a      	bics	r2, r1
 8004914:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	b29b      	uxth	r3, r3
 800491c:	2207      	movs	r2, #7
 800491e:	4013      	ands	r3, r2
 8004920:	b299      	uxth	r1, r3
 8004922:	1903      	adds	r3, r0, r4
 8004924:	19db      	adds	r3, r3, r7
 8004926:	1902      	adds	r2, r0, r4
 8004928:	19d2      	adds	r2, r2, r7
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	1902      	adds	r2, r0, r4
 8004936:	19d2      	adds	r2, r2, r7
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	e05d      	b.n	80049fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800493e:	231a      	movs	r3, #26
 8004940:	2218      	movs	r2, #24
 8004942:	189b      	adds	r3, r3, r2
 8004944:	19db      	adds	r3, r3, r7
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e056      	b.n	80049fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494c:	231b      	movs	r3, #27
 800494e:	2218      	movs	r2, #24
 8004950:	189b      	adds	r3, r3, r2
 8004952:	19db      	adds	r3, r3, r7
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d822      	bhi.n	80049a0 <UART_SetConfig+0x4b0>
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	4b32      	ldr	r3, [pc, #200]	@ (8004a28 <UART_SetConfig+0x538>)
 800495e:	18d3      	adds	r3, r2, r3
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fb12 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004968:	0003      	movs	r3, r0
 800496a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800496c:	e021      	b.n	80049b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496e:	f7fe fb23 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8004972:	0003      	movs	r3, r0
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004976:	e01c      	b.n	80049b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004978:	4b28      	ldr	r3, [pc, #160]	@ (8004a1c <UART_SetConfig+0x52c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	4013      	ands	r3, r2
 8004980:	d002      	beq.n	8004988 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <UART_SetConfig+0x530>)
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004988:	4b26      	ldr	r3, [pc, #152]	@ (8004a24 <UART_SetConfig+0x534>)
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800498c:	e011      	b.n	80049b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498e:	f7fe fa6d 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8004992:	0003      	movs	r3, r0
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004996:	e00c      	b.n	80049b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800499e:	e008      	b.n	80049b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80049a4:	231a      	movs	r3, #26
 80049a6:	2218      	movs	r2, #24
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
        break;
 80049b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	085a      	lsrs	r2, r3, #1
 80049be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c0:	18d2      	adds	r2, r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0019      	movs	r1, r3
 80049c8:	0010      	movs	r0, r2
 80049ca:	f7fb fbaf 	bl	800012c <__udivsi3>
 80049ce:	0003      	movs	r3, r0
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d90a      	bls.n	80049ee <UART_SetConfig+0x4fe>
 80049d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	429a      	cmp	r2, r3
 80049e0:	d205      	bcs.n	80049ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	e005      	b.n	80049fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80049ee:	231a      	movs	r3, #26
 80049f0:	2218      	movs	r2, #24
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	19db      	adds	r3, r3, r7
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2200      	movs	r2, #0
 80049fe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2200      	movs	r2, #0
 8004a04:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a06:	231a      	movs	r3, #26
 8004a08:	2218      	movs	r2, #24
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	19db      	adds	r3, r3, r7
 8004a0e:	781b      	ldrb	r3, [r3, #0]
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b00e      	add	sp, #56	@ 0x38
 8004a16:	bdb0      	pop	{r4, r5, r7, pc}
 8004a18:	080067f0 	.word	0x080067f0
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	003d0900 	.word	0x003d0900
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	08006814 	.word	0x08006814

08004a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a4a      	ldr	r2, [pc, #296]	@ (8004b70 <UART_AdvFeatureConfig+0x144>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	0019      	movs	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a43      	ldr	r2, [pc, #268]	@ (8004b74 <UART_AdvFeatureConfig+0x148>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a3b      	ldr	r2, [pc, #236]	@ (8004b78 <UART_AdvFeatureConfig+0x14c>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4a34      	ldr	r2, [pc, #208]	@ (8004b7c <UART_AdvFeatureConfig+0x150>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b80 <UART_AdvFeatureConfig+0x154>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4a25      	ldr	r2, [pc, #148]	@ (8004b84 <UART_AdvFeatureConfig+0x158>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	0019      	movs	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	2240      	movs	r2, #64	@ 0x40
 8004b06:	4013      	ands	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <UART_AdvFeatureConfig+0x15c>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	035b      	lsls	r3, r3, #13
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10b      	bne.n	8004b46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <UART_AdvFeatureConfig+0x160>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	2280      	movs	r2, #128	@ 0x80
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4a0e      	ldr	r2, [pc, #56]	@ (8004b90 <UART_AdvFeatureConfig+0x164>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }
}
 8004b68:	46c0      	nop			@ (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	ffff7fff 	.word	0xffff7fff
 8004b74:	fffdffff 	.word	0xfffdffff
 8004b78:	fffeffff 	.word	0xfffeffff
 8004b7c:	fffbffff 	.word	0xfffbffff
 8004b80:	ffffefff 	.word	0xffffefff
 8004b84:	ffffdfff 	.word	0xffffdfff
 8004b88:	ffefffff 	.word	0xffefffff
 8004b8c:	ff9fffff 	.word	0xff9fffff
 8004b90:	fff7ffff 	.word	0xfff7ffff

08004b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b092      	sub	sp, #72	@ 0x48
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2284      	movs	r2, #132	@ 0x84
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba4:	f7fc fc16 	bl	80013d4 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d12c      	bne.n	8004c14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbc:	2280      	movs	r2, #128	@ 0x80
 8004bbe:	0391      	lsls	r1, r2, #14
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4a46      	ldr	r2, [pc, #280]	@ (8004cdc <UART_CheckIdleState+0x148>)
 8004bc4:	9200      	str	r2, [sp, #0]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f000 f88c 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d021      	beq.n	8004c14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bda:	2301      	movs	r3, #1
 8004bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	f383 8810 	msr	PRIMASK, r3
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2180      	movs	r1, #128	@ 0x80
 8004bf2:	438a      	bics	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2278      	movs	r2, #120	@ 0x78
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e05f      	b.n	8004cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d146      	bne.n	8004cb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	2280      	movs	r2, #128	@ 0x80
 8004c26:	03d1      	lsls	r1, r2, #15
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <UART_CheckIdleState+0x148>)
 8004c2c:	9200      	str	r2, [sp, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f000 f858 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d03b      	beq.n	8004cb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c38:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c42:	2301      	movs	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			@ (mov r8, r8)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4921      	ldr	r1, [pc, #132]	@ (8004ce0 <UART_CheckIdleState+0x14c>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f383 8810 	msr	PRIMASK, r3
}
 8004c68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c74:	2301      	movs	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f383 8810 	msr	PRIMASK, r3
}
 8004c9a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2280      	movs	r2, #128	@ 0x80
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2278      	movs	r2, #120	@ 0x78
 8004ca8:	2100      	movs	r1, #0
 8004caa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e011      	b.n	8004cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2280      	movs	r2, #128	@ 0x80
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2278      	movs	r2, #120	@ 0x78
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b010      	add	sp, #64	@ 0x40
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	01ffffff 	.word	0x01ffffff
 8004ce0:	fffffedf 	.word	0xfffffedf

08004ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	1dfb      	adds	r3, r7, #7
 8004cf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	e051      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	d04e      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fc fb6a 	bl	80013d4 <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e051      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b80      	cmp	r3, #128	@ 0x80
 8004d26:	d038      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d035      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2208      	movs	r2, #8
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d111      	bne.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f900 	bl	8004f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2284      	movs	r2, #132	@ 0x84
 8004d50:	2108      	movs	r1, #8
 8004d52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2278      	movs	r2, #120	@ 0x78
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e02c      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d112      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	0112      	lsls	r2, r2, #4
 8004d7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f8e3 	bl	8004f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2284      	movs	r2, #132	@ 0x84
 8004d8a:	2120      	movs	r1, #32
 8004d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2278      	movs	r2, #120	@ 0x78
 8004d92:	2100      	movs	r1, #0
 8004d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00f      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	425a      	negs	r2, r3
 8004daa:	4153      	adcs	r3, r2
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d09e      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b090      	sub	sp, #64	@ 0x40
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	1dbb      	adds	r3, r7, #6
 8004dd0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1dba      	adds	r2, r7, #6
 8004ddc:	2158      	movs	r1, #88	@ 0x58
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2284      	movs	r2, #132	@ 0x84
 8004de6:	2100      	movs	r1, #0
 8004de8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2280      	movs	r2, #128	@ 0x80
 8004dee:	2122      	movs	r1, #34	@ 0x22
 8004df0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d028      	beq.n	8004e4c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8004ef8 <UART_Start_Receive_DMA+0x134>)
 8004e00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	4a3d      	ldr	r2, [pc, #244]	@ (8004efc <UART_Start_Receive_DMA+0x138>)
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004f00 <UART_Start_Receive_DMA+0x13c>)
 8004e10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	2200      	movs	r2, #0
 8004e18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3324      	adds	r3, #36	@ 0x24
 8004e24:	0019      	movs	r1, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	1dbb      	adds	r3, r7, #6
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	f7fc fce4 	bl	80017fc <HAL_DMA_Start_IT>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d009      	beq.n	8004e4c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2284      	movs	r2, #132	@ 0x84
 8004e3c:	2110      	movs	r1, #16
 8004e3e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2280      	movs	r2, #128	@ 0x80
 8004e44:	2120      	movs	r1, #32
 8004e46:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e050      	b.n	8004eee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d019      	beq.n	8004e88 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e5e:	2301      	movs	r3, #1
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	f383 8810 	msr	PRIMASK, r3
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2180      	movs	r1, #128	@ 0x80
 8004e76:	0049      	lsls	r1, r1, #1
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	f383 8810 	msr	PRIMASK, r3
}
 8004e86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e92:	2301      	movs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eba:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebe:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ec0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2140      	movs	r1, #64	@ 0x40
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b010      	add	sp, #64	@ 0x40
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	080050cd 	.word	0x080050cd
 8004efc:	08005235 	.word	0x08005235
 8004f00:	080052b3 	.word	0x080052b3

08004f04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f12:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	2301      	movs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	21c0      	movs	r1, #192	@ 0xc0
 8004f2e:	438a      	bics	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f44:	46c0      	nop			@ (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b006      	add	sp, #24
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08e      	sub	sp, #56	@ 0x38
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f54:	f3ef 8310 	mrs	r3, PRIMASK
 8004f58:	617b      	str	r3, [r7, #20]
  return(result);
 8004f5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f383 8810 	msr	PRIMASK, r3
}
 8004f68:	46c0      	nop			@ (mov r8, r8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4926      	ldr	r1, [pc, #152]	@ (8005010 <UART_EndRxTransfer+0xc4>)
 8004f76:	400a      	ands	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f383 8810 	msr	PRIMASK, r3
}
 8004f84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f86:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f90:	2301      	movs	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	f383 8810 	msr	PRIMASK, r3
}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	438a      	bics	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	f383 8810 	msr	PRIMASK, r3
}
 8004fb6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d118      	bne.n	8004ff2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fca:	2301      	movs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f383 8810 	msr	PRIMASK, r3
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	438a      	bics	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2280      	movs	r2, #128	@ 0x80
 8004ff6:	2120      	movs	r1, #32
 8004ff8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	b00e      	add	sp, #56	@ 0x38
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	fffffedf 	.word	0xfffffedf

08005014 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	@ 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2220      	movs	r2, #32
 800502a:	4013      	ands	r3, r2
 800502c:	d135      	bne.n	800509a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	2252      	movs	r2, #82	@ 0x52
 8005032:	2100      	movs	r1, #0
 8005034:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	60fb      	str	r3, [r7, #12]
  return(result);
 800503c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800503e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2180      	movs	r1, #128	@ 0x80
 8005058:	438a      	bics	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	61bb      	str	r3, [r7, #24]
  return(result);
 800506e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
 8005072:	2301      	movs	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2140      	movs	r1, #64	@ 0x40
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	e004      	b.n	80050a4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff f9e9 	bl	8004474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b00c      	add	sp, #48	@ 0x30
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff f9e1 	bl	8004484 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b004      	add	sp, #16
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b094      	sub	sp, #80	@ 0x50
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2220      	movs	r2, #32
 80050e2:	4013      	ands	r3, r2
 80050e4:	d16f      	bne.n	80051c6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80050e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e8:	225a      	movs	r2, #90	@ 0x5a
 80050ea:	2100      	movs	r1, #0
 80050ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ee:	f3ef 8310 	mrs	r3, PRIMASK
 80050f2:	617b      	str	r3, [r7, #20]
  return(result);
 80050f4:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f8:	2301      	movs	r3, #1
 80050fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f383 8810 	msr	PRIMASK, r3
}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4948      	ldr	r1, [pc, #288]	@ (8005230 <UART_DMAReceiveCplt+0x164>)
 8005110:	400a      	ands	r2, r1
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005120:	f3ef 8310 	mrs	r3, PRIMASK
 8005124:	623b      	str	r3, [r7, #32]
  return(result);
 8005126:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	647b      	str	r3, [r7, #68]	@ 0x44
 800512a:	2301      	movs	r3, #1
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2101      	movs	r1, #1
 8005142:	438a      	bics	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005152:	f3ef 8310 	mrs	r3, PRIMASK
 8005156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	643b      	str	r3, [r7, #64]	@ 0x40
 800515c:	2301      	movs	r3, #1
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2140      	movs	r1, #64	@ 0x40
 8005174:	438a      	bics	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517e:	f383 8810 	msr	PRIMASK, r3
}
 8005182:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005186:	2280      	movs	r2, #128	@ 0x80
 8005188:	2120      	movs	r1, #32
 800518a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	2b01      	cmp	r3, #1
 8005192:	d118      	bne.n	80051c6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005194:	f3ef 8310 	mrs	r3, PRIMASK
 8005198:	60bb      	str	r3, [r7, #8]
  return(result);
 800519a:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800519e:	2301      	movs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f383 8810 	msr	PRIMASK, r3
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2110      	movs	r1, #16
 80051b6:	438a      	bics	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c8:	2200      	movs	r2, #0
 80051ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d124      	bne.n	800521e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 80051d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d6:	225a      	movs	r2, #90	@ 0x5a
 80051d8:	2100      	movs	r1, #0
 80051da:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	213a      	movs	r1, #58	@ 0x3a
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 80051e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ea:	2258      	movs	r2, #88	@ 0x58
 80051ec:	5a9b      	ldrh	r3, [r3, r2]
 80051ee:	187a      	adds	r2, r7, r1
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d204      	bcs.n	8005200 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80051f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f8:	187a      	adds	r2, r7, r1
 80051fa:	215a      	movs	r1, #90	@ 0x5a
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005202:	2258      	movs	r2, #88	@ 0x58
 8005204:	5a9a      	ldrh	r2, [r3, r2]
 8005206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005208:	215a      	movs	r1, #90	@ 0x5a
 800520a:	5a5b      	ldrh	r3, [r3, r1]
 800520c:	b29b      	uxth	r3, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	b29a      	uxth	r2, r3
 8005212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7fb fd3a 	bl	8000c90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800521c:	e003      	b.n	8005226 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 800521e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff f937 	bl	8004494 <HAL_UART_RxCpltCallback>
}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b014      	add	sp, #80	@ 0x50
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	fffffeff 	.word	0xfffffeff

08005234 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	d128      	bne.n	80052a2 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2258      	movs	r2, #88	@ 0x58
 8005254:	5a9b      	ldrh	r3, [r3, r2]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	b299      	uxth	r1, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	225a      	movs	r2, #90	@ 0x5a
 800525e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	210a      	movs	r1, #10
 8005268:	187b      	adds	r3, r7, r1
 800526a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2258      	movs	r2, #88	@ 0x58
 8005270:	5a9b      	ldrh	r3, [r3, r2]
 8005272:	187a      	adds	r2, r7, r1
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d804      	bhi.n	8005284 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	187a      	adds	r2, r7, r1
 800527e:	215a      	movs	r1, #90	@ 0x5a
 8005280:	8812      	ldrh	r2, [r2, #0]
 8005282:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2258      	movs	r2, #88	@ 0x58
 8005288:	5a9a      	ldrh	r2, [r3, r2]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	215a      	movs	r1, #90	@ 0x5a
 800528e:	5a5b      	ldrh	r3, [r3, r1]
 8005290:	b29b      	uxth	r3, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0011      	movs	r1, r2
 800529a:	0018      	movs	r0, r3
 800529c:	f7fb fcf8 	bl	8000c90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052a0:	e003      	b.n	80052aa <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7ff f8fd 	bl	80044a4 <HAL_UART_RxHalfCpltCallback>
}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2280      	movs	r2, #128	@ 0x80
 80052ca:	589b      	ldr	r3, [r3, r2]
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2280      	movs	r2, #128	@ 0x80
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b80      	cmp	r3, #128	@ 0x80
 80052da:	d10a      	bne.n	80052f2 <UART_DMAError+0x40>
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b21      	cmp	r3, #33	@ 0x21
 80052e0:	d107      	bne.n	80052f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2252      	movs	r2, #82	@ 0x52
 80052e6:	2100      	movs	r1, #0
 80052e8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7ff fe09 	bl	8004f04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2240      	movs	r2, #64	@ 0x40
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	d10a      	bne.n	8005316 <UART_DMAError+0x64>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b22      	cmp	r3, #34	@ 0x22
 8005304:	d107      	bne.n	8005316 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	225a      	movs	r2, #90	@ 0x5a
 800530a:	2100      	movs	r1, #0
 800530c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	0018      	movs	r0, r3
 8005312:	f7ff fe1b 	bl	8004f4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2284      	movs	r2, #132	@ 0x84
 800531a:	589b      	ldr	r3, [r3, r2]
 800531c:	2210      	movs	r2, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2184      	movs	r1, #132	@ 0x84
 8005324:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	0018      	movs	r0, r3
 800532a:	f7fb fccd 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b006      	add	sp, #24
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	225a      	movs	r2, #90	@ 0x5a
 8005348:	2100      	movs	r1, #0
 800534a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	0018      	movs	r0, r3
 8005350:	f7fb fcba 	bl	8000cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005354:	46c0      	nop			@ (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b004      	add	sp, #16
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005364:	f3ef 8310 	mrs	r3, PRIMASK
 8005368:	60bb      	str	r3, [r7, #8]
  return(result);
 800536a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	2301      	movs	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2140      	movs	r1, #64	@ 0x40
 8005386:	438a      	bics	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7ff f865 	bl	8004474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b006      	add	sp, #24
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b002      	add	sp, #8
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2278      	movs	r2, #120	@ 0x78
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UARTEx_DisableStopMode+0x16>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e021      	b.n	800541c <HAL_UARTEx_DisableStopMode+0x5a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2278      	movs	r2, #120	@ 0x78
 80053dc:	2101      	movs	r1, #1
 80053de:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e0:	f3ef 8310 	mrs	r3, PRIMASK
 80053e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]

  /* Clear UESM bit */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	2301      	movs	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f383 8810 	msr	PRIMASK, r3
}
 80053f4:	46c0      	nop			@ (mov r8, r8)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2102      	movs	r1, #2
 8005402:	438a      	bics	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			@ (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2278      	movs	r2, #120	@ 0x78
 8005416:	2100      	movs	r1, #0
 8005418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b006      	add	sp, #24
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005424:	b5b0      	push	{r4, r5, r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	1dbb      	adds	r3, r7, #6
 8005430:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2280      	movs	r2, #128	@ 0x80
 8005436:	589b      	ldr	r3, [r3, r2]
 8005438:	2b20      	cmp	r3, #32
 800543a:	d156      	bne.n	80054ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005442:	1dbb      	adds	r3, r7, #6
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e04e      	b.n	80054ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	015b      	lsls	r3, r3, #5
 8005456:	429a      	cmp	r2, r3
 8005458:	d109      	bne.n	800546e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d001      	beq.n	800546e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e03e      	b.n	80054ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800547a:	2527      	movs	r5, #39	@ 0x27
 800547c:	197c      	adds	r4, r7, r5
 800547e:	1dbb      	adds	r3, r7, #6
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0018      	movs	r0, r3
 8005488:	f7ff fc9c 	bl	8004dc4 <UART_Start_Receive_DMA>
 800548c:	0003      	movs	r3, r0
 800548e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005490:	197b      	adds	r3, r7, r5
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d124      	bne.n	80054e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11c      	bne.n	80054da <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2210      	movs	r2, #16
 80054a6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	617b      	str	r3, [r7, #20]
  return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			@ (mov r8, r8)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2110      	movs	r1, #16
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	e003      	b.n	80054e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054da:	2327      	movs	r3, #39	@ 0x27
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80054e2:	2327      	movs	r3, #39	@ 0x27
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	e000      	b.n	80054ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
  }
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b00a      	add	sp, #40	@ 0x28
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}

080054f4 <ATC_Malloc>:
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fc00 	bl	8005d08 <malloc>
 8005508:	0003      	movs	r3, r0
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b004      	add	sp, #16
 8005514:	bd80      	pop	{r7, pc}

08005516 <ATC_Free>:
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <ATC_Free+0x26>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d007      	beq.n	800553c <ATC_Free+0x26>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0018      	movs	r0, r3
 8005532:	f000 fbf3 	bl	8005d1c <free>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <ATC_RxFlush>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	831a      	strh	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8a9b      	ldrh	r3, [r3, #20]
 800555a:	001a      	movs	r2, r3
 800555c:	2100      	movs	r1, #0
 800555e:	f000 fccf 	bl	8005f00 <memset>
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	46bd      	mov	sp, r7
 8005566:	b002      	add	sp, #8
 8005568:	bd80      	pop	{r7, pc}

0800556a <ATC_TxRaw>:
 800556a:	b590      	push	{r4, r7, lr}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	2417      	movs	r4, #23
 800557a:	193b      	adds	r3, r7, r4
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1dba      	adds	r2, r7, #6
 8005584:	8812      	ldrh	r2, [r2, #0]
 8005586:	835a      	strh	r2, [r3, #26]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	1dbb      	adds	r3, r7, #6
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	0019      	movs	r1, r3
 8005594:	f7fe faca 	bl	8003b2c <HAL_UART_Transmit_DMA>
 8005598:	1e03      	subs	r3, r0, #0
 800559a:	d103      	bne.n	80055a4 <ATC_TxRaw+0x3a>
 800559c:	193b      	adds	r3, r7, r4
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <ATC_TxRaw+0x3c>
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	2317      	movs	r3, #23
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b007      	add	sp, #28
 80055b2:	bd90      	pop	{r4, r7, pc}

080055b4 <ATC_TxBusy>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7fe ff77 	bl	80044b4 <HAL_UART_GetState>
 80055c6:	0003      	movs	r3, r0
 80055c8:	2b21      	cmp	r3, #33	@ 0x21
 80055ca:	d007      	beq.n	80055dc <ATC_TxBusy+0x28>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7fe ff6f 	bl	80044b4 <HAL_UART_GetState>
 80055d6:	0003      	movs	r3, r0
 80055d8:	2b23      	cmp	r3, #35	@ 0x23
 80055da:	d101      	bne.n	80055e0 <ATC_TxBusy+0x2c>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <ATC_TxBusy+0x2e>
 80055e0:	2300      	movs	r3, #0
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}

080055ea <ATC_TxWait>:
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
 80055f4:	230f      	movs	r3, #15
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	f7fb feea 	bl	80013d4 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	2001      	movs	r0, #1
 8005606:	f000 fb73 	bl	8005cf0 <ATC_Delay>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	0018      	movs	r0, r3
 8005610:	f7fe ff50 	bl	80044b4 <HAL_UART_GetState>
 8005614:	0003      	movs	r3, r0
 8005616:	2b22      	cmp	r3, #34	@ 0x22
 8005618:	d007      	beq.n	800562a <ATC_TxWait+0x40>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0018      	movs	r0, r3
 8005620:	f7fe ff48 	bl	80044b4 <HAL_UART_GetState>
 8005624:	0003      	movs	r3, r0
 8005626:	2b20      	cmp	r3, #32
 8005628:	d104      	bne.n	8005634 <ATC_TxWait+0x4a>
 800562a:	230f      	movs	r3, #15
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e01c      	b.n	800566e <ATC_TxWait+0x84>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0018      	movs	r0, r3
 800563a:	f7fe ff3b 	bl	80044b4 <HAL_UART_GetState>
 800563e:	0003      	movs	r3, r0
 8005640:	2be0      	cmp	r3, #224	@ 0xe0
 8005642:	d014      	beq.n	800566e <ATC_TxWait+0x84>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0018      	movs	r0, r3
 800564a:	f7fe ff33 	bl	80044b4 <HAL_UART_GetState>
 800564e:	0003      	movs	r3, r0
 8005650:	2ba0      	cmp	r3, #160	@ 0xa0
 8005652:	d00c      	beq.n	800566e <ATC_TxWait+0x84>
 8005654:	f7fb febe 	bl	80013d4 <HAL_GetTick>
 8005658:	0002      	movs	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d8cf      	bhi.n	8005604 <ATC_TxWait+0x1a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0018      	movs	r0, r3
 800566a:	f7fe faef 	bl	8003c4c <HAL_UART_AbortTransmit>
 800566e:	230f      	movs	r3, #15
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b004      	add	sp, #16
 800567a:	bd80      	pop	{r7, pc}

0800567c <ATC_CheckEvents>:
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8b1b      	ldrh	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d027      	beq.n	80056dc <ATC_CheckEvents+0x60>
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e01b      	b.n	80056ca <ATC_CheckEvents+0x4e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	18d3      	adds	r3, r2, r3
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	0019      	movs	r1, r3
 80056a4:	f000 fc48 	bl	8005f38 <strstr>
 80056a8:	0003      	movs	r3, r0
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <ATC_CheckEvents+0x48>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	18d3      	adds	r3, r2, r3
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	0010      	movs	r0, r2
 80056c2:	4798      	blx	r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3de      	bcc.n	8005692 <ATC_CheckEvents+0x16>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7ff ff34 	bl	8005544 <ATC_RxFlush>
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b004      	add	sp, #16
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <ATC_CheckResponse>:
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	230f      	movs	r3, #15
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8b1b      	ldrh	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d031      	beq.n	8005762 <ATC_CheckResponse+0x7e>
 80056fe:	230c      	movs	r3, #12
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2200      	movs	r2, #0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	e025      	b.n	8005754 <ATC_CheckResponse+0x70>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800570c:	230c      	movs	r3, #12
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	320a      	adds	r2, #10
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	58d3      	ldr	r3, [r2, r3]
 800571a:	0019      	movs	r1, r3
 800571c:	f000 fc0c 	bl	8005f38 <strstr>
 8005720:	0003      	movs	r3, r0
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00e      	beq.n	8005748 <ATC_CheckResponse+0x64>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <ATC_CheckResponse+0x52>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	230c      	movs	r3, #12
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	230f      	movs	r3, #15
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	3201      	adds	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e00c      	b.n	8005762 <ATC_CheckResponse+0x7e>
 8005748:	210c      	movs	r1, #12
 800574a:	187b      	adds	r3, r7, r1
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	187b      	adds	r3, r7, r1
 8005750:	3201      	adds	r2, #1
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8adb      	ldrh	r3, [r3, #22]
 8005758:	220c      	movs	r2, #12
 800575a:	18ba      	adds	r2, r7, r2
 800575c:	8812      	ldrh	r2, [r2, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d3d2      	bcc.n	8005708 <ATC_CheckResponse+0x24>
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}

08005770 <ATC_CheckErrors>:
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0018      	movs	r0, r3
 800577e:	f7fe feab 	bl	80044d8 <HAL_UART_GetError>
 8005782:	1e03      	subs	r3, r0, #0
 8005784:	d01f      	beq.n	80057c6 <ATC_CheckErrors+0x56>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	4252      	negs	r2, r2
 8005790:	621a      	str	r2, [r3, #32]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	0018      	movs	r0, r3
 8005798:	f7fe fabe 	bl	8003d18 <HAL_UART_AbortReceive>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8a9b      	ldrh	r3, [r3, #20]
 80057a8:	001a      	movs	r2, r3
 80057aa:	f7ff fe3b 	bl	8005424 <HAL_UARTEx_ReceiveToIdle_DMA>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2104      	movs	r1, #4
 80057c2:	438a      	bics	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7fe fe72 	bl	80044b4 <HAL_UART_GetState>
 80057d0:	0003      	movs	r3, r0
 80057d2:	2b22      	cmp	r3, #34	@ 0x22
 80057d4:	d027      	beq.n	8005826 <ATC_CheckErrors+0xb6>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fe fe6a 	bl	80044b4 <HAL_UART_GetState>
 80057e0:	0003      	movs	r3, r0
 80057e2:	2b23      	cmp	r3, #35	@ 0x23
 80057e4:	d01f      	beq.n	8005826 <ATC_CheckErrors+0xb6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	4252      	negs	r2, r2
 80057f0:	621a      	str	r2, [r3, #32]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7fe fa8e 	bl	8003d18 <HAL_UART_AbortReceive>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8a9b      	ldrh	r3, [r3, #20]
 8005808:	001a      	movs	r2, r3
 800580a:	f7ff fe0b 	bl	8005424 <HAL_UARTEx_ReceiveToIdle_DMA>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2104      	movs	r1, #4
 8005822:	438a      	bics	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b002      	add	sp, #8
 800582c:	bd80      	pop	{r7, pc}

0800582e <ATC_Init>:
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	2317      	movs	r3, #23
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d100      	bne.n	800584e <ATC_Init+0x20>
 800584c:	e07f      	b.n	800594e <ATC_Init+0x120>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d100      	bne.n	8005856 <ATC_Init+0x28>
 8005854:	e07b      	b.n	800594e <ATC_Init+0x120>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	223c      	movs	r2, #60	@ 0x3c
 800585a:	2100      	movs	r1, #0
 800585c:	0018      	movs	r0, r3
 800585e:	f000 fb4f 	bl	8005f00 <memset>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <ATC_Init+0x48>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3304      	adds	r3, #4
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	2207      	movs	r2, #7
 8005870:	0018      	movs	r0, r3
 8005872:	f000 fb4d 	bl	8005f10 <strncpy>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff fe37 	bl	80054f4 <ATC_Malloc>
 8005886:	0002      	movs	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	61da      	str	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d055      	beq.n	8005940 <ATC_Init+0x112>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	69d8      	ldr	r0, [r3, #28]
 8005898:	1dbb      	adds	r3, r7, #6
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	001a      	movs	r2, r3
 800589e:	2100      	movs	r1, #0
 80058a0:	f000 fb2e 	bl	8005f00 <memset>
 80058a4:	1dbb      	adds	r3, r7, #6
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff fe23 	bl	80054f4 <ATC_Malloc>
 80058ae:	0002      	movs	r2, r0
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d043      	beq.n	8005944 <ATC_Init+0x116>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a18      	ldr	r0, [r3, #32]
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	001a      	movs	r2, r3
 80058c6:	2100      	movs	r1, #0
 80058c8:	f000 fb1a 	bl	8005f00 <memset>
 80058cc:	1dbb      	adds	r3, r7, #6
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff fe0f 	bl	80054f4 <ATC_Malloc>
 80058d6:	0002      	movs	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	625a      	str	r2, [r3, #36]	@ 0x24
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d031      	beq.n	8005948 <ATC_Init+0x11a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80058e8:	1dbb      	adds	r3, r7, #6
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	001a      	movs	r2, r3
 80058ee:	2100      	movs	r1, #0
 80058f0:	f000 fb06 	bl	8005f00 <memset>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1dba      	adds	r2, r7, #6
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	829a      	strh	r2, [r3, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	4252      	negs	r2, r2
 8005906:	621a      	str	r2, [r3, #32]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8a9b      	ldrh	r3, [r3, #20]
 8005914:	001a      	movs	r2, r3
 8005916:	f7ff fd85 	bl	8005424 <HAL_UARTEx_ReceiveToIdle_DMA>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d116      	bne.n	800594c <ATC_Init+0x11e>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2104      	movs	r1, #4
 8005932:	438a      	bics	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	2317      	movs	r3, #23
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e006      	b.n	800594e <ATC_Init+0x120>
 8005940:	46c0      	nop			@ (mov r8, r8)
 8005942:	e004      	b.n	800594e <ATC_Init+0x120>
 8005944:	46c0      	nop			@ (mov r8, r8)
 8005946:	e002      	b.n	800594e <ATC_Init+0x120>
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	e000      	b.n	800594e <ATC_Init+0x120>
 800594c:	46c0      	nop			@ (mov r8, r8)
 800594e:	2317      	movs	r3, #23
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	4053      	eors	r3, r2
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <ATC_Init+0x160>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <ATC_Init+0x142>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	331c      	adds	r3, #28
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff fdd3 	bl	8005516 <ATC_Free>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <ATC_Init+0x154>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3324      	adds	r3, #36	@ 0x24
 800597c:	0018      	movs	r0, r3
 800597e:	f7ff fdca 	bl	8005516 <ATC_Free>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	223c      	movs	r2, #60	@ 0x3c
 8005986:	2100      	movs	r1, #0
 8005988:	0018      	movs	r0, r3
 800598a:	f000 fab9 	bl	8005f00 <memset>
 800598e:	2317      	movs	r3, #23
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b006      	add	sp, #24
 800599a:	bd80      	pop	{r7, pc}

0800599c <ATC_SetEvents>:
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	230f      	movs	r3, #15
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01f      	beq.n	80059f8 <ATC_SetEvents+0x5c>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01e      	beq.n	80059fc <ATC_SetEvents+0x60>
 80059be:	e002      	b.n	80059c6 <ATC_SetEvents+0x2a>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	18d3      	adds	r3, r2, r3
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <ATC_SetEvents+0x46>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	18d3      	adds	r3, r2, r3
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ee      	bne.n	80059c0 <ATC_SetEvents+0x24>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e002      	b.n	80059fe <ATC_SetEvents+0x62>
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	e000      	b.n	80059fe <ATC_SetEvents+0x62>
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	230f      	movs	r3, #15
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b004      	add	sp, #16
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <ATC_Loop>:
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7ff feaa 	bl	8005770 <ATC_CheckErrors>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7ff fe2c 	bl	800567c <ATC_CheckEvents>
 8005a24:	46c0      	nop			@ (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <ATC_SendReceive>:
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b08c      	sub	sp, #48	@ 0x30
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7ff fdb7 	bl	80055b4 <ATC_TxBusy>
 8005a46:	1e03      	subs	r3, r0, #0
 8005a48:	d002      	beq.n	8005a50 <ATC_SendReceive+0x24>
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	425b      	negs	r3, r3
 8005a4e:	e0e3      	b.n	8005c18 <ATC_SendReceive+0x1ec>
 8005a50:	2344      	movs	r3, #68	@ 0x44
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d902      	bls.n	8005a60 <ATC_SendReceive+0x34>
 8005a5a:	2305      	movs	r3, #5
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	e0db      	b.n	8005c18 <ATC_SendReceive+0x1ec>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff fe84 	bl	8005770 <ATC_CheckErrors>
 8005a68:	2348      	movs	r3, #72	@ 0x48
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a72:	e051      	b.n	8005b18 <ATC_SendReceive+0xec>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	617a      	str	r2, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fa fb41 	bl	8000108 <strlen>
 8005a86:	0003      	movs	r3, r0
 8005a88:	3301      	adds	r3, #1
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7ff fd32 	bl	80054f4 <ATC_Malloc>
 8005a90:	0001      	movs	r1, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a96:	320a      	adds	r2, #10
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	50d1      	str	r1, [r2, r3]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aa0:	320a      	adds	r2, #10
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11c      	bne.n	8005ae4 <ATC_SendReceive+0xb8>
 8005aaa:	2327      	movs	r3, #39	@ 0x27
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e00e      	b.n	8005ad2 <ATC_SendReceive+0xa6>
 8005ab4:	2427      	movs	r4, #39	@ 0x27
 8005ab6:	193b      	adds	r3, r7, r4
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	330a      	adds	r3, #10
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	18d3      	adds	r3, r2, r3
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff fd27 	bl	8005516 <ATC_Free>
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	193b      	adds	r3, r7, r4
 8005ace:	3201      	adds	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	2327      	movs	r3, #39	@ 0x27
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ada:	429a      	cmp	r2, r3
 8005adc:	dcea      	bgt.n	8005ab4 <ATC_SendReceive+0x88>
 8005ade:	2303      	movs	r3, #3
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	e099      	b.n	8005c18 <ATC_SendReceive+0x1ec>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ae8:	320a      	adds	r2, #10
 8005aea:	0092      	lsls	r2, r2, #2
 8005aec:	58d3      	ldr	r3, [r2, r3]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 fa74 	bl	8005fe0 <strcpy>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005afc:	320a      	adds	r2, #10
 8005afe:	0092      	lsls	r2, r2, #2
 8005b00:	58d4      	ldr	r4, [r2, r3]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fa faff 	bl	8000108 <strlen>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	18e3      	adds	r3, r4, r3
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	3301      	adds	r3, #1
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b18:	2344      	movs	r3, #68	@ 0x44
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b20:	429a      	cmp	r2, r3
 8005b22:	dba7      	blt.n	8005a74 <ATC_SendReceive+0x48>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7ff fd0c 	bl	8005544 <ATC_RxFlush>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7fa faea 	bl	8000108 <strlen>
 8005b34:	0003      	movs	r3, r0
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7ff fd14 	bl	800556a <ATC_TxRaw>
 8005b42:	0003      	movs	r3, r0
 8005b44:	001a      	movs	r2, r3
 8005b46:	2301      	movs	r3, #1
 8005b48:	4053      	eors	r3, r2
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <ATC_SendReceive+0x12c>
 8005b50:	2301      	movs	r3, #1
 8005b52:	425b      	negs	r3, r3
 8005b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b56:	e010      	b.n	8005b7a <ATC_SendReceive+0x14e>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7ff fd43 	bl	80055ea <ATC_TxWait>
 8005b64:	0003      	movs	r3, r0
 8005b66:	001a      	movs	r2, r3
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4053      	eors	r3, r2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <ATC_SendReceive+0x14e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	425b      	negs	r3, r3
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	2444      	movs	r4, #68	@ 0x44
 8005b7c:	193b      	adds	r3, r7, r4
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d029      	beq.n	8005bd8 <ATC_SendReceive+0x1ac>
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d126      	bne.n	8005bd8 <ATC_SendReceive+0x1ac>
 8005b8a:	f7fb fc23 	bl	80013d4 <HAL_GetTick>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	193b      	adds	r3, r7, r4
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	82da      	strh	r2, [r3, #22]
 8005b9c:	e014      	b.n	8005bc8 <ATC_SendReceive+0x19c>
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	f000 f8a6 	bl	8005cf0 <ATC_Delay>
 8005ba4:	251f      	movs	r5, #31
 8005ba6:	197c      	adds	r4, r7, r5
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	0011      	movs	r1, r2
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f7ff fd98 	bl	80056e4 <ATC_CheckResponse>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	7023      	strb	r3, [r4, #0]
 8005bb8:	197b      	adds	r3, r7, r5
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <ATC_SendReceive+0x19c>
 8005bc0:	197b      	adds	r3, r7, r5
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc6:	e007      	b.n	8005bd8 <ATC_SendReceive+0x1ac>
 8005bc8:	f7fb fc04 	bl	80013d4 <HAL_GetTick>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d8e2      	bhi.n	8005b9e <ATC_SendReceive+0x172>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	82da      	strh	r2, [r3, #22]
 8005bde:	2326      	movs	r3, #38	@ 0x26
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e00e      	b.n	8005c06 <ATC_SendReceive+0x1da>
 8005be8:	2426      	movs	r4, #38	@ 0x26
 8005bea:	193b      	adds	r3, r7, r4
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	330a      	adds	r3, #10
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7ff fc8d 	bl	8005516 <ATC_Free>
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	193b      	adds	r3, r7, r4
 8005c02:	3201      	adds	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	2326      	movs	r3, #38	@ 0x26
 8005c08:	18fa      	adds	r2, r7, r3
 8005c0a:	2344      	movs	r3, #68	@ 0x44
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3e8      	bcc.n	8005be8 <ATC_SendReceive+0x1bc>
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b00c      	add	sp, #48	@ 0x30
 8005c1e:	bdb0      	pop	{r4, r5, r7, pc}

08005c20 <ATC_IdleLineCallback>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	000a      	movs	r2, r1
 8005c2a:	1cbb      	adds	r3, r7, #2
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	1cbb      	adds	r3, r7, #2
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8a9b      	ldrh	r3, [r3, #20]
 8005c36:	0019      	movs	r1, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8b1b      	ldrh	r3, [r3, #24]
 8005c3c:	1acb      	subs	r3, r1, r3
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	dd06      	ble.n	8005c50 <ATC_IdleLineCallback+0x30>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8a99      	ldrh	r1, [r3, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8b1a      	ldrh	r2, [r3, #24]
 8005c4a:	1cbb      	adds	r3, r7, #2
 8005c4c:	1a8a      	subs	r2, r1, r2
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	8b12      	ldrh	r2, [r2, #24]
 8005c58:	1898      	adds	r0, r3, r2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69d9      	ldr	r1, [r3, #28]
 8005c5e:	1cbb      	adds	r3, r7, #2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	001a      	movs	r2, r3
 8005c64:	f000 f9c4 	bl	8005ff0 <memcpy>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8b1a      	ldrh	r2, [r3, #24]
 8005c6c:	1cbb      	adds	r3, r7, #2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	18d3      	adds	r3, r2, r3
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	831a      	strh	r2, [r3, #24]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8a9b      	ldrh	r3, [r3, #20]
 8005c84:	001a      	movs	r2, r3
 8005c86:	f7ff fbcd 	bl	8005424 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005c8a:	1e03      	subs	r3, r0, #0
 8005c8c:	d10c      	bne.n	8005ca8 <ATC_IdleLineCallback+0x88>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e01f      	b.n	8005ce8 <ATC_IdleLineCallback+0xc8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4252      	negs	r2, r2
 8005cb2:	621a      	str	r2, [r3, #32]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7fe f82d 	bl	8003d18 <HAL_UART_AbortReceive>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69d9      	ldr	r1, [r3, #28]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8a9b      	ldrh	r3, [r3, #20]
 8005cca:	001a      	movs	r2, r3
 8005ccc:	f7ff fbaa 	bl	8005424 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <ATC_Delay>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7fb fb74 	bl	80013e8 <HAL_Delay>
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <malloc>:
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	4b03      	ldr	r3, [pc, #12]	@ (8005d18 <malloc+0x10>)
 8005d0c:	0001      	movs	r1, r0
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	f000 f830 	bl	8005d74 <_malloc_r>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	20000010 	.word	0x20000010

08005d1c <free>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <free+0x10>)
 8005d20:	0001      	movs	r1, r0
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	f000 f96e 	bl	8006004 <_free_r>
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	20000010 	.word	0x20000010

08005d30 <sbrk_aligned>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4e0f      	ldr	r6, [pc, #60]	@ (8005d70 <sbrk_aligned+0x40>)
 8005d34:	000d      	movs	r5, r1
 8005d36:	6831      	ldr	r1, [r6, #0]
 8005d38:	0004      	movs	r4, r0
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d102      	bne.n	8005d44 <sbrk_aligned+0x14>
 8005d3e:	f000 f911 	bl	8005f64 <_sbrk_r>
 8005d42:	6030      	str	r0, [r6, #0]
 8005d44:	0029      	movs	r1, r5
 8005d46:	0020      	movs	r0, r4
 8005d48:	f000 f90c 	bl	8005f64 <_sbrk_r>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d103      	bne.n	8005d58 <sbrk_aligned+0x28>
 8005d50:	2501      	movs	r5, #1
 8005d52:	426d      	negs	r5, r5
 8005d54:	0028      	movs	r0, r5
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	2303      	movs	r3, #3
 8005d5a:	1cc5      	adds	r5, r0, #3
 8005d5c:	439d      	bics	r5, r3
 8005d5e:	42a8      	cmp	r0, r5
 8005d60:	d0f8      	beq.n	8005d54 <sbrk_aligned+0x24>
 8005d62:	1a29      	subs	r1, r5, r0
 8005d64:	0020      	movs	r0, r4
 8005d66:	f000 f8fd 	bl	8005f64 <_sbrk_r>
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d1f2      	bne.n	8005d54 <sbrk_aligned+0x24>
 8005d6e:	e7ef      	b.n	8005d50 <sbrk_aligned+0x20>
 8005d70:	200003a8 	.word	0x200003a8

08005d74 <_malloc_r>:
 8005d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d76:	2203      	movs	r2, #3
 8005d78:	1ccb      	adds	r3, r1, #3
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	0005      	movs	r5, r0
 8005d80:	001f      	movs	r7, r3
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d234      	bcs.n	8005df0 <_malloc_r+0x7c>
 8005d86:	270c      	movs	r7, #12
 8005d88:	42b9      	cmp	r1, r7
 8005d8a:	d833      	bhi.n	8005df4 <_malloc_r+0x80>
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	f000 f871 	bl	8005e74 <__malloc_lock>
 8005d92:	4e37      	ldr	r6, [pc, #220]	@ (8005e70 <_malloc_r+0xfc>)
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	001c      	movs	r4, r3
 8005d98:	2c00      	cmp	r4, #0
 8005d9a:	d12f      	bne.n	8005dfc <_malloc_r+0x88>
 8005d9c:	0039      	movs	r1, r7
 8005d9e:	0028      	movs	r0, r5
 8005da0:	f7ff ffc6 	bl	8005d30 <sbrk_aligned>
 8005da4:	0004      	movs	r4, r0
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d15f      	bne.n	8005e6a <_malloc_r+0xf6>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	9400      	str	r4, [sp, #0]
 8005dae:	9b00      	ldr	r3, [sp, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d14a      	bne.n	8005e4a <_malloc_r+0xd6>
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d052      	beq.n	8005e5e <_malloc_r+0xea>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	0028      	movs	r0, r5
 8005dbc:	18e3      	adds	r3, r4, r3
 8005dbe:	9900      	ldr	r1, [sp, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	f000 f8cf 	bl	8005f64 <_sbrk_r>
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	4283      	cmp	r3, r0
 8005dca:	d148      	bne.n	8005e5e <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	0028      	movs	r0, r5
 8005dd0:	1aff      	subs	r7, r7, r3
 8005dd2:	0039      	movs	r1, r7
 8005dd4:	f7ff ffac 	bl	8005d30 <sbrk_aligned>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d040      	beq.n	8005e5e <_malloc_r+0xea>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	6833      	ldr	r3, [r6, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d133      	bne.n	8005e52 <_malloc_r+0xde>
 8005dea:	9b00      	ldr	r3, [sp, #0]
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	e019      	b.n	8005e24 <_malloc_r+0xb0>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dac9      	bge.n	8005d88 <_malloc_r+0x14>
 8005df4:	230c      	movs	r3, #12
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dfc:	6821      	ldr	r1, [r4, #0]
 8005dfe:	1bc9      	subs	r1, r1, r7
 8005e00:	d420      	bmi.n	8005e44 <_malloc_r+0xd0>
 8005e02:	290b      	cmp	r1, #11
 8005e04:	d90a      	bls.n	8005e1c <_malloc_r+0xa8>
 8005e06:	19e2      	adds	r2, r4, r7
 8005e08:	6027      	str	r7, [r4, #0]
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	d104      	bne.n	8005e18 <_malloc_r+0xa4>
 8005e0e:	6032      	str	r2, [r6, #0]
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	6011      	str	r1, [r2, #0]
 8005e14:	6053      	str	r3, [r2, #4]
 8005e16:	e005      	b.n	8005e24 <_malloc_r+0xb0>
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	e7f9      	b.n	8005e10 <_malloc_r+0x9c>
 8005e1c:	6862      	ldr	r2, [r4, #4]
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	d10e      	bne.n	8005e40 <_malloc_r+0xcc>
 8005e22:	6032      	str	r2, [r6, #0]
 8005e24:	0028      	movs	r0, r5
 8005e26:	f000 f82d 	bl	8005e84 <__malloc_unlock>
 8005e2a:	0020      	movs	r0, r4
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	300b      	adds	r0, #11
 8005e30:	1d23      	adds	r3, r4, #4
 8005e32:	4390      	bics	r0, r2
 8005e34:	1ac2      	subs	r2, r0, r3
 8005e36:	4298      	cmp	r0, r3
 8005e38:	d0df      	beq.n	8005dfa <_malloc_r+0x86>
 8005e3a:	1a1b      	subs	r3, r3, r0
 8005e3c:	50a3      	str	r3, [r4, r2]
 8005e3e:	e7dc      	b.n	8005dfa <_malloc_r+0x86>
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	e7ef      	b.n	8005e24 <_malloc_r+0xb0>
 8005e44:	0023      	movs	r3, r4
 8005e46:	6864      	ldr	r4, [r4, #4]
 8005e48:	e7a6      	b.n	8005d98 <_malloc_r+0x24>
 8005e4a:	9c00      	ldr	r4, [sp, #0]
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	e7ad      	b.n	8005dae <_malloc_r+0x3a>
 8005e52:	001a      	movs	r2, r3
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	d1fb      	bne.n	8005e52 <_malloc_r+0xde>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e7da      	b.n	8005e14 <_malloc_r+0xa0>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	0028      	movs	r0, r5
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f000 f80e 	bl	8005e84 <__malloc_unlock>
 8005e68:	e7c6      	b.n	8005df8 <_malloc_r+0x84>
 8005e6a:	6007      	str	r7, [r0, #0]
 8005e6c:	e7da      	b.n	8005e24 <_malloc_r+0xb0>
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	200003ac 	.word	0x200003ac

08005e74 <__malloc_lock>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4802      	ldr	r0, [pc, #8]	@ (8005e80 <__malloc_lock+0xc>)
 8005e78:	f000 f8b0 	bl	8005fdc <__retarget_lock_acquire_recursive>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	200004ec 	.word	0x200004ec

08005e84 <__malloc_unlock>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4802      	ldr	r0, [pc, #8]	@ (8005e90 <__malloc_unlock+0xc>)
 8005e88:	f000 f8a9 	bl	8005fde <__retarget_lock_release_recursive>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	200004ec 	.word	0x200004ec

08005e94 <sniprintf>:
 8005e94:	b40c      	push	{r2, r3}
 8005e96:	b530      	push	{r4, r5, lr}
 8005e98:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <sniprintf+0x68>)
 8005e9a:	000c      	movs	r4, r1
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	b09d      	sub	sp, #116	@ 0x74
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	da08      	bge.n	8005eb6 <sniprintf+0x22>
 8005ea4:	238b      	movs	r3, #139	@ 0x8b
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	4240      	negs	r0, r0
 8005eac:	b01d      	add	sp, #116	@ 0x74
 8005eae:	bc30      	pop	{r4, r5}
 8005eb0:	bc08      	pop	{r3}
 8005eb2:	b002      	add	sp, #8
 8005eb4:	4718      	bx	r3
 8005eb6:	2382      	movs	r3, #130	@ 0x82
 8005eb8:	466a      	mov	r2, sp
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	8293      	strh	r3, [r2, #20]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9002      	str	r0, [sp, #8]
 8005ec2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005ec4:	9006      	str	r0, [sp, #24]
 8005ec6:	4299      	cmp	r1, r3
 8005ec8:	d000      	beq.n	8005ecc <sniprintf+0x38>
 8005eca:	1e4b      	subs	r3, r1, #1
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	9307      	str	r3, [sp, #28]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	466a      	mov	r2, sp
 8005ed4:	425b      	negs	r3, r3
 8005ed6:	82d3      	strh	r3, [r2, #22]
 8005ed8:	0028      	movs	r0, r5
 8005eda:	ab21      	add	r3, sp, #132	@ 0x84
 8005edc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ede:	a902      	add	r1, sp, #8
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	f000 f939 	bl	8006158 <_svfiprintf_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	da01      	bge.n	8005eee <sniprintf+0x5a>
 8005eea:	238b      	movs	r3, #139	@ 0x8b
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	d0dc      	beq.n	8005eac <sniprintf+0x18>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e7d8      	b.n	8005eac <sniprintf+0x18>
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	20000010 	.word	0x20000010

08005f00 <memset>:
 8005f00:	0003      	movs	r3, r0
 8005f02:	1882      	adds	r2, r0, r2
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	7019      	strb	r1, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <strncpy>:
 8005f10:	0003      	movs	r3, r0
 8005f12:	b530      	push	{r4, r5, lr}
 8005f14:	001d      	movs	r5, r3
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d006      	beq.n	8005f28 <strncpy+0x18>
 8005f1a:	780c      	ldrb	r4, [r1, #0]
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	3301      	adds	r3, #1
 8005f20:	702c      	strb	r4, [r5, #0]
 8005f22:	3101      	adds	r1, #1
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	d1f5      	bne.n	8005f14 <strncpy+0x4>
 8005f28:	2100      	movs	r1, #0
 8005f2a:	189a      	adds	r2, r3, r2
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d100      	bne.n	8005f32 <strncpy+0x22>
 8005f30:	bd30      	pop	{r4, r5, pc}
 8005f32:	7019      	strb	r1, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	e7f9      	b.n	8005f2c <strncpy+0x1c>

08005f38 <strstr>:
 8005f38:	780a      	ldrb	r2, [r1, #0]
 8005f3a:	b530      	push	{r4, r5, lr}
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	d10c      	bne.n	8005f5a <strstr+0x22>
 8005f40:	bd30      	pop	{r4, r5, pc}
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d108      	bne.n	8005f58 <strstr+0x20>
 8005f46:	2301      	movs	r3, #1
 8005f48:	5ccc      	ldrb	r4, [r1, r3]
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d0f8      	beq.n	8005f40 <strstr+0x8>
 8005f4e:	5cc5      	ldrb	r5, [r0, r3]
 8005f50:	42a5      	cmp	r5, r4
 8005f52:	d101      	bne.n	8005f58 <strstr+0x20>
 8005f54:	3301      	adds	r3, #1
 8005f56:	e7f7      	b.n	8005f48 <strstr+0x10>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	7803      	ldrb	r3, [r0, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <strstr+0xa>
 8005f60:	0018      	movs	r0, r3
 8005f62:	e7ed      	b.n	8005f40 <strstr+0x8>

08005f64 <_sbrk_r>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b570      	push	{r4, r5, r6, lr}
 8005f68:	4d06      	ldr	r5, [pc, #24]	@ (8005f84 <_sbrk_r+0x20>)
 8005f6a:	0004      	movs	r4, r0
 8005f6c:	0008      	movs	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fa ff84 	bl	8000e7c <_sbrk>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d103      	bne.n	8005f80 <_sbrk_r+0x1c>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d000      	beq.n	8005f80 <_sbrk_r+0x1c>
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	200004e8 	.word	0x200004e8

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	@ (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	20000010 	.word	0x20000010

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	2600      	movs	r6, #0
 8005f98:	4c0c      	ldr	r4, [pc, #48]	@ (8005fcc <__libc_init_array+0x38>)
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd0 <__libc_init_array+0x3c>)
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	f000 fba7 	bl	80066f8 <_init>
 8005faa:	4c0a      	ldr	r4, [pc, #40]	@ (8005fd4 <__libc_init_array+0x40>)
 8005fac:	4d0a      	ldr	r5, [pc, #40]	@ (8005fd8 <__libc_init_array+0x44>)
 8005fae:	1b64      	subs	r4, r4, r5
 8005fb0:	10a4      	asrs	r4, r4, #2
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	00b3      	lsls	r3, r6, #2
 8005fba:	58eb      	ldr	r3, [r5, r3]
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	00b3      	lsls	r3, r6, #2
 8005fc4:	58eb      	ldr	r3, [r5, r3]
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08006874 	.word	0x08006874
 8005fd0:	08006874 	.word	0x08006874
 8005fd4:	08006878 	.word	0x08006878
 8005fd8:	08006874 	.word	0x08006874

08005fdc <__retarget_lock_acquire_recursive>:
 8005fdc:	4770      	bx	lr

08005fde <__retarget_lock_release_recursive>:
 8005fde:	4770      	bx	lr

08005fe0 <strcpy>:
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	780a      	ldrb	r2, [r1, #0]
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	d1f9      	bne.n	8005fe2 <strcpy+0x2>
 8005fee:	4770      	bx	lr

08005ff0 <memcpy>:
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d100      	bne.n	8005ffa <memcpy+0xa>
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	5ccc      	ldrb	r4, [r1, r3]
 8005ffc:	54c4      	strb	r4, [r0, r3]
 8005ffe:	3301      	adds	r3, #1
 8006000:	e7f8      	b.n	8005ff4 <memcpy+0x4>
	...

08006004 <_free_r>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	0005      	movs	r5, r0
 8006008:	1e0c      	subs	r4, r1, #0
 800600a:	d010      	beq.n	800602e <_free_r+0x2a>
 800600c:	3c04      	subs	r4, #4
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	da00      	bge.n	8006016 <_free_r+0x12>
 8006014:	18e4      	adds	r4, r4, r3
 8006016:	0028      	movs	r0, r5
 8006018:	f7ff ff2c 	bl	8005e74 <__malloc_lock>
 800601c:	4a1d      	ldr	r2, [pc, #116]	@ (8006094 <_free_r+0x90>)
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <_free_r+0x2c>
 8006024:	6063      	str	r3, [r4, #4]
 8006026:	6014      	str	r4, [r2, #0]
 8006028:	0028      	movs	r0, r5
 800602a:	f7ff ff2b 	bl	8005e84 <__malloc_unlock>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	42a3      	cmp	r3, r4
 8006032:	d908      	bls.n	8006046 <_free_r+0x42>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	1821      	adds	r1, r4, r0
 8006038:	428b      	cmp	r3, r1
 800603a:	d1f3      	bne.n	8006024 <_free_r+0x20>
 800603c:	6819      	ldr	r1, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	1809      	adds	r1, r1, r0
 8006042:	6021      	str	r1, [r4, #0]
 8006044:	e7ee      	b.n	8006024 <_free_r+0x20>
 8006046:	001a      	movs	r2, r3
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <_free_r+0x4e>
 800604e:	42a3      	cmp	r3, r4
 8006050:	d9f9      	bls.n	8006046 <_free_r+0x42>
 8006052:	6811      	ldr	r1, [r2, #0]
 8006054:	1850      	adds	r0, r2, r1
 8006056:	42a0      	cmp	r0, r4
 8006058:	d10b      	bne.n	8006072 <_free_r+0x6e>
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	1809      	adds	r1, r1, r0
 800605e:	1850      	adds	r0, r2, r1
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	4283      	cmp	r3, r0
 8006064:	d1e0      	bne.n	8006028 <_free_r+0x24>
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	1841      	adds	r1, r0, r1
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	6053      	str	r3, [r2, #4]
 8006070:	e7da      	b.n	8006028 <_free_r+0x24>
 8006072:	42a0      	cmp	r0, r4
 8006074:	d902      	bls.n	800607c <_free_r+0x78>
 8006076:	230c      	movs	r3, #12
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	e7d5      	b.n	8006028 <_free_r+0x24>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	d103      	bne.n	800608c <_free_r+0x88>
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	1809      	adds	r1, r1, r0
 800608a:	6021      	str	r1, [r4, #0]
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	6054      	str	r4, [r2, #4]
 8006090:	e7ca      	b.n	8006028 <_free_r+0x24>
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	200003ac 	.word	0x200003ac

08006098 <__ssputs_r>:
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	688e      	ldr	r6, [r1, #8]
 800609c:	b085      	sub	sp, #20
 800609e:	001f      	movs	r7, r3
 80060a0:	000c      	movs	r4, r1
 80060a2:	680b      	ldr	r3, [r1, #0]
 80060a4:	9002      	str	r0, [sp, #8]
 80060a6:	9203      	str	r2, [sp, #12]
 80060a8:	42be      	cmp	r6, r7
 80060aa:	d830      	bhi.n	800610e <__ssputs_r+0x76>
 80060ac:	210c      	movs	r1, #12
 80060ae:	5e62      	ldrsh	r2, [r4, r1]
 80060b0:	2190      	movs	r1, #144	@ 0x90
 80060b2:	00c9      	lsls	r1, r1, #3
 80060b4:	420a      	tst	r2, r1
 80060b6:	d028      	beq.n	800610a <__ssputs_r+0x72>
 80060b8:	2003      	movs	r0, #3
 80060ba:	6921      	ldr	r1, [r4, #16]
 80060bc:	1a5b      	subs	r3, r3, r1
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	6963      	ldr	r3, [r4, #20]
 80060c2:	4343      	muls	r3, r0
 80060c4:	9801      	ldr	r0, [sp, #4]
 80060c6:	0fdd      	lsrs	r5, r3, #31
 80060c8:	18ed      	adds	r5, r5, r3
 80060ca:	1c7b      	adds	r3, r7, #1
 80060cc:	181b      	adds	r3, r3, r0
 80060ce:	106d      	asrs	r5, r5, #1
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	d900      	bls.n	80060d6 <__ssputs_r+0x3e>
 80060d4:	001d      	movs	r5, r3
 80060d6:	0552      	lsls	r2, r2, #21
 80060d8:	d528      	bpl.n	800612c <__ssputs_r+0x94>
 80060da:	0029      	movs	r1, r5
 80060dc:	9802      	ldr	r0, [sp, #8]
 80060de:	f7ff fe49 	bl	8005d74 <_malloc_r>
 80060e2:	1e06      	subs	r6, r0, #0
 80060e4:	d02c      	beq.n	8006140 <__ssputs_r+0xa8>
 80060e6:	9a01      	ldr	r2, [sp, #4]
 80060e8:	6921      	ldr	r1, [r4, #16]
 80060ea:	f7ff ff81 	bl	8005ff0 <memcpy>
 80060ee:	89a2      	ldrh	r2, [r4, #12]
 80060f0:	4b18      	ldr	r3, [pc, #96]	@ (8006154 <__ssputs_r+0xbc>)
 80060f2:	401a      	ands	r2, r3
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	4313      	orrs	r3, r2
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	6126      	str	r6, [r4, #16]
 80060fe:	18f6      	adds	r6, r6, r3
 8006100:	6026      	str	r6, [r4, #0]
 8006102:	003e      	movs	r6, r7
 8006104:	6165      	str	r5, [r4, #20]
 8006106:	1aed      	subs	r5, r5, r3
 8006108:	60a5      	str	r5, [r4, #8]
 800610a:	42be      	cmp	r6, r7
 800610c:	d900      	bls.n	8006110 <__ssputs_r+0x78>
 800610e:	003e      	movs	r6, r7
 8006110:	0032      	movs	r2, r6
 8006112:	9903      	ldr	r1, [sp, #12]
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	f000 fa99 	bl	800664c <memmove>
 800611a:	2000      	movs	r0, #0
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	1b9b      	subs	r3, r3, r6
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	199b      	adds	r3, r3, r6
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	b005      	add	sp, #20
 800612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612c:	002a      	movs	r2, r5
 800612e:	9802      	ldr	r0, [sp, #8]
 8006130:	f000 faa9 	bl	8006686 <_realloc_r>
 8006134:	1e06      	subs	r6, r0, #0
 8006136:	d1e0      	bne.n	80060fa <__ssputs_r+0x62>
 8006138:	6921      	ldr	r1, [r4, #16]
 800613a:	9802      	ldr	r0, [sp, #8]
 800613c:	f7ff ff62 	bl	8006004 <_free_r>
 8006140:	230c      	movs	r3, #12
 8006142:	2001      	movs	r0, #1
 8006144:	9a02      	ldr	r2, [sp, #8]
 8006146:	4240      	negs	r0, r0
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	89a2      	ldrh	r2, [r4, #12]
 800614c:	3334      	adds	r3, #52	@ 0x34
 800614e:	4313      	orrs	r3, r2
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	e7e9      	b.n	8006128 <__ssputs_r+0x90>
 8006154:	fffffb7f 	.word	0xfffffb7f

08006158 <_svfiprintf_r>:
 8006158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615a:	b0a1      	sub	sp, #132	@ 0x84
 800615c:	9003      	str	r0, [sp, #12]
 800615e:	001d      	movs	r5, r3
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	000f      	movs	r7, r1
 8006164:	0016      	movs	r6, r2
 8006166:	061b      	lsls	r3, r3, #24
 8006168:	d511      	bpl.n	800618e <_svfiprintf_r+0x36>
 800616a:	690b      	ldr	r3, [r1, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10e      	bne.n	800618e <_svfiprintf_r+0x36>
 8006170:	2140      	movs	r1, #64	@ 0x40
 8006172:	f7ff fdff 	bl	8005d74 <_malloc_r>
 8006176:	6038      	str	r0, [r7, #0]
 8006178:	6138      	str	r0, [r7, #16]
 800617a:	2800      	cmp	r0, #0
 800617c:	d105      	bne.n	800618a <_svfiprintf_r+0x32>
 800617e:	230c      	movs	r3, #12
 8006180:	9a03      	ldr	r2, [sp, #12]
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	2001      	movs	r0, #1
 8006186:	4240      	negs	r0, r0
 8006188:	e0cf      	b.n	800632a <_svfiprintf_r+0x1d2>
 800618a:	2340      	movs	r3, #64	@ 0x40
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	ac08      	add	r4, sp, #32
 8006192:	6163      	str	r3, [r4, #20]
 8006194:	3320      	adds	r3, #32
 8006196:	7663      	strb	r3, [r4, #25]
 8006198:	3310      	adds	r3, #16
 800619a:	76a3      	strb	r3, [r4, #26]
 800619c:	9507      	str	r5, [sp, #28]
 800619e:	0035      	movs	r5, r6
 80061a0:	782b      	ldrb	r3, [r5, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <_svfiprintf_r+0x52>
 80061a6:	2b25      	cmp	r3, #37	@ 0x25
 80061a8:	d148      	bne.n	800623c <_svfiprintf_r+0xe4>
 80061aa:	1bab      	subs	r3, r5, r6
 80061ac:	9305      	str	r3, [sp, #20]
 80061ae:	42b5      	cmp	r5, r6
 80061b0:	d00b      	beq.n	80061ca <_svfiprintf_r+0x72>
 80061b2:	0032      	movs	r2, r6
 80061b4:	0039      	movs	r1, r7
 80061b6:	9803      	ldr	r0, [sp, #12]
 80061b8:	f7ff ff6e 	bl	8006098 <__ssputs_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d100      	bne.n	80061c2 <_svfiprintf_r+0x6a>
 80061c0:	e0ae      	b.n	8006320 <_svfiprintf_r+0x1c8>
 80061c2:	6963      	ldr	r3, [r4, #20]
 80061c4:	9a05      	ldr	r2, [sp, #20]
 80061c6:	189b      	adds	r3, r3, r2
 80061c8:	6163      	str	r3, [r4, #20]
 80061ca:	782b      	ldrb	r3, [r5, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d100      	bne.n	80061d2 <_svfiprintf_r+0x7a>
 80061d0:	e0a6      	b.n	8006320 <_svfiprintf_r+0x1c8>
 80061d2:	2201      	movs	r2, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	4252      	negs	r2, r2
 80061d8:	6062      	str	r2, [r4, #4]
 80061da:	a904      	add	r1, sp, #16
 80061dc:	3254      	adds	r2, #84	@ 0x54
 80061de:	1852      	adds	r2, r2, r1
 80061e0:	1c6e      	adds	r6, r5, #1
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	60e3      	str	r3, [r4, #12]
 80061e6:	60a3      	str	r3, [r4, #8]
 80061e8:	7013      	strb	r3, [r2, #0]
 80061ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80061ec:	4b54      	ldr	r3, [pc, #336]	@ (8006340 <_svfiprintf_r+0x1e8>)
 80061ee:	2205      	movs	r2, #5
 80061f0:	0018      	movs	r0, r3
 80061f2:	7831      	ldrb	r1, [r6, #0]
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	f000 fa3b 	bl	8006670 <memchr>
 80061fa:	1c75      	adds	r5, r6, #1
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d11f      	bne.n	8006240 <_svfiprintf_r+0xe8>
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	06d3      	lsls	r3, r2, #27
 8006204:	d504      	bpl.n	8006210 <_svfiprintf_r+0xb8>
 8006206:	2353      	movs	r3, #83	@ 0x53
 8006208:	a904      	add	r1, sp, #16
 800620a:	185b      	adds	r3, r3, r1
 800620c:	2120      	movs	r1, #32
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	0713      	lsls	r3, r2, #28
 8006212:	d504      	bpl.n	800621e <_svfiprintf_r+0xc6>
 8006214:	2353      	movs	r3, #83	@ 0x53
 8006216:	a904      	add	r1, sp, #16
 8006218:	185b      	adds	r3, r3, r1
 800621a:	212b      	movs	r1, #43	@ 0x2b
 800621c:	7019      	strb	r1, [r3, #0]
 800621e:	7833      	ldrb	r3, [r6, #0]
 8006220:	2b2a      	cmp	r3, #42	@ 0x2a
 8006222:	d016      	beq.n	8006252 <_svfiprintf_r+0xfa>
 8006224:	0035      	movs	r5, r6
 8006226:	2100      	movs	r1, #0
 8006228:	200a      	movs	r0, #10
 800622a:	68e3      	ldr	r3, [r4, #12]
 800622c:	782a      	ldrb	r2, [r5, #0]
 800622e:	1c6e      	adds	r6, r5, #1
 8006230:	3a30      	subs	r2, #48	@ 0x30
 8006232:	2a09      	cmp	r2, #9
 8006234:	d950      	bls.n	80062d8 <_svfiprintf_r+0x180>
 8006236:	2900      	cmp	r1, #0
 8006238:	d111      	bne.n	800625e <_svfiprintf_r+0x106>
 800623a:	e017      	b.n	800626c <_svfiprintf_r+0x114>
 800623c:	3501      	adds	r5, #1
 800623e:	e7af      	b.n	80061a0 <_svfiprintf_r+0x48>
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	1ac0      	subs	r0, r0, r3
 8006246:	2301      	movs	r3, #1
 8006248:	4083      	lsls	r3, r0
 800624a:	4313      	orrs	r3, r2
 800624c:	002e      	movs	r6, r5
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	e7cc      	b.n	80061ec <_svfiprintf_r+0x94>
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9107      	str	r1, [sp, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	db01      	blt.n	8006262 <_svfiprintf_r+0x10a>
 800625e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006260:	e004      	b.n	800626c <_svfiprintf_r+0x114>
 8006262:	425b      	negs	r3, r3
 8006264:	60e3      	str	r3, [r4, #12]
 8006266:	2302      	movs	r3, #2
 8006268:	4313      	orrs	r3, r2
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	782b      	ldrb	r3, [r5, #0]
 800626e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x134>
 8006272:	786b      	ldrb	r3, [r5, #1]
 8006274:	2b2a      	cmp	r3, #42	@ 0x2a
 8006276:	d134      	bne.n	80062e2 <_svfiprintf_r+0x18a>
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	3502      	adds	r5, #2
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	9207      	str	r2, [sp, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	da01      	bge.n	800628a <_svfiprintf_r+0x132>
 8006286:	2301      	movs	r3, #1
 8006288:	425b      	negs	r3, r3
 800628a:	9309      	str	r3, [sp, #36]	@ 0x24
 800628c:	4e2d      	ldr	r6, [pc, #180]	@ (8006344 <_svfiprintf_r+0x1ec>)
 800628e:	2203      	movs	r2, #3
 8006290:	0030      	movs	r0, r6
 8006292:	7829      	ldrb	r1, [r5, #0]
 8006294:	f000 f9ec 	bl	8006670 <memchr>
 8006298:	2800      	cmp	r0, #0
 800629a:	d006      	beq.n	80062aa <_svfiprintf_r+0x152>
 800629c:	2340      	movs	r3, #64	@ 0x40
 800629e:	1b80      	subs	r0, r0, r6
 80062a0:	4083      	lsls	r3, r0
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	3501      	adds	r5, #1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	7829      	ldrb	r1, [r5, #0]
 80062ac:	2206      	movs	r2, #6
 80062ae:	4826      	ldr	r0, [pc, #152]	@ (8006348 <_svfiprintf_r+0x1f0>)
 80062b0:	1c6e      	adds	r6, r5, #1
 80062b2:	7621      	strb	r1, [r4, #24]
 80062b4:	f000 f9dc 	bl	8006670 <memchr>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d038      	beq.n	800632e <_svfiprintf_r+0x1d6>
 80062bc:	4b23      	ldr	r3, [pc, #140]	@ (800634c <_svfiprintf_r+0x1f4>)
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d122      	bne.n	8006308 <_svfiprintf_r+0x1b0>
 80062c2:	2207      	movs	r2, #7
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	3307      	adds	r3, #7
 80062c8:	4393      	bics	r3, r2
 80062ca:	3308      	adds	r3, #8
 80062cc:	9307      	str	r3, [sp, #28]
 80062ce:	6963      	ldr	r3, [r4, #20]
 80062d0:	9a04      	ldr	r2, [sp, #16]
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	6163      	str	r3, [r4, #20]
 80062d6:	e762      	b.n	800619e <_svfiprintf_r+0x46>
 80062d8:	4343      	muls	r3, r0
 80062da:	0035      	movs	r5, r6
 80062dc:	2101      	movs	r1, #1
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	e7a4      	b.n	800622c <_svfiprintf_r+0xd4>
 80062e2:	2300      	movs	r3, #0
 80062e4:	200a      	movs	r0, #10
 80062e6:	0019      	movs	r1, r3
 80062e8:	3501      	adds	r5, #1
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	782a      	ldrb	r2, [r5, #0]
 80062ee:	1c6e      	adds	r6, r5, #1
 80062f0:	3a30      	subs	r2, #48	@ 0x30
 80062f2:	2a09      	cmp	r2, #9
 80062f4:	d903      	bls.n	80062fe <_svfiprintf_r+0x1a6>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0c8      	beq.n	800628c <_svfiprintf_r+0x134>
 80062fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80062fc:	e7c6      	b.n	800628c <_svfiprintf_r+0x134>
 80062fe:	4341      	muls	r1, r0
 8006300:	0035      	movs	r5, r6
 8006302:	2301      	movs	r3, #1
 8006304:	1889      	adds	r1, r1, r2
 8006306:	e7f1      	b.n	80062ec <_svfiprintf_r+0x194>
 8006308:	aa07      	add	r2, sp, #28
 800630a:	9200      	str	r2, [sp, #0]
 800630c:	0021      	movs	r1, r4
 800630e:	003a      	movs	r2, r7
 8006310:	4b0f      	ldr	r3, [pc, #60]	@ (8006350 <_svfiprintf_r+0x1f8>)
 8006312:	9803      	ldr	r0, [sp, #12]
 8006314:	e000      	b.n	8006318 <_svfiprintf_r+0x1c0>
 8006316:	bf00      	nop
 8006318:	9004      	str	r0, [sp, #16]
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	3301      	adds	r3, #1
 800631e:	d1d6      	bne.n	80062ce <_svfiprintf_r+0x176>
 8006320:	89bb      	ldrh	r3, [r7, #12]
 8006322:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006324:	065b      	lsls	r3, r3, #25
 8006326:	d500      	bpl.n	800632a <_svfiprintf_r+0x1d2>
 8006328:	e72c      	b.n	8006184 <_svfiprintf_r+0x2c>
 800632a:	b021      	add	sp, #132	@ 0x84
 800632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632e:	aa07      	add	r2, sp, #28
 8006330:	9200      	str	r2, [sp, #0]
 8006332:	0021      	movs	r1, r4
 8006334:	003a      	movs	r2, r7
 8006336:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <_svfiprintf_r+0x1f8>)
 8006338:	9803      	ldr	r0, [sp, #12]
 800633a:	f000 f87b 	bl	8006434 <_printf_i>
 800633e:	e7eb      	b.n	8006318 <_svfiprintf_r+0x1c0>
 8006340:	08006838 	.word	0x08006838
 8006344:	0800683e 	.word	0x0800683e
 8006348:	08006842 	.word	0x08006842
 800634c:	00000000 	.word	0x00000000
 8006350:	08006099 	.word	0x08006099

08006354 <_printf_common>:
 8006354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006356:	0016      	movs	r6, r2
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	688a      	ldr	r2, [r1, #8]
 800635c:	690b      	ldr	r3, [r1, #16]
 800635e:	000c      	movs	r4, r1
 8006360:	9000      	str	r0, [sp, #0]
 8006362:	4293      	cmp	r3, r2
 8006364:	da00      	bge.n	8006368 <_printf_common+0x14>
 8006366:	0013      	movs	r3, r2
 8006368:	0022      	movs	r2, r4
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	3243      	adds	r2, #67	@ 0x43
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	2a00      	cmp	r2, #0
 8006372:	d001      	beq.n	8006378 <_printf_common+0x24>
 8006374:	3301      	adds	r3, #1
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	069b      	lsls	r3, r3, #26
 800637c:	d502      	bpl.n	8006384 <_printf_common+0x30>
 800637e:	6833      	ldr	r3, [r6, #0]
 8006380:	3302      	adds	r3, #2
 8006382:	6033      	str	r3, [r6, #0]
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	2306      	movs	r3, #6
 8006388:	0015      	movs	r5, r2
 800638a:	401d      	ands	r5, r3
 800638c:	421a      	tst	r2, r3
 800638e:	d027      	beq.n	80063e0 <_printf_common+0x8c>
 8006390:	0023      	movs	r3, r4
 8006392:	3343      	adds	r3, #67	@ 0x43
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	1e5a      	subs	r2, r3, #1
 8006398:	4193      	sbcs	r3, r2
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	0692      	lsls	r2, r2, #26
 800639e:	d430      	bmi.n	8006402 <_printf_common+0xae>
 80063a0:	0022      	movs	r2, r4
 80063a2:	9901      	ldr	r1, [sp, #4]
 80063a4:	9800      	ldr	r0, [sp, #0]
 80063a6:	9d08      	ldr	r5, [sp, #32]
 80063a8:	3243      	adds	r2, #67	@ 0x43
 80063aa:	47a8      	blx	r5
 80063ac:	3001      	adds	r0, #1
 80063ae:	d025      	beq.n	80063fc <_printf_common+0xa8>
 80063b0:	2206      	movs	r2, #6
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	2500      	movs	r5, #0
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d105      	bne.n	80063c8 <_printf_common+0x74>
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	68e5      	ldr	r5, [r4, #12]
 80063c0:	1aed      	subs	r5, r5, r3
 80063c2:	43eb      	mvns	r3, r5
 80063c4:	17db      	asrs	r3, r3, #31
 80063c6:	401d      	ands	r5, r3
 80063c8:	68a3      	ldr	r3, [r4, #8]
 80063ca:	6922      	ldr	r2, [r4, #16]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	dd01      	ble.n	80063d4 <_printf_common+0x80>
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	18ed      	adds	r5, r5, r3
 80063d4:	2600      	movs	r6, #0
 80063d6:	42b5      	cmp	r5, r6
 80063d8:	d120      	bne.n	800641c <_printf_common+0xc8>
 80063da:	2000      	movs	r0, #0
 80063dc:	e010      	b.n	8006400 <_printf_common+0xac>
 80063de:	3501      	adds	r5, #1
 80063e0:	68e3      	ldr	r3, [r4, #12]
 80063e2:	6832      	ldr	r2, [r6, #0]
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	42ab      	cmp	r3, r5
 80063e8:	ddd2      	ble.n	8006390 <_printf_common+0x3c>
 80063ea:	0022      	movs	r2, r4
 80063ec:	2301      	movs	r3, #1
 80063ee:	9901      	ldr	r1, [sp, #4]
 80063f0:	9800      	ldr	r0, [sp, #0]
 80063f2:	9f08      	ldr	r7, [sp, #32]
 80063f4:	3219      	adds	r2, #25
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	d1f0      	bne.n	80063de <_printf_common+0x8a>
 80063fc:	2001      	movs	r0, #1
 80063fe:	4240      	negs	r0, r0
 8006400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006402:	2030      	movs	r0, #48	@ 0x30
 8006404:	18e1      	adds	r1, r4, r3
 8006406:	3143      	adds	r1, #67	@ 0x43
 8006408:	7008      	strb	r0, [r1, #0]
 800640a:	0021      	movs	r1, r4
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	3145      	adds	r1, #69	@ 0x45
 8006410:	7809      	ldrb	r1, [r1, #0]
 8006412:	18a2      	adds	r2, r4, r2
 8006414:	3243      	adds	r2, #67	@ 0x43
 8006416:	3302      	adds	r3, #2
 8006418:	7011      	strb	r1, [r2, #0]
 800641a:	e7c1      	b.n	80063a0 <_printf_common+0x4c>
 800641c:	0022      	movs	r2, r4
 800641e:	2301      	movs	r3, #1
 8006420:	9901      	ldr	r1, [sp, #4]
 8006422:	9800      	ldr	r0, [sp, #0]
 8006424:	9f08      	ldr	r7, [sp, #32]
 8006426:	321a      	adds	r2, #26
 8006428:	47b8      	blx	r7
 800642a:	3001      	adds	r0, #1
 800642c:	d0e6      	beq.n	80063fc <_printf_common+0xa8>
 800642e:	3601      	adds	r6, #1
 8006430:	e7d1      	b.n	80063d6 <_printf_common+0x82>
	...

08006434 <_printf_i>:
 8006434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006436:	b08b      	sub	sp, #44	@ 0x2c
 8006438:	9206      	str	r2, [sp, #24]
 800643a:	000a      	movs	r2, r1
 800643c:	3243      	adds	r2, #67	@ 0x43
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	9005      	str	r0, [sp, #20]
 8006442:	9203      	str	r2, [sp, #12]
 8006444:	7e0a      	ldrb	r2, [r1, #24]
 8006446:	000c      	movs	r4, r1
 8006448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800644a:	2a78      	cmp	r2, #120	@ 0x78
 800644c:	d809      	bhi.n	8006462 <_printf_i+0x2e>
 800644e:	2a62      	cmp	r2, #98	@ 0x62
 8006450:	d80b      	bhi.n	800646a <_printf_i+0x36>
 8006452:	2a00      	cmp	r2, #0
 8006454:	d100      	bne.n	8006458 <_printf_i+0x24>
 8006456:	e0ba      	b.n	80065ce <_printf_i+0x19a>
 8006458:	497a      	ldr	r1, [pc, #488]	@ (8006644 <_printf_i+0x210>)
 800645a:	9104      	str	r1, [sp, #16]
 800645c:	2a58      	cmp	r2, #88	@ 0x58
 800645e:	d100      	bne.n	8006462 <_printf_i+0x2e>
 8006460:	e08e      	b.n	8006580 <_printf_i+0x14c>
 8006462:	0025      	movs	r5, r4
 8006464:	3542      	adds	r5, #66	@ 0x42
 8006466:	702a      	strb	r2, [r5, #0]
 8006468:	e022      	b.n	80064b0 <_printf_i+0x7c>
 800646a:	0010      	movs	r0, r2
 800646c:	3863      	subs	r0, #99	@ 0x63
 800646e:	2815      	cmp	r0, #21
 8006470:	d8f7      	bhi.n	8006462 <_printf_i+0x2e>
 8006472:	f7f9 fe51 	bl	8000118 <__gnu_thumb1_case_shi>
 8006476:	0016      	.short	0x0016
 8006478:	fff6001f 	.word	0xfff6001f
 800647c:	fff6fff6 	.word	0xfff6fff6
 8006480:	001ffff6 	.word	0x001ffff6
 8006484:	fff6fff6 	.word	0xfff6fff6
 8006488:	fff6fff6 	.word	0xfff6fff6
 800648c:	0036009f 	.word	0x0036009f
 8006490:	fff6007e 	.word	0xfff6007e
 8006494:	00b0fff6 	.word	0x00b0fff6
 8006498:	0036fff6 	.word	0x0036fff6
 800649c:	fff6fff6 	.word	0xfff6fff6
 80064a0:	0082      	.short	0x0082
 80064a2:	0025      	movs	r5, r4
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	3542      	adds	r5, #66	@ 0x42
 80064a8:	1d11      	adds	r1, r2, #4
 80064aa:	6019      	str	r1, [r3, #0]
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	702b      	strb	r3, [r5, #0]
 80064b0:	2301      	movs	r3, #1
 80064b2:	e09e      	b.n	80065f2 <_printf_i+0x1be>
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	6809      	ldr	r1, [r1, #0]
 80064b8:	1d02      	adds	r2, r0, #4
 80064ba:	060d      	lsls	r5, r1, #24
 80064bc:	d50b      	bpl.n	80064d6 <_printf_i+0xa2>
 80064be:	6806      	ldr	r6, [r0, #0]
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	da03      	bge.n	80064ce <_printf_i+0x9a>
 80064c6:	232d      	movs	r3, #45	@ 0x2d
 80064c8:	9a03      	ldr	r2, [sp, #12]
 80064ca:	4276      	negs	r6, r6
 80064cc:	7013      	strb	r3, [r2, #0]
 80064ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006644 <_printf_i+0x210>)
 80064d0:	270a      	movs	r7, #10
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	e018      	b.n	8006508 <_printf_i+0xd4>
 80064d6:	6806      	ldr	r6, [r0, #0]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	0649      	lsls	r1, r1, #25
 80064dc:	d5f1      	bpl.n	80064c2 <_printf_i+0x8e>
 80064de:	b236      	sxth	r6, r6
 80064e0:	e7ef      	b.n	80064c2 <_printf_i+0x8e>
 80064e2:	6808      	ldr	r0, [r1, #0]
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	c940      	ldmia	r1!, {r6}
 80064e8:	0605      	lsls	r5, r0, #24
 80064ea:	d402      	bmi.n	80064f2 <_printf_i+0xbe>
 80064ec:	0640      	lsls	r0, r0, #25
 80064ee:	d500      	bpl.n	80064f2 <_printf_i+0xbe>
 80064f0:	b2b6      	uxth	r6, r6
 80064f2:	6019      	str	r1, [r3, #0]
 80064f4:	4b53      	ldr	r3, [pc, #332]	@ (8006644 <_printf_i+0x210>)
 80064f6:	270a      	movs	r7, #10
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80064fc:	d100      	bne.n	8006500 <_printf_i+0xcc>
 80064fe:	3f02      	subs	r7, #2
 8006500:	0023      	movs	r3, r4
 8006502:	2200      	movs	r2, #0
 8006504:	3343      	adds	r3, #67	@ 0x43
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	db06      	blt.n	800651e <_printf_i+0xea>
 8006510:	2104      	movs	r1, #4
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	9d03      	ldr	r5, [sp, #12]
 8006516:	438a      	bics	r2, r1
 8006518:	6022      	str	r2, [r4, #0]
 800651a:	4333      	orrs	r3, r6
 800651c:	d00c      	beq.n	8006538 <_printf_i+0x104>
 800651e:	9d03      	ldr	r5, [sp, #12]
 8006520:	0030      	movs	r0, r6
 8006522:	0039      	movs	r1, r7
 8006524:	f7f9 fe88 	bl	8000238 <__aeabi_uidivmod>
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	3d01      	subs	r5, #1
 800652c:	5c5b      	ldrb	r3, [r3, r1]
 800652e:	702b      	strb	r3, [r5, #0]
 8006530:	0033      	movs	r3, r6
 8006532:	0006      	movs	r6, r0
 8006534:	429f      	cmp	r7, r3
 8006536:	d9f3      	bls.n	8006520 <_printf_i+0xec>
 8006538:	2f08      	cmp	r7, #8
 800653a:	d109      	bne.n	8006550 <_printf_i+0x11c>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	07db      	lsls	r3, r3, #31
 8006540:	d506      	bpl.n	8006550 <_printf_i+0x11c>
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	429a      	cmp	r2, r3
 8006548:	dc02      	bgt.n	8006550 <_printf_i+0x11c>
 800654a:	2330      	movs	r3, #48	@ 0x30
 800654c:	3d01      	subs	r5, #1
 800654e:	702b      	strb	r3, [r5, #0]
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	1b5b      	subs	r3, r3, r5
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	0021      	movs	r1, r4
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	9805      	ldr	r0, [sp, #20]
 800655e:	9b06      	ldr	r3, [sp, #24]
 8006560:	aa09      	add	r2, sp, #36	@ 0x24
 8006562:	f7ff fef7 	bl	8006354 <_printf_common>
 8006566:	3001      	adds	r0, #1
 8006568:	d148      	bne.n	80065fc <_printf_i+0x1c8>
 800656a:	2001      	movs	r0, #1
 800656c:	4240      	negs	r0, r0
 800656e:	b00b      	add	sp, #44	@ 0x2c
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006572:	2220      	movs	r2, #32
 8006574:	6809      	ldr	r1, [r1, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	2278      	movs	r2, #120	@ 0x78
 800657c:	4932      	ldr	r1, [pc, #200]	@ (8006648 <_printf_i+0x214>)
 800657e:	9104      	str	r1, [sp, #16]
 8006580:	0021      	movs	r1, r4
 8006582:	3145      	adds	r1, #69	@ 0x45
 8006584:	700a      	strb	r2, [r1, #0]
 8006586:	6819      	ldr	r1, [r3, #0]
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	c940      	ldmia	r1!, {r6}
 800658c:	0610      	lsls	r0, r2, #24
 800658e:	d402      	bmi.n	8006596 <_printf_i+0x162>
 8006590:	0650      	lsls	r0, r2, #25
 8006592:	d500      	bpl.n	8006596 <_printf_i+0x162>
 8006594:	b2b6      	uxth	r6, r6
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	07d3      	lsls	r3, r2, #31
 800659a:	d502      	bpl.n	80065a2 <_printf_i+0x16e>
 800659c:	2320      	movs	r3, #32
 800659e:	4313      	orrs	r3, r2
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	d001      	beq.n	80065aa <_printf_i+0x176>
 80065a6:	2710      	movs	r7, #16
 80065a8:	e7aa      	b.n	8006500 <_printf_i+0xcc>
 80065aa:	2220      	movs	r2, #32
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	4393      	bics	r3, r2
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	e7f8      	b.n	80065a6 <_printf_i+0x172>
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	680d      	ldr	r5, [r1, #0]
 80065b8:	1d10      	adds	r0, r2, #4
 80065ba:	6949      	ldr	r1, [r1, #20]
 80065bc:	6018      	str	r0, [r3, #0]
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	062e      	lsls	r6, r5, #24
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0x194>
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0x19a>
 80065c8:	066d      	lsls	r5, r5, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0x190>
 80065cc:	8019      	strh	r1, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9d03      	ldr	r5, [sp, #12]
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	e7bf      	b.n	8006556 <_printf_i+0x122>
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	1d11      	adds	r1, r2, #4
 80065da:	6019      	str	r1, [r3, #0]
 80065dc:	6815      	ldr	r5, [r2, #0]
 80065de:	2100      	movs	r1, #0
 80065e0:	0028      	movs	r0, r5
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	f000 f844 	bl	8006670 <memchr>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d001      	beq.n	80065f0 <_printf_i+0x1bc>
 80065ec:	1b40      	subs	r0, r0, r5
 80065ee:	6060      	str	r0, [r4, #4]
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	9a03      	ldr	r2, [sp, #12]
 80065f8:	7013      	strb	r3, [r2, #0]
 80065fa:	e7ac      	b.n	8006556 <_printf_i+0x122>
 80065fc:	002a      	movs	r2, r5
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	9906      	ldr	r1, [sp, #24]
 8006602:	9805      	ldr	r0, [sp, #20]
 8006604:	9d07      	ldr	r5, [sp, #28]
 8006606:	47a8      	blx	r5
 8006608:	3001      	adds	r0, #1
 800660a:	d0ae      	beq.n	800656a <_printf_i+0x136>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	079b      	lsls	r3, r3, #30
 8006610:	d415      	bmi.n	800663e <_printf_i+0x20a>
 8006612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006614:	68e0      	ldr	r0, [r4, #12]
 8006616:	4298      	cmp	r0, r3
 8006618:	daa9      	bge.n	800656e <_printf_i+0x13a>
 800661a:	0018      	movs	r0, r3
 800661c:	e7a7      	b.n	800656e <_printf_i+0x13a>
 800661e:	0022      	movs	r2, r4
 8006620:	2301      	movs	r3, #1
 8006622:	9906      	ldr	r1, [sp, #24]
 8006624:	9805      	ldr	r0, [sp, #20]
 8006626:	9e07      	ldr	r6, [sp, #28]
 8006628:	3219      	adds	r2, #25
 800662a:	47b0      	blx	r6
 800662c:	3001      	adds	r0, #1
 800662e:	d09c      	beq.n	800656a <_printf_i+0x136>
 8006630:	3501      	adds	r5, #1
 8006632:	68e3      	ldr	r3, [r4, #12]
 8006634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006636:	1a9b      	subs	r3, r3, r2
 8006638:	42ab      	cmp	r3, r5
 800663a:	dcf0      	bgt.n	800661e <_printf_i+0x1ea>
 800663c:	e7e9      	b.n	8006612 <_printf_i+0x1de>
 800663e:	2500      	movs	r5, #0
 8006640:	e7f7      	b.n	8006632 <_printf_i+0x1fe>
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	08006849 	.word	0x08006849
 8006648:	0800685a 	.word	0x0800685a

0800664c <memmove>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4288      	cmp	r0, r1
 8006650:	d902      	bls.n	8006658 <memmove+0xc>
 8006652:	188b      	adds	r3, r1, r2
 8006654:	4298      	cmp	r0, r3
 8006656:	d308      	bcc.n	800666a <memmove+0x1e>
 8006658:	2300      	movs	r3, #0
 800665a:	429a      	cmp	r2, r3
 800665c:	d007      	beq.n	800666e <memmove+0x22>
 800665e:	5ccc      	ldrb	r4, [r1, r3]
 8006660:	54c4      	strb	r4, [r0, r3]
 8006662:	3301      	adds	r3, #1
 8006664:	e7f9      	b.n	800665a <memmove+0xe>
 8006666:	5c8b      	ldrb	r3, [r1, r2]
 8006668:	5483      	strb	r3, [r0, r2]
 800666a:	3a01      	subs	r2, #1
 800666c:	d2fb      	bcs.n	8006666 <memmove+0x1a>
 800666e:	bd10      	pop	{r4, pc}

08006670 <memchr>:
 8006670:	b2c9      	uxtb	r1, r1
 8006672:	1882      	adds	r2, r0, r2
 8006674:	4290      	cmp	r0, r2
 8006676:	d101      	bne.n	800667c <memchr+0xc>
 8006678:	2000      	movs	r0, #0
 800667a:	4770      	bx	lr
 800667c:	7803      	ldrb	r3, [r0, #0]
 800667e:	428b      	cmp	r3, r1
 8006680:	d0fb      	beq.n	800667a <memchr+0xa>
 8006682:	3001      	adds	r0, #1
 8006684:	e7f6      	b.n	8006674 <memchr+0x4>

08006686 <_realloc_r>:
 8006686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006688:	0006      	movs	r6, r0
 800668a:	000c      	movs	r4, r1
 800668c:	0015      	movs	r5, r2
 800668e:	2900      	cmp	r1, #0
 8006690:	d105      	bne.n	800669e <_realloc_r+0x18>
 8006692:	0011      	movs	r1, r2
 8006694:	f7ff fb6e 	bl	8005d74 <_malloc_r>
 8006698:	0004      	movs	r4, r0
 800669a:	0020      	movs	r0, r4
 800669c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800669e:	2a00      	cmp	r2, #0
 80066a0:	d103      	bne.n	80066aa <_realloc_r+0x24>
 80066a2:	f7ff fcaf 	bl	8006004 <_free_r>
 80066a6:	002c      	movs	r4, r5
 80066a8:	e7f7      	b.n	800669a <_realloc_r+0x14>
 80066aa:	f000 f81c 	bl	80066e6 <_malloc_usable_size_r>
 80066ae:	0007      	movs	r7, r0
 80066b0:	4285      	cmp	r5, r0
 80066b2:	d802      	bhi.n	80066ba <_realloc_r+0x34>
 80066b4:	0843      	lsrs	r3, r0, #1
 80066b6:	42ab      	cmp	r3, r5
 80066b8:	d3ef      	bcc.n	800669a <_realloc_r+0x14>
 80066ba:	0029      	movs	r1, r5
 80066bc:	0030      	movs	r0, r6
 80066be:	f7ff fb59 	bl	8005d74 <_malloc_r>
 80066c2:	9001      	str	r0, [sp, #4]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d101      	bne.n	80066cc <_realloc_r+0x46>
 80066c8:	9c01      	ldr	r4, [sp, #4]
 80066ca:	e7e6      	b.n	800669a <_realloc_r+0x14>
 80066cc:	002a      	movs	r2, r5
 80066ce:	42bd      	cmp	r5, r7
 80066d0:	d900      	bls.n	80066d4 <_realloc_r+0x4e>
 80066d2:	003a      	movs	r2, r7
 80066d4:	0021      	movs	r1, r4
 80066d6:	9801      	ldr	r0, [sp, #4]
 80066d8:	f7ff fc8a 	bl	8005ff0 <memcpy>
 80066dc:	0021      	movs	r1, r4
 80066de:	0030      	movs	r0, r6
 80066e0:	f7ff fc90 	bl	8006004 <_free_r>
 80066e4:	e7f0      	b.n	80066c8 <_realloc_r+0x42>

080066e6 <_malloc_usable_size_r>:
 80066e6:	1f0b      	subs	r3, r1, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	1f18      	subs	r0, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da01      	bge.n	80066f4 <_malloc_usable_size_r+0xe>
 80066f0:	580b      	ldr	r3, [r1, r0]
 80066f2:	18c0      	adds	r0, r0, r3
 80066f4:	4770      	bx	lr
	...

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	46c0      	nop			@ (mov r8, r8)
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
