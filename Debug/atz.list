
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007314  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b94  08007b94  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b9c  08007b9c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00008b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00008ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007ba4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000006c  08007c10  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000428  08007c10  00009428  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c9e  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a66  00000000  00000000  0001cd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00020798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00021948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180ff  00000000  00000000  000226da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001745d  00000000  00000000  0003a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849c0  00000000  00000000  00051c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d65f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  000d663c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000dabbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080073bc 	.word	0x080073bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080073bc 	.word	0x080073bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 face 	bl	8001a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fae0 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f006 fa5b 	bl	8006978 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b21      	ldr	r3, [pc, #132]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e0:	2102      	movs	r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2202      	movs	r2, #2
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_GPIO_Init+0xa4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fe97 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2220      	movs	r2, #32
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	193a      	adds	r2, r7, r4
 8000512:	23a0      	movs	r3, #160	@ 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fd09 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2220      	movs	r2, #32
 8000524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000538:	187b      	adds	r3, r7, r1
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <MX_GPIO_Init+0xa4>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f001 fcf6 	bl	8001f30 <HAL_GPIO_Init>

}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	@ 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	50000400 	.word	0x50000400

08000554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_I2C1_Init+0x78>)
 800055a:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <MX_I2C1_Init+0x7c>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800055e:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000560:	22c1      	movs	r2, #193	@ 0xc1
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056c:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_I2C1_Init+0x78>)
 800056e:	2201      	movs	r2, #1
 8000570:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_I2C1_Init+0x78>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_I2C1_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fe68 	bl	8002268 <HAL_I2C_Init>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800059c:	f000 fa46 	bl	8000a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_I2C1_Init+0x78>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 fd07 	bl	8002fb8 <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005ae:	f000 fa3d 	bl	8000a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_I2C1_Init+0x78>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fd4a 	bl	8003050 <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005c0:	f000 fa34 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	20000088 	.word	0x20000088
 80005d0:	40005400 	.word	0x40005400

080005d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	240c      	movs	r4, #12
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f006 f9c6 	bl	8006978 <memset>
  if(i2cHandle->Instance==I2C1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <HAL_I2C_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 80005f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 80005fc:	2102      	movs	r1, #2
 80005fe:	430a      	orrs	r2, r1
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 8000604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000606:	2202      	movs	r2, #2
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800060e:	0021      	movs	r1, r4
 8000610:	187b      	adds	r3, r7, r1
 8000612:	22c0      	movs	r2, #192	@ 0xc0
 8000614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2212      	movs	r2, #18
 800061a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2201      	movs	r2, #1
 8000620:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2203      	movs	r2, #3
 8000626:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	187b      	adds	r3, r7, r1
 8000630:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <HAL_I2C_MspInit+0x84>)
 8000632:	0019      	movs	r1, r3
 8000634:	0010      	movs	r0, r2
 8000636:	f001 fc7b 	bl	8001f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 800063c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	0389      	lsls	r1, r1, #14
 8000644:	430a      	orrs	r2, r1
 8000646:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b009      	add	sp, #36	@ 0x24
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40005400 	.word	0x40005400
 8000654:	40021000 	.word	0x40021000
 8000658:	50000400 	.word	0x50000400

0800065c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 8000662:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <MX_LPTIM1_Init+0x48>)
 8000664:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <MX_LPTIM1_Init+0x4c>)
 8000676:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <MX_LPTIM1_Init+0x44>)
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fd2b 	bl	80030e8 <HAL_LPTIM_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8000696:	f000 f9c9 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000dc 	.word	0x200000dc
 80006a4:	40007c00 	.word	0x40007c00
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <HAL_LPTIM_MspInit+0x38>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10e      	bne.n	80006dc <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <HAL_LPTIM_MspInit+0x3c>)
 80006c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_LPTIM_MspInit+0x3c>)
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	0609      	lsls	r1, r1, #24
 80006c8:	430a      	orrs	r2, r1
 80006ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	200d      	movs	r0, #13
 80006d2:	f001 f9af 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80006d6:	200d      	movs	r0, #13
 80006d8:	f001 f9c1 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40007c00 	.word	0x40007c00
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	000a      	movs	r2, r1
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a07      	ldr	r2, [pc, #28]	@ (800071c <HAL_UARTEx_RxEventCallback+0x30>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 8000704:	1cbb      	adds	r3, r7, #2
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_UARTEx_RxEventCallback+0x34>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f005 fdd9 	bl	80062c4 <ATC_IdleLineCallback>
	}
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	40004800 	.word	0x40004800
 8000720:	2000010c 	.word	0x2000010c

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b098      	sub	sp, #96	@ 0x60
 8000728:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f001 f81f 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f90b 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f7ff febb 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000736:	f7ff fe9b 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800073a:	f7ff ff0b 	bl	8000554 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800073e:	f000 fa7b 	bl	8000c38 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 8000742:	f7ff ff8b 	bl	800065c <MX_LPTIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 8000746:	4b6b      	ldr	r3, [pc, #428]	@ (80008f4 <main+0x1d0>)
 8000748:	0018      	movs	r0, r3
 800074a:	f005 fcb1 	bl	80060b0 <ATC_Loop>
	  switch (lorawan_state) {
 800074e:	4b6a      	ldr	r3, [pc, #424]	@ (80008f8 <main+0x1d4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b06      	cmp	r3, #6
 8000756:	d8f6      	bhi.n	8000746 <main+0x22>
 8000758:	009a      	lsls	r2, r3, #2
 800075a:	4b68      	ldr	r3, [pc, #416]	@ (80008fc <main+0x1d8>)
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 8000762:	2549      	movs	r5, #73	@ 0x49
 8000764:	197c      	adds	r4, r7, r5
 8000766:	4b63      	ldr	r3, [pc, #396]	@ (80008f4 <main+0x1d0>)
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fb39 	bl	8000de0 <join_network>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 8000772:	197b      	adds	r3, r7, r5
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d107      	bne.n	800078a <main+0x66>
				lorawan_state = LORAWAN_JOINING;
 800077a:	4b5f      	ldr	r3, [pc, #380]	@ (80008f8 <main+0x1d4>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: Join command sent successfully\n");
 8000780:	4b5f      	ldr	r3, [pc, #380]	@ (8000900 <main+0x1dc>)
 8000782:	0018      	movs	r0, r3
 8000784:	f006 f802 	bl	800678c <puts>
			} else {
				printf("ERROR: Join command failed with error %d\n", join_result);
				// Could implement retry logic here
			}
		}
		break;
 8000788:	e0b2      	b.n	80008f0 <main+0x1cc>
				printf("ERROR: Join command failed with error %d\n", join_result);
 800078a:	2349      	movs	r3, #73	@ 0x49
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	4b5c      	ldr	r3, [pc, #368]	@ (8000904 <main+0x1e0>)
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f005 ff93 	bl	80066c0 <iprintf>
		break;
 800079a:	e0a9      	b.n	80008f0 <main+0x1cc>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 800079c:	4b5a      	ldr	r3, [pc, #360]	@ (8000908 <main+0x1e4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]

		  char* CONNECTION_STATUS = NULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 80007a6:	2344      	movs	r3, #68	@ 0x44
 80007a8:	18fa      	adds	r2, r7, r3
 80007aa:	4958      	ldr	r1, [pc, #352]	@ (800090c <main+0x1e8>)
 80007ac:	4851      	ldr	r0, [pc, #324]	@ (80008f4 <main+0x1d0>)
 80007ae:	4b58      	ldr	r3, [pc, #352]	@ (8000910 <main+0x1ec>)
 80007b0:	9303      	str	r3, [sp, #12]
 80007b2:	4b58      	ldr	r3, [pc, #352]	@ (8000914 <main+0x1f0>)
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2302      	movs	r3, #2
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	23fa      	movs	r3, #250	@ 0xfa
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	0013      	movs	r3, r2
 80007c2:	22c8      	movs	r2, #200	@ 0xc8
 80007c4:	f005 fc84 	bl	80060d0 <ATC_SendReceive>
 80007c8:	0002      	movs	r2, r0
 80007ca:	4b53      	ldr	r3, [pc, #332]	@ (8000918 <main+0x1f4>)
 80007cc:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 80007ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <main+0xb8>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 80007d4:	4b48      	ldr	r3, [pc, #288]	@ (80008f8 <main+0x1d4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
			  break;
 80007da:	e089      	b.n	80008f0 <main+0x1cc>
		  }

		  // Create AT command with sensor data
		  char at_command[64];
		  uint16_t sensor_val = temp_ticks_2; // Use sensor data
 80007dc:	214a      	movs	r1, #74	@ 0x4a
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	4a4e      	ldr	r2, [pc, #312]	@ (800091c <main+0x1f8>)
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	003a      	movs	r2, r7
 80007ec:	2104      	movs	r1, #4
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fb5a 	bl	8000ea8 <format_at_send_cmd>

		  char* ATSEND_Result = NULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK\r", "ERROR");
 80007f8:	2340      	movs	r3, #64	@ 0x40
 80007fa:	18fa      	adds	r2, r7, r3
 80007fc:	0039      	movs	r1, r7
 80007fe:	483d      	ldr	r0, [pc, #244]	@ (80008f4 <main+0x1d0>)
 8000800:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <main+0x1fc>)
 8000802:	9303      	str	r3, [sp, #12]
 8000804:	4b47      	ldr	r3, [pc, #284]	@ (8000924 <main+0x200>)
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	2302      	movs	r3, #2
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	23fa      	movs	r3, #250	@ 0xfa
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	0013      	movs	r3, r2
 8000814:	22c8      	movs	r2, #200	@ 0xc8
 8000816:	f005 fc5b 	bl	80060d0 <ATC_SendReceive>
 800081a:	0002      	movs	r2, r0
 800081c:	4b3e      	ldr	r3, [pc, #248]	@ (8000918 <main+0x1f4>)
 800081e:	601a      	str	r2, [r3, #0]
		  if (resp == 1) {
 8000820:	4b3d      	ldr	r3, [pc, #244]	@ (8000918 <main+0x1f4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d107      	bne.n	8000838 <main+0x114>
			  lorawan_state = LORAWAN_DATA_SENDING;
 8000828:	4b33      	ldr	r3, [pc, #204]	@ (80008f8 <main+0x1d4>)
 800082a:	2204      	movs	r2, #4
 800082c:	701a      	strb	r2, [r3, #0]
			  printf("DEBUG: Send command accepted\n");
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <main+0x204>)
 8000830:	0018      	movs	r0, r3
 8000832:	f005 ffab 	bl	800678c <puts>
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 8000836:	e05b      	b.n	80008f0 <main+0x1cc>
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <main+0x1d4>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	  break;
 800083e:	e057      	b.n	80008f0 <main+0x1cc>
	  case LORAWAN_DATA_SENDING:
			// Start timer when entering this state
			if (data_sending_start_time == 0) {
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <main+0x208>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <main+0x12e>
				data_sending_start_time = HAL_GetTick();
 8000848:	f000 fff6 	bl	8001838 <HAL_GetTick>
 800084c:	0002      	movs	r2, r0
 800084e:	4b37      	ldr	r3, [pc, #220]	@ (800092c <main+0x208>)
 8000850:	601a      	str	r2, [r3, #0]
			}

			// Check if 10 seconds have passed
			if ((HAL_GetTick() - data_sending_start_time) >= 10000) {
 8000852:	f000 fff1 	bl	8001838 <HAL_GetTick>
 8000856:	0002      	movs	r2, r0
 8000858:	4b34      	ldr	r3, [pc, #208]	@ (800092c <main+0x208>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a34      	ldr	r2, [pc, #208]	@ (8000930 <main+0x20c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d944      	bls.n	80008ee <main+0x1ca>
				printf("DEBUG: Data sending timeout - going to sleep\n");
 8000864:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <main+0x210>)
 8000866:	0018      	movs	r0, r3
 8000868:	f005 ff90 	bl	800678c <puts>
				data_sending_start_time = 0; // Reset timer
 800086c:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <main+0x208>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
				lorawan_state = DEVICE_SLEEP;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <main+0x1d4>)
 8000874:	2205      	movs	r2, #5
 8000876:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000878:	e039      	b.n	80008ee <main+0x1ca>
	  case LORAWAN_DATA_RECEIVED:
		  // Handle received data
		  printf("DEBUG: Data received from network\n");
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <main+0x214>)
 800087c:	0018      	movs	r0, r3
 800087e:	f005 ff85 	bl	800678c <puts>
		  lorawan_state = DEVICE_SLEEP;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <main+0x1d4>)
 8000884:	2205      	movs	r2, #5
 8000886:	701a      	strb	r2, [r3, #0]
		  break;
 8000888:	e032      	b.n	80008f0 <main+0x1cc>
	  case DEVICE_SLEEP:
		  for (int i = 0; i < 30; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800088e:	e011      	b.n	80008b4 <main+0x190>
			  HAL_SuspendTick();
 8000890:	f001 f800 	bl	8001894 <HAL_SuspendTick>
			  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000894:	2101      	movs	r1, #1
 8000896:	2001      	movs	r0, #1
 8000898:	f002 fd8c 	bl	80033b4 <HAL_PWR_EnterSTOPMode>
			  HAL_ResumeTick();
 800089c:	f001 f808 	bl	80018b0 <HAL_ResumeTick>
			  SystemClock_Config(); // Reconfigure clocks after wake
 80008a0:	f000 f852 	bl	8000948 <SystemClock_Config>
			  HAL_Delay(1000); // 1 second delay
 80008a4:	23fa      	movs	r3, #250	@ 0xfa
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 ffcf 	bl	800184c <HAL_Delay>
		  for (int i = 0; i < 30; i++) {
 80008ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008b0:	3301      	adds	r3, #1
 80008b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80008b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008b6:	2b1d      	cmp	r3, #29
 80008b8:	ddea      	ble.n	8000890 <main+0x16c>
		  }
		  lorawan_state = COLLECT_DATA;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <main+0x1d4>)
 80008bc:	2206      	movs	r2, #6
 80008be:	701a      	strb	r2, [r3, #0]
	  break;
 80008c0:	e016      	b.n	80008f0 <main+0x1cc>
	  case COLLECT_DATA:
		  // Scan for sensors and read data
		  scan_i2c_bus();
 80008c2:	f000 fb27 	bl	8000f14 <scan_i2c_bus>
		  if (has_sensor_1 || has_sensor_2) {
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <main+0x218>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <main+0x1b2>
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <main+0x21c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d005      	beq.n	80008e2 <main+0x1be>
			  sensor_init_and_read();
 80008d6:	f000 fba1 	bl	800101c <sensor_init_and_read>
			  printf("DEBUG: Sensor data collected\n");
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <main+0x220>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f005 ff55 	bl	800678c <puts>
		  }
		  lorawan_state = LORAWAN_JOINED; // Go back to send data
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <main+0x1d4>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	701a      	strb	r2, [r3, #0]
		  break;
 80008e8:	e002      	b.n	80008f0 <main+0x1cc>
		break;
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	e72b      	b.n	8000746 <main+0x22>
		break;
 80008ee:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 80008f0:	e729      	b.n	8000746 <main+0x22>
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	2000010c 	.word	0x2000010c
 80008f8:	20000000 	.word	0x20000000
 80008fc:	08007ad8 	.word	0x08007ad8
 8000900:	08007414 	.word	0x08007414
 8000904:	0800743c 	.word	0x0800743c
 8000908:	20000150 	.word	0x20000150
 800090c:	08007468 	.word	0x08007468
 8000910:	08007474 	.word	0x08007474
 8000914:	08007478 	.word	0x08007478
 8000918:	20000148 	.word	0x20000148
 800091c:	20000276 	.word	0x20000276
 8000920:	0800747c 	.word	0x0800747c
 8000924:	08007484 	.word	0x08007484
 8000928:	08007488 	.word	0x08007488
 800092c:	2000014c 	.word	0x2000014c
 8000930:	0000270f 	.word	0x0000270f
 8000934:	080074a8 	.word	0x080074a8
 8000938:	080074d8 	.word	0x080074d8
 800093c:	20000270 	.word	0x20000270
 8000940:	20000271 	.word	0x20000271
 8000944:	080074fc 	.word	0x080074fc

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b09f      	sub	sp, #124	@ 0x7c
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	2440      	movs	r4, #64	@ 0x40
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2338      	movs	r3, #56	@ 0x38
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f006 f80d 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	232c      	movs	r3, #44	@ 0x2c
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f006 f805 	bl	8006978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	0018      	movs	r0, r3
 8000972:	2328      	movs	r3, #40	@ 0x28
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f005 fffe 	bl	8006978 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <SystemClock_Config+0xdc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <SystemClock_Config+0xe0>)
 8000982:	401a      	ands	r2, r3
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <SystemClock_Config+0xdc>)
 8000986:	2180      	movs	r1, #128	@ 0x80
 8000988:	0109      	lsls	r1, r1, #4
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800098e:	0021      	movs	r1, r4
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2210      	movs	r2, #16
 8000994:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	22a0      	movs	r2, #160	@ 0xa0
 80009a6:	0212      	lsls	r2, r2, #8
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fd5a 	bl	800346c <HAL_RCC_OscConfig>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009bc:	f000 f836 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	212c      	movs	r1, #44	@ 0x2c
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	220f      	movs	r2, #15
 80009c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2100      	movs	r1, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 f915 	bl	8003c14 <HAL_RCC_ClockConfig>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009ee:	f000 f81d 	bl	8000a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	228c      	movs	r2, #140	@ 0x8c
 80009f6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f003 fb05 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a16:	f000 f809 	bl	8000a2c <Error_Handler>
  }
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b01f      	add	sp, #124	@ 0x7c
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	40007000 	.word	0x40007000
 8000a28:	ffffe7ff 	.word	0xffffe7ff

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <HAL_MspInit+0x24>)
 8000a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x24>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <HAL_MspInit+0x24>)
 8000a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_MspInit+0x24>)
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0549      	lsls	r1, r1, #21
 8000a52:	430a      	orrs	r2, r1
 8000a54:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 8000a6c:	4b02      	ldr	r3, [pc, #8]	@ (8000a78 <HardFault_Handler+0x10>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f005 fe8c 	bl	800678c <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0xc>
 8000a78:	0800751c 	.word	0x0800751c

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 febe 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f95b 	bl	8001d62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f957 	bl	8001d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	20000228 	.word	0x20000228
 8000ac0:	200001e0 	.word	0x200001e0

08000ac4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <LPTIM1_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fb98 	bl	8003200 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	200000dc 	.word	0x200000dc

08000adc <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <RNG_LPUART1_IRQHandler+0x14>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f003 fe30 	bl	8004748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	20000158 	.word	0x20000158

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	e000      	b.n	8000b0a <_read+0x16>
 8000b08:	bf00      	nop
 8000b0a:	0001      	movs	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b006      	add	sp, #24
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	e000      	b.n	8000b4e <_write+0x20>
 8000b4c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b006      	add	sp, #24
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	425b      	negs	r3, r3
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	0192      	lsls	r2, r2, #6
 8000b8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	18d3      	adds	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f005 ff4e 	bl	8006a90 <__errno>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	18d2      	adds	r2, r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <_sbrk+0x64>)
 8000c10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b006      	add	sp, #24
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20005000 	.word	0x20005000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000154 	.word	0x20000154
 8000c28:	20000428 	.word	0x20000428

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <MX_LPUART1_UART_Init+0x58>)
 8000c40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c44:	22e1      	movs	r2, #225	@ 0xe1
 8000c46:	0252      	lsls	r2, r2, #9
 8000c48:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c74:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <MX_LPUART1_UART_Init+0x54>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 fb6e 	bl	8004358 <HAL_UART_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f7ff fed4 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000158 	.word	0x20000158
 8000c90:	40004800 	.word	0x40004800

08000c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	240c      	movs	r4, #12
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f005 fe66 	bl	8006978 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a45      	ldr	r2, [pc, #276]	@ (8000dc8 <HAL_UART_MspInit+0x134>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d000      	beq.n	8000cb8 <HAL_UART_MspInit+0x24>
 8000cb6:	e083      	b.n	8000dc0 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb8:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <HAL_UART_MspInit+0x138>)
 8000cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cbc:	4b43      	ldr	r3, [pc, #268]	@ (8000dcc <HAL_UART_MspInit+0x138>)
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	02c9      	lsls	r1, r1, #11
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b41      	ldr	r3, [pc, #260]	@ (8000dcc <HAL_UART_MspInit+0x138>)
 8000cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cca:	4b40      	ldr	r3, [pc, #256]	@ (8000dcc <HAL_UART_MspInit+0x138>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dcc <HAL_UART_MspInit+0x138>)
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cde:	0021      	movs	r1, r4
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2206      	movs	r2, #6
 8000cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	187a      	adds	r2, r7, r1
 8000d00:	23a0      	movs	r3, #160	@ 0xa0
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 f912 	bl	8001f30 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000d0c:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <HAL_UART_MspInit+0x140>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d14:	2205      	movs	r2, #5
 8000d16:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 fea7 	bl	8001a98 <HAL_DMA_Init>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d4e:	f7ff fe6d 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d56:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_UART_MspInit+0x13c>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d60:	4a1e      	ldr	r2, [pc, #120]	@ (8000ddc <HAL_UART_MspInit+0x148>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d66:	2205      	movs	r2, #5
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d78:	2280      	movs	r2, #128	@ 0x80
 8000d7a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fe7e 	bl	8001a98 <HAL_DMA_Init>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000da0:	f7ff fe44 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000da8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_UART_MspInit+0x144>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	201d      	movs	r0, #29
 8000db6:	f000 fe3d 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000dba:	201d      	movs	r0, #29
 8000dbc:	f000 fe4f 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b009      	add	sp, #36	@ 0x24
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	200001e0 	.word	0x200001e0
 8000dd4:	40020030 	.word	0x40020030
 8000dd8:	20000228 	.word	0x20000228
 8000ddc:	4002001c 	.word	0x4002001c

08000de0 <join_network>:
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
    return LORAWAN_OK;
}

LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0c8      	sub	sp, #288	@ 0x120
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]
    char  response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000de8:	230c      	movs	r3, #12
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 8000dee:	2308      	movs	r3, #8
 8000df0:	18fa      	adds	r2, r7, r3
 8000df2:	490e      	ldr	r1, [pc, #56]	@ (8000e2c <join_network+0x4c>)
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <join_network+0x50>)
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <join_network+0x54>)
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	0013      	movs	r3, r2
 8000e04:	2264      	movs	r2, #100	@ 0x64
 8000e06:	f005 f963 	bl	80060d0 <ATC_SendReceive>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	2286      	movs	r2, #134	@ 0x86
 8000e0e:	0052      	lsls	r2, r2, #1
 8000e10:	18b9      	adds	r1, r7, r2
 8000e12:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8000e14:	18bb      	adds	r3, r7, r2
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da01      	bge.n	8000e20 <join_network+0x40>
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	e000      	b.n	8000e22 <join_network+0x42>
    return LORAWAN_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b044      	add	sp, #272	@ 0x110
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	080076d4 	.word	0x080076d4
 8000e30:	08007564 	.word	0x08007564
 8000e34:	00002710 	.word	0x00002710

08000e38 <to_hex_str>:
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
    return LORAWAN_OK;
}

void to_hex_str(uint32_t value, uint8_t width, char *output) {
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	250b      	movs	r5, #11
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	1c0a      	adds	r2, r1, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <to_hex_str+0x6c>)
 8000e50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e52:	c313      	stmia	r3!, {r0, r1, r4}
 8000e54:	6811      	ldr	r1, [r2, #0]
 8000e56:	6019      	str	r1, [r3, #0]
 8000e58:	7912      	ldrb	r2, [r2, #4]
 8000e5a:	711a      	strb	r2, [r3, #4]
    for (int i = width - 1; i >= 0; --i) {
 8000e5c:	197b      	adds	r3, r7, r5
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e64:	e00f      	b.n	8000e86 <to_hex_str+0x4e>
        output[i] = hex_chars[value & 0xF];
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	220f      	movs	r2, #15
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	18cb      	adds	r3, r1, r3
 8000e72:	2110      	movs	r1, #16
 8000e74:	1879      	adds	r1, r7, r1
 8000e76:	5c8a      	ldrb	r2, [r1, r2]
 8000e78:	701a      	strb	r2, [r3, #0]
        value >>= 4;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
    for (int i = width - 1; i >= 0; --i) {
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	3b01      	subs	r3, #1
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	daec      	bge.n	8000e66 <to_hex_str+0x2e>
    }
    output[width] = '\0';
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	18d3      	adds	r3, r2, r3
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00a      	add	sp, #40	@ 0x28
 8000ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	08007704 	.word	0x08007704

08000ea8 <format_at_send_cmd>:

void format_at_send_cmd(uint32_t data, uint8_t hex_digits, char *out_buf) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08f      	sub	sp, #60	@ 0x3c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	200b      	movs	r0, #11
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	1c0a      	adds	r2, r1, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
    char hex_str[33];
    to_hex_str(data, hex_digits, hex_str);
 8000eba:	2414      	movs	r4, #20
 8000ebc:	193a      	adds	r2, r7, r4
 8000ebe:	183b      	adds	r3, r7, r0
 8000ec0:	7819      	ldrb	r1, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffb7 	bl	8000e38 <to_hex_str>
    strcpy(out_buf, "AT+SEND \"");
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <format_at_send_cmd+0x64>)
 8000ece:	0010      	movs	r0, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	f005 fe10 	bl	8006afa <memcpy>
    strcat(out_buf, hex_str);
 8000eda:	193a      	adds	r2, r7, r4
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f005 fd51 	bl	8006988 <strcat>
    strcat(out_buf, "\"\r\n");
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff f90d 	bl	8000108 <strlen>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	189a      	adds	r2, r3, r2
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <format_at_send_cmd+0x68>)
 8000ef8:	0010      	movs	r0, r2
 8000efa:	0019      	movs	r1, r3
 8000efc:	2304      	movs	r3, #4
 8000efe:	001a      	movs	r2, r3
 8000f00:	f005 fdfb 	bl	8006afa <memcpy>
}
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b00f      	add	sp, #60	@ 0x3c
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	08007718 	.word	0x08007718
 8000f10:	08007724 	.word	0x08007724

08000f14 <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting I2C scan\n");
 8000f1a:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <scan_i2c_bus+0xd8>)
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f005 fc35 	bl	800678c <puts>
	
	// Reset sensor flags
	has_sensor_1 = false;
 8000f22:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <scan_i2c_bus+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 8000f28:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <scan_i2c_bus+0xe0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <scan_i2c_bus+0xe4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	2120      	movs	r1, #32
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 f979 	bl	800222c <HAL_GPIO_WritePin>
	printf("DEBUG: I2C power enabled\n");
 8000f3a:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <scan_i2c_bus+0xe8>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f005 fc25 	bl	800678c <puts>
    HAL_Delay(100); // let bus settle
 8000f42:	2064      	movs	r0, #100	@ 0x64
 8000f44:	f000 fc82 	bl	800184c <HAL_Delay>

    uint8_t addr;
    for (addr = 3; addr < 0x78; addr++)
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e02d      	b.n	8000fac <scan_i2c_bus+0x98>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	18db      	adds	r3, r3, r3
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	4829      	ldr	r0, [pc, #164]	@ (8001000 <scan_i2c_bus+0xec>)
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f001 fc5a 	bl	8002818 <HAL_I2C_IsDeviceReady>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d11c      	bne.n	8000fa2 <scan_i2c_bus+0x8e>
        {
        	printf("DEBUG: Found device at address 0x%02X\n", addr);
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <scan_i2c_bus+0xf0>)
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f005 fba5 	bl	80066c0 <iprintf>
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b44      	cmp	r3, #68	@ 0x44
 8000f7c:	d106      	bne.n	8000f8c <scan_i2c_bus+0x78>
        		has_sensor_1 = true;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <scan_i2c_bus+0xdc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 1 detected at 0x44\n");
 8000f84:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <scan_i2c_bus+0xf4>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f005 fc00 	bl	800678c <puts>
        	}
        	if (addr == 0x46) {
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b46      	cmp	r3, #70	@ 0x46
 8000f92:	d106      	bne.n	8000fa2 <scan_i2c_bus+0x8e>
        		has_sensor_2 = true;
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <scan_i2c_bus+0xe0>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 2 detected at 0x46\n");
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <scan_i2c_bus+0xf8>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f005 fbf5 	bl	800678c <puts>
    for (addr = 3; addr < 0x78; addr++)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	3201      	adds	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b77      	cmp	r3, #119	@ 0x77
 8000fb2:	d9cd      	bls.n	8000f50 <scan_i2c_bus+0x3c>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <scan_i2c_bus+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 f936 	bl	800222c <HAL_GPIO_WritePin>
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
           has_sensor_1 ? "found" : "not found",
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <scan_i2c_bus+0xdc>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <scan_i2c_bus+0xb8>
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <scan_i2c_bus+0xfc>)
 8000fca:	e000      	b.n	8000fce <scan_i2c_bus+0xba>
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <scan_i2c_bus+0x100>)
           has_sensor_2 ? "found" : "not found");
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <scan_i2c_bus+0xe0>)
 8000fd0:	7812      	ldrb	r2, [r2, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d001      	beq.n	8000fda <scan_i2c_bus+0xc6>
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <scan_i2c_bus+0xfc>)
 8000fd8:	e000      	b.n	8000fdc <scan_i2c_bus+0xc8>
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <scan_i2c_bus+0x100>)
 8000fdc:	480e      	ldr	r0, [pc, #56]	@ (8001018 <scan_i2c_bus+0x104>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	f005 fb6e 	bl	80066c0 <iprintf>
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08007728 	.word	0x08007728
 8000ff0:	20000270 	.word	0x20000270
 8000ff4:	20000271 	.word	0x20000271
 8000ff8:	50000400 	.word	0x50000400
 8000ffc:	08007744 	.word	0x08007744
 8001000:	20000088 	.word	0x20000088
 8001004:	08007760 	.word	0x08007760
 8001008:	08007788 	.word	0x08007788
 800100c:	080077ac 	.word	0x080077ac
 8001010:	080077d0 	.word	0x080077d0
 8001014:	080077d8 	.word	0x080077d8
 8001018:	080077e4 	.word	0x080077e4

0800101c <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting sensor initialization and reading\n");
 8001020:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <sensor_init_and_read+0x1bc>)
 8001022:	0018      	movs	r0, r3
 8001024:	f005 fbb2 	bl	800678c <puts>
	if (!has_sensor_1 && !has_sensor_2) {
 8001028:	4b6c      	ldr	r3, [pc, #432]	@ (80011dc <sensor_init_and_read+0x1c0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	4053      	eors	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00d      	beq.n	8001052 <sensor_init_and_read+0x36>
 8001036:	4b6a      	ldr	r3, [pc, #424]	@ (80011e0 <sensor_init_and_read+0x1c4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	4053      	eors	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <sensor_init_and_read+0x36>
		printf("DEBUG: No sensors detected, returning -1\n");
 8001044:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <sensor_init_and_read+0x1c8>)
 8001046:	0018      	movs	r0, r3
 8001048:	f005 fba0 	bl	800678c <puts>
		return -1;
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	e0be      	b.n	80011d0 <sensor_init_and_read+0x1b4>
	}
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001052:	4b65      	ldr	r3, [pc, #404]	@ (80011e8 <sensor_init_and_read+0x1cc>)
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	0018      	movs	r0, r3
 800105a:	f001 f8e7 	bl	800222c <HAL_GPIO_WritePin>
	printf("DEBUG: I2C power enabled for sensor reading\n");
 800105e:	4b63      	ldr	r3, [pc, #396]	@ (80011ec <sensor_init_and_read+0x1d0>)
 8001060:	0018      	movs	r0, r3
 8001062:	f005 fb93 	bl	800678c <puts>
	error = NO_ERROR;
 8001066:	4b62      	ldr	r3, [pc, #392]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 8001068:	2200      	movs	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	f000 fbed 	bl	800184c <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 8001072:	4b5a      	ldr	r3, [pc, #360]	@ (80011dc <sensor_init_and_read+0x1c0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d03e      	beq.n	80010f8 <sensor_init_and_read+0xdc>
	{
		printf("DEBUG: Initializing sensor 1 (0x44)\n");
 800107a:	4b5e      	ldr	r3, [pc, #376]	@ (80011f4 <sensor_init_and_read+0x1d8>)
 800107c:	0018      	movs	r0, r3
 800107e:	f005 fb85 	bl	800678c <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 8001082:	2044      	movs	r0, #68	@ 0x44
 8001084:	f000 fa98 	bl	80015b8 <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 1\n");
 8001088:	4b5b      	ldr	r3, [pc, #364]	@ (80011f8 <sensor_init_and_read+0x1dc>)
 800108a:	0018      	movs	r0, r3
 800108c:	f005 fb7e 	bl	800678c <puts>
		sht4x_soft_reset();
 8001090:	f000 fb06 	bl	80016a0 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001094:	4b59      	ldr	r3, [pc, #356]	@ (80011fc <sensor_init_and_read+0x1e0>)
 8001096:	0018      	movs	r0, r3
 8001098:	f000 fa64 	bl	8001564 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 1 after reset\n");
 800109c:	4b58      	ldr	r3, [pc, #352]	@ (8001200 <sensor_init_and_read+0x1e4>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f005 fb74 	bl	800678c <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 80010a4:	2044      	movs	r0, #68	@ 0x44
 80010a6:	f000 fa87 	bl	80015b8 <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 1\n");
 80010aa:	4b56      	ldr	r3, [pc, #344]	@ (8001204 <sensor_init_and_read+0x1e8>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f005 fb6d 	bl	800678c <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80010b2:	4a55      	ldr	r2, [pc, #340]	@ (8001208 <sensor_init_and_read+0x1ec>)
 80010b4:	4b55      	ldr	r3, [pc, #340]	@ (800120c <sensor_init_and_read+0x1f0>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fa8d 	bl	80015d8 <sht4x_measure_high_precision_ticks>
 80010be:	0003      	movs	r3, r0
 80010c0:	001a      	movs	r2, r3
 80010c2:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 80010c4:	801a      	strh	r2, [r3, #0]
		if (error != NO_ERROR) {
 80010c6:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	5e9b      	ldrsh	r3, [r3, r2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <sensor_init_and_read+0xc8>
			printf("ERROR: Sensor 1 measurement failed with error %d\n", error);
 80010d0:	4b47      	ldr	r3, [pc, #284]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	5e9b      	ldrsh	r3, [r3, r2]
 80010d6:	001a      	movs	r2, r3
 80010d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <sensor_init_and_read+0x1f4>)
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f005 faef 	bl	80066c0 <iprintf>
 80010e2:	e009      	b.n	80010f8 <sensor_init_and_read+0xdc>
		} else {
			printf("DEBUG: Sensor 1 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_1, hum_ticks_1);
 80010e4:	4b49      	ldr	r3, [pc, #292]	@ (800120c <sensor_init_and_read+0x1f0>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	0019      	movs	r1, r3
 80010ea:	4b47      	ldr	r3, [pc, #284]	@ (8001208 <sensor_init_and_read+0x1ec>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	001a      	movs	r2, r3
 80010f0:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <sensor_init_and_read+0x1f8>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f005 fae4 	bl	80066c0 <iprintf>
		}
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 80010f8:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <sensor_init_and_read+0x1c4>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d059      	beq.n	80011b4 <sensor_init_and_read+0x198>
	{
		printf("DEBUG: Initializing sensor 2 (0x46)\n");
 8001100:	4b45      	ldr	r3, [pc, #276]	@ (8001218 <sensor_init_and_read+0x1fc>)
 8001102:	0018      	movs	r0, r3
 8001104:	f005 fb42 	bl	800678c <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 8001108:	2046      	movs	r0, #70	@ 0x46
 800110a:	f000 fa55 	bl	80015b8 <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 2\n");
 800110e:	4b43      	ldr	r3, [pc, #268]	@ (800121c <sensor_init_and_read+0x200>)
 8001110:	0018      	movs	r0, r3
 8001112:	f005 fb3b 	bl	800678c <puts>
		sht4x_soft_reset();
 8001116:	f000 fac3 	bl	80016a0 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <sensor_init_and_read+0x1e0>)
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fa21 	bl	8001564 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 2 after reset\n");
 8001122:	4b3f      	ldr	r3, [pc, #252]	@ (8001220 <sensor_init_and_read+0x204>)
 8001124:	0018      	movs	r0, r3
 8001126:	f005 fb31 	bl	800678c <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 800112a:	2046      	movs	r0, #70	@ 0x46
 800112c:	f000 fa44 	bl	80015b8 <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 2\n");
 8001130:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <sensor_init_and_read+0x208>)
 8001132:	0018      	movs	r0, r3
 8001134:	f005 fb2a 	bl	800678c <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001138:	4a3b      	ldr	r2, [pc, #236]	@ (8001228 <sensor_init_and_read+0x20c>)
 800113a:	4b3c      	ldr	r3, [pc, #240]	@ (800122c <sensor_init_and_read+0x210>)
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fa4a 	bl	80015d8 <sht4x_measure_high_precision_ticks>
 8001144:	0003      	movs	r3, r0
 8001146:	001a      	movs	r2, r3
 8001148:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 800114a:	801a      	strh	r2, [r3, #0]
		if (error != NO_ERROR) {
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 800114e:	2200      	movs	r2, #0
 8001150:	5e9b      	ldrsh	r3, [r3, r2]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <sensor_init_and_read+0x14e>
			printf("ERROR: Sensor 2 measurement failed with error %d\n", error);
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 8001158:	2200      	movs	r2, #0
 800115a:	5e9b      	ldrsh	r3, [r3, r2]
 800115c:	001a      	movs	r2, r3
 800115e:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <sensor_init_and_read+0x214>)
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f005 faac 	bl	80066c0 <iprintf>
 8001168:	e024      	b.n	80011b4 <sensor_init_and_read+0x198>
		} else {
			printf("DEBUG: Sensor 2 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_2, hum_ticks_2);
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <sensor_init_and_read+0x210>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	0019      	movs	r1, r3
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <sensor_init_and_read+0x20c>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	001a      	movs	r2, r3
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <sensor_init_and_read+0x218>)
 8001178:	0018      	movs	r0, r3
 800117a:	f005 faa1 	bl	80066c0 <iprintf>
			temp_ticks_2 = ((temp_ticks_2 / 1000) * 100) + 55;
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <sensor_init_and_read+0x210>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	22fa      	movs	r2, #250	@ 0xfa
 8001184:	0091      	lsls	r1, r2, #2
 8001186:	0018      	movs	r0, r3
 8001188:	f7fe ffd0 	bl	800012c <__udivsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	2264      	movs	r2, #100	@ 0x64
 8001192:	4353      	muls	r3, r2
 8001194:	b29b      	uxth	r3, r3
 8001196:	3337      	adds	r3, #55	@ 0x37
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b24      	ldr	r3, [pc, #144]	@ (800122c <sensor_init_and_read+0x210>)
 800119c:	801a      	strh	r2, [r3, #0]
			hum_ticks_2 = (hum_ticks_2 / 1000);
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <sensor_init_and_read+0x20c>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	22fa      	movs	r2, #250	@ 0xfa
 80011a4:	0091      	lsls	r1, r2, #2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7fe ffc0 	bl	800012c <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <sensor_init_and_read+0x20c>)
 80011b2:	801a      	strh	r2, [r3, #0]
		}
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <sensor_init_and_read+0x1cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 f836 	bl	800222c <HAL_GPIO_WritePin>

	if (error) return (-200);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <sensor_init_and_read+0x1d4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	5e9b      	ldrsh	r3, [r3, r2]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <sensor_init_and_read+0x1b4>
 80011ca:	23c8      	movs	r3, #200	@ 0xc8
 80011cc:	425b      	negs	r3, r3
 80011ce:	e7ff      	b.n	80011d0 <sensor_init_and_read+0x1b4>
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	0800781c 	.word	0x0800781c
 80011dc:	20000270 	.word	0x20000270
 80011e0:	20000271 	.word	0x20000271
 80011e4:	08007850 	.word	0x08007850
 80011e8:	50000400 	.word	0x50000400
 80011ec:	0800787c 	.word	0x0800787c
 80011f0:	2000027a 	.word	0x2000027a
 80011f4:	080078a8 	.word	0x080078a8
 80011f8:	080078cc 	.word	0x080078cc
 80011fc:	00002710 	.word	0x00002710
 8001200:	080078f8 	.word	0x080078f8
 8001204:	08007924 	.word	0x08007924
 8001208:	20000274 	.word	0x20000274
 800120c:	20000272 	.word	0x20000272
 8001210:	08007950 	.word	0x08007950
 8001214:	08007984 	.word	0x08007984
 8001218:	080079c0 	.word	0x080079c0
 800121c:	080079e4 	.word	0x080079e4
 8001220:	08007a10 	.word	0x08007a10
 8001224:	08007a3c 	.word	0x08007a3c
 8001228:	20000278 	.word	0x20000278
 800122c:	20000276 	.word	0x20000276
 8001230:	08007a68 	.word	0x08007a68
 8001234:	08007a9c 	.word	0x08007a9c

08001238 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b21b      	sxth	r3, r3
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b21a      	sxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	b29b      	uxth	r3, r3
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	000a      	movs	r2, r1
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800126e:	230d      	movs	r3, #13
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	22ff      	movs	r2, #255	@ 0xff
 8001274:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001276:	230e      	movs	r3, #14
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	e038      	b.n	80012f2 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001280:	230e      	movs	r3, #14
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	220d      	movs	r2, #13
 800128e:	18bb      	adds	r3, r7, r2
 8001290:	18ba      	adds	r2, r7, r2
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	404a      	eors	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001298:	230c      	movs	r3, #12
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	2208      	movs	r2, #8
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e01c      	b.n	80012dc <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80012a2:	210d      	movs	r1, #13
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da0a      	bge.n	80012c4 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	18db      	adds	r3, r3, r3
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2231      	movs	r2, #49	@ 0x31
 80012ba:	4053      	eors	r3, r2
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e005      	b.n	80012d0 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80012c4:	230d      	movs	r3, #13
 80012c6:	18fa      	adds	r2, r7, r3
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	18db      	adds	r3, r3, r3
 80012ce:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80012d0:	220c      	movs	r2, #12
 80012d2:	18bb      	adds	r3, r7, r2
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	3a01      	subs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	230c      	movs	r3, #12
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1dd      	bne.n	80012a2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80012e6:	220e      	movs	r2, #14
 80012e8:	18bb      	adds	r3, r7, r2
 80012ea:	18ba      	adds	r2, r7, r2
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	3201      	adds	r2, #1
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	230e      	movs	r3, #14
 80012f4:	18fa      	adds	r2, r7, r3
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3bf      	bcc.n	8001280 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001300:	230d      	movs	r3, #13
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	781b      	ldrb	r3, [r3, #0]
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}

0800130e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	0008      	movs	r0, r1
 8001318:	0011      	movs	r1, r2
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	1c02      	adds	r2, r0, #0
 800131e:	801a      	strh	r2, [r3, #0]
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	1c0a      	adds	r2, r1, #0
 8001324:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	881a      	ldrh	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff96 	bl	8001260 <sensirion_i2c_generate_crc>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	1c7b      	adds	r3, r7, #1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4293      	cmp	r3, r2
 800133e:	d001      	beq.n	8001344 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001344:	2300      	movs	r3, #0
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}

0800134e <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	0008      	movs	r0, r1
 8001358:	0011      	movs	r1, r2
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	1c02      	adds	r2, r0, #0
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	1c7b      	adds	r3, r7, #1
 8001362:	1c0a      	adds	r2, r1, #0
 8001364:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001366:	1cbb      	adds	r3, r7, #2
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	1cba      	adds	r2, r7, #2
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	8011      	strh	r1, [r2, #0]
 8001370:	001a      	movs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	189b      	adds	r3, r3, r2
 8001376:	1c7a      	adds	r2, r7, #1
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	701a      	strb	r2, [r3, #0]
    return offset;
 800137c:	1cbb      	adds	r3, r7, #2
 800137e:	881b      	ldrh	r3, [r3, #0]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6039      	str	r1, [r7, #0]
 8001390:	0011      	movs	r1, r2
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	1c02      	adds	r2, r0, #0
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	1c0a      	adds	r2, r1, #0
 800139c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f8b8 	bl	8001520 <sensirion_i2c_hal_write>
 80013b0:	0003      	movs	r3, r0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}

080013ba <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80013ba:	b5b0      	push	{r4, r5, r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	0011      	movs	r1, r2
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	1c02      	adds	r2, r0, #0
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	1c0a      	adds	r2, r1, #0
 80013ce:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	220a      	movs	r2, #10
 80013da:	18ba      	adds	r2, r7, r2
 80013dc:	1c19      	adds	r1, r3, #0
 80013de:	1c0b      	adds	r3, r1, #0
 80013e0:	18db      	adds	r3, r3, r3
 80013e2:	185b      	adds	r3, r3, r1
 80013e4:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80013f4:	2304      	movs	r3, #4
 80013f6:	e06c      	b.n	80014d2 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80013f8:	230a      	movs	r3, #10
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f868 	bl	80014dc <sensirion_i2c_hal_read>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	2108      	movs	r1, #8
 8001412:	187b      	adds	r3, r7, r1
 8001414:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001416:	000a      	movs	r2, r1
 8001418:	18bb      	adds	r3, r7, r2
 800141a:	2100      	movs	r1, #0
 800141c:	5e5b      	ldrsh	r3, [r3, r1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8001422:	18bb      	adds	r3, r7, r2
 8001424:	2200      	movs	r2, #0
 8001426:	5e9b      	ldrsh	r3, [r3, r2]
 8001428:	e053      	b.n	80014d2 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800142a:	230e      	movs	r3, #14
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	230c      	movs	r3, #12
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	e041      	b.n	80014c0 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800143c:	210e      	movs	r1, #14
 800143e:	187b      	adds	r3, r7, r1
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001446:	187b      	adds	r3, r7, r1
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	3302      	adds	r3, #2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	001a      	movs	r2, r3
 8001454:	2102      	movs	r1, #2
 8001456:	f7ff ff5a 	bl	800130e <sensirion_i2c_check_crc>
 800145a:	0003      	movs	r3, r0
 800145c:	001a      	movs	r2, r3
 800145e:	2108      	movs	r1, #8
 8001460:	187b      	adds	r3, r7, r1
 8001462:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001464:	000a      	movs	r2, r1
 8001466:	18bb      	adds	r3, r7, r2
 8001468:	2100      	movs	r1, #0
 800146a:	5e5b      	ldrsh	r3, [r3, r1]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001470:	18bb      	adds	r3, r7, r2
 8001472:	2200      	movs	r2, #0
 8001474:	5e9b      	ldrsh	r3, [r3, r2]
 8001476:	e02c      	b.n	80014d2 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001478:	240e      	movs	r4, #14
 800147a:	193b      	adds	r3, r7, r4
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	18d2      	adds	r2, r2, r3
 8001482:	250c      	movs	r5, #12
 8001484:	197b      	adds	r3, r7, r5
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	1979      	adds	r1, r7, r5
 800148a:	1c58      	adds	r0, r3, #1
 800148c:	8008      	strh	r0, [r1, #0]
 800148e:	0019      	movs	r1, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	185b      	adds	r3, r3, r1
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001498:	193b      	adds	r3, r7, r4
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	18d2      	adds	r2, r2, r3
 80014a2:	197b      	adds	r3, r7, r5
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	1979      	adds	r1, r7, r5
 80014a8:	1c58      	adds	r0, r3, #1
 80014aa:	8008      	strh	r0, [r1, #0]
 80014ac:	0019      	movs	r1, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	185b      	adds	r3, r3, r1
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	193a      	adds	r2, r7, r4
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	3203      	adds	r2, #3
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	230e      	movs	r3, #14
 80014c2:	18fa      	adds	r2, r7, r3
 80014c4:	230a      	movs	r3, #10
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	8812      	ldrh	r2, [r2, #0]
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3b5      	bcc.n	800143c <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014dc <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b085      	sub	sp, #20
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6039      	str	r1, [r7, #0]
 80014e4:	0011      	movs	r1, r2
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	1c02      	adds	r2, r0, #0
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	1c0a      	adds	r2, r1, #0
 80014f0:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	18db      	adds	r3, r3, r3
 80014fa:	b299      	uxth	r1, r3
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <sensirion_i2c_hal_read+0x40>)
 8001506:	2464      	movs	r4, #100	@ 0x64
 8001508:	9400      	str	r4, [sp, #0]
 800150a:	f001 f87d 	bl	8002608 <HAL_I2C_Master_Receive>
 800150e:	0003      	movs	r3, r0
 8001510:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b003      	add	sp, #12
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	2000027c 	.word	0x2000027c

08001520 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af02      	add	r7, sp, #8
 8001526:	6039      	str	r1, [r7, #0]
 8001528:	0011      	movs	r1, r2
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	1c02      	adds	r2, r0, #0
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	1c0a      	adds	r2, r1, #0
 8001534:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	18db      	adds	r3, r3, r3
 800153e:	b299      	uxth	r1, r3
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <sensirion_i2c_hal_write+0x40>)
 800154a:	2464      	movs	r4, #100	@ 0x64
 800154c:	9400      	str	r4, [sp, #0]
 800154e:	f000 ff31 	bl	80023b4 <HAL_I2C_Master_Transmit>
 8001552:	0003      	movs	r3, r0
 8001554:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b003      	add	sp, #12
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	2000027c 	.word	0x2000027c

08001564 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	22fa      	movs	r2, #250	@ 0xfa
 8001570:	0091      	lsls	r1, r2, #2
 8001572:	0018      	movs	r0, r3
 8001574:	f7fe fdda 	bl	800012c <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	22fa      	movs	r2, #250	@ 0xfa
 8001580:	0091      	lsls	r1, r2, #2
 8001582:	0018      	movs	r0, r3
 8001584:	f7fe fe58 	bl	8000238 <__aeabi_uidivmod>
 8001588:	1e0b      	subs	r3, r1, #0
 800158a:	d002      	beq.n	8001592 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001592:	f000 f99b 	bl	80018cc <HAL_GetHalVersion>
 8001596:	0003      	movs	r3, r0
 8001598:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <sensirion_i2c_hal_sleep_usec+0x50>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d802      	bhi.n	80015a4 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f950 	bl	800184c <HAL_Delay>
}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	010100ff 	.word	0x010100ff

080015b8 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <sht4x_init+0x1c>)
 80015c6:	1dfa      	adds	r2, r7, #7
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200002d6 	.word	0x200002d6

080015d8 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80015e2:	2516      	movs	r5, #22
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	2200      	movs	r2, #0
 80015e8:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <sht4x_measure_high_precision_ticks+0xbc>)
 80015ec:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 80015ee:	260e      	movs	r6, #14
 80015f0:	19bb      	adds	r3, r7, r6
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 80015f6:	19bc      	adds	r4, r7, r6
 80015f8:	19bb      	adds	r3, r7, r6
 80015fa:	8819      	ldrh	r1, [r3, #0]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	22fd      	movs	r2, #253	@ 0xfd
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fea4 	bl	800134e <sensirion_i2c_add_command8_to_buffer>
 8001606:	0003      	movs	r3, r0
 8001608:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <sht4x_measure_high_precision_ticks+0xc0>)
 800160c:	7818      	ldrb	r0, [r3, #0]
 800160e:	197c      	adds	r4, r7, r5
 8001610:	19bb      	adds	r3, r7, r6
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	0019      	movs	r1, r3
 8001618:	f7ff feb6 	bl	8001388 <sensirion_i2c_write_data>
 800161c:	0003      	movs	r3, r0
 800161e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001620:	197b      	adds	r3, r7, r5
 8001622:	2200      	movs	r2, #0
 8001624:	5e9b      	ldrsh	r3, [r3, r2]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 800162a:	197b      	adds	r3, r7, r5
 800162c:	2200      	movs	r2, #0
 800162e:	5e9b      	ldrsh	r3, [r3, r2]
 8001630:	e02c      	b.n	800168c <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <sht4x_measure_high_precision_ticks+0xc4>)
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff95 	bl	8001564 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <sht4x_measure_high_precision_ticks+0xc0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2516      	movs	r5, #22
 8001640:	197c      	adds	r4, r7, r5
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	2204      	movs	r2, #4
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff feb7 	bl	80013ba <sensirion_i2c_read_data_inplace>
 800164c:	0003      	movs	r3, r0
 800164e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001650:	197b      	adds	r3, r7, r5
 8001652:	2200      	movs	r2, #0
 8001654:	5e9b      	ldrsh	r3, [r3, r2]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 800165a:	197b      	adds	r3, r7, r5
 800165c:	2200      	movs	r2, #0
 800165e:	5e9b      	ldrsh	r3, [r3, r2]
 8001660:	e014      	b.n	800168c <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fde7 	bl	8001238 <sensirion_common_bytes_to_uint16_t>
 800166a:	0003      	movs	r3, r0
 800166c:	001a      	movs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3302      	adds	r3, #2
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fdde 	bl	8001238 <sensirion_common_bytes_to_uint16_t>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001684:	2316      	movs	r3, #22
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	2200      	movs	r2, #0
 800168a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b007      	add	sp, #28
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001694:	200002d0 	.word	0x200002d0
 8001698:	200002d6 	.word	0x200002d6
 800169c:	00002710 	.word	0x00002710

080016a0 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80016a6:	250e      	movs	r5, #14
 80016a8:	197b      	adds	r3, r7, r5
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <sht4x_soft_reset+0x6c>)
 80016b0:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 80016b8:	1dbc      	adds	r4, r7, #6
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	8819      	ldrh	r1, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2294      	movs	r2, #148	@ 0x94
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff fe43 	bl	800134e <sensirion_i2c_add_command8_to_buffer>
 80016c8:	0003      	movs	r3, r0
 80016ca:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <sht4x_soft_reset+0x70>)
 80016ce:	7818      	ldrb	r0, [r3, #0]
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	1dbb      	adds	r3, r7, #6
 80016d4:	881a      	ldrh	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	0019      	movs	r1, r3
 80016da:	f7ff fe55 	bl	8001388 <sensirion_i2c_write_data>
 80016de:	0003      	movs	r3, r0
 80016e0:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80016e2:	197b      	adds	r3, r7, r5
 80016e4:	2200      	movs	r2, #0
 80016e6:	5e9b      	ldrsh	r3, [r3, r2]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <sht4x_soft_reset+0x54>
        return local_error;
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	2200      	movs	r2, #0
 80016f0:	5e9b      	ldrsh	r3, [r3, r2]
 80016f2:	e007      	b.n	8001704 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <sht4x_soft_reset+0x74>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff34 	bl	8001564 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80016fc:	230e      	movs	r3, #14
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2200      	movs	r2, #0
 8001702:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	200002d0 	.word	0x200002d0
 8001710:	200002d6 	.word	0x200002d6
 8001714:	00002710 	.word	0x00002710

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f7ff fa86 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001746:	f005 f9a9 	bl	8006a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7fe ffeb 	bl	8000724 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
   ldr   r0, =_estack
 8001750:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800175c:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 8001760:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001764:	20000428 	.word	0x20000428

08001768 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_COMP_IRQHandler>
	...

0800176c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_Init+0x3c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_Init+0x3c>)
 800177e:	2140      	movs	r1, #64	@ 0x40
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001784:	2000      	movs	r0, #0
 8001786:	f000 f811 	bl	80017ac <HAL_InitTick>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d003      	beq.n	8001796 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e001      	b.n	800179a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001796:	f7ff f94f 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_InitTick+0x5c>)
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_InitTick+0x60>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0019      	movs	r1, r3
 80017be:	23fa      	movs	r3, #250	@ 0xfa
 80017c0:	0098      	lsls	r0, r3, #2
 80017c2:	f7fe fcb3 	bl	800012c <__udivsi3>
 80017c6:	0003      	movs	r3, r0
 80017c8:	0019      	movs	r1, r3
 80017ca:	0020      	movs	r0, r4
 80017cc:	f7fe fcae 	bl	800012c <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 f953 	bl	8001a7e <HAL_SYSTICK_Config>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e00f      	b.n	8001800 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d80b      	bhi.n	80017fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2301      	movs	r3, #1
 80017ea:	425b      	negs	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f920 	bl	8001a34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_InitTick+0x64>)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b003      	add	sp, #12
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	20000004 	.word	0x20000004
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	001a      	movs	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	18d2      	adds	r2, r2, r3
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_IncTick+0x20>)
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	2000000c 	.word	0x2000000c
 8001834:	200002d8 	.word	0x200002d8

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	@ (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	200002d8 	.word	0x200002d8

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fff0 	bl	8001838 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	001a      	movs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	189b      	adds	r3, r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	f7ff ffe0 	bl	8001838 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <HAL_SuspendTick+0x18>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_SuspendTick+0x18>)
 800189e:	2102      	movs	r1, #2
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <HAL_ResumeTick+0x18>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_ResumeTick+0x18>)
 80018ba:	2102      	movs	r1, #2
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	46c0      	nop			@ (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 80018d0:	4b01      	ldr	r3, [pc, #4]	@ (80018d8 <HAL_GetHalVersion+0xc>)
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	010a0700 	.word	0x010a0700

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	0002      	movs	r2, r0
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ee:	d809      	bhi.n	8001904 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	001a      	movs	r2, r3
 80018f6:	231f      	movs	r3, #31
 80018f8:	401a      	ands	r2, r3
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_EnableIRQ+0x30>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	4091      	lsls	r1, r2
 8001900:	000a      	movs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
  }
}
 8001904:	46c0      	nop			@ (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	0002      	movs	r2, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b7f      	cmp	r3, #127	@ 0x7f
 8001924:	d828      	bhi.n	8001978 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001926:	4a2f      	ldr	r2, [pc, #188]	@ (80019e4 <__NVIC_SetPriority+0xd4>)
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	33c0      	adds	r3, #192	@ 0xc0
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	589b      	ldr	r3, [r3, r2]
 8001936:	1dfa      	adds	r2, r7, #7
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	0011      	movs	r1, r2
 800193c:	2203      	movs	r2, #3
 800193e:	400a      	ands	r2, r1
 8001940:	00d2      	lsls	r2, r2, #3
 8001942:	21ff      	movs	r1, #255	@ 0xff
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	43d2      	mvns	r2, r2
 800194a:	401a      	ands	r2, r3
 800194c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	22ff      	movs	r2, #255	@ 0xff
 8001954:	401a      	ands	r2, r3
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	0018      	movs	r0, r3
 800195c:	2303      	movs	r3, #3
 800195e:	4003      	ands	r3, r0
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001964:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <__NVIC_SetPriority+0xd4>)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b25b      	sxtb	r3, r3
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	430a      	orrs	r2, r1
 8001970:	33c0      	adds	r3, #192	@ 0xc0
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001976:	e031      	b.n	80019dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <__NVIC_SetPriority+0xd8>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	0019      	movs	r1, r3
 8001980:	230f      	movs	r3, #15
 8001982:	400b      	ands	r3, r1
 8001984:	3b08      	subs	r3, #8
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3306      	adds	r3, #6
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	18d3      	adds	r3, r2, r3
 800198e:	3304      	adds	r3, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1dfa      	adds	r2, r7, #7
 8001994:	7812      	ldrb	r2, [r2, #0]
 8001996:	0011      	movs	r1, r2
 8001998:	2203      	movs	r2, #3
 800199a:	400a      	ands	r2, r1
 800199c:	00d2      	lsls	r2, r2, #3
 800199e:	21ff      	movs	r1, #255	@ 0xff
 80019a0:	4091      	lsls	r1, r2
 80019a2:	000a      	movs	r2, r1
 80019a4:	43d2      	mvns	r2, r2
 80019a6:	401a      	ands	r2, r3
 80019a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	019b      	lsls	r3, r3, #6
 80019ae:	22ff      	movs	r2, #255	@ 0xff
 80019b0:	401a      	ands	r2, r3
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	0018      	movs	r0, r3
 80019b8:	2303      	movs	r3, #3
 80019ba:	4003      	ands	r3, r0
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <__NVIC_SetPriority+0xd8>)
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	001c      	movs	r4, r3
 80019c8:	230f      	movs	r3, #15
 80019ca:	4023      	ands	r3, r4
 80019cc:	3b08      	subs	r3, #8
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	430a      	orrs	r2, r1
 80019d2:	3306      	adds	r3, #6
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	18c3      	adds	r3, r0, r3
 80019d8:	3304      	adds	r3, #4
 80019da:	601a      	str	r2, [r3, #0]
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b003      	add	sp, #12
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	045b      	lsls	r3, r3, #17
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d301      	bcc.n	8001a04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a00:	2301      	movs	r3, #1
 8001a02:	e010      	b.n	8001a26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <SysTick_Config+0x44>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	425b      	negs	r3, r3
 8001a10:	2103      	movs	r1, #3
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff ff7c 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x44>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x44>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	210f      	movs	r1, #15
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	1c02      	adds	r2, r0, #0
 8001a44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	0011      	movs	r1, r2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b004      	add	sp, #16
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	0002      	movs	r2, r0
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff33 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff ffaf 	bl	80019ec <SysTick_Config>
 8001a8e:	0003      	movs	r3, r0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e061      	b.n	8001b6e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a32      	ldr	r2, [pc, #200]	@ (8001b78 <HAL_DMA_Init+0xe0>)
 8001ab0:	4694      	mov	ip, r2
 8001ab2:	4463      	add	r3, ip
 8001ab4:	2114      	movs	r1, #20
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7fe fb38 	bl	800012c <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b7c <HAL_DMA_Init+0xe4>)
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2225      	movs	r2, #37	@ 0x25
 8001ace:	2102      	movs	r1, #2
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <HAL_DMA_Init+0xe8>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	01db      	lsls	r3, r3, #7
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d018      	beq.n	8001b56 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_DMA_Init+0xec>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	211c      	movs	r1, #28
 8001b2e:	400b      	ands	r3, r1
 8001b30:	210f      	movs	r1, #15
 8001b32:	4099      	lsls	r1, r3
 8001b34:	000b      	movs	r3, r1
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_DMA_Init+0xec>)
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_DMA_Init+0xec>)
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	4003      	ands	r3, r0
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_DMA_Init+0xec>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2225      	movs	r2, #37	@ 0x25
 8001b60:	2101      	movs	r1, #1
 8001b62:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	bffdfff8 	.word	0xbffdfff8
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	ffff800f 	.word	0xffff800f
 8001b84:	400200a8 	.word	0x400200a8

08001b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2317      	movs	r3, #23
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2224      	movs	r2, #36	@ 0x24
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA_Start_IT+0x24>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e04f      	b.n	8001c4c <HAL_DMA_Start_IT+0xc4>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2224      	movs	r2, #36	@ 0x24
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2225      	movs	r2, #37	@ 0x25
 8001bb8:	5c9b      	ldrb	r3, [r3, r2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d13a      	bne.n	8001c36 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2225      	movs	r2, #37	@ 0x25
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f974 	bl	8001ed2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	210e      	movs	r1, #14
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e00f      	b.n	8001c24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2104      	movs	r1, #4
 8001c10:	438a      	bics	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	210a      	movs	r1, #10
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2224      	movs	r2, #36	@ 0x24
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c3e:	2317      	movs	r3, #23
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2202      	movs	r2, #2
 8001c44:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001c46:	2317      	movs	r3, #23
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b006      	add	sp, #24
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2225      	movs	r2, #37	@ 0x25
 8001c68:	5c9b      	ldrb	r3, [r3, r2]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2224      	movs	r2, #36	@ 0x24
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e024      	b.n	8001ccc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	210e      	movs	r1, #14
 8001c8e:	438a      	bics	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	221c      	movs	r2, #28
 8001ca8:	401a      	ands	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2225      	movs	r2, #37	@ 0x25
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	@ 0x24
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5499      	strb	r1, [r3, r2]

    return status;
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b004      	add	sp, #16
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	210f      	movs	r1, #15
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2225      	movs	r2, #37	@ 0x25
 8001ce8:	5c9b      	ldrb	r3, [r3, r2]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d006      	beq.n	8001cfe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	e02a      	b.n	8001d54 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	210e      	movs	r1, #14
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	221c      	movs	r2, #28
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4091      	lsls	r1, r2
 8001d2e:	000a      	movs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2225      	movs	r2, #37	@ 0x25
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2224      	movs	r2, #36	@ 0x24
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	0010      	movs	r0, r2
 8001d52:	4798      	blx	r3
    }
  }
  return status;
 8001d54:	230f      	movs	r3, #15
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	221c      	movs	r2, #28
 8001d80:	4013      	ands	r3, r2
 8001d82:	2204      	movs	r2, #4
 8001d84:	409a      	lsls	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d026      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x7a>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2204      	movs	r2, #4
 8001d92:	4013      	ands	r3, r2
 8001d94:	d022      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d107      	bne.n	8001db2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2104      	movs	r1, #4
 8001dae:	438a      	bics	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	221c      	movs	r2, #28
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4091      	lsls	r1, r2
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d100      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x6e>
 8001dce:	e071      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001dda:	e06b      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	221c      	movs	r2, #28
 8001de2:	4013      	ands	r3, r2
 8001de4:	2202      	movs	r2, #2
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	d02d      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xea>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d029      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4013      	ands	r3, r2
 8001e02:	d10b      	bne.n	8001e1c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	210a      	movs	r1, #10
 8001e10:	438a      	bics	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2225      	movs	r2, #37	@ 0x25
 8001e18:	2101      	movs	r1, #1
 8001e1a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e20:	221c      	movs	r2, #28
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4091      	lsls	r1, r2
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d039      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	0010      	movs	r0, r2
 8001e48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e4a:	e033      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	221c      	movs	r2, #28
 8001e52:	4013      	ands	r3, r2
 8001e54:	2208      	movs	r2, #8
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d02a      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x154>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4013      	ands	r3, r2
 8001e66:	d026      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	210e      	movs	r1, #14
 8001e74:	438a      	bics	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7c:	221c      	movs	r2, #28
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	2101      	movs	r1, #1
 8001e86:	4091      	lsls	r1, r2
 8001e88:	000a      	movs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2225      	movs	r2, #37	@ 0x25
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2224      	movs	r2, #36	@ 0x24
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001eb4:	46c0      	nop			@ (mov r8, r8)
 8001eb6:	46c0      	nop			@ (mov r8, r8)
}
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	221c      	movs	r2, #28
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2101      	movs	r1, #1
 8001eee:	4091      	lsls	r1, r2
 8001ef0:	000a      	movs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	d108      	bne.n	8001f16 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f14:	e007      	b.n	8001f26 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	60da      	str	r2, [r3, #12]
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f46:	e155      	b.n	80021f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_GPIO_Init+0x30>
 8001f5e:	e146      	b.n	80021ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d130      	bne.n	8001fda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	409a      	lsls	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d017      	beq.n	8002016 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	4013      	ands	r3, r2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d123      	bne.n	800206a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	58d3      	ldr	r3, [r2, r3]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2207      	movs	r2, #7
 8002034:	4013      	ands	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2107      	movs	r1, #7
 800204e:	400b      	ands	r3, r1
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	6939      	ldr	r1, [r7, #16]
 8002068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	43da      	mvns	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	401a      	ands	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	23c0      	movs	r3, #192	@ 0xc0
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_GPIO_Init+0x17c>
 80020aa:	e0a0      	b.n	80021ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ac:	4b57      	ldr	r3, [pc, #348]	@ (800220c <HAL_GPIO_Init+0x2dc>)
 80020ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b0:	4b56      	ldr	r3, [pc, #344]	@ (800220c <HAL_GPIO_Init+0x2dc>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b8:	4a55      	ldr	r2, [pc, #340]	@ (8002210 <HAL_GPIO_Init+0x2e0>)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	409a      	lsls	r2, r3
 80020d2:	0013      	movs	r3, r2
 80020d4:	43da      	mvns	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	23a0      	movs	r3, #160	@ 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d01f      	beq.n	8002126 <HAL_GPIO_Init+0x1f6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002214 <HAL_GPIO_Init+0x2e4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d019      	beq.n	8002122 <HAL_GPIO_Init+0x1f2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a49      	ldr	r2, [pc, #292]	@ (8002218 <HAL_GPIO_Init+0x2e8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0x1ee>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a48      	ldr	r2, [pc, #288]	@ (800221c <HAL_GPIO_Init+0x2ec>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00d      	beq.n	800211a <HAL_GPIO_Init+0x1ea>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a47      	ldr	r2, [pc, #284]	@ (8002220 <HAL_GPIO_Init+0x2f0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x1e6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a46      	ldr	r2, [pc, #280]	@ (8002224 <HAL_GPIO_Init+0x2f4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_GPIO_Init+0x1e2>
 800210e:	2305      	movs	r3, #5
 8002110:	e00a      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 8002112:	2306      	movs	r3, #6
 8002114:	e008      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 8002116:	2304      	movs	r3, #4
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 800211a:	2303      	movs	r3, #3
 800211c:	e004      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 800211e:	2302      	movs	r3, #2
 8002120:	e002      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x1f8>
 8002126:	2300      	movs	r3, #0
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	2103      	movs	r1, #3
 800212c:	400a      	ands	r2, r1
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4093      	lsls	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002138:	4935      	ldr	r1, [pc, #212]	@ (8002210 <HAL_GPIO_Init+0x2e0>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43da      	mvns	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	035b      	lsls	r3, r3, #13
 800215e:	4013      	ands	r3, r2
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002170:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43da      	mvns	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	039b      	lsls	r3, r3, #14
 8002188:	4013      	ands	r3, r2
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c4:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	4013      	ands	r3, r2
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	40da      	lsrs	r2, r3
 80021fc:	1e13      	subs	r3, r2, #0
 80021fe:	d000      	beq.n	8002202 <HAL_GPIO_Init+0x2d2>
 8002200:	e6a2      	b.n	8001f48 <HAL_GPIO_Init+0x18>
  }
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b006      	add	sp, #24
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	50000400 	.word	0x50000400
 8002218:	50000800 	.word	0x50000800
 800221c:	50000c00 	.word	0x50000c00
 8002220:	50001000 	.word	0x50001000
 8002224:	50001c00 	.word	0x50001c00
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	0008      	movs	r0, r1
 8002236:	0011      	movs	r1, r2
 8002238:	1cbb      	adds	r3, r7, #2
 800223a:	1c02      	adds	r2, r0, #0
 800223c:	801a      	strh	r2, [r3, #0]
 800223e:	1c7b      	adds	r3, r7, #1
 8002240:	1c0a      	adds	r2, r1, #0
 8002242:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002244:	1c7b      	adds	r3, r7, #1
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224c:	1cbb      	adds	r3, r7, #2
 800224e:	881a      	ldrh	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002256:	1cbb      	adds	r3, r7, #2
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e08f      	b.n	800239a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	@ 0x41
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2240      	movs	r2, #64	@ 0x40
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe f99f 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2241      	movs	r2, #65	@ 0x41
 800229a:	2124      	movs	r1, #36	@ 0x24
 800229c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	438a      	bics	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	493b      	ldr	r1, [pc, #236]	@ (80023a4 <HAL_I2C_Init+0x13c>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4938      	ldr	r1, [pc, #224]	@ (80023a8 <HAL_I2C_Init+0x140>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2180      	movs	r1, #128	@ 0x80
 80022de:	0209      	lsls	r1, r1, #8
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	e007      	b.n	80022f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2184      	movs	r1, #132	@ 0x84
 80022f0:	0209      	lsls	r1, r1, #8
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d109      	bne.n	8002312 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	0109      	lsls	r1, r1, #4
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	e007      	b.n	8002322 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4923      	ldr	r1, [pc, #140]	@ (80023ac <HAL_I2C_Init+0x144>)
 800231e:	400a      	ands	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4920      	ldr	r1, [pc, #128]	@ (80023b0 <HAL_I2C_Init+0x148>)
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	491a      	ldr	r1, [pc, #104]	@ (80023a8 <HAL_I2C_Init+0x140>)
 800233e:	400a      	ands	r2, r1
 8002340:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	431a      	orrs	r2, r3
 800234c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2101      	movs	r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2241      	movs	r2, #65	@ 0x41
 8002386:	2120      	movs	r1, #32
 8002388:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2242      	movs	r2, #66	@ 0x42
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	f0ffffff 	.word	0xf0ffffff
 80023a8:	ffff7fff 	.word	0xffff7fff
 80023ac:	fffff7ff 	.word	0xfffff7ff
 80023b0:	02008000 	.word	0x02008000

080023b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b089      	sub	sp, #36	@ 0x24
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	0008      	movs	r0, r1
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	0019      	movs	r1, r3
 80023c2:	230a      	movs	r3, #10
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	1c02      	adds	r2, r0, #0
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	2308      	movs	r3, #8
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	1c0a      	adds	r2, r1, #0
 80023d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2241      	movs	r2, #65	@ 0x41
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d000      	beq.n	80023e0 <HAL_I2C_Master_Transmit+0x2c>
 80023de:	e10a      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Master_Transmit+0x3a>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e104      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023f6:	f7ff fa1f 	bl	8001838 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	0219      	lsls	r1, r3, #8
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	f000 fb22 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0ef      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2241      	movs	r2, #65	@ 0x41
 800241c:	2121      	movs	r1, #33	@ 0x21
 800241e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2242      	movs	r2, #66	@ 0x42
 8002424:	2110      	movs	r1, #16
 8002426:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2208      	movs	r2, #8
 8002438:	18ba      	adds	r2, r7, r2
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2bff      	cmp	r3, #255	@ 0xff
 800244c:	d906      	bls.n	800245c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	@ 0xff
 8002452:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	045b      	lsls	r3, r3, #17
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e007      	b.n	800246c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	049b      	lsls	r3, r3, #18
 800246a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d027      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	697c      	ldr	r4, [r7, #20]
 80024b0:	230a      	movs	r3, #10
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	8819      	ldrh	r1, [r3, #0]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	4b51      	ldr	r3, [pc, #324]	@ (8002600 <HAL_I2C_Master_Transmit+0x24c>)
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	0023      	movs	r3, r4
 80024be:	f000 fd41 	bl	8002f44 <I2C_TransferConfig>
 80024c2:	e06f      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	697c      	ldr	r4, [r7, #20]
 80024cc:	230a      	movs	r3, #10
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	8819      	ldrh	r1, [r3, #0]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <HAL_I2C_Master_Transmit+0x24c>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	0023      	movs	r3, r4
 80024da:	f000 fd33 	bl	8002f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024de:	e061      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fb0c 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e081      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03a      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0x1f0>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d136      	bne.n	80025a4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	0013      	movs	r3, r2
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	@ 0x80
 8002544:	f000 fa86 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e053      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2bff      	cmp	r3, #255	@ 0xff
 8002558:	d911      	bls.n	800257e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	22ff      	movs	r2, #255	@ 0xff
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002564:	b2da      	uxtb	r2, r3
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	045c      	lsls	r4, r3, #17
 800256a:	230a      	movs	r3, #10
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	8819      	ldrh	r1, [r3, #0]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	0023      	movs	r3, r4
 8002578:	f000 fce4 	bl	8002f44 <I2C_TransferConfig>
 800257c:	e012      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	2380      	movs	r3, #128	@ 0x80
 8002590:	049c      	lsls	r4, r3, #18
 8002592:	230a      	movs	r3, #10
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	8819      	ldrh	r1, [r3, #0]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	0023      	movs	r3, r4
 80025a0:	f000 fcd0 	bl	8002f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d198      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 faeb 	bl	8002b90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e01a      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	490b      	ldr	r1, [pc, #44]	@ (8002604 <HAL_I2C_Master_Transmit+0x250>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2241      	movs	r2, #65	@ 0x41
 80025de:	2120      	movs	r1, #32
 80025e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2242      	movs	r2, #66	@ 0x42
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2240      	movs	r2, #64	@ 0x40
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b007      	add	sp, #28
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	80002000 	.word	0x80002000
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	0008      	movs	r0, r1
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	0019      	movs	r1, r3
 8002616:	230a      	movs	r3, #10
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	1c02      	adds	r2, r0, #0
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	2308      	movs	r3, #8
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2241      	movs	r2, #65	@ 0x41
 800262a:	5c9b      	ldrb	r3, [r3, r2]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	d000      	beq.n	8002634 <HAL_I2C_Master_Receive+0x2c>
 8002632:	e0e8      	b.n	8002806 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2240      	movs	r2, #64	@ 0x40
 8002638:	5c9b      	ldrb	r3, [r3, r2]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Master_Receive+0x3a>
 800263e:	2302      	movs	r3, #2
 8002640:	e0e2      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2240      	movs	r2, #64	@ 0x40
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800264a:	f7ff f8f5 	bl	8001838 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	0219      	lsls	r1, r3, #8
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2319      	movs	r3, #25
 800265e:	2201      	movs	r2, #1
 8002660:	f000 f9f8 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0cd      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2241      	movs	r2, #65	@ 0x41
 8002670:	2122      	movs	r1, #34	@ 0x22
 8002672:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2242      	movs	r2, #66	@ 0x42
 8002678:	2110      	movs	r1, #16
 800267a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2208      	movs	r2, #8
 800268c:	18ba      	adds	r2, r7, r2
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2bff      	cmp	r3, #255	@ 0xff
 80026a0:	d911      	bls.n	80026c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	045c      	lsls	r4, r3, #17
 80026b2:	230a      	movs	r3, #10
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	8819      	ldrh	r1, [r3, #0]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	4b55      	ldr	r3, [pc, #340]	@ (8002810 <HAL_I2C_Master_Receive+0x208>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	0023      	movs	r3, r4
 80026c0:	f000 fc40 	bl	8002f44 <I2C_TransferConfig>
 80026c4:	e076      	b.n	80027b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	049c      	lsls	r4, r3, #18
 80026da:	230a      	movs	r3, #10
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	8819      	ldrh	r1, [r3, #0]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002810 <HAL_I2C_Master_Receive+0x208>)
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	0023      	movs	r3, r4
 80026e8:	f000 fc2c 	bl	8002f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026ec:	e062      	b.n	80027b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fa8f 	bl	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e082      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03a      	beq.n	80027b4 <HAL_I2C_Master_Receive+0x1ac>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d136      	bne.n	80027b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	0013      	movs	r3, r2
 8002750:	2200      	movs	r2, #0
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	f000 f97e 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e053      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2bff      	cmp	r3, #255	@ 0xff
 8002768:	d911      	bls.n	800278e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	@ 0xff
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	b2da      	uxtb	r2, r3
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	045c      	lsls	r4, r3, #17
 800277a:	230a      	movs	r3, #10
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	8819      	ldrh	r1, [r3, #0]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	0023      	movs	r3, r4
 8002788:	f000 fbdc 	bl	8002f44 <I2C_TransferConfig>
 800278c:	e012      	b.n	80027b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	b2da      	uxtb	r2, r3
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	049c      	lsls	r4, r3, #18
 80027a2:	230a      	movs	r3, #10
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	8819      	ldrh	r1, [r3, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	2300      	movs	r3, #0
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	0023      	movs	r3, r4
 80027b0:	f000 fbc8 	bl	8002f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d197      	bne.n	80026ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f9e3 	bl	8002b90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01a      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	490b      	ldr	r1, [pc, #44]	@ (8002814 <HAL_I2C_Master_Receive+0x20c>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2241      	movs	r2, #65	@ 0x41
 80027ee:	2120      	movs	r1, #32
 80027f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2242      	movs	r2, #66	@ 0x42
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2240      	movs	r2, #64	@ 0x40
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b007      	add	sp, #28
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	80002400 	.word	0x80002400
 8002814:	fe00e800 	.word	0xfe00e800

08002818 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	230a      	movs	r3, #10
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	1c0a      	adds	r2, r1, #0
 800282a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2241      	movs	r2, #65	@ 0x41
 8002834:	5c9b      	ldrb	r3, [r3, r2]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	d000      	beq.n	800283e <HAL_I2C_IsDeviceReady+0x26>
 800283c:	e0df      	b.n	80029fe <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	401a      	ands	r2, r3
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	429a      	cmp	r2, r3
 8002850:	d101      	bne.n	8002856 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
 8002854:	e0d4      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_I2C_IsDeviceReady+0x4c>
 8002860:	2302      	movs	r3, #2
 8002862:	e0cd      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2241      	movs	r2, #65	@ 0x41
 8002870:	2124      	movs	r1, #36	@ 0x24
 8002872:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_I2C_IsDeviceReady+0x7a>
 8002882:	230a      	movs	r3, #10
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	059b      	lsls	r3, r3, #22
 800288a:	0d9b      	lsrs	r3, r3, #22
 800288c:	4a5e      	ldr	r2, [pc, #376]	@ (8002a08 <HAL_I2C_IsDeviceReady+0x1f0>)
 800288e:	431a      	orrs	r2, r3
 8002890:	e006      	b.n	80028a0 <HAL_I2C_IsDeviceReady+0x88>
 8002892:	230a      	movs	r3, #10
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	059b      	lsls	r3, r3, #22
 800289a:	0d9b      	lsrs	r3, r3, #22
 800289c:	4a5b      	ldr	r2, [pc, #364]	@ (8002a0c <HAL_I2C_IsDeviceReady+0x1f4>)
 800289e:	431a      	orrs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe ffc7 	bl	8001838 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2220      	movs	r2, #32
 80028b6:	4013      	ands	r3, r2
 80028b8:	3b20      	subs	r3, #32
 80028ba:	425a      	negs	r2, r3
 80028bc:	4153      	adcs	r3, r2
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2210      	movs	r2, #16
 80028ce:	4013      	ands	r3, r2
 80028d0:	3b10      	subs	r3, #16
 80028d2:	425a      	negs	r2, r3
 80028d4:	4153      	adcs	r3, r2
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	231e      	movs	r3, #30
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028de:	e035      	b.n	800294c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	d01a      	beq.n	800291c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028e6:	f7fe ffa7 	bl	8001838 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <HAL_I2C_IsDeviceReady+0xe4>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2241      	movs	r2, #65	@ 0x41
 8002900:	2120      	movs	r1, #32
 8002902:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	2220      	movs	r2, #32
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2240      	movs	r2, #64	@ 0x40
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e071      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2220      	movs	r2, #32
 8002924:	4013      	ands	r3, r2
 8002926:	3b20      	subs	r3, #32
 8002928:	425a      	negs	r2, r3
 800292a:	4153      	adcs	r3, r2
 800292c:	b2da      	uxtb	r2, r3
 800292e:	231f      	movs	r3, #31
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2210      	movs	r2, #16
 800293c:	4013      	ands	r3, r2
 800293e:	3b10      	subs	r3, #16
 8002940:	425a      	negs	r2, r3
 8002942:	4153      	adcs	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	231e      	movs	r3, #30
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800294c:	231f      	movs	r3, #31
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_I2C_IsDeviceReady+0x148>
 8002956:	231e      	movs	r3, #30
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0bf      	beq.n	80028e0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2210      	movs	r2, #16
 8002968:	4013      	ands	r3, r2
 800296a:	2b10      	cmp	r3, #16
 800296c:	d01a      	beq.n	80029a4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	0013      	movs	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	2120      	movs	r1, #32
 800297c:	f000 f86a 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e03b      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2220      	movs	r2, #32
 800298e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2241      	movs	r2, #65	@ 0x41
 8002994:	2120      	movs	r1, #32
 8002996:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	2100      	movs	r1, #0
 800299e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e02d      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	0013      	movs	r3, r2
 80029ae:	2200      	movs	r2, #0
 80029b0:	2120      	movs	r1, #32
 80029b2:	f000 f84f 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e020      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2210      	movs	r2, #16
 80029c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2220      	movs	r2, #32
 80029cc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d900      	bls.n	80029de <HAL_I2C_IsDeviceReady+0x1c6>
 80029dc:	e74d      	b.n	800287a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2241      	movs	r2, #65	@ 0x41
 80029e2:	2120      	movs	r1, #32
 80029e4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	2220      	movs	r2, #32
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2240      	movs	r2, #64	@ 0x40
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b008      	add	sp, #32
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	02002000 	.word	0x02002000
 8002a0c:	02002800 	.word	0x02002800

08002a10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d103      	bne.n	8002a2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
  }
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	e03a      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f971 	bl	8002d54 <I2C_IsErrorOccurred>
 8002a72:	1e03      	subs	r3, r0, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e040      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	d02d      	beq.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe feda 	bl	8001838 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d122      	bne.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	425a      	negs	r2, r3
 8002aa6:	4153      	adcs	r3, r2
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d113      	bne.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	2220      	movs	r2, #32
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2241      	movs	r2, #65	@ 0x41
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2242      	movs	r2, #66	@ 0x42
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2240      	movs	r2, #64	@ 0x40
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e00f      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	425a      	negs	r2, r3
 8002aec:	4153      	adcs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	001a      	movs	r2, r3
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d0b5      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b10:	e032      	b.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f91b 	bl	8002d54 <I2C_IsErrorOccurred>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e030      	b.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d025      	beq.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe fe84 	bl	8001838 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11a      	bne.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d013      	beq.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	2220      	movs	r2, #32
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2241      	movs	r2, #65	@ 0x41
 8002b60:	2120      	movs	r1, #32
 8002b62:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2242      	movs	r2, #66	@ 0x42
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d1c5      	bne.n	8002b12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9c:	e02f      	b.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f8d5 	bl	8002d54 <I2C_IsErrorOccurred>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02d      	b.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe fe41 	bl	8001838 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d11a      	bne.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d013      	beq.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	2220      	movs	r2, #32
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2241      	movs	r2, #65	@ 0x41
 8002be6:	2120      	movs	r1, #32
 8002be8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2242      	movs	r2, #66	@ 0x42
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2220      	movs	r2, #32
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d1c8      	bne.n	8002b9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2317      	movs	r3, #23
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c2c:	e07b      	b.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f88d 	bl	8002d54 <I2C_IsErrorOccurred>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d003      	beq.n	8002c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002c3e:	2317      	movs	r3, #23
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d140      	bne.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002c54:	2117      	movs	r1, #23
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d13b      	bne.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2204      	movs	r2, #4
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d106      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2210      	movs	r2, #16
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d123      	bne.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2204      	movs	r2, #4
 8002c94:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4929      	ldr	r1, [pc, #164]	@ (8002d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2241      	movs	r2, #65	@ 0x41
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2242      	movs	r2, #66	@ 0x42
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002cc6:	2317      	movs	r3, #23
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e002      	b.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002cd6:	f7fe fdaf 	bl	8001838 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11c      	bne.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002cec:	2017      	movs	r0, #23
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d117      	bne.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d010      	beq.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	2220      	movs	r2, #32
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2241      	movs	r2, #65	@ 0x41
 8002d14:	2120      	movs	r1, #32
 8002d16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2240      	movs	r2, #64	@ 0x40
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d005      	beq.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d34:	2317      	movs	r3, #23
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d100      	bne.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d3e:	e776      	b.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002d40:	2317      	movs	r3, #23
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b006      	add	sp, #24
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	fe00e800 	.word	0xfe00e800

08002d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	@ 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2327      	movs	r3, #39	@ 0x27
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <I2C_IsErrorOccurred+0x2e>
 8002d80:	e079      	b.n	8002e76 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d8a:	e057      	b.n	8002e3c <I2C_IsErrorOccurred+0xe8>
 8002d8c:	2227      	movs	r2, #39	@ 0x27
 8002d8e:	18bb      	adds	r3, r7, r2
 8002d90:	18ba      	adds	r2, r7, r2
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	d04f      	beq.n	8002e3c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fd4c 	bl	8001838 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <I2C_IsErrorOccurred+0x5e>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d144      	bne.n	8002e3c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc0:	2013      	movs	r0, #19
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	2142      	movs	r1, #66	@ 0x42
 8002dc8:	5c52      	ldrb	r2, [r2, r1]
 8002dca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d126      	bne.n	8002e2e <I2C_IsErrorOccurred+0xda>
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	01db      	lsls	r3, r3, #7
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d021      	beq.n	8002e2e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d01d      	beq.n	8002e2e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	01c9      	lsls	r1, r1, #7
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e04:	f7fe fd18 	bl	8001838 <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e0c:	e00f      	b.n	8002e2e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e0e:	f7fe fd13 	bl	8001838 <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b19      	cmp	r3, #25
 8002e1a:	d908      	bls.n	8002e2e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4313      	orrs	r3, r2
 8002e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e24:	2327      	movs	r3, #39	@ 0x27
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]

              break;
 8002e2c:	e006      	b.n	8002e3c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d1e8      	bne.n	8002e0e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2220      	movs	r2, #32
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d004      	beq.n	8002e54 <I2C_IsErrorOccurred+0x100>
 8002e4a:	2327      	movs	r3, #39	@ 0x27
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d09b      	beq.n	8002d8c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e54:	2327      	movs	r3, #39	@ 0x27
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e6e:	2327      	movs	r3, #39	@ 0x27
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d00c      	beq.n	8002ea2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9a:	2327      	movs	r3, #39	@ 0x27
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00c      	beq.n	8002ec6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	00d2      	lsls	r2, r2, #3
 8002ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ebe:	2327      	movs	r3, #39	@ 0x27
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00c      	beq.n	8002eea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee2:	2327      	movs	r3, #39	@ 0x27
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002eea:	2327      	movs	r3, #39	@ 0x27
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01d      	beq.n	8002f30 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7ff fd8a 	bl	8002a10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	490e      	ldr	r1, [pc, #56]	@ (8002f40 <I2C_IsErrorOccurred+0x1ec>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2241      	movs	r2, #65	@ 0x41
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2242      	movs	r2, #66	@ 0x42
 8002f24:	2100      	movs	r1, #0
 8002f26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2240      	movs	r2, #64	@ 0x40
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f30:	2327      	movs	r3, #39	@ 0x27
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b00a      	add	sp, #40	@ 0x28
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	0008      	movs	r0, r1
 8002f4e:	0011      	movs	r1, r2
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	240a      	movs	r4, #10
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	1c02      	adds	r2, r0, #0
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	2009      	movs	r0, #9
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	1c0a      	adds	r2, r1, #0
 8002f60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	059b      	lsls	r3, r3, #22
 8002f68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	0419      	lsls	r1, r3, #16
 8002f70:	23ff      	movs	r3, #255	@ 0xff
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	0d51      	lsrs	r1, r2, #21
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	00d2      	lsls	r2, r2, #3
 8002f94:	400a      	ands	r2, r1
 8002f96:	4907      	ldr	r1, [pc, #28]	@ (8002fb4 <I2C_TransferConfig+0x70>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	43d2      	mvns	r2, r2
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b007      	add	sp, #28
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	03ff63ff 	.word	0x03ff63ff

08002fb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2241      	movs	r2, #65	@ 0x41
 8002fc6:	5c9b      	ldrb	r3, [r3, r2]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d138      	bne.n	8003040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e032      	b.n	8003042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	@ 0x40
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2241      	movs	r2, #65	@ 0x41
 8002fe8:	2124      	movs	r1, #36	@ 0x24
 8002fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4911      	ldr	r1, [pc, #68]	@ (800304c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003008:	400a      	ands	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2241      	movs	r2, #65	@ 0x41
 8003030:	2120      	movs	r1, #32
 8003032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	ffffefff 	.word	0xffffefff

08003050 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2241      	movs	r2, #65	@ 0x41
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	d139      	bne.n	80030da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2240      	movs	r2, #64	@ 0x40
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003070:	2302      	movs	r3, #2
 8003072:	e033      	b.n	80030dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2240      	movs	r2, #64	@ 0x40
 8003078:	2101      	movs	r1, #1
 800307a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2241      	movs	r2, #65	@ 0x41
 8003080:	2124      	movs	r1, #36	@ 0x24
 8003082:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	438a      	bics	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a11      	ldr	r2, [pc, #68]	@ (80030e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2241      	movs	r2, #65	@ 0x41
 80030ca:	2120      	movs	r1, #32
 80030cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
  }
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	fffff0ff 	.word	0xfffff0ff

080030e8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e078      	b.n	80031ec <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	222e      	movs	r2, #46	@ 0x2e
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	222d      	movs	r2, #45	@ 0x2d
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f7fd facb 	bl	80006ac <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	222e      	movs	r2, #46	@ 0x2e
 800311a:	2102      	movs	r1, #2
 800311c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	429a      	cmp	r2, r3
 8003138:	d103      	bne.n	8003142 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	221e      	movs	r2, #30
 800313e:	4393      	bics	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4a2b      	ldr	r2, [pc, #172]	@ (80031f4 <HAL_LPTIM_Init+0x10c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <HAL_LPTIM_Init+0x110>)
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a29      	ldr	r2, [pc, #164]	@ (80031fc <HAL_LPTIM_Init+0x114>)
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003164:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800316a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003170:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003176:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800318e:	4313      	orrs	r3, r2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d107      	bne.n	80031ba <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031b2:	4313      	orrs	r3, r2
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4a0d      	ldr	r2, [pc, #52]	@ (80031f4 <HAL_LPTIM_Init+0x10c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00a      	beq.n	80031da <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031cc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80031d2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	222e      	movs	r2, #46	@ 0x2e
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0000ffff 	.word	0x0000ffff
 80031f8:	ffff1f3f 	.word	0xffff1f3f
 80031fc:	ff19f1fe 	.word	0xff19f1fe

08003200 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10e      	bne.n	8003234 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2201      	movs	r2, #1
 800322a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	0018      	movs	r0, r3
 8003230:	f000 f888 	bl	8003344 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d10e      	bne.n	8003260 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2202      	movs	r2, #2
 800324a:	4013      	ands	r3, r2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d107      	bne.n	8003260 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2202      	movs	r2, #2
 8003256:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f87a 	bl	8003354 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2204      	movs	r2, #4
 8003268:	4013      	ands	r3, r2
 800326a:	2b04      	cmp	r3, #4
 800326c:	d10e      	bne.n	800328c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2204      	movs	r2, #4
 8003276:	4013      	ands	r3, r2
 8003278:	2b04      	cmp	r3, #4
 800327a:	d107      	bne.n	800328c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2204      	movs	r2, #4
 8003282:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f86c 	bl	8003364 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	2b08      	cmp	r3, #8
 8003298:	d10e      	bne.n	80032b8 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d107      	bne.n	80032b8 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f85e 	bl	8003374 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d10e      	bne.n	80032e4 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2210      	movs	r2, #16
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d107      	bne.n	80032e4 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 f850 	bl	8003384 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d10e      	bne.n	8003310 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d107      	bne.n	8003310 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f842 	bl	8003394 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	4013      	ands	r3, r2
 800331a:	2b40      	cmp	r3, #64	@ 0x40
 800331c:	d10e      	bne.n	800333c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d107      	bne.n	800333c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2240      	movs	r2, #64	@ 0x40
 8003332:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	0018      	movs	r0, r3
 8003338:	f000 f834 	bl	80033a4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80033ac:	46c0      	nop			@ (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	000a      	movs	r2, r1
 80033be:	1cfb      	adds	r3, r7, #3
 80033c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80033c6:	4b25      	ldr	r3, [pc, #148]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_PWR_EnterSTOPMode+0xac>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_PWR_EnterSTOPMode+0x40>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80033e8:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 80033ee:	491d      	ldr	r1, [pc, #116]	@ (8003464 <HAL_PWR_EnterSTOPMode+0xb0>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2203      	movs	r2, #3
 80033fe:	4393      	bics	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003410:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003416:	2104      	movs	r1, #4
 8003418:	430a      	orrs	r2, r1
 800341a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800341c:	1cfb      	adds	r3, r7, #3
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003424:	bf30      	wfi
 8003426:	e002      	b.n	800342e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003428:	bf40      	sev
    __WFE();
 800342a:	bf20      	wfe
    __WFE();
 800342c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003434:	2104      	movs	r1, #4
 8003436:	438a      	bics	r2, r1
 8003438:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_PWR_EnterSTOPMode+0xa0>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b04      	ldr	r3, [pc, #16]	@ (800345c <HAL_PWR_EnterSTOPMode+0xa8>)
 800344c:	2180      	movs	r1, #128	@ 0x80
 800344e:	0089      	lsls	r1, r1, #2
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
  }
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b006      	add	sp, #24
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40007000 	.word	0x40007000
 8003460:	40010000 	.word	0x40010000
 8003464:	fffffdff 	.word	0xfffffdff
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f000 fbbf 	bl	8003bfe <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003480:	4bc9      	ldr	r3, [pc, #804]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	220c      	movs	r2, #12
 8003486:	4013      	ands	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348a:	4bc7      	ldr	r3, [pc, #796]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	025b      	lsls	r3, r3, #9
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d100      	bne.n	80034a2 <HAL_RCC_OscConfig+0x36>
 80034a0:	e07e      	b.n	80035a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d007      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_OscConfig+0x68>
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	025b      	lsls	r3, r3, #9
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	4bbb      	ldr	r3, [pc, #748]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	4013      	ands	r3, r2
 80034c2:	d100      	bne.n	80034c6 <HAL_RCC_OscConfig+0x5a>
 80034c4:	e06b      	b.n	800359e <HAL_RCC_OscConfig+0x132>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d167      	bne.n	800359e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f000 fb95 	bl	8003bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	429a      	cmp	r2, r3
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_OscConfig+0x84>
 80034e0:	4bb1      	ldr	r3, [pc, #708]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4bb0      	ldr	r3, [pc, #704]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	0249      	lsls	r1, r1, #9
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e027      	b.n	8003540 <HAL_RCC_OscConfig+0xd4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	23a0      	movs	r3, #160	@ 0xa0
 80034f6:	02db      	lsls	r3, r3, #11
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10e      	bne.n	800351a <HAL_RCC_OscConfig+0xae>
 80034fc:	4baa      	ldr	r3, [pc, #680]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4ba9      	ldr	r3, [pc, #676]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	02c9      	lsls	r1, r1, #11
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	4ba7      	ldr	r3, [pc, #668]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4ba6      	ldr	r3, [pc, #664]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0249      	lsls	r1, r1, #9
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e012      	b.n	8003540 <HAL_RCC_OscConfig+0xd4>
 800351a:	4ba3      	ldr	r3, [pc, #652]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4ba2      	ldr	r3, [pc, #648]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003520:	49a2      	ldr	r1, [pc, #648]	@ (80037ac <HAL_RCC_OscConfig+0x340>)
 8003522:	400a      	ands	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4ba0      	ldr	r3, [pc, #640]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	025b      	lsls	r3, r3, #9
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4b9c      	ldr	r3, [pc, #624]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b9b      	ldr	r3, [pc, #620]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800353a:	499d      	ldr	r1, [pc, #628]	@ (80037b0 <HAL_RCC_OscConfig+0x344>)
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe f976 	bl	8001838 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003550:	e009      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003552:	f7fe f971 	bl	8001838 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b64      	cmp	r3, #100	@ 0x64
 800355e:	d902      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	f000 fb4c 	bl	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003566:	4b90      	ldr	r3, [pc, #576]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	2380      	movs	r3, #128	@ 0x80
 800356c:	029b      	lsls	r3, r3, #10
 800356e:	4013      	ands	r3, r2
 8003570:	d0ef      	beq.n	8003552 <HAL_RCC_OscConfig+0xe6>
 8003572:	e015      	b.n	80035a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe f960 	bl	8001838 <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357e:	f7fe f95b 	bl	8001838 <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	@ 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e336      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003590:	4b85      	ldr	r3, [pc, #532]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	4013      	ands	r3, r2
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x112>
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2202      	movs	r2, #2
 80035a6:	4013      	ands	r3, r2
 80035a8:	d100      	bne.n	80035ac <HAL_RCC_OscConfig+0x140>
 80035aa:	e099      	b.n	80036e0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	2220      	movs	r2, #32
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80035ba:	4b7b      	ldr	r3, [pc, #492]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b7a      	ldr	r3, [pc, #488]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80035c0:	2120      	movs	r1, #32
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	2220      	movs	r2, #32
 80035ca:	4393      	bics	r3, r2
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d13e      	bne.n	8003658 <HAL_RCC_OscConfig+0x1ec>
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13b      	bne.n	8003658 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80035e0:	4b71      	ldr	r3, [pc, #452]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2204      	movs	r2, #4
 80035e6:	4013      	ands	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_RCC_OscConfig+0x188>
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e304      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b6c      	ldr	r3, [pc, #432]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	@ (80037b4 <HAL_RCC_OscConfig+0x348>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	4b68      	ldr	r3, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800360a:	4b67      	ldr	r3, [pc, #412]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2209      	movs	r2, #9
 8003610:	4393      	bics	r3, r2
 8003612:	0019      	movs	r1, r3
 8003614:	4b64      	ldr	r3, [pc, #400]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361c:	f000 fc42 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003620:	0001      	movs	r1, r0
 8003622:	4b61      	ldr	r3, [pc, #388]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	220f      	movs	r2, #15
 800362a:	4013      	ands	r3, r2
 800362c:	4a62      	ldr	r2, [pc, #392]	@ (80037b8 <HAL_RCC_OscConfig+0x34c>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	000a      	movs	r2, r1
 8003632:	40da      	lsrs	r2, r3
 8003634:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x350>)
 8003636:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003638:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <HAL_RCC_OscConfig+0x354>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2513      	movs	r5, #19
 800363e:	197c      	adds	r4, r7, r5
 8003640:	0018      	movs	r0, r3
 8003642:	f7fe f8b3 	bl	80017ac <HAL_InitTick>
 8003646:	0003      	movs	r3, r0
 8003648:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800364a:	197b      	adds	r3, r7, r5
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d046      	beq.n	80036e0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003652:	197b      	adds	r3, r7, r5
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	e2d2      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d027      	beq.n	80036ae <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800365e:	4b52      	ldr	r3, [pc, #328]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2209      	movs	r2, #9
 8003664:	4393      	bics	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	4b4f      	ldr	r3, [pc, #316]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	430a      	orrs	r2, r1
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe f8e2 	bl	8001838 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe f8dd 	bl	8001838 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e2b8      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800368c:	4b46      	ldr	r3, [pc, #280]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	d0f1      	beq.n	800367a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a46      	ldr	r2, [pc, #280]	@ (80037b4 <HAL_RCC_OscConfig+0x348>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	4b40      	ldr	r3, [pc, #256]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b3e      	ldr	r3, [pc, #248]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b3d      	ldr	r3, [pc, #244]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	438a      	bics	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe f8bd 	bl	8001838 <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fe f8b8 	bl	8001838 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e293      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d6:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	d1f1      	bne.n	80036c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	4013      	ands	r3, r2
 80036e8:	d100      	bne.n	80036ec <HAL_RCC_OscConfig+0x280>
 80036ea:	e0a2      	b.n	8003832 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d140      	bne.n	8003774 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f2:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x29e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e279      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370a:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a2d      	ldr	r2, [pc, #180]	@ (80037c4 <HAL_RCC_OscConfig+0x358>)
 8003710:	4013      	ands	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	0a19      	lsrs	r1, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	061a      	lsls	r2, r3, #24
 800372c:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	0b5b      	lsrs	r3, r3, #13
 8003738:	3301      	adds	r3, #1
 800373a:	2280      	movs	r2, #128	@ 0x80
 800373c:	0212      	lsls	r2, r2, #8
 800373e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003740:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	210f      	movs	r1, #15
 8003748:	400b      	ands	r3, r1
 800374a:	491b      	ldr	r1, [pc, #108]	@ (80037b8 <HAL_RCC_OscConfig+0x34c>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <HAL_RCC_OscConfig+0x350>)
 8003752:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <HAL_RCC_OscConfig+0x354>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2513      	movs	r5, #19
 800375a:	197c      	adds	r4, r7, r5
 800375c:	0018      	movs	r0, r3
 800375e:	f7fe f825 	bl	80017ac <HAL_InitTick>
 8003762:	0003      	movs	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003766:	197b      	adds	r3, r7, r5
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d061      	beq.n	8003832 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800376e:	197b      	adds	r3, r7, r5
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	e244      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d040      	beq.n	80037fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800377c:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_OscConfig+0x33c>)
 8003782:	2180      	movs	r1, #128	@ 0x80
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe f855 	bl	8001838 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003794:	f7fe f850 	bl	8001838 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d912      	bls.n	80037c8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e22b      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	fffeffff 	.word	0xfffeffff
 80037b0:	fffbffff 	.word	0xfffbffff
 80037b4:	ffffe0ff 	.word	0xffffe0ff
 80037b8:	08007af4 	.word	0x08007af4
 80037bc:	20000004 	.word	0x20000004
 80037c0:	20000008 	.word	0x20000008
 80037c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037c8:	4bca      	ldr	r3, [pc, #808]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4013      	ands	r3, r2
 80037d2:	d0df      	beq.n	8003794 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d4:	4bc7      	ldr	r3, [pc, #796]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4ac7      	ldr	r2, [pc, #796]	@ (8003af8 <HAL_RCC_OscConfig+0x68c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e2:	4bc4      	ldr	r3, [pc, #784]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e8:	4bc2      	ldr	r3, [pc, #776]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	0a19      	lsrs	r1, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	4bbf      	ldr	r3, [pc, #764]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e019      	b.n	8003832 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037fe:	4bbd      	ldr	r3, [pc, #756]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4bbc      	ldr	r3, [pc, #752]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003804:	49bd      	ldr	r1, [pc, #756]	@ (8003afc <HAL_RCC_OscConfig+0x690>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe f815 	bl	8001838 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003814:	f7fe f810 	bl	8001838 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1eb      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003826:	4bb3      	ldr	r3, [pc, #716]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	4013      	ands	r3, r2
 800383a:	d036      	beq.n	80038aa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d019      	beq.n	8003878 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003844:	4bab      	ldr	r3, [pc, #684]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003848:	4baa      	ldr	r3, [pc, #680]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800384a:	2101      	movs	r1, #1
 800384c:	430a      	orrs	r2, r1
 800384e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fff2 	bl	8001838 <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385a:	f7fd ffed 	bl	8001838 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1c8      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800386c:	4ba1      	ldr	r3, [pc, #644]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	2202      	movs	r2, #2
 8003872:	4013      	ands	r3, r2
 8003874:	d0f1      	beq.n	800385a <HAL_RCC_OscConfig+0x3ee>
 8003876:	e018      	b.n	80038aa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003878:	4b9e      	ldr	r3, [pc, #632]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800387a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800387c:	4b9d      	ldr	r3, [pc, #628]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fd ffd8 	bl	8001838 <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
 800388a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd ffd3 	bl	8001838 <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1ae      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038a0:	4b94      	ldr	r3, [pc, #592]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d1f1      	bne.n	800388e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2204      	movs	r2, #4
 80038b0:	4013      	ands	r3, r2
 80038b2:	d100      	bne.n	80038b6 <HAL_RCC_OscConfig+0x44a>
 80038b4:	e0ae      	b.n	8003a14 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b6:	2023      	movs	r0, #35	@ 0x23
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b8d      	ldr	r3, [pc, #564]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80038c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	055b      	lsls	r3, r3, #21
 80038c6:	4013      	ands	r3, r2
 80038c8:	d109      	bne.n	80038de <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b8a      	ldr	r3, [pc, #552]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80038cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ce:	4b89      	ldr	r3, [pc, #548]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80038d0:	2180      	movs	r1, #128	@ 0x80
 80038d2:	0549      	lsls	r1, r1, #21
 80038d4:	430a      	orrs	r2, r1
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80038d8:	183b      	adds	r3, r7, r0
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b88      	ldr	r3, [pc, #544]	@ (8003b00 <HAL_RCC_OscConfig+0x694>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	d11a      	bne.n	8003920 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b85      	ldr	r3, [pc, #532]	@ (8003b00 <HAL_RCC_OscConfig+0x694>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b84      	ldr	r3, [pc, #528]	@ (8003b00 <HAL_RCC_OscConfig+0x694>)
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	0049      	lsls	r1, r1, #1
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f8:	f7fd ff9e 	bl	8001838 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fd ff99 	bl	8001838 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	@ 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e174      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b7a      	ldr	r3, [pc, #488]	@ (8003b00 <HAL_RCC_OscConfig+0x694>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	429a      	cmp	r2, r3
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x4d0>
 800392c:	4b71      	ldr	r3, [pc, #452]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800392e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003930:	4b70      	ldr	r3, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003932:	2180      	movs	r1, #128	@ 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	651a      	str	r2, [r3, #80]	@ 0x50
 800393a:	e031      	b.n	80039a0 <HAL_RCC_OscConfig+0x534>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10c      	bne.n	800395e <HAL_RCC_OscConfig+0x4f2>
 8003944:	4b6b      	ldr	r3, [pc, #428]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003946:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003948:	4b6a      	ldr	r3, [pc, #424]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800394a:	496c      	ldr	r1, [pc, #432]	@ (8003afc <HAL_RCC_OscConfig+0x690>)
 800394c:	400a      	ands	r2, r1
 800394e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003950:	4b68      	ldr	r3, [pc, #416]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003954:	4b67      	ldr	r3, [pc, #412]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003956:	496b      	ldr	r1, [pc, #428]	@ (8003b04 <HAL_RCC_OscConfig+0x698>)
 8003958:	400a      	ands	r2, r1
 800395a:	651a      	str	r2, [r3, #80]	@ 0x50
 800395c:	e020      	b.n	80039a0 <HAL_RCC_OscConfig+0x534>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	23a0      	movs	r3, #160	@ 0xa0
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	429a      	cmp	r2, r3
 8003968:	d10e      	bne.n	8003988 <HAL_RCC_OscConfig+0x51c>
 800396a:	4b62      	ldr	r3, [pc, #392]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800396c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800396e:	4b61      	ldr	r3, [pc, #388]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	00c9      	lsls	r1, r1, #3
 8003974:	430a      	orrs	r2, r1
 8003976:	651a      	str	r2, [r3, #80]	@ 0x50
 8003978:	4b5e      	ldr	r3, [pc, #376]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800397a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800397c:	4b5d      	ldr	r3, [pc, #372]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800397e:	2180      	movs	r1, #128	@ 0x80
 8003980:	0049      	lsls	r1, r1, #1
 8003982:	430a      	orrs	r2, r1
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x534>
 8003988:	4b5a      	ldr	r3, [pc, #360]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800398a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800398c:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800398e:	495b      	ldr	r1, [pc, #364]	@ (8003afc <HAL_RCC_OscConfig+0x690>)
 8003990:	400a      	ands	r2, r1
 8003992:	651a      	str	r2, [r3, #80]	@ 0x50
 8003994:	4b57      	ldr	r3, [pc, #348]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003998:	4b56      	ldr	r3, [pc, #344]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 800399a:	495a      	ldr	r1, [pc, #360]	@ (8003b04 <HAL_RCC_OscConfig+0x698>)
 800399c:	400a      	ands	r2, r1
 800399e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fd ff46 	bl	8001838 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fd ff41 	bl	8001838 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	4a52      	ldr	r2, [pc, #328]	@ (8003b08 <HAL_RCC_OscConfig+0x69c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e11b      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c6:	4b4b      	ldr	r3, [pc, #300]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80039c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ca:	2380      	movs	r3, #128	@ 0x80
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d0ef      	beq.n	80039b2 <HAL_RCC_OscConfig+0x546>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fd ff30 	bl	8001838 <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd ff2b 	bl	8001838 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	4a47      	ldr	r2, [pc, #284]	@ (8003b08 <HAL_RCC_OscConfig+0x69c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e105      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039f2:	4b40      	ldr	r3, [pc, #256]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 80039f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1ef      	bne.n	80039de <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039fe:	2323      	movs	r3, #35	@ 0x23
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b3a      	ldr	r3, [pc, #232]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a0c:	4b39      	ldr	r3, [pc, #228]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a0e:	493f      	ldr	r1, [pc, #252]	@ (8003b0c <HAL_RCC_OscConfig+0x6a0>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d049      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d026      	beq.n	8003a74 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a26:	4b33      	ldr	r3, [pc, #204]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	4b32      	ldr	r3, [pc, #200]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a36:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a3e:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x6a4>)
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <HAL_RCC_OscConfig+0x6a4>)
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	0189      	lsls	r1, r1, #6
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fef4 	bl	8001838 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a56:	f7fd feef 	bl	8001838 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0ca      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a68:	4b22      	ldr	r3, [pc, #136]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d0f1      	beq.n	8003a56 <HAL_RCC_OscConfig+0x5ea>
 8003a72:	e01e      	b.n	8003ab2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a74:	4b1f      	ldr	r3, [pc, #124]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <HAL_RCC_OscConfig+0x6a4>)
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <HAL_RCC_OscConfig+0x6a4>)
 8003a86:	4923      	ldr	r1, [pc, #140]	@ (8003b14 <HAL_RCC_OscConfig+0x6a8>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fed4 	bl	8001838 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a96:	f7fd fecf 	bl	8001838 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0aa      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aa8:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d1f1      	bne.n	8003a96 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d100      	bne.n	8003abc <HAL_RCC_OscConfig+0x650>
 8003aba:	e09f      	b.n	8003bfc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d100      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x658>
 8003ac2:	e078      	b.n	8003bb6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d159      	bne.n	8003b80 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <HAL_RCC_OscConfig+0x688>)
 8003ad2:	4911      	ldr	r1, [pc, #68]	@ (8003b18 <HAL_RCC_OscConfig+0x6ac>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd feae 	bl	8001838 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fd fea9 	bl	8001838 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d915      	bls.n	8003b1c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e084      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	ffff1fff 	.word	0xffff1fff
 8003afc:	fffffeff 	.word	0xfffffeff
 8003b00:	40007000 	.word	0x40007000
 8003b04:	fffffbff 	.word	0xfffffbff
 8003b08:	00001388 	.word	0x00001388
 8003b0c:	efffffff 	.word	0xefffffff
 8003b10:	40010000 	.word	0x40010000
 8003b14:	ffffdfff 	.word	0xffffdfff
 8003b18:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	049b      	lsls	r3, r3, #18
 8003b24:	4013      	ands	r3, r2
 8003b26:	d1dc      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b37      	ldr	r3, [pc, #220]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a37      	ldr	r2, [pc, #220]	@ (8003c0c <HAL_RCC_OscConfig+0x7a0>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b40:	431a      	orrs	r2, r3
 8003b42:	4b31      	ldr	r3, [pc, #196]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b44:	430a      	orrs	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b2f      	ldr	r3, [pc, #188]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b4e:	2180      	movs	r1, #128	@ 0x80
 8003b50:	0449      	lsls	r1, r1, #17
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fd fe6f 	bl	8001838 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd fe6a 	bl	8001838 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e045      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b72:	4b25      	ldr	r3, [pc, #148]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	049b      	lsls	r3, r3, #18
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x6f4>
 8003b7e:	e03d      	b.n	8003bfc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003b86:	4922      	ldr	r1, [pc, #136]	@ (8003c10 <HAL_RCC_OscConfig+0x7a4>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe54 	bl	8001838 <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fd fe4f 	bl	8001838 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e02a      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ba8:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	049b      	lsls	r3, r3, #18
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x72a>
 8003bb4:	e022      	b.n	8003bfc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e01d      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <HAL_RCC_OscConfig+0x79c>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	401a      	ands	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	23f0      	movs	r3, #240	@ 0xf0
 8003bdc:	039b      	lsls	r3, r3, #14
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	23c0      	movs	r3, #192	@ 0xc0
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b00a      	add	sp, #40	@ 0x28
 8003c04:	bdb0      	pop	{r4, r5, r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	ff02ffff 	.word	0xff02ffff
 8003c10:	feffffff 	.word	0xfeffffff

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b5b0      	push	{r4, r5, r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e128      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b96      	ldr	r3, [pc, #600]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d91e      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b93      	ldr	r3, [pc, #588]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4393      	bics	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	4b90      	ldr	r3, [pc, #576]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c48:	f7fd fdf6 	bl	8001838 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c50:	e009      	b.n	8003c66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c52:	f7fd fdf1 	bl	8001838 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	4a8a      	ldr	r2, [pc, #552]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e109      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b87      	ldr	r3, [pc, #540]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7e:	4b83      	ldr	r3, [pc, #524]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	22f0      	movs	r2, #240	@ 0xf0
 8003c84:	4393      	bics	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x8a>
 8003c9c:	e089      	b.n	8003db2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ca6:	4b79      	ldr	r3, [pc, #484]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2380      	movs	r3, #128	@ 0x80
 8003cac:	029b      	lsls	r3, r3, #10
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d120      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e1      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cbe:	4b73      	ldr	r3, [pc, #460]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	049b      	lsls	r3, r3, #18
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d114      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0d5      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0ca      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce4:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	2380      	movs	r3, #128	@ 0x80
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4013      	ands	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0c2      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf4:	4b65      	ldr	r3, [pc, #404]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4b62      	ldr	r3, [pc, #392]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d08:	f7fd fd96 	bl	8001838 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d111      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d18:	e009      	b.n	8003d2e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1a:	f7fd fd8d 	bl	8001838 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	4a58      	ldr	r2, [pc, #352]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0a5      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2e:	4b57      	ldr	r3, [pc, #348]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	220c      	movs	r2, #12
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x106>
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d111      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d44:	e009      	b.n	8003d5a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f7fd fd77 	bl	8001838 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a4d      	ldr	r2, [pc, #308]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e08f      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	220c      	movs	r2, #12
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d1ef      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x132>
 8003d66:	e024      	b.n	8003db2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d11b      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d70:	e009      	b.n	8003d86 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d72:	f7fd fd61 	bl	8001838 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	4a42      	ldr	r2, [pc, #264]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e079      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d1ef      	bne.n	8003d72 <HAL_RCC_ClockConfig+0x15e>
 8003d92:	e00e      	b.n	8003db2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd fd50 	bl	8001838 <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e068      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003da8:	4b38      	ldr	r3, [pc, #224]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	220c      	movs	r2, #12
 8003dae:	4013      	ands	r3, r2
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db2:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d21e      	bcs.n	8003dfe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc0:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	4b2e      	ldr	r3, [pc, #184]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fd31 	bl	8001838 <HAL_GetTick>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	e009      	b.n	8003df0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ddc:	f7fd fd2c 	bl	8001838 <HAL_GetTick>
 8003de0:	0002      	movs	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	4a28      	ldr	r2, [pc, #160]	@ (8003e88 <HAL_RCC_ClockConfig+0x274>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e044      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df0:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCC_ClockConfig+0x270>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4013      	ands	r3, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	@ (8003e90 <HAL_RCC_ClockConfig+0x27c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	4013      	ands	r3, r2
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <HAL_RCC_ClockConfig+0x280>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	00da      	lsls	r2, r3, #3
 8003e36:	4b15      	ldr	r3, [pc, #84]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3c:	f000 f832 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e40:	0001      	movs	r1, r0
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x278>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	220f      	movs	r2, #15
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_RCC_ClockConfig+0x284>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	000a      	movs	r2, r1
 8003e52:	40da      	lsrs	r2, r3
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <HAL_RCC_ClockConfig+0x288>)
 8003e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e58:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <HAL_RCC_ClockConfig+0x28c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	250b      	movs	r5, #11
 8003e5e:	197c      	adds	r4, r7, r5
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fd fca3 	bl	80017ac <HAL_InitTick>
 8003e66:	0003      	movs	r3, r0
 8003e68:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003e6a:	197b      	adds	r3, r7, r5
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003e72:	197b      	adds	r3, r7, r5
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bdb0      	pop	{r4, r5, r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	40022000 	.word	0x40022000
 8003e88:	00001388 	.word	0x00001388
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	fffff8ff 	.word	0xfffff8ff
 8003e94:	ffffc7ff 	.word	0xffffc7ff
 8003e98:	08007af4 	.word	0x08007af4
 8003e9c:	20000004 	.word	0x20000004
 8003ea0:	20000008 	.word	0x20000008

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d013      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003eba:	d85c      	bhi.n	8003f76 <HAL_RCC_GetSysClockFreq+0xd2>
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d002      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x22>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d00b      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x38>
 8003ec4:	e057      	b.n	8003f76 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ec6:	4b35      	ldr	r3, [pc, #212]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2210      	movs	r2, #16
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ed0:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ed2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ed4:	e05d      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003ed6:	4b33      	ldr	r3, [pc, #204]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ed8:	613b      	str	r3, [r7, #16]
      break;
 8003eda:	e05a      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003edc:	4b32      	ldr	r3, [pc, #200]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ede:	613b      	str	r3, [r7, #16]
      break;
 8003ee0:	e057      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	4013      	ands	r3, r2
 8003eea:	4a30      	ldr	r2, [pc, #192]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x108>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0d9b      	lsrs	r3, r3, #22
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	3301      	adds	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efc:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	2380      	movs	r3, #128	@ 0x80
 8003f02:	025b      	lsls	r3, r3, #9
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	000a      	movs	r2, r1
 8003f0c:	0152      	lsls	r2, r2, #5
 8003f0e:	1a52      	subs	r2, r2, r1
 8003f10:	0193      	lsls	r3, r2, #6
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	185b      	adds	r3, r3, r1
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fc f905 	bl	800012c <__udivsi3>
 8003f22:	0003      	movs	r3, r0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e023      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	000a      	movs	r2, r1
 8003f36:	0152      	lsls	r2, r2, #5
 8003f38:	1a52      	subs	r2, r2, r1
 8003f3a:	0193      	lsls	r3, r2, #6
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	185b      	adds	r3, r3, r1
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fc f8f0 	bl	800012c <__udivsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e00e      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	000a      	movs	r2, r1
 8003f56:	0152      	lsls	r2, r2, #5
 8003f58:	1a52      	subs	r2, r2, r1
 8003f5a:	0193      	lsls	r3, r2, #6
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	185b      	adds	r3, r3, r1
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc f8e0 	bl	800012c <__udivsi3>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
      break;
 8003f74:	e00d      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	4013      	ands	r3, r2
 8003f80:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	0212      	lsls	r2, r2, #8
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      break;
 8003f90:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f92:	693b      	ldr	r3, [r7, #16]
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b006      	add	sp, #24
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	003d0900 	.word	0x003d0900
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	08007b0c 	.word	0x08007b0c

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b02      	ldr	r3, [pc, #8]	@ (8003fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff2 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fcc:	0001      	movs	r1, r0
 8003fce:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	40d9      	lsrs	r1, r3
 8003fde:	000b      	movs	r3, r1
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08007b04 	.word	0x08007b04

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffdc 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff8:	0001      	movs	r1, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	0adb      	lsrs	r3, r3, #11
 8004000:	2207      	movs	r2, #7
 8004002:	4013      	ands	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	40d9      	lsrs	r1, r3
 800400a:	000b      	movs	r3, r1
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	40021000 	.word	0x40021000
 8004018:	08007b04 	.word	0x08007b04

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004024:	2317      	movs	r3, #23
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2220      	movs	r2, #32
 8004032:	4013      	ands	r3, r2
 8004034:	d106      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	2380      	movs	r3, #128	@ 0x80
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	4013      	ands	r3, r2
 8004040:	d100      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004042:	e104      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004044:	4bb9      	ldr	r3, [pc, #740]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	055b      	lsls	r3, r3, #21
 800404c:	4013      	ands	r3, r2
 800404e:	d10a      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4bb6      	ldr	r3, [pc, #728]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004054:	4bb5      	ldr	r3, [pc, #724]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004056:	2180      	movs	r1, #128	@ 0x80
 8004058:	0549      	lsls	r1, r1, #21
 800405a:	430a      	orrs	r2, r1
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800405e:	2317      	movs	r3, #23
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4bb2      	ldr	r3, [pc, #712]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d11a      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004072:	4baf      	ldr	r3, [pc, #700]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4bae      	ldr	r3, [pc, #696]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004078:	2180      	movs	r1, #128	@ 0x80
 800407a:	0049      	lsls	r1, r1, #1
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004080:	f7fd fbda 	bl	8001838 <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd fbd5 	bl	8001838 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	@ 0x64
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e143      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4ba4      	ldr	r3, [pc, #656]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d0f0      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040a8:	4ba0      	ldr	r3, [pc, #640]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	23c0      	movs	r3, #192	@ 0xc0
 80040ae:	039b      	lsls	r3, r3, #14
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	23c0      	movs	r3, #192	@ 0xc0
 80040ba:	039b      	lsls	r3, r3, #14
 80040bc:	4013      	ands	r3, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	23c0      	movs	r3, #192	@ 0xc0
 80040ca:	039b      	lsls	r3, r3, #14
 80040cc:	4013      	ands	r3, r2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d013      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	23c0      	movs	r3, #192	@ 0xc0
 80040da:	029b      	lsls	r3, r3, #10
 80040dc:	401a      	ands	r2, r3
 80040de:	23c0      	movs	r3, #192	@ 0xc0
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d10a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040e6:	4b91      	ldr	r3, [pc, #580]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	029b      	lsls	r3, r3, #10
 80040ee:	401a      	ands	r2, r3
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d101      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e113      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80040fc:	4b8b      	ldr	r3, [pc, #556]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004100:	23c0      	movs	r3, #192	@ 0xc0
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d049      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	23c0      	movs	r3, #192	@ 0xc0
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	4013      	ands	r3, r2
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	d004      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	4013      	ands	r3, r2
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	23c0      	movs	r3, #192	@ 0xc0
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	4013      	ands	r3, r2
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d034      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	4013      	ands	r3, r2
 8004142:	d02e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004144:	4b79      	ldr	r3, [pc, #484]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	4a7a      	ldr	r2, [pc, #488]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800414e:	4b77      	ldr	r3, [pc, #476]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004152:	4b76      	ldr	r3, [pc, #472]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004154:	2180      	movs	r1, #128	@ 0x80
 8004156:	0309      	lsls	r1, r1, #12
 8004158:	430a      	orrs	r2, r1
 800415a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415c:	4b73      	ldr	r3, [pc, #460]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800415e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004160:	4b72      	ldr	r3, [pc, #456]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004162:	4975      	ldr	r1, [pc, #468]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004164:	400a      	ands	r2, r1
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004168:	4b70      	ldr	r3, [pc, #448]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d014      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fb5e 	bl	8001838 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004180:	e009      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd fb59 	bl	8001838 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	4a6b      	ldr	r2, [pc, #428]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0c6      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004196:	4b65      	ldr	r3, [pc, #404]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d0ef      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	23c0      	movs	r3, #192	@ 0xc0
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	401a      	ands	r2, r3
 80041b8:	23c0      	movs	r3, #192	@ 0xc0
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	429a      	cmp	r2, r3
 80041be:	d10c      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80041c0:	4b5a      	ldr	r3, [pc, #360]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	23c0      	movs	r3, #192	@ 0xc0
 80041d0:	039b      	lsls	r3, r3, #14
 80041d2:	401a      	ands	r2, r3
 80041d4:	4b55      	ldr	r3, [pc, #340]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	4b54      	ldr	r3, [pc, #336]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	23c0      	movs	r3, #192	@ 0xc0
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	401a      	ands	r2, r3
 80041e8:	4b50      	ldr	r3, [pc, #320]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2220      	movs	r2, #32
 80041f4:	4013      	ands	r3, r2
 80041f6:	d01f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	23c0      	movs	r3, #192	@ 0xc0
 80041fe:	029b      	lsls	r3, r3, #10
 8004200:	401a      	ands	r2, r3
 8004202:	23c0      	movs	r3, #192	@ 0xc0
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	429a      	cmp	r2, r3
 8004208:	d10c      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800420a:	4b48      	ldr	r3, [pc, #288]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a4c      	ldr	r2, [pc, #304]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004210:	4013      	ands	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	23c0      	movs	r3, #192	@ 0xc0
 800421a:	039b      	lsls	r3, r3, #14
 800421c:	401a      	ands	r2, r3
 800421e:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4b41      	ldr	r3, [pc, #260]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004226:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	23c0      	movs	r3, #192	@ 0xc0
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	401a      	ands	r2, r3
 8004232:	4b3e      	ldr	r3, [pc, #248]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004234:	430a      	orrs	r2, r1
 8004236:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004238:	2317      	movs	r3, #23
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4b3a      	ldr	r3, [pc, #232]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004246:	4b39      	ldr	r3, [pc, #228]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004248:	493e      	ldr	r1, [pc, #248]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800424a:	400a      	ands	r2, r1
 800424c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004258:	4b34      	ldr	r3, [pc, #208]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	2203      	movs	r2, #3
 800425e:	4393      	bics	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	4b31      	ldr	r3, [pc, #196]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004268:	430a      	orrs	r2, r1
 800426a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004276:	4b2d      	ldr	r3, [pc, #180]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	220c      	movs	r2, #12
 800427c:	4393      	bics	r3, r2
 800427e:	0019      	movs	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	4b29      	ldr	r3, [pc, #164]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004286:	430a      	orrs	r2, r1
 8004288:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2204      	movs	r2, #4
 8004290:	4013      	ands	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004294:	4b25      	ldr	r3, [pc, #148]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004298:	4a2b      	ldr	r2, [pc, #172]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800429a:	4013      	ands	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042a4:	430a      	orrs	r2, r1
 80042a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2208      	movs	r2, #8
 80042ae:	4013      	ands	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b2:	4b1e      	ldr	r3, [pc, #120]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b6:	4a25      	ldr	r2, [pc, #148]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	4b1a      	ldr	r3, [pc, #104]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042c2:	430a      	orrs	r2, r1
 80042c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042d2:	4b16      	ldr	r3, [pc, #88]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	4a17      	ldr	r2, [pc, #92]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2240      	movs	r2, #64	@ 0x40
 80042ec:	4013      	ands	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042fe:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004300:	430a      	orrs	r2, r1
 8004302:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	4013      	ands	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	4a10      	ldr	r2, [pc, #64]	@ (8004354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800431e:	430a      	orrs	r2, r1
 8004320:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	40007000 	.word	0x40007000
 8004334:	fffcffff 	.word	0xfffcffff
 8004338:	fff7ffff 	.word	0xfff7ffff
 800433c:	00001388 	.word	0x00001388
 8004340:	ffcfffff 	.word	0xffcfffff
 8004344:	efffffff 	.word	0xefffffff
 8004348:	fffff3ff 	.word	0xfffff3ff
 800434c:	ffffcfff 	.word	0xffffcfff
 8004350:	fbffffff 	.word	0xfbffffff
 8004354:	fff3ffff 	.word	0xfff3ffff

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e044      	b.n	80043f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2278      	movs	r2, #120	@ 0x78
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f7fc fc89 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2224      	movs	r2, #36	@ 0x24
 8004386:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	438a      	bics	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 ffb4 	bl	8005310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 fd12 	bl	8004dd4 <UART_SetConfig>
 80043b0:	0003      	movs	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01c      	b.n	80043f4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	490d      	ldr	r1, [pc, #52]	@ (80043fc <HAL_UART_Init+0xa4>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	212a      	movs	r1, #42	@ 0x2a
 80043d6:	438a      	bics	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f001 f843 	bl	8005478 <UART_CheckIdleState>
 80043f2:	0003      	movs	r3, r0
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	ffffb7ff 	.word	0xffffb7ff

08004400 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	1dbb      	adds	r3, r7, #6
 800440c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004412:	2b20      	cmp	r3, #32
 8004414:	d000      	beq.n	8004418 <HAL_UART_Transmit_DMA+0x18>
 8004416:	e077      	b.n	8004508 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_UART_Transmit_DMA+0x26>
 800441e:	1dbb      	adds	r3, r7, #6
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06f      	b.n	800450a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	429a      	cmp	r2, r3
 8004434:	d109      	bne.n	800444a <HAL_UART_Transmit_DMA+0x4a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	d001      	beq.n	800444a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e05f      	b.n	800450a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1dba      	adds	r2, r7, #6
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	8812      	ldrh	r2, [r2, #0]
 8004458:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1dba      	adds	r2, r7, #6
 800445e:	2152      	movs	r1, #82	@ 0x52
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2284      	movs	r2, #132	@ 0x84
 8004468:	2100      	movs	r1, #0
 800446a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2221      	movs	r2, #33	@ 0x21
 8004470:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	2b00      	cmp	r3, #0
 8004478:	d027      	beq.n	80044ca <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447e:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <HAL_UART_Transmit_DMA+0x114>)
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a24      	ldr	r2, [pc, #144]	@ (8004518 <HAL_UART_Transmit_DMA+0x118>)
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_UART_Transmit_DMA+0x11c>)
 8004490:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	2200      	movs	r2, #0
 8004498:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	0019      	movs	r1, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3328      	adds	r3, #40	@ 0x28
 80044aa:	001a      	movs	r2, r3
 80044ac:	1dbb      	adds	r3, r7, #6
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	f7fd fb6a 	bl	8001b88 <HAL_DMA_Start_IT>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2284      	movs	r2, #132	@ 0x84
 80044bc:	2110      	movs	r1, #16
 80044be:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e01f      	b.n	800450a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2240      	movs	r2, #64	@ 0x40
 80044d0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	613b      	str	r3, [r7, #16]
  return(result);
 80044d8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f383 8810 	msr	PRIMASK, r3
}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b008      	add	sp, #32
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	080058f9 	.word	0x080058f9
 8004518:	08005991 	.word	0x08005991
 800451c:	08005b97 	.word	0x08005b97

08004520 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	@ 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
 800452c:	617b      	str	r3, [r7, #20]
  return(result);
 800452e:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
 8004532:	2301      	movs	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f383 8810 	msr	PRIMASK, r3
}
 800453c:	46c0      	nop			@ (mov r8, r8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	21c0      	movs	r1, #192	@ 0xc0
 800454a:	438a      	bics	r2, r1
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f383 8810 	msr	PRIMASK, r3
}
 8004558:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2280      	movs	r2, #128	@ 0x80
 8004562:	4013      	ands	r3, r2
 8004564:	2b80      	cmp	r3, #128	@ 0x80
 8004566:	d135      	bne.n	80045d4 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004568:	f3ef 8310 	mrs	r3, PRIMASK
 800456c:	60bb      	str	r3, [r7, #8]
  return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	2301      	movs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2180      	movs	r1, #128	@ 0x80
 800458a:	438a      	bics	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	2200      	movs	r2, #0
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7fd fb50 	bl	8001c54 <HAL_DMA_Abort>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d00d      	beq.n	80045d4 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	0018      	movs	r0, r3
 80045be:	f7fd fc7e 	bl	8001ebe <HAL_DMA_GetError>
 80045c2:	0003      	movs	r3, r0
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d105      	bne.n	80045d4 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2284      	movs	r2, #132	@ 0x84
 80045cc:	2110      	movs	r1, #16
 80045ce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e007      	b.n	80045e4 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2252      	movs	r2, #82	@ 0x52
 80045d8:	2100      	movs	r1, #0
 80045da:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b00a      	add	sp, #40	@ 0x28
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b092      	sub	sp, #72	@ 0x48
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f4:	f3ef 8310 	mrs	r3, PRIMASK
 80045f8:	623b      	str	r3, [r7, #32]
  return(result);
 80045fa:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fe:	2301      	movs	r3, #1
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	f383 8810 	msr	PRIMASK, r3
}
 8004608:	46c0      	nop			@ (mov r8, r8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	494b      	ldr	r1, [pc, #300]	@ (8004744 <HAL_UART_AbortReceive+0x158>)
 8004616:	400a      	ands	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004630:	2301      	movs	r3, #1
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	438a      	bics	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465c:	2b01      	cmp	r3, #1
 800465e:	d118      	bne.n	8004692 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004660:	f3ef 8310 	mrs	r3, PRIMASK
 8004664:	617b      	str	r3, [r7, #20]
  return(result);
 8004666:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2110      	movs	r1, #16
 8004682:	438a      	bics	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2240      	movs	r2, #64	@ 0x40
 800469a:	4013      	ands	r3, r2
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d135      	bne.n	800470c <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a0:	f3ef 8310 	mrs	r3, PRIMASK
 80046a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046a6:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046aa:	2301      	movs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2140      	movs	r1, #64	@ 0x40
 80046c2:	438a      	bics	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fd fab4 	bl	8001c54 <HAL_DMA_Abort>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d00d      	beq.n	800470c <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fd fbe2 	bl	8001ebe <HAL_DMA_GetError>
 80046fa:	0003      	movs	r3, r0
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d105      	bne.n	800470c <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2284      	movs	r2, #132	@ 0x84
 8004704:	2110      	movs	r1, #16
 8004706:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e017      	b.n	800473c <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	225a      	movs	r2, #90	@ 0x5a
 8004710:	2100      	movs	r1, #0
 8004712:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	220f      	movs	r2, #15
 800471a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2108      	movs	r1, #8
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2280      	movs	r2, #128	@ 0x80
 8004730:	2120      	movs	r1, #32
 8004732:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b012      	add	sp, #72	@ 0x48
 8004742:	bd80      	pop	{r7, pc}
 8004744:	fffffedf 	.word	0xfffffedf

08004748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b0ab      	sub	sp, #172	@ 0xac
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	22a4      	movs	r2, #164	@ 0xa4
 8004758:	18b9      	adds	r1, r7, r2
 800475a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	20a0      	movs	r0, #160	@ 0xa0
 8004764:	1839      	adds	r1, r7, r0
 8004766:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	219c      	movs	r1, #156	@ 0x9c
 8004770:	1879      	adds	r1, r7, r1
 8004772:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004774:	0011      	movs	r1, r2
 8004776:	18bb      	adds	r3, r7, r2
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a99      	ldr	r2, [pc, #612]	@ (80049e0 <HAL_UART_IRQHandler+0x298>)
 800477c:	4013      	ands	r3, r2
 800477e:	2298      	movs	r2, #152	@ 0x98
 8004780:	18bc      	adds	r4, r7, r2
 8004782:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004784:	18bb      	adds	r3, r7, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d114      	bne.n	80047b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800478c:	187b      	adds	r3, r7, r1
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2220      	movs	r2, #32
 8004792:	4013      	ands	r3, r2
 8004794:	d00f      	beq.n	80047b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004796:	183b      	adds	r3, r7, r0
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2220      	movs	r2, #32
 800479c:	4013      	ands	r3, r2
 800479e:	d00a      	beq.n	80047b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d100      	bne.n	80047aa <HAL_UART_IRQHandler+0x62>
 80047a8:	e2be      	b.n	8004d28 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	0010      	movs	r0, r2
 80047b2:	4798      	blx	r3
      }
      return;
 80047b4:	e2b8      	b.n	8004d28 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047b6:	2398      	movs	r3, #152	@ 0x98
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d100      	bne.n	80047c2 <HAL_UART_IRQHandler+0x7a>
 80047c0:	e114      	b.n	80049ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047c2:	239c      	movs	r3, #156	@ 0x9c
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	d106      	bne.n	80047dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047ce:	23a0      	movs	r3, #160	@ 0xa0
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a83      	ldr	r2, [pc, #524]	@ (80049e4 <HAL_UART_IRQHandler+0x29c>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	d100      	bne.n	80047dc <HAL_UART_IRQHandler+0x94>
 80047da:	e107      	b.n	80049ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047dc:	23a4      	movs	r3, #164	@ 0xa4
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d012      	beq.n	800480e <HAL_UART_IRQHandler+0xc6>
 80047e8:	23a0      	movs	r3, #160	@ 0xa0
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	d00b      	beq.n	800480e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2284      	movs	r2, #132	@ 0x84
 8004802:	589b      	ldr	r3, [r3, r2]
 8004804:	2201      	movs	r2, #1
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2184      	movs	r1, #132	@ 0x84
 800480c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480e:	23a4      	movs	r3, #164	@ 0xa4
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2202      	movs	r2, #2
 8004816:	4013      	ands	r3, r2
 8004818:	d011      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
 800481a:	239c      	movs	r3, #156	@ 0x9c
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2202      	movs	r2, #2
 800482c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2284      	movs	r2, #132	@ 0x84
 8004832:	589b      	ldr	r3, [r3, r2]
 8004834:	2204      	movs	r2, #4
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2184      	movs	r1, #132	@ 0x84
 800483c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800483e:	23a4      	movs	r3, #164	@ 0xa4
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2204      	movs	r2, #4
 8004846:	4013      	ands	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
 800484a:	239c      	movs	r3, #156	@ 0x9c
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	4013      	ands	r3, r2
 8004854:	d00b      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2204      	movs	r2, #4
 800485c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2284      	movs	r2, #132	@ 0x84
 8004862:	589b      	ldr	r3, [r3, r2]
 8004864:	2202      	movs	r2, #2
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2184      	movs	r1, #132	@ 0x84
 800486c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800486e:	23a4      	movs	r3, #164	@ 0xa4
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2208      	movs	r2, #8
 8004876:	4013      	ands	r3, r2
 8004878:	d017      	beq.n	80048aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800487a:	23a0      	movs	r3, #160	@ 0xa0
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2220      	movs	r2, #32
 8004882:	4013      	ands	r3, r2
 8004884:	d105      	bne.n	8004892 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004886:	239c      	movs	r3, #156	@ 0x9c
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004890:	d00b      	beq.n	80048aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2208      	movs	r2, #8
 8004898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2284      	movs	r2, #132	@ 0x84
 800489e:	589b      	ldr	r3, [r3, r2]
 80048a0:	2208      	movs	r2, #8
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2184      	movs	r1, #132	@ 0x84
 80048a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048aa:	23a4      	movs	r3, #164	@ 0xa4
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_UART_IRQHandler+0x198>
 80048b8:	23a0      	movs	r3, #160	@ 0xa0
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	04db      	lsls	r3, r3, #19
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00c      	beq.n	80048e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2284      	movs	r2, #132	@ 0x84
 80048d4:	589b      	ldr	r3, [r3, r2]
 80048d6:	2220      	movs	r2, #32
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2184      	movs	r1, #132	@ 0x84
 80048de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2284      	movs	r2, #132	@ 0x84
 80048e4:	589b      	ldr	r3, [r3, r2]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d100      	bne.n	80048ec <HAL_UART_IRQHandler+0x1a4>
 80048ea:	e21f      	b.n	8004d2c <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048ec:	23a4      	movs	r3, #164	@ 0xa4
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4013      	ands	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048f8:	23a0      	movs	r3, #160	@ 0xa0
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2220      	movs	r2, #32
 8004900:	4013      	ands	r3, r2
 8004902:	d008      	beq.n	8004916 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	0010      	movs	r0, r2
 8004914:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	@ 0x84
 800491a:	589b      	ldr	r3, [r3, r2]
 800491c:	2194      	movs	r1, #148	@ 0x94
 800491e:	187a      	adds	r2, r7, r1
 8004920:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2240      	movs	r2, #64	@ 0x40
 800492a:	4013      	ands	r3, r2
 800492c:	2b40      	cmp	r3, #64	@ 0x40
 800492e:	d004      	beq.n	800493a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004930:	187b      	adds	r3, r7, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2228      	movs	r2, #40	@ 0x28
 8004936:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004938:	d047      	beq.n	80049ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f000 ff77 	bl	8005830 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2240      	movs	r2, #64	@ 0x40
 800494a:	4013      	ands	r3, r2
 800494c:	2b40      	cmp	r3, #64	@ 0x40
 800494e:	d137      	bne.n	80049c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004958:	2090      	movs	r0, #144	@ 0x90
 800495a:	183a      	adds	r2, r7, r0
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2140      	movs	r1, #64	@ 0x40
 8004976:	438a      	bics	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	183b      	adds	r3, r7, r0
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004994:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <HAL_UART_IRQHandler+0x2a0>)
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499c:	0018      	movs	r0, r3
 800499e:	f7fd f999 	bl	8001cd4 <HAL_DMA_Abort_IT>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d01a      	beq.n	80049dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b0:	0018      	movs	r0, r3
 80049b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e012      	b.n	80049dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f9e5 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049be:	e00d      	b.n	80049dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 f9e0 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	e008      	b.n	80049dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f9db 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2284      	movs	r2, #132	@ 0x84
 80049d6:	2100      	movs	r1, #0
 80049d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80049da:	e1a7      	b.n	8004d2c <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80049de:	e1a5      	b.n	8004d2c <HAL_UART_IRQHandler+0x5e4>
 80049e0:	0000080f 	.word	0x0000080f
 80049e4:	04000120 	.word	0x04000120
 80049e8:	08005c1b 	.word	0x08005c1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d000      	beq.n	80049f6 <HAL_UART_IRQHandler+0x2ae>
 80049f4:	e159      	b.n	8004caa <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049f6:	23a4      	movs	r3, #164	@ 0xa4
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2210      	movs	r2, #16
 80049fe:	4013      	ands	r3, r2
 8004a00:	d100      	bne.n	8004a04 <HAL_UART_IRQHandler+0x2bc>
 8004a02:	e152      	b.n	8004caa <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a04:	23a0      	movs	r3, #160	@ 0xa0
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <HAL_UART_IRQHandler+0x2ca>
 8004a10:	e14b      	b.n	8004caa <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2210      	movs	r2, #16
 8004a18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2240      	movs	r2, #64	@ 0x40
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b40      	cmp	r3, #64	@ 0x40
 8004a26:	d000      	beq.n	8004a2a <HAL_UART_IRQHandler+0x2e2>
 8004a28:	e0bf      	b.n	8004baa <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	217e      	movs	r1, #126	@ 0x7e
 8004a34:	187b      	adds	r3, r7, r1
 8004a36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d100      	bne.n	8004a42 <HAL_UART_IRQHandler+0x2fa>
 8004a40:	e095      	b.n	8004b6e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2258      	movs	r2, #88	@ 0x58
 8004a46:	5a9b      	ldrh	r3, [r3, r2]
 8004a48:	187a      	adds	r2, r7, r1
 8004a4a:	8812      	ldrh	r2, [r2, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d300      	bcc.n	8004a52 <HAL_UART_IRQHandler+0x30a>
 8004a50:	e08d      	b.n	8004b6e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	187a      	adds	r2, r7, r1
 8004a56:	215a      	movs	r1, #90	@ 0x5a
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2220      	movs	r2, #32
 8004a66:	4013      	ands	r3, r2
 8004a68:	d16f      	bne.n	8004b4a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a74:	2301      	movs	r3, #1
 8004a76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	f383 8810 	msr	PRIMASK, r3
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	49ad      	ldr	r1, [pc, #692]	@ (8004d40 <HAL_UART_IRQHandler+0x5f8>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	438a      	bics	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ace:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ad8:	2301      	movs	r3, #1
 8004ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ade:	f383 8810 	msr	PRIMASK, r3
}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2140      	movs	r1, #64	@ 0x40
 8004af0:	438a      	bics	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afa:	f383 8810 	msr	PRIMASK, r3
}
 8004afe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2280      	movs	r2, #128	@ 0x80
 8004b04:	2120      	movs	r1, #32
 8004b06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b18:	2301      	movs	r3, #1
 8004b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b1e:	f383 8810 	msr	PRIMASK, r3
}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2110      	movs	r1, #16
 8004b30:	438a      	bics	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fd f885 	bl	8001c54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2258      	movs	r2, #88	@ 0x58
 8004b54:	5a9a      	ldrh	r2, [r3, r2]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	215a      	movs	r1, #90	@ 0x5a
 8004b5a:	5a5b      	ldrh	r3, [r3, r1]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fb fdc0 	bl	80006ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b6c:	e0e0      	b.n	8004d30 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2258      	movs	r2, #88	@ 0x58
 8004b72:	5a9b      	ldrh	r3, [r3, r2]
 8004b74:	227e      	movs	r2, #126	@ 0x7e
 8004b76:	18ba      	adds	r2, r7, r2
 8004b78:	8812      	ldrh	r2, [r2, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d000      	beq.n	8004b80 <HAL_UART_IRQHandler+0x438>
 8004b7e:	e0d7      	b.n	8004d30 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d000      	beq.n	8004b92 <HAL_UART_IRQHandler+0x44a>
 8004b90:	e0ce      	b.n	8004d30 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2258      	movs	r2, #88	@ 0x58
 8004b9c:	5a9a      	ldrh	r2, [r3, r2]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fb fda2 	bl	80006ec <HAL_UARTEx_RxEventCallback>
      return;
 8004ba8:	e0c2      	b.n	8004d30 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2258      	movs	r2, #88	@ 0x58
 8004bae:	5a99      	ldrh	r1, [r3, r2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	225a      	movs	r2, #90	@ 0x5a
 8004bb4:	5a9b      	ldrh	r3, [r3, r2]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	208e      	movs	r0, #142	@ 0x8e
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	1a8a      	subs	r2, r1, r2
 8004bbe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	225a      	movs	r2, #90	@ 0x5a
 8004bc4:	5a9b      	ldrh	r3, [r3, r2]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d100      	bne.n	8004bce <HAL_UART_IRQHandler+0x486>
 8004bcc:	e0b2      	b.n	8004d34 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d100      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x490>
 8004bd6:	e0ad      	b.n	8004d34 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bde:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be0:	2488      	movs	r4, #136	@ 0x88
 8004be2:	193a      	adds	r2, r7, r4
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4951      	ldr	r1, [pc, #324]	@ (8004d44 <HAL_UART_IRQHandler+0x5fc>)
 8004bfe:	400a      	ands	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c10:	f3ef 8310 	mrs	r3, PRIMASK
 8004c14:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c16:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	2484      	movs	r4, #132	@ 0x84
 8004c1a:	193a      	adds	r2, r7, r4
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	438a      	bics	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2280      	movs	r2, #128	@ 0x80
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c64:	2480      	movs	r4, #128	@ 0x80
 8004c66:	193a      	adds	r2, r7, r4
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2110      	movs	r1, #16
 8004c82:	438a      	bics	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8e:	f383 8810 	msr	PRIMASK, r3
}
 8004c92:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	0011      	movs	r1, r2
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7fb fd22 	bl	80006ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca8:	e044      	b.n	8004d34 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004caa:	23a4      	movs	r3, #164	@ 0xa4
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	035b      	lsls	r3, r3, #13
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d010      	beq.n	8004cda <HAL_UART_IRQHandler+0x592>
 8004cb8:	239c      	movs	r3, #156	@ 0x9c
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	03db      	lsls	r3, r3, #15
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	0352      	lsls	r2, r2, #13
 8004cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 ffdf 	bl	8005c96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cd8:	e02f      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cda:	23a4      	movs	r3, #164	@ 0xa4
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2280      	movs	r2, #128	@ 0x80
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ce6:	23a0      	movs	r3, #160	@ 0xa0
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2280      	movs	r2, #128	@ 0x80
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01e      	beq.n	8004d38 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	0010      	movs	r0, r2
 8004d02:	4798      	blx	r3
    }
    return;
 8004d04:	e018      	b.n	8004d38 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d06:	23a4      	movs	r3, #164	@ 0xa4
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2240      	movs	r2, #64	@ 0x40
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
 8004d12:	23a0      	movs	r3, #160	@ 0xa0
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2240      	movs	r2, #64	@ 0x40
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d00d      	beq.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 ff8d 	bl	8005c40 <UART_EndTransmit_IT>
    return;
 8004d26:	e008      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
      return;
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	e006      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
    return;
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	e004      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
      return;
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	e002      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
      return;
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	e000      	b.n	8004d3a <HAL_UART_IRQHandler+0x5f2>
    return;
 8004d38:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b02b      	add	sp, #172	@ 0xac
 8004d3e:	bd90      	pop	{r4, r7, pc}
 8004d40:	fffffeff 	.word	0xfffffeff
 8004d44:	fffffedf 	.word	0xfffffedf

08004d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2280      	movs	r2, #128	@ 0x80
 8004daa:	589b      	ldr	r3, [r3, r2]
 8004dac:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b004      	add	sp, #16
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2284      	movs	r2, #132	@ 0x84
 8004dc8:	589b      	ldr	r3, [r3, r2]
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b5b0      	push	{r4, r5, r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ddc:	231a      	movs	r3, #26
 8004dde:	2218      	movs	r2, #24
 8004de0:	189b      	adds	r3, r3, r2
 8004de2:	19db      	adds	r3, r3, r7
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4ac3      	ldr	r2, [pc, #780]	@ (8005114 <UART_SetConfig+0x340>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4abe      	ldr	r2, [pc, #760]	@ (8005118 <UART_SetConfig+0x344>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4ab8      	ldr	r2, [pc, #736]	@ (800511c <UART_SetConfig+0x348>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e44:	4313      	orrs	r3, r2
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4ab4      	ldr	r2, [pc, #720]	@ (8005120 <UART_SetConfig+0x34c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4ab0      	ldr	r2, [pc, #704]	@ (8005124 <UART_SetConfig+0x350>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d131      	bne.n	8004ecc <UART_SetConfig+0xf8>
 8004e68:	4baf      	ldr	r3, [pc, #700]	@ (8005128 <UART_SetConfig+0x354>)
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d01d      	beq.n	8004eb0 <UART_SetConfig+0xdc>
 8004e74:	d823      	bhi.n	8004ebe <UART_SetConfig+0xea>
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d00c      	beq.n	8004e94 <UART_SetConfig+0xc0>
 8004e7a:	d820      	bhi.n	8004ebe <UART_SetConfig+0xea>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <UART_SetConfig+0xb2>
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d00e      	beq.n	8004ea2 <UART_SetConfig+0xce>
 8004e84:	e01b      	b.n	8004ebe <UART_SetConfig+0xea>
 8004e86:	231b      	movs	r3, #27
 8004e88:	2218      	movs	r2, #24
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	19db      	adds	r3, r3, r7
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	e0b4      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004e94:	231b      	movs	r3, #27
 8004e96:	2218      	movs	r2, #24
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	19db      	adds	r3, r3, r7
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e0ad      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004ea2:	231b      	movs	r3, #27
 8004ea4:	2218      	movs	r2, #24
 8004ea6:	189b      	adds	r3, r3, r2
 8004ea8:	19db      	adds	r3, r3, r7
 8004eaa:	2204      	movs	r2, #4
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e0a6      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004eb0:	231b      	movs	r3, #27
 8004eb2:	2218      	movs	r2, #24
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	19db      	adds	r3, r3, r7
 8004eb8:	2208      	movs	r2, #8
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e09f      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004ebe:	231b      	movs	r3, #27
 8004ec0:	2218      	movs	r2, #24
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	19db      	adds	r3, r3, r7
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e098      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a96      	ldr	r2, [pc, #600]	@ (800512c <UART_SetConfig+0x358>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d131      	bne.n	8004f3a <UART_SetConfig+0x166>
 8004ed6:	4b94      	ldr	r3, [pc, #592]	@ (8005128 <UART_SetConfig+0x354>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	220c      	movs	r2, #12
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d01d      	beq.n	8004f1e <UART_SetConfig+0x14a>
 8004ee2:	d823      	bhi.n	8004f2c <UART_SetConfig+0x158>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00c      	beq.n	8004f02 <UART_SetConfig+0x12e>
 8004ee8:	d820      	bhi.n	8004f2c <UART_SetConfig+0x158>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <UART_SetConfig+0x120>
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00e      	beq.n	8004f10 <UART_SetConfig+0x13c>
 8004ef2:	e01b      	b.n	8004f2c <UART_SetConfig+0x158>
 8004ef4:	231b      	movs	r3, #27
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	19db      	adds	r3, r3, r7
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e07d      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f02:	231b      	movs	r3, #27
 8004f04:	2218      	movs	r2, #24
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	19db      	adds	r3, r3, r7
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e076      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f10:	231b      	movs	r3, #27
 8004f12:	2218      	movs	r2, #24
 8004f14:	189b      	adds	r3, r3, r2
 8004f16:	19db      	adds	r3, r3, r7
 8004f18:	2204      	movs	r2, #4
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e06f      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f1e:	231b      	movs	r3, #27
 8004f20:	2218      	movs	r2, #24
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	19db      	adds	r3, r3, r7
 8004f26:	2208      	movs	r2, #8
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e068      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f2c:	231b      	movs	r3, #27
 8004f2e:	2218      	movs	r2, #24
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	19db      	adds	r3, r3, r7
 8004f34:	2210      	movs	r2, #16
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e061      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <UART_SetConfig+0x35c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d106      	bne.n	8004f52 <UART_SetConfig+0x17e>
 8004f44:	231b      	movs	r3, #27
 8004f46:	2218      	movs	r2, #24
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	19db      	adds	r3, r3, r7
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e055      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a77      	ldr	r2, [pc, #476]	@ (8005134 <UART_SetConfig+0x360>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d106      	bne.n	8004f6a <UART_SetConfig+0x196>
 8004f5c:	231b      	movs	r3, #27
 8004f5e:	2218      	movs	r2, #24
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	19db      	adds	r3, r3, r7
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e049      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800511c <UART_SetConfig+0x348>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d13e      	bne.n	8004ff2 <UART_SetConfig+0x21e>
 8004f74:	4b6c      	ldr	r3, [pc, #432]	@ (8005128 <UART_SetConfig+0x354>)
 8004f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f78:	23c0      	movs	r3, #192	@ 0xc0
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	22c0      	movs	r2, #192	@ 0xc0
 8004f80:	0112      	lsls	r2, r2, #4
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d027      	beq.n	8004fd6 <UART_SetConfig+0x202>
 8004f86:	22c0      	movs	r2, #192	@ 0xc0
 8004f88:	0112      	lsls	r2, r2, #4
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d82a      	bhi.n	8004fe4 <UART_SetConfig+0x210>
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d011      	beq.n	8004fba <UART_SetConfig+0x1e6>
 8004f96:	2280      	movs	r2, #128	@ 0x80
 8004f98:	0112      	lsls	r2, r2, #4
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d822      	bhi.n	8004fe4 <UART_SetConfig+0x210>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <UART_SetConfig+0x1d8>
 8004fa2:	2280      	movs	r2, #128	@ 0x80
 8004fa4:	00d2      	lsls	r2, r2, #3
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <UART_SetConfig+0x1f4>
 8004faa:	e01b      	b.n	8004fe4 <UART_SetConfig+0x210>
 8004fac:	231b      	movs	r3, #27
 8004fae:	2218      	movs	r2, #24
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	19db      	adds	r3, r3, r7
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e021      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004fba:	231b      	movs	r3, #27
 8004fbc:	2218      	movs	r2, #24
 8004fbe:	189b      	adds	r3, r3, r2
 8004fc0:	19db      	adds	r3, r3, r7
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e01a      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004fc8:	231b      	movs	r3, #27
 8004fca:	2218      	movs	r2, #24
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	19db      	adds	r3, r3, r7
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e013      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004fd6:	231b      	movs	r3, #27
 8004fd8:	2218      	movs	r2, #24
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	19db      	adds	r3, r3, r7
 8004fde:	2208      	movs	r2, #8
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e00c      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004fe4:	231b      	movs	r3, #27
 8004fe6:	2218      	movs	r2, #24
 8004fe8:	189b      	adds	r3, r3, r2
 8004fea:	19db      	adds	r3, r3, r7
 8004fec:	2210      	movs	r2, #16
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e005      	b.n	8004ffe <UART_SetConfig+0x22a>
 8004ff2:	231b      	movs	r3, #27
 8004ff4:	2218      	movs	r2, #24
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	19db      	adds	r3, r3, r7
 8004ffa:	2210      	movs	r2, #16
 8004ffc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a46      	ldr	r2, [pc, #280]	@ (800511c <UART_SetConfig+0x348>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d000      	beq.n	800500a <UART_SetConfig+0x236>
 8005008:	e09a      	b.n	8005140 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800500a:	231b      	movs	r3, #27
 800500c:	2218      	movs	r2, #24
 800500e:	189b      	adds	r3, r3, r2
 8005010:	19db      	adds	r3, r3, r7
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d01d      	beq.n	8005054 <UART_SetConfig+0x280>
 8005018:	dc20      	bgt.n	800505c <UART_SetConfig+0x288>
 800501a:	2b04      	cmp	r3, #4
 800501c:	d015      	beq.n	800504a <UART_SetConfig+0x276>
 800501e:	dc1d      	bgt.n	800505c <UART_SetConfig+0x288>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <UART_SetConfig+0x256>
 8005024:	2b02      	cmp	r3, #2
 8005026:	d005      	beq.n	8005034 <UART_SetConfig+0x260>
 8005028:	e018      	b.n	800505c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502a:	f7fe ffcb 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 800502e:	0003      	movs	r3, r0
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005032:	e01c      	b.n	800506e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <UART_SetConfig+0x354>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	4013      	ands	r3, r2
 800503c:	d002      	beq.n	8005044 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800503e:	4b3e      	ldr	r3, [pc, #248]	@ (8005138 <UART_SetConfig+0x364>)
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005042:	e014      	b.n	800506e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005044:	4b3d      	ldr	r3, [pc, #244]	@ (800513c <UART_SetConfig+0x368>)
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005048:	e011      	b.n	800506e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe ff2b 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 800504e:	0003      	movs	r3, r0
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005052:	e00c      	b.n	800506e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800505a:	e008      	b.n	800506e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005060:	231a      	movs	r3, #26
 8005062:	2218      	movs	r2, #24
 8005064:	189b      	adds	r3, r3, r2
 8005066:	19db      	adds	r3, r3, r7
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
        break;
 800506c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d100      	bne.n	8005076 <UART_SetConfig+0x2a2>
 8005074:	e133      	b.n	80052de <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	0013      	movs	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	189b      	adds	r3, r3, r2
 8005080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005082:	429a      	cmp	r2, r3
 8005084:	d305      	bcc.n	8005092 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800508c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800508e:	429a      	cmp	r2, r3
 8005090:	d906      	bls.n	80050a0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005092:	231a      	movs	r3, #26
 8005094:	2218      	movs	r2, #24
 8005096:	189b      	adds	r3, r3, r2
 8005098:	19db      	adds	r3, r3, r7
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e11e      	b.n	80052de <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	6939      	ldr	r1, [r7, #16]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	000b      	movs	r3, r1
 80050ae:	0e1b      	lsrs	r3, r3, #24
 80050b0:	0010      	movs	r0, r2
 80050b2:	0205      	lsls	r5, r0, #8
 80050b4:	431d      	orrs	r5, r3
 80050b6:	000b      	movs	r3, r1
 80050b8:	021c      	lsls	r4, r3, #8
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	1900      	adds	r0, r0, r4
 80050cc:	4169      	adcs	r1, r5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f7fb f8b2 	bl	8000244 <__aeabi_uldivmod>
 80050e0:	0002      	movs	r2, r0
 80050e2:	000b      	movs	r3, r1
 80050e4:	0013      	movs	r3, r2
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ea:	23c0      	movs	r3, #192	@ 0xc0
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d309      	bcc.n	8005106 <UART_SetConfig+0x332>
 80050f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	035b      	lsls	r3, r3, #13
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d204      	bcs.n	8005106 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e0eb      	b.n	80052de <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005106:	231a      	movs	r3, #26
 8005108:	2218      	movs	r2, #24
 800510a:	189b      	adds	r3, r3, r2
 800510c:	19db      	adds	r3, r3, r7
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e0e4      	b.n	80052de <UART_SetConfig+0x50a>
 8005114:	efff69f3 	.word	0xefff69f3
 8005118:	ffffcfff 	.word	0xffffcfff
 800511c:	40004800 	.word	0x40004800
 8005120:	fffff4ff 	.word	0xfffff4ff
 8005124:	40013800 	.word	0x40013800
 8005128:	40021000 	.word	0x40021000
 800512c:	40004400 	.word	0x40004400
 8005130:	40004c00 	.word	0x40004c00
 8005134:	40005000 	.word	0x40005000
 8005138:	003d0900 	.word	0x003d0900
 800513c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	429a      	cmp	r2, r3
 800514a:	d000      	beq.n	800514e <UART_SetConfig+0x37a>
 800514c:	e070      	b.n	8005230 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800514e:	231b      	movs	r3, #27
 8005150:	2218      	movs	r2, #24
 8005152:	189b      	adds	r3, r3, r2
 8005154:	19db      	adds	r3, r3, r7
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d822      	bhi.n	80051a2 <UART_SetConfig+0x3ce>
 800515c:	009a      	lsls	r2, r3, #2
 800515e:	4b67      	ldr	r3, [pc, #412]	@ (80052fc <UART_SetConfig+0x528>)
 8005160:	18d3      	adds	r3, r2, r3
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005166:	f7fe ff2d 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 800516a:	0003      	movs	r3, r0
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800516e:	e021      	b.n	80051b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe ff3e 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8005174:	0003      	movs	r3, r0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005178:	e01c      	b.n	80051b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517a:	4b61      	ldr	r3, [pc, #388]	@ (8005300 <UART_SetConfig+0x52c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2210      	movs	r2, #16
 8005180:	4013      	ands	r3, r2
 8005182:	d002      	beq.n	800518a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005184:	4b5f      	ldr	r3, [pc, #380]	@ (8005304 <UART_SetConfig+0x530>)
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005188:	e014      	b.n	80051b4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800518a:	4b5f      	ldr	r3, [pc, #380]	@ (8005308 <UART_SetConfig+0x534>)
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800518e:	e011      	b.n	80051b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005190:	f7fe fe88 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8005194:	0003      	movs	r3, r0
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005198:	e00c      	b.n	80051b4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051a0:	e008      	b.n	80051b4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80051a6:	231a      	movs	r3, #26
 80051a8:	2218      	movs	r2, #24
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
        break;
 80051b2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d100      	bne.n	80051bc <UART_SetConfig+0x3e8>
 80051ba:	e090      	b.n	80052de <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051be:	005a      	lsls	r2, r3, #1
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	18d2      	adds	r2, r2, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	0019      	movs	r1, r3
 80051ce:	0010      	movs	r0, r2
 80051d0:	f7fa ffac 	bl	800012c <__udivsi3>
 80051d4:	0003      	movs	r3, r0
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d921      	bls.n	8005222 <UART_SetConfig+0x44e>
 80051de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	025b      	lsls	r3, r3, #9
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d21c      	bcs.n	8005222 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	200e      	movs	r0, #14
 80051ee:	2418      	movs	r4, #24
 80051f0:	1903      	adds	r3, r0, r4
 80051f2:	19db      	adds	r3, r3, r7
 80051f4:	210f      	movs	r1, #15
 80051f6:	438a      	bics	r2, r1
 80051f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2207      	movs	r2, #7
 8005202:	4013      	ands	r3, r2
 8005204:	b299      	uxth	r1, r3
 8005206:	1903      	adds	r3, r0, r4
 8005208:	19db      	adds	r3, r3, r7
 800520a:	1902      	adds	r2, r0, r4
 800520c:	19d2      	adds	r2, r2, r7
 800520e:	8812      	ldrh	r2, [r2, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1902      	adds	r2, r0, r4
 800521a:	19d2      	adds	r2, r2, r7
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	e05d      	b.n	80052de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005222:	231a      	movs	r3, #26
 8005224:	2218      	movs	r2, #24
 8005226:	189b      	adds	r3, r3, r2
 8005228:	19db      	adds	r3, r3, r7
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e056      	b.n	80052de <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005230:	231b      	movs	r3, #27
 8005232:	2218      	movs	r2, #24
 8005234:	189b      	adds	r3, r3, r2
 8005236:	19db      	adds	r3, r3, r7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d822      	bhi.n	8005284 <UART_SetConfig+0x4b0>
 800523e:	009a      	lsls	r2, r3, #2
 8005240:	4b32      	ldr	r3, [pc, #200]	@ (800530c <UART_SetConfig+0x538>)
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fe febc 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 800524c:	0003      	movs	r3, r0
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005250:	e021      	b.n	8005296 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005252:	f7fe fecd 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8005256:	0003      	movs	r3, r0
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800525a:	e01c      	b.n	8005296 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525c:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <UART_SetConfig+0x52c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	4013      	ands	r3, r2
 8005264:	d002      	beq.n	800526c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005266:	4b27      	ldr	r3, [pc, #156]	@ (8005304 <UART_SetConfig+0x530>)
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800526a:	e014      	b.n	8005296 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800526c:	4b26      	ldr	r3, [pc, #152]	@ (8005308 <UART_SetConfig+0x534>)
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005270:	e011      	b.n	8005296 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7fe fe17 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8005276:	0003      	movs	r3, r0
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800527a:	e00c      	b.n	8005296 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005282:	e008      	b.n	8005296 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005288:	231a      	movs	r3, #26
 800528a:	2218      	movs	r2, #24
 800528c:	189b      	adds	r3, r3, r2
 800528e:	19db      	adds	r3, r3, r7
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
        break;
 8005294:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	085a      	lsrs	r2, r3, #1
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	18d2      	adds	r2, r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	0019      	movs	r1, r3
 80052ac:	0010      	movs	r0, r2
 80052ae:	f7fa ff3d 	bl	800012c <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	2b0f      	cmp	r3, #15
 80052ba:	d90a      	bls.n	80052d2 <UART_SetConfig+0x4fe>
 80052bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	025b      	lsls	r3, r3, #9
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d205      	bcs.n	80052d2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	e005      	b.n	80052de <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80052d2:	231a      	movs	r3, #26
 80052d4:	2218      	movs	r2, #24
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	19db      	adds	r3, r3, r7
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2200      	movs	r2, #0
 80052e2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2200      	movs	r2, #0
 80052e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052ea:	231a      	movs	r3, #26
 80052ec:	2218      	movs	r2, #24
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	19db      	adds	r3, r3, r7
 80052f2:	781b      	ldrb	r3, [r3, #0]
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b00e      	add	sp, #56	@ 0x38
 80052fa:	bdb0      	pop	{r4, r5, r7, pc}
 80052fc:	08007b18 	.word	0x08007b18
 8005300:	40021000 	.word	0x40021000
 8005304:	003d0900 	.word	0x003d0900
 8005308:	00f42400 	.word	0x00f42400
 800530c:	08007b3c 	.word	0x08007b3c

08005310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	2208      	movs	r2, #8
 800531e:	4013      	ands	r3, r2
 8005320:	d00b      	beq.n	800533a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a4a      	ldr	r2, [pc, #296]	@ (8005454 <UART_AdvFeatureConfig+0x144>)
 800532a:	4013      	ands	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	2201      	movs	r2, #1
 8005340:	4013      	ands	r3, r2
 8005342:	d00b      	beq.n	800535c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a43      	ldr	r2, [pc, #268]	@ (8005458 <UART_AdvFeatureConfig+0x148>)
 800534c:	4013      	ands	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	2202      	movs	r2, #2
 8005362:	4013      	ands	r3, r2
 8005364:	d00b      	beq.n	800537e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4a3b      	ldr	r2, [pc, #236]	@ (800545c <UART_AdvFeatureConfig+0x14c>)
 800536e:	4013      	ands	r3, r2
 8005370:	0019      	movs	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	2204      	movs	r2, #4
 8005384:	4013      	ands	r3, r2
 8005386:	d00b      	beq.n	80053a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4a34      	ldr	r2, [pc, #208]	@ (8005460 <UART_AdvFeatureConfig+0x150>)
 8005390:	4013      	ands	r3, r2
 8005392:	0019      	movs	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	2210      	movs	r2, #16
 80053a6:	4013      	ands	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005464 <UART_AdvFeatureConfig+0x154>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	2220      	movs	r2, #32
 80053c8:	4013      	ands	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a25      	ldr	r2, [pc, #148]	@ (8005468 <UART_AdvFeatureConfig+0x158>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	2240      	movs	r2, #64	@ 0x40
 80053ea:	4013      	ands	r3, r2
 80053ec:	d01d      	beq.n	800542a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <UART_AdvFeatureConfig+0x15c>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540a:	2380      	movs	r3, #128	@ 0x80
 800540c:	035b      	lsls	r3, r3, #13
 800540e:	429a      	cmp	r2, r3
 8005410:	d10b      	bne.n	800542a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4a15      	ldr	r2, [pc, #84]	@ (8005470 <UART_AdvFeatureConfig+0x160>)
 800541a:	4013      	ands	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	2280      	movs	r2, #128	@ 0x80
 8005430:	4013      	ands	r3, r2
 8005432:	d00b      	beq.n	800544c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4a0e      	ldr	r2, [pc, #56]	@ (8005474 <UART_AdvFeatureConfig+0x164>)
 800543c:	4013      	ands	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}
 8005454:	ffff7fff 	.word	0xffff7fff
 8005458:	fffdffff 	.word	0xfffdffff
 800545c:	fffeffff 	.word	0xfffeffff
 8005460:	fffbffff 	.word	0xfffbffff
 8005464:	ffffefff 	.word	0xffffefff
 8005468:	ffffdfff 	.word	0xffffdfff
 800546c:	ffefffff 	.word	0xffefffff
 8005470:	ff9fffff 	.word	0xff9fffff
 8005474:	fff7ffff 	.word	0xfff7ffff

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b092      	sub	sp, #72	@ 0x48
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2284      	movs	r2, #132	@ 0x84
 8005484:	2100      	movs	r1, #0
 8005486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fc f9d6 	bl	8001838 <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2208      	movs	r2, #8
 8005498:	4013      	ands	r3, r2
 800549a:	2b08      	cmp	r3, #8
 800549c:	d12c      	bne.n	80054f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a0:	2280      	movs	r2, #128	@ 0x80
 80054a2:	0391      	lsls	r1, r2, #14
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4a46      	ldr	r2, [pc, #280]	@ (80055c0 <UART_CheckIdleState+0x148>)
 80054a8:	9200      	str	r2, [sp, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f000 f88c 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d021      	beq.n	80054f8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b4:	f3ef 8310 	mrs	r3, PRIMASK
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054be:	2301      	movs	r3, #1
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			@ (mov r8, r8)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2180      	movs	r1, #128	@ 0x80
 80054d6:	438a      	bics	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	f383 8810 	msr	PRIMASK, r3
}
 80054e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2278      	movs	r2, #120	@ 0x78
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e05f      	b.n	80055b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2204      	movs	r2, #4
 8005500:	4013      	ands	r3, r2
 8005502:	2b04      	cmp	r3, #4
 8005504:	d146      	bne.n	8005594 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005508:	2280      	movs	r2, #128	@ 0x80
 800550a:	03d1      	lsls	r1, r2, #15
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4a2c      	ldr	r2, [pc, #176]	@ (80055c0 <UART_CheckIdleState+0x148>)
 8005510:	9200      	str	r2, [sp, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	f000 f858 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d03b      	beq.n	8005594 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551c:	f3ef 8310 	mrs	r3, PRIMASK
 8005520:	60fb      	str	r3, [r7, #12]
  return(result);
 8005522:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
 8005526:	2301      	movs	r3, #1
 8005528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f383 8810 	msr	PRIMASK, r3
}
 8005530:	46c0      	nop			@ (mov r8, r8)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4921      	ldr	r1, [pc, #132]	@ (80055c4 <UART_CheckIdleState+0x14c>)
 800553e:	400a      	ands	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554e:	f3ef 8310 	mrs	r3, PRIMASK
 8005552:	61bb      	str	r3, [r7, #24]
  return(result);
 8005554:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
 8005558:	2301      	movs	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f383 8810 	msr	PRIMASK, r3
}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	438a      	bics	r2, r1
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	2120      	movs	r1, #32
 8005586:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2278      	movs	r2, #120	@ 0x78
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e011      	b.n	80055b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2280      	movs	r2, #128	@ 0x80
 800559e:	2120      	movs	r1, #32
 80055a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2278      	movs	r2, #120	@ 0x78
 80055b2:	2100      	movs	r1, #0
 80055b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b010      	add	sp, #64	@ 0x40
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	01ffffff 	.word	0x01ffffff
 80055c4:	fffffedf 	.word	0xfffffedf

080055c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	1dfb      	adds	r3, r7, #7
 80055d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	e051      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	3301      	adds	r3, #1
 80055de:	d04e      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e0:	f7fc f92a 	bl	8001838 <HAL_GetTick>
 80055e4:	0002      	movs	r2, r0
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e051      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2204      	movs	r2, #4
 8005602:	4013      	ands	r3, r2
 8005604:	d03b      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b80      	cmp	r3, #128	@ 0x80
 800560a:	d038      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d035      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2208      	movs	r2, #8
 800561a:	4013      	ands	r3, r2
 800561c:	2b08      	cmp	r3, #8
 800561e:	d111      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2208      	movs	r2, #8
 8005626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 f900 	bl	8005830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2284      	movs	r2, #132	@ 0x84
 8005634:	2108      	movs	r1, #8
 8005636:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2278      	movs	r2, #120	@ 0x78
 800563c:	2100      	movs	r1, #0
 800563e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e02c      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	2380      	movs	r3, #128	@ 0x80
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	401a      	ands	r2, r3
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	429a      	cmp	r2, r3
 8005656:	d112      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2280      	movs	r2, #128	@ 0x80
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 f8e3 	bl	8005830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2284      	movs	r2, #132	@ 0x84
 800566e:	2120      	movs	r1, #32
 8005670:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2278      	movs	r2, #120	@ 0x78
 8005676:	2100      	movs	r1, #0
 8005678:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e00f      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	425a      	negs	r2, r3
 800568e:	4153      	adcs	r3, r2
 8005690:	b2db      	uxtb	r3, r3
 8005692:	001a      	movs	r2, r3
 8005694:	1dfb      	adds	r3, r7, #7
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d09e      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b090      	sub	sp, #64	@ 0x40
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	1dbb      	adds	r3, r7, #6
 80056b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1dba      	adds	r2, r7, #6
 80056c0:	2158      	movs	r1, #88	@ 0x58
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2284      	movs	r2, #132	@ 0x84
 80056ca:	2100      	movs	r1, #0
 80056cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2280      	movs	r2, #128	@ 0x80
 80056d2:	2122      	movs	r1, #34	@ 0x22
 80056d4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d028      	beq.n	8005730 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e2:	4a3e      	ldr	r2, [pc, #248]	@ (80057dc <UART_Start_Receive_DMA+0x134>)
 80056e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ea:	4a3d      	ldr	r2, [pc, #244]	@ (80057e0 <UART_Start_Receive_DMA+0x138>)
 80056ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f2:	4a3c      	ldr	r2, [pc, #240]	@ (80057e4 <UART_Start_Receive_DMA+0x13c>)
 80056f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056fa:	2200      	movs	r2, #0
 80056fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3324      	adds	r3, #36	@ 0x24
 8005708:	0019      	movs	r1, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570e:	001a      	movs	r2, r3
 8005710:	1dbb      	adds	r3, r7, #6
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	f7fc fa38 	bl	8001b88 <HAL_DMA_Start_IT>
 8005718:	1e03      	subs	r3, r0, #0
 800571a:	d009      	beq.n	8005730 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2284      	movs	r2, #132	@ 0x84
 8005720:	2110      	movs	r1, #16
 8005722:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2280      	movs	r2, #128	@ 0x80
 8005728:	2120      	movs	r1, #32
 800572a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e050      	b.n	80057d2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d019      	beq.n	800576c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005738:	f3ef 8310 	mrs	r3, PRIMASK
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005742:	2301      	movs	r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2180      	movs	r1, #128	@ 0x80
 800575a:	0049      	lsls	r1, r1, #1
 800575c:	430a      	orrs	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	f383 8810 	msr	PRIMASK, r3
}
 800576a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576c:	f3ef 8310 	mrs	r3, PRIMASK
 8005770:	613b      	str	r3, [r7, #16]
  return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005776:	2301      	movs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2101      	movs	r1, #1
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579e:	f3ef 8310 	mrs	r3, PRIMASK
 80057a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80057a4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	2301      	movs	r3, #1
 80057aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	f383 8810 	msr	PRIMASK, r3
}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2140      	movs	r1, #64	@ 0x40
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	0018      	movs	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b010      	add	sp, #64	@ 0x40
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	080059b1 	.word	0x080059b1
 80057e0:	08005b19 	.word	0x08005b19
 80057e4:	08005b97 	.word	0x08005b97

080057e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057f6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	2301      	movs	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			@ (mov r8, r8)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	21c0      	movs	r1, #192	@ 0xc0
 8005812:	438a      	bics	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005828:	46c0      	nop			@ (mov r8, r8)
 800582a:	46bd      	mov	sp, r7
 800582c:	b006      	add	sp, #24
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	@ 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005838:	f3ef 8310 	mrs	r3, PRIMASK
 800583c:	617b      	str	r3, [r7, #20]
  return(result);
 800583e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005840:	637b      	str	r3, [r7, #52]	@ 0x34
 8005842:	2301      	movs	r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4926      	ldr	r1, [pc, #152]	@ (80058f4 <UART_EndRxTransfer+0xc4>)
 800585a:	400a      	ands	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	623b      	str	r3, [r7, #32]
  return(result);
 8005870:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	633b      	str	r3, [r7, #48]	@ 0x30
 8005874:	2301      	movs	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	f383 8810 	msr	PRIMASK, r3
}
 800587e:	46c0      	nop			@ (mov r8, r8)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2101      	movs	r1, #1
 800588c:	438a      	bics	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d118      	bne.n	80058d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a4:	f3ef 8310 	mrs	r3, PRIMASK
 80058a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80058aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ae:	2301      	movs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			@ (mov r8, r8)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2110      	movs	r1, #16
 80058c6:	438a      	bics	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f383 8810 	msr	PRIMASK, r3
}
 80058d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2280      	movs	r2, #128	@ 0x80
 80058da:	2120      	movs	r1, #32
 80058dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b00e      	add	sp, #56	@ 0x38
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	fffffedf 	.word	0xfffffedf

080058f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	@ 0x30
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2220      	movs	r2, #32
 800590e:	4013      	ands	r3, r2
 8005910:	d135      	bne.n	800597e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2252      	movs	r2, #82	@ 0x52
 8005916:	2100      	movs	r1, #0
 8005918:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591a:	f3ef 8310 	mrs	r3, PRIMASK
 800591e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005920:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005924:	2301      	movs	r3, #1
 8005926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2180      	movs	r1, #128	@ 0x80
 800593c:	438a      	bics	r2, r1
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f383 8810 	msr	PRIMASK, r3
}
 800594a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594c:	f3ef 8310 	mrs	r3, PRIMASK
 8005950:	61bb      	str	r3, [r7, #24]
  return(result);
 8005952:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
 8005956:	2301      	movs	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	46c0      	nop			@ (mov r8, r8)
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2140      	movs	r1, #64	@ 0x40
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f383 8810 	msr	PRIMASK, r3
}
 800597c:	e004      	b.n	8005988 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	0018      	movs	r0, r3
 8005982:	f7ff f9e1 	bl	8004d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	46c0      	nop			@ (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b00c      	add	sp, #48	@ 0x30
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff f9d9 	bl	8004d58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b094      	sub	sp, #80	@ 0x50
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2220      	movs	r2, #32
 80059c6:	4013      	ands	r3, r2
 80059c8:	d16f      	bne.n	8005aaa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80059ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059cc:	225a      	movs	r2, #90	@ 0x5a
 80059ce:	2100      	movs	r1, #0
 80059d0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	617b      	str	r3, [r7, #20]
  return(result);
 80059d8:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059dc:	2301      	movs	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f383 8810 	msr	PRIMASK, r3
}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4948      	ldr	r1, [pc, #288]	@ (8005b14 <UART_DMAReceiveCplt+0x164>)
 80059f4:	400a      	ands	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a04:	f3ef 8310 	mrs	r3, PRIMASK
 8005a08:	623b      	str	r3, [r7, #32]
  return(result);
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0e:	2301      	movs	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	438a      	bics	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]
 8005a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	f383 8810 	msr	PRIMASK, r3
}
 8005a34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a36:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a40:	2301      	movs	r3, #1
 8005a42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2140      	movs	r1, #64	@ 0x40
 8005a58:	438a      	bics	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a6a:	2280      	movs	r2, #128	@ 0x80
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d118      	bne.n	8005aaa <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a78:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a82:	2301      	movs	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f383 8810 	msr	PRIMASK, r3
}
 8005a8c:	46c0      	nop			@ (mov r8, r8)
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2110      	movs	r1, #16
 8005a9a:	438a      	bics	r2, r1
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aac:	2200      	movs	r2, #0
 8005aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d124      	bne.n	8005b02 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aba:	225a      	movs	r2, #90	@ 0x5a
 8005abc:	2100      	movs	r1, #0
 8005abe:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	213a      	movs	r1, #58	@ 0x3a
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ace:	2258      	movs	r2, #88	@ 0x58
 8005ad0:	5a9b      	ldrh	r3, [r3, r2]
 8005ad2:	187a      	adds	r2, r7, r1
 8005ad4:	8812      	ldrh	r2, [r2, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d204      	bcs.n	8005ae4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005adc:	187a      	adds	r2, r7, r1
 8005ade:	215a      	movs	r1, #90	@ 0x5a
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae6:	2258      	movs	r2, #88	@ 0x58
 8005ae8:	5a9a      	ldrh	r2, [r3, r2]
 8005aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aec:	215a      	movs	r1, #90	@ 0x5a
 8005aee:	5a5b      	ldrh	r3, [r3, r1]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af8:	0011      	movs	r1, r2
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7fa fdf6 	bl	80006ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b00:	e003      	b.n	8005b0a <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff f92f 	bl	8004d68 <HAL_UART_RxCpltCallback>
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b014      	add	sp, #80	@ 0x50
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	fffffeff 	.word	0xfffffeff

08005b18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d128      	bne.n	8005b86 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2258      	movs	r2, #88	@ 0x58
 8005b38:	5a9b      	ldrh	r3, [r3, r2]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	b299      	uxth	r1, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	225a      	movs	r2, #90	@ 0x5a
 8005b42:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	210a      	movs	r1, #10
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2258      	movs	r2, #88	@ 0x58
 8005b54:	5a9b      	ldrh	r3, [r3, r2]
 8005b56:	187a      	adds	r2, r7, r1
 8005b58:	8812      	ldrh	r2, [r2, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d804      	bhi.n	8005b68 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	187a      	adds	r2, r7, r1
 8005b62:	215a      	movs	r1, #90	@ 0x5a
 8005b64:	8812      	ldrh	r2, [r2, #0]
 8005b66:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2258      	movs	r2, #88	@ 0x58
 8005b6c:	5a9a      	ldrh	r2, [r3, r2]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	215a      	movs	r1, #90	@ 0x5a
 8005b72:	5a5b      	ldrh	r3, [r3, r1]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	0011      	movs	r1, r2
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7fa fdb4 	bl	80006ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b84:	e003      	b.n	8005b8e <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7ff f8f5 	bl	8004d78 <HAL_UART_RxHalfCpltCallback>
}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b004      	add	sp, #16
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2280      	movs	r2, #128	@ 0x80
 8005bae:	589b      	ldr	r3, [r3, r2]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2280      	movs	r2, #128	@ 0x80
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b80      	cmp	r3, #128	@ 0x80
 8005bbe:	d10a      	bne.n	8005bd6 <UART_DMAError+0x40>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b21      	cmp	r3, #33	@ 0x21
 8005bc4:	d107      	bne.n	8005bd6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2252      	movs	r2, #82	@ 0x52
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7ff fe09 	bl	80057e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2240      	movs	r2, #64	@ 0x40
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d10a      	bne.n	8005bfa <UART_DMAError+0x64>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b22      	cmp	r3, #34	@ 0x22
 8005be8:	d107      	bne.n	8005bfa <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	225a      	movs	r2, #90	@ 0x5a
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff fe1b 	bl	8005830 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2284      	movs	r2, #132	@ 0x84
 8005bfe:	589b      	ldr	r3, [r3, r2]
 8005c00:	2210      	movs	r2, #16
 8005c02:	431a      	orrs	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2184      	movs	r1, #132	@ 0x84
 8005c08:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff f8bb 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b006      	add	sp, #24
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	225a      	movs	r2, #90	@ 0x5a
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff f8a8 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c38:	46c0      	nop			@ (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c48:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	2301      	movs	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f383 8810 	msr	PRIMASK, r3
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2140      	movs	r1, #64	@ 0x40
 8005c6a:	438a      	bics	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff f85d 	bl	8004d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b006      	add	sp, #24
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b002      	add	sp, #8
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca6:	b5b0      	push	{r4, r5, r7, lr}
 8005ca8:	b08a      	sub	sp, #40	@ 0x28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2280      	movs	r2, #128	@ 0x80
 8005cb8:	589b      	ldr	r3, [r3, r2]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d156      	bne.n	8005d6c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005cc4:	1dbb      	adds	r3, r7, #6
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04e      	b.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d109      	bne.n	8005cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d105      	bne.n	8005cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d001      	beq.n	8005cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e03e      	b.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005cfc:	2527      	movs	r5, #39	@ 0x27
 8005cfe:	197c      	adds	r4, r7, r5
 8005d00:	1dbb      	adds	r3, r7, #6
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff fccd 	bl	80056a8 <UART_Start_Receive_DMA>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d12:	197b      	adds	r3, r7, r5
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d124      	bne.n	8005d64 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d11c      	bne.n	8005d5c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2210      	movs	r2, #16
 8005d28:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d30:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	2301      	movs	r3, #1
 8005d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	e003      	b.n	8005d64 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d5c:	2327      	movs	r3, #39	@ 0x27
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005d64:	2327      	movs	r3, #39	@ 0x27
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	e000      	b.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005d6c:	2302      	movs	r3, #2
  }
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b00a      	add	sp, #40	@ 0x28
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}

08005d76 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fb11 	bl	80063ac <malloc>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <ATC_Free+0x26>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 fb04 	bl	80063c0 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
  }
}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b002      	add	sp, #8
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8a9b      	ldrh	r3, [r3, #20]
 8005ddc:	001a      	movs	r2, r3
 8005dde:	2100      	movs	r1, #0
 8005de0:	f000 fdca 	bl	8006978 <memset>
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}

08005dec <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	1dbb      	adds	r3, r7, #6
 8005df8:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005dfa:	2417      	movs	r4, #23
 8005dfc:	193b      	adds	r3, r7, r4
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1dba      	adds	r2, r7, #6
 8005e06:	8812      	ldrh	r2, [r2, #0]
 8005e08:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	1dbb      	adds	r3, r7, #6
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0019      	movs	r1, r3
 8005e16:	f7fe faf3 	bl	8004400 <HAL_UART_Transmit_DMA>
 8005e1a:	1e03      	subs	r3, r0, #0
 8005e1c:	d103      	bne.n	8005e26 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8005e1e:	193b      	adds	r3, r7, r4
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e000      	b.n	8005e28 <ATC_TxRaw+0x3c>
      break;
 8005e26:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005e28:	2317      	movs	r3, #23
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	781b      	ldrb	r3, [r3, #0]
}
 8005e2e:	0018      	movs	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b007      	add	sp, #28
 8005e34:	bd90      	pop	{r4, r7, pc}

08005e36 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7fe ffa8 	bl	8004d98 <HAL_UART_GetState>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	2b21      	cmp	r3, #33	@ 0x21
 8005e4c:	d007      	beq.n	8005e5e <ATC_TxBusy+0x28>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	0018      	movs	r0, r3
 8005e54:	f7fe ffa0 	bl	8004d98 <HAL_UART_GetState>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	2b23      	cmp	r3, #35	@ 0x23
 8005e5c:	d101      	bne.n	8005e62 <ATC_TxBusy+0x2c>
  {
    return true;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8005e62:	2300      	movs	r3, #0
  }
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8005e76:	230f      	movs	r3, #15
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8005e7e:	f7fb fcdb 	bl	8001838 <HAL_GetTick>
 8005e82:	0003      	movs	r3, r0
 8005e84:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8005e86:	2001      	movs	r0, #1
 8005e88:	f000 fa84 	bl	8006394 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fe ff81 	bl	8004d98 <HAL_UART_GetState>
 8005e96:	0003      	movs	r3, r0
 8005e98:	2b22      	cmp	r3, #34	@ 0x22
 8005e9a:	d007      	beq.n	8005eac <ATC_TxWait+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7fe ff79 	bl	8004d98 <HAL_UART_GetState>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d104      	bne.n	8005eb6 <ATC_TxWait+0x4a>
    {
      answer = true;
 8005eac:	230f      	movs	r3, #15
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
      break;
 8005eb4:	e01c      	b.n	8005ef0 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7fe ff6c 	bl	8004d98 <HAL_UART_GetState>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	2be0      	cmp	r3, #224	@ 0xe0
 8005ec4:	d014      	beq.n	8005ef0 <ATC_TxWait+0x84>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7fe ff64 	bl	8004d98 <HAL_UART_GetState>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ed4:	d00c      	beq.n	8005ef0 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8005ed6:	f7fb fcaf 	bl	8001838 <HAL_GetTick>
 8005eda:	0002      	movs	r2, r0
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d8cf      	bhi.n	8005e86 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7fe fb18 	bl	8004520 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8005ef0:	230f      	movs	r3, #15
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
}
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b004      	add	sp, #16
 8005efc:	bd80      	pop	{r7, pc}

08005efe <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8b1b      	ldrh	r3, [r3, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d027      	beq.n	8005f5e <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e01b      	b.n	8005f4c <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	18d3      	adds	r3, r2, r3
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	0019      	movs	r1, r3
 8005f26:	f000 fd3c 	bl	80069a2 <strstr>
 8005f2a:	0003      	movs	r3, r0
 8005f2c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	18d3      	adds	r3, r2, r3
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	0010      	movs	r0, r2
 8005f44:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3de      	bcc.n	8005f14 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f7ff ff34 	bl	8005dc6 <ATC_RxFlush>
  }
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b004      	add	sp, #16
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8005f70:	230f      	movs	r3, #15
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8b1b      	ldrh	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d031      	beq.n	8005fe4 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005f80:	230c      	movs	r3, #12
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	2200      	movs	r2, #0
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e025      	b.n	8005fd6 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005f8e:	230c      	movs	r3, #12
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	320a      	adds	r2, #10
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	58d3      	ldr	r3, [r2, r3]
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	f000 fd00 	bl	80069a2 <strstr>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8005fb8:	230c      	movs	r3, #12
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	230f      	movs	r3, #15
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
        break;
 8005fc8:	e00c      	b.n	8005fe4 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005fca:	210c      	movs	r1, #12
 8005fcc:	187b      	adds	r3, r7, r1
 8005fce:	881a      	ldrh	r2, [r3, #0]
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	3201      	adds	r2, #1
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8adb      	ldrh	r3, [r3, #22]
 8005fda:	220c      	movs	r2, #12
 8005fdc:	18ba      	adds	r2, r7, r2
 8005fde:	8812      	ldrh	r2, [r2, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d3d2      	bcc.n	8005f8a <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8005fe4:	230f      	movs	r3, #15
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	781b      	ldrb	r3, [r3, #0]
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b004      	add	sp, #16
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7fe fedc 	bl	8004dbc <HAL_UART_GetError>
 8006004:	1e03      	subs	r3, r0, #0
 8006006:	d01f      	beq.n	8006048 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	4252      	negs	r2, r2
 8006012:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	0018      	movs	r0, r3
 800601a:	f7fe fae7 	bl	80045ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69d9      	ldr	r1, [r3, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8a9b      	ldrh	r3, [r3, #20]
 800602a:	001a      	movs	r2, r3
 800602c:	f7ff fe3b 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2104      	movs	r1, #4
 8006044:	438a      	bics	r2, r1
 8006046:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	0018      	movs	r0, r3
 800604e:	f7fe fea3 	bl	8004d98 <HAL_UART_GetState>
 8006052:	0003      	movs	r3, r0
 8006054:	2b22      	cmp	r3, #34	@ 0x22
 8006056:	d027      	beq.n	80060a8 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	0018      	movs	r0, r3
 800605e:	f7fe fe9b 	bl	8004d98 <HAL_UART_GetState>
 8006062:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006064:	2b23      	cmp	r3, #35	@ 0x23
 8006066:	d01f      	beq.n	80060a8 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	4252      	negs	r2, r2
 8006072:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	0018      	movs	r0, r3
 800607a:	f7fe fab7 	bl	80045ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69d9      	ldr	r1, [r3, #28]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8a9b      	ldrh	r3, [r3, #20]
 800608a:	001a      	movs	r2, r3
 800608c:	f7ff fe0b 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2104      	movs	r1, #4
 80060a4:	438a      	bics	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]
  }
}
 80060a8:	46c0      	nop			@ (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7ff ff99 	bl	8005ff2 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff ff1b 	bl	8005efe <ATC_CheckEvents>
}
 80060c8:	46c0      	nop			@ (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b002      	add	sp, #8
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 80060de:	2300      	movs	r3, #0
 80060e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7ff fea6 	bl	8005e36 <ATC_TxBusy>
 80060ea:	1e03      	subs	r3, r0, #0
 80060ec:	d002      	beq.n	80060f4 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80060ee:	2304      	movs	r3, #4
 80060f0:	425b      	negs	r3, r3
 80060f2:	e0e3      	b.n	80062bc <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 80060f4:	2344      	movs	r3, #68	@ 0x44
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d902      	bls.n	8006104 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 80060fe:	2305      	movs	r3, #5
 8006100:	425b      	negs	r3, r3
 8006102:	e0db      	b.n	80062bc <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	0018      	movs	r0, r3
 8006108:	f7ff ff73 	bl	8005ff2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800610c:	2348      	movs	r3, #72	@ 0x48
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006116:	e051      	b.n	80061bc <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	617a      	str	r2, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	0018      	movs	r0, r3
 8006126:	f7f9 ffef 	bl	8000108 <strlen>
 800612a:	0003      	movs	r3, r0
 800612c:	3301      	adds	r3, #1
 800612e:	0018      	movs	r0, r3
 8006130:	f7ff fe21 	bl	8005d76 <ATC_Malloc>
 8006134:	0001      	movs	r1, r0
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613a:	320a      	adds	r2, #10
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006144:	320a      	adds	r2, #10
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	58d3      	ldr	r3, [r2, r3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11c      	bne.n	8006188 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 800614e:	2327      	movs	r3, #39	@ 0x27
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e00e      	b.n	8006176 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8006158:	2427      	movs	r4, #39	@ 0x27
 800615a:	193b      	adds	r3, r7, r4
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	330a      	adds	r3, #10
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	18d3      	adds	r3, r2, r3
 8006166:	0018      	movs	r0, r3
 8006168:	f7ff fe16 	bl	8005d98 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800616c:	193b      	adds	r3, r7, r4
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	193b      	adds	r3, r7, r4
 8006172:	3201      	adds	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	2327      	movs	r3, #39	@ 0x27
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617e:	429a      	cmp	r2, r3
 8006180:	dcea      	bgt.n	8006158 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8006182:	2303      	movs	r3, #3
 8006184:	425b      	negs	r3, r3
 8006186:	e099      	b.n	80062bc <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618c:	320a      	adds	r2, #10
 800618e:	0092      	lsls	r2, r2, #2
 8006190:	58d3      	ldr	r3, [r2, r3]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	0011      	movs	r1, r2
 8006196:	0018      	movs	r0, r3
 8006198:	f000 fca7 	bl	8006aea <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a0:	320a      	adds	r2, #10
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	58d4      	ldr	r4, [r2, r3]
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7f9 ffad 	bl	8000108 <strlen>
 80061ae:	0003      	movs	r3, r0
 80061b0:	18e3      	adds	r3, r4, r3
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	3301      	adds	r3, #1
 80061ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061bc:	2344      	movs	r3, #68	@ 0x44
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c4:	429a      	cmp	r2, r3
 80061c6:	dba7      	blt.n	8006118 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7ff fdfb 	bl	8005dc6 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7f9 ff98 	bl	8000108 <strlen>
 80061d8:	0003      	movs	r3, r0
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f7ff fe03 	bl	8005dec <ATC_TxRaw>
 80061e6:	0003      	movs	r3, r0
 80061e8:	001a      	movs	r2, r3
 80061ea:	2301      	movs	r3, #1
 80061ec:	4053      	eors	r3, r2
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	425b      	negs	r3, r3
 80061f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80061fa:	e010      	b.n	800621e <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f7ff fe32 	bl	8005e6c <ATC_TxWait>
 8006208:	0003      	movs	r3, r0
 800620a:	001a      	movs	r2, r3
 800620c:	2301      	movs	r3, #1
 800620e:	4053      	eors	r3, r2
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8006216:	2302      	movs	r3, #2
 8006218:	425b      	negs	r3, r3
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800621c:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800621e:	2444      	movs	r4, #68	@ 0x44
 8006220:	193b      	adds	r3, r7, r4
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d029      	beq.n	800627c <ATC_SendReceive+0x1ac>
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d126      	bne.n	800627c <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 800622e:	f7fb fb03 	bl	8001838 <HAL_GetTick>
 8006232:	0003      	movs	r3, r0
 8006234:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8006236:	193b      	adds	r3, r7, r4
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8006240:	e014      	b.n	800626c <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8006242:	2001      	movs	r0, #1
 8006244:	f000 f8a6 	bl	8006394 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8006248:	251f      	movs	r5, #31
 800624a:	197c      	adds	r4, r7, r5
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	0011      	movs	r1, r2
 8006252:	0018      	movs	r0, r3
 8006254:	f7ff fe87 	bl	8005f66 <ATC_CheckResponse>
 8006258:	0003      	movs	r3, r0
 800625a:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 800625c:	197b      	adds	r3, r7, r5
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8006264:	197b      	adds	r3, r7, r5
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800626a:	e007      	b.n	800627c <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 800626c:	f7fb fae4 	bl	8001838 <HAL_GetTick>
 8006270:	0002      	movs	r2, r0
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006278:	429a      	cmp	r2, r3
 800627a:	d8e2      	bhi.n	8006242 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8006282:	2326      	movs	r3, #38	@ 0x26
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	e00e      	b.n	80062aa <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800628c:	2426      	movs	r4, #38	@ 0x26
 800628e:	193b      	adds	r3, r7, r4
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	330a      	adds	r3, #10
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	18d3      	adds	r3, r2, r3
 800629a:	0018      	movs	r0, r3
 800629c:	f7ff fd7c 	bl	8005d98 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80062a0:	193b      	adds	r3, r7, r4
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	193b      	adds	r3, r7, r4
 80062a6:	3201      	adds	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	2326      	movs	r3, #38	@ 0x26
 80062ac:	18fa      	adds	r2, r7, r3
 80062ae:	2344      	movs	r3, #68	@ 0x44
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3e8      	bcc.n	800628c <ATC_SendReceive+0x1bc>
  }
  return answer;
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b00c      	add	sp, #48	@ 0x30
 80062c2:	bdb0      	pop	{r4, r5, r7, pc}

080062c4 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	000a      	movs	r2, r1
 80062ce:	1cbb      	adds	r3, r7, #2
 80062d0:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80062d2:	1cbb      	adds	r3, r7, #2
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8a9b      	ldrh	r3, [r3, #20]
 80062da:	0019      	movs	r1, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8b1b      	ldrh	r3, [r3, #24]
 80062e0:	1acb      	subs	r3, r1, r3
 80062e2:	429a      	cmp	r2, r3
 80062e4:	dd06      	ble.n	80062f4 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8a99      	ldrh	r1, [r3, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8b1a      	ldrh	r2, [r3, #24]
 80062ee:	1cbb      	adds	r3, r7, #2
 80062f0:	1a8a      	subs	r2, r1, r2
 80062f2:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	8b12      	ldrh	r2, [r2, #24]
 80062fc:	1898      	adds	r0, r3, r2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69d9      	ldr	r1, [r3, #28]
 8006302:	1cbb      	adds	r3, r7, #2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	001a      	movs	r2, r3
 8006308:	f000 fbf7 	bl	8006afa <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8b1a      	ldrh	r2, [r3, #24]
 8006310:	1cbb      	adds	r3, r7, #2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	18d3      	adds	r3, r2, r3
 8006316:	b29a      	uxth	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8a9b      	ldrh	r3, [r3, #20]
 8006328:	001a      	movs	r2, r3
 800632a:	f7ff fcbc 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_DMA>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d10c      	bne.n	800634c <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2104      	movs	r1, #4
 8006346:	438a      	bics	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800634a:	e01f      	b.n	800638c <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	4252      	negs	r2, r2
 8006356:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0018      	movs	r0, r3
 800635e:	f7fe f945 	bl	80045ec <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69d9      	ldr	r1, [r3, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8a9b      	ldrh	r3, [r3, #20]
 800636e:	001a      	movs	r2, r3
 8006370:	f7ff fc99 	bl	8005ca6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2104      	movs	r1, #4
 8006388:	438a      	bics	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
}
 800638c:	46c0      	nop			@ (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b002      	add	sp, #8
 8006392:	bd80      	pop	{r7, pc}

08006394 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	0018      	movs	r0, r3
 80063a0:	f7fb fa54 	bl	800184c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80063a4:	46c0      	nop			@ (mov r8, r8)
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b002      	add	sp, #8
 80063aa:	bd80      	pop	{r7, pc}

080063ac <malloc>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4b03      	ldr	r3, [pc, #12]	@ (80063bc <malloc+0x10>)
 80063b0:	0001      	movs	r1, r0
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	f000 f830 	bl	8006418 <_malloc_r>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	2000001c 	.word	0x2000001c

080063c0 <free>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <free+0x10>)
 80063c4:	0001      	movs	r1, r0
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	f000 fba0 	bl	8006b0c <_free_r>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	2000001c 	.word	0x2000001c

080063d4 <sbrk_aligned>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006414 <sbrk_aligned+0x40>)
 80063d8:	000d      	movs	r5, r1
 80063da:	6831      	ldr	r1, [r6, #0]
 80063dc:	0004      	movs	r4, r0
 80063de:	2900      	cmp	r1, #0
 80063e0:	d102      	bne.n	80063e8 <sbrk_aligned+0x14>
 80063e2:	f000 fb2f 	bl	8006a44 <_sbrk_r>
 80063e6:	6030      	str	r0, [r6, #0]
 80063e8:	0029      	movs	r1, r5
 80063ea:	0020      	movs	r0, r4
 80063ec:	f000 fb2a 	bl	8006a44 <_sbrk_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d103      	bne.n	80063fc <sbrk_aligned+0x28>
 80063f4:	2501      	movs	r5, #1
 80063f6:	426d      	negs	r5, r5
 80063f8:	0028      	movs	r0, r5
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	2303      	movs	r3, #3
 80063fe:	1cc5      	adds	r5, r0, #3
 8006400:	439d      	bics	r5, r3
 8006402:	42a8      	cmp	r0, r5
 8006404:	d0f8      	beq.n	80063f8 <sbrk_aligned+0x24>
 8006406:	1a29      	subs	r1, r5, r0
 8006408:	0020      	movs	r0, r4
 800640a:	f000 fb1b 	bl	8006a44 <_sbrk_r>
 800640e:	3001      	adds	r0, #1
 8006410:	d1f2      	bne.n	80063f8 <sbrk_aligned+0x24>
 8006412:	e7ef      	b.n	80063f4 <sbrk_aligned+0x20>
 8006414:	200002dc 	.word	0x200002dc

08006418 <_malloc_r>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	2203      	movs	r2, #3
 800641c:	1ccb      	adds	r3, r1, #3
 800641e:	4393      	bics	r3, r2
 8006420:	3308      	adds	r3, #8
 8006422:	0005      	movs	r5, r0
 8006424:	001f      	movs	r7, r3
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d234      	bcs.n	8006494 <_malloc_r+0x7c>
 800642a:	270c      	movs	r7, #12
 800642c:	42b9      	cmp	r1, r7
 800642e:	d833      	bhi.n	8006498 <_malloc_r+0x80>
 8006430:	0028      	movs	r0, r5
 8006432:	f000 f871 	bl	8006518 <__malloc_lock>
 8006436:	4e37      	ldr	r6, [pc, #220]	@ (8006514 <_malloc_r+0xfc>)
 8006438:	6833      	ldr	r3, [r6, #0]
 800643a:	001c      	movs	r4, r3
 800643c:	2c00      	cmp	r4, #0
 800643e:	d12f      	bne.n	80064a0 <_malloc_r+0x88>
 8006440:	0039      	movs	r1, r7
 8006442:	0028      	movs	r0, r5
 8006444:	f7ff ffc6 	bl	80063d4 <sbrk_aligned>
 8006448:	0004      	movs	r4, r0
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d15f      	bne.n	800650e <_malloc_r+0xf6>
 800644e:	6834      	ldr	r4, [r6, #0]
 8006450:	9400      	str	r4, [sp, #0]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d14a      	bne.n	80064ee <_malloc_r+0xd6>
 8006458:	2c00      	cmp	r4, #0
 800645a:	d052      	beq.n	8006502 <_malloc_r+0xea>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	0028      	movs	r0, r5
 8006460:	18e3      	adds	r3, r4, r3
 8006462:	9900      	ldr	r1, [sp, #0]
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	f000 faed 	bl	8006a44 <_sbrk_r>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	4283      	cmp	r3, r0
 800646e:	d148      	bne.n	8006502 <_malloc_r+0xea>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	0028      	movs	r0, r5
 8006474:	1aff      	subs	r7, r7, r3
 8006476:	0039      	movs	r1, r7
 8006478:	f7ff ffac 	bl	80063d4 <sbrk_aligned>
 800647c:	3001      	adds	r0, #1
 800647e:	d040      	beq.n	8006502 <_malloc_r+0xea>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	19db      	adds	r3, r3, r7
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	6833      	ldr	r3, [r6, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	2a00      	cmp	r2, #0
 800648c:	d133      	bne.n	80064f6 <_malloc_r+0xde>
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	e019      	b.n	80064c8 <_malloc_r+0xb0>
 8006494:	2b00      	cmp	r3, #0
 8006496:	dac9      	bge.n	800642c <_malloc_r+0x14>
 8006498:	230c      	movs	r3, #12
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	2000      	movs	r0, #0
 800649e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1bc9      	subs	r1, r1, r7
 80064a4:	d420      	bmi.n	80064e8 <_malloc_r+0xd0>
 80064a6:	290b      	cmp	r1, #11
 80064a8:	d90a      	bls.n	80064c0 <_malloc_r+0xa8>
 80064aa:	19e2      	adds	r2, r4, r7
 80064ac:	6027      	str	r7, [r4, #0]
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	d104      	bne.n	80064bc <_malloc_r+0xa4>
 80064b2:	6032      	str	r2, [r6, #0]
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	6011      	str	r1, [r2, #0]
 80064b8:	6053      	str	r3, [r2, #4]
 80064ba:	e005      	b.n	80064c8 <_malloc_r+0xb0>
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	e7f9      	b.n	80064b4 <_malloc_r+0x9c>
 80064c0:	6862      	ldr	r2, [r4, #4]
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	d10e      	bne.n	80064e4 <_malloc_r+0xcc>
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	0028      	movs	r0, r5
 80064ca:	f000 f82d 	bl	8006528 <__malloc_unlock>
 80064ce:	0020      	movs	r0, r4
 80064d0:	2207      	movs	r2, #7
 80064d2:	300b      	adds	r0, #11
 80064d4:	1d23      	adds	r3, r4, #4
 80064d6:	4390      	bics	r0, r2
 80064d8:	1ac2      	subs	r2, r0, r3
 80064da:	4298      	cmp	r0, r3
 80064dc:	d0df      	beq.n	800649e <_malloc_r+0x86>
 80064de:	1a1b      	subs	r3, r3, r0
 80064e0:	50a3      	str	r3, [r4, r2]
 80064e2:	e7dc      	b.n	800649e <_malloc_r+0x86>
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	e7ef      	b.n	80064c8 <_malloc_r+0xb0>
 80064e8:	0023      	movs	r3, r4
 80064ea:	6864      	ldr	r4, [r4, #4]
 80064ec:	e7a6      	b.n	800643c <_malloc_r+0x24>
 80064ee:	9c00      	ldr	r4, [sp, #0]
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	e7ad      	b.n	8006452 <_malloc_r+0x3a>
 80064f6:	001a      	movs	r2, r3
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	d1fb      	bne.n	80064f6 <_malloc_r+0xde>
 80064fe:	2300      	movs	r3, #0
 8006500:	e7da      	b.n	80064b8 <_malloc_r+0xa0>
 8006502:	230c      	movs	r3, #12
 8006504:	0028      	movs	r0, r5
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f000 f80e 	bl	8006528 <__malloc_unlock>
 800650c:	e7c6      	b.n	800649c <_malloc_r+0x84>
 800650e:	6007      	str	r7, [r0, #0]
 8006510:	e7da      	b.n	80064c8 <_malloc_r+0xb0>
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200002e0 	.word	0x200002e0

08006518 <__malloc_lock>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4802      	ldr	r0, [pc, #8]	@ (8006524 <__malloc_lock+0xc>)
 800651c:	f000 fae3 	bl	8006ae6 <__retarget_lock_acquire_recursive>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	20000424 	.word	0x20000424

08006528 <__malloc_unlock>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4802      	ldr	r0, [pc, #8]	@ (8006534 <__malloc_unlock+0xc>)
 800652c:	f000 fadc 	bl	8006ae8 <__retarget_lock_release_recursive>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	20000424 	.word	0x20000424

08006538 <std>:
 8006538:	2300      	movs	r3, #0
 800653a:	b510      	push	{r4, lr}
 800653c:	0004      	movs	r4, r0
 800653e:	6003      	str	r3, [r0, #0]
 8006540:	6043      	str	r3, [r0, #4]
 8006542:	6083      	str	r3, [r0, #8]
 8006544:	8181      	strh	r1, [r0, #12]
 8006546:	6643      	str	r3, [r0, #100]	@ 0x64
 8006548:	81c2      	strh	r2, [r0, #14]
 800654a:	6103      	str	r3, [r0, #16]
 800654c:	6143      	str	r3, [r0, #20]
 800654e:	6183      	str	r3, [r0, #24]
 8006550:	0019      	movs	r1, r3
 8006552:	2208      	movs	r2, #8
 8006554:	305c      	adds	r0, #92	@ 0x5c
 8006556:	f000 fa0f 	bl	8006978 <memset>
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <std+0x50>)
 800655c:	6224      	str	r4, [r4, #32]
 800655e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006560:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <std+0x54>)
 8006562:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <std+0x58>)
 8006566:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006568:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <std+0x5c>)
 800656a:	6323      	str	r3, [r4, #48]	@ 0x30
 800656c:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <std+0x60>)
 800656e:	429c      	cmp	r4, r3
 8006570:	d005      	beq.n	800657e <std+0x46>
 8006572:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <std+0x64>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d002      	beq.n	800657e <std+0x46>
 8006578:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <std+0x68>)
 800657a:	429c      	cmp	r4, r3
 800657c:	d103      	bne.n	8006586 <std+0x4e>
 800657e:	0020      	movs	r0, r4
 8006580:	3058      	adds	r0, #88	@ 0x58
 8006582:	f000 faaf 	bl	8006ae4 <__retarget_lock_init_recursive>
 8006586:	bd10      	pop	{r4, pc}
 8006588:	080067a1 	.word	0x080067a1
 800658c:	080067c9 	.word	0x080067c9
 8006590:	08006801 	.word	0x08006801
 8006594:	0800682d 	.word	0x0800682d
 8006598:	200002e4 	.word	0x200002e4
 800659c:	2000034c 	.word	0x2000034c
 80065a0:	200003b4 	.word	0x200003b4

080065a4 <stdio_exit_handler>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	4a03      	ldr	r2, [pc, #12]	@ (80065b4 <stdio_exit_handler+0x10>)
 80065a8:	4903      	ldr	r1, [pc, #12]	@ (80065b8 <stdio_exit_handler+0x14>)
 80065aa:	4804      	ldr	r0, [pc, #16]	@ (80065bc <stdio_exit_handler+0x18>)
 80065ac:	f000 f86c 	bl	8006688 <_fwalk_sglue>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	20000010 	.word	0x20000010
 80065b8:	0800722d 	.word	0x0800722d
 80065bc:	20000020 	.word	0x20000020

080065c0 <cleanup_stdio>:
 80065c0:	6841      	ldr	r1, [r0, #4]
 80065c2:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <cleanup_stdio+0x30>)
 80065c4:	b510      	push	{r4, lr}
 80065c6:	0004      	movs	r4, r0
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d001      	beq.n	80065d0 <cleanup_stdio+0x10>
 80065cc:	f000 fe2e 	bl	800722c <_fflush_r>
 80065d0:	68a1      	ldr	r1, [r4, #8]
 80065d2:	4b08      	ldr	r3, [pc, #32]	@ (80065f4 <cleanup_stdio+0x34>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <cleanup_stdio+0x1e>
 80065d8:	0020      	movs	r0, r4
 80065da:	f000 fe27 	bl	800722c <_fflush_r>
 80065de:	68e1      	ldr	r1, [r4, #12]
 80065e0:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <cleanup_stdio+0x38>)
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d002      	beq.n	80065ec <cleanup_stdio+0x2c>
 80065e6:	0020      	movs	r0, r4
 80065e8:	f000 fe20 	bl	800722c <_fflush_r>
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	46c0      	nop			@ (mov r8, r8)
 80065f0:	200002e4 	.word	0x200002e4
 80065f4:	2000034c 	.word	0x2000034c
 80065f8:	200003b4 	.word	0x200003b4

080065fc <global_stdio_init.part.0>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <global_stdio_init.part.0+0x28>)
 8006600:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <global_stdio_init.part.0+0x2c>)
 8006602:	2104      	movs	r1, #4
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	4809      	ldr	r0, [pc, #36]	@ (800662c <global_stdio_init.part.0+0x30>)
 8006608:	2200      	movs	r2, #0
 800660a:	f7ff ff95 	bl	8006538 <std>
 800660e:	2201      	movs	r2, #1
 8006610:	2109      	movs	r1, #9
 8006612:	4807      	ldr	r0, [pc, #28]	@ (8006630 <global_stdio_init.part.0+0x34>)
 8006614:	f7ff ff90 	bl	8006538 <std>
 8006618:	2202      	movs	r2, #2
 800661a:	2112      	movs	r1, #18
 800661c:	4805      	ldr	r0, [pc, #20]	@ (8006634 <global_stdio_init.part.0+0x38>)
 800661e:	f7ff ff8b 	bl	8006538 <std>
 8006622:	bd10      	pop	{r4, pc}
 8006624:	2000041c 	.word	0x2000041c
 8006628:	080065a5 	.word	0x080065a5
 800662c:	200002e4 	.word	0x200002e4
 8006630:	2000034c 	.word	0x2000034c
 8006634:	200003b4 	.word	0x200003b4

08006638 <__sfp_lock_acquire>:
 8006638:	b510      	push	{r4, lr}
 800663a:	4802      	ldr	r0, [pc, #8]	@ (8006644 <__sfp_lock_acquire+0xc>)
 800663c:	f000 fa53 	bl	8006ae6 <__retarget_lock_acquire_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	20000425 	.word	0x20000425

08006648 <__sfp_lock_release>:
 8006648:	b510      	push	{r4, lr}
 800664a:	4802      	ldr	r0, [pc, #8]	@ (8006654 <__sfp_lock_release+0xc>)
 800664c:	f000 fa4c 	bl	8006ae8 <__retarget_lock_release_recursive>
 8006650:	bd10      	pop	{r4, pc}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	20000425 	.word	0x20000425

08006658 <__sinit>:
 8006658:	b510      	push	{r4, lr}
 800665a:	0004      	movs	r4, r0
 800665c:	f7ff ffec 	bl	8006638 <__sfp_lock_acquire>
 8006660:	6a23      	ldr	r3, [r4, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <__sinit+0x14>
 8006666:	f7ff ffef 	bl	8006648 <__sfp_lock_release>
 800666a:	bd10      	pop	{r4, pc}
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <__sinit+0x28>)
 800666e:	6223      	str	r3, [r4, #32]
 8006670:	4b04      	ldr	r3, [pc, #16]	@ (8006684 <__sinit+0x2c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f6      	bne.n	8006666 <__sinit+0xe>
 8006678:	f7ff ffc0 	bl	80065fc <global_stdio_init.part.0>
 800667c:	e7f3      	b.n	8006666 <__sinit+0xe>
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	080065c1 	.word	0x080065c1
 8006684:	2000041c 	.word	0x2000041c

08006688 <_fwalk_sglue>:
 8006688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668a:	0014      	movs	r4, r2
 800668c:	2600      	movs	r6, #0
 800668e:	9000      	str	r0, [sp, #0]
 8006690:	9101      	str	r1, [sp, #4]
 8006692:	68a5      	ldr	r5, [r4, #8]
 8006694:	6867      	ldr	r7, [r4, #4]
 8006696:	3f01      	subs	r7, #1
 8006698:	d504      	bpl.n	80066a4 <_fwalk_sglue+0x1c>
 800669a:	6824      	ldr	r4, [r4, #0]
 800669c:	2c00      	cmp	r4, #0
 800669e:	d1f8      	bne.n	8006692 <_fwalk_sglue+0xa>
 80066a0:	0030      	movs	r0, r6
 80066a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066a4:	89ab      	ldrh	r3, [r5, #12]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d908      	bls.n	80066bc <_fwalk_sglue+0x34>
 80066aa:	220e      	movs	r2, #14
 80066ac:	5eab      	ldrsh	r3, [r5, r2]
 80066ae:	3301      	adds	r3, #1
 80066b0:	d004      	beq.n	80066bc <_fwalk_sglue+0x34>
 80066b2:	0029      	movs	r1, r5
 80066b4:	9800      	ldr	r0, [sp, #0]
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	4798      	blx	r3
 80066ba:	4306      	orrs	r6, r0
 80066bc:	3568      	adds	r5, #104	@ 0x68
 80066be:	e7ea      	b.n	8006696 <_fwalk_sglue+0xe>

080066c0 <iprintf>:
 80066c0:	b40f      	push	{r0, r1, r2, r3}
 80066c2:	b507      	push	{r0, r1, r2, lr}
 80066c4:	4905      	ldr	r1, [pc, #20]	@ (80066dc <iprintf+0x1c>)
 80066c6:	ab04      	add	r3, sp, #16
 80066c8:	6808      	ldr	r0, [r1, #0]
 80066ca:	cb04      	ldmia	r3!, {r2}
 80066cc:	6881      	ldr	r1, [r0, #8]
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	f000 fa8e 	bl	8006bf0 <_vfiprintf_r>
 80066d4:	b003      	add	sp, #12
 80066d6:	bc08      	pop	{r3}
 80066d8:	b004      	add	sp, #16
 80066da:	4718      	bx	r3
 80066dc:	2000001c 	.word	0x2000001c

080066e0 <_puts_r>:
 80066e0:	6a03      	ldr	r3, [r0, #32]
 80066e2:	b570      	push	{r4, r5, r6, lr}
 80066e4:	0005      	movs	r5, r0
 80066e6:	000e      	movs	r6, r1
 80066e8:	6884      	ldr	r4, [r0, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <_puts_r+0x12>
 80066ee:	f7ff ffb3 	bl	8006658 <__sinit>
 80066f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066f4:	07db      	lsls	r3, r3, #31
 80066f6:	d405      	bmi.n	8006704 <_puts_r+0x24>
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	059b      	lsls	r3, r3, #22
 80066fc:	d402      	bmi.n	8006704 <_puts_r+0x24>
 80066fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006700:	f000 f9f1 	bl	8006ae6 <__retarget_lock_acquire_recursive>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	071b      	lsls	r3, r3, #28
 8006708:	d502      	bpl.n	8006710 <_puts_r+0x30>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11f      	bne.n	8006750 <_puts_r+0x70>
 8006710:	0021      	movs	r1, r4
 8006712:	0028      	movs	r0, r5
 8006714:	f000 f8d2 	bl	80068bc <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d019      	beq.n	8006750 <_puts_r+0x70>
 800671c:	2501      	movs	r5, #1
 800671e:	426d      	negs	r5, r5
 8006720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006722:	07db      	lsls	r3, r3, #31
 8006724:	d405      	bmi.n	8006732 <_puts_r+0x52>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	059b      	lsls	r3, r3, #22
 800672a:	d402      	bmi.n	8006732 <_puts_r+0x52>
 800672c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800672e:	f000 f9db 	bl	8006ae8 <__retarget_lock_release_recursive>
 8006732:	0028      	movs	r0, r5
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	3601      	adds	r6, #1
 8006738:	60a3      	str	r3, [r4, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da04      	bge.n	8006748 <_puts_r+0x68>
 800673e:	69a2      	ldr	r2, [r4, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	dc16      	bgt.n	8006772 <_puts_r+0x92>
 8006744:	290a      	cmp	r1, #10
 8006746:	d014      	beq.n	8006772 <_puts_r+0x92>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	6022      	str	r2, [r4, #0]
 800674e:	7019      	strb	r1, [r3, #0]
 8006750:	68a3      	ldr	r3, [r4, #8]
 8006752:	7831      	ldrb	r1, [r6, #0]
 8006754:	3b01      	subs	r3, #1
 8006756:	2900      	cmp	r1, #0
 8006758:	d1ed      	bne.n	8006736 <_puts_r+0x56>
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	da0f      	bge.n	8006780 <_puts_r+0xa0>
 8006760:	0022      	movs	r2, r4
 8006762:	0028      	movs	r0, r5
 8006764:	310a      	adds	r1, #10
 8006766:	f000 f867 	bl	8006838 <__swbuf_r>
 800676a:	3001      	adds	r0, #1
 800676c:	d0d6      	beq.n	800671c <_puts_r+0x3c>
 800676e:	250a      	movs	r5, #10
 8006770:	e7d6      	b.n	8006720 <_puts_r+0x40>
 8006772:	0022      	movs	r2, r4
 8006774:	0028      	movs	r0, r5
 8006776:	f000 f85f 	bl	8006838 <__swbuf_r>
 800677a:	3001      	adds	r0, #1
 800677c:	d1e8      	bne.n	8006750 <_puts_r+0x70>
 800677e:	e7cd      	b.n	800671c <_puts_r+0x3c>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	220a      	movs	r2, #10
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e7f0      	b.n	800676e <_puts_r+0x8e>

0800678c <puts>:
 800678c:	b510      	push	{r4, lr}
 800678e:	4b03      	ldr	r3, [pc, #12]	@ (800679c <puts+0x10>)
 8006790:	0001      	movs	r1, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	f7ff ffa4 	bl	80066e0 <_puts_r>
 8006798:	bd10      	pop	{r4, pc}
 800679a:	46c0      	nop			@ (mov r8, r8)
 800679c:	2000001c 	.word	0x2000001c

080067a0 <__sread>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	000c      	movs	r4, r1
 80067a4:	250e      	movs	r5, #14
 80067a6:	5f49      	ldrsh	r1, [r1, r5]
 80067a8:	f000 f938 	bl	8006a1c <_read_r>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	db03      	blt.n	80067b8 <__sread+0x18>
 80067b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80067b2:	181b      	adds	r3, r3, r0
 80067b4:	6563      	str	r3, [r4, #84]	@ 0x54
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	4a02      	ldr	r2, [pc, #8]	@ (80067c4 <__sread+0x24>)
 80067bc:	4013      	ands	r3, r2
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	e7f9      	b.n	80067b6 <__sread+0x16>
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	ffffefff 	.word	0xffffefff

080067c8 <__swrite>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	001f      	movs	r7, r3
 80067cc:	898b      	ldrh	r3, [r1, #12]
 80067ce:	0005      	movs	r5, r0
 80067d0:	000c      	movs	r4, r1
 80067d2:	0016      	movs	r6, r2
 80067d4:	05db      	lsls	r3, r3, #23
 80067d6:	d505      	bpl.n	80067e4 <__swrite+0x1c>
 80067d8:	230e      	movs	r3, #14
 80067da:	5ec9      	ldrsh	r1, [r1, r3]
 80067dc:	2200      	movs	r2, #0
 80067de:	2302      	movs	r3, #2
 80067e0:	f000 f908 	bl	80069f4 <_lseek_r>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	4a05      	ldr	r2, [pc, #20]	@ (80067fc <__swrite+0x34>)
 80067e8:	0028      	movs	r0, r5
 80067ea:	4013      	ands	r3, r2
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	0032      	movs	r2, r6
 80067f0:	230e      	movs	r3, #14
 80067f2:	5ee1      	ldrsh	r1, [r4, r3]
 80067f4:	003b      	movs	r3, r7
 80067f6:	f000 f937 	bl	8006a68 <_write_r>
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fc:	ffffefff 	.word	0xffffefff

08006800 <__sseek>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	000c      	movs	r4, r1
 8006804:	250e      	movs	r5, #14
 8006806:	5f49      	ldrsh	r1, [r1, r5]
 8006808:	f000 f8f4 	bl	80069f4 <_lseek_r>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	1c42      	adds	r2, r0, #1
 8006810:	d103      	bne.n	800681a <__sseek+0x1a>
 8006812:	4a05      	ldr	r2, [pc, #20]	@ (8006828 <__sseek+0x28>)
 8006814:	4013      	ands	r3, r2
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	2280      	movs	r2, #128	@ 0x80
 800681c:	0152      	lsls	r2, r2, #5
 800681e:	4313      	orrs	r3, r2
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	6560      	str	r0, [r4, #84]	@ 0x54
 8006824:	e7f8      	b.n	8006818 <__sseek+0x18>
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	ffffefff 	.word	0xffffefff

0800682c <__sclose>:
 800682c:	b510      	push	{r4, lr}
 800682e:	230e      	movs	r3, #14
 8006830:	5ec9      	ldrsh	r1, [r1, r3]
 8006832:	f000 f8cd 	bl	80069d0 <_close_r>
 8006836:	bd10      	pop	{r4, pc}

08006838 <__swbuf_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	0006      	movs	r6, r0
 800683c:	000d      	movs	r5, r1
 800683e:	0014      	movs	r4, r2
 8006840:	2800      	cmp	r0, #0
 8006842:	d004      	beq.n	800684e <__swbuf_r+0x16>
 8006844:	6a03      	ldr	r3, [r0, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <__swbuf_r+0x16>
 800684a:	f7ff ff05 	bl	8006658 <__sinit>
 800684e:	69a3      	ldr	r3, [r4, #24]
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	071b      	lsls	r3, r3, #28
 8006856:	d502      	bpl.n	800685e <__swbuf_r+0x26>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <__swbuf_r+0x3a>
 800685e:	0021      	movs	r1, r4
 8006860:	0030      	movs	r0, r6
 8006862:	f000 f82b 	bl	80068bc <__swsetup_r>
 8006866:	2800      	cmp	r0, #0
 8006868:	d003      	beq.n	8006872 <__swbuf_r+0x3a>
 800686a:	2501      	movs	r5, #1
 800686c:	426d      	negs	r5, r5
 800686e:	0028      	movs	r0, r5
 8006870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	b2ef      	uxtb	r7, r5
 8006878:	1ac0      	subs	r0, r0, r3
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	b2ed      	uxtb	r5, r5
 800687e:	4283      	cmp	r3, r0
 8006880:	dc05      	bgt.n	800688e <__swbuf_r+0x56>
 8006882:	0021      	movs	r1, r4
 8006884:	0030      	movs	r0, r6
 8006886:	f000 fcd1 	bl	800722c <_fflush_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	d1ed      	bne.n	800686a <__swbuf_r+0x32>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	3001      	adds	r0, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701f      	strb	r7, [r3, #0]
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d004      	beq.n	80068ae <__swbuf_r+0x76>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d5e1      	bpl.n	800686e <__swbuf_r+0x36>
 80068aa:	2d0a      	cmp	r5, #10
 80068ac:	d1df      	bne.n	800686e <__swbuf_r+0x36>
 80068ae:	0021      	movs	r1, r4
 80068b0:	0030      	movs	r0, r6
 80068b2:	f000 fcbb 	bl	800722c <_fflush_r>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d0d9      	beq.n	800686e <__swbuf_r+0x36>
 80068ba:	e7d6      	b.n	800686a <__swbuf_r+0x32>

080068bc <__swsetup_r>:
 80068bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006974 <__swsetup_r+0xb8>)
 80068be:	b570      	push	{r4, r5, r6, lr}
 80068c0:	0005      	movs	r5, r0
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	000c      	movs	r4, r1
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d004      	beq.n	80068d4 <__swsetup_r+0x18>
 80068ca:	6a03      	ldr	r3, [r0, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <__swsetup_r+0x18>
 80068d0:	f7ff fec2 	bl	8006658 <__sinit>
 80068d4:	220c      	movs	r2, #12
 80068d6:	5ea3      	ldrsh	r3, [r4, r2]
 80068d8:	071a      	lsls	r2, r3, #28
 80068da:	d423      	bmi.n	8006924 <__swsetup_r+0x68>
 80068dc:	06da      	lsls	r2, r3, #27
 80068de:	d407      	bmi.n	80068f0 <__swsetup_r+0x34>
 80068e0:	2209      	movs	r2, #9
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	2240      	movs	r2, #64	@ 0x40
 80068e6:	2001      	movs	r0, #1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	4240      	negs	r0, r0
 80068ee:	e03a      	b.n	8006966 <__swsetup_r+0xaa>
 80068f0:	075b      	lsls	r3, r3, #29
 80068f2:	d513      	bpl.n	800691c <__swsetup_r+0x60>
 80068f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d008      	beq.n	800690c <__swsetup_r+0x50>
 80068fa:	0023      	movs	r3, r4
 80068fc:	3344      	adds	r3, #68	@ 0x44
 80068fe:	4299      	cmp	r1, r3
 8006900:	d002      	beq.n	8006908 <__swsetup_r+0x4c>
 8006902:	0028      	movs	r0, r5
 8006904:	f000 f902 	bl	8006b0c <_free_r>
 8006908:	2300      	movs	r3, #0
 800690a:	6363      	str	r3, [r4, #52]	@ 0x34
 800690c:	2224      	movs	r2, #36	@ 0x24
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	4393      	bics	r3, r2
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	2300      	movs	r3, #0
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	2308      	movs	r3, #8
 800691e:	89a2      	ldrh	r2, [r4, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	81a3      	strh	r3, [r4, #12]
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <__swsetup_r+0x86>
 800692a:	21a0      	movs	r1, #160	@ 0xa0
 800692c:	2280      	movs	r2, #128	@ 0x80
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	0089      	lsls	r1, r1, #2
 8006932:	0092      	lsls	r2, r2, #2
 8006934:	400b      	ands	r3, r1
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <__swsetup_r+0x86>
 800693a:	0021      	movs	r1, r4
 800693c:	0028      	movs	r0, r5
 800693e:	f000 fccb 	bl	80072d8 <__smakebuf_r>
 8006942:	220c      	movs	r2, #12
 8006944:	5ea3      	ldrsh	r3, [r4, r2]
 8006946:	2101      	movs	r1, #1
 8006948:	001a      	movs	r2, r3
 800694a:	400a      	ands	r2, r1
 800694c:	420b      	tst	r3, r1
 800694e:	d00b      	beq.n	8006968 <__swsetup_r+0xac>
 8006950:	2200      	movs	r2, #0
 8006952:	60a2      	str	r2, [r4, #8]
 8006954:	6962      	ldr	r2, [r4, #20]
 8006956:	4252      	negs	r2, r2
 8006958:	61a2      	str	r2, [r4, #24]
 800695a:	2000      	movs	r0, #0
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	4282      	cmp	r2, r0
 8006960:	d101      	bne.n	8006966 <__swsetup_r+0xaa>
 8006962:	061a      	lsls	r2, r3, #24
 8006964:	d4be      	bmi.n	80068e4 <__swsetup_r+0x28>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	0799      	lsls	r1, r3, #30
 800696a:	d400      	bmi.n	800696e <__swsetup_r+0xb2>
 800696c:	6962      	ldr	r2, [r4, #20]
 800696e:	60a2      	str	r2, [r4, #8]
 8006970:	e7f3      	b.n	800695a <__swsetup_r+0x9e>
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	2000001c 	.word	0x2000001c

08006978 <memset>:
 8006978:	0003      	movs	r3, r0
 800697a:	1882      	adds	r2, r0, r2
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	7019      	strb	r1, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <strcat>:
 8006988:	0002      	movs	r2, r0
 800698a:	b510      	push	{r4, lr}
 800698c:	7813      	ldrb	r3, [r2, #0]
 800698e:	0014      	movs	r4, r2
 8006990:	3201      	adds	r2, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1fa      	bne.n	800698c <strcat+0x4>
 8006996:	5cca      	ldrb	r2, [r1, r3]
 8006998:	54e2      	strb	r2, [r4, r3]
 800699a:	3301      	adds	r3, #1
 800699c:	2a00      	cmp	r2, #0
 800699e:	d1fa      	bne.n	8006996 <strcat+0xe>
 80069a0:	bd10      	pop	{r4, pc}

080069a2 <strstr>:
 80069a2:	780a      	ldrb	r2, [r1, #0]
 80069a4:	b530      	push	{r4, r5, lr}
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	d10c      	bne.n	80069c4 <strstr+0x22>
 80069aa:	bd30      	pop	{r4, r5, pc}
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d108      	bne.n	80069c2 <strstr+0x20>
 80069b0:	2301      	movs	r3, #1
 80069b2:	5ccc      	ldrb	r4, [r1, r3]
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d0f8      	beq.n	80069aa <strstr+0x8>
 80069b8:	5cc5      	ldrb	r5, [r0, r3]
 80069ba:	42a5      	cmp	r5, r4
 80069bc:	d101      	bne.n	80069c2 <strstr+0x20>
 80069be:	3301      	adds	r3, #1
 80069c0:	e7f7      	b.n	80069b2 <strstr+0x10>
 80069c2:	3001      	adds	r0, #1
 80069c4:	7803      	ldrb	r3, [r0, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <strstr+0xa>
 80069ca:	0018      	movs	r0, r3
 80069cc:	e7ed      	b.n	80069aa <strstr+0x8>
	...

080069d0 <_close_r>:
 80069d0:	2300      	movs	r3, #0
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	4d06      	ldr	r5, [pc, #24]	@ (80069f0 <_close_r+0x20>)
 80069d6:	0004      	movs	r4, r0
 80069d8:	0008      	movs	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fa f8c3 	bl	8000b66 <_close>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d103      	bne.n	80069ec <_close_r+0x1c>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d000      	beq.n	80069ec <_close_r+0x1c>
 80069ea:	6023      	str	r3, [r4, #0]
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	20000420 	.word	0x20000420

080069f4 <_lseek_r>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	0004      	movs	r4, r0
 80069f8:	0008      	movs	r0, r1
 80069fa:	0011      	movs	r1, r2
 80069fc:	001a      	movs	r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	4d05      	ldr	r5, [pc, #20]	@ (8006a18 <_lseek_r+0x24>)
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	f7fa f8d0 	bl	8000ba8 <_lseek>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d103      	bne.n	8006a14 <_lseek_r+0x20>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d000      	beq.n	8006a14 <_lseek_r+0x20>
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	bd70      	pop	{r4, r5, r6, pc}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	20000420 	.word	0x20000420

08006a1c <_read_r>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	0004      	movs	r4, r0
 8006a20:	0008      	movs	r0, r1
 8006a22:	0011      	movs	r1, r2
 8006a24:	001a      	movs	r2, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	4d05      	ldr	r5, [pc, #20]	@ (8006a40 <_read_r+0x24>)
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7fa f862 	bl	8000af4 <_read>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d103      	bne.n	8006a3c <_read_r+0x20>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d000      	beq.n	8006a3c <_read_r+0x20>
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	20000420 	.word	0x20000420

08006a44 <_sbrk_r>:
 8006a44:	2300      	movs	r3, #0
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	4d06      	ldr	r5, [pc, #24]	@ (8006a64 <_sbrk_r+0x20>)
 8006a4a:	0004      	movs	r4, r0
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fa f8b6 	bl	8000bc0 <_sbrk>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d103      	bne.n	8006a60 <_sbrk_r+0x1c>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d000      	beq.n	8006a60 <_sbrk_r+0x1c>
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	20000420 	.word	0x20000420

08006a68 <_write_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	0004      	movs	r4, r0
 8006a6c:	0008      	movs	r0, r1
 8006a6e:	0011      	movs	r1, r2
 8006a70:	001a      	movs	r2, r3
 8006a72:	2300      	movs	r3, #0
 8006a74:	4d05      	ldr	r5, [pc, #20]	@ (8006a8c <_write_r+0x24>)
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fa f859 	bl	8000b2e <_write>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d103      	bne.n	8006a88 <_write_r+0x20>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d000      	beq.n	8006a88 <_write_r+0x20>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	20000420 	.word	0x20000420

08006a90 <__errno>:
 8006a90:	4b01      	ldr	r3, [pc, #4]	@ (8006a98 <__errno+0x8>)
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	4770      	bx	lr
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	2000001c 	.word	0x2000001c

08006a9c <__libc_init_array>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad4 <__libc_init_array+0x38>)
 8006aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ad8 <__libc_init_array+0x3c>)
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	42a6      	cmp	r6, r4
 8006aaa:	d109      	bne.n	8006ac0 <__libc_init_array+0x24>
 8006aac:	2600      	movs	r6, #0
 8006aae:	f000 fc85 	bl	80073bc <_init>
 8006ab2:	4c0a      	ldr	r4, [pc, #40]	@ (8006adc <__libc_init_array+0x40>)
 8006ab4:	4d0a      	ldr	r5, [pc, #40]	@ (8006ae0 <__libc_init_array+0x44>)
 8006ab6:	1b64      	subs	r4, r4, r5
 8006ab8:	10a4      	asrs	r4, r4, #2
 8006aba:	42a6      	cmp	r6, r4
 8006abc:	d105      	bne.n	8006aca <__libc_init_array+0x2e>
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	00b3      	lsls	r3, r6, #2
 8006ac2:	58eb      	ldr	r3, [r5, r3]
 8006ac4:	4798      	blx	r3
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	e7ee      	b.n	8006aa8 <__libc_init_array+0xc>
 8006aca:	00b3      	lsls	r3, r6, #2
 8006acc:	58eb      	ldr	r3, [r5, r3]
 8006ace:	4798      	blx	r3
 8006ad0:	3601      	adds	r6, #1
 8006ad2:	e7f2      	b.n	8006aba <__libc_init_array+0x1e>
 8006ad4:	08007b9c 	.word	0x08007b9c
 8006ad8:	08007b9c 	.word	0x08007b9c
 8006adc:	08007ba0 	.word	0x08007ba0
 8006ae0:	08007b9c 	.word	0x08007b9c

08006ae4 <__retarget_lock_init_recursive>:
 8006ae4:	4770      	bx	lr

08006ae6 <__retarget_lock_acquire_recursive>:
 8006ae6:	4770      	bx	lr

08006ae8 <__retarget_lock_release_recursive>:
 8006ae8:	4770      	bx	lr

08006aea <strcpy>:
 8006aea:	0003      	movs	r3, r0
 8006aec:	780a      	ldrb	r2, [r1, #0]
 8006aee:	3101      	adds	r1, #1
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d1f9      	bne.n	8006aec <strcpy+0x2>
 8006af8:	4770      	bx	lr

08006afa <memcpy>:
 8006afa:	2300      	movs	r3, #0
 8006afc:	b510      	push	{r4, lr}
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xa>
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	5ccc      	ldrb	r4, [r1, r3]
 8006b06:	54c4      	strb	r4, [r0, r3]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	e7f8      	b.n	8006afe <memcpy+0x4>

08006b0c <_free_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	0005      	movs	r5, r0
 8006b10:	1e0c      	subs	r4, r1, #0
 8006b12:	d010      	beq.n	8006b36 <_free_r+0x2a>
 8006b14:	3c04      	subs	r4, #4
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da00      	bge.n	8006b1e <_free_r+0x12>
 8006b1c:	18e4      	adds	r4, r4, r3
 8006b1e:	0028      	movs	r0, r5
 8006b20:	f7ff fcfa 	bl	8006518 <__malloc_lock>
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <_free_r+0x90>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <_free_r+0x2c>
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6014      	str	r4, [r2, #0]
 8006b30:	0028      	movs	r0, r5
 8006b32:	f7ff fcf9 	bl	8006528 <__malloc_unlock>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d908      	bls.n	8006b4e <_free_r+0x42>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	1821      	adds	r1, r4, r0
 8006b40:	428b      	cmp	r3, r1
 8006b42:	d1f3      	bne.n	8006b2c <_free_r+0x20>
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	1809      	adds	r1, r1, r0
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	e7ee      	b.n	8006b2c <_free_r+0x20>
 8006b4e:	001a      	movs	r2, r3
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_free_r+0x4e>
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	d9f9      	bls.n	8006b4e <_free_r+0x42>
 8006b5a:	6811      	ldr	r1, [r2, #0]
 8006b5c:	1850      	adds	r0, r2, r1
 8006b5e:	42a0      	cmp	r0, r4
 8006b60:	d10b      	bne.n	8006b7a <_free_r+0x6e>
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1809      	adds	r1, r1, r0
 8006b66:	1850      	adds	r0, r2, r1
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	4283      	cmp	r3, r0
 8006b6c:	d1e0      	bne.n	8006b30 <_free_r+0x24>
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	1841      	adds	r1, r0, r1
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e7da      	b.n	8006b30 <_free_r+0x24>
 8006b7a:	42a0      	cmp	r0, r4
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x78>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7d5      	b.n	8006b30 <_free_r+0x24>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	d103      	bne.n	8006b94 <_free_r+0x88>
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	1809      	adds	r1, r1, r0
 8006b92:	6021      	str	r1, [r4, #0]
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6054      	str	r4, [r2, #4]
 8006b98:	e7ca      	b.n	8006b30 <_free_r+0x24>
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	200002e0 	.word	0x200002e0

08006ba0 <__sfputc_r>:
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	6093      	str	r3, [r2, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da04      	bge.n	8006bb6 <__sfputc_r+0x16>
 8006bac:	6994      	ldr	r4, [r2, #24]
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	db07      	blt.n	8006bc2 <__sfputc_r+0x22>
 8006bb2:	290a      	cmp	r1, #10
 8006bb4:	d005      	beq.n	8006bc2 <__sfputc_r+0x22>
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	1c58      	adds	r0, r3, #1
 8006bba:	6010      	str	r0, [r2, #0]
 8006bbc:	7019      	strb	r1, [r3, #0]
 8006bbe:	0008      	movs	r0, r1
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	f7ff fe39 	bl	8006838 <__swbuf_r>
 8006bc6:	0001      	movs	r1, r0
 8006bc8:	e7f9      	b.n	8006bbe <__sfputc_r+0x1e>

08006bca <__sfputs_r>:
 8006bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bcc:	0006      	movs	r6, r0
 8006bce:	000f      	movs	r7, r1
 8006bd0:	0014      	movs	r4, r2
 8006bd2:	18d5      	adds	r5, r2, r3
 8006bd4:	42ac      	cmp	r4, r5
 8006bd6:	d101      	bne.n	8006bdc <__sfputs_r+0x12>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e007      	b.n	8006bec <__sfputs_r+0x22>
 8006bdc:	7821      	ldrb	r1, [r4, #0]
 8006bde:	003a      	movs	r2, r7
 8006be0:	0030      	movs	r0, r6
 8006be2:	f7ff ffdd 	bl	8006ba0 <__sfputc_r>
 8006be6:	3401      	adds	r4, #1
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d1f3      	bne.n	8006bd4 <__sfputs_r+0xa>
 8006bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bf0 <_vfiprintf_r>:
 8006bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf2:	b0a1      	sub	sp, #132	@ 0x84
 8006bf4:	000f      	movs	r7, r1
 8006bf6:	0015      	movs	r5, r2
 8006bf8:	001e      	movs	r6, r3
 8006bfa:	9003      	str	r0, [sp, #12]
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d004      	beq.n	8006c0a <_vfiprintf_r+0x1a>
 8006c00:	6a03      	ldr	r3, [r0, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <_vfiprintf_r+0x1a>
 8006c06:	f7ff fd27 	bl	8006658 <__sinit>
 8006c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c0c:	07db      	lsls	r3, r3, #31
 8006c0e:	d405      	bmi.n	8006c1c <_vfiprintf_r+0x2c>
 8006c10:	89bb      	ldrh	r3, [r7, #12]
 8006c12:	059b      	lsls	r3, r3, #22
 8006c14:	d402      	bmi.n	8006c1c <_vfiprintf_r+0x2c>
 8006c16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c18:	f7ff ff65 	bl	8006ae6 <__retarget_lock_acquire_recursive>
 8006c1c:	89bb      	ldrh	r3, [r7, #12]
 8006c1e:	071b      	lsls	r3, r3, #28
 8006c20:	d502      	bpl.n	8006c28 <_vfiprintf_r+0x38>
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <_vfiprintf_r+0x60>
 8006c28:	0039      	movs	r1, r7
 8006c2a:	9803      	ldr	r0, [sp, #12]
 8006c2c:	f7ff fe46 	bl	80068bc <__swsetup_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d00d      	beq.n	8006c50 <_vfiprintf_r+0x60>
 8006c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c36:	07db      	lsls	r3, r3, #31
 8006c38:	d503      	bpl.n	8006c42 <_vfiprintf_r+0x52>
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	4240      	negs	r0, r0
 8006c3e:	b021      	add	sp, #132	@ 0x84
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c42:	89bb      	ldrh	r3, [r7, #12]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	d4f8      	bmi.n	8006c3a <_vfiprintf_r+0x4a>
 8006c48:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c4a:	f7ff ff4d 	bl	8006ae8 <__retarget_lock_release_recursive>
 8006c4e:	e7f4      	b.n	8006c3a <_vfiprintf_r+0x4a>
 8006c50:	2300      	movs	r3, #0
 8006c52:	ac08      	add	r4, sp, #32
 8006c54:	6163      	str	r3, [r4, #20]
 8006c56:	3320      	adds	r3, #32
 8006c58:	7663      	strb	r3, [r4, #25]
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	76a3      	strb	r3, [r4, #26]
 8006c5e:	9607      	str	r6, [sp, #28]
 8006c60:	002e      	movs	r6, r5
 8006c62:	7833      	ldrb	r3, [r6, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <_vfiprintf_r+0x7c>
 8006c68:	2b25      	cmp	r3, #37	@ 0x25
 8006c6a:	d148      	bne.n	8006cfe <_vfiprintf_r+0x10e>
 8006c6c:	1b73      	subs	r3, r6, r5
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	42ae      	cmp	r6, r5
 8006c72:	d00b      	beq.n	8006c8c <_vfiprintf_r+0x9c>
 8006c74:	002a      	movs	r2, r5
 8006c76:	0039      	movs	r1, r7
 8006c78:	9803      	ldr	r0, [sp, #12]
 8006c7a:	f7ff ffa6 	bl	8006bca <__sfputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d100      	bne.n	8006c84 <_vfiprintf_r+0x94>
 8006c82:	e0ae      	b.n	8006de2 <_vfiprintf_r+0x1f2>
 8006c84:	6963      	ldr	r3, [r4, #20]
 8006c86:	9a05      	ldr	r2, [sp, #20]
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	6163      	str	r3, [r4, #20]
 8006c8c:	7833      	ldrb	r3, [r6, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d100      	bne.n	8006c94 <_vfiprintf_r+0xa4>
 8006c92:	e0a6      	b.n	8006de2 <_vfiprintf_r+0x1f2>
 8006c94:	2201      	movs	r2, #1
 8006c96:	2300      	movs	r3, #0
 8006c98:	4252      	negs	r2, r2
 8006c9a:	6062      	str	r2, [r4, #4]
 8006c9c:	a904      	add	r1, sp, #16
 8006c9e:	3254      	adds	r2, #84	@ 0x54
 8006ca0:	1852      	adds	r2, r2, r1
 8006ca2:	1c75      	adds	r5, r6, #1
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	60e3      	str	r3, [r4, #12]
 8006ca8:	60a3      	str	r3, [r4, #8]
 8006caa:	7013      	strb	r3, [r2, #0]
 8006cac:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006cae:	4b59      	ldr	r3, [pc, #356]	@ (8006e14 <_vfiprintf_r+0x224>)
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	7829      	ldrb	r1, [r5, #0]
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	f000 fb74 	bl	80073a4 <memchr>
 8006cbc:	1c6e      	adds	r6, r5, #1
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d11f      	bne.n	8006d02 <_vfiprintf_r+0x112>
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	06d3      	lsls	r3, r2, #27
 8006cc6:	d504      	bpl.n	8006cd2 <_vfiprintf_r+0xe2>
 8006cc8:	2353      	movs	r3, #83	@ 0x53
 8006cca:	a904      	add	r1, sp, #16
 8006ccc:	185b      	adds	r3, r3, r1
 8006cce:	2120      	movs	r1, #32
 8006cd0:	7019      	strb	r1, [r3, #0]
 8006cd2:	0713      	lsls	r3, r2, #28
 8006cd4:	d504      	bpl.n	8006ce0 <_vfiprintf_r+0xf0>
 8006cd6:	2353      	movs	r3, #83	@ 0x53
 8006cd8:	a904      	add	r1, sp, #16
 8006cda:	185b      	adds	r3, r3, r1
 8006cdc:	212b      	movs	r1, #43	@ 0x2b
 8006cde:	7019      	strb	r1, [r3, #0]
 8006ce0:	782b      	ldrb	r3, [r5, #0]
 8006ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce4:	d016      	beq.n	8006d14 <_vfiprintf_r+0x124>
 8006ce6:	002e      	movs	r6, r5
 8006ce8:	2100      	movs	r1, #0
 8006cea:	200a      	movs	r0, #10
 8006cec:	68e3      	ldr	r3, [r4, #12]
 8006cee:	7832      	ldrb	r2, [r6, #0]
 8006cf0:	1c75      	adds	r5, r6, #1
 8006cf2:	3a30      	subs	r2, #48	@ 0x30
 8006cf4:	2a09      	cmp	r2, #9
 8006cf6:	d950      	bls.n	8006d9a <_vfiprintf_r+0x1aa>
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d111      	bne.n	8006d20 <_vfiprintf_r+0x130>
 8006cfc:	e017      	b.n	8006d2e <_vfiprintf_r+0x13e>
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7af      	b.n	8006c62 <_vfiprintf_r+0x72>
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	1ac0      	subs	r0, r0, r3
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4083      	lsls	r3, r0
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	0035      	movs	r5, r6
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	e7cc      	b.n	8006cae <_vfiprintf_r+0xbe>
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	1d19      	adds	r1, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	9107      	str	r1, [sp, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db01      	blt.n	8006d24 <_vfiprintf_r+0x134>
 8006d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d22:	e004      	b.n	8006d2e <_vfiprintf_r+0x13e>
 8006d24:	425b      	negs	r3, r3
 8006d26:	60e3      	str	r3, [r4, #12]
 8006d28:	2302      	movs	r3, #2
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	7833      	ldrb	r3, [r6, #0]
 8006d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d32:	d10c      	bne.n	8006d4e <_vfiprintf_r+0x15e>
 8006d34:	7873      	ldrb	r3, [r6, #1]
 8006d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d38:	d134      	bne.n	8006da4 <_vfiprintf_r+0x1b4>
 8006d3a:	9b07      	ldr	r3, [sp, #28]
 8006d3c:	3602      	adds	r6, #2
 8006d3e:	1d1a      	adds	r2, r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	9207      	str	r2, [sp, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da01      	bge.n	8006d4c <_vfiprintf_r+0x15c>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4e:	4d32      	ldr	r5, [pc, #200]	@ (8006e18 <_vfiprintf_r+0x228>)
 8006d50:	2203      	movs	r2, #3
 8006d52:	0028      	movs	r0, r5
 8006d54:	7831      	ldrb	r1, [r6, #0]
 8006d56:	f000 fb25 	bl	80073a4 <memchr>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d006      	beq.n	8006d6c <_vfiprintf_r+0x17c>
 8006d5e:	2340      	movs	r3, #64	@ 0x40
 8006d60:	1b40      	subs	r0, r0, r5
 8006d62:	4083      	lsls	r3, r0
 8006d64:	6822      	ldr	r2, [r4, #0]
 8006d66:	3601      	adds	r6, #1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	7831      	ldrb	r1, [r6, #0]
 8006d6e:	2206      	movs	r2, #6
 8006d70:	482a      	ldr	r0, [pc, #168]	@ (8006e1c <_vfiprintf_r+0x22c>)
 8006d72:	1c75      	adds	r5, r6, #1
 8006d74:	7621      	strb	r1, [r4, #24]
 8006d76:	f000 fb15 	bl	80073a4 <memchr>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d040      	beq.n	8006e00 <_vfiprintf_r+0x210>
 8006d7e:	4b28      	ldr	r3, [pc, #160]	@ (8006e20 <_vfiprintf_r+0x230>)
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d122      	bne.n	8006dca <_vfiprintf_r+0x1da>
 8006d84:	2207      	movs	r2, #7
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	3307      	adds	r3, #7
 8006d8a:	4393      	bics	r3, r2
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	6963      	ldr	r3, [r4, #20]
 8006d92:	9a04      	ldr	r2, [sp, #16]
 8006d94:	189b      	adds	r3, r3, r2
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	e762      	b.n	8006c60 <_vfiprintf_r+0x70>
 8006d9a:	4343      	muls	r3, r0
 8006d9c:	002e      	movs	r6, r5
 8006d9e:	2101      	movs	r1, #1
 8006da0:	189b      	adds	r3, r3, r2
 8006da2:	e7a4      	b.n	8006cee <_vfiprintf_r+0xfe>
 8006da4:	2300      	movs	r3, #0
 8006da6:	200a      	movs	r0, #10
 8006da8:	0019      	movs	r1, r3
 8006daa:	3601      	adds	r6, #1
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	7832      	ldrb	r2, [r6, #0]
 8006db0:	1c75      	adds	r5, r6, #1
 8006db2:	3a30      	subs	r2, #48	@ 0x30
 8006db4:	2a09      	cmp	r2, #9
 8006db6:	d903      	bls.n	8006dc0 <_vfiprintf_r+0x1d0>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0c8      	beq.n	8006d4e <_vfiprintf_r+0x15e>
 8006dbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dbe:	e7c6      	b.n	8006d4e <_vfiprintf_r+0x15e>
 8006dc0:	4341      	muls	r1, r0
 8006dc2:	002e      	movs	r6, r5
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	1889      	adds	r1, r1, r2
 8006dc8:	e7f1      	b.n	8006dae <_vfiprintf_r+0x1be>
 8006dca:	aa07      	add	r2, sp, #28
 8006dcc:	9200      	str	r2, [sp, #0]
 8006dce:	0021      	movs	r1, r4
 8006dd0:	003a      	movs	r2, r7
 8006dd2:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <_vfiprintf_r+0x234>)
 8006dd4:	9803      	ldr	r0, [sp, #12]
 8006dd6:	e000      	b.n	8006dda <_vfiprintf_r+0x1ea>
 8006dd8:	bf00      	nop
 8006dda:	9004      	str	r0, [sp, #16]
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	3301      	adds	r3, #1
 8006de0:	d1d6      	bne.n	8006d90 <_vfiprintf_r+0x1a0>
 8006de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de4:	07db      	lsls	r3, r3, #31
 8006de6:	d405      	bmi.n	8006df4 <_vfiprintf_r+0x204>
 8006de8:	89bb      	ldrh	r3, [r7, #12]
 8006dea:	059b      	lsls	r3, r3, #22
 8006dec:	d402      	bmi.n	8006df4 <_vfiprintf_r+0x204>
 8006dee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006df0:	f7ff fe7a 	bl	8006ae8 <__retarget_lock_release_recursive>
 8006df4:	89bb      	ldrh	r3, [r7, #12]
 8006df6:	065b      	lsls	r3, r3, #25
 8006df8:	d500      	bpl.n	8006dfc <_vfiprintf_r+0x20c>
 8006dfa:	e71e      	b.n	8006c3a <_vfiprintf_r+0x4a>
 8006dfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006dfe:	e71e      	b.n	8006c3e <_vfiprintf_r+0x4e>
 8006e00:	aa07      	add	r2, sp, #28
 8006e02:	9200      	str	r2, [sp, #0]
 8006e04:	0021      	movs	r1, r4
 8006e06:	003a      	movs	r2, r7
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <_vfiprintf_r+0x234>)
 8006e0a:	9803      	ldr	r0, [sp, #12]
 8006e0c:	f000 f87c 	bl	8006f08 <_printf_i>
 8006e10:	e7e3      	b.n	8006dda <_vfiprintf_r+0x1ea>
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	08007b60 	.word	0x08007b60
 8006e18:	08007b66 	.word	0x08007b66
 8006e1c:	08007b6a 	.word	0x08007b6a
 8006e20:	00000000 	.word	0x00000000
 8006e24:	08006bcb 	.word	0x08006bcb

08006e28 <_printf_common>:
 8006e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e2a:	0016      	movs	r6, r2
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	688a      	ldr	r2, [r1, #8]
 8006e30:	690b      	ldr	r3, [r1, #16]
 8006e32:	000c      	movs	r4, r1
 8006e34:	9000      	str	r0, [sp, #0]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	da00      	bge.n	8006e3c <_printf_common+0x14>
 8006e3a:	0013      	movs	r3, r2
 8006e3c:	0022      	movs	r2, r4
 8006e3e:	6033      	str	r3, [r6, #0]
 8006e40:	3243      	adds	r2, #67	@ 0x43
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	d001      	beq.n	8006e4c <_printf_common+0x24>
 8006e48:	3301      	adds	r3, #1
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	069b      	lsls	r3, r3, #26
 8006e50:	d502      	bpl.n	8006e58 <_printf_common+0x30>
 8006e52:	6833      	ldr	r3, [r6, #0]
 8006e54:	3302      	adds	r3, #2
 8006e56:	6033      	str	r3, [r6, #0]
 8006e58:	6822      	ldr	r2, [r4, #0]
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	0015      	movs	r5, r2
 8006e5e:	401d      	ands	r5, r3
 8006e60:	421a      	tst	r2, r3
 8006e62:	d027      	beq.n	8006eb4 <_printf_common+0x8c>
 8006e64:	0023      	movs	r3, r4
 8006e66:	3343      	adds	r3, #67	@ 0x43
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	4193      	sbcs	r3, r2
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	0692      	lsls	r2, r2, #26
 8006e72:	d430      	bmi.n	8006ed6 <_printf_common+0xae>
 8006e74:	0022      	movs	r2, r4
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	9800      	ldr	r0, [sp, #0]
 8006e7a:	9d08      	ldr	r5, [sp, #32]
 8006e7c:	3243      	adds	r2, #67	@ 0x43
 8006e7e:	47a8      	blx	r5
 8006e80:	3001      	adds	r0, #1
 8006e82:	d025      	beq.n	8006ed0 <_printf_common+0xa8>
 8006e84:	2206      	movs	r2, #6
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	2500      	movs	r5, #0
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d105      	bne.n	8006e9c <_printf_common+0x74>
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	68e5      	ldr	r5, [r4, #12]
 8006e94:	1aed      	subs	r5, r5, r3
 8006e96:	43eb      	mvns	r3, r5
 8006e98:	17db      	asrs	r3, r3, #31
 8006e9a:	401d      	ands	r5, r3
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	6922      	ldr	r2, [r4, #16]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	dd01      	ble.n	8006ea8 <_printf_common+0x80>
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	18ed      	adds	r5, r5, r3
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42b5      	cmp	r5, r6
 8006eac:	d120      	bne.n	8006ef0 <_printf_common+0xc8>
 8006eae:	2000      	movs	r0, #0
 8006eb0:	e010      	b.n	8006ed4 <_printf_common+0xac>
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	68e3      	ldr	r3, [r4, #12]
 8006eb6:	6832      	ldr	r2, [r6, #0]
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	42ab      	cmp	r3, r5
 8006ebc:	ddd2      	ble.n	8006e64 <_printf_common+0x3c>
 8006ebe:	0022      	movs	r2, r4
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	9901      	ldr	r1, [sp, #4]
 8006ec4:	9800      	ldr	r0, [sp, #0]
 8006ec6:	9f08      	ldr	r7, [sp, #32]
 8006ec8:	3219      	adds	r2, #25
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d1f0      	bne.n	8006eb2 <_printf_common+0x8a>
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	4240      	negs	r0, r0
 8006ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ed6:	2030      	movs	r0, #48	@ 0x30
 8006ed8:	18e1      	adds	r1, r4, r3
 8006eda:	3143      	adds	r1, #67	@ 0x43
 8006edc:	7008      	strb	r0, [r1, #0]
 8006ede:	0021      	movs	r1, r4
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	3145      	adds	r1, #69	@ 0x45
 8006ee4:	7809      	ldrb	r1, [r1, #0]
 8006ee6:	18a2      	adds	r2, r4, r2
 8006ee8:	3243      	adds	r2, #67	@ 0x43
 8006eea:	3302      	adds	r3, #2
 8006eec:	7011      	strb	r1, [r2, #0]
 8006eee:	e7c1      	b.n	8006e74 <_printf_common+0x4c>
 8006ef0:	0022      	movs	r2, r4
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9901      	ldr	r1, [sp, #4]
 8006ef6:	9800      	ldr	r0, [sp, #0]
 8006ef8:	9f08      	ldr	r7, [sp, #32]
 8006efa:	321a      	adds	r2, #26
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	d0e6      	beq.n	8006ed0 <_printf_common+0xa8>
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7d1      	b.n	8006eaa <_printf_common+0x82>
	...

08006f08 <_printf_i>:
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	b08b      	sub	sp, #44	@ 0x2c
 8006f0c:	9206      	str	r2, [sp, #24]
 8006f0e:	000a      	movs	r2, r1
 8006f10:	3243      	adds	r2, #67	@ 0x43
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	9005      	str	r0, [sp, #20]
 8006f16:	9203      	str	r2, [sp, #12]
 8006f18:	7e0a      	ldrb	r2, [r1, #24]
 8006f1a:	000c      	movs	r4, r1
 8006f1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f1e:	2a78      	cmp	r2, #120	@ 0x78
 8006f20:	d809      	bhi.n	8006f36 <_printf_i+0x2e>
 8006f22:	2a62      	cmp	r2, #98	@ 0x62
 8006f24:	d80b      	bhi.n	8006f3e <_printf_i+0x36>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	d100      	bne.n	8006f2c <_printf_i+0x24>
 8006f2a:	e0ba      	b.n	80070a2 <_printf_i+0x19a>
 8006f2c:	497a      	ldr	r1, [pc, #488]	@ (8007118 <_printf_i+0x210>)
 8006f2e:	9104      	str	r1, [sp, #16]
 8006f30:	2a58      	cmp	r2, #88	@ 0x58
 8006f32:	d100      	bne.n	8006f36 <_printf_i+0x2e>
 8006f34:	e08e      	b.n	8007054 <_printf_i+0x14c>
 8006f36:	0025      	movs	r5, r4
 8006f38:	3542      	adds	r5, #66	@ 0x42
 8006f3a:	702a      	strb	r2, [r5, #0]
 8006f3c:	e022      	b.n	8006f84 <_printf_i+0x7c>
 8006f3e:	0010      	movs	r0, r2
 8006f40:	3863      	subs	r0, #99	@ 0x63
 8006f42:	2815      	cmp	r0, #21
 8006f44:	d8f7      	bhi.n	8006f36 <_printf_i+0x2e>
 8006f46:	f7f9 f8e7 	bl	8000118 <__gnu_thumb1_case_shi>
 8006f4a:	0016      	.short	0x0016
 8006f4c:	fff6001f 	.word	0xfff6001f
 8006f50:	fff6fff6 	.word	0xfff6fff6
 8006f54:	001ffff6 	.word	0x001ffff6
 8006f58:	fff6fff6 	.word	0xfff6fff6
 8006f5c:	fff6fff6 	.word	0xfff6fff6
 8006f60:	0036009f 	.word	0x0036009f
 8006f64:	fff6007e 	.word	0xfff6007e
 8006f68:	00b0fff6 	.word	0x00b0fff6
 8006f6c:	0036fff6 	.word	0x0036fff6
 8006f70:	fff6fff6 	.word	0xfff6fff6
 8006f74:	0082      	.short	0x0082
 8006f76:	0025      	movs	r5, r4
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	3542      	adds	r5, #66	@ 0x42
 8006f7c:	1d11      	adds	r1, r2, #4
 8006f7e:	6019      	str	r1, [r3, #0]
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	702b      	strb	r3, [r5, #0]
 8006f84:	2301      	movs	r3, #1
 8006f86:	e09e      	b.n	80070c6 <_printf_i+0x1be>
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	6809      	ldr	r1, [r1, #0]
 8006f8c:	1d02      	adds	r2, r0, #4
 8006f8e:	060d      	lsls	r5, r1, #24
 8006f90:	d50b      	bpl.n	8006faa <_printf_i+0xa2>
 8006f92:	6806      	ldr	r6, [r0, #0]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	da03      	bge.n	8006fa2 <_printf_i+0x9a>
 8006f9a:	232d      	movs	r3, #45	@ 0x2d
 8006f9c:	9a03      	ldr	r2, [sp, #12]
 8006f9e:	4276      	negs	r6, r6
 8006fa0:	7013      	strb	r3, [r2, #0]
 8006fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8007118 <_printf_i+0x210>)
 8006fa4:	270a      	movs	r7, #10
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	e018      	b.n	8006fdc <_printf_i+0xd4>
 8006faa:	6806      	ldr	r6, [r0, #0]
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	0649      	lsls	r1, r1, #25
 8006fb0:	d5f1      	bpl.n	8006f96 <_printf_i+0x8e>
 8006fb2:	b236      	sxth	r6, r6
 8006fb4:	e7ef      	b.n	8006f96 <_printf_i+0x8e>
 8006fb6:	6808      	ldr	r0, [r1, #0]
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	c940      	ldmia	r1!, {r6}
 8006fbc:	0605      	lsls	r5, r0, #24
 8006fbe:	d402      	bmi.n	8006fc6 <_printf_i+0xbe>
 8006fc0:	0640      	lsls	r0, r0, #25
 8006fc2:	d500      	bpl.n	8006fc6 <_printf_i+0xbe>
 8006fc4:	b2b6      	uxth	r6, r6
 8006fc6:	6019      	str	r1, [r3, #0]
 8006fc8:	4b53      	ldr	r3, [pc, #332]	@ (8007118 <_printf_i+0x210>)
 8006fca:	270a      	movs	r7, #10
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	2a6f      	cmp	r2, #111	@ 0x6f
 8006fd0:	d100      	bne.n	8006fd4 <_printf_i+0xcc>
 8006fd2:	3f02      	subs	r7, #2
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	3343      	adds	r3, #67	@ 0x43
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	6863      	ldr	r3, [r4, #4]
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	db06      	blt.n	8006ff2 <_printf_i+0xea>
 8006fe4:	2104      	movs	r1, #4
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	9d03      	ldr	r5, [sp, #12]
 8006fea:	438a      	bics	r2, r1
 8006fec:	6022      	str	r2, [r4, #0]
 8006fee:	4333      	orrs	r3, r6
 8006ff0:	d00c      	beq.n	800700c <_printf_i+0x104>
 8006ff2:	9d03      	ldr	r5, [sp, #12]
 8006ff4:	0030      	movs	r0, r6
 8006ff6:	0039      	movs	r1, r7
 8006ff8:	f7f9 f91e 	bl	8000238 <__aeabi_uidivmod>
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	3d01      	subs	r5, #1
 8007000:	5c5b      	ldrb	r3, [r3, r1]
 8007002:	702b      	strb	r3, [r5, #0]
 8007004:	0033      	movs	r3, r6
 8007006:	0006      	movs	r6, r0
 8007008:	429f      	cmp	r7, r3
 800700a:	d9f3      	bls.n	8006ff4 <_printf_i+0xec>
 800700c:	2f08      	cmp	r7, #8
 800700e:	d109      	bne.n	8007024 <_printf_i+0x11c>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	07db      	lsls	r3, r3, #31
 8007014:	d506      	bpl.n	8007024 <_printf_i+0x11c>
 8007016:	6862      	ldr	r2, [r4, #4]
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	dc02      	bgt.n	8007024 <_printf_i+0x11c>
 800701e:	2330      	movs	r3, #48	@ 0x30
 8007020:	3d01      	subs	r5, #1
 8007022:	702b      	strb	r3, [r5, #0]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1b5b      	subs	r3, r3, r5
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	0021      	movs	r1, r4
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	9805      	ldr	r0, [sp, #20]
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	aa09      	add	r2, sp, #36	@ 0x24
 8007036:	f7ff fef7 	bl	8006e28 <_printf_common>
 800703a:	3001      	adds	r0, #1
 800703c:	d148      	bne.n	80070d0 <_printf_i+0x1c8>
 800703e:	2001      	movs	r0, #1
 8007040:	4240      	negs	r0, r0
 8007042:	b00b      	add	sp, #44	@ 0x2c
 8007044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007046:	2220      	movs	r2, #32
 8007048:	6809      	ldr	r1, [r1, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	6022      	str	r2, [r4, #0]
 800704e:	2278      	movs	r2, #120	@ 0x78
 8007050:	4932      	ldr	r1, [pc, #200]	@ (800711c <_printf_i+0x214>)
 8007052:	9104      	str	r1, [sp, #16]
 8007054:	0021      	movs	r1, r4
 8007056:	3145      	adds	r1, #69	@ 0x45
 8007058:	700a      	strb	r2, [r1, #0]
 800705a:	6819      	ldr	r1, [r3, #0]
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	c940      	ldmia	r1!, {r6}
 8007060:	0610      	lsls	r0, r2, #24
 8007062:	d402      	bmi.n	800706a <_printf_i+0x162>
 8007064:	0650      	lsls	r0, r2, #25
 8007066:	d500      	bpl.n	800706a <_printf_i+0x162>
 8007068:	b2b6      	uxth	r6, r6
 800706a:	6019      	str	r1, [r3, #0]
 800706c:	07d3      	lsls	r3, r2, #31
 800706e:	d502      	bpl.n	8007076 <_printf_i+0x16e>
 8007070:	2320      	movs	r3, #32
 8007072:	4313      	orrs	r3, r2
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	2e00      	cmp	r6, #0
 8007078:	d001      	beq.n	800707e <_printf_i+0x176>
 800707a:	2710      	movs	r7, #16
 800707c:	e7aa      	b.n	8006fd4 <_printf_i+0xcc>
 800707e:	2220      	movs	r2, #32
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	4393      	bics	r3, r2
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	e7f8      	b.n	800707a <_printf_i+0x172>
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	680d      	ldr	r5, [r1, #0]
 800708c:	1d10      	adds	r0, r2, #4
 800708e:	6949      	ldr	r1, [r1, #20]
 8007090:	6018      	str	r0, [r3, #0]
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	062e      	lsls	r6, r5, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0x194>
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0x19a>
 800709c:	066d      	lsls	r5, r5, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0x190>
 80070a0:	8019      	strh	r1, [r3, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9d03      	ldr	r5, [sp, #12]
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	e7bf      	b.n	800702a <_printf_i+0x122>
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	1d11      	adds	r1, r2, #4
 80070ae:	6019      	str	r1, [r3, #0]
 80070b0:	6815      	ldr	r5, [r2, #0]
 80070b2:	2100      	movs	r1, #0
 80070b4:	0028      	movs	r0, r5
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	f000 f974 	bl	80073a4 <memchr>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d001      	beq.n	80070c4 <_printf_i+0x1bc>
 80070c0:	1b40      	subs	r0, r0, r5
 80070c2:	6060      	str	r0, [r4, #4]
 80070c4:	6863      	ldr	r3, [r4, #4]
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	2300      	movs	r3, #0
 80070ca:	9a03      	ldr	r2, [sp, #12]
 80070cc:	7013      	strb	r3, [r2, #0]
 80070ce:	e7ac      	b.n	800702a <_printf_i+0x122>
 80070d0:	002a      	movs	r2, r5
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	9906      	ldr	r1, [sp, #24]
 80070d6:	9805      	ldr	r0, [sp, #20]
 80070d8:	9d07      	ldr	r5, [sp, #28]
 80070da:	47a8      	blx	r5
 80070dc:	3001      	adds	r0, #1
 80070de:	d0ae      	beq.n	800703e <_printf_i+0x136>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	079b      	lsls	r3, r3, #30
 80070e4:	d415      	bmi.n	8007112 <_printf_i+0x20a>
 80070e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e8:	68e0      	ldr	r0, [r4, #12]
 80070ea:	4298      	cmp	r0, r3
 80070ec:	daa9      	bge.n	8007042 <_printf_i+0x13a>
 80070ee:	0018      	movs	r0, r3
 80070f0:	e7a7      	b.n	8007042 <_printf_i+0x13a>
 80070f2:	0022      	movs	r2, r4
 80070f4:	2301      	movs	r3, #1
 80070f6:	9906      	ldr	r1, [sp, #24]
 80070f8:	9805      	ldr	r0, [sp, #20]
 80070fa:	9e07      	ldr	r6, [sp, #28]
 80070fc:	3219      	adds	r2, #25
 80070fe:	47b0      	blx	r6
 8007100:	3001      	adds	r0, #1
 8007102:	d09c      	beq.n	800703e <_printf_i+0x136>
 8007104:	3501      	adds	r5, #1
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	42ab      	cmp	r3, r5
 800710e:	dcf0      	bgt.n	80070f2 <_printf_i+0x1ea>
 8007110:	e7e9      	b.n	80070e6 <_printf_i+0x1de>
 8007112:	2500      	movs	r5, #0
 8007114:	e7f7      	b.n	8007106 <_printf_i+0x1fe>
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	08007b71 	.word	0x08007b71
 800711c:	08007b82 	.word	0x08007b82

08007120 <__sflush_r>:
 8007120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007122:	220c      	movs	r2, #12
 8007124:	5e8b      	ldrsh	r3, [r1, r2]
 8007126:	0005      	movs	r5, r0
 8007128:	000c      	movs	r4, r1
 800712a:	071a      	lsls	r2, r3, #28
 800712c:	d456      	bmi.n	80071dc <__sflush_r+0xbc>
 800712e:	684a      	ldr	r2, [r1, #4]
 8007130:	2a00      	cmp	r2, #0
 8007132:	dc02      	bgt.n	800713a <__sflush_r+0x1a>
 8007134:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007136:	2a00      	cmp	r2, #0
 8007138:	dd4e      	ble.n	80071d8 <__sflush_r+0xb8>
 800713a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800713c:	2f00      	cmp	r7, #0
 800713e:	d04b      	beq.n	80071d8 <__sflush_r+0xb8>
 8007140:	2200      	movs	r2, #0
 8007142:	2080      	movs	r0, #128	@ 0x80
 8007144:	682e      	ldr	r6, [r5, #0]
 8007146:	602a      	str	r2, [r5, #0]
 8007148:	001a      	movs	r2, r3
 800714a:	0140      	lsls	r0, r0, #5
 800714c:	6a21      	ldr	r1, [r4, #32]
 800714e:	4002      	ands	r2, r0
 8007150:	4203      	tst	r3, r0
 8007152:	d033      	beq.n	80071bc <__sflush_r+0x9c>
 8007154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	075b      	lsls	r3, r3, #29
 800715a:	d506      	bpl.n	800716a <__sflush_r+0x4a>
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <__sflush_r+0x4a>
 8007166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007168:	1ad2      	subs	r2, r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	0028      	movs	r0, r5
 800716e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007170:	6a21      	ldr	r1, [r4, #32]
 8007172:	47b8      	blx	r7
 8007174:	89a2      	ldrh	r2, [r4, #12]
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d106      	bne.n	8007188 <__sflush_r+0x68>
 800717a:	6829      	ldr	r1, [r5, #0]
 800717c:	291d      	cmp	r1, #29
 800717e:	d846      	bhi.n	800720e <__sflush_r+0xee>
 8007180:	4b29      	ldr	r3, [pc, #164]	@ (8007228 <__sflush_r+0x108>)
 8007182:	40cb      	lsrs	r3, r1
 8007184:	07db      	lsls	r3, r3, #31
 8007186:	d542      	bpl.n	800720e <__sflush_r+0xee>
 8007188:	2300      	movs	r3, #0
 800718a:	6063      	str	r3, [r4, #4]
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	04d2      	lsls	r2, r2, #19
 8007192:	d505      	bpl.n	80071a0 <__sflush_r+0x80>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <__sflush_r+0x7e>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d100      	bne.n	80071a0 <__sflush_r+0x80>
 800719e:	6560      	str	r0, [r4, #84]	@ 0x54
 80071a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071a2:	602e      	str	r6, [r5, #0]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d017      	beq.n	80071d8 <__sflush_r+0xb8>
 80071a8:	0023      	movs	r3, r4
 80071aa:	3344      	adds	r3, #68	@ 0x44
 80071ac:	4299      	cmp	r1, r3
 80071ae:	d002      	beq.n	80071b6 <__sflush_r+0x96>
 80071b0:	0028      	movs	r0, r5
 80071b2:	f7ff fcab 	bl	8006b0c <_free_r>
 80071b6:	2300      	movs	r3, #0
 80071b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ba:	e00d      	b.n	80071d8 <__sflush_r+0xb8>
 80071bc:	2301      	movs	r3, #1
 80071be:	0028      	movs	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	0002      	movs	r2, r0
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d1c6      	bne.n	8007156 <__sflush_r+0x36>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c3      	beq.n	8007156 <__sflush_r+0x36>
 80071ce:	2b1d      	cmp	r3, #29
 80071d0:	d001      	beq.n	80071d6 <__sflush_r+0xb6>
 80071d2:	2b16      	cmp	r3, #22
 80071d4:	d11a      	bne.n	800720c <__sflush_r+0xec>
 80071d6:	602e      	str	r6, [r5, #0]
 80071d8:	2000      	movs	r0, #0
 80071da:	e01e      	b.n	800721a <__sflush_r+0xfa>
 80071dc:	690e      	ldr	r6, [r1, #16]
 80071de:	2e00      	cmp	r6, #0
 80071e0:	d0fa      	beq.n	80071d8 <__sflush_r+0xb8>
 80071e2:	680f      	ldr	r7, [r1, #0]
 80071e4:	600e      	str	r6, [r1, #0]
 80071e6:	1bba      	subs	r2, r7, r6
 80071e8:	9201      	str	r2, [sp, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	079b      	lsls	r3, r3, #30
 80071ee:	d100      	bne.n	80071f2 <__sflush_r+0xd2>
 80071f0:	694a      	ldr	r2, [r1, #20]
 80071f2:	60a2      	str	r2, [r4, #8]
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	ddee      	ble.n	80071d8 <__sflush_r+0xb8>
 80071fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80071fc:	0032      	movs	r2, r6
 80071fe:	001f      	movs	r7, r3
 8007200:	0028      	movs	r0, r5
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	47b8      	blx	r7
 8007208:	2800      	cmp	r0, #0
 800720a:	dc07      	bgt.n	800721c <__sflush_r+0xfc>
 800720c:	89a2      	ldrh	r2, [r4, #12]
 800720e:	2340      	movs	r3, #64	@ 0x40
 8007210:	2001      	movs	r0, #1
 8007212:	4313      	orrs	r3, r2
 8007214:	b21b      	sxth	r3, r3
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	4240      	negs	r0, r0
 800721a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	1836      	adds	r6, r6, r0
 8007220:	1a1b      	subs	r3, r3, r0
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	e7e6      	b.n	80071f4 <__sflush_r+0xd4>
 8007226:	46c0      	nop			@ (mov r8, r8)
 8007228:	20400001 	.word	0x20400001

0800722c <_fflush_r>:
 800722c:	690b      	ldr	r3, [r1, #16]
 800722e:	b570      	push	{r4, r5, r6, lr}
 8007230:	0005      	movs	r5, r0
 8007232:	000c      	movs	r4, r1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <_fflush_r+0x12>
 8007238:	2500      	movs	r5, #0
 800723a:	0028      	movs	r0, r5
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	2800      	cmp	r0, #0
 8007240:	d004      	beq.n	800724c <_fflush_r+0x20>
 8007242:	6a03      	ldr	r3, [r0, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <_fflush_r+0x20>
 8007248:	f7ff fa06 	bl	8006658 <__sinit>
 800724c:	220c      	movs	r2, #12
 800724e:	5ea3      	ldrsh	r3, [r4, r2]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0f1      	beq.n	8007238 <_fflush_r+0xc>
 8007254:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007256:	07d2      	lsls	r2, r2, #31
 8007258:	d404      	bmi.n	8007264 <_fflush_r+0x38>
 800725a:	059b      	lsls	r3, r3, #22
 800725c:	d402      	bmi.n	8007264 <_fflush_r+0x38>
 800725e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007260:	f7ff fc41 	bl	8006ae6 <__retarget_lock_acquire_recursive>
 8007264:	0028      	movs	r0, r5
 8007266:	0021      	movs	r1, r4
 8007268:	f7ff ff5a 	bl	8007120 <__sflush_r>
 800726c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800726e:	0005      	movs	r5, r0
 8007270:	07db      	lsls	r3, r3, #31
 8007272:	d4e2      	bmi.n	800723a <_fflush_r+0xe>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	059b      	lsls	r3, r3, #22
 8007278:	d4df      	bmi.n	800723a <_fflush_r+0xe>
 800727a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727c:	f7ff fc34 	bl	8006ae8 <__retarget_lock_release_recursive>
 8007280:	e7db      	b.n	800723a <_fflush_r+0xe>
	...

08007284 <__swhatbuf_r>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	000e      	movs	r6, r1
 8007288:	001d      	movs	r5, r3
 800728a:	230e      	movs	r3, #14
 800728c:	5ec9      	ldrsh	r1, [r1, r3]
 800728e:	0014      	movs	r4, r2
 8007290:	b096      	sub	sp, #88	@ 0x58
 8007292:	2900      	cmp	r1, #0
 8007294:	da0c      	bge.n	80072b0 <__swhatbuf_r+0x2c>
 8007296:	89b2      	ldrh	r2, [r6, #12]
 8007298:	2380      	movs	r3, #128	@ 0x80
 800729a:	0011      	movs	r1, r2
 800729c:	4019      	ands	r1, r3
 800729e:	421a      	tst	r2, r3
 80072a0:	d114      	bne.n	80072cc <__swhatbuf_r+0x48>
 80072a2:	2380      	movs	r3, #128	@ 0x80
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	2000      	movs	r0, #0
 80072a8:	6029      	str	r1, [r5, #0]
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	b016      	add	sp, #88	@ 0x58
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	466a      	mov	r2, sp
 80072b2:	f000 f853 	bl	800735c <_fstat_r>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	dbed      	blt.n	8007296 <__swhatbuf_r+0x12>
 80072ba:	23f0      	movs	r3, #240	@ 0xf0
 80072bc:	9901      	ldr	r1, [sp, #4]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	4019      	ands	r1, r3
 80072c2:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <__swhatbuf_r+0x50>)
 80072c4:	18c9      	adds	r1, r1, r3
 80072c6:	424b      	negs	r3, r1
 80072c8:	4159      	adcs	r1, r3
 80072ca:	e7ea      	b.n	80072a2 <__swhatbuf_r+0x1e>
 80072cc:	2100      	movs	r1, #0
 80072ce:	2340      	movs	r3, #64	@ 0x40
 80072d0:	e7e9      	b.n	80072a6 <__swhatbuf_r+0x22>
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	ffffe000 	.word	0xffffe000

080072d8 <__smakebuf_r>:
 80072d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072da:	2602      	movs	r6, #2
 80072dc:	898b      	ldrh	r3, [r1, #12]
 80072de:	0005      	movs	r5, r0
 80072e0:	000c      	movs	r4, r1
 80072e2:	b085      	sub	sp, #20
 80072e4:	4233      	tst	r3, r6
 80072e6:	d007      	beq.n	80072f8 <__smakebuf_r+0x20>
 80072e8:	0023      	movs	r3, r4
 80072ea:	3347      	adds	r3, #71	@ 0x47
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	2301      	movs	r3, #1
 80072f2:	6163      	str	r3, [r4, #20]
 80072f4:	b005      	add	sp, #20
 80072f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	aa02      	add	r2, sp, #8
 80072fc:	f7ff ffc2 	bl	8007284 <__swhatbuf_r>
 8007300:	9f02      	ldr	r7, [sp, #8]
 8007302:	9001      	str	r0, [sp, #4]
 8007304:	0039      	movs	r1, r7
 8007306:	0028      	movs	r0, r5
 8007308:	f7ff f886 	bl	8006418 <_malloc_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	d108      	bne.n	8007322 <__smakebuf_r+0x4a>
 8007310:	220c      	movs	r2, #12
 8007312:	5ea3      	ldrsh	r3, [r4, r2]
 8007314:	059a      	lsls	r2, r3, #22
 8007316:	d4ed      	bmi.n	80072f4 <__smakebuf_r+0x1c>
 8007318:	2203      	movs	r2, #3
 800731a:	4393      	bics	r3, r2
 800731c:	431e      	orrs	r6, r3
 800731e:	81a6      	strh	r6, [r4, #12]
 8007320:	e7e2      	b.n	80072e8 <__smakebuf_r+0x10>
 8007322:	2380      	movs	r3, #128	@ 0x80
 8007324:	89a2      	ldrh	r2, [r4, #12]
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	4313      	orrs	r3, r2
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	6120      	str	r0, [r4, #16]
 8007330:	6167      	str	r7, [r4, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00c      	beq.n	8007350 <__smakebuf_r+0x78>
 8007336:	0028      	movs	r0, r5
 8007338:	230e      	movs	r3, #14
 800733a:	5ee1      	ldrsh	r1, [r4, r3]
 800733c:	f000 f820 	bl	8007380 <_isatty_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	d005      	beq.n	8007350 <__smakebuf_r+0x78>
 8007344:	2303      	movs	r3, #3
 8007346:	89a2      	ldrh	r2, [r4, #12]
 8007348:	439a      	bics	r2, r3
 800734a:	3b02      	subs	r3, #2
 800734c:	4313      	orrs	r3, r2
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	9a01      	ldr	r2, [sp, #4]
 8007354:	4313      	orrs	r3, r2
 8007356:	81a3      	strh	r3, [r4, #12]
 8007358:	e7cc      	b.n	80072f4 <__smakebuf_r+0x1c>
	...

0800735c <_fstat_r>:
 800735c:	2300      	movs	r3, #0
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	4d06      	ldr	r5, [pc, #24]	@ (800737c <_fstat_r+0x20>)
 8007362:	0004      	movs	r4, r0
 8007364:	0008      	movs	r0, r1
 8007366:	0011      	movs	r1, r2
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	f7f9 fc06 	bl	8000b7a <_fstat>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d103      	bne.n	800737a <_fstat_r+0x1e>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d000      	beq.n	800737a <_fstat_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	20000420 	.word	0x20000420

08007380 <_isatty_r>:
 8007380:	2300      	movs	r3, #0
 8007382:	b570      	push	{r4, r5, r6, lr}
 8007384:	4d06      	ldr	r5, [pc, #24]	@ (80073a0 <_isatty_r+0x20>)
 8007386:	0004      	movs	r4, r0
 8007388:	0008      	movs	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7f9 fc03 	bl	8000b96 <_isatty>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d103      	bne.n	800739c <_isatty_r+0x1c>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d000      	beq.n	800739c <_isatty_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	20000420 	.word	0x20000420

080073a4 <memchr>:
 80073a4:	b2c9      	uxtb	r1, r1
 80073a6:	1882      	adds	r2, r0, r2
 80073a8:	4290      	cmp	r0, r2
 80073aa:	d101      	bne.n	80073b0 <memchr+0xc>
 80073ac:	2000      	movs	r0, #0
 80073ae:	4770      	bx	lr
 80073b0:	7803      	ldrb	r3, [r0, #0]
 80073b2:	428b      	cmp	r3, r1
 80073b4:	d0fb      	beq.n	80073ae <memchr+0xa>
 80073b6:	3001      	adds	r0, #1
 80073b8:	e7f6      	b.n	80073a8 <memchr+0x4>
	...

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
