
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b04  08005b04  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b0c  08005b0c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b0c  08005b0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005b14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000060  08005b74  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000039c  08005b74  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011719  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f44  00000000  00000000  000187a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a23  00000000  00000000  0001d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014847  00000000  00000000  00033bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865f3  00000000  00000000  00048435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cea28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  000cea6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d2304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a20 	.word	0x08005a20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005a20 	.word	0x08005a20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f000 ff02 	bl	8001288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 ff14 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f005 f9ed 	bl	8005888 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_GPIO_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fabf 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2220      	movs	r2, #32
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 f931 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2220      	movs	r2, #32
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <MX_GPIO_Init+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 f91e 	bl	8001784 <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	@ 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fa91 	bl	8001abc <HAL_I2C_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 fb07 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_I2C1_Init+0x74>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fb2e 	bl	8001c08 <HAL_I2CEx_ConfigAnalogFilter>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fafe 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <MX_I2C1_Init+0x74>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fb71 	bl	8001ca0 <HAL_I2CEx_ConfigDigitalFilter>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 faf5 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	40005400 	.word	0x40005400
 80005d4:	00000202 	.word	0x00000202

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f005 f94c 	bl	8005888 <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	@ 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 f8a3 	bl	8001784 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	@ 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	50000400 	.word	0x50000400

08000660 <HARDWARE_PWR_SleepOptimisation>:
;	Description:	Set Unused Pins for Low Power Optimization
;	Inputs: 	 	Nothing
;	Returns:		Nothing
*********************************************************************************************/
void HARDWARE_PWR_SleepOptimisation( void )
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f005 f90a 	bl	8005888 <memset>
	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 8000676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 800067a:	2102      	movs	r1, #2
 800067c:	430a      	orrs	r2, r1
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 8000682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000684:	2202      	movs	r2, #2
 8000686:	4013      	ands	r3, r2
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_5  ;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2223      	movs	r2, #35	@ 0x23
 8000690:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f001 f86a 	bl	8001784 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 , GPIO_PIN_RESET);
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	2123      	movs	r1, #35	@ 0x23
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f9e2 	bl	8001a80 <HAL_GPIO_WritePin>


	/* Set Pins as Analog Inputs */
	GPIO_InitStruct.Pin 			= GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10  | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <HARDWARE_PWR_SleepOptimisation+0xdc>)
 80006c0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2203      	movs	r2, #3
 80006c6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	1d3a      	adds	r2, r7, #4
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f851 	bl	8001784 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= GPIO_PIN_2 |GPIO_PIN_3 | GPIO_PIN_4  | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12  | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <HARDWARE_PWR_SleepOptimisation+0xe0>)
 80006e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2203      	movs	r2, #3
 80006ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f001 f83f 	bl	8001784 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= GPIO_PIN_0 | GPIO_PIN_1 |  GPIO_PIN_2 |GPIO_PIN_3 | GPIO_PIN_4  | GPIO_PIN_5  |  GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12  | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HARDWARE_PWR_SleepOptimisation+0xe4>)
 800070a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2203      	movs	r2, #3
 8000710:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HARDWARE_PWR_SleepOptimisation+0xe8>)
 8000722:	0019      	movs	r1, r3
 8000724:	0010      	movs	r0, r2
 8000726:	f001 f82d 	bl	8001784 <HAL_GPIO_Init>

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b006      	add	sp, #24
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	40021000 	.word	0x40021000
 8000738:	50000400 	.word	0x50000400
 800073c:	00009fff 	.word	0x00009fff
 8000740:	0000ffdc 	.word	0x0000ffdc
 8000744:	0000ffff 	.word	0x0000ffff
 8000748:	50000800 	.word	0x50000800

0800074c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* Add RTC wake-up interrupt handler */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Clear wake-up flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	22ff      	movs	r2, #255	@ 0xff
 800075c:	401a      	ands	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4908      	ldr	r1, [pc, #32]	@ (8000784 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 8000764:	430a      	orrs	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
  device_state = DEVICE_COLLECT_DATA;
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 800076a:	2202      	movs	r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	0018      	movs	r0, r3
 8000778:	f001 f982 	bl	8001a80 <HAL_GPIO_WritePin>
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}
 8000784:	fffffb7f 	.word	0xfffffb7f
 8000788:	20000000 	.word	0x20000000

0800078c <enter_low_power_mode>:


/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enter_low_power_mode(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	HARDWARE_PWR_SleepOptimisation();
 8000790:	f7ff ff66 	bl	8000660 <HARDWARE_PWR_SleepOptimisation>

	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <enter_low_power_mode+0x58>)
 8000796:	0018      	movs	r0, r3
 8000798:	f002 fe0a 	bl	80033b0 <HAL_RTCEx_DeactivateWakeUpTimer>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <enter_low_power_mode+0x18>
	    {
	        Error_Handler();
 80007a0:	f000 fa06 	bl	8000bb0 <Error_Handler>
	    }

	    /* Configure RTC wake‑up timer for 60 seconds */
	    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <enter_low_power_mode+0x58>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	213b      	movs	r1, #59	@ 0x3b
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fd28 	bl	8003200 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <enter_low_power_mode+0x2c>
	    {
	        Error_Handler();
 80007b4:	f000 f9fc 	bl	8000bb0 <Error_Handler>
	    }

	/* Configure RTC wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <enter_low_power_mode+0x58>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	213b      	movs	r1, #59	@ 0x3b
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fd1e 	bl	8003200 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <enter_low_power_mode+0x40>
	{
	Error_Handler();
 80007c8:	f000 f9f2 	bl	8000bb0 <Error_Handler>
	}

	// Enter Stop Mode with low power regulator
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80007cc:	2101      	movs	r1, #1
 80007ce:	2001      	movs	r0, #1
 80007d0:	f001 fab2 	bl	8001d38 <HAL_PWR_EnterSTOPMode>

	// When we wake up, execution continues here
	SystemClock_Config();
 80007d4:	f000 f93c 	bl	8000a50 <SystemClock_Config>
	exit_low_power_mode();
 80007d8:	f000 f806 	bl	80007e8 <exit_low_power_mode>
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000110 	.word	0x20000110

080007e8 <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <exit_low_power_mode+0x9c>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <exit_low_power_mode+0x9c>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <exit_low_power_mode+0x9c>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <exit_low_power_mode+0x9c>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000824:	2104      	movs	r1, #4
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <exit_low_power_mode+0x9c>)
 800082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082e:	2204      	movs	r2, #4
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <exit_low_power_mode+0x9c>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	0389      	lsls	r1, r1, #14
 8000840:	430a      	orrs	r2, r1
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <exit_low_power_mode+0x9c>)
 800084a:	2180      	movs	r1, #128	@ 0x80
 800084c:	02c9      	lsls	r1, r1, #11
 800084e:	430a      	orrs	r2, r1
 8000850:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	631a      	str	r2, [r3, #48]	@ 0x30
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <exit_low_power_mode+0x9c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs (this will restore PB5 to its normal configuration)
    MX_GPIO_Init();
 800086a:	f7ff fe15 	bl	8000498 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 800086e:	f000 facd 	bl	8000e0c <MX_LPUART1_UART_Init>
    MX_DMA_Init();
 8000872:	f7ff fdf3 	bl	800045c <MX_DMA_Init>
    device_state = DEVICE_COLLECT_DATA;
 8000876:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <exit_low_power_mode+0xa0>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	20000000 	.word	0x20000000

0800088c <cb_WAKE>:


void cb_WAKE(const char* str)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __NOP();
 8000894:	46c0      	nop			@ (mov r8, r8)
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}

0800089e <cb_OK>:
void cb_OK(const char* str)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  __NOP();
 80008a6:	46c0      	nop			@ (mov r8, r8)
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <cb_JOIN>:
void cb_JOIN(const char* str)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	switch (str[7]) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3307      	adds	r3, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b46      	cmp	r3, #70	@ 0x46
 80008c0:	d008      	beq.n	80008d4 <cb_JOIN+0x24>
 80008c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80008c4:	d10a      	bne.n	80008dc <cb_JOIN+0x2c>
		case 'O':
			joined = true;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <cb_JOIN+0x40>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
			device_state = DEVICE_COLLECT_DATA;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <cb_JOIN+0x44>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	701a      	strb	r2, [r3, #0]
			break;
 80008d2:	e004      	b.n	80008de <cb_JOIN+0x2e>
		case 'F':
			joined = false;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <cb_JOIN+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
			break;
 80008da:	e000      	b.n	80008de <cb_JOIN+0x2e>
		default:
			__NOP();
 80008dc:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_Delay(500);
 80008de:	23fa      	movs	r3, #250	@ 0xfa
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fc00 	bl	80010e8 <HAL_Delay>
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000010c 	.word	0x2000010c
 80008f4:	20000000 	.word	0x20000000

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	@ 0x24
 80008fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fb83 	bl	8001008 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f8a5 	bl	8000a50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f7ff fdc7 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f7ff fda7 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 800090e:	f7ff fe23 	bl	8000558 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000912:	f000 fa7b 	bl	8000e0c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000916:	f000 f951 	bl	8000bbc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 800091a:	4b41      	ldr	r3, [pc, #260]	@ (8000a20 <main+0x128>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	4940      	ldr	r1, [pc, #256]	@ (8000a24 <main+0x12c>)
 8000922:	4841      	ldr	r0, [pc, #260]	@ (8000a28 <main+0x130>)
 8000924:	f004 fc7c 	bl	8005220 <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000928:	4a40      	ldr	r2, [pc, #256]	@ (8000a2c <main+0x134>)
 800092a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <main+0x130>)
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f004 fd2d 	bl	800538e <ATC_SetEvents>
  HAL_Delay(10000);
 8000934:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <main+0x138>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fbd6 	bl	80010e8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int resp = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  char* ATSEND_Result = NULL;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  uint32_t last_command_time = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]

  while(1)
  {
      ATC_Loop(&lora);
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <main+0x130>)
 800094a:	0018      	movs	r0, r3
 800094c:	f004 fd57 	bl	80053fe <ATC_Loop>
      
      switch (device_state)
 8000950:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <main+0x13c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b03      	cmp	r3, #3
 8000958:	d005      	beq.n	8000966 <main+0x6e>
 800095a:	dcf5      	bgt.n	8000948 <main+0x50>
 800095c:	2b01      	cmp	r3, #1
 800095e:	d036      	beq.n	80009ce <main+0xd6>
 8000960:	2b02      	cmp	r3, #2
 8000962:	d037      	beq.n	80009d4 <main+0xdc>
 8000964:	e05a      	b.n	8000a1c <main+0x124>
      {
      case LORAWAN_JOIN:
          if (HAL_GetTick() - last_command_time > 10000 && !joined)
 8000966:	f000 fbb5 	bl	80010d4 <HAL_GetTick>
 800096a:	0002      	movs	r2, r0
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <main+0x138>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d951      	bls.n	8000a1a <main+0x122>
 8000976:	4b30      	ldr	r3, [pc, #192]	@ (8000a38 <main+0x140>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2201      	movs	r2, #1
 800097c:	4053      	eors	r3, r2
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d04a      	beq.n	8000a1a <main+0x122>
          {
        	  resp = ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000984:	1d3c      	adds	r4, r7, #4
 8000986:	23fa      	movs	r3, #250	@ 0xfa
 8000988:	009a      	lsls	r2, r3, #2
 800098a:	492c      	ldr	r1, [pc, #176]	@ (8000a3c <main+0x144>)
 800098c:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <main+0x130>)
 800098e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <main+0x148>)
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	2301      	movs	r3, #1
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <main+0x14c>)
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	0023      	movs	r3, r4
 800099c:	f004 fd3f 	bl	800541e <ATC_SendReceive>
 80009a0:	0003      	movs	r3, r0
 80009a2:	60bb      	str	r3, [r7, #8]
              resp = ATC_SendReceive(&lora, "AT+JOIN\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009a4:	1d3c      	adds	r4, r7, #4
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	009a      	lsls	r2, r3, #2
 80009aa:	4927      	ldr	r1, [pc, #156]	@ (8000a48 <main+0x150>)
 80009ac:	481e      	ldr	r0, [pc, #120]	@ (8000a28 <main+0x130>)
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <main+0x148>)
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <main+0x14c>)
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	0023      	movs	r3, r4
 80009bc:	f004 fd2f 	bl	800541e <ATC_SendReceive>
 80009c0:	0003      	movs	r3, r0
 80009c2:	60bb      	str	r3, [r7, #8]
              last_command_time = HAL_GetTick();
 80009c4:	f000 fb86 	bl	80010d4 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	60fb      	str	r3, [r7, #12]
          }
	  break;
 80009cc:	e025      	b.n	8000a1a <main+0x122>
	  case DEVICE_SLEEP:
		  enter_low_power_mode();
 80009ce:	f7ff fedd 	bl	800078c <enter_low_power_mode>
	  break;
 80009d2:	e023      	b.n	8000a1c <main+0x124>
	  case DEVICE_COLLECT_DATA:
		ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009d4:	1d3c      	adds	r4, r7, #4
 80009d6:	23fa      	movs	r3, #250	@ 0xfa
 80009d8:	009a      	lsls	r2, r3, #2
 80009da:	4918      	ldr	r1, [pc, #96]	@ (8000a3c <main+0x144>)
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <main+0x130>)
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <main+0x148>)
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <main+0x14c>)
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	0023      	movs	r3, r4
 80009ec:	f004 fd17 	bl	800541e <ATC_SendReceive>
		HAL_Delay(10);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 fb79 	bl	80010e8 <HAL_Delay>
		ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009f6:	1d3c      	adds	r4, r7, #4
 80009f8:	23fa      	movs	r3, #250	@ 0xfa
 80009fa:	009a      	lsls	r2, r3, #2
 80009fc:	4913      	ldr	r1, [pc, #76]	@ (8000a4c <main+0x154>)
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <main+0x130>)
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0x148>)
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <main+0x14c>)
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	0023      	movs	r3, r4
 8000a0e:	f004 fd06 	bl	800541e <ATC_SendReceive>
		device_state = DEVICE_SLEEP;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <main+0x13c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
	  break;
 8000a18:	e000      	b.n	8000a1c <main+0x124>
	  break;
 8000a1a:	46c0      	nop			@ (mov r8, r8)
      ATC_Loop(&lora);
 8000a1c:	e794      	b.n	8000948 <main+0x50>
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	08005a4c 	.word	0x08005a4c
 8000a24:	20000138 	.word	0x20000138
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	08005a78 	.word	0x08005a78
 8000a30:	00002710 	.word	0x00002710
 8000a34:	20000000 	.word	0x20000000
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	08005a54 	.word	0x08005a54
 8000a40:	08005a40 	.word	0x08005a40
 8000a44:	00000bb8 	.word	0x00000bb8
 8000a48:	08005a5c 	.word	0x08005a5c
 8000a4c:	08005a68 	.word	0x08005a68

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b09f      	sub	sp, #124	@ 0x7c
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	2440      	movs	r4, #64	@ 0x40
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2338      	movs	r3, #56	@ 0x38
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f004 ff11 	bl	8005888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a66:	232c      	movs	r3, #44	@ 0x2c
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f004 ff09 	bl	8005888 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2328      	movs	r3, #40	@ 0x28
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f004 ff02 	bl	8005888 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <SystemClock_Config+0xf8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a30      	ldr	r2, [pc, #192]	@ (8000b4c <SystemClock_Config+0xfc>)
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b48 <SystemClock_Config+0xf8>)
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	0109      	lsls	r1, r1, #4
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
  
  // Change to Scale 3 for lowest power:
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <SystemClock_Config+0xf8>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <SystemClock_Config+0xf8>)
 8000a9c:	21c0      	movs	r1, #192	@ 0xc0
 8000a9e:	0149      	lsls	r1, r1, #5
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]

  // Also change MSI range to match Scale 3 requirements
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0; // 65.536 kHz (matches your low power config)
 8000aa4:	0021      	movs	r1, r4
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2218      	movs	r2, #24
 8000ab0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2201      	movs	r2, #1
 8000abc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	0212      	lsls	r2, r2, #8
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 f98b 	bl	8001df0 <HAL_RCC_OscConfig>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ade:	f000 f867 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	212c      	movs	r1, #44	@ 0x2c
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2100      	movs	r1, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fd46 	bl	8002598 <HAL_RCC_ClockConfig>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b10:	f000 f84e 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	222c      	movs	r2, #44	@ 0x2c
 8000b18:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2280      	movs	r2, #128	@ 0x80
 8000b2a:	0292      	lsls	r2, r2, #10
 8000b2c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 ff35 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b3a:	f000 f839 	bl	8000bb0 <Error_Handler>
  }
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b01f      	add	sp, #124	@ 0x7c
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40007000 	.word	0x40007000
 8000b4c:	ffffe7ff 	.word	0xffffe7ff

08000b50 <HAL_UARTEx_RxEventCallback>:
  __NOP();

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	000a      	movs	r2, r1
 8000b5a:	1cbb      	adds	r3, r7, #2
 8000b5c:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <HAL_UARTEx_RxEventCallback+0x30>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d106      	bne.n	8000b76 <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 8000b68:	1cbb      	adds	r3, r7, #2
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <HAL_UARTEx_RxEventCallback+0x34>)
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f004 fd4e 	bl	8005612 <ATC_IdleLineCallback>
  }
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40004800 	.word	0x40004800
 8000b84:	200000d0 	.word	0x200000d0

08000b88 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <HAL_UART_ErrorCallback+0x24>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d104      	bne.n	8000ba4 <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	621a      	str	r2, [r3, #32]
  }
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40004800 	.word	0x40004800

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sTime = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f004 fe5c 	bl	8005888 <memset>
	RTC_DateTypeDef sDate = {0};
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]

	/* Initialize RTC */
	hrtc.Instance = RTC;
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bd8:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <MX_RTC_Init+0xe4>)
 8000bda:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127; /* LSI ~32 kHz, 128 gives ~250 Hz */
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000be4:	227f      	movs	r2, #127	@ 0x7f
 8000be6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 249;  /* 250 Hz / 250 = 1 Hz */
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bea:	22f9      	movs	r2, #249	@ 0xf9
 8000bec:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]

	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c00:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 f86a 	bl	8002cdc <HAL_RTC_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_RTC_Init+0x54>
	{
	Error_Handler();
 8000c0c:	f7ff ffd0 	bl	8000bb0 <Error_Handler>
	}

	/* Set initial time and date (optional, for completeness) */
	sTime.Hours = 0;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c2e:	1d39      	adds	r1, r7, #4
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 f8ed 	bl	8002e14 <HAL_RTC_SetTime>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x86>
	{
	Error_Handler();
 8000c3e:	f7ff ffb7 	bl	8000bb0 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c42:	003b      	movs	r3, r7
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000c48:	003b      	movs	r3, r7
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	705a      	strb	r2, [r3, #1]
	sDate.Date = 1;
 8000c4e:	003b      	movs	r3, r7
 8000c50:	2201      	movs	r2, #1
 8000c52:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0;
 8000c54:	003b      	movs	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 f981 	bl	8002f68 <HAL_RTC_SetDate>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_RTC_Init+0xb2>
	{
	Error_Handler();
 8000c6a:	f7ff ffa1 	bl	8000bb0 <Error_Handler>
	}

	/* Enable wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_RTC_Init+0xe0>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	213b      	movs	r1, #59	@ 0x3b
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fac3 	bl	8003200 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_RTC_Init+0xc6>
	{
	Error_Handler();
 8000c7e:	f7ff ff97 	bl	8000bb0 <Error_Handler>
	}

	/* Enable RTC interrupt in NVIC */
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2002      	movs	r0, #2
 8000c88:	f000 fafe 	bl	8001288 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f000 fb10 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b006      	add	sp, #24
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000110 	.word	0x20000110
 8000ca0:	40002800 	.word	0x40002800

08000ca4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_RTC_MspInit+0x38>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_RTC_MspInit+0x3c>)
 8000cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_RTC_MspInit+0x3c>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	02c9      	lsls	r1, r1, #11
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f000 fadd 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f000 faef 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40002800 	.word	0x40002800
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_MspInit+0x24>)
 8000cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_MspInit+0x24>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <HAL_MspInit+0x24>)
 8000cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_MspInit+0x24>)
 8000cfa:	2180      	movs	r1, #128	@ 0x80
 8000cfc:	0549      	lsls	r1, r1, #21
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9bc 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <RTC_IRQHandler+0x14>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f002 fb96 	bl	8003478 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	20000110 	.word	0x20000110

08000d58 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fc29 	bl	80015b6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fc25 	bl	80015b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	20000208 	.word	0x20000208
 8000d78:	200001c0 	.word	0x200001c0

08000d7c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <RNG_LPUART1_IRQHandler+0x14>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f002 fda0 	bl	80038c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000138 	.word	0x20000138

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	18d3      	adds	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f004 fda4 	bl	8005910 <__errno>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	18d2      	adds	r2, r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b006      	add	sp, #24
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20005000 	.word	0x20005000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000134 	.word	0x20000134
 8000dfc:	200003a0 	.word	0x200003a0

08000e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e12:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <MX_LPUART1_UART_Init+0x58>)
 8000e14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e18:	22e1      	movs	r2, #225	@ 0xe1
 8000e1a:	0252      	lsls	r2, r2, #9
 8000e1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <MX_LPUART1_UART_Init+0x54>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fb44 	bl	80034d8 <HAL_UART_Init>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e54:	f7ff feac 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	20000138 	.word	0x20000138
 8000e64:	40004800 	.word	0x40004800

08000e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	240c      	movs	r4, #12
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	0018      	movs	r0, r3
 8000e76:	2314      	movs	r3, #20
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f004 fd04 	bl	8005888 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a45      	ldr	r2, [pc, #276]	@ (8000f9c <HAL_UART_MspInit+0x134>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d000      	beq.n	8000e8c <HAL_UART_MspInit+0x24>
 8000e8a:	e083      	b.n	8000f94 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e8c:	4b44      	ldr	r3, [pc, #272]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e90:	4b43      	ldr	r3, [pc, #268]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	02c9      	lsls	r1, r1, #11
 8000e96:	430a      	orrs	r2, r1
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b41      	ldr	r3, [pc, #260]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e9e:	4b40      	ldr	r3, [pc, #256]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa0 <HAL_UART_MspInit+0x138>)
 8000ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2206      	movs	r2, #6
 8000ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fc52 	bl	8001784 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000ee2:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <HAL_UART_MspInit+0x140>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000ee8:	2205      	movs	r2, #5
 8000eea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efe:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f04:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f16:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 f9e7 	bl	80012ec <HAL_DMA_Init>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000f22:	f7ff fe45 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_UART_MspInit+0x13c>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f34:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb0 <HAL_UART_MspInit+0x148>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f40:	2210      	movs	r2, #16
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 f9be 	bl	80012ec <HAL_DMA_Init>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f74:	f7ff fe1c 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_UART_MspInit+0x144>)
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	201d      	movs	r0, #29
 8000f8a:	f000 f97d 	bl	8001288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000f8e:	201d      	movs	r0, #29
 8000f90:	f000 f98f 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b009      	add	sp, #36	@ 0x24
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	200001c0 	.word	0x200001c0
 8000fa8:	40020030 	.word	0x40020030
 8000fac:	20000208 	.word	0x20000208
 8000fb0:	4002001c 	.word	0x4002001c

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff ff22 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f004 fc9b 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fc87 	bl	80008f8 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
   ldr   r0, =_estack
 8000fec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ff8:	08005b14 	.word	0x08005b14
  ldr r2, =_sbss
 8000ffc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001000:	2000039c 	.word	0x2000039c

08001004 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_COMP_IRQHandler>
	...

08001008 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_Init+0x3c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Init+0x3c>)
 800101a:	2140      	movs	r1, #64	@ 0x40
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f811 	bl	8001048 <HAL_InitTick>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d003      	beq.n	8001032 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e001      	b.n	8001036 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001032:	f7ff fe57 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_InitTick+0x5c>)
 8001052:	681c      	ldr	r4, [r3, #0]
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	0019      	movs	r1, r3
 800105a:	23fa      	movs	r3, #250	@ 0xfa
 800105c:	0098      	lsls	r0, r3, #2
 800105e:	f7ff f85b 	bl	8000118 <__udivsi3>
 8001062:	0003      	movs	r3, r0
 8001064:	0019      	movs	r1, r3
 8001066:	0020      	movs	r0, r4
 8001068:	f7ff f856 	bl	8000118 <__udivsi3>
 800106c:	0003      	movs	r3, r0
 800106e:	0018      	movs	r0, r3
 8001070:	f000 f92f 	bl	80012d2 <HAL_SYSTICK_Config>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e00f      	b.n	800109c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d80b      	bhi.n	800109a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2301      	movs	r3, #1
 8001086:	425b      	negs	r3, r3
 8001088:	2200      	movs	r2, #0
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f8fc 	bl	8001288 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_InitTick+0x64>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b003      	add	sp, #12
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	20000004 	.word	0x20000004
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	001a      	movs	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_IncTick+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	18d2      	adds	r2, r2, r3
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_IncTick+0x20>)
 80010c2:	601a      	str	r2, [r3, #0]
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	20000250 	.word	0x20000250

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	@ (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	20000250 	.word	0x20000250

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff fff0 	bl	80010d4 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	001a      	movs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	189b      	adds	r3, r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	f7ff ffe0 	bl	80010d4 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	2000000c 	.word	0x2000000c

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b7f      	cmp	r3, #127	@ 0x7f
 8001142:	d809      	bhi.n	8001158 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	001a      	movs	r2, r3
 800114a:	231f      	movs	r3, #31
 800114c:	401a      	ands	r2, r3
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <__NVIC_EnableIRQ+0x30>)
 8001150:	2101      	movs	r1, #1
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
  }
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	0002      	movs	r2, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b7f      	cmp	r3, #127	@ 0x7f
 8001178:	d828      	bhi.n	80011cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117a:	4a2f      	ldr	r2, [pc, #188]	@ (8001238 <__NVIC_SetPriority+0xd4>)
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	33c0      	adds	r3, #192	@ 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	589b      	ldr	r3, [r3, r2]
 800118a:	1dfa      	adds	r2, r7, #7
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	0011      	movs	r1, r2
 8001190:	2203      	movs	r2, #3
 8001192:	400a      	ands	r2, r1
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	21ff      	movs	r1, #255	@ 0xff
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	019b      	lsls	r3, r3, #6
 80011a6:	22ff      	movs	r2, #255	@ 0xff
 80011a8:	401a      	ands	r2, r3
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	2303      	movs	r3, #3
 80011b2:	4003      	ands	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b8:	481f      	ldr	r0, [pc, #124]	@ (8001238 <__NVIC_SetPriority+0xd4>)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	430a      	orrs	r2, r1
 80011c4:	33c0      	adds	r3, #192	@ 0xc0
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ca:	e031      	b.n	8001230 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011cc:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <__NVIC_SetPriority+0xd8>)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0019      	movs	r1, r3
 80011d4:	230f      	movs	r3, #15
 80011d6:	400b      	ands	r3, r1
 80011d8:	3b08      	subs	r3, #8
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3306      	adds	r3, #6
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	18d3      	adds	r3, r2, r3
 80011e2:	3304      	adds	r3, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	0011      	movs	r1, r2
 80011ec:	2203      	movs	r2, #3
 80011ee:	400a      	ands	r2, r1
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	21ff      	movs	r1, #255	@ 0xff
 80011f4:	4091      	lsls	r1, r2
 80011f6:	000a      	movs	r2, r1
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	401a      	ands	r2, r3
 80011fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	019b      	lsls	r3, r3, #6
 8001202:	22ff      	movs	r2, #255	@ 0xff
 8001204:	401a      	ands	r2, r3
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	2303      	movs	r3, #3
 800120e:	4003      	ands	r3, r0
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001214:	4809      	ldr	r0, [pc, #36]	@ (800123c <__NVIC_SetPriority+0xd8>)
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	001c      	movs	r4, r3
 800121c:	230f      	movs	r3, #15
 800121e:	4023      	ands	r3, r4
 8001220:	3b08      	subs	r3, #8
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	430a      	orrs	r2, r1
 8001226:	3306      	adds	r3, #6
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	18c3      	adds	r3, r0, r3
 800122c:	3304      	adds	r3, #4
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b003      	add	sp, #12
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	045b      	lsls	r3, r3, #17
 8001250:	429a      	cmp	r2, r3
 8001252:	d301      	bcc.n	8001258 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001254:	2301      	movs	r3, #1
 8001256:	e010      	b.n	800127a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <SysTick_Config+0x44>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	3a01      	subs	r2, #1
 800125e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001260:	2301      	movs	r3, #1
 8001262:	425b      	negs	r3, r3
 8001264:	2103      	movs	r1, #3
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff ff7c 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x44>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x44>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	210f      	movs	r1, #15
 8001294:	187b      	adds	r3, r7, r1
 8001296:	1c02      	adds	r2, r0, #0
 8001298:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	187b      	adds	r3, r7, r1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	0002      	movs	r2, r0
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff33 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ffaf 	bl	8001240 <SysTick_Config>
 80012e2:	0003      	movs	r3, r0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e061      	b.n	80013c2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a32      	ldr	r2, [pc, #200]	@ (80013cc <HAL_DMA_Init+0xe0>)
 8001304:	4694      	mov	ip, r2
 8001306:	4463      	add	r3, ip
 8001308:	2114      	movs	r1, #20
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe ff04 	bl	8000118 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a2d      	ldr	r2, [pc, #180]	@ (80013d0 <HAL_DMA_Init+0xe4>)
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2225      	movs	r2, #37	@ 0x25
 8001322:	2102      	movs	r1, #2
 8001324:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <HAL_DMA_Init+0xe8>)
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	01db      	lsls	r3, r3, #7
 8001374:	429a      	cmp	r2, r3
 8001376:	d018      	beq.n	80013aa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_DMA_Init+0xec>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	211c      	movs	r1, #28
 8001382:	400b      	ands	r3, r1
 8001384:	210f      	movs	r1, #15
 8001386:	4099      	lsls	r1, r3
 8001388:	000b      	movs	r3, r1
 800138a:	43d9      	mvns	r1, r3
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_DMA_Init+0xec>)
 800138e:	400a      	ands	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_DMA_Init+0xec>)
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	201c      	movs	r0, #28
 80013a0:	4003      	ands	r3, r0
 80013a2:	409a      	lsls	r2, r3
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_DMA_Init+0xec>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2225      	movs	r2, #37	@ 0x25
 80013b4:	2101      	movs	r1, #1
 80013b6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	@ 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	bffdfff8 	.word	0xbffdfff8
 80013d0:	40020000 	.word	0x40020000
 80013d4:	ffff800f 	.word	0xffff800f
 80013d8:	400200a8 	.word	0x400200a8

080013dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2317      	movs	r3, #23
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2224      	movs	r2, #36	@ 0x24
 80013f6:	5c9b      	ldrb	r3, [r3, r2]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_DMA_Start_IT+0x24>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e04f      	b.n	80014a0 <HAL_DMA_Start_IT+0xc4>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2224      	movs	r2, #36	@ 0x24
 8001404:	2101      	movs	r1, #1
 8001406:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2225      	movs	r2, #37	@ 0x25
 800140c:	5c9b      	ldrb	r3, [r3, r2]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d13a      	bne.n	800148a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2225      	movs	r2, #37	@ 0x25
 8001418:	2102      	movs	r1, #2
 800141a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	438a      	bics	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f974 	bl	8001726 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	210e      	movs	r1, #14
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e00f      	b.n	8001478 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2104      	movs	r1, #4
 8001464:	438a      	bics	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	210a      	movs	r1, #10
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e007      	b.n	800149a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2224      	movs	r2, #36	@ 0x24
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001492:	2317      	movs	r3, #23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800149a:	2317      	movs	r3, #23
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2225      	movs	r2, #37	@ 0x25
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2224      	movs	r2, #36	@ 0x24
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e024      	b.n	8001520 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	210e      	movs	r1, #14
 80014e2:	438a      	bics	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	438a      	bics	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	221c      	movs	r2, #28
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2225      	movs	r2, #37	@ 0x25
 800150e:	2101      	movs	r1, #1
 8001510:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2224      	movs	r2, #36	@ 0x24
 8001516:	2100      	movs	r1, #0
 8001518:	5499      	strb	r1, [r3, r2]

    return status;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	210f      	movs	r1, #15
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2225      	movs	r2, #37	@ 0x25
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d006      	beq.n	8001552 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2204      	movs	r2, #4
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e02a      	b.n	80015a8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	210e      	movs	r1, #14
 800155e:	438a      	bics	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	221c      	movs	r2, #28
 8001578:	401a      	ands	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	2101      	movs	r1, #1
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2225      	movs	r2, #37	@ 0x25
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2224      	movs	r2, #36	@ 0x24
 8001592:	2100      	movs	r1, #0
 8001594:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	0010      	movs	r0, r2
 80015a6:	4798      	blx	r3
    }
  }
  return status;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	221c      	movs	r2, #28
 80015d4:	4013      	ands	r3, r2
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	d026      	beq.n	8001630 <HAL_DMA_IRQHandler+0x7a>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2204      	movs	r2, #4
 80015e6:	4013      	ands	r3, r2
 80015e8:	d022      	beq.n	8001630 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2220      	movs	r2, #32
 80015f2:	4013      	ands	r3, r2
 80015f4:	d107      	bne.n	8001606 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2104      	movs	r1, #4
 8001602:	438a      	bics	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	221c      	movs	r2, #28
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	2104      	movs	r1, #4
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	2b00      	cmp	r3, #0
 8001620:	d100      	bne.n	8001624 <HAL_DMA_IRQHandler+0x6e>
 8001622:	e071      	b.n	8001708 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	0010      	movs	r0, r2
 800162c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800162e:	e06b      	b.n	8001708 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	221c      	movs	r2, #28
 8001636:	4013      	ands	r3, r2
 8001638:	2202      	movs	r2, #2
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	d02d      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xea>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d029      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2220      	movs	r2, #32
 8001654:	4013      	ands	r3, r2
 8001656:	d10b      	bne.n	8001670 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	210a      	movs	r1, #10
 8001664:	438a      	bics	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2225      	movs	r2, #37	@ 0x25
 800166c:	2101      	movs	r1, #1
 800166e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	221c      	movs	r2, #28
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	2102      	movs	r1, #2
 800167e:	4091      	lsls	r1, r2
 8001680:	000a      	movs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2224      	movs	r2, #36	@ 0x24
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d039      	beq.n	8001708 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	0010      	movs	r0, r2
 800169c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800169e:	e033      	b.n	8001708 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	221c      	movs	r2, #28
 80016a6:	4013      	ands	r3, r2
 80016a8:	2208      	movs	r2, #8
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	d02a      	beq.n	800170a <HAL_DMA_IRQHandler+0x154>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2208      	movs	r2, #8
 80016b8:	4013      	ands	r3, r2
 80016ba:	d026      	beq.n	800170a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	210e      	movs	r1, #14
 80016c8:	438a      	bics	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d0:	221c      	movs	r2, #28
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	4091      	lsls	r1, r2
 80016dc:	000a      	movs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2225      	movs	r2, #37	@ 0x25
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2224      	movs	r2, #36	@ 0x24
 80016f2:	2100      	movs	r1, #0
 80016f4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	0010      	movs	r0, r2
 8001706:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46c0      	nop			@ (mov r8, r8)
}
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}

08001726 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	221c      	movs	r2, #28
 800173a:	401a      	ands	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	2101      	movs	r1, #1
 8001742:	4091      	lsls	r1, r2
 8001744:	000a      	movs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b10      	cmp	r3, #16
 8001756:	d108      	bne.n	800176a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001768:	e007      	b.n	800177a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	60da      	str	r2, [r3, #12]
}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800179a:	e155      	b.n	8001a48 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <HAL_GPIO_Init+0x30>
 80017b2:	e146      	b.n	8001a42 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d005      	beq.n	80017cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	43da      	mvns	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	409a      	lsls	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001802:	2201      	movs	r2, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	2201      	movs	r2, #1
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	4013      	ands	r3, r2
 8001836:	2b03      	cmp	r3, #3
 8001838:	d017      	beq.n	800186a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d123      	bne.n	80018be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	58d3      	ldr	r3, [r2, r3]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2207      	movs	r2, #7
 8001888:	4013      	ands	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2107      	movs	r1, #7
 80018a2:	400b      	ands	r3, r1
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	6939      	ldr	r1, [r7, #16]
 80018bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	43da      	mvns	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	401a      	ands	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	23c0      	movs	r3, #192	@ 0xc0
 80018f8:	029b      	lsls	r3, r3, #10
 80018fa:	4013      	ands	r3, r2
 80018fc:	d100      	bne.n	8001900 <HAL_GPIO_Init+0x17c>
 80018fe:	e0a0      	b.n	8001a42 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001900:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_GPIO_Init+0x2dc>)
 8001902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001904:	4b56      	ldr	r3, [pc, #344]	@ (8001a60 <HAL_GPIO_Init+0x2dc>)
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800190c:	4a55      	ldr	r2, [pc, #340]	@ (8001a64 <HAL_GPIO_Init+0x2e0>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	589b      	ldr	r3, [r3, r2]
 8001918:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	23a0      	movs	r3, #160	@ 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	429a      	cmp	r2, r3
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x1f6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a68 <HAL_GPIO_Init+0x2e4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x1f2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a49      	ldr	r2, [pc, #292]	@ (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x1ee>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a48      	ldr	r2, [pc, #288]	@ (8001a70 <HAL_GPIO_Init+0x2ec>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x1ea>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a47      	ldr	r2, [pc, #284]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x1e6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a46      	ldr	r2, [pc, #280]	@ (8001a78 <HAL_GPIO_Init+0x2f4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x1e2>
 8001962:	2305      	movs	r3, #5
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 8001966:	2306      	movs	r3, #6
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x1f8>
 800197a:	2300      	movs	r3, #0
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	2103      	movs	r1, #3
 8001980:	400a      	ands	r2, r1
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800198c:	4935      	ldr	r1, [pc, #212]	@ (8001a64 <HAL_GPIO_Init+0x2e0>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	035b      	lsls	r3, r3, #13
 80019b2:	4013      	ands	r3, r2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019be:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43da      	mvns	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	039b      	lsls	r3, r3, #14
 80019dc:	4013      	ands	r3, r2
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	4013      	ands	r3, r2
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a18:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43da      	mvns	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	025b      	lsls	r3, r3, #9
 8001a30:	4013      	ands	r3, r2
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	40da      	lsrs	r2, r3
 8001a50:	1e13      	subs	r3, r2, #0
 8001a52:	d000      	beq.n	8001a56 <HAL_GPIO_Init+0x2d2>
 8001a54:	e6a2      	b.n	800179c <HAL_GPIO_Init+0x18>
  }
}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b006      	add	sp, #24
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	50000400 	.word	0x50000400
 8001a6c:	50000800 	.word	0x50000800
 8001a70:	50000c00 	.word	0x50000c00
 8001a74:	50001000 	.word	0x50001000
 8001a78:	50001c00 	.word	0x50001c00
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	0008      	movs	r0, r1
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	1cbb      	adds	r3, r7, #2
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	1c7b      	adds	r3, r7, #1
 8001a94:	1c0a      	adds	r2, r1, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	1c7b      	adds	r3, r7, #1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa0:	1cbb      	adds	r3, r7, #2
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001aaa:	1cbb      	adds	r3, r7, #2
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e08f      	b.n	8001bee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2241      	movs	r2, #65	@ 0x41
 8001ad2:	5c9b      	ldrb	r3, [r3, r2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d107      	bne.n	8001aea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2240      	movs	r2, #64	@ 0x40
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7fe fd77 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2241      	movs	r2, #65	@ 0x41
 8001aee:	2124      	movs	r1, #36	@ 0x24
 8001af0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	493b      	ldr	r1, [pc, #236]	@ (8001bf8 <HAL_I2C_Init+0x13c>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4938      	ldr	r1, [pc, #224]	@ (8001bfc <HAL_I2C_Init+0x140>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2180      	movs	r1, #128	@ 0x80
 8001b32:	0209      	lsls	r1, r1, #8
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e007      	b.n	8001b4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2184      	movs	r1, #132	@ 0x84
 8001b44:	0209      	lsls	r1, r1, #8
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d109      	bne.n	8001b66 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0109      	lsls	r1, r1, #4
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	e007      	b.n	8001b76 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4923      	ldr	r1, [pc, #140]	@ (8001c00 <HAL_I2C_Init+0x144>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4920      	ldr	r1, [pc, #128]	@ (8001c04 <HAL_I2C_Init+0x148>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	491a      	ldr	r1, [pc, #104]	@ (8001bfc <HAL_I2C_Init+0x140>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69d9      	ldr	r1, [r3, #28]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2241      	movs	r2, #65	@ 0x41
 8001bda:	2120      	movs	r1, #32
 8001bdc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2242      	movs	r2, #66	@ 0x42
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	f0ffffff 	.word	0xf0ffffff
 8001bfc:	ffff7fff 	.word	0xffff7fff
 8001c00:	fffff7ff 	.word	0xfffff7ff
 8001c04:	02008000 	.word	0x02008000

08001c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2241      	movs	r2, #65	@ 0x41
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d138      	bne.n	8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2240      	movs	r2, #64	@ 0x40
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e032      	b.n	8001c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2240      	movs	r2, #64	@ 0x40
 8001c30:	2101      	movs	r1, #1
 8001c32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2241      	movs	r2, #65	@ 0x41
 8001c38:	2124      	movs	r1, #36	@ 0x24
 8001c3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2101      	movs	r1, #1
 8001c48:	438a      	bics	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4911      	ldr	r1, [pc, #68]	@ (8001c9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2241      	movs	r2, #65	@ 0x41
 8001c80:	2120      	movs	r1, #32
 8001c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2240      	movs	r2, #64	@ 0x40
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
  }
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	ffffefff 	.word	0xffffefff

08001ca0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2241      	movs	r2, #65	@ 0x41
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d139      	bne.n	8001d2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2240      	movs	r2, #64	@ 0x40
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e033      	b.n	8001d2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	2101      	movs	r1, #1
 8001cca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2241      	movs	r2, #65	@ 0x41
 8001cd0:	2124      	movs	r1, #36	@ 0x24
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2241      	movs	r2, #65	@ 0x41
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2240      	movs	r2, #64	@ 0x40
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	fffff0ff 	.word	0xfffff0ff

08001d38 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	000a      	movs	r2, r1
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001d56:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_PWR_EnterSTOPMode+0xac>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_PWR_EnterSTOPMode+0x40>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d72:	491d      	ldr	r1, [pc, #116]	@ (8001de8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4393      	bics	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001da0:	1cfb      	adds	r3, r7, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001da8:	bf30      	wfi
 8001daa:	e002      	b.n	8001db2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001dac:	bf40      	sev
    __WFE();
 8001dae:	bf20      	wfe
    __WFE();
 8001db0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <HAL_PWR_EnterSTOPMode+0xb4>)
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <HAL_PWR_EnterSTOPMode+0xb4>)
 8001db8:	2104      	movs	r1, #4
 8001dba:	438a      	bics	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_PWR_EnterSTOPMode+0xa0>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0089      	lsls	r1, r1, #2
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
  }
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b006      	add	sp, #24
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40007000 	.word	0x40007000
 8001de4:	40010000 	.word	0x40010000
 8001de8:	fffffdff 	.word	0xfffffdff
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f000 fbbf 	bl	8002582 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e04:	4bc9      	ldr	r3, [pc, #804]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	220c      	movs	r2, #12
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0e:	4bc7      	ldr	r3, [pc, #796]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x36>
 8001e24:	e07e      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x68>
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4bbb      	ldr	r3, [pc, #748]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5a>
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_OscConfig+0x132>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d167      	bne.n	8001f22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f000 fb95 	bl	8002582 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	025b      	lsls	r3, r3, #9
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x84>
 8001e64:	4bb1      	ldr	r3, [pc, #708]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4bb0      	ldr	r3, [pc, #704]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e027      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	23a0      	movs	r3, #160	@ 0xa0
 8001e7a:	02db      	lsls	r3, r3, #11
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCC_OscConfig+0xae>
 8001e80:	4baa      	ldr	r3, [pc, #680]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4ba9      	ldr	r3, [pc, #676]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e86:	2180      	movs	r1, #128	@ 0x80
 8001e88:	02c9      	lsls	r1, r1, #11
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4ba7      	ldr	r3, [pc, #668]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4ba6      	ldr	r3, [pc, #664]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e012      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e9e:	4ba3      	ldr	r3, [pc, #652]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba2      	ldr	r3, [pc, #648]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001ea4:	49a2      	ldr	r1, [pc, #648]	@ (8002130 <HAL_RCC_OscConfig+0x340>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001ebe:	499d      	ldr	r1, [pc, #628]	@ (8002134 <HAL_RCC_OscConfig+0x344>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f902 	bl	80010d4 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f8fd 	bl	80010d4 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	@ 0x64
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 fb4c 	bl	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eea:	4b90      	ldr	r3, [pc, #576]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0ef      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xe6>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f8ec 	bl	80010d4 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f02:	f7ff f8e7 	bl	80010d4 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	@ 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e336      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f14:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x112>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x140>
 8001f2e:	e099      	b.n	8002064 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	2220      	movs	r2, #32
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b7a      	ldr	r3, [pc, #488]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f44:	2120      	movs	r1, #32
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4393      	bics	r3, r2
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d13e      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d13b      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f64:	4b71      	ldr	r3, [pc, #452]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_RCC_OscConfig+0x188>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e304      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b6c      	ldr	r3, [pc, #432]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002138 <HAL_RCC_OscConfig+0x348>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	4b68      	ldr	r3, [pc, #416]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2209      	movs	r2, #9
 8001f94:	4393      	bics	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	4b64      	ldr	r3, [pc, #400]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fa0:	f000 fc42 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8001fa4:	0001      	movs	r1, r0
 8001fa6:	4b61      	ldr	r3, [pc, #388]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	220f      	movs	r2, #15
 8001fae:	4013      	ands	r3, r2
 8001fb0:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x34c>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	000a      	movs	r2, r1
 8001fb6:	40da      	lsrs	r2, r3
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <HAL_RCC_OscConfig+0x350>)
 8001fba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fbc:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <HAL_RCC_OscConfig+0x354>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2513      	movs	r5, #19
 8001fc2:	197c      	adds	r4, r7, r5
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff f83f 	bl	8001048 <HAL_InitTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fce:	197b      	adds	r3, r7, r5
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d046      	beq.n	8002064 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001fd6:	197b      	adds	r3, r7, r5
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	e2d2      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d027      	beq.n	8002032 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fe2:	4b52      	ldr	r3, [pc, #328]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2209      	movs	r2, #9
 8001fe8:	4393      	bics	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	4b4f      	ldr	r3, [pc, #316]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f86e 	bl	80010d4 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f869 	bl	80010d4 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e2b8      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002010:	4b46      	ldr	r3, [pc, #280]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d0f1      	beq.n	8001ffe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b44      	ldr	r3, [pc, #272]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a46      	ldr	r2, [pc, #280]	@ (8002138 <HAL_RCC_OscConfig+0x348>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	e018      	b.n	8002064 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002038:	2101      	movs	r1, #1
 800203a:	438a      	bics	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f849 	bl	80010d4 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff f844 	bl	80010d4 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e293      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800205a:	4b34      	ldr	r3, [pc, #208]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d1f1      	bne.n	8002048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	4013      	ands	r3, r2
 800206c:	d100      	bne.n	8002070 <HAL_RCC_OscConfig+0x280>
 800206e:	e0a2      	b.n	80021b6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d140      	bne.n	80020f8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x29e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e279      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208e:	4b27      	ldr	r3, [pc, #156]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a2d      	ldr	r2, [pc, #180]	@ (8002148 <HAL_RCC_OscConfig+0x358>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800209c:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	0a19      	lsrs	r1, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	061a      	lsls	r2, r3, #24
 80020b0:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	3301      	adds	r3, #1
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	0212      	lsls	r2, r2, #8
 80020c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	210f      	movs	r1, #15
 80020cc:	400b      	ands	r3, r1
 80020ce:	491b      	ldr	r1, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x34c>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_RCC_OscConfig+0x350>)
 80020d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <HAL_RCC_OscConfig+0x354>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2513      	movs	r5, #19
 80020de:	197c      	adds	r4, r7, r5
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe ffb1 	bl	8001048 <HAL_InitTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020ea:	197b      	adds	r3, r7, r5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d061      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80020f2:	197b      	adds	r3, r7, r5
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	e244      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d040      	beq.n	8002182 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_OscConfig+0x33c>)
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	0049      	lsls	r1, r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe ffe1 	bl	80010d4 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002116:	e019      	b.n	800214c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002118:	f7fe ffdc 	bl	80010d4 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d912      	bls.n	800214c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e22b      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	40021000 	.word	0x40021000
 8002130:	fffeffff 	.word	0xfffeffff
 8002134:	fffbffff 	.word	0xfffbffff
 8002138:	ffffe0ff 	.word	0xffffe0ff
 800213c:	08005a98 	.word	0x08005a98
 8002140:	20000004 	.word	0x20000004
 8002144:	20000008 	.word	0x20000008
 8002148:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800214c:	4bca      	ldr	r3, [pc, #808]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d0df      	beq.n	8002118 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002158:	4bc7      	ldr	r3, [pc, #796]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4ac7      	ldr	r2, [pc, #796]	@ (800247c <HAL_RCC_OscConfig+0x68c>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002166:	4bc4      	ldr	r3, [pc, #784]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216c:	4bc2      	ldr	r3, [pc, #776]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	0a19      	lsrs	r1, r3, #8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	061a      	lsls	r2, r3, #24
 800217a:	4bbf      	ldr	r3, [pc, #764]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	e019      	b.n	80021b6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002182:	4bbd      	ldr	r3, [pc, #756]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4bbc      	ldr	r3, [pc, #752]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002188:	49bd      	ldr	r1, [pc, #756]	@ (8002480 <HAL_RCC_OscConfig+0x690>)
 800218a:	400a      	ands	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe ffa1 	bl	80010d4 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002198:	f7fe ff9c 	bl	80010d4 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1eb      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021aa:	4bb3      	ldr	r3, [pc, #716]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2208      	movs	r2, #8
 80021bc:	4013      	ands	r3, r2
 80021be:	d036      	beq.n	800222e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d019      	beq.n	80021fc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c8:	4bab      	ldr	r3, [pc, #684]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80021ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021cc:	4baa      	ldr	r3, [pc, #680]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7fe ff7e 	bl	80010d4 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe ff79 	bl	80010d4 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1c8      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f0:	4ba1      	ldr	r3, [pc, #644]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80021f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d0f1      	beq.n	80021de <HAL_RCC_OscConfig+0x3ee>
 80021fa:	e018      	b.n	800222e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b9e      	ldr	r3, [pc, #632]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002200:	4b9d      	ldr	r3, [pc, #628]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002202:	2101      	movs	r1, #1
 8002204:	438a      	bics	r2, r1
 8002206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe ff64 	bl	80010d4 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe ff5f 	bl	80010d4 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1ae      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002224:	4b94      	ldr	r3, [pc, #592]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d1f1      	bne.n	8002212 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2204      	movs	r2, #4
 8002234:	4013      	ands	r3, r2
 8002236:	d100      	bne.n	800223a <HAL_RCC_OscConfig+0x44a>
 8002238:	e0ae      	b.n	8002398 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2023      	movs	r0, #35	@ 0x23
 800223c:	183b      	adds	r3, r7, r0
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b8d      	ldr	r3, [pc, #564]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	055b      	lsls	r3, r3, #21
 800224a:	4013      	ands	r3, r2
 800224c:	d109      	bne.n	8002262 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b8a      	ldr	r3, [pc, #552]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002252:	4b89      	ldr	r3, [pc, #548]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002254:	2180      	movs	r1, #128	@ 0x80
 8002256:	0549      	lsls	r1, r1, #21
 8002258:	430a      	orrs	r2, r1
 800225a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800225c:	183b      	adds	r3, r7, r0
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b88      	ldr	r3, [pc, #544]	@ (8002484 <HAL_RCC_OscConfig+0x694>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d11a      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b85      	ldr	r3, [pc, #532]	@ (8002484 <HAL_RCC_OscConfig+0x694>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b84      	ldr	r3, [pc, #528]	@ (8002484 <HAL_RCC_OscConfig+0x694>)
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0049      	lsls	r1, r1, #1
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227c:	f7fe ff2a 	bl	80010d4 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe ff25 	bl	80010d4 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	@ 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e174      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b7a      	ldr	r3, [pc, #488]	@ (8002484 <HAL_RCC_OscConfig+0x694>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
 80022b0:	4b71      	ldr	r3, [pc, #452]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022b4:	4b70      	ldr	r3, [pc, #448]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	0049      	lsls	r1, r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80022be:	e031      	b.n	8002324 <HAL_RCC_OscConfig+0x534>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4f2>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022ce:	496c      	ldr	r1, [pc, #432]	@ (8002480 <HAL_RCC_OscConfig+0x690>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d4:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022d8:	4b67      	ldr	r3, [pc, #412]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022da:	496b      	ldr	r1, [pc, #428]	@ (8002488 <HAL_RCC_OscConfig+0x698>)
 80022dc:	400a      	ands	r2, r1
 80022de:	651a      	str	r2, [r3, #80]	@ 0x50
 80022e0:	e020      	b.n	8002324 <HAL_RCC_OscConfig+0x534>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	23a0      	movs	r3, #160	@ 0xa0
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d10e      	bne.n	800230c <HAL_RCC_OscConfig+0x51c>
 80022ee:	4b62      	ldr	r3, [pc, #392]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022f2:	4b61      	ldr	r3, [pc, #388]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	00c9      	lsls	r1, r1, #3
 80022f8:	430a      	orrs	r2, r1
 80022fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80022fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80022fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002300:	4b5d      	ldr	r3, [pc, #372]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	651a      	str	r2, [r3, #80]	@ 0x50
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x534>
 800230c:	4b5a      	ldr	r3, [pc, #360]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800230e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002310:	4b59      	ldr	r3, [pc, #356]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002312:	495b      	ldr	r1, [pc, #364]	@ (8002480 <HAL_RCC_OscConfig+0x690>)
 8002314:	400a      	ands	r2, r1
 8002316:	651a      	str	r2, [r3, #80]	@ 0x50
 8002318:	4b57      	ldr	r3, [pc, #348]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800231a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800231c:	4b56      	ldr	r3, [pc, #344]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800231e:	495a      	ldr	r1, [pc, #360]	@ (8002488 <HAL_RCC_OscConfig+0x698>)
 8002320:	400a      	ands	r2, r1
 8002322:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7fe fed2 	bl	80010d4 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002334:	e009      	b.n	800234a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fecd 	bl	80010d4 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a52      	ldr	r2, [pc, #328]	@ (800248c <HAL_RCC_OscConfig+0x69c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e11b      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234a:	4b4b      	ldr	r3, [pc, #300]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800234c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d0ef      	beq.n	8002336 <HAL_RCC_OscConfig+0x546>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe febc 	bl	80010d4 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002360:	e009      	b.n	8002376 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe feb7 	bl	80010d4 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a47      	ldr	r2, [pc, #284]	@ (800248c <HAL_RCC_OscConfig+0x69c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e105      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d1ef      	bne.n	8002362 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002382:	2323      	movs	r3, #35	@ 0x23
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b3a      	ldr	r3, [pc, #232]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800238e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002390:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002392:	493f      	ldr	r1, [pc, #252]	@ (8002490 <HAL_RCC_OscConfig+0x6a0>)
 8002394:	400a      	ands	r2, r1
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2220      	movs	r2, #32
 800239e:	4013      	ands	r3, r2
 80023a0:	d049      	beq.n	8002436 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d026      	beq.n	80023f8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023aa:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	4b30      	ldr	r3, [pc, #192]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023bc:	2101      	movs	r1, #1
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	4b34      	ldr	r3, [pc, #208]	@ (8002494 <HAL_RCC_OscConfig+0x6a4>)
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x6a4>)
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	0189      	lsls	r1, r1, #6
 80023cc:	430a      	orrs	r2, r1
 80023ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fe80 	bl	80010d4 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023da:	f7fe fe7b 	bl	80010d4 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0ca      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d0f1      	beq.n	80023da <HAL_RCC_OscConfig+0x5ea>
 80023f6:	e01e      	b.n	8002436 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 80023fe:	2101      	movs	r1, #1
 8002400:	438a      	bics	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_RCC_OscConfig+0x6a4>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <HAL_RCC_OscConfig+0x6a4>)
 800240a:	4923      	ldr	r1, [pc, #140]	@ (8002498 <HAL_RCC_OscConfig+0x6a8>)
 800240c:	400a      	ands	r2, r1
 800240e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fe60 	bl	80010d4 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241a:	f7fe fe5b 	bl	80010d4 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0aa      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d1f1      	bne.n	800241a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d100      	bne.n	8002440 <HAL_RCC_OscConfig+0x650>
 800243e:	e09f      	b.n	8002580 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d100      	bne.n	8002448 <HAL_RCC_OscConfig+0x658>
 8002446:	e078      	b.n	800253a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	2b02      	cmp	r3, #2
 800244e:	d159      	bne.n	8002504 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_RCC_OscConfig+0x688>)
 8002456:	4911      	ldr	r1, [pc, #68]	@ (800249c <HAL_RCC_OscConfig+0x6ac>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fe3a 	bl	80010d4 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe fe35 	bl	80010d4 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d915      	bls.n	80024a0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e084      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
 8002478:	40021000 	.word	0x40021000
 800247c:	ffff1fff 	.word	0xffff1fff
 8002480:	fffffeff 	.word	0xfffffeff
 8002484:	40007000 	.word	0x40007000
 8002488:	fffffbff 	.word	0xfffffbff
 800248c:	00001388 	.word	0x00001388
 8002490:	efffffff 	.word	0xefffffff
 8002494:	40010000 	.word	0x40010000
 8002498:	ffffdfff 	.word	0xffffdfff
 800249c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	049b      	lsls	r3, r3, #18
 80024a8:	4013      	ands	r3, r2
 80024aa:	d1dc      	bne.n	8002466 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a37      	ldr	r2, [pc, #220]	@ (8002590 <HAL_RCC_OscConfig+0x7a0>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c4:	431a      	orrs	r2, r3
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b2f      	ldr	r3, [pc, #188]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b2e      	ldr	r3, [pc, #184]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	0449      	lsls	r1, r1, #17
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fdfb 	bl	80010d4 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fdf6 	bl	80010d4 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e045      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024f6:	4b25      	ldr	r3, [pc, #148]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x6f4>
 8002502:	e03d      	b.n	8002580 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 800250a:	4922      	ldr	r1, [pc, #136]	@ (8002594 <HAL_RCC_OscConfig+0x7a4>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fde0 	bl	80010d4 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fddb 	bl	80010d4 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e02a      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800252c:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	4013      	ands	r3, r2
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x72a>
 8002538:	e022      	b.n	8002580 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01d      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_RCC_OscConfig+0x79c>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d10f      	bne.n	800257c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	23f0      	movs	r3, #240	@ 0xf0
 8002560:	039b      	lsls	r3, r3, #14
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	23c0      	movs	r3, #192	@ 0xc0
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b00a      	add	sp, #40	@ 0x28
 8002588:	bdb0      	pop	{r4, r5, r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	40021000 	.word	0x40021000
 8002590:	ff02ffff 	.word	0xff02ffff
 8002594:	feffffff 	.word	0xfeffffff

08002598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e128      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b96      	ldr	r3, [pc, #600]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d91e      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b93      	ldr	r3, [pc, #588]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4393      	bics	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	4b90      	ldr	r3, [pc, #576]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fd82 	bl	80010d4 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d4:	e009      	b.n	80025ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fe fd7d 	bl	80010d4 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a8a      	ldr	r2, [pc, #552]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e109      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b87      	ldr	r3, [pc, #540]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4b83      	ldr	r3, [pc, #524]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	22f0      	movs	r2, #240	@ 0xf0
 8002608:	4393      	bics	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b7f      	ldr	r3, [pc, #508]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d100      	bne.n	8002622 <HAL_RCC_ClockConfig+0x8a>
 8002620:	e089      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262a:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d120      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0e1      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002642:	4b73      	ldr	r3, [pc, #460]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	049b      	lsls	r3, r3, #18
 800264a:	4013      	ands	r3, r2
 800264c:	d114      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0d5      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d106      	bne.n	8002668 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2204      	movs	r2, #4
 8002660:	4013      	ands	r3, r2
 8002662:	d109      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ca      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002668:	4b69      	ldr	r3, [pc, #420]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0c2      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2203      	movs	r2, #3
 800267e:	4393      	bics	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fd22 	bl	80010d4 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d111      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fd19 	bl	80010d4 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a58      	ldr	r2, [pc, #352]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0a5      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b2:	4b57      	ldr	r3, [pc, #348]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	220c      	movs	r2, #12
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_ClockConfig+0x106>
 80026be:	e03a      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d111      	bne.n	80026ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe fd03 	bl	80010d4 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a4d      	ldr	r2, [pc, #308]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e08f      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	220c      	movs	r2, #12
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d1ef      	bne.n	80026ca <HAL_RCC_ClockConfig+0x132>
 80026ea:	e024      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d11b      	bne.n	800272c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe fced 	bl	80010d4 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a42      	ldr	r2, [pc, #264]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e079      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800270a:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	220c      	movs	r2, #12
 8002710:	4013      	ands	r3, r2
 8002712:	2b04      	cmp	r3, #4
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x15e>
 8002716:	e00e      	b.n	8002736 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fcdc 	bl	80010d4 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e068      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800272c:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d21e      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002744:	4b30      	ldr	r3, [pc, #192]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002756:	f7fe fcbd 	bl	80010d4 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	e009      	b.n	8002774 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fcb8 	bl	80010d4 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4a28      	ldr	r2, [pc, #160]	@ (800280c <HAL_RCC_ClockConfig+0x274>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e044      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_RCC_ClockConfig+0x270>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2204      	movs	r2, #4
 8002788:	4013      	ands	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <HAL_RCC_ClockConfig+0x27c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2208      	movs	r2, #8
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_RCC_ClockConfig+0x280>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00da      	lsls	r2, r3, #3
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c0:	f000 f832 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027c4:	0001      	movs	r1, r0
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_RCC_ClockConfig+0x278>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	220f      	movs	r2, #15
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a12      	ldr	r2, [pc, #72]	@ (800281c <HAL_RCC_ClockConfig+0x284>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	000a      	movs	r2, r1
 80027d6:	40da      	lsrs	r2, r3
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_ClockConfig+0x288>)
 80027da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_RCC_ClockConfig+0x28c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	250b      	movs	r5, #11
 80027e2:	197c      	adds	r4, r7, r5
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fc2f 	bl	8001048 <HAL_InitTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ee:	197b      	adds	r3, r7, r5
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027f6:	197b      	adds	r3, r7, r5
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	e000      	b.n	80027fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bdb0      	pop	{r4, r5, r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	40022000 	.word	0x40022000
 800280c:	00001388 	.word	0x00001388
 8002810:	40021000 	.word	0x40021000
 8002814:	fffff8ff 	.word	0xfffff8ff
 8002818:	ffffc7ff 	.word	0xffffc7ff
 800281c:	08005a98 	.word	0x08005a98
 8002820:	20000004 	.word	0x20000004
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800282e:	4b3c      	ldr	r3, [pc, #240]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	220c      	movs	r2, #12
 8002838:	4013      	ands	r3, r2
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d013      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x3e>
 800283e:	d85c      	bhi.n	80028fa <HAL_RCC_GetSysClockFreq+0xd2>
 8002840:	2b04      	cmp	r3, #4
 8002842:	d002      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x22>
 8002844:	2b08      	cmp	r3, #8
 8002846:	d00b      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x38>
 8002848:	e057      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800284a:	4b35      	ldr	r3, [pc, #212]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xf8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2210      	movs	r2, #16
 8002850:	4013      	ands	r3, r2
 8002852:	d002      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002854:	4b33      	ldr	r3, [pc, #204]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002856:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002858:	e05d      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800285a:	4b33      	ldr	r3, [pc, #204]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x100>)
 800285c:	613b      	str	r3, [r7, #16]
      break;
 800285e:	e05a      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002860:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_RCC_GetSysClockFreq+0x104>)
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	e057      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0c9b      	lsrs	r3, r3, #18
 800286a:	220f      	movs	r2, #15
 800286c:	4013      	ands	r3, r2
 800286e:	4a30      	ldr	r2, [pc, #192]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0d9b      	lsrs	r3, r3, #22
 8002878:	2203      	movs	r2, #3
 800287a:	4013      	ands	r3, r2
 800287c:	3301      	adds	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	4013      	ands	r3, r2
 800288a:	d00f      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	000a      	movs	r2, r1
 8002890:	0152      	lsls	r2, r2, #5
 8002892:	1a52      	subs	r2, r2, r1
 8002894:	0193      	lsls	r3, r2, #6
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	185b      	adds	r3, r3, r1
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fd fc39 	bl	8000118 <__udivsi3>
 80028a6:	0003      	movs	r3, r0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e023      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00f      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	000a      	movs	r2, r1
 80028ba:	0152      	lsls	r2, r2, #5
 80028bc:	1a52      	subs	r2, r2, r1
 80028be:	0193      	lsls	r3, r2, #6
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	185b      	adds	r3, r3, r1
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7fd fc24 	bl	8000118 <__udivsi3>
 80028d0:	0003      	movs	r3, r0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e00e      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	000a      	movs	r2, r1
 80028da:	0152      	lsls	r2, r2, #5
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0193      	lsls	r3, r2, #6
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	185b      	adds	r3, r3, r1
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7fd fc14 	bl	8000118 <__udivsi3>
 80028f0:	0003      	movs	r3, r0
 80028f2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	e00d      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	2207      	movs	r2, #7
 8002902:	4013      	ands	r3, r2
 8002904:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	2280      	movs	r2, #128	@ 0x80
 800290c:	0212      	lsls	r2, r2, #8
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b006      	add	sp, #24
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	003d0900 	.word	0x003d0900
 8002928:	00f42400 	.word	0x00f42400
 800292c:	007a1200 	.word	0x007a1200
 8002930:	08005ab0 	.word	0x08005ab0

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b02      	ldr	r3, [pc, #8]	@ (8002944 <HAL_RCC_GetHCLKFreq+0x10>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff2 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002950:	0001      	movs	r1, r0
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	2207      	movs	r2, #7
 800295a:	4013      	ands	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	40d9      	lsrs	r1, r3
 8002962:	000b      	movs	r3, r1
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	40021000 	.word	0x40021000
 8002970:	08005aa8 	.word	0x08005aa8

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002978:	f7ff ffdc 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0adb      	lsrs	r3, r3, #11
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x28>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	40d9      	lsrs	r1, r3
 800298e:	000b      	movs	r3, r1
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	08005aa8 	.word	0x08005aa8

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80029a8:	2317      	movs	r3, #23
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	4013      	ands	r3, r2
 80029b8:	d106      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4013      	ands	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80029c6:	e104      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c8:	4bb9      	ldr	r3, [pc, #740]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	4013      	ands	r3, r2
 80029d2:	d10a      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	4bb6      	ldr	r3, [pc, #728]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d8:	4bb5      	ldr	r3, [pc, #724]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	0549      	lsls	r1, r1, #21
 80029de:	430a      	orrs	r2, r1
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80029e2:	2317      	movs	r3, #23
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4bb2      	ldr	r3, [pc, #712]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d11a      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f6:	4baf      	ldr	r3, [pc, #700]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4bae      	ldr	r3, [pc, #696]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029fc:	2180      	movs	r1, #128	@ 0x80
 80029fe:	0049      	lsls	r1, r1, #1
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a04:	f7fe fb66 	bl	80010d4 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fb61 	bl	80010d4 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b64      	cmp	r3, #100	@ 0x64
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e143      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4ba4      	ldr	r3, [pc, #656]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a2c:	4ba0      	ldr	r3, [pc, #640]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	23c0      	movs	r3, #192	@ 0xc0
 8002a32:	039b      	lsls	r3, r3, #14
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	23c0      	movs	r3, #192	@ 0xc0
 8002a3e:	039b      	lsls	r3, r3, #14
 8002a40:	4013      	ands	r3, r2
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	23c0      	movs	r3, #192	@ 0xc0
 8002a4e:	039b      	lsls	r3, r3, #14
 8002a50:	4013      	ands	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d013      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	23c0      	movs	r3, #192	@ 0xc0
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	401a      	ands	r2, r3
 8002a62:	23c0      	movs	r3, #192	@ 0xc0
 8002a64:	029b      	lsls	r3, r3, #10
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a6a:	4b91      	ldr	r3, [pc, #580]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	401a      	ands	r2, r3
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e113      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a80:	4b8b      	ldr	r3, [pc, #556]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a84:	23c0      	movs	r3, #192	@ 0xc0
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d049      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	23c0      	movs	r3, #192	@ 0xc0
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d004      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	23c0      	movs	r3, #192	@ 0xc0
 8002ab2:	029b      	lsls	r3, r3, #10
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d034      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d02e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ac8:	4b79      	ldr	r3, [pc, #484]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002acc:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	4b77      	ldr	r3, [pc, #476]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ad6:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad8:	2180      	movs	r1, #128	@ 0x80
 8002ada:	0309      	lsls	r1, r1, #12
 8002adc:	430a      	orrs	r2, r1
 8002ade:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ae4:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae6:	4975      	ldr	r1, [pc, #468]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002aec:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	d014      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe faea 	bl	80010d4 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b04:	e009      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe fae5 	bl	80010d4 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	4a6b      	ldr	r2, [pc, #428]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0c6      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0ef      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	23c0      	movs	r3, #192	@ 0xc0
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	23c0      	movs	r3, #192	@ 0xc0
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002b44:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	23c0      	movs	r3, #192	@ 0xc0
 8002b54:	039b      	lsls	r3, r3, #14
 8002b56:	401a      	ands	r2, r3
 8002b58:	4b55      	ldr	r3, [pc, #340]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	4b54      	ldr	r3, [pc, #336]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	23c0      	movs	r3, #192	@ 0xc0
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	4b50      	ldr	r3, [pc, #320]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d01f      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	23c0      	movs	r3, #192	@ 0xc0
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	401a      	ands	r2, r3
 8002b86:	23c0      	movs	r3, #192	@ 0xc0
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002b8e:	4b48      	ldr	r3, [pc, #288]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	23c0      	movs	r3, #192	@ 0xc0
 8002b9e:	039b      	lsls	r3, r3, #14
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b41      	ldr	r3, [pc, #260]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002baa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	23c0      	movs	r3, #192	@ 0xc0
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bbc:	2317      	movs	r3, #23
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bca:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bcc:	493e      	ldr	r1, [pc, #248]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be0:	2203      	movs	r2, #3
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	220c      	movs	r2, #12
 8002c00:	4393      	bics	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4013      	ands	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	4a25      	ldr	r2, [pc, #148]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c56:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2240      	movs	r2, #64	@ 0x40
 8002c70:	4013      	ands	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c78:	4a16      	ldr	r2, [pc, #88]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2280      	movs	r2, #128	@ 0x80
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	fffcffff 	.word	0xfffcffff
 8002cbc:	fff7ffff 	.word	0xfff7ffff
 8002cc0:	00001388 	.word	0x00001388
 8002cc4:	ffcfffff 	.word	0xffcfffff
 8002cc8:	efffffff 	.word	0xefffffff
 8002ccc:	fffff3ff 	.word	0xfffff3ff
 8002cd0:	ffffcfff 	.word	0xffffcfff
 8002cd4:	fbffffff 	.word	0xfbffffff
 8002cd8:	fff3ffff 	.word	0xfff3ffff

08002cdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e088      	b.n	8002e08 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2221      	movs	r2, #33	@ 0x21
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	2100      	movs	r1, #0
 8002d08:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fd ffc9 	bl	8000ca4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2221      	movs	r2, #33	@ 0x21
 8002d16:	2102      	movs	r1, #2
 8002d18:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d05f      	beq.n	8002de8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22ca      	movs	r2, #202	@ 0xca
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2253      	movs	r2, #83	@ 0x53
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d38:	250f      	movs	r5, #15
 8002d3a:	197c      	adds	r4, r7, r5
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f9ce 	bl	80030e0 <RTC_EnterInitMode>
 8002d44:	0003      	movs	r3, r0
 8002d46:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002d48:	0028      	movs	r0, r5
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12c      	bne.n	8002dac <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	492c      	ldr	r1, [pc, #176]	@ (8002e10 <HAL_RTC_Init+0x134>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68d2      	ldr	r2, [r2, #12]
 8002d88:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6919      	ldr	r1, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	041a      	lsls	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d9e:	183c      	adds	r4, r7, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f9e0 	bl	8003168 <RTC_ExitInitMode>
 8002da8:	0003      	movs	r3, r0
 8002daa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002dac:	230f      	movs	r3, #15
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	22ff      	movs	r2, #255	@ 0xff
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002de6:	e003      	b.n	8002df0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002de8:	230f      	movs	r3, #15
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002df0:	230f      	movs	r3, #15
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2221      	movs	r2, #33	@ 0x21
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	781b      	ldrb	r3, [r3, #0]
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e10:	ff8fffbf 	.word	0xff8fffbf

08002e14 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	5c9b      	ldrb	r3, [r3, r2]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_RTC_SetTime+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e092      	b.n	8002f58 <HAL_RTC_SetTime+0x144>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	2102      	movs	r1, #2
 8002e40:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d125      	bne.n	8002e94 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2240      	movs	r2, #64	@ 0x40
 8002e50:	4013      	ands	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f9ac 	bl	80031bc <RTC_ByteToBcd2>
 8002e64:	0003      	movs	r3, r0
 8002e66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 f9a5 	bl	80031bc <RTC_ByteToBcd2>
 8002e72:	0003      	movs	r3, r0
 8002e74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	789b      	ldrb	r3, [r3, #2]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f99d 	bl	80031bc <RTC_ByteToBcd2>
 8002e82:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e84:	0022      	movs	r2, r4
 8002e86:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	78db      	ldrb	r3, [r3, #3]
 8002e8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e017      	b.n	8002ec4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2240      	movs	r2, #64	@ 0x40
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eb2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002eb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	22ca      	movs	r2, #202	@ 0xca
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2253      	movs	r2, #83	@ 0x53
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ed4:	2513      	movs	r5, #19
 8002ed6:	197c      	adds	r4, r7, r5
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f900 	bl	80030e0 <RTC_EnterInitMode>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	183b      	adds	r3, r7, r0
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d120      	bne.n	8002f30 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	491a      	ldr	r1, [pc, #104]	@ (8002f60 <HAL_RTC_SetTime+0x14c>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4917      	ldr	r1, [pc, #92]	@ (8002f64 <HAL_RTC_SetTime+0x150>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f22:	183c      	adds	r4, r7, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f91e 	bl	8003168 <RTC_ExitInitMode>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002f30:	2313      	movs	r3, #19
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2221      	movs	r2, #33	@ 0x21
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	22ff      	movs	r2, #255	@ 0xff
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

  return status;
 8002f52:	2313      	movs	r3, #19
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b006      	add	sp, #24
 8002f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f60:	007f7f7f 	.word	0x007f7f7f
 8002f64:	fffbffff 	.word	0xfffbffff

08002f68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_RTC_SetDate+0x1e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e07e      	b.n	8003084 <HAL_RTC_SetDate+0x11c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	@ 0x21
 8002f92:	2102      	movs	r1, #2
 8002f94:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_RTC_SetDate+0x52>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d008      	beq.n	8002fba <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2210      	movs	r2, #16
 8002fae:	4393      	bics	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	330a      	adds	r3, #10
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11c      	bne.n	8002ffa <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	78db      	ldrb	r3, [r3, #3]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f8f9 	bl	80031bc <RTC_ByteToBcd2>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f8f2 	bl	80031bc <RTC_ByteToBcd2>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fdc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	789b      	ldrb	r3, [r3, #2]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f8ea 	bl	80031bc <RTC_ByteToBcd2>
 8002fe8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fea:	0022      	movs	r2, r4
 8002fec:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e00e      	b.n	8003018 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	78db      	ldrb	r3, [r3, #3]
 8002ffe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003006:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800300c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	22ca      	movs	r2, #202	@ 0xca
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2253      	movs	r2, #83	@ 0x53
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003028:	2513      	movs	r5, #19
 800302a:	197c      	adds	r4, r7, r5
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	0018      	movs	r0, r3
 8003030:	f000 f856 	bl	80030e0 <RTC_EnterInitMode>
 8003034:	0003      	movs	r3, r0
 8003036:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003038:	0028      	movs	r0, r5
 800303a:	183b      	adds	r3, r7, r0
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4910      	ldr	r1, [pc, #64]	@ (800308c <HAL_RTC_SetDate+0x124>)
 800304a:	400a      	ands	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800304e:	183c      	adds	r4, r7, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f888 	bl	8003168 <RTC_ExitInitMode>
 8003058:	0003      	movs	r3, r0
 800305a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800305c:	2313      	movs	r3, #19
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2221      	movs	r2, #33	@ 0x21
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	22ff      	movs	r2, #255	@ 0xff
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]

  return status;
 800307e:	2313      	movs	r3, #19
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b006      	add	sp, #24
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	00ffff3f 	.word	0x00ffff3f

08003090 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0e      	ldr	r2, [pc, #56]	@ (80030dc <HAL_RTC_WaitForSynchro+0x4c>)
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7fe f816 	bl	80010d4 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030ac:	e00a      	b.n	80030c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030ae:	f7fe f811 	bl	80010d4 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad2      	subs	r2, r2, r3
 80030b8:	23fa      	movs	r3, #250	@ 0xfa
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d901      	bls.n	80030c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	4013      	ands	r3, r2
 80030ce:	d0ee      	beq.n	80030ae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	0001ff5f 	.word	0x0001ff5f

080030e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	230f      	movs	r3, #15
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2240      	movs	r2, #64	@ 0x40
 80030fc:	4013      	ands	r3, r2
 80030fe:	d12c      	bne.n	800315a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2180      	movs	r1, #128	@ 0x80
 800310c:	430a      	orrs	r2, r1
 800310e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003110:	f7fd ffe0 	bl	80010d4 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003118:	e014      	b.n	8003144 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800311a:	f7fd ffdb 	bl	80010d4 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	200f      	movs	r0, #15
 8003126:	183b      	adds	r3, r7, r0
 8003128:	1839      	adds	r1, r7, r0
 800312a:	7809      	ldrb	r1, [r1, #0]
 800312c:	7019      	strb	r1, [r3, #0]
 800312e:	23fa      	movs	r3, #250	@ 0xfa
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	429a      	cmp	r2, r3
 8003134:	d906      	bls.n	8003144 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2221      	movs	r2, #33	@ 0x21
 800313a:	2104      	movs	r1, #4
 800313c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800313e:	183b      	adds	r3, r7, r0
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	4013      	ands	r3, r2
 800314e:	d104      	bne.n	800315a <RTC_EnterInitMode+0x7a>
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1df      	bne.n	800311a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800315a:	230f      	movs	r3, #15
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}

08003168 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	240f      	movs	r4, #15
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2180      	movs	r1, #128	@ 0x80
 8003184:	438a      	bics	r2, r1
 8003186:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2220      	movs	r2, #32
 8003190:	4013      	ands	r3, r2
 8003192:	d10c      	bne.n	80031ae <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff ff7a 	bl	8003090 <HAL_RTC_WaitForSynchro>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d006      	beq.n	80031ae <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	2104      	movs	r1, #4
 80031a6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80031ae:	230f      	movs	r3, #15
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b005      	add	sp, #20
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	0002      	movs	r2, r0
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80031cc:	e007      	b.n	80031de <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	1dfa      	adds	r2, r7, #7
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	3a0a      	subs	r2, #10
 80031dc:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d8f3      	bhi.n	80031ce <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800320c:	4b64      	ldr	r3, [pc, #400]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	22fa      	movs	r2, #250	@ 0xfa
 8003212:	01d1      	lsls	r1, r2, #7
 8003214:	0018      	movs	r0, r3
 8003216:	f7fc ff7f 	bl	8000118 <__udivsi3>
 800321a:	0003      	movs	r3, r0
 800321c:	001a      	movs	r2, r3
 800321e:	0013      	movs	r3, r2
 8003220:	015b      	lsls	r3, r3, #5
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	189b      	adds	r3, r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	5c9b      	ldrb	r3, [r3, r2]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8003236:	2302      	movs	r3, #2
 8003238:	e0ad      	b.n	8003396 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2221      	movs	r2, #33	@ 0x21
 8003246:	2102      	movs	r1, #2
 8003248:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	22ca      	movs	r2, #202	@ 0xca
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2253      	movs	r2, #83	@ 0x53
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4013      	ands	r3, r2
 8003266:	d019      	beq.n	800329c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3b01      	subs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	22ff      	movs	r2, #255	@ 0xff
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2221      	movs	r2, #33	@ 0x21
 8003280:	2103      	movs	r1, #3
 8003282:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e082      	b.n	8003396 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d1e5      	bne.n	8003268 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	493f      	ldr	r1, [pc, #252]	@ (80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	22ff      	movs	r2, #255	@ 0xff
 80032b4:	401a      	ands	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	493b      	ldr	r1, [pc, #236]	@ (80033a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032c0:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	22fa      	movs	r2, #250	@ 0xfa
 80032c6:	01d1      	lsls	r1, r2, #7
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fc ff25 	bl	8000118 <__udivsi3>
 80032ce:	0003      	movs	r3, r0
 80032d0:	001a      	movs	r2, r3
 80032d2:	0013      	movs	r3, r2
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	22ff      	movs	r2, #255	@ 0xff
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2221      	movs	r2, #33	@ 0x21
 80032f8:	2103      	movs	r1, #3
 80032fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e046      	b.n	8003396 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2204      	movs	r2, #4
 8003310:	4013      	ands	r3, r2
 8003312:	d0e5      	beq.n	80032e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2107      	movs	r1, #7
 8003320:	438a      	bics	r2, r1
 8003322:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003342:	2180      	movs	r1, #128	@ 0x80
 8003344:	0349      	lsls	r1, r1, #13
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800334a:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b17      	ldr	r3, [pc, #92]	@ (80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	0349      	lsls	r1, r1, #13
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2180      	movs	r1, #128	@ 0x80
 8003364:	01c9      	lsls	r1, r1, #7
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	@ 0x80
 8003376:	00c9      	lsls	r1, r1, #3
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	22ff      	movs	r2, #255	@ 0xff
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2221      	movs	r2, #33	@ 0x21
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b006      	add	sp, #24
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	20000004 	.word	0x20000004
 80033a4:	fffffbff 	.word	0xfffffbff
 80033a8:	fffffb7f 	.word	0xfffffb7f
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e04e      	b.n	8003468 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2221      	movs	r2, #33	@ 0x21
 80033d6:	2102      	movs	r1, #2
 80033d8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	22ca      	movs	r2, #202	@ 0xca
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2253      	movs	r2, #83	@ 0x53
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	491e      	ldr	r1, [pc, #120]	@ (8003470 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	491b      	ldr	r1, [pc, #108]	@ (8003474 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8003406:	400a      	ands	r2, r1
 8003408:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340a:	f7fd fe63 	bl	80010d4 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003412:	e016      	b.n	8003442 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003414:	f7fd fe5e 	bl	80010d4 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	23fa      	movs	r3, #250	@ 0xfa
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	429a      	cmp	r2, r3
 8003424:	d90d      	bls.n	8003442 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	22ff      	movs	r2, #255	@ 0xff
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2221      	movs	r2, #33	@ 0x21
 8003432:	2103      	movs	r1, #3
 8003434:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e012      	b.n	8003468 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2204      	movs	r2, #4
 800344a:	4013      	ands	r3, r2
 800344c:	d0e2      	beq.n	8003414 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	22ff      	movs	r2, #255	@ 0xff
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2221      	movs	r2, #33	@ 0x21
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	fffffbff 	.word	0xfffffbff
 8003474:	ffffbfff 	.word	0xffffbfff

08003478 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	0352      	lsls	r2, r2, #13
 8003486:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	01db      	lsls	r3, r3, #7
 8003492:	4013      	ands	r3, r2
 8003494:	d014      	beq.n	80034c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00d      	beq.n	80034c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	22ff      	movs	r2, #255	@ 0xff
 80034ac:	401a      	ands	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4908      	ldr	r1, [pc, #32]	@ (80034d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7fd f946 	bl	800074c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2221      	movs	r2, #33	@ 0x21
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40010400 	.word	0x40010400
 80034d4:	fffffb7f 	.word	0xfffffb7f

080034d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e044      	b.n	8003574 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2278      	movs	r2, #120	@ 0x78
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fd fcb3 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2224      	movs	r2, #36	@ 0x24
 8003506:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 ffac 	bl	8004480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fd0a 	bl	8003f44 <UART_SetConfig>
 8003530:	0003      	movs	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01c      	b.n	8003574 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	490d      	ldr	r1, [pc, #52]	@ (800357c <HAL_UART_Init+0xa4>)
 8003546:	400a      	ands	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	212a      	movs	r1, #42	@ 0x2a
 8003556:	438a      	bics	r2, r1
 8003558:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f001 f83b 	bl	80045e8 <UART_CheckIdleState>
 8003572:	0003      	movs	r3, r0
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}
 800357c:	ffffb7ff 	.word	0xffffb7ff

08003580 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	1dbb      	adds	r3, r7, #6
 800358c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003592:	2b20      	cmp	r3, #32
 8003594:	d000      	beq.n	8003598 <HAL_UART_Transmit_DMA+0x18>
 8003596:	e077      	b.n	8003688 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_Transmit_DMA+0x26>
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06f      	b.n	800368a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d109      	bne.n	80035ca <HAL_UART_Transmit_DMA+0x4a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	d001      	beq.n	80035ca <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e05f      	b.n	800368a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	2150      	movs	r1, #80	@ 0x50
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1dba      	adds	r2, r7, #6
 80035de:	2152      	movs	r1, #82	@ 0x52
 80035e0:	8812      	ldrh	r2, [r2, #0]
 80035e2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2284      	movs	r2, #132	@ 0x84
 80035e8:	2100      	movs	r1, #0
 80035ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2221      	movs	r2, #33	@ 0x21
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d027      	beq.n	800364a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <HAL_UART_Transmit_DMA+0x114>)
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <HAL_UART_Transmit_DMA+0x118>)
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a23      	ldr	r2, [pc, #140]	@ (800369c <HAL_UART_Transmit_DMA+0x11c>)
 8003610:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	2200      	movs	r2, #0
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	0019      	movs	r1, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3328      	adds	r3, #40	@ 0x28
 800362a:	001a      	movs	r2, r3
 800362c:	1dbb      	adds	r3, r7, #6
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f7fd fed4 	bl	80013dc <HAL_DMA_Start_IT>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d008      	beq.n	800364a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2284      	movs	r2, #132	@ 0x84
 800363c:	2110      	movs	r1, #16
 800363e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e01f      	b.n	800368a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2240      	movs	r2, #64	@ 0x40
 8003650:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003652:	f3ef 8310 	mrs	r3, PRIMASK
 8003656:	613b      	str	r3, [r7, #16]
  return(result);
 8003658:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	2301      	movs	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f383 8810 	msr	PRIMASK, r3
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2180      	movs	r1, #128	@ 0x80
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b008      	add	sp, #32
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	08004a69 	.word	0x08004a69
 8003698:	08004b01 	.word	0x08004b01
 800369c:	08004d07 	.word	0x08004d07

080036a0 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	617b      	str	r3, [r7, #20]
  return(result);
 80036ae:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f383 8810 	msr	PRIMASK, r3
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	21c0      	movs	r1, #192	@ 0xc0
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b80      	cmp	r3, #128	@ 0x80
 80036e6:	d135      	bne.n	8003754 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2180      	movs	r1, #128	@ 0x80
 800370a:	438a      	bics	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	2200      	movs	r2, #0
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	0018      	movs	r0, r3
 8003730:	f7fd feba 	bl	80014a8 <HAL_DMA_Abort>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d00d      	beq.n	8003754 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	0018      	movs	r0, r3
 800373e:	f7fd ffe8 	bl	8001712 <HAL_DMA_GetError>
 8003742:	0003      	movs	r3, r0
 8003744:	2b20      	cmp	r3, #32
 8003746:	d105      	bne.n	8003754 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2284      	movs	r2, #132	@ 0x84
 800374c:	2110      	movs	r1, #16
 800374e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e007      	b.n	8003764 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2252      	movs	r2, #82	@ 0x52
 8003758:	2100      	movs	r1, #0
 800375a:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b00a      	add	sp, #40	@ 0x28
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b092      	sub	sp, #72	@ 0x48
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	623b      	str	r3, [r7, #32]
  return(result);
 800377a:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377c:	647b      	str	r3, [r7, #68]	@ 0x44
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	494b      	ldr	r1, [pc, #300]	@ (80038c4 <HAL_UART_AbortReceive+0x158>)
 8003796:	400a      	ands	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a6:	f3ef 8310 	mrs	r3, PRIMASK
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b0:	2301      	movs	r3, #1
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2101      	movs	r1, #1
 80037c8:	438a      	bics	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d118      	bne.n	8003812 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	617b      	str	r3, [r7, #20]
  return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80037e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ea:	2301      	movs	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2110      	movs	r1, #16
 8003802:	438a      	bics	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	4013      	ands	r3, r2
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d135      	bne.n	800388c <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	60bb      	str	r3, [r7, #8]
  return(result);
 8003826:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800382a:	2301      	movs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2140      	movs	r1, #64	@ 0x40
 8003842:	438a      	bics	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003866:	0018      	movs	r0, r3
 8003868:	f7fd fe1e 	bl	80014a8 <HAL_DMA_Abort>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d00d      	beq.n	800388c <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	0018      	movs	r0, r3
 8003876:	f7fd ff4c 	bl	8001712 <HAL_DMA_GetError>
 800387a:	0003      	movs	r3, r0
 800387c:	2b20      	cmp	r3, #32
 800387e:	d105      	bne.n	800388c <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2284      	movs	r2, #132	@ 0x84
 8003884:	2110      	movs	r1, #16
 8003886:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e017      	b.n	80038bc <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	225a      	movs	r2, #90	@ 0x5a
 8003890:	2100      	movs	r1, #0
 8003892:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	220f      	movs	r2, #15
 800389a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2108      	movs	r1, #8
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	2120      	movs	r1, #32
 80038b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b012      	add	sp, #72	@ 0x48
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fffffedf 	.word	0xfffffedf

080038c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b0ab      	sub	sp, #172	@ 0xac
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	22a4      	movs	r2, #164	@ 0xa4
 80038d8:	18b9      	adds	r1, r7, r2
 80038da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	20a0      	movs	r0, #160	@ 0xa0
 80038e4:	1839      	adds	r1, r7, r0
 80038e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	219c      	movs	r1, #156	@ 0x9c
 80038f0:	1879      	adds	r1, r7, r1
 80038f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038f4:	0011      	movs	r1, r2
 80038f6:	18bb      	adds	r3, r7, r2
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a99      	ldr	r2, [pc, #612]	@ (8003b60 <HAL_UART_IRQHandler+0x298>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	2298      	movs	r2, #152	@ 0x98
 8003900:	18bc      	adds	r4, r7, r2
 8003902:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003904:	18bb      	adds	r3, r7, r2
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d114      	bne.n	8003936 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800390c:	187b      	adds	r3, r7, r1
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2220      	movs	r2, #32
 8003912:	4013      	ands	r3, r2
 8003914:	d00f      	beq.n	8003936 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003916:	183b      	adds	r3, r7, r0
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2220      	movs	r2, #32
 800391c:	4013      	ands	r3, r2
 800391e:	d00a      	beq.n	8003936 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003924:	2b00      	cmp	r3, #0
 8003926:	d100      	bne.n	800392a <HAL_UART_IRQHandler+0x62>
 8003928:	e2be      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	0010      	movs	r0, r2
 8003932:	4798      	blx	r3
      }
      return;
 8003934:	e2b8      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003936:	2398      	movs	r3, #152	@ 0x98
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d100      	bne.n	8003942 <HAL_UART_IRQHandler+0x7a>
 8003940:	e114      	b.n	8003b6c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003942:	239c      	movs	r3, #156	@ 0x9c
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4013      	ands	r3, r2
 800394c:	d106      	bne.n	800395c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800394e:	23a0      	movs	r3, #160	@ 0xa0
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a83      	ldr	r2, [pc, #524]	@ (8003b64 <HAL_UART_IRQHandler+0x29c>)
 8003956:	4013      	ands	r3, r2
 8003958:	d100      	bne.n	800395c <HAL_UART_IRQHandler+0x94>
 800395a:	e107      	b.n	8003b6c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800395c:	23a4      	movs	r3, #164	@ 0xa4
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d012      	beq.n	800398e <HAL_UART_IRQHandler+0xc6>
 8003968:	23a0      	movs	r3, #160	@ 0xa0
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4013      	ands	r3, r2
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2201      	movs	r2, #1
 800397c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2284      	movs	r2, #132	@ 0x84
 8003982:	589b      	ldr	r3, [r3, r2]
 8003984:	2201      	movs	r2, #1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2184      	movs	r1, #132	@ 0x84
 800398c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398e:	23a4      	movs	r3, #164	@ 0xa4
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	d011      	beq.n	80039be <HAL_UART_IRQHandler+0xf6>
 800399a:	239c      	movs	r3, #156	@ 0x9c
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4013      	ands	r3, r2
 80039a4:	d00b      	beq.n	80039be <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2202      	movs	r2, #2
 80039ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2284      	movs	r2, #132	@ 0x84
 80039b2:	589b      	ldr	r3, [r3, r2]
 80039b4:	2204      	movs	r2, #4
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2184      	movs	r1, #132	@ 0x84
 80039bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039be:	23a4      	movs	r3, #164	@ 0xa4
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2204      	movs	r2, #4
 80039c6:	4013      	ands	r3, r2
 80039c8:	d011      	beq.n	80039ee <HAL_UART_IRQHandler+0x126>
 80039ca:	239c      	movs	r3, #156	@ 0x9c
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2204      	movs	r2, #4
 80039dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2284      	movs	r2, #132	@ 0x84
 80039e2:	589b      	ldr	r3, [r3, r2]
 80039e4:	2202      	movs	r2, #2
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2184      	movs	r1, #132	@ 0x84
 80039ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ee:	23a4      	movs	r3, #164	@ 0xa4
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2208      	movs	r2, #8
 80039f6:	4013      	ands	r3, r2
 80039f8:	d017      	beq.n	8003a2a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fa:	23a0      	movs	r3, #160	@ 0xa0
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2220      	movs	r2, #32
 8003a02:	4013      	ands	r3, r2
 8003a04:	d105      	bne.n	8003a12 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a06:	239c      	movs	r3, #156	@ 0x9c
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2208      	movs	r2, #8
 8003a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2284      	movs	r2, #132	@ 0x84
 8003a1e:	589b      	ldr	r3, [r3, r2]
 8003a20:	2208      	movs	r2, #8
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2184      	movs	r1, #132	@ 0x84
 8003a28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a2a:	23a4      	movs	r3, #164	@ 0xa4
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4013      	ands	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_UART_IRQHandler+0x198>
 8003a38:	23a0      	movs	r3, #160	@ 0xa0
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	04db      	lsls	r3, r3, #19
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00c      	beq.n	8003a60 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2280      	movs	r2, #128	@ 0x80
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2284      	movs	r2, #132	@ 0x84
 8003a54:	589b      	ldr	r3, [r3, r2]
 8003a56:	2220      	movs	r2, #32
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2184      	movs	r1, #132	@ 0x84
 8003a5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2284      	movs	r2, #132	@ 0x84
 8003a64:	589b      	ldr	r3, [r3, r2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d100      	bne.n	8003a6c <HAL_UART_IRQHandler+0x1a4>
 8003a6a:	e21f      	b.n	8003eac <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a6c:	23a4      	movs	r3, #164	@ 0xa4
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a78:	23a0      	movs	r3, #160	@ 0xa0
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4013      	ands	r3, r2
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	0010      	movs	r0, r2
 8003a94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2284      	movs	r2, #132	@ 0x84
 8003a9a:	589b      	ldr	r3, [r3, r2]
 8003a9c:	2194      	movs	r1, #148	@ 0x94
 8003a9e:	187a      	adds	r2, r7, r1
 8003aa0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2240      	movs	r2, #64	@ 0x40
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b40      	cmp	r3, #64	@ 0x40
 8003aae:	d004      	beq.n	8003aba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2228      	movs	r2, #40	@ 0x28
 8003ab6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ab8:	d047      	beq.n	8003b4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 ff6f 	bl	80049a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2240      	movs	r2, #64	@ 0x40
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d137      	bne.n	8003b40 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad8:	2090      	movs	r0, #144	@ 0x90
 8003ada:	183a      	adds	r2, r7, r0
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	2301      	movs	r3, #1
 8003ae0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	@ 0x40
 8003af6:	438a      	bics	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d012      	beq.n	8003b36 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b14:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <HAL_UART_IRQHandler+0x2a0>)
 8003b16:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7fd fd03 	bl	8001528 <HAL_DMA_Abort_IT>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d01a      	beq.n	8003b5c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b30:	0018      	movs	r0, r3
 8003b32:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e012      	b.n	8003b5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7fd f825 	bl	8000b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3e:	e00d      	b.n	8003b5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7fd f820 	bl	8000b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e008      	b.n	8003b5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7fd f81b 	bl	8000b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2284      	movs	r2, #132	@ 0x84
 8003b56:	2100      	movs	r1, #0
 8003b58:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b5a:	e1a7      	b.n	8003eac <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b5e:	e1a5      	b.n	8003eac <HAL_UART_IRQHandler+0x5e4>
 8003b60:	0000080f 	.word	0x0000080f
 8003b64:	04000120 	.word	0x04000120
 8003b68:	08004d8b 	.word	0x08004d8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d000      	beq.n	8003b76 <HAL_UART_IRQHandler+0x2ae>
 8003b74:	e159      	b.n	8003e2a <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b76:	23a4      	movs	r3, #164	@ 0xa4
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_UART_IRQHandler+0x2bc>
 8003b82:	e152      	b.n	8003e2a <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b84:	23a0      	movs	r3, #160	@ 0xa0
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <HAL_UART_IRQHandler+0x2ca>
 8003b90:	e14b      	b.n	8003e2a <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2210      	movs	r2, #16
 8003b98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2240      	movs	r2, #64	@ 0x40
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b40      	cmp	r3, #64	@ 0x40
 8003ba6:	d000      	beq.n	8003baa <HAL_UART_IRQHandler+0x2e2>
 8003ba8:	e0bf      	b.n	8003d2a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	217e      	movs	r1, #126	@ 0x7e
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d100      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x2fa>
 8003bc0:	e095      	b.n	8003cee <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2258      	movs	r2, #88	@ 0x58
 8003bc6:	5a9b      	ldrh	r3, [r3, r2]
 8003bc8:	187a      	adds	r2, r7, r1
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d300      	bcc.n	8003bd2 <HAL_UART_IRQHandler+0x30a>
 8003bd0:	e08d      	b.n	8003cee <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	187a      	adds	r2, r7, r1
 8003bd6:	215a      	movs	r1, #90	@ 0x5a
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2220      	movs	r2, #32
 8003be6:	4013      	ands	r3, r2
 8003be8:	d16f      	bne.n	8003cca <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bea:	f3ef 8310 	mrs	r3, PRIMASK
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	49ad      	ldr	r1, [pc, #692]	@ (8003ec0 <HAL_UART_IRQHandler+0x5f8>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c26:	2301      	movs	r3, #1
 8003c28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	438a      	bics	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c58:	2301      	movs	r3, #1
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2140      	movs	r1, #64	@ 0x40
 8003c70:	438a      	bics	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	2120      	movs	r1, #32
 8003c86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c98:	2301      	movs	r3, #1
 8003c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2110      	movs	r1, #16
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fd fbef 	bl	80014a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2258      	movs	r2, #88	@ 0x58
 8003cd4:	5a9a      	ldrh	r2, [r3, r2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	215a      	movs	r1, #90	@ 0x5a
 8003cda:	5a5b      	ldrh	r3, [r3, r1]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fc ff32 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003cec:	e0e0      	b.n	8003eb0 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2258      	movs	r2, #88	@ 0x58
 8003cf2:	5a9b      	ldrh	r3, [r3, r2]
 8003cf4:	227e      	movs	r2, #126	@ 0x7e
 8003cf6:	18ba      	adds	r2, r7, r2
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d000      	beq.n	8003d00 <HAL_UART_IRQHandler+0x438>
 8003cfe:	e0d7      	b.n	8003eb0 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d000      	beq.n	8003d12 <HAL_UART_IRQHandler+0x44a>
 8003d10:	e0ce      	b.n	8003eb0 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2258      	movs	r2, #88	@ 0x58
 8003d1c:	5a9a      	ldrh	r2, [r3, r2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0011      	movs	r1, r2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7fc ff14 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
      return;
 8003d28:	e0c2      	b.n	8003eb0 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2258      	movs	r2, #88	@ 0x58
 8003d2e:	5a99      	ldrh	r1, [r3, r2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	225a      	movs	r2, #90	@ 0x5a
 8003d34:	5a9b      	ldrh	r3, [r3, r2]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	208e      	movs	r0, #142	@ 0x8e
 8003d3a:	183b      	adds	r3, r7, r0
 8003d3c:	1a8a      	subs	r2, r1, r2
 8003d3e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	225a      	movs	r2, #90	@ 0x5a
 8003d44:	5a9b      	ldrh	r3, [r3, r2]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d100      	bne.n	8003d4e <HAL_UART_IRQHandler+0x486>
 8003d4c:	e0b2      	b.n	8003eb4 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003d4e:	183b      	adds	r3, r7, r0
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <HAL_UART_IRQHandler+0x490>
 8003d56:	e0ad      	b.n	8003eb4 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d58:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	2488      	movs	r4, #136	@ 0x88
 8003d62:	193a      	adds	r2, r7, r4
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	2301      	movs	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4951      	ldr	r1, [pc, #324]	@ (8003ec4 <HAL_UART_IRQHandler+0x5fc>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d90:	f3ef 8310 	mrs	r3, PRIMASK
 8003d94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d96:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	2484      	movs	r4, #132	@ 0x84
 8003d9a:	193a      	adds	r2, r7, r4
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	438a      	bics	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2280      	movs	r2, #128	@ 0x80
 8003dcc:	2120      	movs	r1, #32
 8003dce:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	2480      	movs	r4, #128	@ 0x80
 8003de6:	193a      	adds	r2, r7, r4
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	2301      	movs	r3, #1
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	f383 8810 	msr	PRIMASK, r3
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2110      	movs	r1, #16
 8003e02:	438a      	bics	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7fc fe94 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e28:	e044      	b.n	8003eb4 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e2a:	23a4      	movs	r3, #164	@ 0xa4
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	035b      	lsls	r3, r3, #13
 8003e34:	4013      	ands	r3, r2
 8003e36:	d010      	beq.n	8003e5a <HAL_UART_IRQHandler+0x592>
 8003e38:	239c      	movs	r3, #156	@ 0x9c
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	03db      	lsls	r3, r3, #15
 8003e42:	4013      	ands	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	0352      	lsls	r2, r2, #13
 8003e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 ffd7 	bl	8004e06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e58:	e02f      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e5a:	23a4      	movs	r3, #164	@ 0xa4
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	@ 0x80
 8003e62:	4013      	ands	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e66:	23a0      	movs	r3, #160	@ 0xa0
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2280      	movs	r2, #128	@ 0x80
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01e      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	0010      	movs	r0, r2
 8003e82:	4798      	blx	r3
    }
    return;
 8003e84:	e018      	b.n	8003eb8 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e86:	23a4      	movs	r3, #164	@ 0xa4
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_UART_IRQHandler+0x5f2>
 8003e92:	23a0      	movs	r3, #160	@ 0xa0
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2240      	movs	r2, #64	@ 0x40
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 ff85 	bl	8004db0 <UART_EndTransmit_IT>
    return;
 8003ea6:	e008      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
      return;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	e006      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
    return;
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	e004      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
      return;
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	e002      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
      return;
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	e000      	b.n	8003eba <HAL_UART_IRQHandler+0x5f2>
    return;
 8003eb8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b02b      	add	sp, #172	@ 0xac
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	fffffeff 	.word	0xfffffeff
 8003ec4:	fffffedf 	.word	0xfffffedf

08003ec8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f14:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b004      	add	sp, #16
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2284      	movs	r2, #132	@ 0x84
 8003f38:	589b      	ldr	r3, [r3, r2]
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b5b0      	push	{r4, r5, r7, lr}
 8003f46:	b08e      	sub	sp, #56	@ 0x38
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f4c:	231a      	movs	r3, #26
 8003f4e:	2218      	movs	r2, #24
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	19db      	adds	r3, r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4ac3      	ldr	r2, [pc, #780]	@ (8004284 <UART_SetConfig+0x340>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4abe      	ldr	r2, [pc, #760]	@ (8004288 <UART_SetConfig+0x344>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4ab8      	ldr	r2, [pc, #736]	@ (800428c <UART_SetConfig+0x348>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4ab4      	ldr	r2, [pc, #720]	@ (8004290 <UART_SetConfig+0x34c>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4ab0      	ldr	r2, [pc, #704]	@ (8004294 <UART_SetConfig+0x350>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d131      	bne.n	800403c <UART_SetConfig+0xf8>
 8003fd8:	4baf      	ldr	r3, [pc, #700]	@ (8004298 <UART_SetConfig+0x354>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fdc:	2203      	movs	r2, #3
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d01d      	beq.n	8004020 <UART_SetConfig+0xdc>
 8003fe4:	d823      	bhi.n	800402e <UART_SetConfig+0xea>
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d00c      	beq.n	8004004 <UART_SetConfig+0xc0>
 8003fea:	d820      	bhi.n	800402e <UART_SetConfig+0xea>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <UART_SetConfig+0xb2>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d00e      	beq.n	8004012 <UART_SetConfig+0xce>
 8003ff4:	e01b      	b.n	800402e <UART_SetConfig+0xea>
 8003ff6:	231b      	movs	r3, #27
 8003ff8:	2218      	movs	r2, #24
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	19db      	adds	r3, r3, r7
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e0b4      	b.n	800416e <UART_SetConfig+0x22a>
 8004004:	231b      	movs	r3, #27
 8004006:	2218      	movs	r2, #24
 8004008:	189b      	adds	r3, r3, r2
 800400a:	19db      	adds	r3, r3, r7
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e0ad      	b.n	800416e <UART_SetConfig+0x22a>
 8004012:	231b      	movs	r3, #27
 8004014:	2218      	movs	r2, #24
 8004016:	189b      	adds	r3, r3, r2
 8004018:	19db      	adds	r3, r3, r7
 800401a:	2204      	movs	r2, #4
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e0a6      	b.n	800416e <UART_SetConfig+0x22a>
 8004020:	231b      	movs	r3, #27
 8004022:	2218      	movs	r2, #24
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19db      	adds	r3, r3, r7
 8004028:	2208      	movs	r2, #8
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e09f      	b.n	800416e <UART_SetConfig+0x22a>
 800402e:	231b      	movs	r3, #27
 8004030:	2218      	movs	r2, #24
 8004032:	189b      	adds	r3, r3, r2
 8004034:	19db      	adds	r3, r3, r7
 8004036:	2210      	movs	r2, #16
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e098      	b.n	800416e <UART_SetConfig+0x22a>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a96      	ldr	r2, [pc, #600]	@ (800429c <UART_SetConfig+0x358>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d131      	bne.n	80040aa <UART_SetConfig+0x166>
 8004046:	4b94      	ldr	r3, [pc, #592]	@ (8004298 <UART_SetConfig+0x354>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404a:	220c      	movs	r2, #12
 800404c:	4013      	ands	r3, r2
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d01d      	beq.n	800408e <UART_SetConfig+0x14a>
 8004052:	d823      	bhi.n	800409c <UART_SetConfig+0x158>
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00c      	beq.n	8004072 <UART_SetConfig+0x12e>
 8004058:	d820      	bhi.n	800409c <UART_SetConfig+0x158>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <UART_SetConfig+0x120>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00e      	beq.n	8004080 <UART_SetConfig+0x13c>
 8004062:	e01b      	b.n	800409c <UART_SetConfig+0x158>
 8004064:	231b      	movs	r3, #27
 8004066:	2218      	movs	r2, #24
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e07d      	b.n	800416e <UART_SetConfig+0x22a>
 8004072:	231b      	movs	r3, #27
 8004074:	2218      	movs	r2, #24
 8004076:	189b      	adds	r3, r3, r2
 8004078:	19db      	adds	r3, r3, r7
 800407a:	2202      	movs	r2, #2
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	e076      	b.n	800416e <UART_SetConfig+0x22a>
 8004080:	231b      	movs	r3, #27
 8004082:	2218      	movs	r2, #24
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	2204      	movs	r2, #4
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e06f      	b.n	800416e <UART_SetConfig+0x22a>
 800408e:	231b      	movs	r3, #27
 8004090:	2218      	movs	r2, #24
 8004092:	189b      	adds	r3, r3, r2
 8004094:	19db      	adds	r3, r3, r7
 8004096:	2208      	movs	r2, #8
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e068      	b.n	800416e <UART_SetConfig+0x22a>
 800409c:	231b      	movs	r3, #27
 800409e:	2218      	movs	r2, #24
 80040a0:	189b      	adds	r3, r3, r2
 80040a2:	19db      	adds	r3, r3, r7
 80040a4:	2210      	movs	r2, #16
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e061      	b.n	800416e <UART_SetConfig+0x22a>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7c      	ldr	r2, [pc, #496]	@ (80042a0 <UART_SetConfig+0x35c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d106      	bne.n	80040c2 <UART_SetConfig+0x17e>
 80040b4:	231b      	movs	r3, #27
 80040b6:	2218      	movs	r2, #24
 80040b8:	189b      	adds	r3, r3, r2
 80040ba:	19db      	adds	r3, r3, r7
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e055      	b.n	800416e <UART_SetConfig+0x22a>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a77      	ldr	r2, [pc, #476]	@ (80042a4 <UART_SetConfig+0x360>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d106      	bne.n	80040da <UART_SetConfig+0x196>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2218      	movs	r2, #24
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e049      	b.n	800416e <UART_SetConfig+0x22a>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6b      	ldr	r2, [pc, #428]	@ (800428c <UART_SetConfig+0x348>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d13e      	bne.n	8004162 <UART_SetConfig+0x21e>
 80040e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004298 <UART_SetConfig+0x354>)
 80040e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040e8:	23c0      	movs	r3, #192	@ 0xc0
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4013      	ands	r3, r2
 80040ee:	22c0      	movs	r2, #192	@ 0xc0
 80040f0:	0112      	lsls	r2, r2, #4
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <UART_SetConfig+0x202>
 80040f6:	22c0      	movs	r2, #192	@ 0xc0
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d82a      	bhi.n	8004154 <UART_SetConfig+0x210>
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	4293      	cmp	r3, r2
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0x1e6>
 8004106:	2280      	movs	r2, #128	@ 0x80
 8004108:	0112      	lsls	r2, r2, #4
 800410a:	4293      	cmp	r3, r2
 800410c:	d822      	bhi.n	8004154 <UART_SetConfig+0x210>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <UART_SetConfig+0x1d8>
 8004112:	2280      	movs	r2, #128	@ 0x80
 8004114:	00d2      	lsls	r2, r2, #3
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <UART_SetConfig+0x1f4>
 800411a:	e01b      	b.n	8004154 <UART_SetConfig+0x210>
 800411c:	231b      	movs	r3, #27
 800411e:	2218      	movs	r2, #24
 8004120:	189b      	adds	r3, r3, r2
 8004122:	19db      	adds	r3, r3, r7
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e021      	b.n	800416e <UART_SetConfig+0x22a>
 800412a:	231b      	movs	r3, #27
 800412c:	2218      	movs	r2, #24
 800412e:	189b      	adds	r3, r3, r2
 8004130:	19db      	adds	r3, r3, r7
 8004132:	2202      	movs	r2, #2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e01a      	b.n	800416e <UART_SetConfig+0x22a>
 8004138:	231b      	movs	r3, #27
 800413a:	2218      	movs	r2, #24
 800413c:	189b      	adds	r3, r3, r2
 800413e:	19db      	adds	r3, r3, r7
 8004140:	2204      	movs	r2, #4
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e013      	b.n	800416e <UART_SetConfig+0x22a>
 8004146:	231b      	movs	r3, #27
 8004148:	2218      	movs	r2, #24
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	2208      	movs	r2, #8
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e00c      	b.n	800416e <UART_SetConfig+0x22a>
 8004154:	231b      	movs	r3, #27
 8004156:	2218      	movs	r2, #24
 8004158:	189b      	adds	r3, r3, r2
 800415a:	19db      	adds	r3, r3, r7
 800415c:	2210      	movs	r2, #16
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e005      	b.n	800416e <UART_SetConfig+0x22a>
 8004162:	231b      	movs	r3, #27
 8004164:	2218      	movs	r2, #24
 8004166:	189b      	adds	r3, r3, r2
 8004168:	19db      	adds	r3, r3, r7
 800416a:	2210      	movs	r2, #16
 800416c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a46      	ldr	r2, [pc, #280]	@ (800428c <UART_SetConfig+0x348>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d000      	beq.n	800417a <UART_SetConfig+0x236>
 8004178:	e09a      	b.n	80042b0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800417a:	231b      	movs	r3, #27
 800417c:	2218      	movs	r2, #24
 800417e:	189b      	adds	r3, r3, r2
 8004180:	19db      	adds	r3, r3, r7
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d01d      	beq.n	80041c4 <UART_SetConfig+0x280>
 8004188:	dc20      	bgt.n	80041cc <UART_SetConfig+0x288>
 800418a:	2b04      	cmp	r3, #4
 800418c:	d015      	beq.n	80041ba <UART_SetConfig+0x276>
 800418e:	dc1d      	bgt.n	80041cc <UART_SetConfig+0x288>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <UART_SetConfig+0x256>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d005      	beq.n	80041a4 <UART_SetConfig+0x260>
 8004198:	e018      	b.n	80041cc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419a:	f7fe fbd5 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 800419e:	0003      	movs	r3, r0
 80041a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041a2:	e01c      	b.n	80041de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <UART_SetConfig+0x354>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2210      	movs	r2, #16
 80041aa:	4013      	ands	r3, r2
 80041ac:	d002      	beq.n	80041b4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041ae:	4b3e      	ldr	r3, [pc, #248]	@ (80042a8 <UART_SetConfig+0x364>)
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041b2:	e014      	b.n	80041de <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <UART_SetConfig+0x368>)
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041b8:	e011      	b.n	80041de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7fe fb35 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80041be:	0003      	movs	r3, r0
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041c2:	e00c      	b.n	80041de <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041ca:	e008      	b.n	80041de <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80041d0:	231a      	movs	r3, #26
 80041d2:	2218      	movs	r2, #24
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
        break;
 80041dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d100      	bne.n	80041e6 <UART_SetConfig+0x2a2>
 80041e4:	e133      	b.n	800444e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	0013      	movs	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d305      	bcc.n	8004202 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d906      	bls.n	8004210 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004202:	231a      	movs	r3, #26
 8004204:	2218      	movs	r2, #24
 8004206:	189b      	adds	r3, r3, r2
 8004208:	19db      	adds	r3, r3, r7
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e11e      	b.n	800444e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	6939      	ldr	r1, [r7, #16]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	000b      	movs	r3, r1
 800421e:	0e1b      	lsrs	r3, r3, #24
 8004220:	0010      	movs	r0, r2
 8004222:	0205      	lsls	r5, r0, #8
 8004224:	431d      	orrs	r5, r3
 8004226:	000b      	movs	r3, r1
 8004228:	021c      	lsls	r4, r3, #8
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68b8      	ldr	r0, [r7, #8]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	1900      	adds	r0, r0, r4
 800423c:	4169      	adcs	r1, r5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f7fb fff0 	bl	8000230 <__aeabi_uldivmod>
 8004250:	0002      	movs	r2, r0
 8004252:	000b      	movs	r3, r1
 8004254:	0013      	movs	r3, r2
 8004256:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800425a:	23c0      	movs	r3, #192	@ 0xc0
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	429a      	cmp	r2, r3
 8004260:	d309      	bcc.n	8004276 <UART_SetConfig+0x332>
 8004262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	035b      	lsls	r3, r3, #13
 8004268:	429a      	cmp	r2, r3
 800426a:	d204      	bcs.n	8004276 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	e0eb      	b.n	800444e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004276:	231a      	movs	r3, #26
 8004278:	2218      	movs	r2, #24
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e0e4      	b.n	800444e <UART_SetConfig+0x50a>
 8004284:	efff69f3 	.word	0xefff69f3
 8004288:	ffffcfff 	.word	0xffffcfff
 800428c:	40004800 	.word	0x40004800
 8004290:	fffff4ff 	.word	0xfffff4ff
 8004294:	40013800 	.word	0x40013800
 8004298:	40021000 	.word	0x40021000
 800429c:	40004400 	.word	0x40004400
 80042a0:	40004c00 	.word	0x40004c00
 80042a4:	40005000 	.word	0x40005000
 80042a8:	003d0900 	.word	0x003d0900
 80042ac:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d000      	beq.n	80042be <UART_SetConfig+0x37a>
 80042bc:	e070      	b.n	80043a0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80042be:	231b      	movs	r3, #27
 80042c0:	2218      	movs	r2, #24
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	19db      	adds	r3, r3, r7
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d822      	bhi.n	8004312 <UART_SetConfig+0x3ce>
 80042cc:	009a      	lsls	r2, r3, #2
 80042ce:	4b67      	ldr	r3, [pc, #412]	@ (800446c <UART_SetConfig+0x528>)
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d6:	f7fe fb37 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 80042da:	0003      	movs	r3, r0
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042de:	e021      	b.n	8004324 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe fb48 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 80042e4:	0003      	movs	r3, r0
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042e8:	e01c      	b.n	8004324 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ea:	4b61      	ldr	r3, [pc, #388]	@ (8004470 <UART_SetConfig+0x52c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2210      	movs	r2, #16
 80042f0:	4013      	ands	r3, r2
 80042f2:	d002      	beq.n	80042fa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042f4:	4b5f      	ldr	r3, [pc, #380]	@ (8004474 <UART_SetConfig+0x530>)
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042f8:	e014      	b.n	8004324 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80042fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004478 <UART_SetConfig+0x534>)
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042fe:	e011      	b.n	8004324 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004300:	f7fe fa92 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8004304:	0003      	movs	r3, r0
 8004306:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004308:	e00c      	b.n	8004324 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004310:	e008      	b.n	8004324 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004316:	231a      	movs	r3, #26
 8004318:	2218      	movs	r2, #24
 800431a:	189b      	adds	r3, r3, r2
 800431c:	19db      	adds	r3, r3, r7
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
        break;
 8004322:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d100      	bne.n	800432c <UART_SetConfig+0x3e8>
 800432a:	e090      	b.n	800444e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432e:	005a      	lsls	r2, r3, #1
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	18d2      	adds	r2, r2, r3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0019      	movs	r1, r3
 800433e:	0010      	movs	r0, r2
 8004340:	f7fb feea 	bl	8000118 <__udivsi3>
 8004344:	0003      	movs	r3, r0
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d921      	bls.n	8004392 <UART_SetConfig+0x44e>
 800434e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	025b      	lsls	r3, r3, #9
 8004354:	429a      	cmp	r2, r3
 8004356:	d21c      	bcs.n	8004392 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	b29a      	uxth	r2, r3
 800435c:	200e      	movs	r0, #14
 800435e:	2418      	movs	r4, #24
 8004360:	1903      	adds	r3, r0, r4
 8004362:	19db      	adds	r3, r3, r7
 8004364:	210f      	movs	r1, #15
 8004366:	438a      	bics	r2, r1
 8004368:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	2207      	movs	r2, #7
 8004372:	4013      	ands	r3, r2
 8004374:	b299      	uxth	r1, r3
 8004376:	1903      	adds	r3, r0, r4
 8004378:	19db      	adds	r3, r3, r7
 800437a:	1902      	adds	r2, r0, r4
 800437c:	19d2      	adds	r2, r2, r7
 800437e:	8812      	ldrh	r2, [r2, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1902      	adds	r2, r0, r4
 800438a:	19d2      	adds	r2, r2, r7
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	e05d      	b.n	800444e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004392:	231a      	movs	r3, #26
 8004394:	2218      	movs	r2, #24
 8004396:	189b      	adds	r3, r3, r2
 8004398:	19db      	adds	r3, r3, r7
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e056      	b.n	800444e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a0:	231b      	movs	r3, #27
 80043a2:	2218      	movs	r2, #24
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d822      	bhi.n	80043f4 <UART_SetConfig+0x4b0>
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	4b32      	ldr	r3, [pc, #200]	@ (800447c <UART_SetConfig+0x538>)
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7fe fac6 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 80043bc:	0003      	movs	r3, r0
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043c0:	e021      	b.n	8004406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c2:	f7fe fad7 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 80043c6:	0003      	movs	r3, r0
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043ca:	e01c      	b.n	8004406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043cc:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <UART_SetConfig+0x52c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2210      	movs	r2, #16
 80043d2:	4013      	ands	r3, r2
 80043d4:	d002      	beq.n	80043dc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043d6:	4b27      	ldr	r3, [pc, #156]	@ (8004474 <UART_SetConfig+0x530>)
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043da:	e014      	b.n	8004406 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80043dc:	4b26      	ldr	r3, [pc, #152]	@ (8004478 <UART_SetConfig+0x534>)
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043e0:	e011      	b.n	8004406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe fa21 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80043e6:	0003      	movs	r3, r0
 80043e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043ea:	e00c      	b.n	8004406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ec:	2380      	movs	r3, #128	@ 0x80
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043f2:	e008      	b.n	8004406 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80043f8:	231a      	movs	r3, #26
 80043fa:	2218      	movs	r2, #24
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
        break;
 8004404:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	085a      	lsrs	r2, r3, #1
 8004412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004414:	18d2      	adds	r2, r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f7fb fe7b 	bl	8000118 <__udivsi3>
 8004422:	0003      	movs	r3, r0
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d90a      	bls.n	8004442 <UART_SetConfig+0x4fe>
 800442c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	429a      	cmp	r2, r3
 8004434:	d205      	bcs.n	8004442 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004438:	b29a      	uxth	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e005      	b.n	800444e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004442:	231a      	movs	r3, #26
 8004444:	2218      	movs	r2, #24
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2200      	movs	r2, #0
 8004452:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2200      	movs	r2, #0
 8004458:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800445a:	231a      	movs	r3, #26
 800445c:	2218      	movs	r2, #24
 800445e:	189b      	adds	r3, r3, r2
 8004460:	19db      	adds	r3, r3, r7
 8004462:	781b      	ldrb	r3, [r3, #0]
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b00e      	add	sp, #56	@ 0x38
 800446a:	bdb0      	pop	{r4, r5, r7, pc}
 800446c:	08005abc 	.word	0x08005abc
 8004470:	40021000 	.word	0x40021000
 8004474:	003d0900 	.word	0x003d0900
 8004478:	00f42400 	.word	0x00f42400
 800447c:	08005ae0 	.word	0x08005ae0

08004480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	2208      	movs	r2, #8
 800448e:	4013      	ands	r3, r2
 8004490:	d00b      	beq.n	80044aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a4a      	ldr	r2, [pc, #296]	@ (80045c4 <UART_AdvFeatureConfig+0x144>)
 800449a:	4013      	ands	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	2201      	movs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	d00b      	beq.n	80044cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4a43      	ldr	r2, [pc, #268]	@ (80045c8 <UART_AdvFeatureConfig+0x148>)
 80044bc:	4013      	ands	r3, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	2202      	movs	r2, #2
 80044d2:	4013      	ands	r3, r2
 80044d4:	d00b      	beq.n	80044ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a3b      	ldr	r2, [pc, #236]	@ (80045cc <UART_AdvFeatureConfig+0x14c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	2204      	movs	r2, #4
 80044f4:	4013      	ands	r3, r2
 80044f6:	d00b      	beq.n	8004510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4a34      	ldr	r2, [pc, #208]	@ (80045d0 <UART_AdvFeatureConfig+0x150>)
 8004500:	4013      	ands	r3, r2
 8004502:	0019      	movs	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	2210      	movs	r2, #16
 8004516:	4013      	ands	r3, r2
 8004518:	d00b      	beq.n	8004532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a2c      	ldr	r2, [pc, #176]	@ (80045d4 <UART_AdvFeatureConfig+0x154>)
 8004522:	4013      	ands	r3, r2
 8004524:	0019      	movs	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	2220      	movs	r2, #32
 8004538:	4013      	ands	r3, r2
 800453a:	d00b      	beq.n	8004554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	4a25      	ldr	r2, [pc, #148]	@ (80045d8 <UART_AdvFeatureConfig+0x158>)
 8004544:	4013      	ands	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	2240      	movs	r2, #64	@ 0x40
 800455a:	4013      	ands	r3, r2
 800455c:	d01d      	beq.n	800459a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <UART_AdvFeatureConfig+0x15c>)
 8004566:	4013      	ands	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	035b      	lsls	r3, r3, #13
 800457e:	429a      	cmp	r2, r3
 8004580:	d10b      	bne.n	800459a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <UART_AdvFeatureConfig+0x160>)
 800458a:	4013      	ands	r3, r2
 800458c:	0019      	movs	r1, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	2280      	movs	r2, #128	@ 0x80
 80045a0:	4013      	ands	r3, r2
 80045a2:	d00b      	beq.n	80045bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4a0e      	ldr	r2, [pc, #56]	@ (80045e4 <UART_AdvFeatureConfig+0x164>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	ffff7fff 	.word	0xffff7fff
 80045c8:	fffdffff 	.word	0xfffdffff
 80045cc:	fffeffff 	.word	0xfffeffff
 80045d0:	fffbffff 	.word	0xfffbffff
 80045d4:	ffffefff 	.word	0xffffefff
 80045d8:	ffffdfff 	.word	0xffffdfff
 80045dc:	ffefffff 	.word	0xffefffff
 80045e0:	ff9fffff 	.word	0xff9fffff
 80045e4:	fff7ffff 	.word	0xfff7ffff

080045e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b092      	sub	sp, #72	@ 0x48
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2284      	movs	r2, #132	@ 0x84
 80045f4:	2100      	movs	r1, #0
 80045f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f8:	f7fc fd6c 	bl	80010d4 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2208      	movs	r2, #8
 8004608:	4013      	ands	r3, r2
 800460a:	2b08      	cmp	r3, #8
 800460c:	d12c      	bne.n	8004668 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800460e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004610:	2280      	movs	r2, #128	@ 0x80
 8004612:	0391      	lsls	r1, r2, #14
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4a46      	ldr	r2, [pc, #280]	@ (8004730 <UART_CheckIdleState+0x148>)
 8004618:	9200      	str	r2, [sp, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	f000 f88c 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d021      	beq.n	8004668 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004624:	f3ef 8310 	mrs	r3, PRIMASK
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800462c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800462e:	2301      	movs	r3, #1
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2180      	movs	r1, #128	@ 0x80
 8004646:	438a      	bics	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2278      	movs	r2, #120	@ 0x78
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e05f      	b.n	8004728 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2204      	movs	r2, #4
 8004670:	4013      	ands	r3, r2
 8004672:	2b04      	cmp	r3, #4
 8004674:	d146      	bne.n	8004704 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004678:	2280      	movs	r2, #128	@ 0x80
 800467a:	03d1      	lsls	r1, r2, #15
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <UART_CheckIdleState+0x148>)
 8004680:	9200      	str	r2, [sp, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	f000 f858 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d03b      	beq.n	8004704 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468c:	f3ef 8310 	mrs	r3, PRIMASK
 8004690:	60fb      	str	r3, [r7, #12]
  return(result);
 8004692:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
 8004696:	2301      	movs	r3, #1
 8004698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4921      	ldr	r1, [pc, #132]	@ (8004734 <UART_CheckIdleState+0x14c>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80046c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	2120      	movs	r1, #32
 80046f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2278      	movs	r2, #120	@ 0x78
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e011      	b.n	8004728 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	2120      	movs	r1, #32
 8004710:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2278      	movs	r2, #120	@ 0x78
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b010      	add	sp, #64	@ 0x40
 800472e:	bd80      	pop	{r7, pc}
 8004730:	01ffffff 	.word	0x01ffffff
 8004734:	fffffedf 	.word	0xfffffedf

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e051      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3301      	adds	r3, #1
 800474e:	d04e      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fc fcc0 	bl	80010d4 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e051      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2204      	movs	r2, #4
 8004772:	4013      	ands	r3, r2
 8004774:	d03b      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d038      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d035      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2208      	movs	r2, #8
 800478a:	4013      	ands	r3, r2
 800478c:	2b08      	cmp	r3, #8
 800478e:	d111      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	0018      	movs	r0, r3
 800479c:	f000 f900 	bl	80049a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2284      	movs	r2, #132	@ 0x84
 80047a4:	2108      	movs	r1, #8
 80047a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2278      	movs	r2, #120	@ 0x78
 80047ac:	2100      	movs	r1, #0
 80047ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e02c      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	401a      	ands	r2, r3
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d112      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2280      	movs	r2, #128	@ 0x80
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 f8e3 	bl	80049a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2284      	movs	r2, #132	@ 0x84
 80047de:	2120      	movs	r1, #32
 80047e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2278      	movs	r2, #120	@ 0x78
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e00f      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	425a      	negs	r2, r3
 80047fe:	4153      	adcs	r3, r2
 8004800:	b2db      	uxtb	r3, r3
 8004802:	001a      	movs	r2, r3
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d09e      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b004      	add	sp, #16
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b090      	sub	sp, #64	@ 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	1dbb      	adds	r3, r7, #6
 8004824:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1dba      	adds	r2, r7, #6
 8004830:	2158      	movs	r1, #88	@ 0x58
 8004832:	8812      	ldrh	r2, [r2, #0]
 8004834:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2284      	movs	r2, #132	@ 0x84
 800483a:	2100      	movs	r1, #0
 800483c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	2122      	movs	r1, #34	@ 0x22
 8004844:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004852:	4a3e      	ldr	r2, [pc, #248]	@ (800494c <UART_Start_Receive_DMA+0x134>)
 8004854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485a:	4a3d      	ldr	r2, [pc, #244]	@ (8004950 <UART_Start_Receive_DMA+0x138>)
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004862:	4a3c      	ldr	r2, [pc, #240]	@ (8004954 <UART_Start_Receive_DMA+0x13c>)
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486a:	2200      	movs	r2, #0
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3324      	adds	r3, #36	@ 0x24
 8004878:	0019      	movs	r1, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487e:	001a      	movs	r2, r3
 8004880:	1dbb      	adds	r3, r7, #6
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	f7fc fdaa 	bl	80013dc <HAL_DMA_Start_IT>
 8004888:	1e03      	subs	r3, r0, #0
 800488a:	d009      	beq.n	80048a0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2284      	movs	r2, #132	@ 0x84
 8004890:	2110      	movs	r1, #16
 8004892:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	2120      	movs	r1, #32
 800489a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e050      	b.n	8004942 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d019      	beq.n	80048dc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b2:	2301      	movs	r3, #1
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2180      	movs	r1, #128	@ 0x80
 80048ca:	0049      	lsls	r1, r1, #1
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8310 	mrs	r3, PRIMASK
 80048e0:	613b      	str	r3, [r7, #16]
  return(result);
 80048e2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f383 8810 	msr	PRIMASK, r3
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2101      	movs	r1, #1
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490e:	f3ef 8310 	mrs	r3, PRIMASK
 8004912:	61fb      	str	r3, [r7, #28]
  return(result);
 8004914:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
 8004918:	2301      	movs	r3, #1
 800491a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2140      	movs	r1, #64	@ 0x40
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b010      	add	sp, #64	@ 0x40
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	08004b21 	.word	0x08004b21
 8004950:	08004c89 	.word	0x08004c89
 8004954:	08004d07 	.word	0x08004d07

08004958 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	60bb      	str	r3, [r7, #8]
  return(result);
 8004966:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	2301      	movs	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	21c0      	movs	r1, #192	@ 0xc0
 8004982:	438a      	bics	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b006      	add	sp, #24
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	@ 0x38
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ac:	617b      	str	r3, [r7, #20]
  return(result);
 80049ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b2:	2301      	movs	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f383 8810 	msr	PRIMASK, r3
}
 80049bc:	46c0      	nop			@ (mov r8, r8)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4926      	ldr	r1, [pc, #152]	@ (8004a64 <UART_EndRxTransfer+0xc4>)
 80049ca:	400a      	ands	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f383 8810 	msr	PRIMASK, r3
}
 80049d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049da:	f3ef 8310 	mrs	r3, PRIMASK
 80049de:	623b      	str	r3, [r7, #32]
  return(result);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e4:	2301      	movs	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2101      	movs	r1, #1
 80049fc:	438a      	bics	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d118      	bne.n	8004a46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a14:	f3ef 8310 	mrs	r3, PRIMASK
 8004a18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1e:	2301      	movs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f383 8810 	msr	PRIMASK, r3
}
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2110      	movs	r1, #16
 8004a36:	438a      	bics	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2280      	movs	r2, #128	@ 0x80
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b00e      	add	sp, #56	@ 0x38
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	fffffedf 	.word	0xfffffedf

08004a68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	@ 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d135      	bne.n	8004aee <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a84:	2252      	movs	r2, #82	@ 0x52
 8004a86:	2100      	movs	r1, #0
 8004a88:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a90:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a94:	2301      	movs	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2180      	movs	r1, #128	@ 0x80
 8004aac:	438a      	bics	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f383 8810 	msr	PRIMASK, r3
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ac2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2140      	movs	r1, #64	@ 0x40
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	e004      	b.n	8004af8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff f9e9 	bl	8003ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b00c      	add	sp, #48	@ 0x30
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff f9e1 	bl	8003ed8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b094      	sub	sp, #80	@ 0x50
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2220      	movs	r2, #32
 8004b36:	4013      	ands	r3, r2
 8004b38:	d16f      	bne.n	8004c1a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b3c:	225a      	movs	r2, #90	@ 0x5a
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b42:	f3ef 8310 	mrs	r3, PRIMASK
 8004b46:	617b      	str	r3, [r7, #20]
  return(result);
 8004b48:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4948      	ldr	r1, [pc, #288]	@ (8004c84 <UART_DMAReceiveCplt+0x164>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	623b      	str	r3, [r7, #32]
  return(result);
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b7e:	2301      	movs	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2101      	movs	r1, #1
 8004b96:	438a      	bics	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2140      	movs	r1, #64	@ 0x40
 8004bc8:	438a      	bics	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bda:	2280      	movs	r2, #128	@ 0x80
 8004bdc:	2120      	movs	r1, #32
 8004bde:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d118      	bne.n	8004c1a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bee:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2110      	movs	r1, #16
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d124      	bne.n	8004c72 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2a:	225a      	movs	r2, #90	@ 0x5a
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	213a      	movs	r1, #58	@ 0x3a
 8004c38:	187b      	adds	r3, r7, r1
 8004c3a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3e:	2258      	movs	r2, #88	@ 0x58
 8004c40:	5a9b      	ldrh	r3, [r3, r2]
 8004c42:	187a      	adds	r2, r7, r1
 8004c44:	8812      	ldrh	r2, [r2, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d204      	bcs.n	8004c54 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4c:	187a      	adds	r2, r7, r1
 8004c4e:	215a      	movs	r1, #90	@ 0x5a
 8004c50:	8812      	ldrh	r2, [r2, #0]
 8004c52:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c56:	2258      	movs	r2, #88	@ 0x58
 8004c58:	5a9a      	ldrh	r2, [r3, r2]
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5c:	215a      	movs	r1, #90	@ 0x5a
 8004c5e:	5a5b      	ldrh	r3, [r3, r1]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	0011      	movs	r1, r2
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fb ff70 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c70:	e003      	b.n	8004c7a <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7ff f937 	bl	8003ee8 <HAL_UART_RxCpltCallback>
}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b014      	add	sp, #80	@ 0x50
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	fffffeff 	.word	0xfffffeff

08004c88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d128      	bne.n	8004cf6 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2258      	movs	r2, #88	@ 0x58
 8004ca8:	5a9b      	ldrh	r3, [r3, r2]
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	b299      	uxth	r1, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	225a      	movs	r2, #90	@ 0x5a
 8004cb2:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	210a      	movs	r1, #10
 8004cbc:	187b      	adds	r3, r7, r1
 8004cbe:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2258      	movs	r2, #88	@ 0x58
 8004cc4:	5a9b      	ldrh	r3, [r3, r2]
 8004cc6:	187a      	adds	r2, r7, r1
 8004cc8:	8812      	ldrh	r2, [r2, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d804      	bhi.n	8004cd8 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	187a      	adds	r2, r7, r1
 8004cd2:	215a      	movs	r1, #90	@ 0x5a
 8004cd4:	8812      	ldrh	r2, [r2, #0]
 8004cd6:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2258      	movs	r2, #88	@ 0x58
 8004cdc:	5a9a      	ldrh	r2, [r3, r2]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	215a      	movs	r1, #90	@ 0x5a
 8004ce2:	5a5b      	ldrh	r3, [r3, r1]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fb ff2e 	bl	8000b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cf4:	e003      	b.n	8004cfe <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f7ff f8fd 	bl	8003ef8 <HAL_UART_RxHalfCpltCallback>
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2280      	movs	r2, #128	@ 0x80
 8004d1e:	589b      	ldr	r3, [r3, r2]
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2280      	movs	r2, #128	@ 0x80
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b80      	cmp	r3, #128	@ 0x80
 8004d2e:	d10a      	bne.n	8004d46 <UART_DMAError+0x40>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b21      	cmp	r3, #33	@ 0x21
 8004d34:	d107      	bne.n	8004d46 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2252      	movs	r2, #82	@ 0x52
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7ff fe09 	bl	8004958 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2240      	movs	r2, #64	@ 0x40
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b40      	cmp	r3, #64	@ 0x40
 8004d52:	d10a      	bne.n	8004d6a <UART_DMAError+0x64>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b22      	cmp	r3, #34	@ 0x22
 8004d58:	d107      	bne.n	8004d6a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	225a      	movs	r2, #90	@ 0x5a
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7ff fe1b 	bl	80049a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2284      	movs	r2, #132	@ 0x84
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	2210      	movs	r2, #16
 8004d72:	431a      	orrs	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2184      	movs	r1, #132	@ 0x84
 8004d78:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7fb ff03 	bl	8000b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b006      	add	sp, #24
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	225a      	movs	r2, #90	@ 0x5a
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fb fef0 	bl	8000b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	438a      	bics	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff f865 	bl	8003ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b006      	add	sp, #24
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e16:	b5b0      	push	{r4, r5, r7, lr}
 8004e18:	b08a      	sub	sp, #40	@ 0x28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	1dbb      	adds	r3, r7, #6
 8004e22:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	589b      	ldr	r3, [r3, r2]
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d156      	bne.n	8004edc <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004e34:	1dbb      	adds	r3, r7, #6
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e04e      	b.n	8004ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	015b      	lsls	r3, r3, #5
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d109      	bne.n	8004e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2201      	movs	r2, #1
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d001      	beq.n	8004e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e03e      	b.n	8004ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e6c:	2527      	movs	r5, #39	@ 0x27
 8004e6e:	197c      	adds	r4, r7, r5
 8004e70:	1dbb      	adds	r3, r7, #6
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7ff fccd 	bl	8004818 <UART_Start_Receive_DMA>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e82:	197b      	adds	r3, r7, r5
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d124      	bne.n	8004ed4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d11c      	bne.n	8004ecc <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2210      	movs	r2, #16
 8004e98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2110      	movs	r1, #16
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	e003      	b.n	8004ed4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ecc:	2327      	movs	r3, #39	@ 0x27
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004ed4:	2327      	movs	r3, #39	@ 0x27
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	e000      	b.n	8004ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b00a      	add	sp, #40	@ 0x28
 8004ee4:	bdb0      	pop	{r4, r5, r7, pc}

08004ee6 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fc01 	bl	80056fc <malloc>
 8004efa:	0003      	movs	r3, r0
 8004efc:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
}
 8004f00:	0018      	movs	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <ATC_Free+0x26>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 fbf4 	bl	8005710 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
  }
}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8a9b      	ldrh	r3, [r3, #20]
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f000 fc9a 	bl	8005888 <memset>
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	1dbb      	adds	r3, r7, #6
 8004f68:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004f6a:	2417      	movs	r4, #23
 8004f6c:	193b      	adds	r3, r7, r4
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1dba      	adds	r2, r7, #6
 8004f76:	8812      	ldrh	r2, [r2, #0]
 8004f78:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	1dbb      	adds	r3, r7, #6
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	0019      	movs	r1, r3
 8004f86:	f7fe fafb 	bl	8003580 <HAL_UART_Transmit_DMA>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d103      	bne.n	8004f96 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e000      	b.n	8004f98 <ATC_TxRaw+0x3c>
      break;
 8004f96:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8004f98:	2317      	movs	r3, #23
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b007      	add	sp, #28
 8004fa4:	bd90      	pop	{r4, r7, pc}

08004fa6 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7fe ffa8 	bl	8003f08 <HAL_UART_GetState>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	2b21      	cmp	r3, #33	@ 0x21
 8004fbc:	d007      	beq.n	8004fce <ATC_TxBusy+0x28>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fe ffa0 	bl	8003f08 <HAL_UART_GetState>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	2b23      	cmp	r3, #35	@ 0x23
 8004fcc:	d101      	bne.n	8004fd2 <ATC_TxBusy+0x2c>
  {
    return true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8004fd2:	2300      	movs	r3, #0
  }
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8004fee:	f7fc f871 	bl	80010d4 <HAL_GetTick>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	f000 fb73 	bl	80056e2 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0018      	movs	r0, r3
 8005002:	f7fe ff81 	bl	8003f08 <HAL_UART_GetState>
 8005006:	0003      	movs	r3, r0
 8005008:	2b22      	cmp	r3, #34	@ 0x22
 800500a:	d007      	beq.n	800501c <ATC_TxWait+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	f7fe ff79 	bl	8003f08 <HAL_UART_GetState>
 8005016:	0003      	movs	r3, r0
 8005018:	2b20      	cmp	r3, #32
 800501a:	d104      	bne.n	8005026 <ATC_TxWait+0x4a>
    {
      answer = true;
 800501c:	230f      	movs	r3, #15
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
      break;
 8005024:	e01c      	b.n	8005060 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	0018      	movs	r0, r3
 800502c:	f7fe ff6c 	bl	8003f08 <HAL_UART_GetState>
 8005030:	0003      	movs	r3, r0
 8005032:	2be0      	cmp	r3, #224	@ 0xe0
 8005034:	d014      	beq.n	8005060 <ATC_TxWait+0x84>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0018      	movs	r0, r3
 800503c:	f7fe ff64 	bl	8003f08 <HAL_UART_GetState>
 8005040:	0003      	movs	r3, r0
 8005042:	2ba0      	cmp	r3, #160	@ 0xa0
 8005044:	d00c      	beq.n	8005060 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8005046:	f7fc f845 	bl	80010d4 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d8cf      	bhi.n	8004ff6 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	0018      	movs	r0, r3
 800505c:	f7fe fb20 	bl	80036a0 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8005060:	230f      	movs	r3, #15
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	781b      	ldrb	r3, [r3, #0]
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}

0800506e <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8b1b      	ldrh	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d027      	beq.n	80050ce <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e01b      	b.n	80050bc <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	18d3      	adds	r3, r2, r3
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0019      	movs	r1, r3
 8005096:	f000 fc13 	bl	80058c0 <strstr>
 800509a:	0003      	movs	r3, r0
 800509c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	18d3      	adds	r3, r2, r3
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0010      	movs	r0, r2
 80050b4:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3de      	bcc.n	8005084 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff ff34 	bl	8004f36 <ATC_RxFlush>
  }
}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80050e0:	230f      	movs	r3, #15
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8b1b      	ldrh	r3, [r3, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d031      	beq.n	8005154 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80050f0:	230c      	movs	r3, #12
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e025      	b.n	8005146 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80050fe:	230c      	movs	r3, #12
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	881a      	ldrh	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	320a      	adds	r2, #10
 8005108:	0092      	lsls	r2, r2, #2
 800510a:	58d3      	ldr	r3, [r2, r3]
 800510c:	0019      	movs	r1, r3
 800510e:	f000 fbd7 	bl	80058c0 <strstr>
 8005112:	0003      	movs	r3, r0
 8005114:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8005128:	230c      	movs	r3, #12
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	230f      	movs	r3, #15
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	3201      	adds	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
        break;
 8005138:	e00c      	b.n	8005154 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800513a:	210c      	movs	r1, #12
 800513c:	187b      	adds	r3, r7, r1
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	187b      	adds	r3, r7, r1
 8005142:	3201      	adds	r2, #1
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8adb      	ldrh	r3, [r3, #22]
 800514a:	220c      	movs	r2, #12
 800514c:	18ba      	adds	r2, r7, r2
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d3d2      	bcc.n	80050fa <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8005154:	230f      	movs	r3, #15
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	781b      	ldrb	r3, [r3, #0]
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}

08005162 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	0018      	movs	r0, r3
 8005170:	f7fe fedc 	bl	8003f2c <HAL_UART_GetError>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d01f      	beq.n	80051b8 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	4252      	negs	r2, r2
 8005182:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	0018      	movs	r0, r3
 800518a:	f7fe faef 	bl	800376c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69d9      	ldr	r1, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8a9b      	ldrh	r3, [r3, #20]
 800519a:	001a      	movs	r2, r3
 800519c:	f7ff fe3b 	bl	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2104      	movs	r1, #4
 80051b4:	438a      	bics	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	0018      	movs	r0, r3
 80051be:	f7fe fea3 	bl	8003f08 <HAL_UART_GetState>
 80051c2:	0003      	movs	r3, r0
 80051c4:	2b22      	cmp	r3, #34	@ 0x22
 80051c6:	d027      	beq.n	8005218 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7fe fe9b 	bl	8003f08 <HAL_UART_GetState>
 80051d2:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80051d4:	2b23      	cmp	r3, #35	@ 0x23
 80051d6:	d01f      	beq.n	8005218 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	4252      	negs	r2, r2
 80051e2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7fe fabf 	bl	800376c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69d9      	ldr	r1, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8a9b      	ldrh	r3, [r3, #20]
 80051fa:	001a      	movs	r2, r3
 80051fc:	f7ff fe0b 	bl	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2104      	movs	r1, #4
 8005214:	438a      	bics	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
  }
}
 8005218:	46c0      	nop			@ (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b002      	add	sp, #8
 800521e:	bd80      	pop	{r7, pc}

08005220 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005230:	2317      	movs	r3, #23
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d100      	bne.n	8005240 <ATC_Init+0x20>
 800523e:	e07f      	b.n	8005340 <ATC_Init+0x120>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <ATC_Init+0x28>
 8005246:	e07b      	b.n	8005340 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	223c      	movs	r2, #60	@ 0x3c
 800524c:	2100      	movs	r1, #0
 800524e:	0018      	movs	r0, r3
 8005250:	f000 fb1a 	bl	8005888 <memset>
    if (pName != NULL)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3304      	adds	r3, #4
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	2207      	movs	r2, #7
 8005262:	0018      	movs	r0, r3
 8005264:	f000 fb18 	bl	8005898 <strncpy>
    }
    hAtc->hUart = hUart;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800526e:	1dbb      	adds	r3, r7, #6
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	0018      	movs	r0, r3
 8005274:	f7ff fe37 	bl	8004ee6 <ATC_Malloc>
 8005278:	0002      	movs	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d055      	beq.n	8005332 <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	69d8      	ldr	r0, [r3, #28]
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	001a      	movs	r2, r3
 8005290:	2100      	movs	r1, #0
 8005292:	f000 faf9 	bl	8005888 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8005296:	1dbb      	adds	r3, r7, #6
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	0018      	movs	r0, r3
 800529c:	f7ff fe23 	bl	8004ee6 <ATC_Malloc>
 80052a0:	0002      	movs	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d043      	beq.n	8005336 <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a18      	ldr	r0, [r3, #32]
 80052b2:	1dbb      	adds	r3, r7, #6
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	001a      	movs	r2, r3
 80052b8:	2100      	movs	r1, #0
 80052ba:	f000 fae5 	bl	8005888 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80052be:	1dbb      	adds	r3, r7, #6
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff fe0f 	bl	8004ee6 <ATC_Malloc>
 80052c8:	0002      	movs	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d031      	beq.n	800533a <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80052da:	1dbb      	adds	r3, r7, #6
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	001a      	movs	r2, r3
 80052e0:	2100      	movs	r1, #0
 80052e2:	f000 fad1 	bl	8005888 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1dba      	adds	r2, r7, #6
 80052ea:	8812      	ldrh	r2, [r2, #0]
 80052ec:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2201      	movs	r2, #1
 80052f6:	4252      	negs	r2, r2
 80052f8:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	69d9      	ldr	r1, [r3, #28]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8a9b      	ldrh	r3, [r3, #20]
 8005306:	001a      	movs	r2, r3
 8005308:	f7ff fd85 	bl	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA>
 800530c:	1e03      	subs	r3, r0, #0
 800530e:	d116      	bne.n	800533e <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2104      	movs	r1, #4
 8005324:	438a      	bics	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
    answer = true;
 8005328:	2317      	movs	r3, #23
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e006      	b.n	8005340 <ATC_Init+0x120>
      break;
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	e004      	b.n	8005340 <ATC_Init+0x120>
      break;
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	e002      	b.n	8005340 <ATC_Init+0x120>
      break;
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	e000      	b.n	8005340 <ATC_Init+0x120>
      break;
 800533e:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8005340:	2317      	movs	r3, #23
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	4053      	eors	r3, r2
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d017      	beq.n	8005380 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	331c      	adds	r3, #28
 800535c:	0018      	movs	r0, r3
 800535e:	f7ff fdd3 	bl	8004f08 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3324      	adds	r3, #36	@ 0x24
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff fdca 	bl	8004f08 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	223c      	movs	r2, #60	@ 0x3c
 8005378:	2100      	movs	r1, #0
 800537a:	0018      	movs	r0, r3
 800537c:	f000 fa84 	bl	8005888 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8005380:	2317      	movs	r3, #23
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	781b      	ldrb	r3, [r3, #0]
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}

0800538e <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8005398:	230f      	movs	r3, #15
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01f      	beq.n	80053ea <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80053b0:	e002      	b.n	80053b8 <ATC_SetEvents+0x2a>
    {
      ev++;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	18d3      	adds	r3, r2, r3
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <ATC_SetEvents+0x46>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	18d3      	adds	r3, r2, r3
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ee      	bne.n	80053b2 <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	611a      	str	r2, [r3, #16]
    answer = true;
 80053e0:	230f      	movs	r3, #15
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	2201      	movs	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e002      	b.n	80053f0 <ATC_SetEvents+0x62>
      break;
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	e000      	b.n	80053f0 <ATC_SetEvents+0x62>
      break;
 80053ee:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80053f0:	230f      	movs	r3, #15
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b004      	add	sp, #16
 80053fc:	bd80      	pop	{r7, pc}

080053fe <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff feaa 	bl	8005162 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff fe2c 	bl	800506e <ATC_CheckEvents>
}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b002      	add	sp, #8
 800541c:	bd80      	pop	{r7, pc}

0800541e <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800541e:	b5b0      	push	{r4, r5, r7, lr}
 8005420:	b08c      	sub	sp, #48	@ 0x30
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	0018      	movs	r0, r3
 8005434:	f7ff fdb7 	bl	8004fa6 <ATC_TxBusy>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d002      	beq.n	8005442 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800543c:	2304      	movs	r3, #4
 800543e:	425b      	negs	r3, r3
 8005440:	e0e3      	b.n	800560a <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8005442:	2344      	movs	r3, #68	@ 0x44
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d902      	bls.n	8005452 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 800544c:	2305      	movs	r3, #5
 800544e:	425b      	negs	r3, r3
 8005450:	e0db      	b.n	800560a <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff fe84 	bl	8005162 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800545a:	2348      	movs	r3, #72	@ 0x48
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005464:	e051      	b.n	800550a <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	1d1a      	adds	r2, r3, #4
 800546a:	617a      	str	r2, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	0018      	movs	r0, r3
 8005474:	f7fa fe48 	bl	8000108 <strlen>
 8005478:	0003      	movs	r3, r0
 800547a:	3301      	adds	r3, #1
 800547c:	0018      	movs	r0, r3
 800547e:	f7ff fd32 	bl	8004ee6 <ATC_Malloc>
 8005482:	0001      	movs	r1, r0
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005488:	320a      	adds	r2, #10
 800548a:	0092      	lsls	r2, r2, #2
 800548c:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005492:	320a      	adds	r2, #10
 8005494:	0092      	lsls	r2, r2, #2
 8005496:	58d3      	ldr	r3, [r2, r3]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11c      	bne.n	80054d6 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 800549c:	2327      	movs	r3, #39	@ 0x27
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e00e      	b.n	80054c4 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80054a6:	2427      	movs	r4, #39	@ 0x27
 80054a8:	193b      	adds	r3, r7, r4
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	330a      	adds	r3, #10
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff fd27 	bl	8004f08 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	193b      	adds	r3, r7, r4
 80054c0:	3201      	adds	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	2327      	movs	r3, #39	@ 0x27
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054cc:	429a      	cmp	r2, r3
 80054ce:	dcea      	bgt.n	80054a6 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 80054d0:	2303      	movs	r3, #3
 80054d2:	425b      	negs	r3, r3
 80054d4:	e099      	b.n	800560a <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054da:	320a      	adds	r2, #10
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	58d3      	ldr	r3, [r2, r3]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0011      	movs	r1, r2
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 fa3f 	bl	8005968 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ee:	320a      	adds	r2, #10
 80054f0:	0092      	lsls	r2, r2, #2
 80054f2:	58d4      	ldr	r4, [r2, r3]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fa fe06 	bl	8000108 <strlen>
 80054fc:	0003      	movs	r3, r0
 80054fe:	18e3      	adds	r3, r4, r3
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	3301      	adds	r3, #1
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550a:	2344      	movs	r3, #68	@ 0x44
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005512:	429a      	cmp	r2, r3
 8005514:	dba7      	blt.n	8005466 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	0018      	movs	r0, r3
 800551a:	f7ff fd0c 	bl	8004f36 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	0018      	movs	r0, r3
 8005522:	f7fa fdf1 	bl	8000108 <strlen>
 8005526:	0003      	movs	r3, r0
 8005528:	b29a      	uxth	r2, r3
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	0018      	movs	r0, r3
 8005530:	f7ff fd14 	bl	8004f5c <ATC_TxRaw>
 8005534:	0003      	movs	r3, r0
 8005536:	001a      	movs	r2, r3
 8005538:	2301      	movs	r3, #1
 800553a:	4053      	eors	r3, r2
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	425b      	negs	r3, r3
 8005546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005548:	e010      	b.n	800556c <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	0011      	movs	r1, r2
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff fd43 	bl	8004fdc <ATC_TxWait>
 8005556:	0003      	movs	r3, r0
 8005558:	001a      	movs	r2, r3
 800555a:	2301      	movs	r3, #1
 800555c:	4053      	eors	r3, r2
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8005564:	2302      	movs	r3, #2
 8005566:	425b      	negs	r3, r3
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800556a:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800556c:	2444      	movs	r4, #68	@ 0x44
 800556e:	193b      	adds	r3, r7, r4
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d029      	beq.n	80055ca <ATC_SendReceive+0x1ac>
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d126      	bne.n	80055ca <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 800557c:	f7fb fdaa 	bl	80010d4 <HAL_GetTick>
 8005580:	0003      	movs	r3, r0
 8005582:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8005584:	193b      	adds	r3, r7, r4
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800558e:	e014      	b.n	80055ba <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8005590:	2001      	movs	r0, #1
 8005592:	f000 f8a6 	bl	80056e2 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8005596:	251f      	movs	r5, #31
 8005598:	197c      	adds	r4, r7, r5
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7ff fd98 	bl	80050d6 <ATC_CheckResponse>
 80055a6:	0003      	movs	r3, r0
 80055a8:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 80055aa:	197b      	adds	r3, r7, r5
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 80055b2:	197b      	adds	r3, r7, r5
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055b8:	e007      	b.n	80055ca <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 80055ba:	f7fb fd8b 	bl	80010d4 <HAL_GetTick>
 80055be:	0002      	movs	r2, r0
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d8e2      	bhi.n	8005590 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80055d0:	2326      	movs	r3, #38	@ 0x26
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e00e      	b.n	80055f8 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80055da:	2426      	movs	r4, #38	@ 0x26
 80055dc:	193b      	adds	r3, r7, r4
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	330a      	adds	r3, #10
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff fc8d 	bl	8004f08 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	193b      	adds	r3, r7, r4
 80055f4:	3201      	adds	r2, #1
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	2326      	movs	r3, #38	@ 0x26
 80055fa:	18fa      	adds	r2, r7, r3
 80055fc:	2344      	movs	r3, #68	@ 0x44
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d3e8      	bcc.n	80055da <ATC_SendReceive+0x1bc>
  }
  return answer;
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b00c      	add	sp, #48	@ 0x30
 8005610:	bdb0      	pop	{r4, r5, r7, pc}

08005612 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	000a      	movs	r2, r1
 800561c:	1cbb      	adds	r3, r7, #2
 800561e:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005620:	1cbb      	adds	r3, r7, #2
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8a9b      	ldrh	r3, [r3, #20]
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8b1b      	ldrh	r3, [r3, #24]
 800562e:	1acb      	subs	r3, r1, r3
 8005630:	429a      	cmp	r2, r3
 8005632:	dd06      	ble.n	8005642 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8a99      	ldrh	r1, [r3, #20]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8b1a      	ldrh	r2, [r3, #24]
 800563c:	1cbb      	adds	r3, r7, #2
 800563e:	1a8a      	subs	r2, r1, r2
 8005640:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	8b12      	ldrh	r2, [r2, #24]
 800564a:	1898      	adds	r0, r3, r2
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	1cbb      	adds	r3, r7, #2
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	001a      	movs	r2, r3
 8005656:	f000 f98f 	bl	8005978 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8b1a      	ldrh	r2, [r3, #24]
 800565e:	1cbb      	adds	r3, r7, #2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	18d3      	adds	r3, r2, r3
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69d9      	ldr	r1, [r3, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8a9b      	ldrh	r3, [r3, #20]
 8005676:	001a      	movs	r2, r3
 8005678:	f7ff fbcd 	bl	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d10c      	bne.n	800569a <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2104      	movs	r1, #4
 8005694:	438a      	bics	r2, r1
 8005696:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8005698:	e01f      	b.n	80056da <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4252      	negs	r2, r2
 80056a4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7fe f85e 	bl	800376c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69d9      	ldr	r1, [r3, #28]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8a9b      	ldrh	r3, [r3, #20]
 80056bc:	001a      	movs	r2, r3
 80056be:	f7ff fbaa 	bl	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2104      	movs	r1, #4
 80056d6:	438a      	bics	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]
}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b002      	add	sp, #8
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fb fcfb 	bl	80010e8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b002      	add	sp, #8
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <malloc>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4b03      	ldr	r3, [pc, #12]	@ (800570c <malloc+0x10>)
 8005700:	0001      	movs	r1, r0
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	f000 f830 	bl	8005768 <_malloc_r>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	20000010 	.word	0x20000010

08005710 <free>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <free+0x10>)
 8005714:	0001      	movs	r1, r0
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	f000 f938 	bl	800598c <_free_r>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	20000010 	.word	0x20000010

08005724 <sbrk_aligned>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4e0f      	ldr	r6, [pc, #60]	@ (8005764 <sbrk_aligned+0x40>)
 8005728:	000d      	movs	r5, r1
 800572a:	6831      	ldr	r1, [r6, #0]
 800572c:	0004      	movs	r4, r0
 800572e:	2900      	cmp	r1, #0
 8005730:	d102      	bne.n	8005738 <sbrk_aligned+0x14>
 8005732:	f000 f8db 	bl	80058ec <_sbrk_r>
 8005736:	6030      	str	r0, [r6, #0]
 8005738:	0029      	movs	r1, r5
 800573a:	0020      	movs	r0, r4
 800573c:	f000 f8d6 	bl	80058ec <_sbrk_r>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d103      	bne.n	800574c <sbrk_aligned+0x28>
 8005744:	2501      	movs	r5, #1
 8005746:	426d      	negs	r5, r5
 8005748:	0028      	movs	r0, r5
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	2303      	movs	r3, #3
 800574e:	1cc5      	adds	r5, r0, #3
 8005750:	439d      	bics	r5, r3
 8005752:	42a8      	cmp	r0, r5
 8005754:	d0f8      	beq.n	8005748 <sbrk_aligned+0x24>
 8005756:	1a29      	subs	r1, r5, r0
 8005758:	0020      	movs	r0, r4
 800575a:	f000 f8c7 	bl	80058ec <_sbrk_r>
 800575e:	3001      	adds	r0, #1
 8005760:	d1f2      	bne.n	8005748 <sbrk_aligned+0x24>
 8005762:	e7ef      	b.n	8005744 <sbrk_aligned+0x20>
 8005764:	20000254 	.word	0x20000254

08005768 <_malloc_r>:
 8005768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800576a:	2203      	movs	r2, #3
 800576c:	1ccb      	adds	r3, r1, #3
 800576e:	4393      	bics	r3, r2
 8005770:	3308      	adds	r3, #8
 8005772:	0005      	movs	r5, r0
 8005774:	001f      	movs	r7, r3
 8005776:	2b0c      	cmp	r3, #12
 8005778:	d234      	bcs.n	80057e4 <_malloc_r+0x7c>
 800577a:	270c      	movs	r7, #12
 800577c:	42b9      	cmp	r1, r7
 800577e:	d833      	bhi.n	80057e8 <_malloc_r+0x80>
 8005780:	0028      	movs	r0, r5
 8005782:	f000 f871 	bl	8005868 <__malloc_lock>
 8005786:	4e37      	ldr	r6, [pc, #220]	@ (8005864 <_malloc_r+0xfc>)
 8005788:	6833      	ldr	r3, [r6, #0]
 800578a:	001c      	movs	r4, r3
 800578c:	2c00      	cmp	r4, #0
 800578e:	d12f      	bne.n	80057f0 <_malloc_r+0x88>
 8005790:	0039      	movs	r1, r7
 8005792:	0028      	movs	r0, r5
 8005794:	f7ff ffc6 	bl	8005724 <sbrk_aligned>
 8005798:	0004      	movs	r4, r0
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	d15f      	bne.n	800585e <_malloc_r+0xf6>
 800579e:	6834      	ldr	r4, [r6, #0]
 80057a0:	9400      	str	r4, [sp, #0]
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d14a      	bne.n	800583e <_malloc_r+0xd6>
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d052      	beq.n	8005852 <_malloc_r+0xea>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	0028      	movs	r0, r5
 80057b0:	18e3      	adds	r3, r4, r3
 80057b2:	9900      	ldr	r1, [sp, #0]
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	f000 f899 	bl	80058ec <_sbrk_r>
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	4283      	cmp	r3, r0
 80057be:	d148      	bne.n	8005852 <_malloc_r+0xea>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	0028      	movs	r0, r5
 80057c4:	1aff      	subs	r7, r7, r3
 80057c6:	0039      	movs	r1, r7
 80057c8:	f7ff ffac 	bl	8005724 <sbrk_aligned>
 80057cc:	3001      	adds	r0, #1
 80057ce:	d040      	beq.n	8005852 <_malloc_r+0xea>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	6833      	ldr	r3, [r6, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d133      	bne.n	8005846 <_malloc_r+0xde>
 80057de:	9b00      	ldr	r3, [sp, #0]
 80057e0:	6033      	str	r3, [r6, #0]
 80057e2:	e019      	b.n	8005818 <_malloc_r+0xb0>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dac9      	bge.n	800577c <_malloc_r+0x14>
 80057e8:	230c      	movs	r3, #12
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	2000      	movs	r0, #0
 80057ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057f0:	6821      	ldr	r1, [r4, #0]
 80057f2:	1bc9      	subs	r1, r1, r7
 80057f4:	d420      	bmi.n	8005838 <_malloc_r+0xd0>
 80057f6:	290b      	cmp	r1, #11
 80057f8:	d90a      	bls.n	8005810 <_malloc_r+0xa8>
 80057fa:	19e2      	adds	r2, r4, r7
 80057fc:	6027      	str	r7, [r4, #0]
 80057fe:	42a3      	cmp	r3, r4
 8005800:	d104      	bne.n	800580c <_malloc_r+0xa4>
 8005802:	6032      	str	r2, [r6, #0]
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	6011      	str	r1, [r2, #0]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	e005      	b.n	8005818 <_malloc_r+0xb0>
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	e7f9      	b.n	8005804 <_malloc_r+0x9c>
 8005810:	6862      	ldr	r2, [r4, #4]
 8005812:	42a3      	cmp	r3, r4
 8005814:	d10e      	bne.n	8005834 <_malloc_r+0xcc>
 8005816:	6032      	str	r2, [r6, #0]
 8005818:	0028      	movs	r0, r5
 800581a:	f000 f82d 	bl	8005878 <__malloc_unlock>
 800581e:	0020      	movs	r0, r4
 8005820:	2207      	movs	r2, #7
 8005822:	300b      	adds	r0, #11
 8005824:	1d23      	adds	r3, r4, #4
 8005826:	4390      	bics	r0, r2
 8005828:	1ac2      	subs	r2, r0, r3
 800582a:	4298      	cmp	r0, r3
 800582c:	d0df      	beq.n	80057ee <_malloc_r+0x86>
 800582e:	1a1b      	subs	r3, r3, r0
 8005830:	50a3      	str	r3, [r4, r2]
 8005832:	e7dc      	b.n	80057ee <_malloc_r+0x86>
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	e7ef      	b.n	8005818 <_malloc_r+0xb0>
 8005838:	0023      	movs	r3, r4
 800583a:	6864      	ldr	r4, [r4, #4]
 800583c:	e7a6      	b.n	800578c <_malloc_r+0x24>
 800583e:	9c00      	ldr	r4, [sp, #0]
 8005840:	6863      	ldr	r3, [r4, #4]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	e7ad      	b.n	80057a2 <_malloc_r+0x3a>
 8005846:	001a      	movs	r2, r3
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	42a3      	cmp	r3, r4
 800584c:	d1fb      	bne.n	8005846 <_malloc_r+0xde>
 800584e:	2300      	movs	r3, #0
 8005850:	e7da      	b.n	8005808 <_malloc_r+0xa0>
 8005852:	230c      	movs	r3, #12
 8005854:	0028      	movs	r0, r5
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	f000 f80e 	bl	8005878 <__malloc_unlock>
 800585c:	e7c6      	b.n	80057ec <_malloc_r+0x84>
 800585e:	6007      	str	r7, [r0, #0]
 8005860:	e7da      	b.n	8005818 <_malloc_r+0xb0>
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	20000258 	.word	0x20000258

08005868 <__malloc_lock>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4802      	ldr	r0, [pc, #8]	@ (8005874 <__malloc_lock+0xc>)
 800586c:	f000 f87a 	bl	8005964 <__retarget_lock_acquire_recursive>
 8005870:	bd10      	pop	{r4, pc}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	20000398 	.word	0x20000398

08005878 <__malloc_unlock>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4802      	ldr	r0, [pc, #8]	@ (8005884 <__malloc_unlock+0xc>)
 800587c:	f000 f873 	bl	8005966 <__retarget_lock_release_recursive>
 8005880:	bd10      	pop	{r4, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	20000398 	.word	0x20000398

08005888 <memset>:
 8005888:	0003      	movs	r3, r0
 800588a:	1882      	adds	r2, r0, r2
 800588c:	4293      	cmp	r3, r2
 800588e:	d100      	bne.n	8005892 <memset+0xa>
 8005890:	4770      	bx	lr
 8005892:	7019      	strb	r1, [r3, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	e7f9      	b.n	800588c <memset+0x4>

08005898 <strncpy>:
 8005898:	0003      	movs	r3, r0
 800589a:	b530      	push	{r4, r5, lr}
 800589c:	001d      	movs	r5, r3
 800589e:	2a00      	cmp	r2, #0
 80058a0:	d006      	beq.n	80058b0 <strncpy+0x18>
 80058a2:	780c      	ldrb	r4, [r1, #0]
 80058a4:	3a01      	subs	r2, #1
 80058a6:	3301      	adds	r3, #1
 80058a8:	702c      	strb	r4, [r5, #0]
 80058aa:	3101      	adds	r1, #1
 80058ac:	2c00      	cmp	r4, #0
 80058ae:	d1f5      	bne.n	800589c <strncpy+0x4>
 80058b0:	2100      	movs	r1, #0
 80058b2:	189a      	adds	r2, r3, r2
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <strncpy+0x22>
 80058b8:	bd30      	pop	{r4, r5, pc}
 80058ba:	7019      	strb	r1, [r3, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	e7f9      	b.n	80058b4 <strncpy+0x1c>

080058c0 <strstr>:
 80058c0:	780a      	ldrb	r2, [r1, #0]
 80058c2:	b530      	push	{r4, r5, lr}
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	d10c      	bne.n	80058e2 <strstr+0x22>
 80058c8:	bd30      	pop	{r4, r5, pc}
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d108      	bne.n	80058e0 <strstr+0x20>
 80058ce:	2301      	movs	r3, #1
 80058d0:	5ccc      	ldrb	r4, [r1, r3]
 80058d2:	2c00      	cmp	r4, #0
 80058d4:	d0f8      	beq.n	80058c8 <strstr+0x8>
 80058d6:	5cc5      	ldrb	r5, [r0, r3]
 80058d8:	42a5      	cmp	r5, r4
 80058da:	d101      	bne.n	80058e0 <strstr+0x20>
 80058dc:	3301      	adds	r3, #1
 80058de:	e7f7      	b.n	80058d0 <strstr+0x10>
 80058e0:	3001      	adds	r0, #1
 80058e2:	7803      	ldrb	r3, [r0, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <strstr+0xa>
 80058e8:	0018      	movs	r0, r3
 80058ea:	e7ed      	b.n	80058c8 <strstr+0x8>

080058ec <_sbrk_r>:
 80058ec:	2300      	movs	r3, #0
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	4d06      	ldr	r5, [pc, #24]	@ (800590c <_sbrk_r+0x20>)
 80058f2:	0004      	movs	r4, r0
 80058f4:	0008      	movs	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb fa4c 	bl	8000d94 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d103      	bne.n	8005908 <_sbrk_r+0x1c>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d000      	beq.n	8005908 <_sbrk_r+0x1c>
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	20000394 	.word	0x20000394

08005910 <__errno>:
 8005910:	4b01      	ldr	r3, [pc, #4]	@ (8005918 <__errno+0x8>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	4770      	bx	lr
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	20000010 	.word	0x20000010

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	2600      	movs	r6, #0
 8005920:	4c0c      	ldr	r4, [pc, #48]	@ (8005954 <__libc_init_array+0x38>)
 8005922:	4d0d      	ldr	r5, [pc, #52]	@ (8005958 <__libc_init_array+0x3c>)
 8005924:	1b64      	subs	r4, r4, r5
 8005926:	10a4      	asrs	r4, r4, #2
 8005928:	42a6      	cmp	r6, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	2600      	movs	r6, #0
 800592e:	f000 f877 	bl	8005a20 <_init>
 8005932:	4c0a      	ldr	r4, [pc, #40]	@ (800595c <__libc_init_array+0x40>)
 8005934:	4d0a      	ldr	r5, [pc, #40]	@ (8005960 <__libc_init_array+0x44>)
 8005936:	1b64      	subs	r4, r4, r5
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	42a6      	cmp	r6, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	00b3      	lsls	r3, r6, #2
 8005942:	58eb      	ldr	r3, [r5, r3]
 8005944:	4798      	blx	r3
 8005946:	3601      	adds	r6, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	00b3      	lsls	r3, r6, #2
 800594c:	58eb      	ldr	r3, [r5, r3]
 800594e:	4798      	blx	r3
 8005950:	3601      	adds	r6, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	08005b0c 	.word	0x08005b0c
 8005958:	08005b0c 	.word	0x08005b0c
 800595c:	08005b10 	.word	0x08005b10
 8005960:	08005b0c 	.word	0x08005b0c

08005964 <__retarget_lock_acquire_recursive>:
 8005964:	4770      	bx	lr

08005966 <__retarget_lock_release_recursive>:
 8005966:	4770      	bx	lr

08005968 <strcpy>:
 8005968:	0003      	movs	r3, r0
 800596a:	780a      	ldrb	r2, [r1, #0]
 800596c:	3101      	adds	r1, #1
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	2a00      	cmp	r2, #0
 8005974:	d1f9      	bne.n	800596a <strcpy+0x2>
 8005976:	4770      	bx	lr

08005978 <memcpy>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	429a      	cmp	r2, r3
 800597e:	d100      	bne.n	8005982 <memcpy+0xa>
 8005980:	bd10      	pop	{r4, pc}
 8005982:	5ccc      	ldrb	r4, [r1, r3]
 8005984:	54c4      	strb	r4, [r0, r3]
 8005986:	3301      	adds	r3, #1
 8005988:	e7f8      	b.n	800597c <memcpy+0x4>
	...

0800598c <_free_r>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	0005      	movs	r5, r0
 8005990:	1e0c      	subs	r4, r1, #0
 8005992:	d010      	beq.n	80059b6 <_free_r+0x2a>
 8005994:	3c04      	subs	r4, #4
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da00      	bge.n	800599e <_free_r+0x12>
 800599c:	18e4      	adds	r4, r4, r3
 800599e:	0028      	movs	r0, r5
 80059a0:	f7ff ff62 	bl	8005868 <__malloc_lock>
 80059a4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <_free_r+0x90>)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <_free_r+0x2c>
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6014      	str	r4, [r2, #0]
 80059b0:	0028      	movs	r0, r5
 80059b2:	f7ff ff61 	bl	8005878 <__malloc_unlock>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d908      	bls.n	80059ce <_free_r+0x42>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	1821      	adds	r1, r4, r0
 80059c0:	428b      	cmp	r3, r1
 80059c2:	d1f3      	bne.n	80059ac <_free_r+0x20>
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	1809      	adds	r1, r1, r0
 80059ca:	6021      	str	r1, [r4, #0]
 80059cc:	e7ee      	b.n	80059ac <_free_r+0x20>
 80059ce:	001a      	movs	r2, r3
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <_free_r+0x4e>
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	d9f9      	bls.n	80059ce <_free_r+0x42>
 80059da:	6811      	ldr	r1, [r2, #0]
 80059dc:	1850      	adds	r0, r2, r1
 80059de:	42a0      	cmp	r0, r4
 80059e0:	d10b      	bne.n	80059fa <_free_r+0x6e>
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	1809      	adds	r1, r1, r0
 80059e6:	1850      	adds	r0, r2, r1
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	4283      	cmp	r3, r0
 80059ec:	d1e0      	bne.n	80059b0 <_free_r+0x24>
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	1841      	adds	r1, r0, r1
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	6053      	str	r3, [r2, #4]
 80059f8:	e7da      	b.n	80059b0 <_free_r+0x24>
 80059fa:	42a0      	cmp	r0, r4
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	e7d5      	b.n	80059b0 <_free_r+0x24>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	1821      	adds	r1, r4, r0
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	d103      	bne.n	8005a14 <_free_r+0x88>
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	1809      	adds	r1, r1, r0
 8005a12:	6021      	str	r1, [r4, #0]
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	6054      	str	r4, [r2, #4]
 8005a18:	e7ca      	b.n	80059b0 <_free_r+0x24>
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	20000258 	.word	0x20000258

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
