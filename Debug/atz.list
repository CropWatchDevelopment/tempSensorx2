
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006ca0  08006ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e34  08006e34  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e3c  08006e3c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006e44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000060  08006ea4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000064c  08006ea4  0000864c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012786  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322f  00000000  00000000  0001a80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  0001e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec0  00000000  00000000  0001f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ed  00000000  00000000  0003647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867a2  00000000  00000000  0004b869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d200b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b60  00000000  00000000  000d2050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d5bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c88 	.word	0x08006c88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006c88 	.word	0x08006c88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_DMA_Init+0x48>)
 800064c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_DMA_Init+0x48>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_DMA_Init+0x48>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	200a      	movs	r0, #10
 8000668:	f001 fad6 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800066c:	200a      	movs	r0, #10
 800066e:	f001 fae8 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200b      	movs	r0, #11
 8000678:	f001 face 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800067c:	200b      	movs	r0, #11
 800067e:	f001 fae0 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b089      	sub	sp, #36	@ 0x24
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	240c      	movs	r4, #12
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f005 fefd 	bl	80064a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006aa:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006b2:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_GPIO_Init+0xb8>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_GPIO_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 ffdb 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2220      	movs	r2, #32
 80006fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	@ 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fd6b 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2220      	movs	r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000734:	187b      	adds	r3, r7, r1
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <MX_GPIO_Init+0xbc>)
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f001 fd58 	bl	80021f0 <HAL_GPIO_Init>

}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b009      	add	sp, #36	@ 0x24
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	50000400 	.word	0x50000400

08000750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_I2C1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <MX_I2C1_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f001 ffad 	bl	80026ec <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 fbd6 	bl	8000f46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f87a 	bl	8002898 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 fbcd 	bl	8000f46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <MX_I2C1_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 f8bd 	bl	8002930 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fbc4 	bl	8000f46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000007c 	.word	0x2000007c
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00000202 	.word	0x00000202

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	240c      	movs	r4, #12
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f005 fe5c 	bl	80064a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <HAL_I2C_MspInit+0x7c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d128      	bne.n	8000844 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <HAL_I2C_MspInit+0x80>)
 80007f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <HAL_I2C_MspInit+0x80>)
 80007f8:	2102      	movs	r1, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <HAL_I2C_MspInit+0x80>)
 8000800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000802:	2202      	movs	r2, #2
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	22c0      	movs	r2, #192	@ 0xc0
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2212      	movs	r2, #18
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2201      	movs	r2, #1
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2203      	movs	r2, #3
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	187b      	adds	r3, r7, r1
 800082c:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <HAL_I2C_MspInit+0x84>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f001 fcdd 	bl	80021f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_I2C_MspInit+0x80>)
 8000838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_I2C_MspInit+0x80>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	0389      	lsls	r1, r1, #14
 8000840:	430a      	orrs	r2, r1
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b009      	add	sp, #36	@ 0x24
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	40005400 	.word	0x40005400
 8000850:	40021000 	.word	0x40021000
 8000854:	50000400 	.word	0x50000400

08000858 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <HAL_I2C_MspDeInit+0x3c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10f      	bne.n	800088a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_I2C_MspDeInit+0x40>)
 800086c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_I2C_MspDeInit+0x40>)
 8000870:	490a      	ldr	r1, [pc, #40]	@ (800089c <HAL_I2C_MspDeInit+0x44>)
 8000872:	400a      	ands	r2, r1
 8000874:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000876:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <HAL_I2C_MspDeInit+0x48>)
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	0018      	movs	r0, r3
 800087c:	f001 fe36 	bl	80024ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <HAL_I2C_MspDeInit+0x48>)
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fe31 	bl	80024ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000
 800089c:	ffdfffff 	.word	0xffdfffff
 80008a0:	50000400 	.word	0x50000400

080008a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80008b6:	d80a      	bhi.n	80008ce <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	001a      	movs	r2, r3
 80008be:	231f      	movs	r3, #31
 80008c0:	4013      	ands	r3, r2
 80008c2:	4905      	ldr	r1, [pc, #20]	@ (80008d8 <__NVIC_ClearPendingIRQ+0x34>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	409a      	lsls	r2, r3
 80008c8:	23c0      	movs	r3, #192	@ 0xc0
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	50ca      	str	r2, [r1, r3]
  }
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	e000e100 	.word	0xe000e100

080008dc <LoraLineHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// LoRaSerial callback for handling received lines
void LoraLineHandler(const char *line)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    // Handle JOIN responses
    if (strstr(line, "JOIN: ") != NULL) {
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <LoraLineHandler+0x54>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f005 fdf4 	bl	80064d8 <strstr>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d019      	beq.n	8000928 <LoraLineHandler+0x4c>
        if (strstr(line, "JOIN: OK") != NULL) {
 80008f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <LoraLineHandler+0x58>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f005 fdec 	bl	80064d8 <strstr>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d006      	beq.n	8000912 <LoraLineHandler+0x36>
            joined = true;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <LoraLineHandler+0x5c>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
            device_state = DEVICE_COLLECT_DATA;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <LoraLineHandler+0x60>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
        } else if (strstr(line, "JOIN: FAILED") != NULL) {
            joined = false;
        }
    }
    // Add other AT command response handling as needed
}
 8000910:	e00a      	b.n	8000928 <LoraLineHandler+0x4c>
        } else if (strstr(line, "JOIN: FAILED") != NULL) {
 8000912:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <LoraLineHandler+0x64>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f005 fddd 	bl	80064d8 <strstr>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d002      	beq.n	8000928 <LoraLineHandler+0x4c>
            joined = false;
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <LoraLineHandler+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08006ca0 	.word	0x08006ca0
 8000934:	08006ca8 	.word	0x08006ca8
 8000938:	200002a4 	.word	0x200002a4
 800093c:	20000000 	.word	0x20000000
 8000940:	08006cb4 	.word	0x08006cb4

08000944 <Get_RTC_Timestamp>:

void Get_RTC_Timestamp(char *buffer, uint16_t buffer_size) {
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	46c6      	mov	lr, r8
 8000948:	b500      	push	{lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af06      	add	r7, sp, #24
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	000a      	movs	r2, r1
 8000952:	1cbb      	adds	r3, r7, #2
 8000954:	801a      	strh	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 8000956:	241c      	movs	r4, #28
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 800095e:	2608      	movs	r6, #8
 8000960:	19bb      	adds	r3, r7, r6
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f005 fd99 	bl	80064a0 <memset>

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800096e:	19b9      	adds	r1, r7, r6
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <Get_RTC_Timestamp+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f003 f895 	bl	8003aa4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800097a:	1939      	adds	r1, r7, r4
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <Get_RTC_Timestamp+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	0018      	movs	r0, r3
 8000982:	f003 f8ed 	bl	8003b60 <HAL_RTC_GetDate>

    // Format the timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000986:	1cbb      	adds	r3, r7, #2
 8000988:	8819      	ldrh	r1, [r3, #0]
             sDate.Year, sDate.Month, sDate.Date,
 800098a:	0022      	movs	r2, r4
 800098c:	18bb      	adds	r3, r7, r2
 800098e:	78db      	ldrb	r3, [r3, #3]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000990:	4698      	mov	r8, r3
             sDate.Year, sDate.Month, sDate.Date,
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	785b      	ldrb	r3, [r3, #1]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000996:	001c      	movs	r4, r3
             sDate.Year, sDate.Month, sDate.Date,
 8000998:	18bb      	adds	r3, r7, r2
 800099a:	789b      	ldrb	r3, [r3, #2]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800099c:	001d      	movs	r5, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 800099e:	0032      	movs	r2, r6
 80009a0:	18bb      	adds	r3, r7, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009a4:	001e      	movs	r6, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	785b      	ldrb	r3, [r3, #1]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009aa:	469c      	mov	ip, r3
             sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009ac:	18bb      	adds	r3, r7, r2
 80009ae:	789b      	ldrb	r3, [r3, #2]
    snprintf(buffer, buffer_size, "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009b0:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <Get_RTC_Timestamp+0x94>)
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	9304      	str	r3, [sp, #16]
 80009b6:	4663      	mov	r3, ip
 80009b8:	9303      	str	r3, [sp, #12]
 80009ba:	9602      	str	r6, [sp, #8]
 80009bc:	9501      	str	r5, [sp, #4]
 80009be:	9400      	str	r4, [sp, #0]
 80009c0:	4643      	mov	r3, r8
 80009c2:	f005 fd37 	bl	8006434 <sniprintf>
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b008      	add	sp, #32
 80009cc:	bc80      	pop	{r7}
 80009ce:	46b8      	mov	r8, r7
 80009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	200002a8 	.word	0x200002a8
 80009d8:	08006cc4 	.word	0x08006cc4

080009dc <Debug_Print>:

void Debug_Print(const char *message) {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b0cc      	sub	sp, #304	@ 0x130
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	6078      	str	r0, [r7, #4]
    char buffer[256]; // Adjust size as needed
    char timestamp[32];

    // Get the timestamp
    Get_RTC_Timestamp(timestamp, sizeof(timestamp));
 80009e4:	2408      	movs	r4, #8
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2120      	movs	r1, #32
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff ffaa 	bl	8000944 <Get_RTC_Timestamp>

    // Combine timestamp and message
    snprintf(buffer, sizeof(buffer), "%s%s", timestamp, message);
 80009f0:	193c      	adds	r4, r7, r4
 80009f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <Debug_Print+0x4c>)
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	0059      	lsls	r1, r3, #1
 80009f8:	2528      	movs	r5, #40	@ 0x28
 80009fa:	1978      	adds	r0, r7, r5
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	0023      	movs	r3, r4
 8000a02:	f005 fd17 	bl	8006434 <sniprintf>

    // Send the debug message using HAL directly
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8000a06:	002c      	movs	r4, r5
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fb7c 	bl	8000108 <strlen>
 8000a10:	0003      	movs	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	23fa      	movs	r3, #250	@ 0xfa
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	1939      	adds	r1, r7, r4
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <Debug_Print+0x50>)
 8000a1c:	f003 fba4 	bl	8004168 <HAL_UART_Transmit>
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b04a      	add	sp, #296	@ 0x128
 8000a26:	bdb0      	pop	{r4, r5, r7, pc}
 8000a28:	08006ce8 	.word	0x08006ce8
 8000a2c:	20000358 	.word	0x20000358

08000a30 <enter_low_power_mode>:

void enter_low_power_mode(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	Debug_Print("Going to sleep\r\n");
 8000a34:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <enter_low_power_mode+0x154>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ffd0 	bl	80009dc <Debug_Print>

	// Wait for UART transmission to complete before entering low power
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) == RESET);
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <enter_low_power_mode+0x158>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	2240      	movs	r2, #64	@ 0x40
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b40      	cmp	r3, #64	@ 0x40
 8000a4a:	d1f8      	bne.n	8000a3e <enter_low_power_mode+0xe>
	while (__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TC) == RESET);
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b8c <enter_low_power_mode+0x15c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	2240      	movs	r2, #64	@ 0x40
 8000a56:	4013      	ands	r3, r2
 8000a58:	2b40      	cmp	r3, #64	@ 0x40
 8000a5a:	d1f8      	bne.n	8000a4e <enter_low_power_mode+0x1e>
	
	// Wait for LPUART to be idle and ready
	while (__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_BUSY) == SET);
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b8c <enter_low_power_mode+0x15c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69da      	ldr	r2, [r3, #28]
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	025b      	lsls	r3, r3, #9
 8000a68:	401a      	ands	r2, r3
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d0f5      	beq.n	8000a5e <enter_low_power_mode+0x2e>
	while (__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_REACK) == RESET);
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <enter_low_power_mode+0x15c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	03db      	lsls	r3, r3, #15
 8000a7e:	401a      	ands	r2, r3
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	03db      	lsls	r3, r3, #15
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d1f5      	bne.n	8000a74 <enter_low_power_mode+0x44>

	// Prepare LoRa serial for low power mode
	LoRaSerial_EnterLowPower(&hLora);
 8000a88:	4b41      	ldr	r3, [pc, #260]	@ (8000b90 <enter_low_power_mode+0x160>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fe7f 	bl	800178e <LoRaSerial_EnterLowPower>

	// De-init I2C and debug UART to avoid spurious interrupts
	HAL_I2C_DeInit(&hi2c1);
 8000a90:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <enter_low_power_mode+0x164>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fed0 	bl	8002838 <HAL_I2C_DeInit>
	HAL_UART_DeInit(&huart1);
 8000a98:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <enter_low_power_mode+0x158>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fb26 	bl	80040ec <HAL_UART_DeInit>

	// Disable EXTI interrupts to prevent GPIO-related wake-ups
	HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8000aa0:	2005      	movs	r0, #5
 8000aa2:	f001 f8de 	bl	8001c62 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8000aa6:	2006      	movs	r0, #6
 8000aa8:	f001 f8db 	bl	8001c62 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8000aac:	2007      	movs	r0, #7
 8000aae:	f001 f8d8 	bl	8001c62 <HAL_NVIC_DisableIRQ>

	// Disable DMA interrupts that could cause wake-ups
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f001 f8d5 	bl	8001c62 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000ab8:	200b      	movs	r0, #11
 8000aba:	f001 f8d2 	bl	8001c62 <HAL_NVIC_DisableIRQ>

	// Disable UART interrupts except for LPUART1 wake-up
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000abe:	201b      	movs	r0, #27
 8000ac0:	f001 f8cf 	bl	8001c62 <HAL_NVIC_DisableIRQ>

	// Configure RTC wake-up timer first, then deactivate any existing timer
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8000ac4:	4b34      	ldr	r3, [pc, #208]	@ (8000b98 <enter_low_power_mode+0x168>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f003 fa28 	bl	8003f1c <HAL_RTCEx_DeactivateWakeUpTimer>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <enter_low_power_mode+0xa4>
	{
		Error_Handler();
 8000ad0:	f000 fa39 	bl	8000f46 <Error_Handler>
	}

	/* Configure RTC wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000ad4:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <enter_low_power_mode+0x168>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	213b      	movs	r1, #59	@ 0x3b
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 f946 	bl	8003d6c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <enter_low_power_mode+0xb8>
	{
		Error_Handler();
 8000ae4:	f000 fa2f 	bl	8000f46 <Error_Handler>
	}

	// Clear all pending interrupts to prevent spurious wake-ups
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000aea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	0409      	lsls	r1, r1, #16
 8000af2:	430a      	orrs	r2, r1
 8000af4:	651a      	str	r2, [r3, #80]	@ 0x50
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);  // Clear wake-up flag
 8000af6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <enter_low_power_mode+0x170>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <enter_low_power_mode+0x170>)
 8000afc:	2104      	movs	r1, #4
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RNG_LPUART1_IRQn);
 8000b02:	201d      	movs	r0, #29
 8000b04:	f7ff fece 	bl	80008a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(USART1_IRQn);
 8000b08:	201b      	movs	r0, #27
 8000b0a:	f7ff fecb 	bl	80008a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(RTC_IRQn);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fec8 	bl	80008a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(DMA1_Channel2_3_IRQn);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f7ff fec5 	bl	80008a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000b1a:	200b      	movs	r0, #11
 8000b1c:	f7ff fec2 	bl	80008a4 <__NVIC_ClearPendingIRQ>
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <enter_low_power_mode+0x168>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <enter_low_power_mode+0x168>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	491d      	ldr	r1, [pc, #116]	@ (8000ba4 <enter_low_power_mode+0x174>)
 8000b30:	430a      	orrs	r2, r1
 8000b32:	60da      	str	r2, [r3, #12]

	// Clear any UART error flags
	__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <enter_low_power_mode+0x15c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	220f      	movs	r2, #15
 8000b3a:	621a      	str	r2, [r3, #32]

	// Disable unused peripheral clocks to reduce power consumption
	__HAL_RCC_I2C1_CLK_DISABLE();
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b42:	4919      	ldr	r1, [pc, #100]	@ (8000ba8 <enter_low_power_mode+0x178>)
 8000b44:	400a      	ands	r2, r1
 8000b46:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_DISABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b4e:	4917      	ldr	r1, [pc, #92]	@ (8000bac <enter_low_power_mode+0x17c>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_DMA1_CLK_DISABLE();
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <enter_low_power_mode+0x16c>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	438a      	bics	r2, r1
 8000b5e:	631a      	str	r2, [r3, #48]	@ 0x30

	// Disable debug in Stop mode to save power
	HAL_DBGMCU_DisableDBGStopMode();
 8000b60:	f000 ff7e 	bl	8001a60 <HAL_DBGMCU_DisableDBGStopMode>

	// Suspend SysTick to prevent it from waking the MCU
	HAL_SuspendTick();
 8000b64:	f000 ff60 	bl	8001a28 <HAL_SuspendTick>

	// Enter Stop Mode with low power regulator
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f001 ff2c 	bl	80029c8 <HAL_PWR_EnterSTOPMode>

	// When we wake up, execution continues here
	HAL_ResumeTick();
 8000b70:	f000 ff68 	bl	8001a44 <HAL_ResumeTick>
	SystemClock_Config();
 8000b74:	f000 f956 	bl	8000e24 <SystemClock_Config>
	exit_low_power_mode();
 8000b78:	f000 f81a 	bl	8000bb0 <exit_low_power_mode>
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	08006cf0 	.word	0x08006cf0
 8000b88:	20000358 	.word	0x20000358
 8000b8c:	200002d0 	.word	0x200002d0
 8000b90:	20000150 	.word	0x20000150
 8000b94:	2000007c 	.word	0x2000007c
 8000b98:	200002a8 	.word	0x200002a8
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40007000 	.word	0x40007000
 8000ba4:	fffffb7f 	.word	0xfffffb7f
 8000ba8:	ffdfffff 	.word	0xffdfffff
 8000bac:	ffffbfff 	.word	0xffffbfff

08000bb0 <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bda:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bec:	2104      	movs	r1, #4
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0389      	lsls	r1, r1, #14
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c12:	2180      	movs	r1, #128	@ 0x80
 8000c14:	02c9      	lsls	r1, r1, #11
 8000c16:	430a      	orrs	r2, r1
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	01c9      	lsls	r1, r1, #7
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	430a      	orrs	r2, r1
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <exit_low_power_mode+0xf8>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs and peripherals
    MX_GPIO_Init();
 8000c40:	f7ff fd26 	bl	8000690 <MX_GPIO_Init>
    MX_DMA_Init();
 8000c44:	f7ff fcfe 	bl	8000644 <MX_DMA_Init>
    MX_I2C1_Init();
 8000c48:	f7ff fd82 	bl	8000750 <MX_I2C1_Init>
    MX_LPUART1_UART_Init();
 8000c4c:	f000 fa8c 	bl	8001168 <MX_LPUART1_UART_Init>
    MX_USART1_UART_Init();
 8000c50:	f000 fab8 	bl	80011c4 <MX_USART1_UART_Init>
    MX_RTC_Init();
 8000c54:	f000 f97c 	bl	8000f50 <MX_RTC_Init>
    
    // Re-enable interrupts that were disabled
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c58:	2005      	movs	r0, #5
 8000c5a:	f000 fff2 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f000 ffef 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f000 ffec 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f000 ffe9 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000c70:	200b      	movs	r0, #11
 8000c72:	f000 ffe6 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c76:	201b      	movs	r0, #27
 8000c78:	f000 ffe3 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    
    // Exit low power mode for LoRa serial
    LoRaSerial_ExitLowPower(&hLora);
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <exit_low_power_mode+0xfc>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fdd4 	bl	800182c <LoRaSerial_ExitLowPower>
    
    // Reinitialize ATC handle for compatibility
    ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <exit_low_power_mode+0x100>)
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	490a      	ldr	r1, [pc, #40]	@ (8000cb4 <exit_low_power_mode+0x104>)
 8000c8c:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <exit_low_power_mode+0x108>)
 8000c8e:	f005 fa53 	bl	8006138 <ATC_Init>
    
    device_state = DEVICE_COLLECT_DATA;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <exit_low_power_mode+0x10c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]

    Debug_Print("Waking UP!\r\n");
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <exit_low_power_mode+0x110>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fe9e 	bl	80009dc <Debug_Print>
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000150 	.word	0x20000150
 8000cb0:	08006d04 	.word	0x08006d04
 8000cb4:	200002d0 	.word	0x200002d0
 8000cb8:	20000268 	.word	0x20000268
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	08006d0c 	.word	0x08006d0c

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fe19 	bl	8001900 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f8a9 	bl	8000e24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f7ff fcdd 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f7ff fcb5 	bl	8000644 <MX_DMA_Init>
  MX_I2C1_Init();
 8000cda:	f7ff fd39 	bl	8000750 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000cde:	f000 fa43 	bl	8001168 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000ce2:	f000 f935 	bl	8000f50 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000ce6:	f000 fa6d 	bl	80011c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the LoRaSerial driver
  LoRaSerial_Init(&hLora, &hlpuart1, loraRxBuf, sizeof(loraRxBuf), LoraLineHandler);
 8000cea:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <main+0x11c>)
 8000cec:	493d      	ldr	r1, [pc, #244]	@ (8000de4 <main+0x120>)
 8000cee:	483e      	ldr	r0, [pc, #248]	@ (8000de8 <main+0x124>)
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <main+0x128>)
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	f000 fc33 	bl	8001560 <LoRaSerial_Init>
  
  // Initialize the ATC handle for compatibility with existing code
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <main+0x12c>)
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4938      	ldr	r1, [pc, #224]	@ (8000de4 <main+0x120>)
 8000d02:	483c      	ldr	r0, [pc, #240]	@ (8000df4 <main+0x130>)
 8000d04:	f005 fa18 	bl	8006138 <ATC_Init>

  Debug_Print("RDY\r\n");
 8000d08:	4b3b      	ldr	r3, [pc, #236]	@ (8000df8 <main+0x134>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fe66 	bl	80009dc <Debug_Print>

  HAL_Delay(10000); // This makes it easier to debug, don't remove
 8000d10:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <main+0x138>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fe64 	bl	80019e0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_command_time = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]

  Debug_Print("DeviceState=Sleep\r\n");
 8000d1c:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <main+0x13c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fe5c 	bl	80009dc <Debug_Print>
  HAL_Delay(100); // This makes it easier to debug, don't remove
 8000d24:	2064      	movs	r0, #100	@ 0x64
 8000d26:	f000 fe5b 	bl	80019e0 <HAL_Delay>
  device_state = DEVICE_SLEEP;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <main+0x140>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  while(1)
  {
      // Use LoRaSerial driver for sending commands instead of ATC
      // ATC_Loop(&lora); // Commented out - we're using LoRaSerial now
	  Debug_Print("loop!!!\r\n");
 8000d30:	4b35      	ldr	r3, [pc, #212]	@ (8000e08 <main+0x144>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fe52 	bl	80009dc <Debug_Print>
      HAL_Delay(100); // This makes it easier to debug, don't remove
 8000d38:	2064      	movs	r0, #100	@ 0x64
 8000d3a:	f000 fe51 	bl	80019e0 <HAL_Delay>
      switch (device_state)
 8000d3e:	4b31      	ldr	r3, [pc, #196]	@ (8000e04 <main+0x140>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d005      	beq.n	8000d54 <main+0x90>
 8000d48:	dcf2      	bgt.n	8000d30 <main+0x6c>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d029      	beq.n	8000da2 <main+0xde>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d02a      	beq.n	8000da8 <main+0xe4>
 8000d52:	e044      	b.n	8000dde <main+0x11a>
      {
      case LORAWAN_JOIN:
          if (HAL_GetTick() - last_command_time > 10000 && !joined)
 8000d54:	f000 fe3a 	bl	80019cc <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	4a27      	ldr	r2, [pc, #156]	@ (8000dfc <main+0x138>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d93b      	bls.n	8000ddc <main+0x118>
 8000d64:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <main+0x148>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4053      	eors	r3, r2
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d034      	beq.n	8000ddc <main+0x118>
          {
        	  // Send JOIN command using LoRaSerial instead of ATC
              Debug_Print("Sending JOIN command\r\n");
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <main+0x14c>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fe31 	bl	80009dc <Debug_Print>
        	  LoRaSerial_Send(&hLora, "AT\r\n"); // Wake the LoRa Module
 8000d7a:	4a26      	ldr	r2, [pc, #152]	@ (8000e14 <main+0x150>)
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <main+0x124>)
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fc29 	bl	80015d8 <LoRaSerial_Send>
              HAL_Delay(100);
 8000d86:	2064      	movs	r0, #100	@ 0x64
 8000d88:	f000 fe2a 	bl	80019e0 <HAL_Delay>
              LoRaSerial_Send(&hLora, "AT+JOIN\r\n");
 8000d8c:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <main+0x154>)
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <main+0x124>)
 8000d90:	0011      	movs	r1, r2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fc20 	bl	80015d8 <LoRaSerial_Send>
              last_command_time = HAL_GetTick();
 8000d98:	f000 fe18 	bl	80019cc <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	607b      	str	r3, [r7, #4]
          }
	  break;
 8000da0:	e01c      	b.n	8000ddc <main+0x118>
	  case DEVICE_SLEEP:
		  enter_low_power_mode();
 8000da2:	f7ff fe45 	bl	8000a30 <enter_low_power_mode>
	  break;
 8000da6:	e01a      	b.n	8000dde <main+0x11a>
	  case DEVICE_COLLECT_DATA:
		  // Send data using LoRaSerial instead of ATC
		  Debug_Print("Sending data...\r\n");
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <main+0x158>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fe16 	bl	80009dc <Debug_Print>
		  LoRaSerial_Send(&hLora, "AT\r\n");
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <main+0x150>)
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <main+0x124>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 fc0e 	bl	80015d8 <LoRaSerial_Send>
          HAL_Delay(100);
 8000dbc:	2064      	movs	r0, #100	@ 0x64
 8000dbe:	f000 fe0f 	bl	80019e0 <HAL_Delay>
		  LoRaSerial_Send(&hLora, "AT+SEND \"AA\"\r\n");
 8000dc2:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <main+0x15c>)
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <main+0x124>)
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fc05 	bl	80015d8 <LoRaSerial_Send>
		  HAL_Delay(100);  // Wait for command to be processed
 8000dce:	2064      	movs	r0, #100	@ 0x64
 8000dd0:	f000 fe06 	bl	80019e0 <HAL_Delay>
		  device_state = DEVICE_SLEEP;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <main+0x140>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	  break;
 8000dda:	e000      	b.n	8000dde <main+0x11a>
	  break;
 8000ddc:	46c0      	nop			@ (mov r8, r8)
	  Debug_Print("loop!!!\r\n");
 8000dde:	e7a7      	b.n	8000d30 <main+0x6c>
 8000de0:	200000d0 	.word	0x200000d0
 8000de4:	200002d0 	.word	0x200002d0
 8000de8:	20000150 	.word	0x20000150
 8000dec:	080008dd 	.word	0x080008dd
 8000df0:	08006d04 	.word	0x08006d04
 8000df4:	20000268 	.word	0x20000268
 8000df8:	08006d1c 	.word	0x08006d1c
 8000dfc:	00002710 	.word	0x00002710
 8000e00:	08006d24 	.word	0x08006d24
 8000e04:	20000000 	.word	0x20000000
 8000e08:	08006d38 	.word	0x08006d38
 8000e0c:	200002a4 	.word	0x200002a4
 8000e10:	08006d44 	.word	0x08006d44
 8000e14:	08006d5c 	.word	0x08006d5c
 8000e18:	08006d64 	.word	0x08006d64
 8000e1c:	08006d70 	.word	0x08006d70
 8000e20:	08006d84 	.word	0x08006d84

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b09f      	sub	sp, #124	@ 0x7c
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	2440      	movs	r4, #64	@ 0x40
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2338      	movs	r3, #56	@ 0x38
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f005 fb33 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3a:	232c      	movs	r3, #44	@ 0x2c
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2314      	movs	r3, #20
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f005 fb2b 	bl	80064a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2328      	movs	r3, #40	@ 0x28
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f005 fb24 	bl	80064a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <SystemClock_Config+0x104>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a33      	ldr	r2, [pc, #204]	@ (8000f2c <SystemClock_Config+0x108>)
 8000e5e:	401a      	ands	r2, r3
 8000e60:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <SystemClock_Config+0x104>)
 8000e62:	2180      	movs	r1, #128	@ 0x80
 8000e64:	0109      	lsls	r1, r1, #4
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	221a      	movs	r2, #26
 8000e70:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	0212      	lsls	r2, r2, #8
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 fded 	bl	8002a80 <HAL_RCC_OscConfig>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000eaa:	f000 f84c 	bl	8000f46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	212c      	movs	r1, #44	@ 0x2c
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 f9a8 	bl	8003228 <HAL_RCC_ClockConfig>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000edc:	f000 f833 	bl	8000f46 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	222d      	movs	r2, #45	@ 0x2d
 8000ee4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;  // Use HSI for wake-up capability
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	0292      	lsls	r2, r2, #10
 8000f00:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 fb93 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f0e:	f000 f81a 	bl	8000f46 <Error_Handler>
  }
  
  // Ensure HSI remains active during STOP mode for LPUART wake-up
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <SystemClock_Config+0x10c>)
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemClock_Config+0x10c>)
 8000f18:	2180      	movs	r1, #128	@ 0x80
 8000f1a:	0209      	lsls	r1, r1, #8
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	60da      	str	r2, [r3, #12]
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b01f      	add	sp, #124	@ 0x7c
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	ffffe7ff 	.word	0xffffe7ff
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_RTCEx_WakeUpTimerEventCallback>:
  // No code needed here, just waking up is enough
  __NOP();
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  // RTC Wake-up Timer callback - system will wake up from STOP mode after 60 seconds
  // This is the intended wake-up source
  __NOP();
 8000f3c:	46c0      	nop			@ (mov r8, r8)
}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <MX_RTC_Init+0x64>)
 8000f58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f62:	227f      	movs	r2, #127	@ 0x7f
 8000f64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f68:	22ff      	movs	r2, #255	@ 0xff
 8000f6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fcf0 	bl	800396c <HAL_RTC_Init>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f90:	f7ff ffd9 	bl	8000f46 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000f94:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <MX_RTC_Init+0x68>)
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_RTC_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f002 fee6 	bl	8003d6c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000fa4:	f7ff ffcf 	bl	8000f46 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	200002a8 	.word	0x200002a8
 8000fb4:	40002800 	.word	0x40002800
 8000fb8:	0000500b 	.word	0x0000500b

08000fbc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_RTC_MspInit+0x38>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10e      	bne.n	8000fec <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_RTC_MspInit+0x3c>)
 8000fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_RTC_MspInit+0x3c>)
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	02c9      	lsls	r1, r1, #11
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f000 fe19 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f000 fe2b 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40002800 	.word	0x40002800
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <HAL_MspInit+0x24>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x24>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <HAL_MspInit+0x24>)
 800100e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_MspInit+0x24>)
 8001012:	2180      	movs	r1, #128	@ 0x80
 8001014:	0549      	lsls	r1, r1, #21
 8001016:	430a      	orrs	r2, r1
 8001018:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 fcac 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <RTC_IRQHandler+0x14>)
 800105e:	0018      	movs	r0, r3
 8001060:	f002 ffc0 	bl	8003fe4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	200002a8 	.word	0x200002a8

08001070 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001076:	0018      	movs	r0, r3
 8001078:	f000 ffd3 	bl	8002022 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <DMA1_Channel2_3_IRQHandler+0x20>)
 800107e:	0018      	movs	r0, r3
 8001080:	f000 ffcf 	bl	8002022 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	20000428 	.word	0x20000428
 8001090:	200003e0 	.word	0x200003e0

08001094 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800109a:	0018      	movs	r0, r3
 800109c:	f000 ffc1 	bl	8002022 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 ffbd 	bl	8002022 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	200004b8 	.word	0x200004b8
 80010b4:	20000470 	.word	0x20000470

080010b8 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <RNG_LPUART1_IRQHandler+0x14>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f003 f9fe 	bl	80044c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	200002d0 	.word	0x200002d0

080010d0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */
#include "lorawan/lorawan_serial.h"
extern LoRaSerial_HandleTypeDef hLora;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    LoRaSerial_RxCpltCallback(&hLora, huart);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <HAL_UART_RxCpltCallback+0x1c>)
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fac9 	bl	8001676 <LoRaSerial_RxCpltCallback>
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000150 	.word	0x20000150

080010f0 <_sbrk>:
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
 8001120:	f005 fa02 	bl	8006528 <__errno>
 8001124:	0003      	movs	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	425b      	negs	r3, r3
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	18d2      	adds	r2, r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b006      	add	sp, #24
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20005000 	.word	0x20005000
 8001150:	00000400 	.word	0x00000400
 8001154:	200002cc 	.word	0x200002cc
 8001158:	20000650 	.word	0x20000650

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 800116e:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <MX_LPUART1_UART_Init+0x58>)
 8001170:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 8001174:	22e1      	movs	r2, #225	@ 0xe1
 8001176:	0252      	lsls	r2, r2, #9
 8001178:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <MX_LPUART1_UART_Init+0x54>)
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 ff4c 	bl	8004044 <HAL_UART_Init>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d001      	beq.n	80011b4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f7ff fec9 	bl	8000f46 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	40004800 	.word	0x40004800

080011c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <MX_USART1_UART_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011d0:	2296      	movs	r2, #150	@ 0x96
 80011d2:	0192      	lsls	r2, r2, #6
 80011d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_USART1_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_USART1_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <MX_USART1_UART_Init+0x58>)
 8001208:	0018      	movs	r0, r3
 800120a:	f002 ff1b 	bl	8004044 <HAL_UART_Init>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f7ff fe98 	bl	8000f46 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000358 	.word	0x20000358
 8001220:	40013800 	.word	0x40013800

08001224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08b      	sub	sp, #44	@ 0x2c
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	2414      	movs	r4, #20
 800122e:	193b      	adds	r3, r7, r4
 8001230:	0018      	movs	r0, r3
 8001232:	2314      	movs	r3, #20
 8001234:	001a      	movs	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	f005 f932 	bl	80064a0 <memset>
  if(uartHandle->Instance==LPUART1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a87      	ldr	r2, [pc, #540]	@ (8001460 <HAL_UART_MspInit+0x23c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d000      	beq.n	8001248 <HAL_UART_MspInit+0x24>
 8001246:	e084      	b.n	8001352 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001248:	4b86      	ldr	r3, [pc, #536]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800124a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800124c:	4b85      	ldr	r3, [pc, #532]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	02c9      	lsls	r1, r1, #11
 8001252:	430a      	orrs	r2, r1
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b83      	ldr	r3, [pc, #524]	@ (8001464 <HAL_UART_MspInit+0x240>)
 8001258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800125a:	4b82      	ldr	r3, [pc, #520]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001262:	4b80      	ldr	r3, [pc, #512]	@ (8001464 <HAL_UART_MspInit+0x240>)
 8001264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001266:	2201      	movs	r2, #1
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2202      	movs	r2, #2
 800127a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2203      	movs	r2, #3
 8001286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2206      	movs	r2, #6
 800128c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	187a      	adds	r2, r7, r1
 8001290:	23a0      	movs	r3, #160	@ 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f000 ffaa 	bl	80021f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800129c:	4b72      	ldr	r3, [pc, #456]	@ (8001468 <HAL_UART_MspInit+0x244>)
 800129e:	4a73      	ldr	r2, [pc, #460]	@ (800146c <HAL_UART_MspInit+0x248>)
 80012a0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 80012a2:	4b71      	ldr	r3, [pc, #452]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012a4:	2205      	movs	r2, #5
 80012a6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c0:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80012c6:	4b68      	ldr	r3, [pc, #416]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012cc:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fce1 	bl	8001c9c <HAL_DMA_Init>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80012de:	f7ff fe32 	bl	8000f46 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a60      	ldr	r2, [pc, #384]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012e6:	675a      	str	r2, [r3, #116]	@ 0x74
 80012e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001468 <HAL_UART_MspInit+0x244>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80012ee:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 80012f0:	4a60      	ldr	r2, [pc, #384]	@ (8001474 <HAL_UART_MspInit+0x250>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 80012fc:	2210      	movs	r2, #16
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b5b      	ldr	r3, [pc, #364]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800130c:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001312:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001318:	4b55      	ldr	r3, [pc, #340]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800131e:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001324:	4b52      	ldr	r3, [pc, #328]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001326:	0018      	movs	r0, r3
 8001328:	f000 fcb8 	bl	8001c9c <HAL_DMA_Init>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001330:	f7ff fe09 	bl	8000f46 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4e      	ldr	r2, [pc, #312]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 8001338:	671a      	str	r2, [r3, #112]	@ 0x70
 800133a:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <HAL_UART_MspInit+0x24c>)
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	201d      	movs	r0, #29
 8001346:	f000 fc67 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 800134a:	201d      	movs	r0, #29
 800134c:	f000 fc79 	bl	8001c42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001350:	e082      	b.n	8001458 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_UART_MspInit+0x254>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d000      	beq.n	800135e <HAL_UART_MspInit+0x13a>
 800135c:	e07c      	b.n	8001458 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART1_CLK_ENABLE();
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_UART_MspInit+0x240>)
 8001360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <HAL_UART_MspInit+0x240>)
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	01c9      	lsls	r1, r1, #7
 8001368:	430a      	orrs	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001370:	4b3c      	ldr	r3, [pc, #240]	@ (8001464 <HAL_UART_MspInit+0x240>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001378:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001384:	2114      	movs	r1, #20
 8001386:	187b      	adds	r3, r7, r1
 8001388:	22c0      	movs	r2, #192	@ 0xc0
 800138a:	00d2      	lsls	r2, r2, #3
 800138c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2202      	movs	r2, #2
 8001392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2203      	movs	r2, #3
 800139e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2204      	movs	r2, #4
 80013a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	187a      	adds	r2, r7, r1
 80013a8:	23a0      	movs	r3, #160	@ 0xa0
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 ff1e 	bl	80021f0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013b4:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013b6:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_UART_MspInit+0x25c>)
 80013b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80013ba:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013bc:	2203      	movs	r2, #3
 80013be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c0:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013de:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 fc55 	bl	8001c9c <HAL_DMA_Init>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80013f6:	f7ff fda6 	bl	8000f46 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <HAL_UART_MspInit+0x258>)
 80013fe:	675a      	str	r2, [r3, #116]	@ 0x74
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <HAL_UART_MspInit+0x258>)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <HAL_UART_MspInit+0x264>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_UART_MspInit+0x260>)
 800140e:	2203      	movs	r2, #3
 8001410:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001414:	2210      	movs	r2, #16
 8001416:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_UART_MspInit+0x260>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_UART_MspInit+0x260>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_UART_MspInit+0x260>)
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fc2c 	bl	8001c9c <HAL_DMA_Init>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001448:	f7ff fd7d 	bl	8000f46 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001450:	671a      	str	r2, [r3, #112]	@ 0x70
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_UART_MspInit+0x260>)
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b00b      	add	sp, #44	@ 0x2c
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40004800 	.word	0x40004800
 8001464:	40021000 	.word	0x40021000
 8001468:	200003e0 	.word	0x200003e0
 800146c:	40020030 	.word	0x40020030
 8001470:	20000428 	.word	0x20000428
 8001474:	4002001c 	.word	0x4002001c
 8001478:	40013800 	.word	0x40013800
 800147c:	20000470 	.word	0x20000470
 8001480:	40020058 	.word	0x40020058
 8001484:	200004b8 	.word	0x200004b8
 8001488:	40020044 	.word	0x40020044

0800148c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <HAL_UART_MspDeInit+0x88>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d119      	bne.n	80014d2 <HAL_UART_MspDeInit+0x46>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800149e:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <HAL_UART_MspDeInit+0x8c>)
 80014a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <HAL_UART_MspDeInit+0x8c>)
 80014a4:	491d      	ldr	r1, [pc, #116]	@ (800151c <HAL_UART_MspDeInit+0x90>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80014aa:	23a0      	movs	r3, #160	@ 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	210c      	movs	r1, #12
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 f81b 	bl	80024ec <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fc66 	bl	8001d8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 fc61 	bl	8001d8c <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(RNG_LPUART1_IRQn);
 80014ca:	201d      	movs	r0, #29
 80014cc:	f000 fbc9 	bl	8001c62 <HAL_NVIC_DisableIRQ>
    HAL_DMA_DeInit(uartHandle->hdmatx);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80014d0:	e01c      	b.n	800150c <HAL_UART_MspDeInit+0x80>
  else if(uartHandle->Instance==USART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <HAL_UART_MspDeInit+0x94>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d117      	bne.n	800150c <HAL_UART_MspDeInit+0x80>
    __HAL_RCC_USART1_CLK_DISABLE();
 80014dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <HAL_UART_MspDeInit+0x8c>)
 80014de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_UART_MspDeInit+0x8c>)
 80014e2:	4910      	ldr	r1, [pc, #64]	@ (8001524 <HAL_UART_MspDeInit+0x98>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80014e8:	23c0      	movs	r3, #192	@ 0xc0
 80014ea:	00da      	lsls	r2, r3, #3
 80014ec:	23a0      	movs	r3, #160	@ 0xa0
 80014ee:	05db      	lsls	r3, r3, #23
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fffa 	bl	80024ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	0018      	movs	r0, r3
 80014fe:	f000 fc45 	bl	8001d8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fc40 	bl	8001d8c <HAL_DMA_DeInit>
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40004800 	.word	0x40004800
 8001518:	40021000 	.word	0x40021000
 800151c:	fffbffff 	.word	0xfffbffff
 8001520:	40013800 	.word	0x40013800
 8001524:	ffffbfff 	.word	0xffffbfff

08001528 <clear_buffers>:

#include "lorawan_serial.h"
#include <string.h>

static void clear_buffers(LoRaSerial_HandleTypeDef *h)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    h->head = h->tail = 0;
 8001530:	2100      	movs	r1, #0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	819a      	strh	r2, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1c0a      	adds	r2, r1, #0
 800153c:	815a      	strh	r2, [r3, #10]
    h->linePos = 0;
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	238a      	movs	r3, #138	@ 0x8a
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2100      	movs	r1, #0
 8001546:	52d1      	strh	r1, [r2, r3]
    memset(h->lineBuf, 0, sizeof(h->lineBuf));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3314      	adds	r3, #20
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	0052      	lsls	r2, r2, #1
 8001550:	2100      	movs	r1, #0
 8001552:	0018      	movs	r0, r3
 8001554:	f004 ffa4 	bl	80064a0 <memset>
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <LoRaSerial_Init>:
HAL_StatusTypeDef LoRaSerial_Init(LoRaSerial_HandleTypeDef *h,
                                  UART_HandleTypeDef *huart,
                                  uint8_t *rxBuffer,
                                  uint16_t bufferSize,
                                  LoRaLineCallback cb)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	001a      	movs	r2, r3
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	801a      	strh	r2, [r3, #0]
    if (!h || !huart || !rxBuffer || bufferSize == 0) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <LoRaSerial_Init+0x2c>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <LoRaSerial_Init+0x2c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <LoRaSerial_Init+0x2c>
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <LoRaSerial_Init+0x30>
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e01f      	b.n	80015d0 <LoRaSerial_Init+0x70>
    }
    h->huart      = huart;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	601a      	str	r2, [r3, #0]
    h->rxBuffer   = rxBuffer;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
    h->bufferSize = bufferSize;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1cba      	adds	r2, r7, #2
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	811a      	strh	r2, [r3, #8]
    h->lineCallback = cb;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	611a      	str	r2, [r3, #16]
    h->inLowPower = 0;
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	2318      	movs	r3, #24
 80015ae:	33ff      	adds	r3, #255	@ 0xff
 80015b0:	2100      	movs	r1, #0
 80015b2:	54d1      	strb	r1, [r2, r3]
    clear_buffers(h);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff ffb6 	bl	8001528 <clear_buffers>
     * single byte reads so that the RXNE interrupt fires on every
     * character; this avoids DMA and allows the UART to wake the MCU
     * on start bit when in STOP mode.  The received byte will be
     * placed into h->rxByte and the HAL will call HAL_UART_RxCpltCallback().
     */
    return HAL_UART_Receive_IT(h->huart, &h->rxByte, 1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3317      	adds	r3, #23
 80015c4:	33ff      	adds	r3, #255	@ 0xff
 80015c6:	2201      	movs	r2, #1
 80015c8:	0019      	movs	r1, r3
 80015ca:	f002 fe6d 	bl	80042a8 <HAL_UART_Receive_IT>
 80015ce:	0003      	movs	r3, r0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <LoRaSerial_Send>:

HAL_StatusTypeDef LoRaSerial_Send(LoRaSerial_HandleTypeDef *h,
                                  const char *data)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    if (!h || !data) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <LoRaSerial_Send+0x16>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <LoRaSerial_Send+0x1a>
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <LoRaSerial_Send+0x3a>
    }
    size_t len = strlen(data);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7fe fd87 	bl	8000108 <strlen>
 80015fa:	0003      	movs	r3, r0
 80015fc:	60fb      	str	r3, [r7, #12]
    /* Use blocking transmit; the application can wrap this in a
     * critical section or adjust the timeout as desired. */
    return HAL_UART_Transmit(h->huart, (uint8_t*)data, (uint16_t)len, HAL_MAX_DELAY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	b29a      	uxth	r2, r3
 8001606:	2301      	movs	r3, #1
 8001608:	425b      	negs	r3, r3
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	f002 fdac 	bl	8004168 <HAL_UART_Transmit>
 8001610:	0003      	movs	r3, r0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}

0800161a <push_byte>:

/* Internal helper to push a byte into the ring buffer */
static void push_byte(LoRaSerial_HandleTypeDef *h, uint8_t ch)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	000a      	movs	r2, r1
 8001624:	1cfb      	adds	r3, r7, #3
 8001626:	701a      	strb	r2, [r3, #0]
    uint16_t next = (h->head + 1) % h->bufferSize;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	895b      	ldrh	r3, [r3, #10]
 800162c:	b29b      	uxth	r3, r3
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	891b      	ldrh	r3, [r3, #8]
 8001634:	0019      	movs	r1, r3
 8001636:	0010      	movs	r0, r2
 8001638:	f7fe fee8 	bl	800040c <__aeabi_idivmod>
 800163c:	000b      	movs	r3, r1
 800163e:	001a      	movs	r2, r3
 8001640:	210e      	movs	r1, #14
 8001642:	187b      	adds	r3, r7, r1
 8001644:	801a      	strh	r2, [r3, #0]
    if (next != h->tail) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	899b      	ldrh	r3, [r3, #12]
 800164a:	b29b      	uxth	r3, r3
 800164c:	187a      	adds	r2, r7, r1
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d00c      	beq.n	800166e <push_byte+0x54>
        h->rxBuffer[h->head] = ch;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	8952      	ldrh	r2, [r2, #10]
 800165c:	b292      	uxth	r2, r2
 800165e:	189b      	adds	r3, r3, r2
 8001660:	1cfa      	adds	r2, r7, #3
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	701a      	strb	r2, [r3, #0]
        h->head = next;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	187a      	adds	r2, r7, r1
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	815a      	strh	r2, [r3, #10]
    }
    /* else overflow – drop the byte */
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}

08001676 <LoRaSerial_RxCpltCallback>:
/* Called from the HAL UART RX complete interrupt handler.  You must
 * forward the HAL callback to this function from HAL_UART_RxCpltCallback()
 * in your code. */
void LoRaSerial_RxCpltCallback(LoRaSerial_HandleTypeDef *h,
                               UART_HandleTypeDef *huart)
{
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
    if (!h || h->huart != huart) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <LoRaSerial_RxCpltCallback+0x12>
 8001686:	e07e      	b.n	8001786 <LoRaSerial_RxCpltCallback+0x110>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d000      	beq.n	8001694 <LoRaSerial_RxCpltCallback+0x1e>
 8001692:	e078      	b.n	8001786 <LoRaSerial_RxCpltCallback+0x110>
        return;
    }
    uint8_t ch = h->rxByte;
 8001694:	240f      	movs	r4, #15
 8001696:	193b      	adds	r3, r7, r4
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	228b      	movs	r2, #139	@ 0x8b
 800169c:	0052      	lsls	r2, r2, #1
 800169e:	5c8a      	ldrb	r2, [r1, r2]
 80016a0:	701a      	strb	r2, [r3, #0]
    /* Store the character in the ring buffer */
    push_byte(h, ch);
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7ff ffb5 	bl	800161a <push_byte>
    /* Build up a line until we see '\n' or '\r' */
    if (h->linePos < sizeof(h->lineBuf) - 1) {
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	238a      	movs	r3, #138	@ 0x8a
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	5ad3      	ldrh	r3, [r2, r3]
 80016b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80016ba:	d847      	bhi.n	800174c <LoRaSerial_RxCpltCallback+0xd6>
        if (ch != '\r' && ch != '\n') {
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b0d      	cmp	r3, #13
 80016c2:	d013      	beq.n	80016ec <LoRaSerial_RxCpltCallback+0x76>
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d00f      	beq.n	80016ec <LoRaSerial_RxCpltCallback+0x76>
            h->lineBuf[h->linePos++] = (char)ch;
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	238a      	movs	r3, #138	@ 0x8a
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	5ad3      	ldrh	r3, [r2, r3]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	b290      	uxth	r0, r2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	228a      	movs	r2, #138	@ 0x8a
 80016dc:	0052      	lsls	r2, r2, #1
 80016de:	5288      	strh	r0, [r1, r2]
 80016e0:	001a      	movs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	189b      	adds	r3, r3, r2
 80016e6:	193a      	adds	r2, r7, r4
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	751a      	strb	r2, [r3, #20]
        }
        /* On newline or carriage return, terminate and call callback */
        if (ch == '\r' || ch == '\n') {
 80016ec:	220f      	movs	r2, #15
 80016ee:	18bb      	adds	r3, r7, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b0d      	cmp	r3, #13
 80016f4:	d003      	beq.n	80016fe <LoRaSerial_RxCpltCallback+0x88>
 80016f6:	18bb      	adds	r3, r7, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b0a      	cmp	r3, #10
 80016fc:	d133      	bne.n	8001766 <LoRaSerial_RxCpltCallback+0xf0>
            h->lineBuf[h->linePos] = '\0';
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	238a      	movs	r3, #138	@ 0x8a
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	5ad3      	ldrh	r3, [r2, r3]
 8001706:	001a      	movs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	189b      	adds	r3, r3, r2
 800170c:	2200      	movs	r2, #0
 800170e:	751a      	strb	r2, [r3, #20]
            if (h->linePos > 0 && h->lineCallback) {
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	238a      	movs	r3, #138	@ 0x8a
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	5ad3      	ldrh	r3, [r2, r3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d009      	beq.n	8001730 <LoRaSerial_RxCpltCallback+0xba>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <LoRaSerial_RxCpltCallback+0xba>
                h->lineCallback(h->lineBuf);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	3214      	adds	r2, #20
 800172c:	0010      	movs	r0, r2
 800172e:	4798      	blx	r3
            }
            /* Reset line buffer for next message */
            h->linePos = 0;
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	238a      	movs	r3, #138	@ 0x8a
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2100      	movs	r1, #0
 8001738:	52d1      	strh	r1, [r2, r3]
            memset(h->lineBuf, 0, sizeof(h->lineBuf));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3314      	adds	r3, #20
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	0052      	lsls	r2, r2, #1
 8001742:	2100      	movs	r1, #0
 8001744:	0018      	movs	r0, r3
 8001746:	f004 feab 	bl	80064a0 <memset>
 800174a:	e00c      	b.n	8001766 <LoRaSerial_RxCpltCallback+0xf0>
        }
    } else {
        /* Buffer full – reset */
        h->linePos = 0;
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	238a      	movs	r3, #138	@ 0x8a
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2100      	movs	r1, #0
 8001754:	52d1      	strh	r1, [r2, r3]
        memset(h->lineBuf, 0, sizeof(h->lineBuf));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3314      	adds	r3, #20
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	0052      	lsls	r2, r2, #1
 800175e:	2100      	movs	r1, #0
 8001760:	0018      	movs	r0, r3
 8001762:	f004 fe9d 	bl	80064a0 <memset>
    }
    /* Restart reception of next byte, unless in low power */
    if (!h->inLowPower) {
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	2318      	movs	r3, #24
 800176a:	33ff      	adds	r3, #255	@ 0xff
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10a      	bne.n	8001788 <LoRaSerial_RxCpltCallback+0x112>
        HAL_UART_Receive_IT(h->huart, &h->rxByte, 1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3317      	adds	r3, #23
 800177a:	33ff      	adds	r3, #255	@ 0xff
 800177c:	2201      	movs	r2, #1
 800177e:	0019      	movs	r1, r3
 8001780:	f002 fd92 	bl	80042a8 <HAL_UART_Receive_IT>
 8001784:	e000      	b.n	8001788 <LoRaSerial_RxCpltCallback+0x112>
        return;
 8001786:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001788:	46bd      	mov	sp, r7
 800178a:	b005      	add	sp, #20
 800178c:	bd90      	pop	{r4, r7, pc}

0800178e <LoRaSerial_EnterLowPower>:

HAL_StatusTypeDef LoRaSerial_EnterLowPower(LoRaSerial_HandleTypeDef *h)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    if (!h) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <LoRaSerial_EnterLowPower+0x12>
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e040      	b.n	8001822 <LoRaSerial_EnterLowPower+0x94>
    }
    if (h->inLowPower) {
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	2318      	movs	r3, #24
 80017a4:	33ff      	adds	r3, #255	@ 0xff
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <LoRaSerial_EnterLowPower+0x22>
        return HAL_OK; /* already in low power */
 80017ac:	2300      	movs	r3, #0
 80017ae:	e038      	b.n	8001822 <LoRaSerial_EnterLowPower+0x94>
    }
    h->inLowPower = 1;
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	2318      	movs	r3, #24
 80017b4:	33ff      	adds	r3, #255	@ 0xff
 80017b6:	2101      	movs	r1, #1
 80017b8:	54d1      	strb	r1, [r2, r3]
    /* Abort any ongoing reception so that the UART can be reconfigured */
    HAL_UART_AbortReceive(h->huart);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 fdd0 	bl	8004364 <HAL_UART_AbortReceive>
    /* Flush buffers so we start clean after waking */
    clear_buffers(h);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff feae 	bl	8001528 <clear_buffers>
    /* Configure the wake‑up source to the start bit.  See
     * HAL_UARTEx_StopModeWakeUpSourceConfig() in stm32l0xx_hal_uart_ex.c
     * for details. */
    UART_WakeUpTypeDef wakeup;
    wakeup.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80017cc:	2108      	movs	r1, #8
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	0392      	lsls	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]
    wakeup.AddressLength = UART_ADDRESS_DETECT_7B;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2210      	movs	r2, #16
 80017da:	809a      	strh	r2, [r3, #4]
    wakeup.Address = 0; /* unused for start bit mode */
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	719a      	strb	r2, [r3, #6]
    if (HAL_UARTEx_StopModeWakeUpSourceConfig(h->huart, wakeup) != HAL_OK) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	f004 fb28 	bl	8005e40 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <LoRaSerial_EnterLowPower+0x6a>
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e014      	b.n	8001822 <LoRaSerial_EnterLowPower+0x94>
    }
    /* Enable the wakeup interrupt (WUF bit) */
    __HAL_UART_ENABLE_IT(h->huart, UART_IT_WUF);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	03c9      	lsls	r1, r1, #15
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
    /* Enable Stop mode on the UART */
    if (HAL_UARTEx_EnableStopMode(h->huart) != HAL_OK) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0018      	movs	r0, r3
 8001814:	f004 fb7a 	bl	8005f0c <HAL_UARTEx_EnableStopMode>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d001      	beq.n	8001820 <LoRaSerial_EnterLowPower+0x92>
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <LoRaSerial_EnterLowPower+0x94>
    }
    return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <LoRaSerial_ExitLowPower>:

HAL_StatusTypeDef LoRaSerial_ExitLowPower(LoRaSerial_HandleTypeDef *h)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    if (!h) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <LoRaSerial_ExitLowPower+0x12>
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e02f      	b.n	800189e <LoRaSerial_ExitLowPower+0x72>
    }
    if (!h->inLowPower) {
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	2318      	movs	r3, #24
 8001842:	33ff      	adds	r3, #255	@ 0xff
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <LoRaSerial_ExitLowPower+0x22>
        return HAL_OK; /* not in low power */
 800184a:	2300      	movs	r3, #0
 800184c:	e027      	b.n	800189e <LoRaSerial_ExitLowPower+0x72>
    }
    h->inLowPower = 0;
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	2318      	movs	r3, #24
 8001852:	33ff      	adds	r3, #255	@ 0xff
 8001854:	2100      	movs	r1, #0
 8001856:	54d1      	strb	r1, [r2, r3]
    /* Disable wakeup interrupt and Stop mode */
    __HAL_UART_DISABLE_IT(h->huart, UART_IT_WUF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4910      	ldr	r1, [pc, #64]	@ (80018a8 <LoRaSerial_ExitLowPower+0x7c>)
 8001868:	400a      	ands	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
    if (HAL_UARTEx_DisableStopMode(h->huart) != HAL_OK) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0018      	movs	r0, r3
 8001872:	f004 fb7c 	bl	8005f6e <HAL_UARTEx_DisableStopMode>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <LoRaSerial_ExitLowPower+0x52>
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <LoRaSerial_ExitLowPower+0x72>
    }
    /* Clear any lingering wakeup flag */
    __HAL_UART_CLEAR_FLAG(h->huart, UART_CLEAR_WUF);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	0352      	lsls	r2, r2, #13
 8001888:	621a      	str	r2, [r3, #32]
    /* Restart reception */
    return HAL_UART_Receive_IT(h->huart, &h->rxByte, 1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3317      	adds	r3, #23
 8001892:	33ff      	adds	r3, #255	@ 0xff
 8001894:	2201      	movs	r2, #1
 8001896:	0019      	movs	r1, r3
 8001898:	f002 fd06 	bl	80042a8 <HAL_UART_Receive_IT>
 800189c:	0003      	movs	r3, r0
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	ffbfffff 	.word	0xffbfffff

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80018ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b0:	f7ff fc54 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopForever+0xe>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopForever+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80018da:	f004 fe2b 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff f9f1 	bl	8000cc4 <main>

080018e2 <LoopForever>:

LoopForever:
    b LoopForever
 80018e2:	e7fe      	b.n	80018e2 <LoopForever>
   ldr   r0, =_estack
 80018e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018f0:	08006e44 	.word	0x08006e44
  ldr r2, =_sbss
 80018f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018f8:	2000064c 	.word	0x2000064c

080018fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_COMP_IRQHandler>
	...

08001900 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_Init+0x3c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Init+0x3c>)
 8001912:	2140      	movs	r1, #64	@ 0x40
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001918:	2000      	movs	r0, #0
 800191a:	f000 f811 	bl	8001940 <HAL_InitTick>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d003      	beq.n	800192a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e001      	b.n	800192e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192a:	f7ff fb67 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_InitTick+0x5c>)
 800194a:	681c      	ldr	r4, [r3, #0]
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_InitTick+0x60>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	0019      	movs	r1, r3
 8001952:	23fa      	movs	r3, #250	@ 0xfa
 8001954:	0098      	lsls	r0, r3, #2
 8001956:	f7fe fbe9 	bl	800012c <__udivsi3>
 800195a:	0003      	movs	r3, r0
 800195c:	0019      	movs	r1, r3
 800195e:	0020      	movs	r0, r4
 8001960:	f7fe fbe4 	bl	800012c <__udivsi3>
 8001964:	0003      	movs	r3, r0
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f98b 	bl	8001c82 <HAL_SYSTICK_Config>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00f      	b.n	8001994 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d80b      	bhi.n	8001992 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	2301      	movs	r3, #1
 800197e:	425b      	negs	r3, r3
 8001980:	2200      	movs	r2, #0
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f948 	bl	8001c18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_InitTick+0x64>)
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b003      	add	sp, #12
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	20000004 	.word	0x20000004
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	20000008 	.word	0x20000008

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_IncTick+0x1c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	001a      	movs	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_IncTick+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	18d2      	adds	r2, r2, r3
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ba:	601a      	str	r2, [r3, #0]
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	20000500 	.word	0x20000500

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b02      	ldr	r3, [pc, #8]	@ (80019dc <HAL_GetTick+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	20000500 	.word	0x20000500

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fff0 	bl	80019cc <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3301      	adds	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	001a      	movs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	189b      	adds	r3, r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	f7ff ffe0 	bl	80019cc <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <HAL_SuspendTick+0x18>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_SuspendTick+0x18>)
 8001a32:	2102      	movs	r1, #2
 8001a34:	438a      	bics	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <HAL_ResumeTick+0x18>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_ResumeTick+0x18>)
 8001a4e:	2102      	movs	r1, #2
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
}
 8001a70:	46c0      	nop			@ (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	40015800 	.word	0x40015800

08001a7c <__NVIC_EnableIRQ>:
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a8e:	d809      	bhi.n	8001aa4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	001a      	movs	r2, r3
 8001a96:	231f      	movs	r3, #31
 8001a98:	401a      	ands	r2, r3
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_EnableIRQ+0x30>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4091      	lsls	r1, r2
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_DisableIRQ>:
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	1dfb      	adds	r3, r7, #7
 8001aba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac2:	d810      	bhi.n	8001ae6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	001a      	movs	r2, r3
 8001aca:	231f      	movs	r3, #31
 8001acc:	4013      	ands	r3, r2
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <__NVIC_DisableIRQ+0x40>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ada:	f3bf 8f4f 	dsb	sy
}
 8001ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001ae0:	f3bf 8f6f 	isb	sy
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b002      	add	sp, #8
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b08:	d828      	bhi.n	8001b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	33c0      	adds	r3, #192	@ 0xc0
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	589b      	ldr	r3, [r3, r2]
 8001b1a:	1dfa      	adds	r2, r7, #7
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	0011      	movs	r1, r2
 8001b20:	2203      	movs	r2, #3
 8001b22:	400a      	ands	r2, r1
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	21ff      	movs	r1, #255	@ 0xff
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	000a      	movs	r2, r1
 8001b2c:	43d2      	mvns	r2, r2
 8001b2e:	401a      	ands	r2, r3
 8001b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	22ff      	movs	r2, #255	@ 0xff
 8001b38:	401a      	ands	r2, r3
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2303      	movs	r3, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b48:	481f      	ldr	r0, [pc, #124]	@ (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	430a      	orrs	r2, r1
 8001b54:	33c0      	adds	r3, #192	@ 0xc0
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b5a:	e031      	b.n	8001bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <__NVIC_SetPriority+0xd8>)
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	0019      	movs	r1, r3
 8001b64:	230f      	movs	r3, #15
 8001b66:	400b      	ands	r3, r1
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	3304      	adds	r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	400a      	ands	r2, r1
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	21ff      	movs	r1, #255	@ 0xff
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	43d2      	mvns	r2, r2
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	22ff      	movs	r2, #255	@ 0xff
 8001b94:	401a      	ands	r2, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <__NVIC_SetPriority+0xd8>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	001c      	movs	r4, r3
 8001bac:	230f      	movs	r3, #15
 8001bae:	4023      	ands	r3, r4
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	18c3      	adds	r3, r0, r3
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b003      	add	sp, #12
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	045b      	lsls	r3, r3, #17
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d301      	bcc.n	8001be8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be4:	2301      	movs	r3, #1
 8001be6:	e010      	b.n	8001c0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <SysTick_Config+0x44>)
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	3a01      	subs	r2, #1
 8001bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff ff7c 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SysTick_Config+0x44>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <SysTick_Config+0x44>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	210f      	movs	r1, #15
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	0002      	movs	r2, r0
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff ff11 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	0002      	movs	r2, r0
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff ff1b 	bl	8001ab0 <__NVIC_DisableIRQ>
}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff ff9f 	bl	8001bd0 <SysTick_Config>
 8001c92:	0003      	movs	r3, r0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e061      	b.n	8001d72 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a32      	ldr	r2, [pc, #200]	@ (8001d7c <HAL_DMA_Init+0xe0>)
 8001cb4:	4694      	mov	ip, r2
 8001cb6:	4463      	add	r3, ip
 8001cb8:	2114      	movs	r1, #20
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7fe fa36 	bl	800012c <__udivsi3>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	009a      	lsls	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <HAL_DMA_Init+0xe4>)
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2225      	movs	r2, #37	@ 0x25
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <HAL_DMA_Init+0xe8>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_DMA_Init+0xec>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	211c      	movs	r1, #28
 8001d32:	400b      	ands	r3, r1
 8001d34:	210f      	movs	r1, #15
 8001d36:	4099      	lsls	r1, r3
 8001d38:	000b      	movs	r3, r1
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_DMA_Init+0xec>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_DMA_Init+0xec>)
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	201c      	movs	r0, #28
 8001d50:	4003      	ands	r3, r0
 8001d52:	409a      	lsls	r2, r3
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_DMA_Init+0xec>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2225      	movs	r2, #37	@ 0x25
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	@ 0x24
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b004      	add	sp, #16
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	bffdfff8 	.word	0xbffdfff8
 8001d80:	40020000 	.word	0x40020000
 8001d84:	ffff800f 	.word	0xffff800f
 8001d88:	400200a8 	.word	0x400200a8

08001d8c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e04a      	b.n	8001e34 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a22      	ldr	r2, [pc, #136]	@ (8001e3c <HAL_DMA_DeInit+0xb0>)
 8001db4:	4694      	mov	ip, r2
 8001db6:	4463      	add	r3, ip
 8001db8:	2114      	movs	r1, #20
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7fe f9b6 	bl	800012c <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <HAL_DMA_DeInit+0xb4>)
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	221c      	movs	r2, #28
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	2101      	movs	r1, #1
 8001de4:	4091      	lsls	r1, r2
 8001de6:	000a      	movs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dea:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_DMA_DeInit+0xb8>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	211c      	movs	r1, #28
 8001df4:	400b      	ands	r3, r1
 8001df6:	210f      	movs	r1, #15
 8001df8:	4099      	lsls	r1, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	43d9      	mvns	r1, r3
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_DMA_DeInit+0xb8>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2225      	movs	r2, #37	@ 0x25
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2224      	movs	r2, #36	@ 0x24
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	bffdfff8 	.word	0xbffdfff8
 8001e40:	40020000 	.word	0x40020000
 8001e44:	400200a8 	.word	0x400200a8

08001e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2317      	movs	r3, #23
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2224      	movs	r2, #36	@ 0x24
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Start_IT+0x24>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e04f      	b.n	8001f0c <HAL_DMA_Start_IT+0xc4>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2224      	movs	r2, #36	@ 0x24
 8001e70:	2101      	movs	r1, #1
 8001e72:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2225      	movs	r2, #37	@ 0x25
 8001e78:	5c9b      	ldrb	r3, [r3, r2]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d13a      	bne.n	8001ef6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2225      	movs	r2, #37	@ 0x25
 8001e84:	2102      	movs	r1, #2
 8001e86:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f974 	bl	8002192 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	210e      	movs	r1, #14
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e00f      	b.n	8001ee4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2104      	movs	r1, #4
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	210a      	movs	r1, #10
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2101      	movs	r1, #1
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2224      	movs	r2, #36	@ 0x24
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001f06:	2317      	movs	r3, #23
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b006      	add	sp, #24
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2225      	movs	r2, #37	@ 0x25
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2224      	movs	r2, #36	@ 0x24
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e024      	b.n	8001f8c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	210e      	movs	r1, #14
 8001f4e:	438a      	bics	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	221c      	movs	r2, #28
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4091      	lsls	r1, r2
 8001f72:	000a      	movs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2225      	movs	r2, #37	@ 0x25
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2224      	movs	r2, #36	@ 0x24
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]

    return status;
 8001f86:	230f      	movs	r3, #15
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2225      	movs	r2, #37	@ 0x25
 8001fa8:	5c9b      	ldrb	r3, [r3, r2]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d006      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e02a      	b.n	8002014 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	210e      	movs	r1, #14
 8001fca:	438a      	bics	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	438a      	bics	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	221c      	movs	r2, #28
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	2101      	movs	r1, #1
 8001fec:	4091      	lsls	r1, r2
 8001fee:	000a      	movs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2225      	movs	r2, #37	@ 0x25
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2224      	movs	r2, #36	@ 0x24
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	0010      	movs	r0, r2
 8002012:	4798      	blx	r3
    }
  }
  return status;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b004      	add	sp, #16
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	221c      	movs	r2, #28
 8002040:	4013      	ands	r3, r2
 8002042:	2204      	movs	r2, #4
 8002044:	409a      	lsls	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	d026      	beq.n	800209c <HAL_DMA_IRQHandler+0x7a>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d022      	beq.n	800209c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	d107      	bne.n	8002072 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2104      	movs	r1, #4
 800206e:	438a      	bics	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	221c      	movs	r2, #28
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2104      	movs	r1, #4
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <HAL_DMA_IRQHandler+0x6e>
 800208e:	e071      	b.n	8002174 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	0010      	movs	r0, r2
 8002098:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800209a:	e06b      	b.n	8002174 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a0:	221c      	movs	r2, #28
 80020a2:	4013      	ands	r3, r2
 80020a4:	2202      	movs	r2, #2
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	d02d      	beq.n	800210c <HAL_DMA_IRQHandler+0xea>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d029      	beq.n	800210c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2220      	movs	r2, #32
 80020c0:	4013      	ands	r3, r2
 80020c2:	d10b      	bne.n	80020dc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	210a      	movs	r1, #10
 80020d0:	438a      	bics	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2225      	movs	r2, #37	@ 0x25
 80020d8:	2101      	movs	r1, #1
 80020da:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e0:	221c      	movs	r2, #28
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	2102      	movs	r1, #2
 80020ea:	4091      	lsls	r1, r2
 80020ec:	000a      	movs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	@ 0x24
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d039      	beq.n	8002174 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	0010      	movs	r0, r2
 8002108:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800210a:	e033      	b.n	8002174 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	221c      	movs	r2, #28
 8002112:	4013      	ands	r3, r2
 8002114:	2208      	movs	r2, #8
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	d02a      	beq.n	8002176 <HAL_DMA_IRQHandler+0x154>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2208      	movs	r2, #8
 8002124:	4013      	ands	r3, r2
 8002126:	d026      	beq.n	8002176 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	210e      	movs	r1, #14
 8002134:	438a      	bics	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	221c      	movs	r2, #28
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2101      	movs	r1, #1
 8002146:	4091      	lsls	r1, r2
 8002148:	000a      	movs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2225      	movs	r2, #37	@ 0x25
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	@ 0x24
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	0010      	movs	r0, r2
 8002172:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	46c0      	nop			@ (mov r8, r8)
}
 8002178:	46bd      	mov	sp, r7
 800217a:	b004      	add	sp, #16
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}

08002192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	221c      	movs	r2, #28
 80021a6:	401a      	ands	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	2101      	movs	r1, #1
 80021ae:	4091      	lsls	r1, r2
 80021b0:	000a      	movs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d108      	bne.n	80021d6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021d4:	e007      	b.n	80021e6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	60da      	str	r2, [r3, #12]
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b004      	add	sp, #16
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002206:	e155      	b.n	80024b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4091      	lsls	r1, r2
 8002212:	000a      	movs	r2, r1
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d100      	bne.n	8002220 <HAL_GPIO_Init+0x30>
 800221e:	e146      	b.n	80024ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	4013      	ands	r3, r2
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002234:	2b02      	cmp	r3, #2
 8002236:	d130      	bne.n	800229a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	409a      	lsls	r2, r3
 8002246:	0013      	movs	r3, r2
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800226e:	2201      	movs	r2, #1
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	2201      	movs	r2, #1
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2203      	movs	r2, #3
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	43da      	mvns	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	4013      	ands	r3, r2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d123      	bne.n	800232a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	58d3      	ldr	r3, [r2, r3]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2207      	movs	r2, #7
 80022f4:	4013      	ands	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	409a      	lsls	r2, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	43da      	mvns	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2107      	movs	r1, #7
 800230e:	400b      	ands	r3, r1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	43da      	mvns	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2203      	movs	r2, #3
 8002348:	401a      	ands	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	23c0      	movs	r3, #192	@ 0xc0
 8002364:	029b      	lsls	r3, r3, #10
 8002366:	4013      	ands	r3, r2
 8002368:	d100      	bne.n	800236c <HAL_GPIO_Init+0x17c>
 800236a:	e0a0      	b.n	80024ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b57      	ldr	r3, [pc, #348]	@ (80024cc <HAL_GPIO_Init+0x2dc>)
 800236e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002370:	4b56      	ldr	r3, [pc, #344]	@ (80024cc <HAL_GPIO_Init+0x2dc>)
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002378:	4a55      	ldr	r2, [pc, #340]	@ (80024d0 <HAL_GPIO_Init+0x2e0>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	589b      	ldr	r3, [r3, r2]
 8002384:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2203      	movs	r2, #3
 800238a:	4013      	ands	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	409a      	lsls	r2, r3
 8002392:	0013      	movs	r3, r2
 8002394:	43da      	mvns	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	23a0      	movs	r3, #160	@ 0xa0
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d01f      	beq.n	80023e6 <HAL_GPIO_Init+0x1f6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	@ (80024d4 <HAL_GPIO_Init+0x2e4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d019      	beq.n	80023e2 <HAL_GPIO_Init+0x1f2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a49      	ldr	r2, [pc, #292]	@ (80024d8 <HAL_GPIO_Init+0x2e8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0x1ee>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a48      	ldr	r2, [pc, #288]	@ (80024dc <HAL_GPIO_Init+0x2ec>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00d      	beq.n	80023da <HAL_GPIO_Init+0x1ea>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a47      	ldr	r2, [pc, #284]	@ (80024e0 <HAL_GPIO_Init+0x2f0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <HAL_GPIO_Init+0x1e6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a46      	ldr	r2, [pc, #280]	@ (80024e4 <HAL_GPIO_Init+0x2f4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_GPIO_Init+0x1e2>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023d2:	2306      	movs	r3, #6
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x1f8>
 80023e6:	2300      	movs	r3, #0
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	2103      	movs	r1, #3
 80023ec:	400a      	ands	r2, r1
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	@ (80024d0 <HAL_GPIO_Init+0x2e0>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	035b      	lsls	r3, r3, #13
 800241e:	4013      	ands	r3, r2
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800242a:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43da      	mvns	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	039b      	lsls	r3, r3, #14
 8002448:	4013      	ands	r3, r2
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002454:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43da      	mvns	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	4013      	ands	r3, r2
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43da      	mvns	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	025b      	lsls	r3, r3, #9
 800249c:	4013      	ands	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <HAL_GPIO_Init+0x2f8>)
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	40da      	lsrs	r2, r3
 80024bc:	1e13      	subs	r3, r2, #0
 80024be:	d000      	beq.n	80024c2 <HAL_GPIO_Init+0x2d2>
 80024c0:	e6a2      	b.n	8002208 <HAL_GPIO_Init+0x18>
  }
}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	50000400 	.word	0x50000400
 80024d8:	50000800 	.word	0x50000800
 80024dc:	50000c00 	.word	0x50000c00
 80024e0:	50001000 	.word	0x50001000
 80024e4:	50001c00 	.word	0x50001c00
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002502:	e0bc      	b.n	800267e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002504:	2201      	movs	r2, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	409a      	lsls	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_GPIO_DeInit+0x2c>
 8002516:	e0af      	b.n	8002678 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002518:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_GPIO_DeInit+0x1a8>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	589b      	ldr	r3, [r3, r2]
 8002524:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	23a0      	movs	r3, #160	@ 0xa0
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	429a      	cmp	r2, r3
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_DeInit+0x96>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a54      	ldr	r2, [pc, #336]	@ (8002698 <HAL_GPIO_DeInit+0x1ac>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_DeInit+0x92>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a53      	ldr	r2, [pc, #332]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_DeInit+0x8e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_GPIO_DeInit+0x1b4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_DeInit+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a51      	ldr	r2, [pc, #324]	@ (80026a4 <HAL_GPIO_DeInit+0x1b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_DeInit+0x86>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a50      	ldr	r2, [pc, #320]	@ (80026a8 <HAL_GPIO_DeInit+0x1bc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_DeInit+0x82>
 800256a:	2305      	movs	r3, #5
 800256c:	e00a      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 800256e:	2306      	movs	r3, #6
 8002570:	e008      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002572:	2304      	movs	r3, #4
 8002574:	e006      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_DeInit+0x98>
 8002582:	2300      	movs	r3, #0
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	2103      	movs	r1, #3
 8002588:	400a      	ands	r2, r1
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d132      	bne.n	80025fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002594:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43d9      	mvns	r1, r3
 800259c:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 800259e:	400a      	ands	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025a2:	4b42      	ldr	r3, [pc, #264]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43d9      	mvns	r1, r3
 80025aa:	4b40      	ldr	r3, [pc, #256]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025b0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	4b3c      	ldr	r3, [pc, #240]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43d9      	mvns	r1, r3
 80025c6:	4b39      	ldr	r3, [pc, #228]	@ (80026ac <HAL_GPIO_DeInit+0x1c0>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2203      	movs	r2, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002694 <HAL_GPIO_DeInit+0x1a8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589a      	ldr	r2, [r3, r2]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	4829      	ldr	r0, [pc, #164]	@ (8002694 <HAL_GPIO_DeInit+0x1a8>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	400a      	ands	r2, r1
 80025f4:	3302      	adds	r3, #2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2103      	movs	r1, #3
 8002604:	4099      	lsls	r1, r3
 8002606:	000b      	movs	r3, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	58d3      	ldr	r3, [r2, r3]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	2107      	movs	r1, #7
 800261e:	400a      	ands	r2, r1
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	210f      	movs	r1, #15
 8002624:	4091      	lsls	r1, r2
 8002626:	000a      	movs	r2, r1
 8002628:	43d1      	mvns	r1, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	08d2      	lsrs	r2, r2, #3
 800262e:	4019      	ands	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	0052      	lsls	r2, r2, #1
 8002640:	2103      	movs	r1, #3
 8002642:	4091      	lsls	r1, r2
 8002644:	000a      	movs	r2, r1
 8002646:	43d2      	mvns	r2, r2
 8002648:	401a      	ands	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2101      	movs	r1, #1
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4091      	lsls	r1, r2
 8002658:	000a      	movs	r2, r1
 800265a:	43d2      	mvns	r2, r2
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	0052      	lsls	r2, r2, #1
 800266a:	2103      	movs	r1, #3
 800266c:	4091      	lsls	r1, r2
 800266e:	000a      	movs	r2, r1
 8002670:	43d2      	mvns	r2, r2
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]
    }
    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	40da      	lsrs	r2, r3
 8002684:	1e13      	subs	r3, r2, #0
 8002686:	d000      	beq.n	800268a <HAL_GPIO_DeInit+0x19e>
 8002688:	e73c      	b.n	8002504 <HAL_GPIO_DeInit+0x18>
  }
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40010000 	.word	0x40010000
 8002698:	50000400 	.word	0x50000400
 800269c:	50000800 	.word	0x50000800
 80026a0:	50000c00 	.word	0x50000c00
 80026a4:	50001000 	.word	0x50001000
 80026a8:	50001c00 	.word	0x50001c00
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	0008      	movs	r0, r1
 80026ba:	0011      	movs	r1, r2
 80026bc:	1cbb      	adds	r3, r7, #2
 80026be:	1c02      	adds	r2, r0, #0
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	1c7b      	adds	r3, r7, #1
 80026c4:	1c0a      	adds	r2, r1, #0
 80026c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c8:	1c7b      	adds	r3, r7, #1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d0:	1cbb      	adds	r3, r7, #2
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80026d8:	e003      	b.n	80026e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80026da:	1cbb      	adds	r3, r7, #2
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08f      	b.n	800281e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2241      	movs	r2, #65	@ 0x41
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe f85b 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2241      	movs	r2, #65	@ 0x41
 800271e:	2124      	movs	r1, #36	@ 0x24
 8002720:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	493b      	ldr	r1, [pc, #236]	@ (8002828 <HAL_I2C_Init+0x13c>)
 800273c:	400a      	ands	r2, r1
 800273e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4938      	ldr	r1, [pc, #224]	@ (800282c <HAL_I2C_Init+0x140>)
 800274c:	400a      	ands	r2, r1
 800274e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0209      	lsls	r1, r1, #8
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e007      	b.n	800277a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2184      	movs	r1, #132	@ 0x84
 8002774:	0209      	lsls	r1, r1, #8
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d109      	bne.n	8002796 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	0109      	lsls	r1, r1, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	e007      	b.n	80027a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4923      	ldr	r1, [pc, #140]	@ (8002830 <HAL_I2C_Init+0x144>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4920      	ldr	r1, [pc, #128]	@ (8002834 <HAL_I2C_Init+0x148>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	491a      	ldr	r1, [pc, #104]	@ (800282c <HAL_I2C_Init+0x140>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69d9      	ldr	r1, [r3, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2241      	movs	r2, #65	@ 0x41
 800280a:	2120      	movs	r1, #32
 800280c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2242      	movs	r2, #66	@ 0x42
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	f0ffffff 	.word	0xf0ffffff
 800282c:	ffff7fff 	.word	0xffff7fff
 8002830:	fffff7ff 	.word	0xfffff7ff
 8002834:	02008000 	.word	0x02008000

08002838 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e022      	b.n	8002890 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2241      	movs	r2, #65	@ 0x41
 800284e:	2124      	movs	r1, #36	@ 0x24
 8002850:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	438a      	bics	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f7fd fff7 	bl	8000858 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2241      	movs	r2, #65	@ 0x41
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2242      	movs	r2, #66	@ 0x42
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2240      	movs	r2, #64	@ 0x40
 800288a:	2100      	movs	r1, #0
 800288c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2241      	movs	r2, #65	@ 0x41
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d138      	bne.n	8002920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2240      	movs	r2, #64	@ 0x40
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e032      	b.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2240      	movs	r2, #64	@ 0x40
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2241      	movs	r2, #65	@ 0x41
 80028c8:	2124      	movs	r1, #36	@ 0x24
 80028ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	438a      	bics	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4911      	ldr	r1, [pc, #68]	@ (800292c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2241      	movs	r2, #65	@ 0x41
 8002910:	2120      	movs	r1, #32
 8002912:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	ffffefff 	.word	0xffffefff

08002930 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2241      	movs	r2, #65	@ 0x41
 800293e:	5c9b      	ldrb	r3, [r3, r2]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	d139      	bne.n	80029ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2240      	movs	r2, #64	@ 0x40
 800294a:	5c9b      	ldrb	r3, [r3, r2]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002950:	2302      	movs	r3, #2
 8002952:	e033      	b.n	80029bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	2101      	movs	r1, #1
 800295a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2241      	movs	r2, #65	@ 0x41
 8002960:	2124      	movs	r1, #36	@ 0x24
 8002962:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2101      	movs	r1, #1
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2241      	movs	r2, #65	@ 0x41
 80029aa:	2120      	movs	r1, #32
 80029ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2240      	movs	r2, #64	@ 0x40
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	fffff0ff 	.word	0xfffff0ff

080029c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	000a      	movs	r2, r1
 80029d2:	1cfb      	adds	r3, r7, #3
 80029d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80029da:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_PWR_EnterSTOPMode+0xac>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_PWR_EnterSTOPMode+0x40>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80029fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a02:	491d      	ldr	r1, [pc, #116]	@ (8002a78 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4393      	bics	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002a30:	1cfb      	adds	r3, r7, #3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002a38:	bf30      	wfi
 8002a3a:	e002      	b.n	8002a42 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002a3c:	bf40      	sev
    __WFE();
 8002a3e:	bf20      	wfe
    __WFE();
 8002a40:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8002a48:	2104      	movs	r1, #4
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_PWR_EnterSTOPMode+0xa0>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	0089      	lsls	r1, r1, #2
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
  }
}
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b006      	add	sp, #24
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40007000 	.word	0x40007000
 8002a74:	40010000 	.word	0x40010000
 8002a78:	fffffdff 	.word	0xfffffdff
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f000 fbbf 	bl	8003212 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a94:	4bc9      	ldr	r3, [pc, #804]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	220c      	movs	r2, #12
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9e:	4bc7      	ldr	r3, [pc, #796]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x36>
 8002ab4:	e07e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d007      	beq.n	8002acc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d112      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x68>
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4bbb      	ldr	r3, [pc, #748]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d100      	bne.n	8002ada <HAL_RCC_OscConfig+0x5a>
 8002ad8:	e06b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x132>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d167      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f000 fb95 	bl	8003212 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x84>
 8002af4:	4bb1      	ldr	r3, [pc, #708]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4bb0      	ldr	r3, [pc, #704]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002afa:	2180      	movs	r1, #128	@ 0x80
 8002afc:	0249      	lsls	r1, r1, #9
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e027      	b.n	8002b54 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	23a0      	movs	r3, #160	@ 0xa0
 8002b0a:	02db      	lsls	r3, r3, #11
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d10e      	bne.n	8002b2e <HAL_RCC_OscConfig+0xae>
 8002b10:	4baa      	ldr	r3, [pc, #680]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4ba9      	ldr	r3, [pc, #676]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b16:	2180      	movs	r1, #128	@ 0x80
 8002b18:	02c9      	lsls	r1, r1, #11
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4ba7      	ldr	r3, [pc, #668]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4ba6      	ldr	r3, [pc, #664]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	0249      	lsls	r1, r1, #9
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e012      	b.n	8002b54 <HAL_RCC_OscConfig+0xd4>
 8002b2e:	4ba3      	ldr	r3, [pc, #652]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4ba2      	ldr	r3, [pc, #648]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b34:	49a2      	ldr	r1, [pc, #648]	@ (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	4ba0      	ldr	r3, [pc, #640]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4b9c      	ldr	r3, [pc, #624]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b9b      	ldr	r3, [pc, #620]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b4e:	499d      	ldr	r1, [pc, #628]	@ (8002dc4 <HAL_RCC_OscConfig+0x344>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe ff36 	bl	80019cc <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b64:	e009      	b.n	8002b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b66:	f7fe ff31 	bl	80019cc <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	@ 0x64
 8002b72:	d902      	bls.n	8002b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 fb4c 	bl	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b7a:	4b90      	ldr	r3, [pc, #576]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	029b      	lsls	r3, r3, #10
 8002b82:	4013      	ands	r3, r2
 8002b84:	d0ef      	beq.n	8002b66 <HAL_RCC_OscConfig+0xe6>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe ff20 	bl	80019cc <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b92:	f7fe ff1b 	bl	80019cc <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b64      	cmp	r3, #100	@ 0x64
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e336      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ba4:	4b85      	ldr	r3, [pc, #532]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x112>
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x140>
 8002bbe:	e099      	b.n	8002cf4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	2220      	movs	r2, #32
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002bce:	4b7b      	ldr	r3, [pc, #492]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4393      	bics	r3, r2
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d13e      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1ec>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d13b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bf4:	4b71      	ldr	r3, [pc, #452]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_RCC_OscConfig+0x188>
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e304      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc8 <HAL_RCC_OscConfig+0x348>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	021a      	lsls	r2, r3, #8
 8002c18:	4b68      	ldr	r3, [pc, #416]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c1e:	4b67      	ldr	r3, [pc, #412]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2209      	movs	r2, #9
 8002c24:	4393      	bics	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	4b64      	ldr	r3, [pc, #400]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c30:	f000 fc42 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8002c34:	0001      	movs	r1, r0
 8002c36:	4b61      	ldr	r3, [pc, #388]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	4013      	ands	r3, r2
 8002c40:	4a62      	ldr	r2, [pc, #392]	@ (8002dcc <HAL_RCC_OscConfig+0x34c>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	000a      	movs	r2, r1
 8002c46:	40da      	lsrs	r2, r3
 8002c48:	4b61      	ldr	r3, [pc, #388]	@ (8002dd0 <HAL_RCC_OscConfig+0x350>)
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c4c:	4b61      	ldr	r3, [pc, #388]	@ (8002dd4 <HAL_RCC_OscConfig+0x354>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2513      	movs	r5, #19
 8002c52:	197c      	adds	r4, r7, r5
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fe fe73 	bl	8001940 <HAL_InitTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c5e:	197b      	adds	r3, r7, r5
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d046      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002c66:	197b      	adds	r3, r7, r5
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	e2d2      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d027      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c72:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2209      	movs	r2, #9
 8002c78:	4393      	bics	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fea2 	bl	80019cc <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fe9d 	bl	80019cc <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e2b8      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca0:	4b46      	ldr	r3, [pc, #280]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d0f1      	beq.n	8002c8e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a46      	ldr	r2, [pc, #280]	@ (8002dc8 <HAL_RCC_OscConfig+0x348>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	e018      	b.n	8002cf4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe fe7d 	bl	80019cc <HAL_GetTick>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fe78 	bl	80019cc <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e293      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cea:	4b34      	ldr	r3, [pc, #208]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d1f1      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d100      	bne.n	8002d00 <HAL_RCC_OscConfig+0x280>
 8002cfe:	e0a2      	b.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d140      	bne.n	8002d88 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d06:	4b2d      	ldr	r3, [pc, #180]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x29e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e279      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1e:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <HAL_RCC_OscConfig+0x358>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2c:	4b23      	ldr	r3, [pc, #140]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	0a19      	lsrs	r1, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	061a      	lsls	r2, r3, #24
 8002d40:	4b1e      	ldr	r3, [pc, #120]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	0b5b      	lsrs	r3, r3, #13
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	0212      	lsls	r2, r2, #8
 8002d52:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d54:	4b19      	ldr	r3, [pc, #100]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x34c>)
 8002d60:	5ccb      	ldrb	r3, [r1, r3]
 8002d62:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_RCC_OscConfig+0x350>)
 8002d66:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_OscConfig+0x354>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2513      	movs	r5, #19
 8002d6e:	197c      	adds	r4, r7, r5
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7fe fde5 	bl	8001940 <HAL_InitTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d7a:	197b      	adds	r3, r7, r5
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d061      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002d82:	197b      	adds	r3, r7, r5
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	e244      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d040      	beq.n	8002e12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	0049      	lsls	r1, r1, #1
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fe15 	bl	80019cc <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002da6:	e019      	b.n	8002ddc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da8:	f7fe fe10 	bl	80019cc <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d912      	bls.n	8002ddc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e22b      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	fffeffff 	.word	0xfffeffff
 8002dc4:	fffbffff 	.word	0xfffbffff
 8002dc8:	ffffe0ff 	.word	0xffffe0ff
 8002dcc:	08006d94 	.word	0x08006d94
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ddc:	4bca      	ldr	r3, [pc, #808]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d0df      	beq.n	8002da8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de8:	4bc7      	ldr	r3, [pc, #796]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4ac7      	ldr	r2, [pc, #796]	@ (800310c <HAL_RCC_OscConfig+0x68c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df6:	4bc4      	ldr	r3, [pc, #784]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfc:	4bc2      	ldr	r3, [pc, #776]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	0a19      	lsrs	r1, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	061a      	lsls	r2, r3, #24
 8002e0a:	4bbf      	ldr	r3, [pc, #764]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e019      	b.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e12:	4bbd      	ldr	r3, [pc, #756]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4bbc      	ldr	r3, [pc, #752]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e18:	49bd      	ldr	r1, [pc, #756]	@ (8003110 <HAL_RCC_OscConfig+0x690>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fdd5 	bl	80019cc <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e28:	f7fe fdd0 	bl	80019cc <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1eb      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e3a:	4bb3      	ldr	r3, [pc, #716]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d019      	beq.n	8002e8c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e58:	4bab      	ldr	r3, [pc, #684]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e5c:	4baa      	ldr	r3, [pc, #680]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	430a      	orrs	r2, r1
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fdb2 	bl	80019cc <HAL_GetTick>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fdad 	bl	80019cc <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1c8      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e80:	4ba1      	ldr	r3, [pc, #644]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d0f1      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3ee>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e90:	4b9d      	ldr	r3, [pc, #628]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe fd98 	bl	80019cc <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fd93 	bl	80019cc <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1ae      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb4:	4b94      	ldr	r3, [pc, #592]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb8:	2202      	movs	r2, #2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d1f1      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d100      	bne.n	8002eca <HAL_RCC_OscConfig+0x44a>
 8002ec8:	e0ae      	b.n	8003028 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2023      	movs	r0, #35	@ 0x23
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	055b      	lsls	r3, r3, #21
 8002eda:	4013      	ands	r3, r2
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b8a      	ldr	r3, [pc, #552]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee2:	4b89      	ldr	r3, [pc, #548]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	0549      	lsls	r1, r1, #21
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <HAL_RCC_OscConfig+0x694>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b85      	ldr	r3, [pc, #532]	@ (8003114 <HAL_RCC_OscConfig+0x694>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b84      	ldr	r3, [pc, #528]	@ (8003114 <HAL_RCC_OscConfig+0x694>)
 8002f04:	2180      	movs	r1, #128	@ 0x80
 8002f06:	0049      	lsls	r1, r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fd5e 	bl	80019cc <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fe fd59 	bl	80019cc <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	@ 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e174      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x694>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4013      	ands	r3, r2
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4d0>
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f44:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f46:	2180      	movs	r1, #128	@ 0x80
 8002f48:	0049      	lsls	r1, r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f4e:	e031      	b.n	8002fb4 <HAL_RCC_OscConfig+0x534>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4f2>
 8002f58:	4b6b      	ldr	r3, [pc, #428]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f5e:	496c      	ldr	r1, [pc, #432]	@ (8003110 <HAL_RCC_OscConfig+0x690>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f64:	4b68      	ldr	r3, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f68:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f6a:	496b      	ldr	r1, [pc, #428]	@ (8003118 <HAL_RCC_OscConfig+0x698>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f70:	e020      	b.n	8002fb4 <HAL_RCC_OscConfig+0x534>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	23a0      	movs	r3, #160	@ 0xa0
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d10e      	bne.n	8002f9c <HAL_RCC_OscConfig+0x51c>
 8002f7e:	4b62      	ldr	r3, [pc, #392]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f82:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f84:	2180      	movs	r1, #128	@ 0x80
 8002f86:	00c9      	lsls	r1, r1, #3
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f90:	4b5d      	ldr	r3, [pc, #372]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	0049      	lsls	r1, r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x534>
 8002f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002f9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fa0:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002fa2:	495b      	ldr	r1, [pc, #364]	@ (8003110 <HAL_RCC_OscConfig+0x690>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fa8:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002faa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fac:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002fae:	495a      	ldr	r1, [pc, #360]	@ (8003118 <HAL_RCC_OscConfig+0x698>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fd06 	bl	80019cc <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fd01 	bl	80019cc <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4a52      	ldr	r2, [pc, #328]	@ (800311c <HAL_RCC_OscConfig+0x69c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e11b      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fda:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8002fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d0ef      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x546>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fcf0 	bl	80019cc <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fceb 	bl	80019cc <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a47      	ldr	r2, [pc, #284]	@ (800311c <HAL_RCC_OscConfig+0x69c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e105      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003006:	4b40      	ldr	r3, [pc, #256]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8003008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800300a:	2380      	movs	r3, #128	@ 0x80
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d1ef      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003012:	2323      	movs	r3, #35	@ 0x23
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800301e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003020:	4b39      	ldr	r3, [pc, #228]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8003022:	493f      	ldr	r1, [pc, #252]	@ (8003120 <HAL_RCC_OscConfig+0x6a0>)
 8003024:	400a      	ands	r2, r1
 8003026:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	4013      	ands	r3, r2
 8003030:	d049      	beq.n	80030c6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d026      	beq.n	8003088 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800303a:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8003040:	2101      	movs	r1, #1
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 8003048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304a:	4b2f      	ldr	r3, [pc, #188]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	635a      	str	r2, [r3, #52]	@ 0x34
 8003052:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <HAL_RCC_OscConfig+0x6a4>)
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	4b33      	ldr	r3, [pc, #204]	@ (8003124 <HAL_RCC_OscConfig+0x6a4>)
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	0189      	lsls	r1, r1, #6
 800305c:	430a      	orrs	r2, r1
 800305e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fcb4 	bl	80019cc <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800306a:	f7fe fcaf 	bl	80019cc <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0ca      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800307c:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d0f1      	beq.n	800306a <HAL_RCC_OscConfig+0x5ea>
 8003086:	e01e      	b.n	80030c6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003088:	4b1f      	ldr	r3, [pc, #124]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 800308e:	2101      	movs	r1, #1
 8003090:	438a      	bics	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	4b23      	ldr	r3, [pc, #140]	@ (8003124 <HAL_RCC_OscConfig+0x6a4>)
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <HAL_RCC_OscConfig+0x6a4>)
 800309a:	4923      	ldr	r1, [pc, #140]	@ (8003128 <HAL_RCC_OscConfig+0x6a8>)
 800309c:	400a      	ands	r2, r1
 800309e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fc94 	bl	80019cc <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030aa:	f7fe fc8f 	bl	80019cc <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0aa      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d1f1      	bne.n	80030aa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d100      	bne.n	80030d0 <HAL_RCC_OscConfig+0x650>
 80030ce:	e09f      	b.n	8003210 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d100      	bne.n	80030d8 <HAL_RCC_OscConfig+0x658>
 80030d6:	e078      	b.n	80031ca <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d159      	bne.n	8003194 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <HAL_RCC_OscConfig+0x688>)
 80030e6:	4911      	ldr	r1, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x6ac>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc6e 	bl	80019cc <HAL_GetTick>
 80030f0:	0003      	movs	r3, r0
 80030f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fc69 	bl	80019cc <HAL_GetTick>
 80030fa:	0002      	movs	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d915      	bls.n	8003130 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e084      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
 8003108:	40021000 	.word	0x40021000
 800310c:	ffff1fff 	.word	0xffff1fff
 8003110:	fffffeff 	.word	0xfffffeff
 8003114:	40007000 	.word	0x40007000
 8003118:	fffffbff 	.word	0xfffffbff
 800311c:	00001388 	.word	0x00001388
 8003120:	efffffff 	.word	0xefffffff
 8003124:	40010000 	.word	0x40010000
 8003128:	ffffdfff 	.word	0xffffdfff
 800312c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003130:	4b3a      	ldr	r3, [pc, #232]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	049b      	lsls	r3, r3, #18
 8003138:	4013      	ands	r3, r2
 800313a:	d1dc      	bne.n	80030f6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313c:	4b37      	ldr	r3, [pc, #220]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a37      	ldr	r2, [pc, #220]	@ (8003220 <HAL_RCC_OscConfig+0x7a0>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	431a      	orrs	r2, r3
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 8003158:	430a      	orrs	r2, r1
 800315a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b2f      	ldr	r3, [pc, #188]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 8003162:	2180      	movs	r1, #128	@ 0x80
 8003164:	0449      	lsls	r1, r1, #17
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe fc2f 	bl	80019cc <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fc2a 	bl	80019cc <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e045      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003186:	4b25      	ldr	r3, [pc, #148]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	049b      	lsls	r3, r3, #18
 800318e:	4013      	ands	r3, r2
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x6f4>
 8003192:	e03d      	b.n	8003210 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b21      	ldr	r3, [pc, #132]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 800319a:	4922      	ldr	r1, [pc, #136]	@ (8003224 <HAL_RCC_OscConfig+0x7a4>)
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fc14 	bl	80019cc <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe fc0f 	bl	80019cc <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e02a      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	049b      	lsls	r3, r3, #18
 80031c4:	4013      	ands	r3, r2
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x72a>
 80031c8:	e022      	b.n	8003210 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01d      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_RCC_OscConfig+0x79c>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d10f      	bne.n	800320c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	23f0      	movs	r3, #240	@ 0xf0
 80031f0:	039b      	lsls	r3, r3, #14
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	23c0      	movs	r3, #192	@ 0xc0
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	401a      	ands	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b00a      	add	sp, #40	@ 0x28
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	40021000 	.word	0x40021000
 8003220:	ff02ffff 	.word	0xff02ffff
 8003224:	feffffff 	.word	0xfeffffff

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e128      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b96      	ldr	r3, [pc, #600]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d91e      	bls.n	8003288 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b93      	ldr	r3, [pc, #588]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	4393      	bics	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	4b90      	ldr	r3, [pc, #576]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800325c:	f7fe fbb6 	bl	80019cc <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003264:	e009      	b.n	800327a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7fe fbb1 	bl	80019cc <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	4a8a      	ldr	r2, [pc, #552]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e109      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b87      	ldr	r3, [pc, #540]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003292:	4b83      	ldr	r3, [pc, #524]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	22f0      	movs	r2, #240	@ 0xf0
 8003298:	4393      	bics	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b7f      	ldr	r3, [pc, #508]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80032a2:	430a      	orrs	r2, r1
 80032a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d100      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x8a>
 80032b0:	e089      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ba:	4b79      	ldr	r3, [pc, #484]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	029b      	lsls	r3, r3, #10
 80032c2:	4013      	ands	r3, r2
 80032c4:	d120      	bne.n	8003308 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e1      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d2:	4b73      	ldr	r3, [pc, #460]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	049b      	lsls	r3, r3, #18
 80032da:	4013      	ands	r3, r2
 80032dc:	d114      	bne.n	8003308 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0d5      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ea:	4b6d      	ldr	r3, [pc, #436]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	d109      	bne.n	8003308 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0ca      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032f8:	4b69      	ldr	r3, [pc, #420]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0c2      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003308:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2203      	movs	r2, #3
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fe fb56 	bl	80019cc <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d111      	bne.n	8003350 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800332c:	e009      	b.n	8003342 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332e:	f7fe fb4d 	bl	80019cc <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	4a58      	ldr	r2, [pc, #352]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0a5      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003342:	4b57      	ldr	r3, [pc, #348]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	220c      	movs	r2, #12
 8003348:	4013      	ands	r3, r2
 800334a:	2b08      	cmp	r3, #8
 800334c:	d1ef      	bne.n	800332e <HAL_RCC_ClockConfig+0x106>
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d111      	bne.n	800337c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	e009      	b.n	800336e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fe fb37 	bl	80019cc <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	4a4d      	ldr	r2, [pc, #308]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e08f      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336e:	4b4c      	ldr	r3, [pc, #304]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	220c      	movs	r2, #12
 8003374:	4013      	ands	r3, r2
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_ClockConfig+0x132>
 800337a:	e024      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11b      	bne.n	80033bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003384:	e009      	b.n	800339a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003386:	f7fe fb21 	bl	80019cc <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	4a42      	ldr	r2, [pc, #264]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e079      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	220c      	movs	r2, #12
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1ef      	bne.n	8003386 <HAL_RCC_ClockConfig+0x15e>
 80033a6:	e00e      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe fb10 	bl	80019cc <HAL_GetTick>
 80033ac:	0002      	movs	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	4a3a      	ldr	r2, [pc, #232]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e068      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033bc:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	220c      	movs	r2, #12
 80033c2:	4013      	ands	r3, r2
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d21e      	bcs.n	8003412 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d4:	4b30      	ldr	r3, [pc, #192]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2201      	movs	r2, #1
 80033da:	4393      	bics	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e6:	f7fe faf1 	bl	80019cc <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	e009      	b.n	8003404 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fe faec 	bl	80019cc <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	4a28      	ldr	r2, [pc, #160]	@ (800349c <HAL_RCC_ClockConfig+0x274>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e044      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_RCC_ClockConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d1ee      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a20      	ldr	r2, [pc, #128]	@ (80034a4 <HAL_RCC_ClockConfig+0x27c>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800342c:	430a      	orrs	r2, r1
 800342e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2208      	movs	r2, #8
 8003436:	4013      	ands	r3, r2
 8003438:	d00a      	beq.n	8003450 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343a:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_RCC_ClockConfig+0x280>)
 8003440:	4013      	ands	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00da      	lsls	r2, r3, #3
 800344a:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003450:	f000 f832 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003454:	0001      	movs	r1, r0
 8003456:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <HAL_RCC_ClockConfig+0x278>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	220f      	movs	r2, #15
 800345e:	4013      	ands	r3, r2
 8003460:	4a12      	ldr	r2, [pc, #72]	@ (80034ac <HAL_RCC_ClockConfig+0x284>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	000a      	movs	r2, r1
 8003466:	40da      	lsrs	r2, r3
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_RCC_ClockConfig+0x288>)
 800346a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800346c:	4b11      	ldr	r3, [pc, #68]	@ (80034b4 <HAL_RCC_ClockConfig+0x28c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	250b      	movs	r5, #11
 8003472:	197c      	adds	r4, r7, r5
 8003474:	0018      	movs	r0, r3
 8003476:	f7fe fa63 	bl	8001940 <HAL_InitTick>
 800347a:	0003      	movs	r3, r0
 800347c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800347e:	197b      	adds	r3, r7, r5
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003486:	197b      	adds	r3, r7, r5
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	e000      	b.n	800348e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bdb0      	pop	{r4, r5, r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	40022000 	.word	0x40022000
 800349c:	00001388 	.word	0x00001388
 80034a0:	40021000 	.word	0x40021000
 80034a4:	fffff8ff 	.word	0xfffff8ff
 80034a8:	ffffc7ff 	.word	0xffffc7ff
 80034ac:	08006d94 	.word	0x08006d94
 80034b0:	20000004 	.word	0x20000004
 80034b4:	20000008 	.word	0x20000008

080034b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034be:	4b3c      	ldr	r3, [pc, #240]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	220c      	movs	r2, #12
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d013      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80034ce:	d85c      	bhi.n	800358a <HAL_RCC_GetSysClockFreq+0xd2>
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d002      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x22>
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00b      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x38>
 80034d8:	e057      	b.n	800358a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034da:	4b35      	ldr	r3, [pc, #212]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	4013      	ands	r3, r2
 80034e2:	d002      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034e4:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034e6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034e8:	e05d      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80034ea:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80034ec:	613b      	str	r3, [r7, #16]
      break;
 80034ee:	e05a      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b32      	ldr	r3, [pc, #200]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x104>)
 80034f2:	613b      	str	r3, [r7, #16]
      break;
 80034f4:	e057      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	220f      	movs	r2, #15
 80034fc:	4013      	ands	r3, r2
 80034fe:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0d9b      	lsrs	r3, r3, #22
 8003508:	2203      	movs	r2, #3
 800350a:	4013      	ands	r3, r2
 800350c:	3301      	adds	r3, #1
 800350e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003510:	4b27      	ldr	r3, [pc, #156]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	025b      	lsls	r3, r3, #9
 8003518:	4013      	ands	r3, r2
 800351a:	d00f      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	000a      	movs	r2, r1
 8003520:	0152      	lsls	r2, r2, #5
 8003522:	1a52      	subs	r2, r2, r1
 8003524:	0193      	lsls	r3, r2, #6
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	185b      	adds	r3, r3, r1
 800352c:	025b      	lsls	r3, r3, #9
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fc fdfb 	bl	800012c <__udivsi3>
 8003536:	0003      	movs	r3, r0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e023      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800353c:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2210      	movs	r2, #16
 8003542:	4013      	ands	r3, r2
 8003544:	d00f      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	000a      	movs	r2, r1
 800354a:	0152      	lsls	r2, r2, #5
 800354c:	1a52      	subs	r2, r2, r1
 800354e:	0193      	lsls	r3, r2, #6
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	185b      	adds	r3, r3, r1
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f7fc fde6 	bl	800012c <__udivsi3>
 8003560:	0003      	movs	r3, r0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e00e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	000a      	movs	r2, r1
 800356a:	0152      	lsls	r2, r2, #5
 800356c:	1a52      	subs	r2, r2, r1
 800356e:	0193      	lsls	r3, r2, #6
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	185b      	adds	r3, r3, r1
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f7fc fdd6 	bl	800012c <__udivsi3>
 8003580:	0003      	movs	r3, r0
 8003582:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
      break;
 8003588:	e00d      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800358a:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0b5b      	lsrs	r3, r3, #13
 8003590:	2207      	movs	r2, #7
 8003592:	4013      	ands	r3, r2
 8003594:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	2280      	movs	r2, #128	@ 0x80
 800359c:	0212      	lsls	r2, r2, #8
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
      break;
 80035a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035a6:	693b      	ldr	r3, [r7, #16]
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b006      	add	sp, #24
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	003d0900 	.word	0x003d0900
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	08006dac 	.word	0x08006dac

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b02      	ldr	r3, [pc, #8]	@ (80035d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035dc:	f7ff fff2 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	2207      	movs	r2, #7
 80035ea:	4013      	ands	r3, r2
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	40d9      	lsrs	r1, r3
 80035f2:	000b      	movs	r3, r1
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	40021000 	.word	0x40021000
 8003600:	08006da4 	.word	0x08006da4

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	0001      	movs	r1, r0
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0adb      	lsrs	r3, r3, #11
 8003614:	2207      	movs	r2, #7
 8003616:	4013      	ands	r3, r2
 8003618:	4a04      	ldr	r2, [pc, #16]	@ (800362c <HAL_RCC_GetPCLK2Freq+0x28>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	40d9      	lsrs	r1, r3
 800361e:	000b      	movs	r3, r1
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	40021000 	.word	0x40021000
 800362c:	08006da4 	.word	0x08006da4

08003630 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003638:	2317      	movs	r3, #23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2220      	movs	r2, #32
 8003646:	4013      	ands	r3, r2
 8003648:	d106      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4013      	ands	r3, r2
 8003654:	d100      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003656:	e104      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003658:	4bb9      	ldr	r3, [pc, #740]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800365a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	4013      	ands	r3, r2
 8003662:	d10a      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4bb6      	ldr	r3, [pc, #728]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003668:	4bb5      	ldr	r3, [pc, #724]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	0549      	lsls	r1, r1, #21
 800366e:	430a      	orrs	r2, r1
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003672:	2317      	movs	r3, #23
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4bb2      	ldr	r3, [pc, #712]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4013      	ands	r3, r2
 8003684:	d11a      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4baf      	ldr	r3, [pc, #700]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4bae      	ldr	r3, [pc, #696]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800368c:	2180      	movs	r1, #128	@ 0x80
 800368e:	0049      	lsls	r1, r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fe f99a 	bl	80019cc <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe f995 	bl	80019cc <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e143      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f0      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80036bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	23c0      	movs	r3, #192	@ 0xc0
 80036c2:	039b      	lsls	r3, r3, #14
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	23c0      	movs	r3, #192	@ 0xc0
 80036ce:	039b      	lsls	r3, r3, #14
 80036d0:	4013      	ands	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	23c0      	movs	r3, #192	@ 0xc0
 80036de:	039b      	lsls	r3, r3, #14
 80036e0:	4013      	ands	r3, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d013      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	@ 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	401a      	ands	r2, r3
 80036f2:	23c0      	movs	r3, #192	@ 0xc0
 80036f4:	029b      	lsls	r3, r3, #10
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d10a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b91      	ldr	r3, [pc, #580]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	401a      	ands	r2, r3
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	429a      	cmp	r2, r3
 800370a:	d101      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e113      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003710:	4b8b      	ldr	r3, [pc, #556]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003714:	23c0      	movs	r3, #192	@ 0xc0
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d049      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	23c0      	movs	r3, #192	@ 0xc0
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	4013      	ands	r3, r2
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	429a      	cmp	r2, r3
 8003730:	d004      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	23c0      	movs	r3, #192	@ 0xc0
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	4013      	ands	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d034      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d02e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003758:	4b79      	ldr	r3, [pc, #484]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800375a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375c:	4a7a      	ldr	r2, [pc, #488]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800375e:	4013      	ands	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b77      	ldr	r3, [pc, #476]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003766:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003768:	2180      	movs	r1, #128	@ 0x80
 800376a:	0309      	lsls	r1, r1, #12
 800376c:	430a      	orrs	r2, r1
 800376e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003774:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003776:	4975      	ldr	r1, [pc, #468]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003778:	400a      	ands	r2, r1
 800377a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800377c:	4b70      	ldr	r3, [pc, #448]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d014      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f91e 	bl	80019cc <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003794:	e009      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe f919 	bl	80019cc <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0c6      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037aa:	4b65      	ldr	r3, [pc, #404]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4013      	ands	r3, r2
 80037b4:	d0ef      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4013      	ands	r3, r2
 80037c0:	d01f      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	23c0      	movs	r3, #192	@ 0xc0
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	401a      	ands	r2, r3
 80037cc:	23c0      	movs	r3, #192	@ 0xc0
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10c      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80037d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	23c0      	movs	r3, #192	@ 0xc0
 80037e4:	039b      	lsls	r3, r3, #14
 80037e6:	401a      	ands	r2, r3
 80037e8:	4b55      	ldr	r3, [pc, #340]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	4b54      	ldr	r3, [pc, #336]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	23c0      	movs	r3, #192	@ 0xc0
 80037f8:	029b      	lsls	r3, r3, #10
 80037fa:	401a      	ands	r2, r3
 80037fc:	4b50      	ldr	r3, [pc, #320]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	4013      	ands	r3, r2
 800380a:	d01f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	23c0      	movs	r3, #192	@ 0xc0
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	401a      	ands	r2, r3
 8003816:	23c0      	movs	r3, #192	@ 0xc0
 8003818:	029b      	lsls	r3, r3, #10
 800381a:	429a      	cmp	r2, r3
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800381e:	4b48      	ldr	r3, [pc, #288]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4c      	ldr	r2, [pc, #304]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003824:	4013      	ands	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	23c0      	movs	r3, #192	@ 0xc0
 800382e:	039b      	lsls	r3, r3, #14
 8003830:	401a      	ands	r2, r3
 8003832:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800383a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	23c0      	movs	r3, #192	@ 0xc0
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	401a      	ands	r2, r3
 8003846:	4b3e      	ldr	r3, [pc, #248]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003848:	430a      	orrs	r2, r1
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800384c:	2317      	movs	r3, #23
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800385c:	493e      	ldr	r1, [pc, #248]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800385e:	400a      	ands	r2, r1
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	4013      	ands	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386c:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800386e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003870:	2203      	movs	r2, #3
 8003872:	4393      	bics	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800387c:	430a      	orrs	r2, r1
 800387e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2202      	movs	r2, #2
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388a:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388e:	220c      	movs	r2, #12
 8003890:	4393      	bics	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800389a:	430a      	orrs	r2, r1
 800389c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2204      	movs	r2, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ac:	4a2b      	ldr	r2, [pc, #172]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	4b22      	ldr	r3, [pc, #136]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4013      	ands	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e6:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ea:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038f6:	430a      	orrs	r2, r1
 80038f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2240      	movs	r2, #64	@ 0x40
 8003900:	4013      	ands	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	4a16      	ldr	r2, [pc, #88]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003914:	430a      	orrs	r2, r1
 8003916:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	4013      	ands	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	4a10      	ldr	r2, [pc, #64]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003932:	430a      	orrs	r2, r1
 8003934:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b006      	add	sp, #24
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	fffcffff 	.word	0xfffcffff
 800394c:	fff7ffff 	.word	0xfff7ffff
 8003950:	00001388 	.word	0x00001388
 8003954:	ffcfffff 	.word	0xffcfffff
 8003958:	efffffff 	.word	0xefffffff
 800395c:	fffff3ff 	.word	0xfffff3ff
 8003960:	ffffcfff 	.word	0xffffcfff
 8003964:	fbffffff 	.word	0xfbffffff
 8003968:	fff3ffff 	.word	0xfff3ffff

0800396c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003974:	230f      	movs	r3, #15
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e088      	b.n	8003a98 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2221      	movs	r2, #33	@ 0x21
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7fd fb0d 	bl	8000fbc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2221      	movs	r2, #33	@ 0x21
 80039a6:	2102      	movs	r1, #2
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d05f      	beq.n	8003a78 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	22ca      	movs	r2, #202	@ 0xca
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2253      	movs	r2, #83	@ 0x53
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80039c8:	250f      	movs	r5, #15
 80039ca:	197c      	adds	r4, r7, r5
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 f93e 	bl	8003c50 <RTC_EnterInitMode>
 80039d4:	0003      	movs	r3, r0
 80039d6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80039d8:	0028      	movs	r0, r5
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d12c      	bne.n	8003a3c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	492c      	ldr	r1, [pc, #176]	@ (8003aa0 <HAL_RTC_Init+0x134>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68d2      	ldr	r2, [r2, #12]
 8003a18:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6919      	ldr	r1, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003a2e:	183c      	adds	r4, r7, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f950 	bl	8003cd8 <RTC_ExitInitMode>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2103      	movs	r1, #3
 8003a52:	438a      	bics	r2, r1
 8003a54:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	22ff      	movs	r2, #255	@ 0xff
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a76:	e003      	b.n	8003a80 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003a78:	230f      	movs	r3, #15
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003a80:	230f      	movs	r3, #15
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2221      	movs	r2, #33	@ 0x21
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003a92:	230f      	movs	r3, #15
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	781b      	ldrb	r3, [r3, #0]
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	ff8fffbf 	.word	0xff8fffbf

08003aa4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	045b      	lsls	r3, r3, #17
 8003ac6:	0c5a      	lsrs	r2, r3, #17
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <HAL_RTC_GetTime+0xb8>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	223f      	movs	r2, #63	@ 0x3f
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	227f      	movs	r2, #127	@ 0x7f
 8003af0:	4013      	ands	r3, r2
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	227f      	movs	r2, #127	@ 0x7f
 8003afe:	4013      	ands	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	0d9b      	lsrs	r3, r3, #22
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11a      	bne.n	8003b52 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f903 	bl	8003d2c <RTC_Bcd2ToByte>
 8003b26:	0003      	movs	r3, r0
 8003b28:	001a      	movs	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f8fa 	bl	8003d2c <RTC_Bcd2ToByte>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	789b      	ldrb	r3, [r3, #2]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f8f1 	bl	8003d2c <RTC_Bcd2ToByte>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b006      	add	sp, #24
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	007f7f7f 	.word	0x007f7f7f

08003b60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a21      	ldr	r2, [pc, #132]	@ (8003bfc <HAL_RTC_GetDate+0x9c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	221f      	movs	r2, #31
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	223f      	movs	r2, #63	@ 0x3f
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	0b5b      	lsrs	r3, r3, #13
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2207      	movs	r2, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11a      	bne.n	8003bf0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	78db      	ldrb	r3, [r3, #3]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f8b4 	bl	8003d2c <RTC_Bcd2ToByte>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 f8ab 	bl	8003d2c <RTC_Bcd2ToByte>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	001a      	movs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	789b      	ldrb	r3, [r3, #2]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f8a2 	bl	8003d2c <RTC_Bcd2ToByte>
 8003be8:	0003      	movs	r3, r0
 8003bea:	001a      	movs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	00ffff3f 	.word	0x00ffff3f

08003c00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0e      	ldr	r2, [pc, #56]	@ (8003c4c <HAL_RTC_WaitForSynchro+0x4c>)
 8003c12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c14:	f7fd feda 	bl	80019cc <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c1e:	f7fd fed5 	bl	80019cc <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	23fa      	movs	r3, #250	@ 0xfa
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d901      	bls.n	8003c34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e006      	b.n	8003c42 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b004      	add	sp, #16
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	0001ff5f 	.word	0x0001ff5f

08003c50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d12c      	bne.n	8003cca <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fd fea4 	bl	80019cc <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c88:	e014      	b.n	8003cb4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c8a:	f7fd fe9f 	bl	80019cc <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	200f      	movs	r0, #15
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	1839      	adds	r1, r7, r0
 8003c9a:	7809      	ldrb	r1, [r1, #0]
 8003c9c:	7019      	strb	r1, [r3, #0]
 8003c9e:	23fa      	movs	r3, #250	@ 0xfa
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d906      	bls.n	8003cb4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2221      	movs	r2, #33	@ 0x21
 8003caa:	2104      	movs	r1, #4
 8003cac:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d104      	bne.n	8003cca <RTC_EnterInitMode+0x7a>
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d1df      	bne.n	8003c8a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003cca:	230f      	movs	r3, #15
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	240f      	movs	r4, #15
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2180      	movs	r1, #128	@ 0x80
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	4013      	ands	r3, r2
 8003d02:	d10c      	bne.n	8003d1e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff ff7a 	bl	8003c00 <HAL_RTC_WaitForSynchro>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d006      	beq.n	8003d1e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2221      	movs	r2, #33	@ 0x21
 8003d14:	2104      	movs	r1, #4
 8003d16:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003d1e:	230f      	movs	r3, #15
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	781b      	ldrb	r3, [r3, #0]
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b005      	add	sp, #20
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	0002      	movs	r2, r0
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003d3c:	1dfb      	adds	r3, r7, #7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	001a      	movs	r2, r3
 8003d46:	0013      	movs	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	210f      	movs	r1, #15
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	18d3      	adds	r3, r2, r3
 8003d60:	b2db      	uxtb	r3, r3
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003d78:	4b64      	ldr	r3, [pc, #400]	@ (8003f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	22fa      	movs	r2, #250	@ 0xfa
 8003d7e:	01d1      	lsls	r1, r2, #7
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fc f9d3 	bl	800012c <__udivsi3>
 8003d86:	0003      	movs	r3, r0
 8003d88:	001a      	movs	r2, r3
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	015b      	lsls	r3, r3, #5
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	5c9b      	ldrb	r3, [r3, r2]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0ad      	b.n	8003f02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	@ 0x21
 8003db2:	2102      	movs	r1, #2
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	22ca      	movs	r2, #202	@ 0xca
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2253      	movs	r2, #83	@ 0x53
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d019      	beq.n	8003e08 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	22ff      	movs	r2, #255	@ 0xff
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2221      	movs	r2, #33	@ 0x21
 8003dec:	2103      	movs	r1, #3
 8003dee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e082      	b.n	8003f02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	d1e5      	bne.n	8003dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	493f      	ldr	r1, [pc, #252]	@ (8003f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	22ff      	movs	r2, #255	@ 0xff
 8003e20:	401a      	ands	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	493b      	ldr	r1, [pc, #236]	@ (8003f14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003e2c:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	22fa      	movs	r2, #250	@ 0xfa
 8003e32:	01d1      	lsls	r1, r2, #7
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7fc f979 	bl	800012c <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	0013      	movs	r3, r2
 8003e40:	015b      	lsls	r3, r3, #5
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	22ff      	movs	r2, #255	@ 0xff
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	@ 0x21
 8003e64:	2103      	movs	r1, #3
 8003e66:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e046      	b.n	8003f02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d0e5      	beq.n	8003e4c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2107      	movs	r1, #7
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003eae:	2180      	movs	r1, #128	@ 0x80
 8003eb0:	0349      	lsls	r1, r1, #13
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003eb6:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b17      	ldr	r3, [pc, #92]	@ (8003f18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	0349      	lsls	r1, r1, #13
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	01c9      	lsls	r1, r1, #7
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	00c9      	lsls	r1, r1, #3
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	22ff      	movs	r2, #255	@ 0xff
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2221      	movs	r2, #33	@ 0x21
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	2100      	movs	r1, #0
 8003efe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b006      	add	sp, #24
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	fffffbff 	.word	0xfffffbff
 8003f14:	fffffb7f 	.word	0xfffffb7f
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	5c9b      	ldrb	r3, [r3, r2]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e04e      	b.n	8003fd4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2221      	movs	r2, #33	@ 0x21
 8003f42:	2102      	movs	r1, #2
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ca      	movs	r2, #202	@ 0xca
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2253      	movs	r2, #83	@ 0x53
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	491e      	ldr	r1, [pc, #120]	@ (8003fdc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	491b      	ldr	r1, [pc, #108]	@ (8003fe0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f76:	f7fd fd29 	bl	80019cc <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003f7e:	e016      	b.n	8003fae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f80:	f7fd fd24 	bl	80019cc <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad2      	subs	r2, r2, r3
 8003f8a:	23fa      	movs	r3, #250	@ 0xfa
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d90d      	bls.n	8003fae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	22ff      	movs	r2, #255	@ 0xff
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2221      	movs	r2, #33	@ 0x21
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e012      	b.n	8003fd4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d0e2      	beq.n	8003f80 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	22ff      	movs	r2, #255	@ 0xff
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2221      	movs	r2, #33	@ 0x21
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	fffffbff 	.word	0xfffffbff
 8003fe0:	ffffbfff 	.word	0xffffbfff

08003fe4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003fee:	2280      	movs	r2, #128	@ 0x80
 8003ff0:	0352      	lsls	r2, r2, #13
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	4013      	ands	r3, r2
 8004000:	d014      	beq.n	800402c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4013      	ands	r3, r2
 800400e:	d00d      	beq.n	800402c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	22ff      	movs	r2, #255	@ 0xff
 8004018:	401a      	ands	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4908      	ldr	r1, [pc, #32]	@ (8004040 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8004020:	430a      	orrs	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f7fc ff84 	bl	8000f34 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2221      	movs	r2, #33	@ 0x21
 8004030:	2101      	movs	r1, #1
 8004032:	5499      	strb	r1, [r3, r2]
}
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010400 	.word	0x40010400
 8004040:	fffffb7f 	.word	0xfffffb7f

08004044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e044      	b.n	80040e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2278      	movs	r2, #120	@ 0x78
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f7fd f8db 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2224      	movs	r2, #36	@ 0x24
 8004072:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2101      	movs	r1, #1
 8004080:	438a      	bics	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 ffd8 	bl	8005044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	0018      	movs	r0, r3
 8004098:	f000 fd36 	bl	8004b08 <UART_SetConfig>
 800409c:	0003      	movs	r3, r0
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e01c      	b.n	80040e0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	490d      	ldr	r1, [pc, #52]	@ (80040e8 <HAL_UART_Init+0xa4>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	212a      	movs	r1, #42	@ 0x2a
 80040c2:	438a      	bics	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 f867 	bl	80051ac <UART_CheckIdleState>
 80040de:	0003      	movs	r3, r0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	ffffb7ff 	.word	0xffffb7ff

080040ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e030      	b.n	8004160 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2224      	movs	r2, #36	@ 0x24
 8004102:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2200      	movs	r2, #0
 800412a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f7fd f9ac 	bl	800148c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2284      	movs	r2, #132	@ 0x84
 8004138:	2100      	movs	r1, #0
 800413a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	2100      	movs	r1, #0
 8004148:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2278      	movs	r2, #120	@ 0x78
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417c:	2b20      	cmp	r3, #32
 800417e:	d000      	beq.n	8004182 <HAL_UART_Transmit+0x1a>
 8004180:	e08c      	b.n	800429c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_UART_Transmit+0x28>
 8004188:	1dbb      	adds	r3, r7, #6
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e084      	b.n	800429e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	015b      	lsls	r3, r3, #5
 800419c:	429a      	cmp	r2, r3
 800419e:	d109      	bne.n	80041b4 <HAL_UART_Transmit+0x4c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e074      	b.n	800429e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2284      	movs	r2, #132	@ 0x84
 80041b8:	2100      	movs	r1, #0
 80041ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2221      	movs	r2, #33	@ 0x21
 80041c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fd fc03 	bl	80019cc <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1dba      	adds	r2, r7, #6
 80041ce:	2150      	movs	r1, #80	@ 0x50
 80041d0:	8812      	ldrh	r2, [r2, #0]
 80041d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1dba      	adds	r2, r7, #6
 80041d8:	2152      	movs	r1, #82	@ 0x52
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	015b      	lsls	r3, r3, #5
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x94>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004204:	e02f      	b.n	8004266 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	0013      	movs	r3, r2
 8004210:	2200      	movs	r2, #0
 8004212:	2180      	movs	r1, #128	@ 0x80
 8004214:	f001 f872 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d004      	beq.n	8004226 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e03b      	b.n	800429e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	001a      	movs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	05d2      	lsls	r2, r2, #23
 8004238:	0dd2      	lsrs	r2, r2, #23
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	3302      	adds	r3, #2
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e007      	b.n	8004254 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2252      	movs	r2, #82	@ 0x52
 8004258:	5a9b      	ldrh	r3, [r3, r2]
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b299      	uxth	r1, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2252      	movs	r2, #82	@ 0x52
 8004264:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2252      	movs	r2, #82	@ 0x52
 800426a:	5a9b      	ldrh	r3, [r3, r2]
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1c9      	bne.n	8004206 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	0013      	movs	r3, r2
 800427c:	2200      	movs	r2, #0
 800427e:	2140      	movs	r1, #64	@ 0x40
 8004280:	f001 f83c 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d004      	beq.n	8004292 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e005      	b.n	800429e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b008      	add	sp, #32
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	1dbb      	adds	r3, r7, #6
 80042b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2280      	movs	r2, #128	@ 0x80
 80042ba:	589b      	ldr	r3, [r3, r2]
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d14a      	bne.n	8004356 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_Receive_IT+0x26>
 80042c6:	1dbb      	adds	r3, r7, #6
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e042      	b.n	8004358 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	015b      	lsls	r3, r3, #5
 80042da:	429a      	cmp	r2, r3
 80042dc:	d109      	bne.n	80042f2 <HAL_UART_Receive_IT+0x4a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2201      	movs	r2, #1
 80042ea:	4013      	ands	r3, r2
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e032      	b.n	8004358 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_UART_Receive_IT+0xb8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d020      	beq.n	8004344 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	4013      	ands	r3, r2
 800430e:	d019      	beq.n	8004344 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	613b      	str	r3, [r7, #16]
  return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			@ (mov r8, r8)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2180      	movs	r1, #128	@ 0x80
 8004332:	04c9      	lsls	r1, r1, #19
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004344:	1dbb      	adds	r3, r7, #6
 8004346:	881a      	ldrh	r2, [r3, #0]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	0018      	movs	r0, r3
 800434e:	f001 f845 	bl	80053dc <UART_Start_Receive_IT>
 8004352:	0003      	movs	r3, r0
 8004354:	e000      	b.n	8004358 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004356:	2302      	movs	r3, #2
  }
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b008      	add	sp, #32
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40004800 	.word	0x40004800

08004364 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b092      	sub	sp, #72	@ 0x48
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436c:	f3ef 8310 	mrs	r3, PRIMASK
 8004370:	623b      	str	r3, [r7, #32]
  return(result);
 8004372:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
 8004376:	2301      	movs	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	494b      	ldr	r1, [pc, #300]	@ (80044bc <HAL_UART_AbortReceive+0x158>)
 800438e:	400a      	ands	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439e:	f3ef 8310 	mrs	r3, PRIMASK
 80043a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80043a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a8:	2301      	movs	r3, #1
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d118      	bne.n	800440a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	617b      	str	r3, [r7, #20]
  return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e2:	2301      	movs	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2110      	movs	r1, #16
 80043fa:	438a      	bics	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2240      	movs	r2, #64	@ 0x40
 8004412:	4013      	ands	r3, r2
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d135      	bne.n	8004484 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	60bb      	str	r3, [r7, #8]
  return(result);
 800441e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004420:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004422:	2301      	movs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2140      	movs	r1, #64	@ 0x40
 800443a:	438a      	bics	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004456:	2200      	movs	r2, #0
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	0018      	movs	r0, r3
 8004460:	f7fd fd58 	bl	8001f14 <HAL_DMA_Abort>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d00d      	beq.n	8004484 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446c:	0018      	movs	r0, r3
 800446e:	f7fd fe86 	bl	800217e <HAL_DMA_GetError>
 8004472:	0003      	movs	r3, r0
 8004474:	2b20      	cmp	r3, #32
 8004476:	d105      	bne.n	8004484 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	@ 0x84
 800447c:	2110      	movs	r1, #16
 800447e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e017      	b.n	80044b4 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	225a      	movs	r2, #90	@ 0x5a
 8004488:	2100      	movs	r1, #0
 800448a:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	220f      	movs	r2, #15
 8004492:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2108      	movs	r1, #8
 80044a0:	430a      	orrs	r2, r1
 80044a2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2280      	movs	r2, #128	@ 0x80
 80044a8:	2120      	movs	r1, #32
 80044aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b012      	add	sp, #72	@ 0x48
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	fffffedf 	.word	0xfffffedf

080044c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b0ab      	sub	sp, #172	@ 0xac
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	22a4      	movs	r2, #164	@ 0xa4
 80044d0:	18b9      	adds	r1, r7, r2
 80044d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	20a0      	movs	r0, #160	@ 0xa0
 80044dc:	1839      	adds	r1, r7, r0
 80044de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	219c      	movs	r1, #156	@ 0x9c
 80044e8:	1879      	adds	r1, r7, r1
 80044ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044ec:	0011      	movs	r1, r2
 80044ee:	18bb      	adds	r3, r7, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a99      	ldr	r2, [pc, #612]	@ (8004758 <HAL_UART_IRQHandler+0x298>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	2298      	movs	r2, #152	@ 0x98
 80044f8:	18bc      	adds	r4, r7, r2
 80044fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044fc:	18bb      	adds	r3, r7, r2
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d114      	bne.n	800452e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004504:	187b      	adds	r3, r7, r1
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2220      	movs	r2, #32
 800450a:	4013      	ands	r3, r2
 800450c:	d00f      	beq.n	800452e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800450e:	183b      	adds	r3, r7, r0
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	d00a      	beq.n	800452e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800451c:	2b00      	cmp	r3, #0
 800451e:	d100      	bne.n	8004522 <HAL_UART_IRQHandler+0x62>
 8004520:	e2be      	b.n	8004aa0 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	0010      	movs	r0, r2
 800452a:	4798      	blx	r3
      }
      return;
 800452c:	e2b8      	b.n	8004aa0 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800452e:	2398      	movs	r3, #152	@ 0x98
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d100      	bne.n	800453a <HAL_UART_IRQHandler+0x7a>
 8004538:	e114      	b.n	8004764 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800453a:	239c      	movs	r3, #156	@ 0x9c
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d106      	bne.n	8004554 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004546:	23a0      	movs	r3, #160	@ 0xa0
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a83      	ldr	r2, [pc, #524]	@ (800475c <HAL_UART_IRQHandler+0x29c>)
 800454e:	4013      	ands	r3, r2
 8004550:	d100      	bne.n	8004554 <HAL_UART_IRQHandler+0x94>
 8004552:	e107      	b.n	8004764 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004554:	23a4      	movs	r3, #164	@ 0xa4
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d012      	beq.n	8004586 <HAL_UART_IRQHandler+0xc6>
 8004560:	23a0      	movs	r3, #160	@ 0xa0
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4013      	ands	r3, r2
 800456c:	d00b      	beq.n	8004586 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2284      	movs	r2, #132	@ 0x84
 800457a:	589b      	ldr	r3, [r3, r2]
 800457c:	2201      	movs	r2, #1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2184      	movs	r1, #132	@ 0x84
 8004584:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004586:	23a4      	movs	r3, #164	@ 0xa4
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d011      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
 8004592:	239c      	movs	r3, #156	@ 0x9c
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	4013      	ands	r3, r2
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2202      	movs	r2, #2
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2284      	movs	r2, #132	@ 0x84
 80045aa:	589b      	ldr	r3, [r3, r2]
 80045ac:	2204      	movs	r2, #4
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2184      	movs	r1, #132	@ 0x84
 80045b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b6:	23a4      	movs	r3, #164	@ 0xa4
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d011      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
 80045c2:	239c      	movs	r3, #156	@ 0x9c
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2204      	movs	r2, #4
 80045d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2284      	movs	r2, #132	@ 0x84
 80045da:	589b      	ldr	r3, [r3, r2]
 80045dc:	2202      	movs	r2, #2
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2184      	movs	r1, #132	@ 0x84
 80045e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045e6:	23a4      	movs	r3, #164	@ 0xa4
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	4013      	ands	r3, r2
 80045f0:	d017      	beq.n	8004622 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f2:	23a0      	movs	r3, #160	@ 0xa0
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	4013      	ands	r3, r2
 80045fc:	d105      	bne.n	800460a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045fe:	239c      	movs	r3, #156	@ 0x9c
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004608:	d00b      	beq.n	8004622 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2208      	movs	r2, #8
 8004610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2284      	movs	r2, #132	@ 0x84
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	2208      	movs	r2, #8
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2184      	movs	r1, #132	@ 0x84
 8004620:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004622:	23a4      	movs	r3, #164	@ 0xa4
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_UART_IRQHandler+0x198>
 8004630:	23a0      	movs	r3, #160	@ 0xa0
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	04db      	lsls	r3, r3, #19
 800463a:	4013      	ands	r3, r2
 800463c:	d00c      	beq.n	8004658 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2280      	movs	r2, #128	@ 0x80
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2284      	movs	r2, #132	@ 0x84
 800464c:	589b      	ldr	r3, [r3, r2]
 800464e:	2220      	movs	r2, #32
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2184      	movs	r1, #132	@ 0x84
 8004656:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	@ 0x84
 800465c:	589b      	ldr	r3, [r3, r2]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <HAL_UART_IRQHandler+0x1a4>
 8004662:	e21f      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004664:	23a4      	movs	r3, #164	@ 0xa4
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004670:	23a0      	movs	r3, #160	@ 0xa0
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	4013      	ands	r3, r2
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	0010      	movs	r0, r2
 800468c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2284      	movs	r2, #132	@ 0x84
 8004692:	589b      	ldr	r3, [r3, r2]
 8004694:	2194      	movs	r1, #148	@ 0x94
 8004696:	187a      	adds	r2, r7, r1
 8004698:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2240      	movs	r2, #64	@ 0x40
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	d004      	beq.n	80046b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2228      	movs	r2, #40	@ 0x28
 80046ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b0:	d047      	beq.n	8004742 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f001 f81f 	bl	80056f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2240      	movs	r2, #64	@ 0x40
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d137      	bne.n	8004738 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c8:	f3ef 8310 	mrs	r3, PRIMASK
 80046cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80046ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d0:	2090      	movs	r0, #144	@ 0x90
 80046d2:	183a      	adds	r2, r7, r0
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	2301      	movs	r3, #1
 80046d8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2140      	movs	r1, #64	@ 0x40
 80046ee:	438a      	bics	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470c:	4a14      	ldr	r2, [pc, #80]	@ (8004760 <HAL_UART_IRQHandler+0x2a0>)
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004714:	0018      	movs	r0, r3
 8004716:	f7fd fc3d 	bl	8001f94 <HAL_DMA_Abort_IT>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d01a      	beq.n	8004754 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004728:	0018      	movs	r0, r3
 800472a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e012      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 f9d5 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004736:	e00d      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f9d0 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e008      	b.n	8004754 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f9cb 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2284      	movs	r2, #132	@ 0x84
 800474e:	2100      	movs	r1, #0
 8004750:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004752:	e1a7      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	46c0      	nop			@ (mov r8, r8)
    return;
 8004756:	e1a5      	b.n	8004aa4 <HAL_UART_IRQHandler+0x5e4>
 8004758:	0000080f 	.word	0x0000080f
 800475c:	04000120 	.word	0x04000120
 8004760:	08005a2b 	.word	0x08005a2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004768:	2b01      	cmp	r3, #1
 800476a:	d000      	beq.n	800476e <HAL_UART_IRQHandler+0x2ae>
 800476c:	e159      	b.n	8004a22 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800476e:	23a4      	movs	r3, #164	@ 0xa4
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2210      	movs	r2, #16
 8004776:	4013      	ands	r3, r2
 8004778:	d100      	bne.n	800477c <HAL_UART_IRQHandler+0x2bc>
 800477a:	e152      	b.n	8004a22 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800477c:	23a0      	movs	r3, #160	@ 0xa0
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	4013      	ands	r3, r2
 8004786:	d100      	bne.n	800478a <HAL_UART_IRQHandler+0x2ca>
 8004788:	e14b      	b.n	8004a22 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2240      	movs	r2, #64	@ 0x40
 800479a:	4013      	ands	r3, r2
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d000      	beq.n	80047a2 <HAL_UART_IRQHandler+0x2e2>
 80047a0:	e0bf      	b.n	8004922 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	217e      	movs	r1, #126	@ 0x7e
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d100      	bne.n	80047ba <HAL_UART_IRQHandler+0x2fa>
 80047b8:	e095      	b.n	80048e6 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2258      	movs	r2, #88	@ 0x58
 80047be:	5a9b      	ldrh	r3, [r3, r2]
 80047c0:	187a      	adds	r2, r7, r1
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d300      	bcc.n	80047ca <HAL_UART_IRQHandler+0x30a>
 80047c8:	e08d      	b.n	80048e6 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	187a      	adds	r2, r7, r1
 80047ce:	215a      	movs	r1, #90	@ 0x5a
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2220      	movs	r2, #32
 80047de:	4013      	ands	r3, r2
 80047e0:	d16f      	bne.n	80048c2 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ec:	2301      	movs	r3, #1
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	49ad      	ldr	r1, [pc, #692]	@ (8004ab8 <HAL_UART_IRQHandler+0x5f8>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800480a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800481a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	677b      	str	r3, [r7, #116]	@ 0x74
 800481e:	2301      	movs	r3, #1
 8004820:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	438a      	bics	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
 800483a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800483c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800484c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004850:	2301      	movs	r3, #1
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2140      	movs	r1, #64	@ 0x40
 8004868:	438a      	bics	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800486e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2280      	movs	r2, #128	@ 0x80
 800487c:	2120      	movs	r1, #32
 800487e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004886:	f3ef 8310 	mrs	r3, PRIMASK
 800488a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800488c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004890:	2301      	movs	r3, #1
 8004892:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004896:	f383 8810 	msr	PRIMASK, r3
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2110      	movs	r1, #16
 80048a8:	438a      	bics	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fd fb29 	bl	8001f14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2258      	movs	r2, #88	@ 0x58
 80048cc:	5a9a      	ldrh	r2, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	215a      	movs	r1, #90	@ 0x5a
 80048d2:	5a5b      	ldrh	r3, [r3, r1]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 f906 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048e4:	e0e0      	b.n	8004aa8 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2258      	movs	r2, #88	@ 0x58
 80048ea:	5a9b      	ldrh	r3, [r3, r2]
 80048ec:	227e      	movs	r2, #126	@ 0x7e
 80048ee:	18ba      	adds	r2, r7, r2
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d000      	beq.n	80048f8 <HAL_UART_IRQHandler+0x438>
 80048f6:	e0d7      	b.n	8004aa8 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2220      	movs	r2, #32
 8004902:	4013      	ands	r3, r2
 8004904:	2b20      	cmp	r3, #32
 8004906:	d000      	beq.n	800490a <HAL_UART_IRQHandler+0x44a>
 8004908:	e0ce      	b.n	8004aa8 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2258      	movs	r2, #88	@ 0x58
 8004914:	5a9a      	ldrh	r2, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0011      	movs	r1, r2
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f8e8 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
      return;
 8004920:	e0c2      	b.n	8004aa8 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2258      	movs	r2, #88	@ 0x58
 8004926:	5a99      	ldrh	r1, [r3, r2]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	225a      	movs	r2, #90	@ 0x5a
 800492c:	5a9b      	ldrh	r3, [r3, r2]
 800492e:	b29a      	uxth	r2, r3
 8004930:	208e      	movs	r0, #142	@ 0x8e
 8004932:	183b      	adds	r3, r7, r0
 8004934:	1a8a      	subs	r2, r1, r2
 8004936:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	225a      	movs	r2, #90	@ 0x5a
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d100      	bne.n	8004946 <HAL_UART_IRQHandler+0x486>
 8004944:	e0b2      	b.n	8004aac <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004946:	183b      	adds	r3, r7, r0
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d100      	bne.n	8004950 <HAL_UART_IRQHandler+0x490>
 800494e:	e0ad      	b.n	8004aac <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	60fb      	str	r3, [r7, #12]
  return(result);
 8004956:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	2488      	movs	r4, #136	@ 0x88
 800495a:	193a      	adds	r2, r7, r4
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4951      	ldr	r1, [pc, #324]	@ (8004abc <HAL_UART_IRQHandler+0x5fc>)
 8004976:	400a      	ands	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	193b      	adds	r3, r7, r4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004988:	f3ef 8310 	mrs	r3, PRIMASK
 800498c:	61bb      	str	r3, [r7, #24]
  return(result);
 800498e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	2484      	movs	r4, #132	@ 0x84
 8004992:	193a      	adds	r2, r7, r4
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f383 8810 	msr	PRIMASK, r3
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	438a      	bics	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	193b      	adds	r3, r7, r4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2280      	movs	r2, #128	@ 0x80
 80049c4:	2120      	movs	r1, #32
 80049c6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d4:	f3ef 8310 	mrs	r3, PRIMASK
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049dc:	2480      	movs	r4, #128	@ 0x80
 80049de:	193a      	adds	r2, r7, r4
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	2301      	movs	r3, #1
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2110      	movs	r1, #16
 80049fa:	438a      	bics	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	193b      	adds	r3, r7, r4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a12:	183b      	adds	r3, r7, r0
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f868 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a20:	e044      	b.n	8004aac <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a22:	23a4      	movs	r3, #164	@ 0xa4
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	035b      	lsls	r3, r3, #13
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d010      	beq.n	8004a52 <HAL_UART_IRQHandler+0x592>
 8004a30:	239c      	movs	r3, #156	@ 0x9c
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	03db      	lsls	r3, r3, #15
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2280      	movs	r2, #128	@ 0x80
 8004a44:	0352      	lsls	r2, r2, #13
 8004a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f001 f9f0 	bl	8005e30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a50:	e02f      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a52:	23a4      	movs	r3, #164	@ 0xa4
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a5e:	23a0      	movs	r3, #160	@ 0xa0
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2280      	movs	r2, #128	@ 0x80
 8004a66:	4013      	ands	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01e      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	0010      	movs	r0, r2
 8004a7a:	4798      	blx	r3
    }
    return;
 8004a7c:	e018      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a7e:	23a4      	movs	r3, #164	@ 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2240      	movs	r2, #64	@ 0x40
 8004a86:	4013      	ands	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
 8004a8a:	23a0      	movs	r3, #160	@ 0xa0
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2240      	movs	r2, #64	@ 0x40
 8004a92:	4013      	ands	r3, r2
 8004a94:	d00d      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 ffd9 	bl	8005a50 <UART_EndTransmit_IT>
    return;
 8004a9e:	e008      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004aa0:	46c0      	nop			@ (mov r8, r8)
 8004aa2:	e006      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	e004      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004aa8:	46c0      	nop			@ (mov r8, r8)
 8004aaa:	e002      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004aac:	46c0      	nop			@ (mov r8, r8)
 8004aae:	e000      	b.n	8004ab2 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004ab0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b02b      	add	sp, #172	@ 0xac
 8004ab6:	bd90      	pop	{r4, r7, pc}
 8004ab8:	fffffeff 	.word	0xfffffeff
 8004abc:	fffffedf 	.word	0xfffffedf

08004ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ad8:	46c0      	nop			@ (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b002      	add	sp, #8
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	000a      	movs	r2, r1
 8004afa:	1cbb      	adds	r3, r7, #2
 8004afc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b08e      	sub	sp, #56	@ 0x38
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b10:	231a      	movs	r3, #26
 8004b12:	2218      	movs	r2, #24
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	19db      	adds	r3, r3, r7
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4ac3      	ldr	r2, [pc, #780]	@ (8004e48 <UART_SetConfig+0x340>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4abe      	ldr	r2, [pc, #760]	@ (8004e4c <UART_SetConfig+0x344>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4ab8      	ldr	r2, [pc, #736]	@ (8004e50 <UART_SetConfig+0x348>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	4ab4      	ldr	r2, [pc, #720]	@ (8004e54 <UART_SetConfig+0x34c>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4ab0      	ldr	r2, [pc, #704]	@ (8004e58 <UART_SetConfig+0x350>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d131      	bne.n	8004c00 <UART_SetConfig+0xf8>
 8004b9c:	4baf      	ldr	r3, [pc, #700]	@ (8004e5c <UART_SetConfig+0x354>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d01d      	beq.n	8004be4 <UART_SetConfig+0xdc>
 8004ba8:	d823      	bhi.n	8004bf2 <UART_SetConfig+0xea>
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d00c      	beq.n	8004bc8 <UART_SetConfig+0xc0>
 8004bae:	d820      	bhi.n	8004bf2 <UART_SetConfig+0xea>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <UART_SetConfig+0xb2>
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d00e      	beq.n	8004bd6 <UART_SetConfig+0xce>
 8004bb8:	e01b      	b.n	8004bf2 <UART_SetConfig+0xea>
 8004bba:	231b      	movs	r3, #27
 8004bbc:	2218      	movs	r2, #24
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	19db      	adds	r3, r3, r7
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e0b4      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004bc8:	231b      	movs	r3, #27
 8004bca:	2218      	movs	r2, #24
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e0ad      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004bd6:	231b      	movs	r3, #27
 8004bd8:	2218      	movs	r2, #24
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	19db      	adds	r3, r3, r7
 8004bde:	2204      	movs	r2, #4
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	e0a6      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004be4:	231b      	movs	r3, #27
 8004be6:	2218      	movs	r2, #24
 8004be8:	189b      	adds	r3, r3, r2
 8004bea:	19db      	adds	r3, r3, r7
 8004bec:	2208      	movs	r2, #8
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e09f      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004bf2:	231b      	movs	r3, #27
 8004bf4:	2218      	movs	r2, #24
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	19db      	adds	r3, r3, r7
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e098      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a96      	ldr	r2, [pc, #600]	@ (8004e60 <UART_SetConfig+0x358>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d131      	bne.n	8004c6e <UART_SetConfig+0x166>
 8004c0a:	4b94      	ldr	r3, [pc, #592]	@ (8004e5c <UART_SetConfig+0x354>)
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0e:	220c      	movs	r2, #12
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d01d      	beq.n	8004c52 <UART_SetConfig+0x14a>
 8004c16:	d823      	bhi.n	8004c60 <UART_SetConfig+0x158>
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d00c      	beq.n	8004c36 <UART_SetConfig+0x12e>
 8004c1c:	d820      	bhi.n	8004c60 <UART_SetConfig+0x158>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <UART_SetConfig+0x120>
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d00e      	beq.n	8004c44 <UART_SetConfig+0x13c>
 8004c26:	e01b      	b.n	8004c60 <UART_SetConfig+0x158>
 8004c28:	231b      	movs	r3, #27
 8004c2a:	2218      	movs	r2, #24
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	19db      	adds	r3, r3, r7
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e07d      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c36:	231b      	movs	r3, #27
 8004c38:	2218      	movs	r2, #24
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	19db      	adds	r3, r3, r7
 8004c3e:	2202      	movs	r2, #2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e076      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c44:	231b      	movs	r3, #27
 8004c46:	2218      	movs	r2, #24
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	19db      	adds	r3, r3, r7
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e06f      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c52:	231b      	movs	r3, #27
 8004c54:	2218      	movs	r2, #24
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	19db      	adds	r3, r3, r7
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e068      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c60:	231b      	movs	r3, #27
 8004c62:	2218      	movs	r2, #24
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	2210      	movs	r2, #16
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e061      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7c      	ldr	r2, [pc, #496]	@ (8004e64 <UART_SetConfig+0x35c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d106      	bne.n	8004c86 <UART_SetConfig+0x17e>
 8004c78:	231b      	movs	r3, #27
 8004c7a:	2218      	movs	r2, #24
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e055      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a77      	ldr	r2, [pc, #476]	@ (8004e68 <UART_SetConfig+0x360>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d106      	bne.n	8004c9e <UART_SetConfig+0x196>
 8004c90:	231b      	movs	r3, #27
 8004c92:	2218      	movs	r2, #24
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	19db      	adds	r3, r3, r7
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e049      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6b      	ldr	r2, [pc, #428]	@ (8004e50 <UART_SetConfig+0x348>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d13e      	bne.n	8004d26 <UART_SetConfig+0x21e>
 8004ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e5c <UART_SetConfig+0x354>)
 8004caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cac:	23c0      	movs	r3, #192	@ 0xc0
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	22c0      	movs	r2, #192	@ 0xc0
 8004cb4:	0112      	lsls	r2, r2, #4
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d027      	beq.n	8004d0a <UART_SetConfig+0x202>
 8004cba:	22c0      	movs	r2, #192	@ 0xc0
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d82a      	bhi.n	8004d18 <UART_SetConfig+0x210>
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	0112      	lsls	r2, r2, #4
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d011      	beq.n	8004cee <UART_SetConfig+0x1e6>
 8004cca:	2280      	movs	r2, #128	@ 0x80
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d822      	bhi.n	8004d18 <UART_SetConfig+0x210>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <UART_SetConfig+0x1d8>
 8004cd6:	2280      	movs	r2, #128	@ 0x80
 8004cd8:	00d2      	lsls	r2, r2, #3
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <UART_SetConfig+0x1f4>
 8004cde:	e01b      	b.n	8004d18 <UART_SetConfig+0x210>
 8004ce0:	231b      	movs	r3, #27
 8004ce2:	2218      	movs	r2, #24
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	19db      	adds	r3, r3, r7
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e021      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004cee:	231b      	movs	r3, #27
 8004cf0:	2218      	movs	r2, #24
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	19db      	adds	r3, r3, r7
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e01a      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004cfc:	231b      	movs	r3, #27
 8004cfe:	2218      	movs	r2, #24
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	2204      	movs	r2, #4
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e013      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004d0a:	231b      	movs	r3, #27
 8004d0c:	2218      	movs	r2, #24
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	19db      	adds	r3, r3, r7
 8004d12:	2208      	movs	r2, #8
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e00c      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004d18:	231b      	movs	r3, #27
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	189b      	adds	r3, r3, r2
 8004d1e:	19db      	adds	r3, r3, r7
 8004d20:	2210      	movs	r2, #16
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e005      	b.n	8004d32 <UART_SetConfig+0x22a>
 8004d26:	231b      	movs	r3, #27
 8004d28:	2218      	movs	r2, #24
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	19db      	adds	r3, r3, r7
 8004d2e:	2210      	movs	r2, #16
 8004d30:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a46      	ldr	r2, [pc, #280]	@ (8004e50 <UART_SetConfig+0x348>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d000      	beq.n	8004d3e <UART_SetConfig+0x236>
 8004d3c:	e09a      	b.n	8004e74 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d3e:	231b      	movs	r3, #27
 8004d40:	2218      	movs	r2, #24
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	19db      	adds	r3, r3, r7
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d01d      	beq.n	8004d88 <UART_SetConfig+0x280>
 8004d4c:	dc20      	bgt.n	8004d90 <UART_SetConfig+0x288>
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d015      	beq.n	8004d7e <UART_SetConfig+0x276>
 8004d52:	dc1d      	bgt.n	8004d90 <UART_SetConfig+0x288>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <UART_SetConfig+0x256>
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d005      	beq.n	8004d68 <UART_SetConfig+0x260>
 8004d5c:	e018      	b.n	8004d90 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5e:	f7fe fc3b 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004d62:	0003      	movs	r3, r0
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d66:	e01c      	b.n	8004da2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d68:	4b3c      	ldr	r3, [pc, #240]	@ (8004e5c <UART_SetConfig+0x354>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d002      	beq.n	8004d78 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d72:	4b3e      	ldr	r3, [pc, #248]	@ (8004e6c <UART_SetConfig+0x364>)
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d76:	e014      	b.n	8004da2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b3d      	ldr	r3, [pc, #244]	@ (8004e70 <UART_SetConfig+0x368>)
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d7c:	e011      	b.n	8004da2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fe fb9b 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8004d82:	0003      	movs	r3, r0
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d86:	e00c      	b.n	8004da2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d8e:	e008      	b.n	8004da2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004d94:	231a      	movs	r3, #26
 8004d96:	2218      	movs	r2, #24
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	19db      	adds	r3, r3, r7
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]
        break;
 8004da0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d100      	bne.n	8004daa <UART_SetConfig+0x2a2>
 8004da8:	e133      	b.n	8005012 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	0013      	movs	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d305      	bcc.n	8004dc6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d906      	bls.n	8004dd4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004dc6:	231a      	movs	r3, #26
 8004dc8:	2218      	movs	r2, #24
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	19db      	adds	r3, r3, r7
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e11e      	b.n	8005012 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	6939      	ldr	r1, [r7, #16]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	000b      	movs	r3, r1
 8004de2:	0e1b      	lsrs	r3, r3, #24
 8004de4:	0010      	movs	r0, r2
 8004de6:	0205      	lsls	r5, r0, #8
 8004de8:	431d      	orrs	r5, r3
 8004dea:	000b      	movs	r3, r1
 8004dec:	021c      	lsls	r4, r3, #8
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	1900      	adds	r0, r0, r4
 8004e00:	4169      	adcs	r1, r5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f7fb fb02 	bl	8000418 <__aeabi_uldivmod>
 8004e14:	0002      	movs	r2, r0
 8004e16:	000b      	movs	r3, r1
 8004e18:	0013      	movs	r3, r2
 8004e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e1e:	23c0      	movs	r3, #192	@ 0xc0
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d309      	bcc.n	8004e3a <UART_SetConfig+0x332>
 8004e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	035b      	lsls	r3, r3, #13
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d204      	bcs.n	8004e3a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e0eb      	b.n	8005012 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004e3a:	231a      	movs	r3, #26
 8004e3c:	2218      	movs	r2, #24
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	19db      	adds	r3, r3, r7
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e0e4      	b.n	8005012 <UART_SetConfig+0x50a>
 8004e48:	efff69f3 	.word	0xefff69f3
 8004e4c:	ffffcfff 	.word	0xffffcfff
 8004e50:	40004800 	.word	0x40004800
 8004e54:	fffff4ff 	.word	0xfffff4ff
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40004400 	.word	0x40004400
 8004e64:	40004c00 	.word	0x40004c00
 8004e68:	40005000 	.word	0x40005000
 8004e6c:	003d0900 	.word	0x003d0900
 8004e70:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	2380      	movs	r3, #128	@ 0x80
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d000      	beq.n	8004e82 <UART_SetConfig+0x37a>
 8004e80:	e070      	b.n	8004f64 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004e82:	231b      	movs	r3, #27
 8004e84:	2218      	movs	r2, #24
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	19db      	adds	r3, r3, r7
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d822      	bhi.n	8004ed6 <UART_SetConfig+0x3ce>
 8004e90:	009a      	lsls	r2, r3, #2
 8004e92:	4b67      	ldr	r3, [pc, #412]	@ (8005030 <UART_SetConfig+0x528>)
 8004e94:	18d3      	adds	r3, r2, r3
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9a:	f7fe fb9d 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ea2:	e021      	b.n	8004ee8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fbae 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004eac:	e01c      	b.n	8004ee8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eae:	4b61      	ldr	r3, [pc, #388]	@ (8005034 <UART_SetConfig+0x52c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2210      	movs	r2, #16
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d002      	beq.n	8004ebe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8005038 <UART_SetConfig+0x530>)
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ebc:	e014      	b.n	8004ee8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800503c <UART_SetConfig+0x534>)
 8004ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ec2:	e011      	b.n	8004ee8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec4:	f7fe faf8 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ecc:	e00c      	b.n	8004ee8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ed4:	e008      	b.n	8004ee8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004eda:	231a      	movs	r3, #26
 8004edc:	2218      	movs	r2, #24
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	19db      	adds	r3, r3, r7
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
        break;
 8004ee6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d100      	bne.n	8004ef0 <UART_SetConfig+0x3e8>
 8004eee:	e090      	b.n	8005012 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	005a      	lsls	r2, r3, #1
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	18d2      	adds	r2, r2, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	0019      	movs	r1, r3
 8004f02:	0010      	movs	r0, r2
 8004f04:	f7fb f912 	bl	800012c <__udivsi3>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d921      	bls.n	8004f56 <UART_SetConfig+0x44e>
 8004f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	025b      	lsls	r3, r3, #9
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d21c      	bcs.n	8004f56 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	200e      	movs	r0, #14
 8004f22:	2418      	movs	r4, #24
 8004f24:	1903      	adds	r3, r0, r4
 8004f26:	19db      	adds	r3, r3, r7
 8004f28:	210f      	movs	r1, #15
 8004f2a:	438a      	bics	r2, r1
 8004f2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2207      	movs	r2, #7
 8004f36:	4013      	ands	r3, r2
 8004f38:	b299      	uxth	r1, r3
 8004f3a:	1903      	adds	r3, r0, r4
 8004f3c:	19db      	adds	r3, r3, r7
 8004f3e:	1902      	adds	r2, r0, r4
 8004f40:	19d2      	adds	r2, r2, r7
 8004f42:	8812      	ldrh	r2, [r2, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1902      	adds	r2, r0, r4
 8004f4e:	19d2      	adds	r2, r2, r7
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e05d      	b.n	8005012 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	231a      	movs	r3, #26
 8004f58:	2218      	movs	r2, #24
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	19db      	adds	r3, r3, r7
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e056      	b.n	8005012 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f64:	231b      	movs	r3, #27
 8004f66:	2218      	movs	r2, #24
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	19db      	adds	r3, r3, r7
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d822      	bhi.n	8004fb8 <UART_SetConfig+0x4b0>
 8004f72:	009a      	lsls	r2, r3, #2
 8004f74:	4b32      	ldr	r3, [pc, #200]	@ (8005040 <UART_SetConfig+0x538>)
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fb2c 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 8004f80:	0003      	movs	r3, r0
 8004f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f84:	e021      	b.n	8004fca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f86:	f7fe fb3d 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f8e:	e01c      	b.n	8004fca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f90:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <UART_SetConfig+0x52c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	4013      	ands	r3, r2
 8004f98:	d002      	beq.n	8004fa0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f9a:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <UART_SetConfig+0x530>)
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f9e:	e014      	b.n	8004fca <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b26      	ldr	r3, [pc, #152]	@ (800503c <UART_SetConfig+0x534>)
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fa4:	e011      	b.n	8004fca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe fa87 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8004faa:	0003      	movs	r3, r0
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fae:	e00c      	b.n	8004fca <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fb6:	e008      	b.n	8004fca <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004fbc:	231a      	movs	r3, #26
 8004fbe:	2218      	movs	r2, #24
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	19db      	adds	r3, r3, r7
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
        break;
 8004fc8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	085a      	lsrs	r2, r3, #1
 8004fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd8:	18d2      	adds	r2, r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	0019      	movs	r1, r3
 8004fe0:	0010      	movs	r0, r2
 8004fe2:	f7fb f8a3 	bl	800012c <__udivsi3>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	2b0f      	cmp	r3, #15
 8004fee:	d90a      	bls.n	8005006 <UART_SetConfig+0x4fe>
 8004ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff2:	2380      	movs	r3, #128	@ 0x80
 8004ff4:	025b      	lsls	r3, r3, #9
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d205      	bcs.n	8005006 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e005      	b.n	8005012 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005006:	231a      	movs	r3, #26
 8005008:	2218      	movs	r2, #24
 800500a:	189b      	adds	r3, r3, r2
 800500c:	19db      	adds	r3, r3, r7
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2200      	movs	r2, #0
 8005016:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2200      	movs	r2, #0
 800501c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800501e:	231a      	movs	r3, #26
 8005020:	2218      	movs	r2, #24
 8005022:	189b      	adds	r3, r3, r2
 8005024:	19db      	adds	r3, r3, r7
 8005026:	781b      	ldrb	r3, [r3, #0]
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b00e      	add	sp, #56	@ 0x38
 800502e:	bdb0      	pop	{r4, r5, r7, pc}
 8005030:	08006db8 	.word	0x08006db8
 8005034:	40021000 	.word	0x40021000
 8005038:	003d0900 	.word	0x003d0900
 800503c:	00f42400 	.word	0x00f42400
 8005040:	08006ddc 	.word	0x08006ddc

08005044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2208      	movs	r2, #8
 8005052:	4013      	ands	r3, r2
 8005054:	d00b      	beq.n	800506e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a4a      	ldr	r2, [pc, #296]	@ (8005188 <UART_AdvFeatureConfig+0x144>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	2201      	movs	r2, #1
 8005074:	4013      	ands	r3, r2
 8005076:	d00b      	beq.n	8005090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a43      	ldr	r2, [pc, #268]	@ (800518c <UART_AdvFeatureConfig+0x148>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	2202      	movs	r2, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d00b      	beq.n	80050b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005190 <UART_AdvFeatureConfig+0x14c>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	2204      	movs	r2, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4a34      	ldr	r2, [pc, #208]	@ (8005194 <UART_AdvFeatureConfig+0x150>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	2210      	movs	r2, #16
 80050da:	4013      	ands	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005198 <UART_AdvFeatureConfig+0x154>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2220      	movs	r2, #32
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00b      	beq.n	8005118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4a25      	ldr	r2, [pc, #148]	@ (800519c <UART_AdvFeatureConfig+0x158>)
 8005108:	4013      	ands	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	2240      	movs	r2, #64	@ 0x40
 800511e:	4013      	ands	r3, r2
 8005120:	d01d      	beq.n	800515e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <UART_AdvFeatureConfig+0x15c>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	035b      	lsls	r3, r3, #13
 8005142:	429a      	cmp	r2, r3
 8005144:	d10b      	bne.n	800515e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a15      	ldr	r2, [pc, #84]	@ (80051a4 <UART_AdvFeatureConfig+0x160>)
 800514e:	4013      	ands	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	2280      	movs	r2, #128	@ 0x80
 8005164:	4013      	ands	r3, r2
 8005166:	d00b      	beq.n	8005180 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <UART_AdvFeatureConfig+0x164>)
 8005170:	4013      	ands	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}
 8005188:	ffff7fff 	.word	0xffff7fff
 800518c:	fffdffff 	.word	0xfffdffff
 8005190:	fffeffff 	.word	0xfffeffff
 8005194:	fffbffff 	.word	0xfffbffff
 8005198:	ffffefff 	.word	0xffffefff
 800519c:	ffffdfff 	.word	0xffffdfff
 80051a0:	ffefffff 	.word	0xffefffff
 80051a4:	ff9fffff 	.word	0xff9fffff
 80051a8:	fff7ffff 	.word	0xfff7ffff

080051ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b092      	sub	sp, #72	@ 0x48
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2284      	movs	r2, #132	@ 0x84
 80051b8:	2100      	movs	r1, #0
 80051ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051bc:	f7fc fc06 	bl	80019cc <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d12c      	bne.n	800522c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	0391      	lsls	r1, r2, #14
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4a46      	ldr	r2, [pc, #280]	@ (80052f4 <UART_CheckIdleState+0x148>)
 80051dc:	9200      	str	r2, [sp, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	f000 f88c 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 80051e4:	1e03      	subs	r3, r0, #0
 80051e6:	d021      	beq.n	800522c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f2:	2301      	movs	r3, #1
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			@ (mov r8, r8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2180      	movs	r1, #128	@ 0x80
 800520a:	438a      	bics	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2278      	movs	r2, #120	@ 0x78
 8005224:	2100      	movs	r1, #0
 8005226:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e05f      	b.n	80052ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2204      	movs	r2, #4
 8005234:	4013      	ands	r3, r2
 8005236:	2b04      	cmp	r3, #4
 8005238:	d146      	bne.n	80052c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523c:	2280      	movs	r2, #128	@ 0x80
 800523e:	03d1      	lsls	r1, r2, #15
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <UART_CheckIdleState+0x148>)
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	f000 f858 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d03b      	beq.n	80052c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005250:	f3ef 8310 	mrs	r3, PRIMASK
 8005254:	60fb      	str	r3, [r7, #12]
  return(result);
 8005256:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
 800525a:	2301      	movs	r3, #1
 800525c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4921      	ldr	r1, [pc, #132]	@ (80052f8 <UART_CheckIdleState+0x14c>)
 8005272:	400a      	ands	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f383 8810 	msr	PRIMASK, r3
}
 8005280:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005282:	f3ef 8310 	mrs	r3, PRIMASK
 8005286:	61bb      	str	r3, [r7, #24]
  return(result);
 8005288:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	633b      	str	r3, [r7, #48]	@ 0x30
 800528c:	2301      	movs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f383 8810 	msr	PRIMASK, r3
}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2101      	movs	r1, #1
 80052a4:	438a      	bics	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	@ 0x80
 80052b8:	2120      	movs	r1, #32
 80052ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2278      	movs	r2, #120	@ 0x78
 80052c0:	2100      	movs	r1, #0
 80052c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e011      	b.n	80052ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2280      	movs	r2, #128	@ 0x80
 80052d2:	2120      	movs	r1, #32
 80052d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2278      	movs	r2, #120	@ 0x78
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b010      	add	sp, #64	@ 0x40
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	01ffffff 	.word	0x01ffffff
 80052f8:	fffffedf 	.word	0xfffffedf

080052fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	e051      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3301      	adds	r3, #1
 8005312:	d04e      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc fb5a 	bl	80019cc <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e051      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2204      	movs	r2, #4
 8005336:	4013      	ands	r3, r2
 8005338:	d03b      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b80      	cmp	r3, #128	@ 0x80
 800533e:	d038      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b40      	cmp	r3, #64	@ 0x40
 8005344:	d035      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	2208      	movs	r2, #8
 800534e:	4013      	ands	r3, r2
 8005350:	2b08      	cmp	r3, #8
 8005352:	d111      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f9ca 	bl	80056f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2284      	movs	r2, #132	@ 0x84
 8005368:	2108      	movs	r1, #8
 800536a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2278      	movs	r2, #120	@ 0x78
 8005370:	2100      	movs	r1, #0
 8005372:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02c      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	401a      	ands	r2, r3
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	429a      	cmp	r2, r3
 800538a:	d112      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	0112      	lsls	r2, r2, #4
 8005394:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0018      	movs	r0, r3
 800539a:	f000 f9ad 	bl	80056f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2284      	movs	r2, #132	@ 0x84
 80053a2:	2120      	movs	r1, #32
 80053a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2278      	movs	r2, #120	@ 0x78
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00f      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	425a      	negs	r2, r3
 80053c2:	4153      	adcs	r3, r2
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	001a      	movs	r2, r3
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d09e      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	@ 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	1dbb      	adds	r3, r7, #6
 80053e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1dba      	adds	r2, r7, #6
 80053f4:	2158      	movs	r1, #88	@ 0x58
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1dba      	adds	r2, r7, #6
 80053fe:	215a      	movs	r1, #90	@ 0x5a
 8005400:	8812      	ldrh	r2, [r2, #0]
 8005402:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	015b      	lsls	r3, r3, #5
 8005412:	429a      	cmp	r2, r3
 8005414:	d10d      	bne.n	8005432 <UART_Start_Receive_IT+0x56>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <UART_Start_Receive_IT+0x4c>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	225c      	movs	r2, #92	@ 0x5c
 8005422:	4950      	ldr	r1, [pc, #320]	@ (8005564 <UART_Start_Receive_IT+0x188>)
 8005424:	5299      	strh	r1, [r3, r2]
 8005426:	e02e      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	225c      	movs	r2, #92	@ 0x5c
 800542c:	21ff      	movs	r1, #255	@ 0xff
 800542e:	5299      	strh	r1, [r3, r2]
 8005430:	e029      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10d      	bne.n	8005456 <UART_Start_Receive_IT+0x7a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <UART_Start_Receive_IT+0x70>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	225c      	movs	r2, #92	@ 0x5c
 8005446:	21ff      	movs	r1, #255	@ 0xff
 8005448:	5299      	strh	r1, [r3, r2]
 800544a:	e01c      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	225c      	movs	r2, #92	@ 0x5c
 8005450:	217f      	movs	r1, #127	@ 0x7f
 8005452:	5299      	strh	r1, [r3, r2]
 8005454:	e017      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	055b      	lsls	r3, r3, #21
 800545e:	429a      	cmp	r2, r3
 8005460:	d10d      	bne.n	800547e <UART_Start_Receive_IT+0xa2>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <UART_Start_Receive_IT+0x98>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	225c      	movs	r2, #92	@ 0x5c
 800546e:	217f      	movs	r1, #127	@ 0x7f
 8005470:	5299      	strh	r1, [r3, r2]
 8005472:	e008      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	225c      	movs	r2, #92	@ 0x5c
 8005478:	213f      	movs	r1, #63	@ 0x3f
 800547a:	5299      	strh	r1, [r3, r2]
 800547c:	e003      	b.n	8005486 <UART_Start_Receive_IT+0xaa>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	225c      	movs	r2, #92	@ 0x5c
 8005482:	2100      	movs	r1, #0
 8005484:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2284      	movs	r2, #132	@ 0x84
 800548a:	2100      	movs	r1, #0
 800548c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2280      	movs	r2, #128	@ 0x80
 8005492:	2122      	movs	r1, #34	@ 0x22
 8005494:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054a0:	2301      	movs	r3, #1
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2101      	movs	r1, #1
 80054b8:	430a      	orrs	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	015b      	lsls	r3, r3, #5
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d107      	bne.n	80054e4 <UART_Start_Receive_IT+0x108>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a22      	ldr	r2, [pc, #136]	@ (8005568 <UART_Start_Receive_IT+0x18c>)
 80054e0:	669a      	str	r2, [r3, #104]	@ 0x68
 80054e2:	e002      	b.n	80054ea <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a21      	ldr	r2, [pc, #132]	@ (800556c <UART_Start_Receive_IT+0x190>)
 80054e8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f2:	f3ef 8310 	mrs	r3, PRIMASK
 80054f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80054f8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fc:	2301      	movs	r3, #1
 80054fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2190      	movs	r1, #144	@ 0x90
 8005514:	0049      	lsls	r1, r1, #1
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	f383 8810 	msr	PRIMASK, r3
}
 8005524:	e018      	b.n	8005558 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005526:	f3ef 8310 	mrs	r3, PRIMASK
 800552a:	613b      	str	r3, [r7, #16]
  return(result);
 800552c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800552e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2120      	movs	r1, #32
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f383 8810 	msr	PRIMASK, r3
}
 8005556:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b010      	add	sp, #64	@ 0x40
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	000001ff 	.word	0x000001ff
 8005568:	08005c6d 	.word	0x08005c6d
 800556c:	08005aa9 	.word	0x08005aa9

08005570 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b090      	sub	sp, #64	@ 0x40
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	1dbb      	adds	r3, r7, #6
 800557c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1dba      	adds	r2, r7, #6
 8005588:	2158      	movs	r1, #88	@ 0x58
 800558a:	8812      	ldrh	r2, [r2, #0]
 800558c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2284      	movs	r2, #132	@ 0x84
 8005592:	2100      	movs	r1, #0
 8005594:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2280      	movs	r2, #128	@ 0x80
 800559a:	2122      	movs	r1, #34	@ 0x22
 800559c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d028      	beq.n	80055f8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055aa:	4a3e      	ldr	r2, [pc, #248]	@ (80056a4 <UART_Start_Receive_DMA+0x134>)
 80055ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	4a3d      	ldr	r2, [pc, #244]	@ (80056a8 <UART_Start_Receive_DMA+0x138>)
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	4a3c      	ldr	r2, [pc, #240]	@ (80056ac <UART_Start_Receive_DMA+0x13c>)
 80055bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	2200      	movs	r2, #0
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3324      	adds	r3, #36	@ 0x24
 80055d0:	0019      	movs	r1, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	001a      	movs	r2, r3
 80055d8:	1dbb      	adds	r3, r7, #6
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	f7fc fc34 	bl	8001e48 <HAL_DMA_Start_IT>
 80055e0:	1e03      	subs	r3, r0, #0
 80055e2:	d009      	beq.n	80055f8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2284      	movs	r2, #132	@ 0x84
 80055e8:	2110      	movs	r1, #16
 80055ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2280      	movs	r2, #128	@ 0x80
 80055f0:	2120      	movs	r1, #32
 80055f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e050      	b.n	800569a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d019      	beq.n	8005634 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560a:	2301      	movs	r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2180      	movs	r1, #128	@ 0x80
 8005622:	0049      	lsls	r1, r1, #1
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005634:	f3ef 8310 	mrs	r3, PRIMASK
 8005638:	613b      	str	r3, [r7, #16]
  return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800563e:	2301      	movs	r3, #1
 8005640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			@ (mov r8, r8)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2101      	movs	r1, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	609a      	str	r2, [r3, #8]
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8310 	mrs	r3, PRIMASK
 800566a:	61fb      	str	r3, [r7, #28]
  return(result);
 800566c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005670:	2301      	movs	r3, #1
 8005672:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	f383 8810 	msr	PRIMASK, r3
}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2140      	movs	r1, #64	@ 0x40
 8005688:	430a      	orrs	r2, r1
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b010      	add	sp, #64	@ 0x40
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	080057c1 	.word	0x080057c1
 80056a8:	08005929 	.word	0x08005929
 80056ac:	080059a7 	.word	0x080059a7

080056b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b8:	f3ef 8310 	mrs	r3, PRIMASK
 80056bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	2301      	movs	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f383 8810 	msr	PRIMASK, r3
}
 80056cc:	46c0      	nop			@ (mov r8, r8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	21c0      	movs	r1, #192	@ 0xc0
 80056da:	438a      	bics	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80056f0:	46c0      	nop			@ (mov r8, r8)
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b006      	add	sp, #24
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	@ 0x38
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	617b      	str	r3, [r7, #20]
  return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
 800570a:	2301      	movs	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4926      	ldr	r1, [pc, #152]	@ (80057bc <UART_EndRxTransfer+0xc4>)
 8005722:	400a      	ands	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005732:	f3ef 8310 	mrs	r3, PRIMASK
 8005736:	623b      	str	r3, [r7, #32]
  return(result);
 8005738:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
 800573c:	2301      	movs	r3, #1
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2101      	movs	r1, #1
 8005754:	438a      	bics	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005768:	2b01      	cmp	r3, #1
 800576a:	d118      	bne.n	800579e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576c:	f3ef 8310 	mrs	r3, PRIMASK
 8005770:	60bb      	str	r3, [r7, #8]
  return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005776:	2301      	movs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f383 8810 	msr	PRIMASK, r3
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2110      	movs	r1, #16
 800578e:	438a      	bics	r2, r1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2280      	movs	r2, #128	@ 0x80
 80057a2:	2120      	movs	r1, #32
 80057a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b00e      	add	sp, #56	@ 0x38
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	fffffedf 	.word	0xfffffedf

080057c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b094      	sub	sp, #80	@ 0x50
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2220      	movs	r2, #32
 80057d6:	4013      	ands	r3, r2
 80057d8:	d16f      	bne.n	80058ba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80057da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057dc:	225a      	movs	r2, #90	@ 0x5a
 80057de:	2100      	movs	r1, #0
 80057e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8310 	mrs	r3, PRIMASK
 80057e6:	617b      	str	r3, [r7, #20]
  return(result);
 80057e8:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ec:	2301      	movs	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4948      	ldr	r1, [pc, #288]	@ (8005924 <UART_DMAReceiveCplt+0x164>)
 8005804:	400a      	ands	r2, r1
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005814:	f3ef 8310 	mrs	r3, PRIMASK
 8005818:	623b      	str	r3, [r7, #32]
  return(result);
 800581a:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	647b      	str	r3, [r7, #68]	@ 0x44
 800581e:	2301      	movs	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			@ (mov r8, r8)
 800582a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2101      	movs	r1, #1
 8005836:	438a      	bics	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005846:	f3ef 8310 	mrs	r3, PRIMASK
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005850:	2301      	movs	r3, #1
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2140      	movs	r1, #64	@ 0x40
 8005868:	438a      	bics	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587a:	2280      	movs	r2, #128	@ 0x80
 800587c:	2120      	movs	r1, #32
 800587e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005884:	2b01      	cmp	r3, #1
 8005886:	d118      	bne.n	80058ba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005888:	f3ef 8310 	mrs	r3, PRIMASK
 800588c:	60bb      	str	r3, [r7, #8]
  return(result);
 800588e:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005892:	2301      	movs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			@ (mov r8, r8)
 800589e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2110      	movs	r1, #16
 80058aa:	438a      	bics	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058bc:	2200      	movs	r2, #0
 80058be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d124      	bne.n	8005912 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 80058c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ca:	225a      	movs	r2, #90	@ 0x5a
 80058cc:	2100      	movs	r1, #0
 80058ce:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	213a      	movs	r1, #58	@ 0x3a
 80058d8:	187b      	adds	r3, r7, r1
 80058da:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 80058dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058de:	2258      	movs	r2, #88	@ 0x58
 80058e0:	5a9b      	ldrh	r3, [r3, r2]
 80058e2:	187a      	adds	r2, r7, r1
 80058e4:	8812      	ldrh	r2, [r2, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d204      	bcs.n	80058f4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80058ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ec:	187a      	adds	r2, r7, r1
 80058ee:	215a      	movs	r1, #90	@ 0x5a
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f6:	2258      	movs	r2, #88	@ 0x58
 80058f8:	5a9a      	ldrh	r2, [r3, r2]
 80058fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fc:	215a      	movs	r1, #90	@ 0x5a
 80058fe:	5a5b      	ldrh	r3, [r3, r1]
 8005900:	b29b      	uxth	r3, r3
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b29a      	uxth	r2, r3
 8005906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005908:	0011      	movs	r1, r2
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff f8f0 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005910:	e003      	b.n	800591a <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005914:	0018      	movs	r0, r3
 8005916:	f7fb fbdb 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	b014      	add	sp, #80	@ 0x50
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	fffffeff 	.word	0xfffffeff

08005928 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	2b01      	cmp	r3, #1
 8005942:	d128      	bne.n	8005996 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2258      	movs	r2, #88	@ 0x58
 8005948:	5a9b      	ldrh	r3, [r3, r2]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	b299      	uxth	r1, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	225a      	movs	r2, #90	@ 0x5a
 8005952:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	210a      	movs	r1, #10
 800595c:	187b      	adds	r3, r7, r1
 800595e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2258      	movs	r2, #88	@ 0x58
 8005964:	5a9b      	ldrh	r3, [r3, r2]
 8005966:	187a      	adds	r2, r7, r1
 8005968:	8812      	ldrh	r2, [r2, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d804      	bhi.n	8005978 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	187a      	adds	r2, r7, r1
 8005972:	215a      	movs	r1, #90	@ 0x5a
 8005974:	8812      	ldrh	r2, [r2, #0]
 8005976:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2258      	movs	r2, #88	@ 0x58
 800597c:	5a9a      	ldrh	r2, [r3, r2]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	215a      	movs	r1, #90	@ 0x5a
 8005982:	5a5b      	ldrh	r3, [r3, r1]
 8005984:	b29b      	uxth	r3, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	0011      	movs	r1, r2
 800598e:	0018      	movs	r0, r3
 8005990:	f7ff f8ae 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005994:	e003      	b.n	800599e <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	0018      	movs	r0, r3
 800599a:	f7ff f899 	bl	8004ad0 <HAL_UART_RxHalfCpltCallback>
}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2280      	movs	r2, #128	@ 0x80
 80059be:	589b      	ldr	r3, [r3, r2]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2280      	movs	r2, #128	@ 0x80
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b80      	cmp	r3, #128	@ 0x80
 80059ce:	d10a      	bne.n	80059e6 <UART_DMAError+0x40>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b21      	cmp	r3, #33	@ 0x21
 80059d4:	d107      	bne.n	80059e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2252      	movs	r2, #82	@ 0x52
 80059da:	2100      	movs	r1, #0
 80059dc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fe65 	bl	80056b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2240      	movs	r2, #64	@ 0x40
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d10a      	bne.n	8005a0a <UART_DMAError+0x64>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b22      	cmp	r3, #34	@ 0x22
 80059f8:	d107      	bne.n	8005a0a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	225a      	movs	r2, #90	@ 0x5a
 80059fe:	2100      	movs	r1, #0
 8005a00:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f7ff fe77 	bl	80056f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2284      	movs	r2, #132	@ 0x84
 8005a0e:	589b      	ldr	r3, [r3, r2]
 8005a10:	2210      	movs	r2, #16
 8005a12:	431a      	orrs	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2184      	movs	r1, #132	@ 0x84
 8005a18:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff f85f 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b006      	add	sp, #24
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	225a      	movs	r2, #90	@ 0x5a
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7ff f84c 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b004      	add	sp, #16
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	2301      	movs	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f383 8810 	msr	PRIMASK, r3
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2140      	movs	r1, #64	@ 0x40
 8005a7a:	438a      	bics	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7ff f811 	bl	8004ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b006      	add	sp, #24
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b094      	sub	sp, #80	@ 0x50
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ab0:	204e      	movs	r0, #78	@ 0x4e
 8005ab2:	183b      	adds	r3, r7, r0
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	215c      	movs	r1, #92	@ 0x5c
 8005ab8:	5a52      	ldrh	r2, [r2, r1]
 8005aba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2280      	movs	r2, #128	@ 0x80
 8005ac0:	589b      	ldr	r3, [r3, r2]
 8005ac2:	2b22      	cmp	r3, #34	@ 0x22
 8005ac4:	d000      	beq.n	8005ac8 <UART_RxISR_8BIT+0x20>
 8005ac6:	e0bf      	b.n	8005c48 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ace:	214c      	movs	r1, #76	@ 0x4c
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	183b      	adds	r3, r7, r0
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b2d9      	uxtb	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae4:	400a      	ands	r2, r1
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	225a      	movs	r2, #90	@ 0x5a
 8005af8:	5a9b      	ldrh	r3, [r3, r2]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b299      	uxth	r1, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	225a      	movs	r2, #90	@ 0x5a
 8005b04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	225a      	movs	r2, #90	@ 0x5a
 8005b0a:	5a9b      	ldrh	r3, [r3, r2]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d000      	beq.n	8005b14 <UART_RxISR_8BIT+0x6c>
 8005b12:	e0a1      	b.n	8005c58 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b14:	f3ef 8310 	mrs	r3, PRIMASK
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b1e:	2301      	movs	r3, #1
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			@ (mov r8, r8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	494a      	ldr	r1, [pc, #296]	@ (8005c60 <UART_RxISR_8BIT+0x1b8>)
 8005b36:	400a      	ands	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b40:	f383 8810 	msr	PRIMASK, r3
}
 8005b44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b46:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b50:	2301      	movs	r3, #1
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2101      	movs	r1, #1
 8005b68:	438a      	bics	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	f383 8810 	msr	PRIMASK, r3
}
 8005b76:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2280      	movs	r2, #128	@ 0x80
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a34      	ldr	r2, [pc, #208]	@ (8005c64 <UART_RxISR_8BIT+0x1bc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005baa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bae:	2301      	movs	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f383 8810 	msr	PRIMASK, r3
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4928      	ldr	r1, [pc, #160]	@ (8005c68 <UART_RxISR_8BIT+0x1c0>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bcc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f383 8810 	msr	PRIMASK, r3
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d12f      	bne.n	8005c3e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be4:	f3ef 8310 	mrs	r3, PRIMASK
 8005be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bea:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bee:	2301      	movs	r3, #1
 8005bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2110      	movs	r1, #16
 8005c06:	438a      	bics	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d103      	bne.n	8005c2c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2258      	movs	r2, #88	@ 0x58
 8005c30:	5a9a      	ldrh	r2, [r3, r2]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0011      	movs	r1, r2
 8005c36:	0018      	movs	r0, r3
 8005c38:	f7fe ff5a 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c3c:	e00c      	b.n	8005c58 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7fb fa45 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8005c46:	e007      	b.n	8005c58 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2108      	movs	r1, #8
 8005c54:	430a      	orrs	r2, r1
 8005c56:	619a      	str	r2, [r3, #24]
}
 8005c58:	46c0      	nop			@ (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b014      	add	sp, #80	@ 0x50
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	fffffedf 	.word	0xfffffedf
 8005c64:	40004800 	.word	0x40004800
 8005c68:	fbffffff 	.word	0xfbffffff

08005c6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b094      	sub	sp, #80	@ 0x50
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c74:	204e      	movs	r0, #78	@ 0x4e
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	215c      	movs	r1, #92	@ 0x5c
 8005c7c:	5a52      	ldrh	r2, [r2, r1]
 8005c7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	589b      	ldr	r3, [r3, r2]
 8005c86:	2b22      	cmp	r3, #34	@ 0x22
 8005c88:	d000      	beq.n	8005c8c <UART_RxISR_16BIT+0x20>
 8005c8a:	e0bf      	b.n	8005e0c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c92:	214c      	movs	r1, #76	@ 0x4c
 8005c94:	187b      	adds	r3, r7, r1
 8005c96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	183a      	adds	r2, r7, r0
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	8812      	ldrh	r2, [r2, #0]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	225a      	movs	r2, #90	@ 0x5a
 8005cbc:	5a9b      	ldrh	r3, [r3, r2]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	225a      	movs	r2, #90	@ 0x5a
 8005cc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	225a      	movs	r2, #90	@ 0x5a
 8005cce:	5a9b      	ldrh	r3, [r3, r2]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d000      	beq.n	8005cd8 <UART_RxISR_16BIT+0x6c>
 8005cd6:	e0a1      	b.n	8005e1c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cdc:	623b      	str	r3, [r7, #32]
  return(result);
 8005cde:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	f383 8810 	msr	PRIMASK, r3
}
 8005cec:	46c0      	nop			@ (mov r8, r8)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	494a      	ldr	r1, [pc, #296]	@ (8005e24 <UART_RxISR_16BIT+0x1b8>)
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	f383 8810 	msr	PRIMASK, r3
}
 8005d08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d14:	2301      	movs	r3, #1
 8005d16:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	f383 8810 	msr	PRIMASK, r3
}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
 8005d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	@ 0x80
 8005d40:	2120      	movs	r1, #32
 8005d42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a34      	ldr	r2, [pc, #208]	@ (8005e28 <UART_RxISR_16BIT+0x1bc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01f      	beq.n	8005d9a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	2380      	movs	r3, #128	@ 0x80
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	4013      	ands	r3, r2
 8005d66:	d018      	beq.n	8005d9a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d68:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d6e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d72:	2301      	movs	r3, #1
 8005d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f383 8810 	msr	PRIMASK, r3
}
 8005d7c:	46c0      	nop			@ (mov r8, r8)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4928      	ldr	r1, [pc, #160]	@ (8005e2c <UART_RxISR_16BIT+0x1c0>)
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d12f      	bne.n	8005e02 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005db2:	2301      	movs	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			@ (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2110      	movs	r1, #16
 8005dca:	438a      	bics	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2210      	movs	r2, #16
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d103      	bne.n	8005df0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2210      	movs	r2, #16
 8005dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2258      	movs	r2, #88	@ 0x58
 8005df4:	5a9a      	ldrh	r2, [r3, r2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fe fe78 	bl	8004af0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e00:	e00c      	b.n	8005e1c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fb f963 	bl	80010d0 <HAL_UART_RxCpltCallback>
}
 8005e0a:	e007      	b.n	8005e1c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2108      	movs	r1, #8
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	619a      	str	r2, [r3, #24]
}
 8005e1c:	46c0      	nop			@ (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b014      	add	sp, #80	@ 0x50
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	fffffedf 	.word	0xfffffedf
 8005e28:	40004800 	.word	0x40004800
 8005e2c:	fbffffff 	.word	0xfbffffff

08005e30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e38:	46c0      	nop			@ (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	6019      	str	r1, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4e:	2317      	movs	r3, #23
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2278      	movs	r2, #120	@ 0x78
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e04a      	b.n	8005efa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2278      	movs	r2, #120	@ 0x78
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2224      	movs	r2, #36	@ 0x24
 8005e70:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	438a      	bics	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a1e      	ldr	r2, [pc, #120]	@ (8005f04 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	6819      	ldr	r1, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	f000 f8f9 	bl	80060a0 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ebe:	f7fb fd85 	bl	80019cc <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2280      	movs	r2, #128	@ 0x80
 8005eca:	03d1      	lsls	r1, r2, #15
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	4a0e      	ldr	r2, [pc, #56]	@ (8005f08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8005ed0:	9200      	str	r2, [sp, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7ff fa12 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d004      	beq.n	8005ee6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8005edc:	2317      	movs	r3, #23
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e002      	b.n	8005eec <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	67da      	str	r2, [r3, #124]	@ 0x7c
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2278      	movs	r2, #120	@ 0x78
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]

  return status;
 8005ef4:	2317      	movs	r3, #23
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	781b      	ldrb	r3, [r3, #0]
}
 8005efa:	0018      	movs	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b006      	add	sp, #24
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	ffcfffff 	.word	0xffcfffff
 8005f08:	01ffffff 	.word	0x01ffffff

08005f0c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2278      	movs	r2, #120	@ 0x78
 8005f18:	5c9b      	ldrb	r3, [r3, r2]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_UARTEx_EnableStopMode+0x16>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e021      	b.n	8005f66 <HAL_UARTEx_EnableStopMode+0x5a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2278      	movs	r2, #120	@ 0x78
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f30:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	2301      	movs	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f383 8810 	msr	PRIMASK, r3
}
 8005f3e:	46c0      	nop			@ (mov r8, r8)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f383 8810 	msr	PRIMASK, r3
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2278      	movs	r2, #120	@ 0x78
 8005f60:	2100      	movs	r1, #0
 8005f62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2278      	movs	r2, #120	@ 0x78
 8005f7a:	5c9b      	ldrb	r3, [r3, r2]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_UARTEx_DisableStopMode+0x16>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e021      	b.n	8005fc8 <HAL_UARTEx_DisableStopMode+0x5a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2278      	movs	r2, #120	@ 0x78
 8005f88:	2101      	movs	r1, #1
 8005f8a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f92:	68bb      	ldr	r3, [r7, #8]

  /* Clear UESM bit */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	2301      	movs	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2102      	movs	r1, #2
 8005fae:	438a      	bics	r2, r1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			@ (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2278      	movs	r2, #120	@ 0x78
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b006      	add	sp, #24
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b08a      	sub	sp, #40	@ 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	1dbb      	adds	r3, r7, #6
 8005fdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2280      	movs	r2, #128	@ 0x80
 8005fe2:	589b      	ldr	r3, [r3, r2]
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d156      	bne.n	8006096 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005fee:	1dbb      	adds	r3, r7, #6
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e04e      	b.n	8006098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	2380      	movs	r3, #128	@ 0x80
 8006000:	015b      	lsls	r3, r3, #5
 8006002:	429a      	cmp	r2, r3
 8006004:	d109      	bne.n	800601a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2201      	movs	r2, #1
 8006012:	4013      	ands	r3, r2
 8006014:	d001      	beq.n	800601a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e03e      	b.n	8006098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006026:	2527      	movs	r5, #39	@ 0x27
 8006028:	197c      	adds	r4, r7, r5
 800602a:	1dbb      	adds	r3, r7, #6
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f7ff fa9c 	bl	8005570 <UART_Start_Receive_DMA>
 8006038:	0003      	movs	r3, r0
 800603a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800603c:	197b      	adds	r3, r7, r5
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d124      	bne.n	800608e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b01      	cmp	r3, #1
 800604a:	d11c      	bne.n	8006086 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2210      	movs	r2, #16
 8006052:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006054:	f3ef 8310 	mrs	r3, PRIMASK
 8006058:	617b      	str	r3, [r7, #20]
  return(result);
 800605a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	2301      	movs	r3, #1
 8006060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			@ (mov r8, r8)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2110      	movs	r1, #16
 8006076:	430a      	orrs	r2, r1
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f383 8810 	msr	PRIMASK, r3
}
 8006084:	e003      	b.n	800608e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006086:	2327      	movs	r3, #39	@ 0x27
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800608e:	2327      	movs	r3, #39	@ 0x27
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	e000      	b.n	8006098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006096:	2302      	movs	r3, #2
  }
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b00a      	add	sp, #40	@ 0x28
 800609e:	bdb0      	pop	{r4, r5, r7, pc}

080060a0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	6019      	str	r1, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2210      	movs	r2, #16
 80060b6:	4393      	bics	r3, r2
 80060b8:	001a      	movs	r2, r3
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	889b      	ldrh	r3, [r3, #4]
 80060be:	0019      	movs	r1, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	0a19      	lsrs	r1, r3, #8
 80060d2:	1d3b      	adds	r3, r7, #4
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	061a      	lsls	r2, r3, #24
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b004      	add	sp, #16
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f8d6 	bl	80062a8 <malloc>
 80060fc:	0003      	movs	r3, r0
 80060fe:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8006100:	68fb      	ldr	r3, [r7, #12]
}
 8006102:	0018      	movs	r0, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}

0800610a <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <ATC_Free+0x26>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f8c9 	bl	80062bc <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
  }
}
 8006130:	46c0      	nop			@ (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}

08006138 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	1dbb      	adds	r3, r7, #6
 8006146:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8006148:	2317      	movs	r3, #23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d100      	bne.n	8006158 <ATC_Init+0x20>
 8006156:	e07f      	b.n	8006258 <ATC_Init+0x120>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d100      	bne.n	8006160 <ATC_Init+0x28>
 800615e:	e07b      	b.n	8006258 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	223c      	movs	r2, #60	@ 0x3c
 8006164:	2100      	movs	r1, #0
 8006166:	0018      	movs	r0, r3
 8006168:	f000 f99a 	bl	80064a0 <memset>
    if (pName != NULL)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d006      	beq.n	8006180 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3304      	adds	r3, #4
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	2207      	movs	r2, #7
 800617a:	0018      	movs	r0, r3
 800617c:	f000 f998 	bl	80064b0 <strncpy>
    }
    hAtc->hUart = hUart;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	0018      	movs	r0, r3
 800618c:	f7ff ffac 	bl	80060e8 <ATC_Malloc>
 8006190:	0002      	movs	r2, r0
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d055      	beq.n	800624a <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	69d8      	ldr	r0, [r3, #28]
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	001a      	movs	r2, r3
 80061a8:	2100      	movs	r1, #0
 80061aa:	f000 f979 	bl	80064a0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80061ae:	1dbb      	adds	r3, r7, #6
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff ff98 	bl	80060e8 <ATC_Malloc>
 80061b8:	0002      	movs	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d043      	beq.n	800624e <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a18      	ldr	r0, [r3, #32]
 80061ca:	1dbb      	adds	r3, r7, #6
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	001a      	movs	r2, r3
 80061d0:	2100      	movs	r1, #0
 80061d2:	f000 f965 	bl	80064a0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80061d6:	1dbb      	adds	r3, r7, #6
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	0018      	movs	r0, r3
 80061dc:	f7ff ff84 	bl	80060e8 <ATC_Malloc>
 80061e0:	0002      	movs	r2, r0
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d031      	beq.n	8006252 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80061f2:	1dbb      	adds	r3, r7, #6
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	001a      	movs	r2, r3
 80061f8:	2100      	movs	r1, #0
 80061fa:	f000 f951 	bl	80064a0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1dba      	adds	r2, r7, #6
 8006202:	8812      	ldrh	r2, [r2, #0]
 8006204:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	4252      	negs	r2, r2
 8006210:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	69d9      	ldr	r1, [r3, #28]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8a9b      	ldrh	r3, [r3, #20]
 800621e:	001a      	movs	r2, r3
 8006220:	f7ff fed6 	bl	8005fd0 <HAL_UARTEx_ReceiveToIdle_DMA>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d116      	bne.n	8006256 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2104      	movs	r1, #4
 800623c:	438a      	bics	r2, r1
 800623e:	601a      	str	r2, [r3, #0]
    answer = true;
 8006240:	2317      	movs	r3, #23
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e006      	b.n	8006258 <ATC_Init+0x120>
      break;
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	e004      	b.n	8006258 <ATC_Init+0x120>
      break;
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	e002      	b.n	8006258 <ATC_Init+0x120>
      break;
 8006252:	46c0      	nop			@ (mov r8, r8)
 8006254:	e000      	b.n	8006258 <ATC_Init+0x120>
      break;
 8006256:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8006258:	2317      	movs	r3, #23
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2201      	movs	r2, #1
 8006260:	4053      	eors	r3, r2
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	331c      	adds	r3, #28
 8006274:	0018      	movs	r0, r3
 8006276:	f7ff ff48 	bl	800610a <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3324      	adds	r3, #36	@ 0x24
 8006286:	0018      	movs	r0, r3
 8006288:	f7ff ff3f 	bl	800610a <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	223c      	movs	r2, #60	@ 0x3c
 8006290:	2100      	movs	r1, #0
 8006292:	0018      	movs	r0, r3
 8006294:	f000 f904 	bl	80064a0 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8006298:	2317      	movs	r3, #23
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	781b      	ldrb	r3, [r3, #0]
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b006      	add	sp, #24
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <malloc>:
 80062a8:	b510      	push	{r4, lr}
 80062aa:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <malloc+0x10>)
 80062ac:	0001      	movs	r1, r0
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	f000 f830 	bl	8006314 <_malloc_r>
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	20000010 	.word	0x20000010

080062bc <free>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	4b03      	ldr	r3, [pc, #12]	@ (80062cc <free+0x10>)
 80062c0:	0001      	movs	r1, r0
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	f000 f966 	bl	8006594 <_free_r>
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	20000010 	.word	0x20000010

080062d0 <sbrk_aligned>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006310 <sbrk_aligned+0x40>)
 80062d4:	000d      	movs	r5, r1
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	0004      	movs	r4, r0
 80062da:	2900      	cmp	r1, #0
 80062dc:	d102      	bne.n	80062e4 <sbrk_aligned+0x14>
 80062de:	f000 f911 	bl	8006504 <_sbrk_r>
 80062e2:	6030      	str	r0, [r6, #0]
 80062e4:	0029      	movs	r1, r5
 80062e6:	0020      	movs	r0, r4
 80062e8:	f000 f90c 	bl	8006504 <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d103      	bne.n	80062f8 <sbrk_aligned+0x28>
 80062f0:	2501      	movs	r5, #1
 80062f2:	426d      	negs	r5, r5
 80062f4:	0028      	movs	r0, r5
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	2303      	movs	r3, #3
 80062fa:	1cc5      	adds	r5, r0, #3
 80062fc:	439d      	bics	r5, r3
 80062fe:	42a8      	cmp	r0, r5
 8006300:	d0f8      	beq.n	80062f4 <sbrk_aligned+0x24>
 8006302:	1a29      	subs	r1, r5, r0
 8006304:	0020      	movs	r0, r4
 8006306:	f000 f8fd 	bl	8006504 <_sbrk_r>
 800630a:	3001      	adds	r0, #1
 800630c:	d1f2      	bne.n	80062f4 <sbrk_aligned+0x24>
 800630e:	e7ef      	b.n	80062f0 <sbrk_aligned+0x20>
 8006310:	20000504 	.word	0x20000504

08006314 <_malloc_r>:
 8006314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006316:	2203      	movs	r2, #3
 8006318:	1ccb      	adds	r3, r1, #3
 800631a:	4393      	bics	r3, r2
 800631c:	3308      	adds	r3, #8
 800631e:	0005      	movs	r5, r0
 8006320:	001f      	movs	r7, r3
 8006322:	2b0c      	cmp	r3, #12
 8006324:	d234      	bcs.n	8006390 <_malloc_r+0x7c>
 8006326:	270c      	movs	r7, #12
 8006328:	42b9      	cmp	r1, r7
 800632a:	d833      	bhi.n	8006394 <_malloc_r+0x80>
 800632c:	0028      	movs	r0, r5
 800632e:	f000 f871 	bl	8006414 <__malloc_lock>
 8006332:	4e37      	ldr	r6, [pc, #220]	@ (8006410 <_malloc_r+0xfc>)
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	001c      	movs	r4, r3
 8006338:	2c00      	cmp	r4, #0
 800633a:	d12f      	bne.n	800639c <_malloc_r+0x88>
 800633c:	0039      	movs	r1, r7
 800633e:	0028      	movs	r0, r5
 8006340:	f7ff ffc6 	bl	80062d0 <sbrk_aligned>
 8006344:	0004      	movs	r4, r0
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d15f      	bne.n	800640a <_malloc_r+0xf6>
 800634a:	6834      	ldr	r4, [r6, #0]
 800634c:	9400      	str	r4, [sp, #0]
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d14a      	bne.n	80063ea <_malloc_r+0xd6>
 8006354:	2c00      	cmp	r4, #0
 8006356:	d052      	beq.n	80063fe <_malloc_r+0xea>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	0028      	movs	r0, r5
 800635c:	18e3      	adds	r3, r4, r3
 800635e:	9900      	ldr	r1, [sp, #0]
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f000 f8cf 	bl	8006504 <_sbrk_r>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	4283      	cmp	r3, r0
 800636a:	d148      	bne.n	80063fe <_malloc_r+0xea>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	0028      	movs	r0, r5
 8006370:	1aff      	subs	r7, r7, r3
 8006372:	0039      	movs	r1, r7
 8006374:	f7ff ffac 	bl	80062d0 <sbrk_aligned>
 8006378:	3001      	adds	r0, #1
 800637a:	d040      	beq.n	80063fe <_malloc_r+0xea>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	19db      	adds	r3, r3, r7
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	6833      	ldr	r3, [r6, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	2a00      	cmp	r2, #0
 8006388:	d133      	bne.n	80063f2 <_malloc_r+0xde>
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	e019      	b.n	80063c4 <_malloc_r+0xb0>
 8006390:	2b00      	cmp	r3, #0
 8006392:	dac9      	bge.n	8006328 <_malloc_r+0x14>
 8006394:	230c      	movs	r3, #12
 8006396:	602b      	str	r3, [r5, #0]
 8006398:	2000      	movs	r0, #0
 800639a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	1bc9      	subs	r1, r1, r7
 80063a0:	d420      	bmi.n	80063e4 <_malloc_r+0xd0>
 80063a2:	290b      	cmp	r1, #11
 80063a4:	d90a      	bls.n	80063bc <_malloc_r+0xa8>
 80063a6:	19e2      	adds	r2, r4, r7
 80063a8:	6027      	str	r7, [r4, #0]
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	d104      	bne.n	80063b8 <_malloc_r+0xa4>
 80063ae:	6032      	str	r2, [r6, #0]
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	6011      	str	r1, [r2, #0]
 80063b4:	6053      	str	r3, [r2, #4]
 80063b6:	e005      	b.n	80063c4 <_malloc_r+0xb0>
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	e7f9      	b.n	80063b0 <_malloc_r+0x9c>
 80063bc:	6862      	ldr	r2, [r4, #4]
 80063be:	42a3      	cmp	r3, r4
 80063c0:	d10e      	bne.n	80063e0 <_malloc_r+0xcc>
 80063c2:	6032      	str	r2, [r6, #0]
 80063c4:	0028      	movs	r0, r5
 80063c6:	f000 f82d 	bl	8006424 <__malloc_unlock>
 80063ca:	0020      	movs	r0, r4
 80063cc:	2207      	movs	r2, #7
 80063ce:	300b      	adds	r0, #11
 80063d0:	1d23      	adds	r3, r4, #4
 80063d2:	4390      	bics	r0, r2
 80063d4:	1ac2      	subs	r2, r0, r3
 80063d6:	4298      	cmp	r0, r3
 80063d8:	d0df      	beq.n	800639a <_malloc_r+0x86>
 80063da:	1a1b      	subs	r3, r3, r0
 80063dc:	50a3      	str	r3, [r4, r2]
 80063de:	e7dc      	b.n	800639a <_malloc_r+0x86>
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	e7ef      	b.n	80063c4 <_malloc_r+0xb0>
 80063e4:	0023      	movs	r3, r4
 80063e6:	6864      	ldr	r4, [r4, #4]
 80063e8:	e7a6      	b.n	8006338 <_malloc_r+0x24>
 80063ea:	9c00      	ldr	r4, [sp, #0]
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	e7ad      	b.n	800634e <_malloc_r+0x3a>
 80063f2:	001a      	movs	r2, r3
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d1fb      	bne.n	80063f2 <_malloc_r+0xde>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e7da      	b.n	80063b4 <_malloc_r+0xa0>
 80063fe:	230c      	movs	r3, #12
 8006400:	0028      	movs	r0, r5
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f000 f80e 	bl	8006424 <__malloc_unlock>
 8006408:	e7c6      	b.n	8006398 <_malloc_r+0x84>
 800640a:	6007      	str	r7, [r0, #0]
 800640c:	e7da      	b.n	80063c4 <_malloc_r+0xb0>
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	20000508 	.word	0x20000508

08006414 <__malloc_lock>:
 8006414:	b510      	push	{r4, lr}
 8006416:	4802      	ldr	r0, [pc, #8]	@ (8006420 <__malloc_lock+0xc>)
 8006418:	f000 f8b0 	bl	800657c <__retarget_lock_acquire_recursive>
 800641c:	bd10      	pop	{r4, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	20000648 	.word	0x20000648

08006424 <__malloc_unlock>:
 8006424:	b510      	push	{r4, lr}
 8006426:	4802      	ldr	r0, [pc, #8]	@ (8006430 <__malloc_unlock+0xc>)
 8006428:	f000 f8a9 	bl	800657e <__retarget_lock_release_recursive>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	20000648 	.word	0x20000648

08006434 <sniprintf>:
 8006434:	b40c      	push	{r2, r3}
 8006436:	b530      	push	{r4, r5, lr}
 8006438:	4b18      	ldr	r3, [pc, #96]	@ (800649c <sniprintf+0x68>)
 800643a:	000c      	movs	r4, r1
 800643c:	681d      	ldr	r5, [r3, #0]
 800643e:	b09d      	sub	sp, #116	@ 0x74
 8006440:	2900      	cmp	r1, #0
 8006442:	da08      	bge.n	8006456 <sniprintf+0x22>
 8006444:	238b      	movs	r3, #139	@ 0x8b
 8006446:	2001      	movs	r0, #1
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	4240      	negs	r0, r0
 800644c:	b01d      	add	sp, #116	@ 0x74
 800644e:	bc30      	pop	{r4, r5}
 8006450:	bc08      	pop	{r3}
 8006452:	b002      	add	sp, #8
 8006454:	4718      	bx	r3
 8006456:	2382      	movs	r3, #130	@ 0x82
 8006458:	466a      	mov	r2, sp
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	8293      	strh	r3, [r2, #20]
 800645e:	2300      	movs	r3, #0
 8006460:	9002      	str	r0, [sp, #8]
 8006462:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006464:	9006      	str	r0, [sp, #24]
 8006466:	4299      	cmp	r1, r3
 8006468:	d000      	beq.n	800646c <sniprintf+0x38>
 800646a:	1e4b      	subs	r3, r1, #1
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	9307      	str	r3, [sp, #28]
 8006470:	2301      	movs	r3, #1
 8006472:	466a      	mov	r2, sp
 8006474:	425b      	negs	r3, r3
 8006476:	82d3      	strh	r3, [r2, #22]
 8006478:	0028      	movs	r0, r5
 800647a:	ab21      	add	r3, sp, #132	@ 0x84
 800647c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800647e:	a902      	add	r1, sp, #8
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f000 f931 	bl	80066e8 <_svfiprintf_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	da01      	bge.n	800648e <sniprintf+0x5a>
 800648a:	238b      	movs	r3, #139	@ 0x8b
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	2c00      	cmp	r4, #0
 8006490:	d0dc      	beq.n	800644c <sniprintf+0x18>
 8006492:	2200      	movs	r2, #0
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e7d8      	b.n	800644c <sniprintf+0x18>
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	20000010 	.word	0x20000010

080064a0 <memset>:
 80064a0:	0003      	movs	r3, r0
 80064a2:	1882      	adds	r2, r0, r2
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	7019      	strb	r1, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <strncpy>:
 80064b0:	0003      	movs	r3, r0
 80064b2:	b530      	push	{r4, r5, lr}
 80064b4:	001d      	movs	r5, r3
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	d006      	beq.n	80064c8 <strncpy+0x18>
 80064ba:	780c      	ldrb	r4, [r1, #0]
 80064bc:	3a01      	subs	r2, #1
 80064be:	3301      	adds	r3, #1
 80064c0:	702c      	strb	r4, [r5, #0]
 80064c2:	3101      	adds	r1, #1
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	d1f5      	bne.n	80064b4 <strncpy+0x4>
 80064c8:	2100      	movs	r1, #0
 80064ca:	189a      	adds	r2, r3, r2
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d100      	bne.n	80064d2 <strncpy+0x22>
 80064d0:	bd30      	pop	{r4, r5, pc}
 80064d2:	7019      	strb	r1, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	e7f9      	b.n	80064cc <strncpy+0x1c>

080064d8 <strstr>:
 80064d8:	780a      	ldrb	r2, [r1, #0]
 80064da:	b530      	push	{r4, r5, lr}
 80064dc:	2a00      	cmp	r2, #0
 80064de:	d10c      	bne.n	80064fa <strstr+0x22>
 80064e0:	bd30      	pop	{r4, r5, pc}
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d108      	bne.n	80064f8 <strstr+0x20>
 80064e6:	2301      	movs	r3, #1
 80064e8:	5ccc      	ldrb	r4, [r1, r3]
 80064ea:	2c00      	cmp	r4, #0
 80064ec:	d0f8      	beq.n	80064e0 <strstr+0x8>
 80064ee:	5cc5      	ldrb	r5, [r0, r3]
 80064f0:	42a5      	cmp	r5, r4
 80064f2:	d101      	bne.n	80064f8 <strstr+0x20>
 80064f4:	3301      	adds	r3, #1
 80064f6:	e7f7      	b.n	80064e8 <strstr+0x10>
 80064f8:	3001      	adds	r0, #1
 80064fa:	7803      	ldrb	r3, [r0, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f0      	bne.n	80064e2 <strstr+0xa>
 8006500:	0018      	movs	r0, r3
 8006502:	e7ed      	b.n	80064e0 <strstr+0x8>

08006504 <_sbrk_r>:
 8006504:	2300      	movs	r3, #0
 8006506:	b570      	push	{r4, r5, r6, lr}
 8006508:	4d06      	ldr	r5, [pc, #24]	@ (8006524 <_sbrk_r+0x20>)
 800650a:	0004      	movs	r4, r0
 800650c:	0008      	movs	r0, r1
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	f7fa fdee 	bl	80010f0 <_sbrk>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d103      	bne.n	8006520 <_sbrk_r+0x1c>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d000      	beq.n	8006520 <_sbrk_r+0x1c>
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	20000644 	.word	0x20000644

08006528 <__errno>:
 8006528:	4b01      	ldr	r3, [pc, #4]	@ (8006530 <__errno+0x8>)
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	4770      	bx	lr
 800652e:	46c0      	nop			@ (mov r8, r8)
 8006530:	20000010 	.word	0x20000010

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	2600      	movs	r6, #0
 8006538:	4c0c      	ldr	r4, [pc, #48]	@ (800656c <__libc_init_array+0x38>)
 800653a:	4d0d      	ldr	r5, [pc, #52]	@ (8006570 <__libc_init_array+0x3c>)
 800653c:	1b64      	subs	r4, r4, r5
 800653e:	10a4      	asrs	r4, r4, #2
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	2600      	movs	r6, #0
 8006546:	f000 fb9f 	bl	8006c88 <_init>
 800654a:	4c0a      	ldr	r4, [pc, #40]	@ (8006574 <__libc_init_array+0x40>)
 800654c:	4d0a      	ldr	r5, [pc, #40]	@ (8006578 <__libc_init_array+0x44>)
 800654e:	1b64      	subs	r4, r4, r5
 8006550:	10a4      	asrs	r4, r4, #2
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	00b3      	lsls	r3, r6, #2
 800655a:	58eb      	ldr	r3, [r5, r3]
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	00b3      	lsls	r3, r6, #2
 8006564:	58eb      	ldr	r3, [r5, r3]
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	08006e3c 	.word	0x08006e3c
 8006570:	08006e3c 	.word	0x08006e3c
 8006574:	08006e40 	.word	0x08006e40
 8006578:	08006e3c 	.word	0x08006e3c

0800657c <__retarget_lock_acquire_recursive>:
 800657c:	4770      	bx	lr

0800657e <__retarget_lock_release_recursive>:
 800657e:	4770      	bx	lr

08006580 <memcpy>:
 8006580:	2300      	movs	r3, #0
 8006582:	b510      	push	{r4, lr}
 8006584:	429a      	cmp	r2, r3
 8006586:	d100      	bne.n	800658a <memcpy+0xa>
 8006588:	bd10      	pop	{r4, pc}
 800658a:	5ccc      	ldrb	r4, [r1, r3]
 800658c:	54c4      	strb	r4, [r0, r3]
 800658e:	3301      	adds	r3, #1
 8006590:	e7f8      	b.n	8006584 <memcpy+0x4>
	...

08006594 <_free_r>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	0005      	movs	r5, r0
 8006598:	1e0c      	subs	r4, r1, #0
 800659a:	d010      	beq.n	80065be <_free_r+0x2a>
 800659c:	3c04      	subs	r4, #4
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da00      	bge.n	80065a6 <_free_r+0x12>
 80065a4:	18e4      	adds	r4, r4, r3
 80065a6:	0028      	movs	r0, r5
 80065a8:	f7ff ff34 	bl	8006414 <__malloc_lock>
 80065ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006624 <_free_r+0x90>)
 80065ae:	6813      	ldr	r3, [r2, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <_free_r+0x2c>
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	6014      	str	r4, [r2, #0]
 80065b8:	0028      	movs	r0, r5
 80065ba:	f7ff ff33 	bl	8006424 <__malloc_unlock>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	d908      	bls.n	80065d6 <_free_r+0x42>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	1821      	adds	r1, r4, r0
 80065c8:	428b      	cmp	r3, r1
 80065ca:	d1f3      	bne.n	80065b4 <_free_r+0x20>
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	1809      	adds	r1, r1, r0
 80065d2:	6021      	str	r1, [r4, #0]
 80065d4:	e7ee      	b.n	80065b4 <_free_r+0x20>
 80065d6:	001a      	movs	r2, r3
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <_free_r+0x4e>
 80065de:	42a3      	cmp	r3, r4
 80065e0:	d9f9      	bls.n	80065d6 <_free_r+0x42>
 80065e2:	6811      	ldr	r1, [r2, #0]
 80065e4:	1850      	adds	r0, r2, r1
 80065e6:	42a0      	cmp	r0, r4
 80065e8:	d10b      	bne.n	8006602 <_free_r+0x6e>
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	1809      	adds	r1, r1, r0
 80065ee:	1850      	adds	r0, r2, r1
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	4283      	cmp	r3, r0
 80065f4:	d1e0      	bne.n	80065b8 <_free_r+0x24>
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	1841      	adds	r1, r0, r1
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	6053      	str	r3, [r2, #4]
 8006600:	e7da      	b.n	80065b8 <_free_r+0x24>
 8006602:	42a0      	cmp	r0, r4
 8006604:	d902      	bls.n	800660c <_free_r+0x78>
 8006606:	230c      	movs	r3, #12
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	e7d5      	b.n	80065b8 <_free_r+0x24>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428b      	cmp	r3, r1
 8006612:	d103      	bne.n	800661c <_free_r+0x88>
 8006614:	6819      	ldr	r1, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	1809      	adds	r1, r1, r0
 800661a:	6021      	str	r1, [r4, #0]
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	6054      	str	r4, [r2, #4]
 8006620:	e7ca      	b.n	80065b8 <_free_r+0x24>
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	20000508 	.word	0x20000508

08006628 <__ssputs_r>:
 8006628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662a:	688e      	ldr	r6, [r1, #8]
 800662c:	b085      	sub	sp, #20
 800662e:	001f      	movs	r7, r3
 8006630:	000c      	movs	r4, r1
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	42be      	cmp	r6, r7
 800663a:	d830      	bhi.n	800669e <__ssputs_r+0x76>
 800663c:	210c      	movs	r1, #12
 800663e:	5e62      	ldrsh	r2, [r4, r1]
 8006640:	2190      	movs	r1, #144	@ 0x90
 8006642:	00c9      	lsls	r1, r1, #3
 8006644:	420a      	tst	r2, r1
 8006646:	d028      	beq.n	800669a <__ssputs_r+0x72>
 8006648:	2003      	movs	r0, #3
 800664a:	6921      	ldr	r1, [r4, #16]
 800664c:	1a5b      	subs	r3, r3, r1
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	6963      	ldr	r3, [r4, #20]
 8006652:	4343      	muls	r3, r0
 8006654:	9801      	ldr	r0, [sp, #4]
 8006656:	0fdd      	lsrs	r5, r3, #31
 8006658:	18ed      	adds	r5, r5, r3
 800665a:	1c7b      	adds	r3, r7, #1
 800665c:	181b      	adds	r3, r3, r0
 800665e:	106d      	asrs	r5, r5, #1
 8006660:	42ab      	cmp	r3, r5
 8006662:	d900      	bls.n	8006666 <__ssputs_r+0x3e>
 8006664:	001d      	movs	r5, r3
 8006666:	0552      	lsls	r2, r2, #21
 8006668:	d528      	bpl.n	80066bc <__ssputs_r+0x94>
 800666a:	0029      	movs	r1, r5
 800666c:	9802      	ldr	r0, [sp, #8]
 800666e:	f7ff fe51 	bl	8006314 <_malloc_r>
 8006672:	1e06      	subs	r6, r0, #0
 8006674:	d02c      	beq.n	80066d0 <__ssputs_r+0xa8>
 8006676:	9a01      	ldr	r2, [sp, #4]
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	f7ff ff81 	bl	8006580 <memcpy>
 800667e:	89a2      	ldrh	r2, [r4, #12]
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <__ssputs_r+0xbc>)
 8006682:	401a      	ands	r2, r3
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	4313      	orrs	r3, r2
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	18f6      	adds	r6, r6, r3
 8006690:	6026      	str	r6, [r4, #0]
 8006692:	003e      	movs	r6, r7
 8006694:	6165      	str	r5, [r4, #20]
 8006696:	1aed      	subs	r5, r5, r3
 8006698:	60a5      	str	r5, [r4, #8]
 800669a:	42be      	cmp	r6, r7
 800669c:	d900      	bls.n	80066a0 <__ssputs_r+0x78>
 800669e:	003e      	movs	r6, r7
 80066a0:	0032      	movs	r2, r6
 80066a2:	9903      	ldr	r1, [sp, #12]
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	f000 fa99 	bl	8006bdc <memmove>
 80066aa:	2000      	movs	r0, #0
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	1b9b      	subs	r3, r3, r6
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	199b      	adds	r3, r3, r6
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	b005      	add	sp, #20
 80066ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066bc:	002a      	movs	r2, r5
 80066be:	9802      	ldr	r0, [sp, #8]
 80066c0:	f000 faa9 	bl	8006c16 <_realloc_r>
 80066c4:	1e06      	subs	r6, r0, #0
 80066c6:	d1e0      	bne.n	800668a <__ssputs_r+0x62>
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	9802      	ldr	r0, [sp, #8]
 80066cc:	f7ff ff62 	bl	8006594 <_free_r>
 80066d0:	230c      	movs	r3, #12
 80066d2:	2001      	movs	r0, #1
 80066d4:	9a02      	ldr	r2, [sp, #8]
 80066d6:	4240      	negs	r0, r0
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	89a2      	ldrh	r2, [r4, #12]
 80066dc:	3334      	adds	r3, #52	@ 0x34
 80066de:	4313      	orrs	r3, r2
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	e7e9      	b.n	80066b8 <__ssputs_r+0x90>
 80066e4:	fffffb7f 	.word	0xfffffb7f

080066e8 <_svfiprintf_r>:
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b0a1      	sub	sp, #132	@ 0x84
 80066ec:	9003      	str	r0, [sp, #12]
 80066ee:	001d      	movs	r5, r3
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	000f      	movs	r7, r1
 80066f4:	0016      	movs	r6, r2
 80066f6:	061b      	lsls	r3, r3, #24
 80066f8:	d511      	bpl.n	800671e <_svfiprintf_r+0x36>
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10e      	bne.n	800671e <_svfiprintf_r+0x36>
 8006700:	2140      	movs	r1, #64	@ 0x40
 8006702:	f7ff fe07 	bl	8006314 <_malloc_r>
 8006706:	6038      	str	r0, [r7, #0]
 8006708:	6138      	str	r0, [r7, #16]
 800670a:	2800      	cmp	r0, #0
 800670c:	d105      	bne.n	800671a <_svfiprintf_r+0x32>
 800670e:	230c      	movs	r3, #12
 8006710:	9a03      	ldr	r2, [sp, #12]
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	2001      	movs	r0, #1
 8006716:	4240      	negs	r0, r0
 8006718:	e0cf      	b.n	80068ba <_svfiprintf_r+0x1d2>
 800671a:	2340      	movs	r3, #64	@ 0x40
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	2300      	movs	r3, #0
 8006720:	ac08      	add	r4, sp, #32
 8006722:	6163      	str	r3, [r4, #20]
 8006724:	3320      	adds	r3, #32
 8006726:	7663      	strb	r3, [r4, #25]
 8006728:	3310      	adds	r3, #16
 800672a:	76a3      	strb	r3, [r4, #26]
 800672c:	9507      	str	r5, [sp, #28]
 800672e:	0035      	movs	r5, r6
 8006730:	782b      	ldrb	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <_svfiprintf_r+0x52>
 8006736:	2b25      	cmp	r3, #37	@ 0x25
 8006738:	d148      	bne.n	80067cc <_svfiprintf_r+0xe4>
 800673a:	1bab      	subs	r3, r5, r6
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	42b5      	cmp	r5, r6
 8006740:	d00b      	beq.n	800675a <_svfiprintf_r+0x72>
 8006742:	0032      	movs	r2, r6
 8006744:	0039      	movs	r1, r7
 8006746:	9803      	ldr	r0, [sp, #12]
 8006748:	f7ff ff6e 	bl	8006628 <__ssputs_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d100      	bne.n	8006752 <_svfiprintf_r+0x6a>
 8006750:	e0ae      	b.n	80068b0 <_svfiprintf_r+0x1c8>
 8006752:	6963      	ldr	r3, [r4, #20]
 8006754:	9a05      	ldr	r2, [sp, #20]
 8006756:	189b      	adds	r3, r3, r2
 8006758:	6163      	str	r3, [r4, #20]
 800675a:	782b      	ldrb	r3, [r5, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d100      	bne.n	8006762 <_svfiprintf_r+0x7a>
 8006760:	e0a6      	b.n	80068b0 <_svfiprintf_r+0x1c8>
 8006762:	2201      	movs	r2, #1
 8006764:	2300      	movs	r3, #0
 8006766:	4252      	negs	r2, r2
 8006768:	6062      	str	r2, [r4, #4]
 800676a:	a904      	add	r1, sp, #16
 800676c:	3254      	adds	r2, #84	@ 0x54
 800676e:	1852      	adds	r2, r2, r1
 8006770:	1c6e      	adds	r6, r5, #1
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	60e3      	str	r3, [r4, #12]
 8006776:	60a3      	str	r3, [r4, #8]
 8006778:	7013      	strb	r3, [r2, #0]
 800677a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800677c:	4b54      	ldr	r3, [pc, #336]	@ (80068d0 <_svfiprintf_r+0x1e8>)
 800677e:	2205      	movs	r2, #5
 8006780:	0018      	movs	r0, r3
 8006782:	7831      	ldrb	r1, [r6, #0]
 8006784:	9305      	str	r3, [sp, #20]
 8006786:	f000 fa3b 	bl	8006c00 <memchr>
 800678a:	1c75      	adds	r5, r6, #1
 800678c:	2800      	cmp	r0, #0
 800678e:	d11f      	bne.n	80067d0 <_svfiprintf_r+0xe8>
 8006790:	6822      	ldr	r2, [r4, #0]
 8006792:	06d3      	lsls	r3, r2, #27
 8006794:	d504      	bpl.n	80067a0 <_svfiprintf_r+0xb8>
 8006796:	2353      	movs	r3, #83	@ 0x53
 8006798:	a904      	add	r1, sp, #16
 800679a:	185b      	adds	r3, r3, r1
 800679c:	2120      	movs	r1, #32
 800679e:	7019      	strb	r1, [r3, #0]
 80067a0:	0713      	lsls	r3, r2, #28
 80067a2:	d504      	bpl.n	80067ae <_svfiprintf_r+0xc6>
 80067a4:	2353      	movs	r3, #83	@ 0x53
 80067a6:	a904      	add	r1, sp, #16
 80067a8:	185b      	adds	r3, r3, r1
 80067aa:	212b      	movs	r1, #43	@ 0x2b
 80067ac:	7019      	strb	r1, [r3, #0]
 80067ae:	7833      	ldrb	r3, [r6, #0]
 80067b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b2:	d016      	beq.n	80067e2 <_svfiprintf_r+0xfa>
 80067b4:	0035      	movs	r5, r6
 80067b6:	2100      	movs	r1, #0
 80067b8:	200a      	movs	r0, #10
 80067ba:	68e3      	ldr	r3, [r4, #12]
 80067bc:	782a      	ldrb	r2, [r5, #0]
 80067be:	1c6e      	adds	r6, r5, #1
 80067c0:	3a30      	subs	r2, #48	@ 0x30
 80067c2:	2a09      	cmp	r2, #9
 80067c4:	d950      	bls.n	8006868 <_svfiprintf_r+0x180>
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d111      	bne.n	80067ee <_svfiprintf_r+0x106>
 80067ca:	e017      	b.n	80067fc <_svfiprintf_r+0x114>
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7af      	b.n	8006730 <_svfiprintf_r+0x48>
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	1ac0      	subs	r0, r0, r3
 80067d6:	2301      	movs	r3, #1
 80067d8:	4083      	lsls	r3, r0
 80067da:	4313      	orrs	r3, r2
 80067dc:	002e      	movs	r6, r5
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	e7cc      	b.n	800677c <_svfiprintf_r+0x94>
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	9107      	str	r1, [sp, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	db01      	blt.n	80067f2 <_svfiprintf_r+0x10a>
 80067ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f0:	e004      	b.n	80067fc <_svfiprintf_r+0x114>
 80067f2:	425b      	negs	r3, r3
 80067f4:	60e3      	str	r3, [r4, #12]
 80067f6:	2302      	movs	r3, #2
 80067f8:	4313      	orrs	r3, r2
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	782b      	ldrb	r3, [r5, #0]
 80067fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006800:	d10c      	bne.n	800681c <_svfiprintf_r+0x134>
 8006802:	786b      	ldrb	r3, [r5, #1]
 8006804:	2b2a      	cmp	r3, #42	@ 0x2a
 8006806:	d134      	bne.n	8006872 <_svfiprintf_r+0x18a>
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	3502      	adds	r5, #2
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	9207      	str	r2, [sp, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	da01      	bge.n	800681a <_svfiprintf_r+0x132>
 8006816:	2301      	movs	r3, #1
 8006818:	425b      	negs	r3, r3
 800681a:	9309      	str	r3, [sp, #36]	@ 0x24
 800681c:	4e2d      	ldr	r6, [pc, #180]	@ (80068d4 <_svfiprintf_r+0x1ec>)
 800681e:	2203      	movs	r2, #3
 8006820:	0030      	movs	r0, r6
 8006822:	7829      	ldrb	r1, [r5, #0]
 8006824:	f000 f9ec 	bl	8006c00 <memchr>
 8006828:	2800      	cmp	r0, #0
 800682a:	d006      	beq.n	800683a <_svfiprintf_r+0x152>
 800682c:	2340      	movs	r3, #64	@ 0x40
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	4083      	lsls	r3, r0
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	3501      	adds	r5, #1
 8006836:	4313      	orrs	r3, r2
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	7829      	ldrb	r1, [r5, #0]
 800683c:	2206      	movs	r2, #6
 800683e:	4826      	ldr	r0, [pc, #152]	@ (80068d8 <_svfiprintf_r+0x1f0>)
 8006840:	1c6e      	adds	r6, r5, #1
 8006842:	7621      	strb	r1, [r4, #24]
 8006844:	f000 f9dc 	bl	8006c00 <memchr>
 8006848:	2800      	cmp	r0, #0
 800684a:	d038      	beq.n	80068be <_svfiprintf_r+0x1d6>
 800684c:	4b23      	ldr	r3, [pc, #140]	@ (80068dc <_svfiprintf_r+0x1f4>)
 800684e:	2b00      	cmp	r3, #0
 8006850:	d122      	bne.n	8006898 <_svfiprintf_r+0x1b0>
 8006852:	2207      	movs	r2, #7
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	3307      	adds	r3, #7
 8006858:	4393      	bics	r3, r2
 800685a:	3308      	adds	r3, #8
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	6963      	ldr	r3, [r4, #20]
 8006860:	9a04      	ldr	r2, [sp, #16]
 8006862:	189b      	adds	r3, r3, r2
 8006864:	6163      	str	r3, [r4, #20]
 8006866:	e762      	b.n	800672e <_svfiprintf_r+0x46>
 8006868:	4343      	muls	r3, r0
 800686a:	0035      	movs	r5, r6
 800686c:	2101      	movs	r1, #1
 800686e:	189b      	adds	r3, r3, r2
 8006870:	e7a4      	b.n	80067bc <_svfiprintf_r+0xd4>
 8006872:	2300      	movs	r3, #0
 8006874:	200a      	movs	r0, #10
 8006876:	0019      	movs	r1, r3
 8006878:	3501      	adds	r5, #1
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	782a      	ldrb	r2, [r5, #0]
 800687e:	1c6e      	adds	r6, r5, #1
 8006880:	3a30      	subs	r2, #48	@ 0x30
 8006882:	2a09      	cmp	r2, #9
 8006884:	d903      	bls.n	800688e <_svfiprintf_r+0x1a6>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c8      	beq.n	800681c <_svfiprintf_r+0x134>
 800688a:	9109      	str	r1, [sp, #36]	@ 0x24
 800688c:	e7c6      	b.n	800681c <_svfiprintf_r+0x134>
 800688e:	4341      	muls	r1, r0
 8006890:	0035      	movs	r5, r6
 8006892:	2301      	movs	r3, #1
 8006894:	1889      	adds	r1, r1, r2
 8006896:	e7f1      	b.n	800687c <_svfiprintf_r+0x194>
 8006898:	aa07      	add	r2, sp, #28
 800689a:	9200      	str	r2, [sp, #0]
 800689c:	0021      	movs	r1, r4
 800689e:	003a      	movs	r2, r7
 80068a0:	4b0f      	ldr	r3, [pc, #60]	@ (80068e0 <_svfiprintf_r+0x1f8>)
 80068a2:	9803      	ldr	r0, [sp, #12]
 80068a4:	e000      	b.n	80068a8 <_svfiprintf_r+0x1c0>
 80068a6:	bf00      	nop
 80068a8:	9004      	str	r0, [sp, #16]
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	3301      	adds	r3, #1
 80068ae:	d1d6      	bne.n	800685e <_svfiprintf_r+0x176>
 80068b0:	89bb      	ldrh	r3, [r7, #12]
 80068b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80068b4:	065b      	lsls	r3, r3, #25
 80068b6:	d500      	bpl.n	80068ba <_svfiprintf_r+0x1d2>
 80068b8:	e72c      	b.n	8006714 <_svfiprintf_r+0x2c>
 80068ba:	b021      	add	sp, #132	@ 0x84
 80068bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068be:	aa07      	add	r2, sp, #28
 80068c0:	9200      	str	r2, [sp, #0]
 80068c2:	0021      	movs	r1, r4
 80068c4:	003a      	movs	r2, r7
 80068c6:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <_svfiprintf_r+0x1f8>)
 80068c8:	9803      	ldr	r0, [sp, #12]
 80068ca:	f000 f87b 	bl	80069c4 <_printf_i>
 80068ce:	e7eb      	b.n	80068a8 <_svfiprintf_r+0x1c0>
 80068d0:	08006e00 	.word	0x08006e00
 80068d4:	08006e06 	.word	0x08006e06
 80068d8:	08006e0a 	.word	0x08006e0a
 80068dc:	00000000 	.word	0x00000000
 80068e0:	08006629 	.word	0x08006629

080068e4 <_printf_common>:
 80068e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e6:	0016      	movs	r6, r2
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	688a      	ldr	r2, [r1, #8]
 80068ec:	690b      	ldr	r3, [r1, #16]
 80068ee:	000c      	movs	r4, r1
 80068f0:	9000      	str	r0, [sp, #0]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	da00      	bge.n	80068f8 <_printf_common+0x14>
 80068f6:	0013      	movs	r3, r2
 80068f8:	0022      	movs	r2, r4
 80068fa:	6033      	str	r3, [r6, #0]
 80068fc:	3243      	adds	r2, #67	@ 0x43
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	2a00      	cmp	r2, #0
 8006902:	d001      	beq.n	8006908 <_printf_common+0x24>
 8006904:	3301      	adds	r3, #1
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	069b      	lsls	r3, r3, #26
 800690c:	d502      	bpl.n	8006914 <_printf_common+0x30>
 800690e:	6833      	ldr	r3, [r6, #0]
 8006910:	3302      	adds	r3, #2
 8006912:	6033      	str	r3, [r6, #0]
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	2306      	movs	r3, #6
 8006918:	0015      	movs	r5, r2
 800691a:	401d      	ands	r5, r3
 800691c:	421a      	tst	r2, r3
 800691e:	d027      	beq.n	8006970 <_printf_common+0x8c>
 8006920:	0023      	movs	r3, r4
 8006922:	3343      	adds	r3, #67	@ 0x43
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	1e5a      	subs	r2, r3, #1
 8006928:	4193      	sbcs	r3, r2
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	0692      	lsls	r2, r2, #26
 800692e:	d430      	bmi.n	8006992 <_printf_common+0xae>
 8006930:	0022      	movs	r2, r4
 8006932:	9901      	ldr	r1, [sp, #4]
 8006934:	9800      	ldr	r0, [sp, #0]
 8006936:	9d08      	ldr	r5, [sp, #32]
 8006938:	3243      	adds	r2, #67	@ 0x43
 800693a:	47a8      	blx	r5
 800693c:	3001      	adds	r0, #1
 800693e:	d025      	beq.n	800698c <_printf_common+0xa8>
 8006940:	2206      	movs	r2, #6
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	2500      	movs	r5, #0
 8006946:	4013      	ands	r3, r2
 8006948:	2b04      	cmp	r3, #4
 800694a:	d105      	bne.n	8006958 <_printf_common+0x74>
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	68e5      	ldr	r5, [r4, #12]
 8006950:	1aed      	subs	r5, r5, r3
 8006952:	43eb      	mvns	r3, r5
 8006954:	17db      	asrs	r3, r3, #31
 8006956:	401d      	ands	r5, r3
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	6922      	ldr	r2, [r4, #16]
 800695c:	4293      	cmp	r3, r2
 800695e:	dd01      	ble.n	8006964 <_printf_common+0x80>
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	18ed      	adds	r5, r5, r3
 8006964:	2600      	movs	r6, #0
 8006966:	42b5      	cmp	r5, r6
 8006968:	d120      	bne.n	80069ac <_printf_common+0xc8>
 800696a:	2000      	movs	r0, #0
 800696c:	e010      	b.n	8006990 <_printf_common+0xac>
 800696e:	3501      	adds	r5, #1
 8006970:	68e3      	ldr	r3, [r4, #12]
 8006972:	6832      	ldr	r2, [r6, #0]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	42ab      	cmp	r3, r5
 8006978:	ddd2      	ble.n	8006920 <_printf_common+0x3c>
 800697a:	0022      	movs	r2, r4
 800697c:	2301      	movs	r3, #1
 800697e:	9901      	ldr	r1, [sp, #4]
 8006980:	9800      	ldr	r0, [sp, #0]
 8006982:	9f08      	ldr	r7, [sp, #32]
 8006984:	3219      	adds	r2, #25
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	d1f0      	bne.n	800696e <_printf_common+0x8a>
 800698c:	2001      	movs	r0, #1
 800698e:	4240      	negs	r0, r0
 8006990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006992:	2030      	movs	r0, #48	@ 0x30
 8006994:	18e1      	adds	r1, r4, r3
 8006996:	3143      	adds	r1, #67	@ 0x43
 8006998:	7008      	strb	r0, [r1, #0]
 800699a:	0021      	movs	r1, r4
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	3145      	adds	r1, #69	@ 0x45
 80069a0:	7809      	ldrb	r1, [r1, #0]
 80069a2:	18a2      	adds	r2, r4, r2
 80069a4:	3243      	adds	r2, #67	@ 0x43
 80069a6:	3302      	adds	r3, #2
 80069a8:	7011      	strb	r1, [r2, #0]
 80069aa:	e7c1      	b.n	8006930 <_printf_common+0x4c>
 80069ac:	0022      	movs	r2, r4
 80069ae:	2301      	movs	r3, #1
 80069b0:	9901      	ldr	r1, [sp, #4]
 80069b2:	9800      	ldr	r0, [sp, #0]
 80069b4:	9f08      	ldr	r7, [sp, #32]
 80069b6:	321a      	adds	r2, #26
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	d0e6      	beq.n	800698c <_printf_common+0xa8>
 80069be:	3601      	adds	r6, #1
 80069c0:	e7d1      	b.n	8006966 <_printf_common+0x82>
	...

080069c4 <_printf_i>:
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b08b      	sub	sp, #44	@ 0x2c
 80069c8:	9206      	str	r2, [sp, #24]
 80069ca:	000a      	movs	r2, r1
 80069cc:	3243      	adds	r2, #67	@ 0x43
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	9005      	str	r0, [sp, #20]
 80069d2:	9203      	str	r2, [sp, #12]
 80069d4:	7e0a      	ldrb	r2, [r1, #24]
 80069d6:	000c      	movs	r4, r1
 80069d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069da:	2a78      	cmp	r2, #120	@ 0x78
 80069dc:	d809      	bhi.n	80069f2 <_printf_i+0x2e>
 80069de:	2a62      	cmp	r2, #98	@ 0x62
 80069e0:	d80b      	bhi.n	80069fa <_printf_i+0x36>
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d100      	bne.n	80069e8 <_printf_i+0x24>
 80069e6:	e0ba      	b.n	8006b5e <_printf_i+0x19a>
 80069e8:	497a      	ldr	r1, [pc, #488]	@ (8006bd4 <_printf_i+0x210>)
 80069ea:	9104      	str	r1, [sp, #16]
 80069ec:	2a58      	cmp	r2, #88	@ 0x58
 80069ee:	d100      	bne.n	80069f2 <_printf_i+0x2e>
 80069f0:	e08e      	b.n	8006b10 <_printf_i+0x14c>
 80069f2:	0025      	movs	r5, r4
 80069f4:	3542      	adds	r5, #66	@ 0x42
 80069f6:	702a      	strb	r2, [r5, #0]
 80069f8:	e022      	b.n	8006a40 <_printf_i+0x7c>
 80069fa:	0010      	movs	r0, r2
 80069fc:	3863      	subs	r0, #99	@ 0x63
 80069fe:	2815      	cmp	r0, #21
 8006a00:	d8f7      	bhi.n	80069f2 <_printf_i+0x2e>
 8006a02:	f7f9 fb89 	bl	8000118 <__gnu_thumb1_case_shi>
 8006a06:	0016      	.short	0x0016
 8006a08:	fff6001f 	.word	0xfff6001f
 8006a0c:	fff6fff6 	.word	0xfff6fff6
 8006a10:	001ffff6 	.word	0x001ffff6
 8006a14:	fff6fff6 	.word	0xfff6fff6
 8006a18:	fff6fff6 	.word	0xfff6fff6
 8006a1c:	0036009f 	.word	0x0036009f
 8006a20:	fff6007e 	.word	0xfff6007e
 8006a24:	00b0fff6 	.word	0x00b0fff6
 8006a28:	0036fff6 	.word	0x0036fff6
 8006a2c:	fff6fff6 	.word	0xfff6fff6
 8006a30:	0082      	.short	0x0082
 8006a32:	0025      	movs	r5, r4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	3542      	adds	r5, #66	@ 0x42
 8006a38:	1d11      	adds	r1, r2, #4
 8006a3a:	6019      	str	r1, [r3, #0]
 8006a3c:	6813      	ldr	r3, [r2, #0]
 8006a3e:	702b      	strb	r3, [r5, #0]
 8006a40:	2301      	movs	r3, #1
 8006a42:	e09e      	b.n	8006b82 <_printf_i+0x1be>
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	6809      	ldr	r1, [r1, #0]
 8006a48:	1d02      	adds	r2, r0, #4
 8006a4a:	060d      	lsls	r5, r1, #24
 8006a4c:	d50b      	bpl.n	8006a66 <_printf_i+0xa2>
 8006a4e:	6806      	ldr	r6, [r0, #0]
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	da03      	bge.n	8006a5e <_printf_i+0x9a>
 8006a56:	232d      	movs	r3, #45	@ 0x2d
 8006a58:	9a03      	ldr	r2, [sp, #12]
 8006a5a:	4276      	negs	r6, r6
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd4 <_printf_i+0x210>)
 8006a60:	270a      	movs	r7, #10
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	e018      	b.n	8006a98 <_printf_i+0xd4>
 8006a66:	6806      	ldr	r6, [r0, #0]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	0649      	lsls	r1, r1, #25
 8006a6c:	d5f1      	bpl.n	8006a52 <_printf_i+0x8e>
 8006a6e:	b236      	sxth	r6, r6
 8006a70:	e7ef      	b.n	8006a52 <_printf_i+0x8e>
 8006a72:	6808      	ldr	r0, [r1, #0]
 8006a74:	6819      	ldr	r1, [r3, #0]
 8006a76:	c940      	ldmia	r1!, {r6}
 8006a78:	0605      	lsls	r5, r0, #24
 8006a7a:	d402      	bmi.n	8006a82 <_printf_i+0xbe>
 8006a7c:	0640      	lsls	r0, r0, #25
 8006a7e:	d500      	bpl.n	8006a82 <_printf_i+0xbe>
 8006a80:	b2b6      	uxth	r6, r6
 8006a82:	6019      	str	r1, [r3, #0]
 8006a84:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <_printf_i+0x210>)
 8006a86:	270a      	movs	r7, #10
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	2a6f      	cmp	r2, #111	@ 0x6f
 8006a8c:	d100      	bne.n	8006a90 <_printf_i+0xcc>
 8006a8e:	3f02      	subs	r7, #2
 8006a90:	0023      	movs	r3, r4
 8006a92:	2200      	movs	r2, #0
 8006a94:	3343      	adds	r3, #67	@ 0x43
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	6863      	ldr	r3, [r4, #4]
 8006a9a:	60a3      	str	r3, [r4, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	db06      	blt.n	8006aae <_printf_i+0xea>
 8006aa0:	2104      	movs	r1, #4
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	9d03      	ldr	r5, [sp, #12]
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	6022      	str	r2, [r4, #0]
 8006aaa:	4333      	orrs	r3, r6
 8006aac:	d00c      	beq.n	8006ac8 <_printf_i+0x104>
 8006aae:	9d03      	ldr	r5, [sp, #12]
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	0039      	movs	r1, r7
 8006ab4:	f7f9 fbc0 	bl	8000238 <__aeabi_uidivmod>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	3d01      	subs	r5, #1
 8006abc:	5c5b      	ldrb	r3, [r3, r1]
 8006abe:	702b      	strb	r3, [r5, #0]
 8006ac0:	0033      	movs	r3, r6
 8006ac2:	0006      	movs	r6, r0
 8006ac4:	429f      	cmp	r7, r3
 8006ac6:	d9f3      	bls.n	8006ab0 <_printf_i+0xec>
 8006ac8:	2f08      	cmp	r7, #8
 8006aca:	d109      	bne.n	8006ae0 <_printf_i+0x11c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07db      	lsls	r3, r3, #31
 8006ad0:	d506      	bpl.n	8006ae0 <_printf_i+0x11c>
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dc02      	bgt.n	8006ae0 <_printf_i+0x11c>
 8006ada:	2330      	movs	r3, #48	@ 0x30
 8006adc:	3d01      	subs	r5, #1
 8006ade:	702b      	strb	r3, [r5, #0]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	1b5b      	subs	r3, r3, r5
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	9b07      	ldr	r3, [sp, #28]
 8006ae8:	0021      	movs	r1, r4
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	9805      	ldr	r0, [sp, #20]
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	aa09      	add	r2, sp, #36	@ 0x24
 8006af2:	f7ff fef7 	bl	80068e4 <_printf_common>
 8006af6:	3001      	adds	r0, #1
 8006af8:	d148      	bne.n	8006b8c <_printf_i+0x1c8>
 8006afa:	2001      	movs	r0, #1
 8006afc:	4240      	negs	r0, r0
 8006afe:	b00b      	add	sp, #44	@ 0x2c
 8006b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b02:	2220      	movs	r2, #32
 8006b04:	6809      	ldr	r1, [r1, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	2278      	movs	r2, #120	@ 0x78
 8006b0c:	4932      	ldr	r1, [pc, #200]	@ (8006bd8 <_printf_i+0x214>)
 8006b0e:	9104      	str	r1, [sp, #16]
 8006b10:	0021      	movs	r1, r4
 8006b12:	3145      	adds	r1, #69	@ 0x45
 8006b14:	700a      	strb	r2, [r1, #0]
 8006b16:	6819      	ldr	r1, [r3, #0]
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	c940      	ldmia	r1!, {r6}
 8006b1c:	0610      	lsls	r0, r2, #24
 8006b1e:	d402      	bmi.n	8006b26 <_printf_i+0x162>
 8006b20:	0650      	lsls	r0, r2, #25
 8006b22:	d500      	bpl.n	8006b26 <_printf_i+0x162>
 8006b24:	b2b6      	uxth	r6, r6
 8006b26:	6019      	str	r1, [r3, #0]
 8006b28:	07d3      	lsls	r3, r2, #31
 8006b2a:	d502      	bpl.n	8006b32 <_printf_i+0x16e>
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d001      	beq.n	8006b3a <_printf_i+0x176>
 8006b36:	2710      	movs	r7, #16
 8006b38:	e7aa      	b.n	8006a90 <_printf_i+0xcc>
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	4393      	bics	r3, r2
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	e7f8      	b.n	8006b36 <_printf_i+0x172>
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	680d      	ldr	r5, [r1, #0]
 8006b48:	1d10      	adds	r0, r2, #4
 8006b4a:	6949      	ldr	r1, [r1, #20]
 8006b4c:	6018      	str	r0, [r3, #0]
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	062e      	lsls	r6, r5, #24
 8006b52:	d501      	bpl.n	8006b58 <_printf_i+0x194>
 8006b54:	6019      	str	r1, [r3, #0]
 8006b56:	e002      	b.n	8006b5e <_printf_i+0x19a>
 8006b58:	066d      	lsls	r5, r5, #25
 8006b5a:	d5fb      	bpl.n	8006b54 <_printf_i+0x190>
 8006b5c:	8019      	strh	r1, [r3, #0]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9d03      	ldr	r5, [sp, #12]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	e7bf      	b.n	8006ae6 <_printf_i+0x122>
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	1d11      	adds	r1, r2, #4
 8006b6a:	6019      	str	r1, [r3, #0]
 8006b6c:	6815      	ldr	r5, [r2, #0]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	0028      	movs	r0, r5
 8006b72:	6862      	ldr	r2, [r4, #4]
 8006b74:	f000 f844 	bl	8006c00 <memchr>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d001      	beq.n	8006b80 <_printf_i+0x1bc>
 8006b7c:	1b40      	subs	r0, r0, r5
 8006b7e:	6060      	str	r0, [r4, #4]
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	2300      	movs	r3, #0
 8006b86:	9a03      	ldr	r2, [sp, #12]
 8006b88:	7013      	strb	r3, [r2, #0]
 8006b8a:	e7ac      	b.n	8006ae6 <_printf_i+0x122>
 8006b8c:	002a      	movs	r2, r5
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	9906      	ldr	r1, [sp, #24]
 8006b92:	9805      	ldr	r0, [sp, #20]
 8006b94:	9d07      	ldr	r5, [sp, #28]
 8006b96:	47a8      	blx	r5
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0ae      	beq.n	8006afa <_printf_i+0x136>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	d415      	bmi.n	8006bce <_printf_i+0x20a>
 8006ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba4:	68e0      	ldr	r0, [r4, #12]
 8006ba6:	4298      	cmp	r0, r3
 8006ba8:	daa9      	bge.n	8006afe <_printf_i+0x13a>
 8006baa:	0018      	movs	r0, r3
 8006bac:	e7a7      	b.n	8006afe <_printf_i+0x13a>
 8006bae:	0022      	movs	r2, r4
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	9906      	ldr	r1, [sp, #24]
 8006bb4:	9805      	ldr	r0, [sp, #20]
 8006bb6:	9e07      	ldr	r6, [sp, #28]
 8006bb8:	3219      	adds	r2, #25
 8006bba:	47b0      	blx	r6
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d09c      	beq.n	8006afa <_printf_i+0x136>
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dcf0      	bgt.n	8006bae <_printf_i+0x1ea>
 8006bcc:	e7e9      	b.n	8006ba2 <_printf_i+0x1de>
 8006bce:	2500      	movs	r5, #0
 8006bd0:	e7f7      	b.n	8006bc2 <_printf_i+0x1fe>
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	08006e11 	.word	0x08006e11
 8006bd8:	08006e22 	.word	0x08006e22

08006bdc <memmove>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4288      	cmp	r0, r1
 8006be0:	d902      	bls.n	8006be8 <memmove+0xc>
 8006be2:	188b      	adds	r3, r1, r2
 8006be4:	4298      	cmp	r0, r3
 8006be6:	d308      	bcc.n	8006bfa <memmove+0x1e>
 8006be8:	2300      	movs	r3, #0
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d007      	beq.n	8006bfe <memmove+0x22>
 8006bee:	5ccc      	ldrb	r4, [r1, r3]
 8006bf0:	54c4      	strb	r4, [r0, r3]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	e7f9      	b.n	8006bea <memmove+0xe>
 8006bf6:	5c8b      	ldrb	r3, [r1, r2]
 8006bf8:	5483      	strb	r3, [r0, r2]
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	d2fb      	bcs.n	8006bf6 <memmove+0x1a>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <memchr>:
 8006c00:	b2c9      	uxtb	r1, r1
 8006c02:	1882      	adds	r2, r0, r2
 8006c04:	4290      	cmp	r0, r2
 8006c06:	d101      	bne.n	8006c0c <memchr+0xc>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
 8006c0c:	7803      	ldrb	r3, [r0, #0]
 8006c0e:	428b      	cmp	r3, r1
 8006c10:	d0fb      	beq.n	8006c0a <memchr+0xa>
 8006c12:	3001      	adds	r0, #1
 8006c14:	e7f6      	b.n	8006c04 <memchr+0x4>

08006c16 <_realloc_r>:
 8006c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c18:	0006      	movs	r6, r0
 8006c1a:	000c      	movs	r4, r1
 8006c1c:	0015      	movs	r5, r2
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d105      	bne.n	8006c2e <_realloc_r+0x18>
 8006c22:	0011      	movs	r1, r2
 8006c24:	f7ff fb76 	bl	8006314 <_malloc_r>
 8006c28:	0004      	movs	r4, r0
 8006c2a:	0020      	movs	r0, r4
 8006c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d103      	bne.n	8006c3a <_realloc_r+0x24>
 8006c32:	f7ff fcaf 	bl	8006594 <_free_r>
 8006c36:	002c      	movs	r4, r5
 8006c38:	e7f7      	b.n	8006c2a <_realloc_r+0x14>
 8006c3a:	f000 f81c 	bl	8006c76 <_malloc_usable_size_r>
 8006c3e:	0007      	movs	r7, r0
 8006c40:	4285      	cmp	r5, r0
 8006c42:	d802      	bhi.n	8006c4a <_realloc_r+0x34>
 8006c44:	0843      	lsrs	r3, r0, #1
 8006c46:	42ab      	cmp	r3, r5
 8006c48:	d3ef      	bcc.n	8006c2a <_realloc_r+0x14>
 8006c4a:	0029      	movs	r1, r5
 8006c4c:	0030      	movs	r0, r6
 8006c4e:	f7ff fb61 	bl	8006314 <_malloc_r>
 8006c52:	9001      	str	r0, [sp, #4]
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d101      	bne.n	8006c5c <_realloc_r+0x46>
 8006c58:	9c01      	ldr	r4, [sp, #4]
 8006c5a:	e7e6      	b.n	8006c2a <_realloc_r+0x14>
 8006c5c:	002a      	movs	r2, r5
 8006c5e:	42bd      	cmp	r5, r7
 8006c60:	d900      	bls.n	8006c64 <_realloc_r+0x4e>
 8006c62:	003a      	movs	r2, r7
 8006c64:	0021      	movs	r1, r4
 8006c66:	9801      	ldr	r0, [sp, #4]
 8006c68:	f7ff fc8a 	bl	8006580 <memcpy>
 8006c6c:	0021      	movs	r1, r4
 8006c6e:	0030      	movs	r0, r6
 8006c70:	f7ff fc90 	bl	8006594 <_free_r>
 8006c74:	e7f0      	b.n	8006c58 <_realloc_r+0x42>

08006c76 <_malloc_usable_size_r>:
 8006c76:	1f0b      	subs	r3, r1, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	1f18      	subs	r0, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da01      	bge.n	8006c84 <_malloc_usable_size_r+0xe>
 8006c80:	580b      	ldr	r3, [r1, r0]
 8006c82:	18c0      	adds	r0, r0, r3
 8006c84:	4770      	bx	lr
	...

08006c88 <_init>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr

08006c94 <_fini>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr
