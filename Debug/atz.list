
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005a2c  08005a2c  00006a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b00  08005b00  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005b08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000060  08005b68  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000039c  08005b68  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011719  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f44  00000000  00000000  000187a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a23  00000000  00000000  0001d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014844  00000000  00000000  00033bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865f3  00000000  00000000  00048432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cea25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  000cea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d2300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a14 	.word	0x08005a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005a14 	.word	0x08005a14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f000 fefc 	bl	800127c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 ff0e 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f005 f9e7 	bl	800587c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_GPIO_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fab9 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2220      	movs	r2, #32
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 f92b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2220      	movs	r2, #32
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <MX_GPIO_Init+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 f918 	bl	8001778 <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	@ 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 8000562:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_I2C1_Init+0x74>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fa8b 	bl	8001ab0 <HAL_I2C_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 fb01 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_I2C1_Init+0x74>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fb28 	bl	8001bfc <HAL_I2CEx_ConfigAnalogFilter>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 faf8 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <MX_I2C1_Init+0x74>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fb6b 	bl	8001c94 <HAL_I2CEx_ConfigDigitalFilter>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 faef 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	40005400 	.word	0x40005400
 80005d4:	00000202 	.word	0x00000202

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f005 f946 	bl	800587c <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	@ 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 f89d 	bl	8001778 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	@ 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	50000400 	.word	0x50000400

08000660 <HARDWARE_PWR_SleepOptimisation>:
;	Description:	Set Unused Pins for Low Power Optimization
;	Inputs: 	 	Nothing
;	Returns:		Nothing
*********************************************************************************************/
void HARDWARE_PWR_SleepOptimisation( void )
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f005 f904 	bl	800587c <memset>
	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 8000676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 800067a:	2102      	movs	r1, #2
 800067c:	430a      	orrs	r2, r1
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <HARDWARE_PWR_SleepOptimisation+0xd4>)
 8000682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000684:	2202      	movs	r2, #2
 8000686:	4013      	ands	r3, r2
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_5  ;
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2223      	movs	r2, #35	@ 0x23
 8000690:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f001 f864 	bl	8001778 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 , GPIO_PIN_RESET);
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	2123      	movs	r1, #35	@ 0x23
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f9dc 	bl	8001a74 <HAL_GPIO_WritePin>


	/* Set Pins as Analog Inputs */
	GPIO_InitStruct.Pin 			= GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10  | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <HARDWARE_PWR_SleepOptimisation+0xdc>)
 80006c0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2203      	movs	r2, #3
 80006c6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	1d3a      	adds	r2, r7, #4
 80006d6:	23a0      	movs	r3, #160	@ 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f84b 	bl	8001778 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= GPIO_PIN_2 |GPIO_PIN_3 | GPIO_PIN_4  | GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12  | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <HARDWARE_PWR_SleepOptimisation+0xe0>)
 80006e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2203      	movs	r2, #3
 80006ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <HARDWARE_PWR_SleepOptimisation+0xd8>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f001 f839 	bl	8001778 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 			= GPIO_PIN_0 | GPIO_PIN_1 |  GPIO_PIN_2 |GPIO_PIN_3 | GPIO_PIN_4  | GPIO_PIN_5  |  GPIO_PIN_6 | GPIO_PIN_7  | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12  | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HARDWARE_PWR_SleepOptimisation+0xe4>)
 800070a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode 			= GPIO_MODE_ANALOG;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2203      	movs	r2, #3
 8000710:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull 			= GPIO_NOPULL;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed 			= GPIO_SPEED_FREQ_LOW;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HARDWARE_PWR_SleepOptimisation+0xe8>)
 8000722:	0019      	movs	r1, r3
 8000724:	0010      	movs	r0, r2
 8000726:	f001 f827 	bl	8001778 <HAL_GPIO_Init>

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b006      	add	sp, #24
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	40021000 	.word	0x40021000
 8000738:	50000400 	.word	0x50000400
 800073c:	00009fff 	.word	0x00009fff
 8000740:	0000ffdc 	.word	0x0000ffdc
 8000744:	0000ffff 	.word	0x0000ffff
 8000748:	50000800 	.word	0x50000800

0800074c <HAL_RTCEx_WakeUpTimerEventCallback>:

/* Add RTC wake-up interrupt handler */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Clear wake-up flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	22ff      	movs	r2, #255	@ 0xff
 800075c:	401a      	ands	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4905      	ldr	r1, [pc, #20]	@ (8000778 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8000764:	430a      	orrs	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
  device_state = DEVICE_COLLECT_DATA;
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 800076a:	2202      	movs	r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	fffffb7f 	.word	0xfffffb7f
 800077c:	20000000 	.word	0x20000000

08000780 <enter_low_power_mode>:


/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enter_low_power_mode(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	HARDWARE_PWR_SleepOptimisation();
 8000784:	f7ff ff6c 	bl	8000660 <HARDWARE_PWR_SleepOptimisation>

	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <enter_low_power_mode+0x58>)
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fe0a 	bl	80033a4 <HAL_RTCEx_DeactivateWakeUpTimer>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <enter_low_power_mode+0x18>
	    {
	        Error_Handler();
 8000794:	f000 fa06 	bl	8000ba4 <Error_Handler>
	    }

	    /* Configure RTC wake‑up timer for 60 seconds */
	    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <enter_low_power_mode+0x58>)
 800079a:	2204      	movs	r2, #4
 800079c:	213b      	movs	r1, #59	@ 0x3b
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fd28 	bl	80031f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <enter_low_power_mode+0x2c>
	    {
	        Error_Handler();
 80007a8:	f000 f9fc 	bl	8000ba4 <Error_Handler>
	    }

	/* Configure RTC wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <enter_low_power_mode+0x58>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	213b      	movs	r1, #59	@ 0x3b
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fd1e 	bl	80031f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <enter_low_power_mode+0x40>
	{
	Error_Handler();
 80007bc:	f000 f9f2 	bl	8000ba4 <Error_Handler>
	}

	// Enter Stop Mode with low power regulator
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80007c0:	2101      	movs	r1, #1
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fab2 	bl	8001d2c <HAL_PWR_EnterSTOPMode>

	// When we wake up, execution continues here
	SystemClock_Config();
 80007c8:	f000 f93c 	bl	8000a44 <SystemClock_Config>
	exit_low_power_mode();
 80007cc:	f000 f806 	bl	80007dc <exit_low_power_mode>
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	20000110 	.word	0x20000110

080007dc <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <exit_low_power_mode+0x9c>)
 80007e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <exit_low_power_mode+0x9c>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <exit_low_power_mode+0x9c>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <exit_low_power_mode+0x9c>)
 80007fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000800:	2102      	movs	r1, #2
 8000802:	430a      	orrs	r2, r1
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080a:	2202      	movs	r2, #2
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000818:	2104      	movs	r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000822:	2204      	movs	r2, #4
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <exit_low_power_mode+0x9c>)
 800082c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0389      	lsls	r1, r1, #14
 8000834:	430a      	orrs	r2, r1
 8000836:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <exit_low_power_mode+0x9c>)
 800083a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <exit_low_power_mode+0x9c>)
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	02c9      	lsls	r1, r1, #11
 8000842:	430a      	orrs	r2, r1
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <exit_low_power_mode+0x9c>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <exit_low_power_mode+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs (this will restore PB5 to its normal configuration)
    MX_GPIO_Init();
 800085e:	f7ff fe1b 	bl	8000498 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000862:	f000 facd 	bl	8000e00 <MX_LPUART1_UART_Init>
    MX_DMA_Init();
 8000866:	f7ff fdf9 	bl	800045c <MX_DMA_Init>
    device_state = DEVICE_COLLECT_DATA;
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <exit_low_power_mode+0xa0>)
 800086c:	2202      	movs	r2, #2
 800086e:	701a      	strb	r2, [r3, #0]
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b004      	add	sp, #16
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	20000000 	.word	0x20000000

08000880 <cb_WAKE>:


void cb_WAKE(const char* str)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  __NOP();
 8000888:	46c0      	nop			@ (mov r8, r8)
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}

08000892 <cb_OK>:
void cb_OK(const char* str)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  __NOP();
 800089a:	46c0      	nop			@ (mov r8, r8)
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <cb_JOIN>:
void cb_JOIN(const char* str)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	switch (str[7]) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3307      	adds	r3, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b46      	cmp	r3, #70	@ 0x46
 80008b4:	d008      	beq.n	80008c8 <cb_JOIN+0x24>
 80008b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80008b8:	d10a      	bne.n	80008d0 <cb_JOIN+0x2c>
		case 'O':
			joined = true;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <cb_JOIN+0x40>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
			device_state = DEVICE_COLLECT_DATA;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <cb_JOIN+0x44>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	701a      	strb	r2, [r3, #0]
			break;
 80008c6:	e004      	b.n	80008d2 <cb_JOIN+0x2e>
		case 'F':
			joined = false;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <cb_JOIN+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e000      	b.n	80008d2 <cb_JOIN+0x2e>
		default:
			__NOP();
 80008d0:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_Delay(500);
 80008d2:	23fa      	movs	r3, #250	@ 0xfa
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fc00 	bl	80010dc <HAL_Delay>
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000010c 	.word	0x2000010c
 80008e8:	20000000 	.word	0x20000000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fb83 	bl	8000ffc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f8a5 	bl	8000a44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fdcd 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 80008fe:	f7ff fdad 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 8000902:	f7ff fe29 	bl	8000558 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000906:	f000 fa7b 	bl	8000e00 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800090a:	f000 f951 	bl	8000bb0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 800090e:	4b41      	ldr	r3, [pc, #260]	@ (8000a14 <main+0x128>)
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	4940      	ldr	r1, [pc, #256]	@ (8000a18 <main+0x12c>)
 8000916:	4841      	ldr	r0, [pc, #260]	@ (8000a1c <main+0x130>)
 8000918:	f004 fc7c 	bl	8005214 <ATC_Init>
  ATC_SetEvents(&lora, events);
 800091c:	4a40      	ldr	r2, [pc, #256]	@ (8000a20 <main+0x134>)
 800091e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a1c <main+0x130>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f004 fd2d 	bl	8005382 <ATC_SetEvents>
  HAL_Delay(10000);
 8000928:	4b3e      	ldr	r3, [pc, #248]	@ (8000a24 <main+0x138>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fbd6 	bl	80010dc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int resp = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  char* ATSEND_Result = NULL;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  uint32_t last_command_time = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]

  while(1)
  {
      ATC_Loop(&lora);
 800093c:	4b37      	ldr	r3, [pc, #220]	@ (8000a1c <main+0x130>)
 800093e:	0018      	movs	r0, r3
 8000940:	f004 fd57 	bl	80053f2 <ATC_Loop>
      
      switch (device_state)
 8000944:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <main+0x13c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b03      	cmp	r3, #3
 800094c:	d005      	beq.n	800095a <main+0x6e>
 800094e:	dcf5      	bgt.n	800093c <main+0x50>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d036      	beq.n	80009c2 <main+0xd6>
 8000954:	2b02      	cmp	r3, #2
 8000956:	d037      	beq.n	80009c8 <main+0xdc>
 8000958:	e05a      	b.n	8000a10 <main+0x124>
      {
      case LORAWAN_JOIN:
          if (HAL_GetTick() - last_command_time > 10000 && !joined)
 800095a:	f000 fbb5 	bl	80010c8 <HAL_GetTick>
 800095e:	0002      	movs	r2, r0
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <main+0x138>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d951      	bls.n	8000a0e <main+0x122>
 800096a:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <main+0x140>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	4053      	eors	r3, r2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d04a      	beq.n	8000a0e <main+0x122>
          {
        	  resp = ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000978:	1d3c      	adds	r4, r7, #4
 800097a:	23fa      	movs	r3, #250	@ 0xfa
 800097c:	009a      	lsls	r2, r3, #2
 800097e:	492c      	ldr	r1, [pc, #176]	@ (8000a30 <main+0x144>)
 8000980:	4826      	ldr	r0, [pc, #152]	@ (8000a1c <main+0x130>)
 8000982:	4b2c      	ldr	r3, [pc, #176]	@ (8000a34 <main+0x148>)
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <main+0x14c>)
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	0023      	movs	r3, r4
 8000990:	f004 fd3f 	bl	8005412 <ATC_SendReceive>
 8000994:	0003      	movs	r3, r0
 8000996:	60bb      	str	r3, [r7, #8]
              resp = ATC_SendReceive(&lora, "AT+JOIN\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000998:	1d3c      	adds	r4, r7, #4
 800099a:	23fa      	movs	r3, #250	@ 0xfa
 800099c:	009a      	lsls	r2, r3, #2
 800099e:	4927      	ldr	r1, [pc, #156]	@ (8000a3c <main+0x150>)
 80009a0:	481e      	ldr	r0, [pc, #120]	@ (8000a1c <main+0x130>)
 80009a2:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <main+0x148>)
 80009a4:	9302      	str	r3, [sp, #8]
 80009a6:	2301      	movs	r3, #1
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <main+0x14c>)
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	0023      	movs	r3, r4
 80009b0:	f004 fd2f 	bl	8005412 <ATC_SendReceive>
 80009b4:	0003      	movs	r3, r0
 80009b6:	60bb      	str	r3, [r7, #8]
              last_command_time = HAL_GetTick();
 80009b8:	f000 fb86 	bl	80010c8 <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	60fb      	str	r3, [r7, #12]
          }
	  break;
 80009c0:	e025      	b.n	8000a0e <main+0x122>
	  case DEVICE_SLEEP:
		  enter_low_power_mode();
 80009c2:	f7ff fedd 	bl	8000780 <enter_low_power_mode>
	  break;
 80009c6:	e023      	b.n	8000a10 <main+0x124>
	  case DEVICE_COLLECT_DATA:
		ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009c8:	1d3c      	adds	r4, r7, #4
 80009ca:	23fa      	movs	r3, #250	@ 0xfa
 80009cc:	009a      	lsls	r2, r3, #2
 80009ce:	4918      	ldr	r1, [pc, #96]	@ (8000a30 <main+0x144>)
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <main+0x130>)
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <main+0x148>)
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <main+0x14c>)
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	0023      	movs	r3, r4
 80009e0:	f004 fd17 	bl	8005412 <ATC_SendReceive>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f000 fb79 	bl	80010dc <HAL_Delay>
		ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009ea:	1d3c      	adds	r4, r7, #4
 80009ec:	23fa      	movs	r3, #250	@ 0xfa
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	4913      	ldr	r1, [pc, #76]	@ (8000a40 <main+0x154>)
 80009f2:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <main+0x130>)
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <main+0x148>)
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <main+0x14c>)
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	0023      	movs	r3, r4
 8000a02:	f004 fd06 	bl	8005412 <ATC_SendReceive>
		device_state = DEVICE_SLEEP;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <main+0x13c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
	  break;
 8000a0c:	e000      	b.n	8000a10 <main+0x124>
	  break;
 8000a0e:	46c0      	nop			@ (mov r8, r8)
      ATC_Loop(&lora);
 8000a10:	e794      	b.n	800093c <main+0x50>
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	08005a40 	.word	0x08005a40
 8000a18:	20000138 	.word	0x20000138
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	08005a6c 	.word	0x08005a6c
 8000a24:	00002710 	.word	0x00002710
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	2000010c 	.word	0x2000010c
 8000a30:	08005a48 	.word	0x08005a48
 8000a34:	08005a34 	.word	0x08005a34
 8000a38:	00000bb8 	.word	0x00000bb8
 8000a3c:	08005a50 	.word	0x08005a50
 8000a40:	08005a5c 	.word	0x08005a5c

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b09f      	sub	sp, #124	@ 0x7c
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	2440      	movs	r4, #64	@ 0x40
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2338      	movs	r3, #56	@ 0x38
 8000a52:	001a      	movs	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f004 ff11 	bl	800587c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5a:	232c      	movs	r3, #44	@ 0x2c
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f004 ff09 	bl	800587c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2328      	movs	r3, #40	@ 0x28
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f004 ff02 	bl	800587c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <SystemClock_Config+0xfc>)
 8000a7e:	401a      	ands	r2, r3
 8000a80:	4b2e      	ldr	r3, [pc, #184]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	0109      	lsls	r1, r1, #4
 8000a86:	430a      	orrs	r2, r1
 8000a88:	601a      	str	r2, [r3, #0]
  
  // Change to Scale 3 for lowest power:
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <SystemClock_Config+0xf8>)
 8000a90:	21c0      	movs	r1, #192	@ 0xc0
 8000a92:	0149      	lsls	r1, r1, #5
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]

  // Also change MSI range to match Scale 3 requirements
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0; // 65.536 kHz (matches your low power config)
 8000a98:	0021      	movs	r1, r4
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2218      	movs	r2, #24
 8000aa4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	0212      	lsls	r2, r2, #8
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 f98b 	bl	8001de4 <HAL_RCC_OscConfig>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ad2:	f000 f867 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	212c      	movs	r1, #44	@ 0x2c
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	220f      	movs	r2, #15
 8000adc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fd46 	bl	800258c <HAL_RCC_ClockConfig>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b04:	f000 f84e 	bl	8000ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	222c      	movs	r2, #44	@ 0x2c
 8000b0c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	0292      	lsls	r2, r2, #10
 8000b20:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 ff35 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b2e:	f000 f839 	bl	8000ba4 <Error_Handler>
  }
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b01f      	add	sp, #124	@ 0x7c
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	40007000 	.word	0x40007000
 8000b40:	ffffe7ff 	.word	0xffffe7ff

08000b44 <HAL_UARTEx_RxEventCallback>:
  __NOP();

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	1cbb      	adds	r3, r7, #2
 8000b50:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0x30>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d106      	bne.n	8000b6a <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 8000b5c:	1cbb      	adds	r3, r7, #2
 8000b5e:	881a      	ldrh	r2, [r3, #0]
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_UARTEx_RxEventCallback+0x34>)
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f004 fd4e 	bl	8005606 <ATC_IdleLineCallback>
  }
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	40004800 	.word	0x40004800
 8000b78:	200000d0 	.word	0x200000d0

08000b7c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <HAL_UART_ErrorCallback+0x24>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d104      	bne.n	8000b98 <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4252      	negs	r2, r2
 8000b96:	621a      	str	r2, [r3, #32]
  }
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef sTime = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2314      	movs	r3, #20
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f004 fe5c 	bl	800587c <memset>
	RTC_DateTypeDef sDate = {0};
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]

	/* Initialize RTC */
	hrtc.Instance = RTC;
 8000bca:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bcc:	4a31      	ldr	r2, [pc, #196]	@ (8000c94 <MX_RTC_Init+0xe4>)
 8000bce:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127; /* LSI ~32 kHz, 128 gives ~250 Hz */
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bd8:	227f      	movs	r2, #127	@ 0x7f
 8000bda:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 249;  /* 250 Hz / 250 = 1 Hz */
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bde:	22f9      	movs	r2, #249	@ 0xf9
 8000be0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]

	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 f86a 	bl	8002cd0 <HAL_RTC_Init>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_RTC_Init+0x54>
	{
	Error_Handler();
 8000c00:	f7ff ffd0 	bl	8000ba4 <Error_Handler>
	}

	/* Set initial time and date (optional, for completeness) */
	sTime.Hours = 0;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c22:	1d39      	adds	r1, r7, #4
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 f8ed 	bl	8002e08 <HAL_RTC_SetTime>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_RTC_Init+0x86>
	{
	Error_Handler();
 8000c32:	f7ff ffb7 	bl	8000ba4 <Error_Handler>
	}

	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c36:	003b      	movs	r3, r7
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	705a      	strb	r2, [r3, #1]
	sDate.Date = 1;
 8000c42:	003b      	movs	r3, r7
 8000c44:	2201      	movs	r2, #1
 8000c46:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0;
 8000c48:	003b      	movs	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c4e:	0039      	movs	r1, r7
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 f981 	bl	8002f5c <HAL_RTC_SetDate>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_RTC_Init+0xb2>
	{
	Error_Handler();
 8000c5e:	f7ff ffa1 	bl	8000ba4 <Error_Handler>
	}

	/* Enable wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_RTC_Init+0xe0>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	213b      	movs	r1, #59	@ 0x3b
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fac3 	bl	80031f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_RTC_Init+0xc6>
	{
	Error_Handler();
 8000c72:	f7ff ff97 	bl	8000ba4 <Error_Handler>
	}

	/* Enable RTC interrupt in NVIC */
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 fafe 	bl	800127c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 fb10 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b006      	add	sp, #24
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000110 	.word	0x20000110
 8000c94:	40002800 	.word	0x40002800

08000c98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_RTC_MspInit+0x38>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_RTC_MspInit+0x3c>)
 8000cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_RTC_MspInit+0x3c>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	02c9      	lsls	r1, r1, #11
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f000 fadd 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 faef 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40002800 	.word	0x40002800
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <HAL_MspInit+0x24>)
 8000cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x24>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <HAL_MspInit+0x24>)
 8000cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_MspInit+0x24>)
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	0549      	lsls	r1, r1, #21
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f9bc 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <RTC_IRQHandler+0x14>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 fb96 	bl	800346c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	20000110 	.word	0x20000110

08000d4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 fc29 	bl	80015aa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fc25 	bl	80015aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000208 	.word	0x20000208
 8000d6c:	200001c0 	.word	0x200001c0

08000d70 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <RNG_LPUART1_IRQHandler+0x14>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fda0 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	20000138 	.word	0x20000138

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f004 fda4 	bl	8005904 <__errno>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	18d2      	adds	r2, r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b006      	add	sp, #24
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20005000 	.word	0x20005000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000134 	.word	0x20000134
 8000df0:	200003a0 	.word	0x200003a0

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <MX_LPUART1_UART_Init+0x58>)
 8000e08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e0c:	22e1      	movs	r2, #225	@ 0xe1
 8000e0e:	0252      	lsls	r2, r2, #9
 8000e10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <MX_LPUART1_UART_Init+0x54>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 fb44 	bl	80034cc <HAL_UART_Init>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f7ff feac 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	20000138 	.word	0x20000138
 8000e58:	40004800 	.word	0x40004800

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	240c      	movs	r4, #12
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f004 fd04 	bl	800587c <memset>
  if(uartHandle->Instance==LPUART1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a45      	ldr	r2, [pc, #276]	@ (8000f90 <HAL_UART_MspInit+0x134>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d000      	beq.n	8000e80 <HAL_UART_MspInit+0x24>
 8000e7e:	e083      	b.n	8000f88 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e80:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e84:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000e86:	2180      	movs	r1, #128	@ 0x80
 8000e88:	02c9      	lsls	r1, r1, #11
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <HAL_UART_MspInit+0x138>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea6:	0021      	movs	r1, r4
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	187a      	adds	r2, r7, r1
 8000ec8:	23a0      	movs	r3, #160	@ 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 fc52 	bl	8001778 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000ed6:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <HAL_UART_MspInit+0x140>)
 8000ed8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000edc:	2205      	movs	r2, #5
 8000ede:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 f9e7 	bl	80012e0 <HAL_DMA_Init>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000f16:	f7ff fe45 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f1e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_UART_MspInit+0x13c>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f28:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f2e:	2205      	movs	r2, #5
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f9be 	bl	80012e0 <HAL_DMA_Init>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f68:	f7ff fe1c 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f70:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	201d      	movs	r0, #29
 8000f7e:	f000 f97d 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000f82:	201d      	movs	r0, #29
 8000f84:	f000 f98f 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b009      	add	sp, #36	@ 0x24
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	40004800 	.word	0x40004800
 8000f94:	40021000 	.word	0x40021000
 8000f98:	200001c0 	.word	0x200001c0
 8000f9c:	40020030 	.word	0x40020030
 8000fa0:	20000208 	.word	0x20000208
 8000fa4:	4002001c 	.word	0x4002001c

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f7ff ff22 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f004 fc9b 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fc87 	bl	80008ec <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
   ldr   r0, =_estack
 8000fe0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fec:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 8000ff0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ff4:	2000039c 	.word	0x2000039c

08000ff8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_COMP_IRQHandler>
	...

08000ffc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x3c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_Init+0x3c>)
 800100e:	2140      	movs	r1, #64	@ 0x40
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f811 	bl	800103c <HAL_InitTick>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d003      	beq.n	8001026 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e001      	b.n	800102a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001026:	f7ff fe57 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_InitTick+0x5c>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_InitTick+0x60>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
 800104e:	23fa      	movs	r3, #250	@ 0xfa
 8001050:	0098      	lsls	r0, r3, #2
 8001052:	f7ff f861 	bl	8000118 <__udivsi3>
 8001056:	0003      	movs	r3, r0
 8001058:	0019      	movs	r1, r3
 800105a:	0020      	movs	r0, r4
 800105c:	f7ff f85c 	bl	8000118 <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f92f 	bl	80012c6 <HAL_SYSTICK_Config>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00f      	b.n	8001090 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d80b      	bhi.n	800108e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
 800107c:	2200      	movs	r2, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f8fc 	bl	800127c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_InitTick+0x64>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b003      	add	sp, #12
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	20000004 	.word	0x20000004
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_IncTick+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	001a      	movs	r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_IncTick+0x20>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	18d2      	adds	r2, r2, r3
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <HAL_IncTick+0x20>)
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000250 	.word	0x20000250

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b02      	ldr	r3, [pc, #8]	@ (80010d8 <HAL_GetTick+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	20000250 	.word	0x20000250

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fff0 	bl	80010c8 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	001a      	movs	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	f7ff ffe0 	bl	80010c8 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	2000000c 	.word	0x2000000c

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b7f      	cmp	r3, #127	@ 0x7f
 8001136:	d809      	bhi.n	800114c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	001a      	movs	r2, r3
 800113e:	231f      	movs	r3, #31
 8001140:	401a      	ands	r2, r3
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__NVIC_EnableIRQ+0x30>)
 8001144:	2101      	movs	r1, #1
 8001146:	4091      	lsls	r1, r2
 8001148:	000a      	movs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
  }
}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b7f      	cmp	r3, #127	@ 0x7f
 800116c:	d828      	bhi.n	80011c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116e:	4a2f      	ldr	r2, [pc, #188]	@ (800122c <__NVIC_SetPriority+0xd4>)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	33c0      	adds	r3, #192	@ 0xc0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	589b      	ldr	r3, [r3, r2]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	@ 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	481f      	ldr	r0, [pc, #124]	@ (800122c <__NVIC_SetPriority+0xd4>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	33c0      	adds	r3, #192	@ 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011be:	e031      	b.n	8001224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <__NVIC_SetPriority+0xd8>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0019      	movs	r1, r3
 80011c8:	230f      	movs	r3, #15
 80011ca:	400b      	ands	r3, r1
 80011cc:	3b08      	subs	r3, #8
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3306      	adds	r3, #6
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1dfa      	adds	r2, r7, #7
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	400a      	ands	r2, r1
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	21ff      	movs	r1, #255	@ 0xff
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	22ff      	movs	r2, #255	@ 0xff
 80011f8:	401a      	ands	r2, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	2303      	movs	r3, #3
 8001202:	4003      	ands	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	001c      	movs	r4, r3
 8001210:	230f      	movs	r3, #15
 8001212:	4023      	ands	r3, r4
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	430a      	orrs	r2, r1
 800121a:	3306      	adds	r3, #6
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18c3      	adds	r3, r0, r3
 8001220:	3304      	adds	r3, #4
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b003      	add	sp, #12
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	045b      	lsls	r3, r3, #17
 8001244:	429a      	cmp	r2, r3
 8001246:	d301      	bcc.n	800124c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <SysTick_Config+0x44>)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3a01      	subs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2103      	movs	r1, #3
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff7c 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x44>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x44>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	0002      	movs	r2, r0
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ffaf 	bl	8001234 <SysTick_Config>
 80012d6:	0003      	movs	r3, r0
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e061      	b.n	80013b6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a32      	ldr	r2, [pc, #200]	@ (80013c0 <HAL_DMA_Init+0xe0>)
 80012f8:	4694      	mov	ip, r2
 80012fa:	4463      	add	r3, ip
 80012fc:	2114      	movs	r1, #20
 80012fe:	0018      	movs	r0, r3
 8001300:	f7fe ff0a 	bl	8000118 <__udivsi3>
 8001304:	0003      	movs	r3, r0
 8001306:	009a      	lsls	r2, r3, #2
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <HAL_DMA_Init+0xe4>)
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2225      	movs	r2, #37	@ 0x25
 8001316:	2102      	movs	r1, #2
 8001318:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <HAL_DMA_Init+0xe8>)
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	01db      	lsls	r3, r3, #7
 8001368:	429a      	cmp	r2, r3
 800136a:	d018      	beq.n	800139e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_DMA_Init+0xec>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	211c      	movs	r1, #28
 8001376:	400b      	ands	r3, r1
 8001378:	210f      	movs	r1, #15
 800137a:	4099      	lsls	r1, r3
 800137c:	000b      	movs	r3, r1
 800137e:	43d9      	mvns	r1, r3
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_DMA_Init+0xec>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_DMA_Init+0xec>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	201c      	movs	r0, #28
 8001394:	4003      	ands	r3, r0
 8001396:	409a      	lsls	r2, r3
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_DMA_Init+0xec>)
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2225      	movs	r2, #37	@ 0x25
 80013a8:	2101      	movs	r1, #1
 80013aa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	@ 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	bffdfff8 	.word	0xbffdfff8
 80013c4:	40020000 	.word	0x40020000
 80013c8:	ffff800f 	.word	0xffff800f
 80013cc:	400200a8 	.word	0x400200a8

080013d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013de:	2317      	movs	r3, #23
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2224      	movs	r2, #36	@ 0x24
 80013ea:	5c9b      	ldrb	r3, [r3, r2]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_DMA_Start_IT+0x24>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e04f      	b.n	8001494 <HAL_DMA_Start_IT+0xc4>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2224      	movs	r2, #36	@ 0x24
 80013f8:	2101      	movs	r1, #1
 80013fa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2225      	movs	r2, #37	@ 0x25
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d13a      	bne.n	800147e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2225      	movs	r2, #37	@ 0x25
 800140c:	2102      	movs	r1, #2
 800140e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	438a      	bics	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f974 	bl	800171a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	210e      	movs	r1, #14
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00f      	b.n	800146c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2104      	movs	r1, #4
 8001458:	438a      	bics	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	210a      	movs	r1, #10
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e007      	b.n	800148e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2224      	movs	r2, #36	@ 0x24
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001486:	2317      	movs	r3, #23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800148e:	2317      	movs	r3, #23
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a4:	230f      	movs	r3, #15
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2225      	movs	r2, #37	@ 0x25
 80014b0:	5c9b      	ldrb	r3, [r3, r2]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2224      	movs	r2, #36	@ 0x24
 80014c2:	2100      	movs	r1, #0
 80014c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e024      	b.n	8001514 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	210e      	movs	r1, #14
 80014d6:	438a      	bics	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	221c      	movs	r2, #28
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2101      	movs	r1, #1
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2225      	movs	r2, #37	@ 0x25
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2224      	movs	r2, #36	@ 0x24
 800150a:	2100      	movs	r1, #0
 800150c:	5499      	strb	r1, [r3, r2]

    return status;
 800150e:	230f      	movs	r3, #15
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001524:	210f      	movs	r1, #15
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2225      	movs	r2, #37	@ 0x25
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d006      	beq.n	8001546 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2204      	movs	r2, #4
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e02a      	b.n	800159c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	210e      	movs	r1, #14
 8001552:	438a      	bics	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	438a      	bics	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	221c      	movs	r2, #28
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	2101      	movs	r1, #1
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2225      	movs	r2, #37	@ 0x25
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2224      	movs	r2, #36	@ 0x24
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	0010      	movs	r0, r2
 800159a:	4798      	blx	r3
    }
  }
  return status;
 800159c:	230f      	movs	r3, #15
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	781b      	ldrb	r3, [r3, #0]
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	221c      	movs	r2, #28
 80015c8:	4013      	ands	r3, r2
 80015ca:	2204      	movs	r2, #4
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	d026      	beq.n	8001624 <HAL_DMA_IRQHandler+0x7a>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d022      	beq.n	8001624 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2220      	movs	r2, #32
 80015e6:	4013      	ands	r3, r2
 80015e8:	d107      	bne.n	80015fa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2104      	movs	r1, #4
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	221c      	movs	r2, #28
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	2104      	movs	r1, #4
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	2b00      	cmp	r3, #0
 8001614:	d100      	bne.n	8001618 <HAL_DMA_IRQHandler+0x6e>
 8001616:	e071      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	0010      	movs	r0, r2
 8001620:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001622:	e06b      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001628:	221c      	movs	r2, #28
 800162a:	4013      	ands	r3, r2
 800162c:	2202      	movs	r2, #2
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	d02d      	beq.n	8001694 <HAL_DMA_IRQHandler+0xea>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d029      	beq.n	8001694 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	4013      	ands	r3, r2
 800164a:	d10b      	bne.n	8001664 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	210a      	movs	r1, #10
 8001658:	438a      	bics	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2225      	movs	r2, #37	@ 0x25
 8001660:	2101      	movs	r1, #1
 8001662:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	221c      	movs	r2, #28
 800166a:	401a      	ands	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2102      	movs	r1, #2
 8001672:	4091      	lsls	r1, r2
 8001674:	000a      	movs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	@ 0x24
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d039      	beq.n	80016fc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	0010      	movs	r0, r2
 8001690:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001692:	e033      	b.n	80016fc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	221c      	movs	r2, #28
 800169a:	4013      	ands	r3, r2
 800169c:	2208      	movs	r2, #8
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	d02a      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2208      	movs	r2, #8
 80016ac:	4013      	ands	r3, r2
 80016ae:	d026      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	210e      	movs	r1, #14
 80016bc:	438a      	bics	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	221c      	movs	r2, #28
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	2101      	movs	r1, #1
 80016ce:	4091      	lsls	r1, r2
 80016d0:	000a      	movs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2225      	movs	r2, #37	@ 0x25
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2224      	movs	r2, #36	@ 0x24
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	0010      	movs	r0, r2
 80016fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46c0      	nop			@ (mov r8, r8)
}
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172c:	221c      	movs	r2, #28
 800172e:	401a      	ands	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	2101      	movs	r1, #1
 8001736:	4091      	lsls	r1, r2
 8001738:	000a      	movs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d108      	bne.n	800175e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800175c:	e007      	b.n	800176e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	60da      	str	r2, [r3, #12]
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800178e:	e155      	b.n	8001a3c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4091      	lsls	r1, r2
 800179a:	000a      	movs	r2, r1
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d100      	bne.n	80017a8 <HAL_GPIO_Init+0x30>
 80017a6:	e146      	b.n	8001a36 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	2201      	movs	r2, #1
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	4013      	ands	r3, r2
 800182a:	2b03      	cmp	r3, #3
 800182c:	d017      	beq.n	800185e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	43da      	mvns	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	4013      	ands	r3, r2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d123      	bne.n	80018b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	58d3      	ldr	r3, [r2, r3]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2107      	movs	r1, #7
 8001896:	400b      	ands	r3, r1
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	6939      	ldr	r1, [r7, #16]
 80018b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2203      	movs	r2, #3
 80018d0:	401a      	ands	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	23c0      	movs	r3, #192	@ 0xc0
 80018ec:	029b      	lsls	r3, r3, #10
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_GPIO_Init+0x17c>
 80018f2:	e0a0      	b.n	8001a36 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f4:	4b57      	ldr	r3, [pc, #348]	@ (8001a54 <HAL_GPIO_Init+0x2dc>)
 80018f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f8:	4b56      	ldr	r3, [pc, #344]	@ (8001a54 <HAL_GPIO_Init+0x2dc>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001900:	4a55      	ldr	r2, [pc, #340]	@ (8001a58 <HAL_GPIO_Init+0x2e0>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	589b      	ldr	r3, [r3, r2]
 800190c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	409a      	lsls	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	43da      	mvns	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	23a0      	movs	r3, #160	@ 0xa0
 8001928:	05db      	lsls	r3, r3, #23
 800192a:	429a      	cmp	r2, r3
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x1f6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4a      	ldr	r2, [pc, #296]	@ (8001a5c <HAL_GPIO_Init+0x2e4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x1f2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a49      	ldr	r2, [pc, #292]	@ (8001a60 <HAL_GPIO_Init+0x2e8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x1ee>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a48      	ldr	r2, [pc, #288]	@ (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x1ea>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a47      	ldr	r2, [pc, #284]	@ (8001a68 <HAL_GPIO_Init+0x2f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x1e6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <HAL_GPIO_Init+0x2f4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x1e2>
 8001956:	2305      	movs	r3, #5
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 800195a:	2306      	movs	r3, #6
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x1f8>
 800196e:	2300      	movs	r3, #0
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	2103      	movs	r1, #3
 8001974:	400a      	ands	r2, r1
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	@ (8001a58 <HAL_GPIO_Init+0x2e0>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	035b      	lsls	r3, r3, #13
 80019a6:	4013      	ands	r3, r2
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	039b      	lsls	r3, r3, #14
 80019d0:	4013      	ands	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019dc:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019e2:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	4013      	ands	r3, r2
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_GPIO_Init+0x2f8>)
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	40da      	lsrs	r2, r3
 8001a44:	1e13      	subs	r3, r2, #0
 8001a46:	d000      	beq.n	8001a4a <HAL_GPIO_Init+0x2d2>
 8001a48:	e6a2      	b.n	8001790 <HAL_GPIO_Init+0x18>
  }
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b006      	add	sp, #24
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	50000400 	.word	0x50000400
 8001a60:	50000800 	.word	0x50000800
 8001a64:	50000c00 	.word	0x50000c00
 8001a68:	50001000 	.word	0x50001000
 8001a6c:	50001c00 	.word	0x50001c00
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	0008      	movs	r0, r1
 8001a7e:	0011      	movs	r1, r2
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	1c02      	adds	r2, r0, #0
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	1c7b      	adds	r3, r7, #1
 8001a88:	1c0a      	adds	r2, r1, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8c:	1c7b      	adds	r3, r7, #1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a94:	1cbb      	adds	r3, r7, #2
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a9e:	1cbb      	adds	r3, r7, #2
 8001aa0:	881a      	ldrh	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08f      	b.n	8001be2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2241      	movs	r2, #65	@ 0x41
 8001ac6:	5c9b      	ldrb	r3, [r3, r2]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7fe fd7d 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2241      	movs	r2, #65	@ 0x41
 8001ae2:	2124      	movs	r1, #36	@ 0x24
 8001ae4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	438a      	bics	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	493b      	ldr	r1, [pc, #236]	@ (8001bec <HAL_I2C_Init+0x13c>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4938      	ldr	r1, [pc, #224]	@ (8001bf0 <HAL_I2C_Init+0x140>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0209      	lsls	r1, r1, #8
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e007      	b.n	8001b3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2184      	movs	r1, #132	@ 0x84
 8001b38:	0209      	lsls	r1, r1, #8
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d109      	bne.n	8001b5a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	0109      	lsls	r1, r1, #4
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	e007      	b.n	8001b6a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4923      	ldr	r1, [pc, #140]	@ (8001bf4 <HAL_I2C_Init+0x144>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4920      	ldr	r1, [pc, #128]	@ (8001bf8 <HAL_I2C_Init+0x148>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	491a      	ldr	r1, [pc, #104]	@ (8001bf0 <HAL_I2C_Init+0x140>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69d9      	ldr	r1, [r3, #28]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2241      	movs	r2, #65	@ 0x41
 8001bce:	2120      	movs	r1, #32
 8001bd0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2242      	movs	r2, #66	@ 0x42
 8001bdc:	2100      	movs	r1, #0
 8001bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	f0ffffff 	.word	0xf0ffffff
 8001bf0:	ffff7fff 	.word	0xffff7fff
 8001bf4:	fffff7ff 	.word	0xfffff7ff
 8001bf8:	02008000 	.word	0x02008000

08001bfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2241      	movs	r2, #65	@ 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d138      	bne.n	8001c84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e032      	b.n	8001c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	@ 0x40
 8001c24:	2101      	movs	r1, #1
 8001c26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2241      	movs	r2, #65	@ 0x41
 8001c2c:	2124      	movs	r1, #36	@ 0x24
 8001c2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4911      	ldr	r1, [pc, #68]	@ (8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2241      	movs	r2, #65	@ 0x41
 8001c74:	2120      	movs	r1, #32
 8001c76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	ffffefff 	.word	0xffffefff

08001c94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2241      	movs	r2, #65	@ 0x41
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d139      	bne.n	8001d1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e033      	b.n	8001d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	@ 0x40
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2241      	movs	r2, #65	@ 0x41
 8001cc4:	2124      	movs	r1, #36	@ 0x24
 8001cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2241      	movs	r2, #65	@ 0x41
 8001d0e:	2120      	movs	r1, #32
 8001d10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
  }
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b004      	add	sp, #16
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	fffff0ff 	.word	0xfffff0ff

08001d2c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	000a      	movs	r2, r1
 8001d36:	1cfb      	adds	r3, r7, #3
 8001d38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_PWR_EnterSTOPMode+0xac>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_PWR_EnterSTOPMode+0x40>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d66:	491d      	ldr	r1, [pc, #116]	@ (8001ddc <HAL_PWR_EnterSTOPMode+0xb0>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2203      	movs	r2, #3
 8001d76:	4393      	bics	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d8e:	2104      	movs	r1, #4
 8001d90:	430a      	orrs	r2, r1
 8001d92:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001d94:	1cfb      	adds	r3, r7, #3
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001d9c:	bf30      	wfi
 8001d9e:	e002      	b.n	8001da6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001da0:	bf40      	sev
    __WFE();
 8001da2:	bf20      	wfe
    __WFE();
 8001da4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001dac:	2104      	movs	r1, #4
 8001dae:	438a      	bics	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_PWR_EnterSTOPMode+0xa0>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	0089      	lsls	r1, r1, #2
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
  }
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	fffffdff 	.word	0xfffffdff
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f000 fbbf 	bl	8002576 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df8:	4bc9      	ldr	r3, [pc, #804]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	220c      	movs	r2, #12
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e02:	4bc7      	ldr	r3, [pc, #796]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	025b      	lsls	r3, r3, #9
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x36>
 8001e18:	e07e      	b.n	8001f18 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d007      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d112      	bne.n	8001e4c <HAL_RCC_OscConfig+0x68>
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	4bbb      	ldr	r3, [pc, #748]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5a>
 8001e3c:	e06b      	b.n	8001f16 <HAL_RCC_OscConfig+0x132>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d167      	bne.n	8001f16 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f000 fb95 	bl	8002576 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x84>
 8001e58:	4bb1      	ldr	r3, [pc, #708]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4bb0      	ldr	r3, [pc, #704]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	0249      	lsls	r1, r1, #9
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e027      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	23a0      	movs	r3, #160	@ 0xa0
 8001e6e:	02db      	lsls	r3, r3, #11
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10e      	bne.n	8001e92 <HAL_RCC_OscConfig+0xae>
 8001e74:	4baa      	ldr	r3, [pc, #680]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4ba9      	ldr	r3, [pc, #676]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	02c9      	lsls	r1, r1, #11
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4ba7      	ldr	r3, [pc, #668]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4ba6      	ldr	r3, [pc, #664]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0249      	lsls	r1, r1, #9
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e012      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e92:	4ba3      	ldr	r3, [pc, #652]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4ba2      	ldr	r3, [pc, #648]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001e98:	49a2      	ldr	r1, [pc, #648]	@ (8002124 <HAL_RCC_OscConfig+0x340>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4b9c      	ldr	r3, [pc, #624]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001eb2:	499d      	ldr	r1, [pc, #628]	@ (8002128 <HAL_RCC_OscConfig+0x344>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d015      	beq.n	8001eec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f902 	bl	80010c8 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ec8:	e009      	b.n	8001ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eca:	f7ff f8fd 	bl	80010c8 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	@ 0x64
 8001ed6:	d902      	bls.n	8001ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	f000 fb4c 	bl	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ede:	4b90      	ldr	r3, [pc, #576]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0ef      	beq.n	8001eca <HAL_RCC_OscConfig+0xe6>
 8001eea:	e015      	b.n	8001f18 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f8ec 	bl	80010c8 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef6:	f7ff f8e7 	bl	80010c8 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	@ 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e336      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f08:	4b85      	ldr	r3, [pc, #532]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	4013      	ands	r3, r2
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x112>
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d100      	bne.n	8001f24 <HAL_RCC_OscConfig+0x140>
 8001f22:	e099      	b.n	8002058 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f32:	4b7b      	ldr	r3, [pc, #492]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b7a      	ldr	r3, [pc, #488]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f38:	2120      	movs	r1, #32
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	2220      	movs	r2, #32
 8001f42:	4393      	bics	r3, r2
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d13e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1ec>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d13b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f58:	4b71      	ldr	r3, [pc, #452]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_RCC_OscConfig+0x188>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e304      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x348>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	021a      	lsls	r2, r3, #8
 8001f7c:	4b68      	ldr	r3, [pc, #416]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f82:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2209      	movs	r2, #9
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	4b64      	ldr	r3, [pc, #400]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f94:	f000 fc42 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8001f98:	0001      	movs	r1, r0
 8001f9a:	4b61      	ldr	r3, [pc, #388]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	4a62      	ldr	r2, [pc, #392]	@ (8002130 <HAL_RCC_OscConfig+0x34c>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	000a      	movs	r2, r1
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_OscConfig+0x350>)
 8001fae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fb0:	4b61      	ldr	r3, [pc, #388]	@ (8002138 <HAL_RCC_OscConfig+0x354>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2513      	movs	r5, #19
 8001fb6:	197c      	adds	r4, r7, r5
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff f83f 	bl	800103c <HAL_InitTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fc2:	197b      	adds	r3, r7, r5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d046      	beq.n	8002058 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001fca:	197b      	adds	r3, r7, r5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	e2d2      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d027      	beq.n	8002026 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fd6:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2209      	movs	r2, #9
 8001fdc:	4393      	bics	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f86e 	bl	80010c8 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f869 	bl	80010c8 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2b8      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002004:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2204      	movs	r2, #4
 800200a:	4013      	ands	r3, r2
 800200c:	d0f1      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b44      	ldr	r3, [pc, #272]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a46      	ldr	r2, [pc, #280]	@ (800212c <HAL_RCC_OscConfig+0x348>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	021a      	lsls	r2, r3, #8
 800201e:	4b40      	ldr	r3, [pc, #256]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	e018      	b.n	8002058 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 800202c:	2101      	movs	r1, #1
 800202e:	438a      	bics	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f849 	bl	80010c8 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff f844 	bl	80010c8 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e293      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800204e:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2204      	movs	r2, #4
 8002054:	4013      	ands	r3, r2
 8002056:	d1f1      	bne.n	800203c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	4013      	ands	r3, r2
 8002060:	d100      	bne.n	8002064 <HAL_RCC_OscConfig+0x280>
 8002062:	e0a2      	b.n	80021aa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d140      	bne.n	80020ec <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x29e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e279      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002082:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <HAL_RCC_OscConfig+0x358>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	0a19      	lsrs	r1, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	061a      	lsls	r2, r3, #24
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	0b5b      	lsrs	r3, r3, #13
 80020b0:	3301      	adds	r3, #1
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	0212      	lsls	r2, r2, #8
 80020b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	210f      	movs	r1, #15
 80020c0:	400b      	ands	r3, r1
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x34c>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <HAL_RCC_OscConfig+0x350>)
 80020ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_OscConfig+0x354>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2513      	movs	r5, #19
 80020d2:	197c      	adds	r4, r7, r5
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe ffb1 	bl	800103c <HAL_InitTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d061      	beq.n	80021aa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80020e6:	197b      	adds	r3, r7, r5
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	e244      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d040      	beq.n	8002176 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x33c>)
 80020fa:	2180      	movs	r1, #128	@ 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe ffe1 	bl	80010c8 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800210a:	e019      	b.n	8002140 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210c:	f7fe ffdc 	bl	80010c8 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d912      	bls.n	8002140 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e22b      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	fffbffff 	.word	0xfffbffff
 800212c:	ffffe0ff 	.word	0xffffe0ff
 8002130:	08005a8c 	.word	0x08005a8c
 8002134:	20000004 	.word	0x20000004
 8002138:	20000008 	.word	0x20000008
 800213c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002140:	4bca      	ldr	r3, [pc, #808]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d0df      	beq.n	800210c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214c:	4bc7      	ldr	r3, [pc, #796]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4ac7      	ldr	r2, [pc, #796]	@ (8002470 <HAL_RCC_OscConfig+0x68c>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215a:	4bc4      	ldr	r3, [pc, #784]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	4bc2      	ldr	r3, [pc, #776]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	0a19      	lsrs	r1, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	4bbf      	ldr	r3, [pc, #764]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	e019      	b.n	80021aa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002176:	4bbd      	ldr	r3, [pc, #756]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4bbc      	ldr	r3, [pc, #752]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800217c:	49bd      	ldr	r1, [pc, #756]	@ (8002474 <HAL_RCC_OscConfig+0x690>)
 800217e:	400a      	ands	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe ffa1 	bl	80010c8 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800218c:	f7fe ff9c 	bl	80010c8 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1eb      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800219e:	4bb3      	ldr	r3, [pc, #716]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2208      	movs	r2, #8
 80021b0:	4013      	ands	r3, r2
 80021b2:	d036      	beq.n	8002222 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d019      	beq.n	80021f0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021bc:	4bab      	ldr	r3, [pc, #684]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c0:	4baa      	ldr	r3, [pc, #680]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff7e 	bl	80010c8 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe ff79 	bl	80010c8 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1c8      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021e4:	4ba1      	ldr	r3, [pc, #644]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e8:	2202      	movs	r2, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d0f1      	beq.n	80021d2 <HAL_RCC_OscConfig+0x3ee>
 80021ee:	e018      	b.n	8002222 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f0:	4b9e      	ldr	r3, [pc, #632]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f4:	4b9d      	ldr	r3, [pc, #628]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	438a      	bics	r2, r1
 80021fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7fe ff64 	bl	80010c8 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002206:	f7fe ff5f 	bl	80010c8 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1ae      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002218:	4b94      	ldr	r3, [pc, #592]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800221a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d1f1      	bne.n	8002206 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2204      	movs	r2, #4
 8002228:	4013      	ands	r3, r2
 800222a:	d100      	bne.n	800222e <HAL_RCC_OscConfig+0x44a>
 800222c:	e0ae      	b.n	800238c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2023      	movs	r0, #35	@ 0x23
 8002230:	183b      	adds	r3, r7, r0
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b8d      	ldr	r3, [pc, #564]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	055b      	lsls	r3, r3, #21
 800223e:	4013      	ands	r3, r2
 8002240:	d109      	bne.n	8002256 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b8a      	ldr	r3, [pc, #552]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002246:	4b89      	ldr	r3, [pc, #548]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002248:	2180      	movs	r1, #128	@ 0x80
 800224a:	0549      	lsls	r1, r1, #21
 800224c:	430a      	orrs	r2, r1
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002250:	183b      	adds	r3, r7, r0
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b88      	ldr	r3, [pc, #544]	@ (8002478 <HAL_RCC_OscConfig+0x694>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4013      	ands	r3, r2
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b85      	ldr	r3, [pc, #532]	@ (8002478 <HAL_RCC_OscConfig+0x694>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b84      	ldr	r3, [pc, #528]	@ (8002478 <HAL_RCC_OscConfig+0x694>)
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	0049      	lsls	r1, r1, #1
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002270:	f7fe ff2a 	bl	80010c8 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe ff25 	bl	80010c8 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e174      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b7a      	ldr	r3, [pc, #488]	@ (8002478 <HAL_RCC_OscConfig+0x694>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4013      	ands	r3, r2
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4d0>
 80022a4:	4b71      	ldr	r3, [pc, #452]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022a8:	4b70      	ldr	r3, [pc, #448]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022aa:	2180      	movs	r1, #128	@ 0x80
 80022ac:	0049      	lsls	r1, r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022b2:	e031      	b.n	8002318 <HAL_RCC_OscConfig+0x534>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4f2>
 80022bc:	4b6b      	ldr	r3, [pc, #428]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c0:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022c2:	496c      	ldr	r1, [pc, #432]	@ (8002474 <HAL_RCC_OscConfig+0x690>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80022c8:	4b68      	ldr	r3, [pc, #416]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022cc:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022ce:	496b      	ldr	r1, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x698>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d4:	e020      	b.n	8002318 <HAL_RCC_OscConfig+0x534>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	23a0      	movs	r3, #160	@ 0xa0
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	429a      	cmp	r2, r3
 80022e0:	d10e      	bne.n	8002300 <HAL_RCC_OscConfig+0x51c>
 80022e2:	4b62      	ldr	r3, [pc, #392]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022e6:	4b61      	ldr	r3, [pc, #388]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	00c9      	lsls	r1, r1, #3
 80022ec:	430a      	orrs	r2, r1
 80022ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80022f0:	4b5e      	ldr	r3, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022f4:	4b5d      	ldr	r3, [pc, #372]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	0049      	lsls	r1, r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x534>
 8002300:	4b5a      	ldr	r3, [pc, #360]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002304:	4b59      	ldr	r3, [pc, #356]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002306:	495b      	ldr	r1, [pc, #364]	@ (8002474 <HAL_RCC_OscConfig+0x690>)
 8002308:	400a      	ands	r2, r1
 800230a:	651a      	str	r2, [r3, #80]	@ 0x50
 800230c:	4b57      	ldr	r3, [pc, #348]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800230e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002310:	4b56      	ldr	r3, [pc, #344]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002312:	495a      	ldr	r1, [pc, #360]	@ (800247c <HAL_RCC_OscConfig+0x698>)
 8002314:	400a      	ands	r2, r1
 8002316:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fed2 	bl	80010c8 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002328:	e009      	b.n	800233e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fecd 	bl	80010c8 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <HAL_RCC_OscConfig+0x69c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e11b      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800233e:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d0ef      	beq.n	800232a <HAL_RCC_OscConfig+0x546>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe febc 	bl	80010c8 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002354:	e009      	b.n	800236a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe feb7 	bl	80010c8 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a47      	ldr	r2, [pc, #284]	@ (8002480 <HAL_RCC_OscConfig+0x69c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e105      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800236a:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800236c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	2323      	movs	r3, #35	@ 0x23
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b3a      	ldr	r3, [pc, #232]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002384:	4b39      	ldr	r3, [pc, #228]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002386:	493f      	ldr	r1, [pc, #252]	@ (8002484 <HAL_RCC_OscConfig+0x6a0>)
 8002388:	400a      	ands	r2, r1
 800238a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	d049      	beq.n	800242a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d026      	beq.n	80023ec <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800239e:	4b33      	ldr	r3, [pc, #204]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b32      	ldr	r3, [pc, #200]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	4b30      	ldr	r3, [pc, #192]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ae:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b6:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <HAL_RCC_OscConfig+0x6a4>)
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <HAL_RCC_OscConfig+0x6a4>)
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	0189      	lsls	r1, r1, #6
 80023c0:	430a      	orrs	r2, r1
 80023c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe80 	bl	80010c8 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7fe fe7b 	bl	80010c8 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0ca      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2202      	movs	r2, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d0f1      	beq.n	80023ce <HAL_RCC_OscConfig+0x5ea>
 80023ea:	e01e      	b.n	800242a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	438a      	bics	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <HAL_RCC_OscConfig+0x6a4>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <HAL_RCC_OscConfig+0x6a4>)
 80023fe:	4923      	ldr	r1, [pc, #140]	@ (800248c <HAL_RCC_OscConfig+0x6a8>)
 8002400:	400a      	ands	r2, r1
 8002402:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fe60 	bl	80010c8 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800240e:	f7fe fe5b 	bl	80010c8 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0aa      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d1f1      	bne.n	800240e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	d100      	bne.n	8002434 <HAL_RCC_OscConfig+0x650>
 8002432:	e09f      	b.n	8002574 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d100      	bne.n	800243c <HAL_RCC_OscConfig+0x658>
 800243a:	e078      	b.n	800252e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	2b02      	cmp	r3, #2
 8002442:	d159      	bne.n	80024f8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_RCC_OscConfig+0x688>)
 800244a:	4911      	ldr	r1, [pc, #68]	@ (8002490 <HAL_RCC_OscConfig+0x6ac>)
 800244c:	400a      	ands	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fe3a 	bl	80010c8 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fe35 	bl	80010c8 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d915      	bls.n	8002494 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e084      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
 800246c:	40021000 	.word	0x40021000
 8002470:	ffff1fff 	.word	0xffff1fff
 8002474:	fffffeff 	.word	0xfffffeff
 8002478:	40007000 	.word	0x40007000
 800247c:	fffffbff 	.word	0xfffffbff
 8002480:	00001388 	.word	0x00001388
 8002484:	efffffff 	.word	0xefffffff
 8002488:	40010000 	.word	0x40010000
 800248c:	ffffdfff 	.word	0xffffdfff
 8002490:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002494:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	049b      	lsls	r3, r3, #18
 800249c:	4013      	ands	r3, r2
 800249e:	d1dc      	bne.n	800245a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b37      	ldr	r3, [pc, #220]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a37      	ldr	r2, [pc, #220]	@ (8002584 <HAL_RCC_OscConfig+0x7a0>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	431a      	orrs	r2, r3
 80024ba:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	0449      	lsls	r1, r1, #17
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fdfb 	bl	80010c8 <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fdf6 	bl	80010c8 <HAL_GetTick>
 80024dc:	0002      	movs	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e045      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024ea:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	049b      	lsls	r3, r3, #18
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x6f4>
 80024f6:	e03d      	b.n	8002574 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 80024fe:	4922      	ldr	r1, [pc, #136]	@ (8002588 <HAL_RCC_OscConfig+0x7a4>)
 8002500:	400a      	ands	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fde0 	bl	80010c8 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fddb 	bl	80010c8 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e02a      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002520:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	049b      	lsls	r3, r3, #18
 8002528:	4013      	ands	r3, r2
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x72a>
 800252c:	e022      	b.n	8002574 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01d      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_RCC_OscConfig+0x79c>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	401a      	ands	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d10f      	bne.n	8002570 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	23f0      	movs	r3, #240	@ 0xf0
 8002554:	039b      	lsls	r3, r3, #14
 8002556:	401a      	ands	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d107      	bne.n	8002570 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	23c0      	movs	r3, #192	@ 0xc0
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b00a      	add	sp, #40	@ 0x28
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40021000 	.word	0x40021000
 8002584:	ff02ffff 	.word	0xff02ffff
 8002588:	feffffff 	.word	0xfeffffff

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e128      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b96      	ldr	r3, [pc, #600]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d91e      	bls.n	80025ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b93      	ldr	r3, [pc, #588]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	4b90      	ldr	r3, [pc, #576]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c0:	f7fe fd82 	bl	80010c8 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c8:	e009      	b.n	80025de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ca:	f7fe fd7d 	bl	80010c8 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4a8a      	ldr	r2, [pc, #552]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e109      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b87      	ldr	r3, [pc, #540]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f6:	4b83      	ldr	r3, [pc, #524]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	22f0      	movs	r2, #240	@ 0xf0
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCC_ClockConfig+0x8a>
 8002614:	e089      	b.n	800272a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261e:	4b79      	ldr	r3, [pc, #484]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	4013      	ands	r3, r2
 8002628:	d120      	bne.n	800266c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0e1      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002636:	4b73      	ldr	r3, [pc, #460]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	049b      	lsls	r3, r3, #18
 800263e:	4013      	ands	r3, r2
 8002640:	d114      	bne.n	800266c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0d5      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d106      	bne.n	800265c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2204      	movs	r2, #4
 8002654:	4013      	ands	r3, r2
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0ca      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800265c:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0c2      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266c:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2203      	movs	r2, #3
 8002672:	4393      	bics	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe fd22 	bl	80010c8 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d111      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fe fd19 	bl	80010c8 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0a5      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a6:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	220c      	movs	r2, #12
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d1ef      	bne.n	8002692 <HAL_RCC_ClockConfig+0x106>
 80026b2:	e03a      	b.n	800272a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d111      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fd03 	bl	80010c8 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e08f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	220c      	movs	r2, #12
 80026d8:	4013      	ands	r3, r2
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_ClockConfig+0x132>
 80026de:	e024      	b.n	800272a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d11b      	bne.n	8002720 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e8:	e009      	b.n	80026fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ea:	f7fe fced 	bl	80010c8 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	4a42      	ldr	r2, [pc, #264]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e079      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fe:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	220c      	movs	r2, #12
 8002704:	4013      	ands	r3, r2
 8002706:	2b04      	cmp	r3, #4
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_ClockConfig+0x15e>
 800270a:	e00e      	b.n	800272a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fcdc 	bl	80010c8 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4a3a      	ldr	r2, [pc, #232]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e068      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002720:	4b38      	ldr	r3, [pc, #224]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	220c      	movs	r2, #12
 8002726:	4013      	ands	r3, r2
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d21e      	bcs.n	8002776 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002738:	4b30      	ldr	r3, [pc, #192]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800274a:	f7fe fcbd 	bl	80010c8 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	e009      	b.n	8002768 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fcb8 	bl	80010c8 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <HAL_RCC_ClockConfig+0x274>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e044      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002768:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_RCC_ClockConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2204      	movs	r2, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <HAL_RCC_ClockConfig+0x27c>)
 8002786:	4013      	ands	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	4013      	ands	r3, r2
 800279c:	d00a      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a1a      	ldr	r2, [pc, #104]	@ (800280c <HAL_RCC_ClockConfig+0x280>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	00da      	lsls	r2, r3, #3
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b4:	f000 f832 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027b8:	0001      	movs	r1, r0
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	220f      	movs	r2, #15
 80027c2:	4013      	ands	r3, r2
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <HAL_RCC_ClockConfig+0x284>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	000a      	movs	r2, r1
 80027ca:	40da      	lsrs	r2, r3
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_RCC_ClockConfig+0x288>)
 80027ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCC_ClockConfig+0x28c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	250b      	movs	r5, #11
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fc2f 	bl	800103c <HAL_InitTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027e2:	197b      	adds	r3, r7, r5
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027ea:	197b      	adds	r3, r7, r5
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b004      	add	sp, #16
 80027f8:	bdb0      	pop	{r4, r5, r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	40022000 	.word	0x40022000
 8002800:	00001388 	.word	0x00001388
 8002804:	40021000 	.word	0x40021000
 8002808:	fffff8ff 	.word	0xfffff8ff
 800280c:	ffffc7ff 	.word	0xffffc7ff
 8002810:	08005a8c 	.word	0x08005a8c
 8002814:	20000004 	.word	0x20000004
 8002818:	20000008 	.word	0x20000008

0800281c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002822:	4b3c      	ldr	r3, [pc, #240]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	220c      	movs	r2, #12
 800282c:	4013      	ands	r3, r2
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d013      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x3e>
 8002832:	d85c      	bhi.n	80028ee <HAL_RCC_GetSysClockFreq+0xd2>
 8002834:	2b04      	cmp	r3, #4
 8002836:	d002      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x22>
 8002838:	2b08      	cmp	r3, #8
 800283a:	d00b      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x38>
 800283c:	e057      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800283e:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2210      	movs	r2, #16
 8002844:	4013      	ands	r3, r2
 8002846:	d002      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xfc>)
 800284a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800284c:	e05d      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <HAL_RCC_GetSysClockFreq+0x100>)
 8002850:	613b      	str	r3, [r7, #16]
      break;
 8002852:	e05a      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x104>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	e057      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0c9b      	lsrs	r3, r3, #18
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	4a30      	ldr	r2, [pc, #192]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x108>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	0d9b      	lsrs	r3, r3, #22
 800286c:	2203      	movs	r2, #3
 800286e:	4013      	ands	r3, r2
 8002870:	3301      	adds	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002874:	4b27      	ldr	r3, [pc, #156]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	025b      	lsls	r3, r3, #9
 800287c:	4013      	ands	r3, r2
 800287e:	d00f      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	000a      	movs	r2, r1
 8002884:	0152      	lsls	r2, r2, #5
 8002886:	1a52      	subs	r2, r2, r1
 8002888:	0193      	lsls	r3, r2, #6
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	185b      	adds	r3, r3, r1
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f7fd fc3f 	bl	8000118 <__udivsi3>
 800289a:	0003      	movs	r3, r0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e023      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	d00f      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	000a      	movs	r2, r1
 80028ae:	0152      	lsls	r2, r2, #5
 80028b0:	1a52      	subs	r2, r2, r1
 80028b2:	0193      	lsls	r3, r2, #6
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	185b      	adds	r3, r3, r1
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fd fc2a 	bl	8000118 <__udivsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e00e      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	000a      	movs	r2, r1
 80028ce:	0152      	lsls	r2, r2, #5
 80028d0:	1a52      	subs	r2, r2, r1
 80028d2:	0193      	lsls	r3, r2, #6
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	185b      	adds	r3, r3, r1
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc1a 	bl	8000118 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
      break;
 80028ec:	e00d      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0b5b      	lsrs	r3, r3, #13
 80028f4:	2207      	movs	r2, #7
 80028f6:	4013      	ands	r3, r2
 80028f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	2280      	movs	r2, #128	@ 0x80
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
      break;
 8002908:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800290a:	693b      	ldr	r3, [r7, #16]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	003d0900 	.word	0x003d0900
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200
 8002924:	08005aa4 	.word	0x08005aa4

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b02      	ldr	r3, [pc, #8]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x10>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002940:	f7ff fff2 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002944:	0001      	movs	r1, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	2207      	movs	r2, #7
 800294e:	4013      	ands	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	40d9      	lsrs	r1, r3
 8002956:	000b      	movs	r3, r1
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	08005a9c 	.word	0x08005a9c

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffdc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002970:	0001      	movs	r1, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	2207      	movs	r2, #7
 800297a:	4013      	ands	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	40d9      	lsrs	r1, r3
 8002982:	000b      	movs	r3, r1
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	08005a9c 	.word	0x08005a9c

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800299c:	2317      	movs	r3, #23
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2220      	movs	r2, #32
 80029aa:	4013      	ands	r3, r2
 80029ac:	d106      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	d100      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80029ba:	e104      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029bc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	055b      	lsls	r3, r3, #21
 80029c4:	4013      	ands	r3, r2
 80029c6:	d10a      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029cc:	4bb5      	ldr	r3, [pc, #724]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ce:	2180      	movs	r1, #128	@ 0x80
 80029d0:	0549      	lsls	r1, r1, #21
 80029d2:	430a      	orrs	r2, r1
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80029d6:	2317      	movs	r3, #23
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4bb2      	ldr	r3, [pc, #712]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d11a      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4baf      	ldr	r3, [pc, #700]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4bae      	ldr	r3, [pc, #696]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80029f0:	2180      	movs	r1, #128	@ 0x80
 80029f2:	0049      	lsls	r1, r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fb66 	bl	80010c8 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fe fb61 	bl	80010c8 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	@ 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e143      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4ba4      	ldr	r3, [pc, #656]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a20:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	23c0      	movs	r3, #192	@ 0xc0
 8002a26:	039b      	lsls	r3, r3, #14
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	23c0      	movs	r3, #192	@ 0xc0
 8002a32:	039b      	lsls	r3, r3, #14
 8002a34:	4013      	ands	r3, r2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	23c0      	movs	r3, #192	@ 0xc0
 8002a42:	039b      	lsls	r3, r3, #14
 8002a44:	4013      	ands	r3, r2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	23c0      	movs	r3, #192	@ 0xc0
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	401a      	ands	r2, r3
 8002a56:	23c0      	movs	r3, #192	@ 0xc0
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a5e:	4b91      	ldr	r3, [pc, #580]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	029b      	lsls	r3, r3, #10
 8002a66:	401a      	ands	r2, r3
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e113      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a74:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a78:	23c0      	movs	r3, #192	@ 0xc0
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d049      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	23c0      	movs	r3, #192	@ 0xc0
 8002a8c:	029b      	lsls	r3, r3, #10
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d004      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	23c0      	movs	r3, #192	@ 0xc0
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d034      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d02e      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002abc:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac6:	4b77      	ldr	r3, [pc, #476]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aca:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0309      	lsls	r1, r1, #12
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad4:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ad8:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ada:	4975      	ldr	r1, [pc, #468]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ae0:	4b70      	ldr	r3, [pc, #448]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d014      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe faea 	bl	80010c8 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af8:	e009      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fae5 	bl	80010c8 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	4a6b      	ldr	r2, [pc, #428]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0c6      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	d0ef      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	401a      	ands	r2, r3
 8002b30:	23c0      	movs	r3, #192	@ 0xc0
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002b38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	23c0      	movs	r3, #192	@ 0xc0
 8002b48:	039b      	lsls	r3, r3, #14
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	4b54      	ldr	r3, [pc, #336]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	23c0      	movs	r3, #192	@ 0xc0
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	401a      	ands	r2, r3
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d01f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	23c0      	movs	r3, #192	@ 0xc0
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	401a      	ands	r2, r3
 8002b7a:	23c0      	movs	r3, #192	@ 0xc0
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002b82:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	23c0      	movs	r3, #192	@ 0xc0
 8002b92:	039b      	lsls	r3, r3, #14
 8002b94:	401a      	ands	r2, r3
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	23c0      	movs	r3, #192	@ 0xc0
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	401a      	ands	r2, r3
 8002baa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bb0:	2317      	movs	r3, #23
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bc0:	493e      	ldr	r1, [pc, #248]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd0:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	4393      	bics	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2204      	movs	r2, #4
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c10:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2208      	movs	r2, #8
 8002c26:	4013      	ands	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	4013      	ands	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6c:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2280      	movs	r2, #128	@ 0x80
 8002c82:	4013      	ands	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	fffcffff 	.word	0xfffcffff
 8002cb0:	fff7ffff 	.word	0xfff7ffff
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	ffcfffff 	.word	0xffcfffff
 8002cbc:	efffffff 	.word	0xefffffff
 8002cc0:	fffff3ff 	.word	0xfffff3ff
 8002cc4:	ffffcfff 	.word	0xffffcfff
 8002cc8:	fbffffff 	.word	0xfbffffff
 8002ccc:	fff3ffff 	.word	0xfff3ffff

08002cd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e088      	b.n	8002dfc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2221      	movs	r2, #33	@ 0x21
 8002cee:	5c9b      	ldrb	r3, [r3, r2]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd ffc9 	bl	8000c98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2221      	movs	r2, #33	@ 0x21
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d05f      	beq.n	8002ddc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	22ca      	movs	r2, #202	@ 0xca
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2253      	movs	r2, #83	@ 0x53
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d2c:	250f      	movs	r5, #15
 8002d2e:	197c      	adds	r4, r7, r5
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f9ce 	bl	80030d4 <RTC_EnterInitMode>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	183b      	adds	r3, r7, r0
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12c      	bne.n	8002da0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	492c      	ldr	r1, [pc, #176]	@ (8002e04 <HAL_RTC_Init+0x134>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6899      	ldr	r1, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68d2      	ldr	r2, [r2, #12]
 8002d7c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d92:	183c      	adds	r4, r7, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f9e0 	bl	800315c <RTC_ExitInitMode>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	438a      	bics	r2, r1
 8002db8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ff      	movs	r2, #255	@ 0xff
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dda:	e003      	b.n	8002de4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ddc:	230f      	movs	r3, #15
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002de4:	230f      	movs	r3, #15
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2221      	movs	r2, #33	@ 0x21
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002df6:	230f      	movs	r3, #15
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}
 8002e04:	ff8fffbf 	.word	0xff8fffbf

08002e08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	5c9b      	ldrb	r3, [r3, r2]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_RTC_SetTime+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e092      	b.n	8002f4c <HAL_RTC_SetTime+0x144>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2221      	movs	r2, #33	@ 0x21
 8002e32:	2102      	movs	r1, #2
 8002e34:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d125      	bne.n	8002e88 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2240      	movs	r2, #64	@ 0x40
 8002e44:	4013      	ands	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 f9ac 	bl	80031b0 <RTC_ByteToBcd2>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f9a5 	bl	80031b0 <RTC_ByteToBcd2>
 8002e66:	0003      	movs	r3, r0
 8002e68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	789b      	ldrb	r3, [r3, #2]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f99d 	bl	80031b0 <RTC_ByteToBcd2>
 8002e76:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e78:	0022      	movs	r2, r4
 8002e7a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	78db      	ldrb	r3, [r3, #3]
 8002e80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e017      	b.n	8002eb8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	4013      	ands	r3, r2
 8002e92:	d102      	bne.n	8002e9a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ea6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002eac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	22ca      	movs	r2, #202	@ 0xca
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2253      	movs	r2, #83	@ 0x53
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ec8:	2513      	movs	r5, #19
 8002eca:	197c      	adds	r4, r7, r5
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f900 	bl	80030d4 <RTC_EnterInitMode>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ed8:	0028      	movs	r0, r5
 8002eda:	183b      	adds	r3, r7, r0
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d120      	bne.n	8002f24 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	491a      	ldr	r1, [pc, #104]	@ (8002f54 <HAL_RTC_SetTime+0x14c>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4917      	ldr	r1, [pc, #92]	@ (8002f58 <HAL_RTC_SetTime+0x150>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f16:	183c      	adds	r4, r7, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f91e 	bl	800315c <RTC_ExitInitMode>
 8002f20:	0003      	movs	r3, r0
 8002f22:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002f24:	2313      	movs	r3, #19
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d103      	bne.n	8002f36 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	@ 0x21
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

  return status;
 8002f46:	2313      	movs	r3, #19
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b006      	add	sp, #24
 8002f52:	bdb0      	pop	{r4, r5, r7, pc}
 8002f54:	007f7f7f 	.word	0x007f7f7f
 8002f58:	fffbffff 	.word	0xfffbffff

08002f5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_RTC_SetDate+0x1e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e07e      	b.n	8003078 <HAL_RTC_SetDate+0x11c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	2102      	movs	r1, #2
 8002f88:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10e      	bne.n	8002fae <HAL_RTC_SetDate+0x52>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	001a      	movs	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d008      	beq.n	8002fae <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	330a      	adds	r3, #10
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11c      	bne.n	8002fee <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	78db      	ldrb	r3, [r3, #3]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f8f9 	bl	80031b0 <RTC_ByteToBcd2>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f8f2 	bl	80031b0 <RTC_ByteToBcd2>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f8ea 	bl	80031b0 <RTC_ByteToBcd2>
 8002fdc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fde:	0022      	movs	r2, r4
 8002fe0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00e      	b.n	800300c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ffa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003000:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	22ca      	movs	r2, #202	@ 0xca
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2253      	movs	r2, #83	@ 0x53
 800301a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800301c:	2513      	movs	r5, #19
 800301e:	197c      	adds	r4, r7, r5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f856 	bl	80030d4 <RTC_EnterInitMode>
 8003028:	0003      	movs	r3, r0
 800302a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800302c:	0028      	movs	r0, r5
 800302e:	183b      	adds	r3, r7, r0
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4910      	ldr	r1, [pc, #64]	@ (8003080 <HAL_RTC_SetDate+0x124>)
 800303e:	400a      	ands	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003042:	183c      	adds	r4, r7, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f888 	bl	800315c <RTC_ExitInitMode>
 800304c:	0003      	movs	r3, r0
 800304e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003050:	2313      	movs	r3, #19
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	@ 0x21
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	22ff      	movs	r2, #255	@ 0xff
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

  return status;
 8003072:	2313      	movs	r3, #19
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bdb0      	pop	{r4, r5, r7, pc}
 8003080:	00ffff3f 	.word	0x00ffff3f

08003084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0e      	ldr	r2, [pc, #56]	@ (80030d0 <HAL_RTC_WaitForSynchro+0x4c>)
 8003096:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003098:	f7fe f816 	bl	80010c8 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030a0:	e00a      	b.n	80030b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030a2:	f7fe f811 	bl	80010c8 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	23fa      	movs	r3, #250	@ 0xfa
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d901      	bls.n	80030b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0ee      	beq.n	80030a2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	0001ff5f 	.word	0x0001ff5f

080030d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	4013      	ands	r3, r2
 80030f2:	d12c      	bne.n	800314e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003104:	f7fd ffe0 	bl	80010c8 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800310c:	e014      	b.n	8003138 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800310e:	f7fd ffdb 	bl	80010c8 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	200f      	movs	r0, #15
 800311a:	183b      	adds	r3, r7, r0
 800311c:	1839      	adds	r1, r7, r0
 800311e:	7809      	ldrb	r1, [r1, #0]
 8003120:	7019      	strb	r1, [r3, #0]
 8003122:	23fa      	movs	r3, #250	@ 0xfa
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	429a      	cmp	r2, r3
 8003128:	d906      	bls.n	8003138 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2221      	movs	r2, #33	@ 0x21
 800312e:	2104      	movs	r1, #4
 8003130:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8003132:	183b      	adds	r3, r7, r0
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2240      	movs	r2, #64	@ 0x40
 8003140:	4013      	ands	r3, r2
 8003142:	d104      	bne.n	800314e <RTC_EnterInitMode+0x7a>
 8003144:	230f      	movs	r3, #15
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d1df      	bne.n	800310e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800314e:	230f      	movs	r3, #15
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	781b      	ldrb	r3, [r3, #0]
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}

0800315c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	240f      	movs	r4, #15
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2180      	movs	r1, #128	@ 0x80
 8003178:	438a      	bics	r2, r1
 800317a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2220      	movs	r2, #32
 8003184:	4013      	ands	r3, r2
 8003186:	d10c      	bne.n	80031a2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff ff7a 	bl	8003084 <HAL_RTC_WaitForSynchro>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d006      	beq.n	80031a2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2221      	movs	r2, #33	@ 0x21
 8003198:	2104      	movs	r1, #4
 800319a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800319c:	193b      	adds	r3, r7, r4
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80031a2:	230f      	movs	r3, #15
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b005      	add	sp, #20
 80031ae:	bd90      	pop	{r4, r7, pc}

080031b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	0002      	movs	r2, r0
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80031c0:	e007      	b.n	80031d2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	1dfa      	adds	r2, r7, #7
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	3a0a      	subs	r2, #10
 80031d0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b09      	cmp	r3, #9
 80031d8:	d8f3      	bhi.n	80031c2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b2db      	uxtb	r3, r3
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003200:	4b64      	ldr	r3, [pc, #400]	@ (8003394 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	22fa      	movs	r2, #250	@ 0xfa
 8003206:	01d1      	lsls	r1, r2, #7
 8003208:	0018      	movs	r0, r3
 800320a:	f7fc ff85 	bl	8000118 <__udivsi3>
 800320e:	0003      	movs	r3, r0
 8003210:	001a      	movs	r2, r3
 8003212:	0013      	movs	r3, r2
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	189b      	adds	r3, r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	5c9b      	ldrb	r3, [r3, r2]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800322a:	2302      	movs	r3, #2
 800322c:	e0ad      	b.n	800338a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2221      	movs	r2, #33	@ 0x21
 800323a:	2102      	movs	r1, #2
 800323c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	22ca      	movs	r2, #202	@ 0xca
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2253      	movs	r2, #83	@ 0x53
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4013      	ands	r3, r2
 800325a:	d019      	beq.n	8003290 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ff      	movs	r2, #255	@ 0xff
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2221      	movs	r2, #33	@ 0x21
 8003274:	2103      	movs	r1, #3
 8003276:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e082      	b.n	800338a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2204      	movs	r2, #4
 800328c:	4013      	ands	r3, r2
 800328e:	d1e5      	bne.n	800325c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	493f      	ldr	r1, [pc, #252]	@ (8003398 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800329c:	400a      	ands	r2, r1
 800329e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	22ff      	movs	r2, #255	@ 0xff
 80032a8:	401a      	ands	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	493b      	ldr	r1, [pc, #236]	@ (800339c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032b4:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22fa      	movs	r2, #250	@ 0xfa
 80032ba:	01d1      	lsls	r1, r2, #7
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fc ff2b 	bl	8000118 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	001a      	movs	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	22ff      	movs	r2, #255	@ 0xff
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2221      	movs	r2, #33	@ 0x21
 80032ec:	2103      	movs	r1, #3
 80032ee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e046      	b.n	800338a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d0e5      	beq.n	80032d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2107      	movs	r1, #7
 8003314:	438a      	bics	r2, r1
 8003316:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	0349      	lsls	r1, r1, #13
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800333e:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003344:	2180      	movs	r1, #128	@ 0x80
 8003346:	0349      	lsls	r1, r1, #13
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2180      	movs	r1, #128	@ 0x80
 8003358:	01c9      	lsls	r1, r1, #7
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2180      	movs	r1, #128	@ 0x80
 800336a:	00c9      	lsls	r1, r1, #3
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	22ff      	movs	r2, #255	@ 0xff
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	@ 0x21
 800337c:	2101      	movs	r1, #1
 800337e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b006      	add	sp, #24
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	20000004 	.word	0x20000004
 8003398:	fffffbff 	.word	0xfffffbff
 800339c:	fffffb7f 	.word	0xfffffb7f
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	5c9b      	ldrb	r3, [r3, r2]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e04e      	b.n	800345c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2221      	movs	r2, #33	@ 0x21
 80033ca:	2102      	movs	r1, #2
 80033cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	22ca      	movs	r2, #202	@ 0xca
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2253      	movs	r2, #83	@ 0x53
 80033dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	491e      	ldr	r1, [pc, #120]	@ (8003464 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	491b      	ldr	r1, [pc, #108]	@ (8003468 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fe:	f7fd fe63 	bl	80010c8 <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003406:	e016      	b.n	8003436 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003408:	f7fd fe5e 	bl	80010c8 <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	23fa      	movs	r3, #250	@ 0xfa
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	429a      	cmp	r2, r3
 8003418:	d90d      	bls.n	8003436 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	22ff      	movs	r2, #255	@ 0xff
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2221      	movs	r2, #33	@ 0x21
 8003426:	2103      	movs	r1, #3
 8003428:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e012      	b.n	800345c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2204      	movs	r2, #4
 800343e:	4013      	ands	r3, r2
 8003440:	d0e2      	beq.n	8003408 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ff      	movs	r2, #255	@ 0xff
 8003448:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2221      	movs	r2, #33	@ 0x21
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b004      	add	sp, #16
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fffffbff 	.word	0xfffffbff
 8003468:	ffffbfff 	.word	0xffffbfff

0800346c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003474:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003476:	2280      	movs	r2, #128	@ 0x80
 8003478:	0352      	lsls	r2, r2, #13
 800347a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	4013      	ands	r3, r2
 8003488:	d014      	beq.n	80034b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	2380      	movs	r3, #128	@ 0x80
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4013      	ands	r3, r2
 8003496:	d00d      	beq.n	80034b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	22ff      	movs	r2, #255	@ 0xff
 80034a0:	401a      	ands	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4908      	ldr	r1, [pc, #32]	@ (80034c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fd f94c 	bl	800074c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2221      	movs	r2, #33	@ 0x21
 80034b8:	2101      	movs	r1, #1
 80034ba:	5499      	strb	r1, [r3, r2]
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40010400 	.word	0x40010400
 80034c8:	fffffb7f 	.word	0xfffffb7f

080034cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e044      	b.n	8003568 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2278      	movs	r2, #120	@ 0x78
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fd fcb3 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2224      	movs	r2, #36	@ 0x24
 80034fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	438a      	bics	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f000 ffac 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 fd0a 	bl	8003f38 <UART_SetConfig>
 8003524:	0003      	movs	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01c      	b.n	8003568 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	490d      	ldr	r1, [pc, #52]	@ (8003570 <HAL_UART_Init+0xa4>)
 800353a:	400a      	ands	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	212a      	movs	r1, #42	@ 0x2a
 800354a:	438a      	bics	r2, r1
 800354c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f001 f83b 	bl	80045dc <UART_CheckIdleState>
 8003566:	0003      	movs	r3, r0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	ffffb7ff 	.word	0xffffb7ff

08003574 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	1dbb      	adds	r3, r7, #6
 8003580:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003586:	2b20      	cmp	r3, #32
 8003588:	d000      	beq.n	800358c <HAL_UART_Transmit_DMA+0x18>
 800358a:	e077      	b.n	800367c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_UART_Transmit_DMA+0x26>
 8003592:	1dbb      	adds	r3, r7, #6
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d109      	bne.n	80035be <HAL_UART_Transmit_DMA+0x4a>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	d001      	beq.n	80035be <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e05f      	b.n	800367e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1dba      	adds	r2, r7, #6
 80035c8:	2150      	movs	r1, #80	@ 0x50
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1dba      	adds	r2, r7, #6
 80035d2:	2152      	movs	r1, #82	@ 0x52
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2284      	movs	r2, #132	@ 0x84
 80035dc:	2100      	movs	r1, #0
 80035de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2221      	movs	r2, #33	@ 0x21
 80035e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d027      	beq.n	800363e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	4a25      	ldr	r2, [pc, #148]	@ (8003688 <HAL_UART_Transmit_DMA+0x114>)
 80035f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	4a24      	ldr	r2, [pc, #144]	@ (800368c <HAL_UART_Transmit_DMA+0x118>)
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_UART_Transmit_DMA+0x11c>)
 8003604:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	2200      	movs	r2, #0
 800360c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003616:	0019      	movs	r1, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3328      	adds	r3, #40	@ 0x28
 800361e:	001a      	movs	r2, r3
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	f7fd fed4 	bl	80013d0 <HAL_DMA_Start_IT>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d008      	beq.n	800363e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2284      	movs	r2, #132	@ 0x84
 8003630:	2110      	movs	r1, #16
 8003632:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e01f      	b.n	800367e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003646:	f3ef 8310 	mrs	r3, PRIMASK
 800364a:	613b      	str	r3, [r7, #16]
  return(result);
 800364c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2180      	movs	r1, #128	@ 0x80
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b008      	add	sp, #32
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	08004a5d 	.word	0x08004a5d
 800368c:	08004af5 	.word	0x08004af5
 8003690:	08004cfb 	.word	0x08004cfb

08003694 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	@ 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	617b      	str	r3, [r7, #20]
  return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	21c0      	movs	r1, #192	@ 0xc0
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2280      	movs	r2, #128	@ 0x80
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b80      	cmp	r3, #128	@ 0x80
 80036da:	d135      	bne.n	8003748 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	2301      	movs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2180      	movs	r1, #128	@ 0x80
 80036fe:	438a      	bics	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	2200      	movs	r2, #0
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	0018      	movs	r0, r3
 8003724:	f7fd feba 	bl	800149c <HAL_DMA_Abort>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d00d      	beq.n	8003748 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003730:	0018      	movs	r0, r3
 8003732:	f7fd ffe8 	bl	8001706 <HAL_DMA_GetError>
 8003736:	0003      	movs	r3, r0
 8003738:	2b20      	cmp	r3, #32
 800373a:	d105      	bne.n	8003748 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2284      	movs	r2, #132	@ 0x84
 8003740:	2110      	movs	r1, #16
 8003742:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e007      	b.n	8003758 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2252      	movs	r2, #82	@ 0x52
 800374c:	2100      	movs	r1, #0
 800374e:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b00a      	add	sp, #40	@ 0x28
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b092      	sub	sp, #72	@ 0x48
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8310 	mrs	r3, PRIMASK
 800376c:	623b      	str	r3, [r7, #32]
  return(result);
 800376e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	647b      	str	r3, [r7, #68]	@ 0x44
 8003772:	2301      	movs	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	494b      	ldr	r1, [pc, #300]	@ (80038b8 <HAL_UART_AbortReceive+0x158>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80037a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037a4:	2301      	movs	r3, #1
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d118      	bne.n	8003806 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	617b      	str	r3, [r7, #20]
  return(result);
 80037da:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037de:	2301      	movs	r3, #1
 80037e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2240      	movs	r2, #64	@ 0x40
 800380e:	4013      	ands	r3, r2
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	d135      	bne.n	8003880 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003814:	f3ef 8310 	mrs	r3, PRIMASK
 8003818:	60bb      	str	r3, [r7, #8]
  return(result);
 800381a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800381e:	2301      	movs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f383 8810 	msr	PRIMASK, r3
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	@ 0x40
 8003836:	438a      	bics	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003852:	2200      	movs	r2, #0
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	0018      	movs	r0, r3
 800385c:	f7fd fe1e 	bl	800149c <HAL_DMA_Abort>
 8003860:	1e03      	subs	r3, r0, #0
 8003862:	d00d      	beq.n	8003880 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003868:	0018      	movs	r0, r3
 800386a:	f7fd ff4c 	bl	8001706 <HAL_DMA_GetError>
 800386e:	0003      	movs	r3, r0
 8003870:	2b20      	cmp	r3, #32
 8003872:	d105      	bne.n	8003880 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2284      	movs	r2, #132	@ 0x84
 8003878:	2110      	movs	r1, #16
 800387a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e017      	b.n	80038b0 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	225a      	movs	r2, #90	@ 0x5a
 8003884:	2100      	movs	r1, #0
 8003886:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	220f      	movs	r2, #15
 800388e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2108      	movs	r1, #8
 800389c:	430a      	orrs	r2, r1
 800389e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	2120      	movs	r1, #32
 80038a6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b012      	add	sp, #72	@ 0x48
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fffffedf 	.word	0xfffffedf

080038bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b0ab      	sub	sp, #172	@ 0xac
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	22a4      	movs	r2, #164	@ 0xa4
 80038cc:	18b9      	adds	r1, r7, r2
 80038ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	20a0      	movs	r0, #160	@ 0xa0
 80038d8:	1839      	adds	r1, r7, r0
 80038da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	219c      	movs	r1, #156	@ 0x9c
 80038e4:	1879      	adds	r1, r7, r1
 80038e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e8:	0011      	movs	r1, r2
 80038ea:	18bb      	adds	r3, r7, r2
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a99      	ldr	r2, [pc, #612]	@ (8003b54 <HAL_UART_IRQHandler+0x298>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2298      	movs	r2, #152	@ 0x98
 80038f4:	18bc      	adds	r4, r7, r2
 80038f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80038f8:	18bb      	adds	r3, r7, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003900:	187b      	adds	r3, r7, r1
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	4013      	ands	r3, r2
 8003908:	d00f      	beq.n	800392a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800390a:	183b      	adds	r3, r7, r0
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	4013      	ands	r3, r2
 8003912:	d00a      	beq.n	800392a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <HAL_UART_IRQHandler+0x62>
 800391c:	e2be      	b.n	8003e9c <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	0010      	movs	r0, r2
 8003926:	4798      	blx	r3
      }
      return;
 8003928:	e2b8      	b.n	8003e9c <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800392a:	2398      	movs	r3, #152	@ 0x98
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d100      	bne.n	8003936 <HAL_UART_IRQHandler+0x7a>
 8003934:	e114      	b.n	8003b60 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003936:	239c      	movs	r3, #156	@ 0x9c
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d106      	bne.n	8003950 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003942:	23a0      	movs	r3, #160	@ 0xa0
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	@ (8003b58 <HAL_UART_IRQHandler+0x29c>)
 800394a:	4013      	ands	r3, r2
 800394c:	d100      	bne.n	8003950 <HAL_UART_IRQHandler+0x94>
 800394e:	e107      	b.n	8003b60 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003950:	23a4      	movs	r3, #164	@ 0xa4
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	4013      	ands	r3, r2
 800395a:	d012      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
 800395c:	23a0      	movs	r3, #160	@ 0xa0
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2284      	movs	r2, #132	@ 0x84
 8003976:	589b      	ldr	r3, [r3, r2]
 8003978:	2201      	movs	r2, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2184      	movs	r1, #132	@ 0x84
 8003980:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003982:	23a4      	movs	r3, #164	@ 0xa4
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d011      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
 800398e:	239c      	movs	r3, #156	@ 0x9c
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d00b      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2202      	movs	r2, #2
 80039a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2284      	movs	r2, #132	@ 0x84
 80039a6:	589b      	ldr	r3, [r3, r2]
 80039a8:	2204      	movs	r2, #4
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2184      	movs	r1, #132	@ 0x84
 80039b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039b2:	23a4      	movs	r3, #164	@ 0xa4
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2204      	movs	r2, #4
 80039ba:	4013      	ands	r3, r2
 80039bc:	d011      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
 80039be:	239c      	movs	r3, #156	@ 0x9c
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2284      	movs	r2, #132	@ 0x84
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	2202      	movs	r2, #2
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2184      	movs	r1, #132	@ 0x84
 80039e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039e2:	23a4      	movs	r3, #164	@ 0xa4
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	4013      	ands	r3, r2
 80039ec:	d017      	beq.n	8003a1e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039ee:	23a0      	movs	r3, #160	@ 0xa0
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d105      	bne.n	8003a06 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039fa:	239c      	movs	r3, #156	@ 0x9c
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2284      	movs	r2, #132	@ 0x84
 8003a12:	589b      	ldr	r3, [r3, r2]
 8003a14:	2208      	movs	r2, #8
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2184      	movs	r1, #132	@ 0x84
 8003a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a1e:	23a4      	movs	r3, #164	@ 0xa4
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_UART_IRQHandler+0x198>
 8003a2c:	23a0      	movs	r3, #160	@ 0xa0
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	04db      	lsls	r3, r3, #19
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00c      	beq.n	8003a54 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2280      	movs	r2, #128	@ 0x80
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2284      	movs	r2, #132	@ 0x84
 8003a48:	589b      	ldr	r3, [r3, r2]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2184      	movs	r1, #132	@ 0x84
 8003a52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2284      	movs	r2, #132	@ 0x84
 8003a58:	589b      	ldr	r3, [r3, r2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d100      	bne.n	8003a60 <HAL_UART_IRQHandler+0x1a4>
 8003a5e:	e21f      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a60:	23a4      	movs	r3, #164	@ 0xa4
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2220      	movs	r2, #32
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a6c:	23a0      	movs	r3, #160	@ 0xa0
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	4013      	ands	r3, r2
 8003a76:	d008      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	0010      	movs	r0, r2
 8003a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2284      	movs	r2, #132	@ 0x84
 8003a8e:	589b      	ldr	r3, [r3, r2]
 8003a90:	2194      	movs	r1, #148	@ 0x94
 8003a92:	187a      	adds	r2, r7, r1
 8003a94:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2240      	movs	r2, #64	@ 0x40
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d004      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2228      	movs	r2, #40	@ 0x28
 8003aaa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aac:	d047      	beq.n	8003b3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 ff6f 	bl	8004994 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	@ 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d137      	bne.n	8003b34 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003acc:	2090      	movs	r0, #144	@ 0x90
 8003ace:	183a      	adds	r2, r7, r0
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2140      	movs	r1, #64	@ 0x40
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	183b      	adds	r3, r7, r0
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_UART_IRQHandler+0x2a0>)
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fd fd03 	bl	800151c <HAL_DMA_Abort_IT>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b24:	0018      	movs	r0, r3
 8003b26:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e012      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fd f825 	bl	8000b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b32:	e00d      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fd f820 	bl	8000b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e008      	b.n	8003b50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd f81b 	bl	8000b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2284      	movs	r2, #132	@ 0x84
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b4e:	e1a7      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b52:	e1a5      	b.n	8003ea0 <HAL_UART_IRQHandler+0x5e4>
 8003b54:	0000080f 	.word	0x0000080f
 8003b58:	04000120 	.word	0x04000120
 8003b5c:	08004d7f 	.word	0x08004d7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d000      	beq.n	8003b6a <HAL_UART_IRQHandler+0x2ae>
 8003b68:	e159      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6a:	23a4      	movs	r3, #164	@ 0xa4
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	4013      	ands	r3, r2
 8003b74:	d100      	bne.n	8003b78 <HAL_UART_IRQHandler+0x2bc>
 8003b76:	e152      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b78:	23a0      	movs	r3, #160	@ 0xa0
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	4013      	ands	r3, r2
 8003b82:	d100      	bne.n	8003b86 <HAL_UART_IRQHandler+0x2ca>
 8003b84:	e14b      	b.n	8003e1e <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2240      	movs	r2, #64	@ 0x40
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d000      	beq.n	8003b9e <HAL_UART_IRQHandler+0x2e2>
 8003b9c:	e0bf      	b.n	8003d1e <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	217e      	movs	r1, #126	@ 0x7e
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d100      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x2fa>
 8003bb4:	e095      	b.n	8003ce2 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2258      	movs	r2, #88	@ 0x58
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	187a      	adds	r2, r7, r1
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d300      	bcc.n	8003bc6 <HAL_UART_IRQHandler+0x30a>
 8003bc4:	e08d      	b.n	8003ce2 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	187a      	adds	r2, r7, r1
 8003bca:	215a      	movs	r1, #90	@ 0x5a
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d16f      	bne.n	8003cbe <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003be8:	2301      	movs	r3, #1
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	49ad      	ldr	r1, [pc, #692]	@ (8003eb4 <HAL_UART_IRQHandler+0x5f8>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	438a      	bics	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	@ 0x40
 8003c64:	438a      	bics	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2280      	movs	r2, #128	@ 0x80
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fd fbef 	bl	800149c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2258      	movs	r2, #88	@ 0x58
 8003cc8:	5a9a      	ldrh	r2, [r3, r2]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	215a      	movs	r1, #90	@ 0x5a
 8003cce:	5a5b      	ldrh	r3, [r3, r1]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fc ff32 	bl	8000b44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ce0:	e0e0      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2258      	movs	r2, #88	@ 0x58
 8003ce6:	5a9b      	ldrh	r3, [r3, r2]
 8003ce8:	227e      	movs	r2, #126	@ 0x7e
 8003cea:	18ba      	adds	r2, r7, r2
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d000      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x438>
 8003cf2:	e0d7      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d000      	beq.n	8003d06 <HAL_UART_IRQHandler+0x44a>
 8003d04:	e0ce      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2258      	movs	r2, #88	@ 0x58
 8003d10:	5a9a      	ldrh	r2, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7fc ff14 	bl	8000b44 <HAL_UARTEx_RxEventCallback>
      return;
 8003d1c:	e0c2      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2258      	movs	r2, #88	@ 0x58
 8003d22:	5a99      	ldrh	r1, [r3, r2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	225a      	movs	r2, #90	@ 0x5a
 8003d28:	5a9b      	ldrh	r3, [r3, r2]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	208e      	movs	r0, #142	@ 0x8e
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	1a8a      	subs	r2, r1, r2
 8003d32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	225a      	movs	r2, #90	@ 0x5a
 8003d38:	5a9b      	ldrh	r3, [r3, r2]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <HAL_UART_IRQHandler+0x486>
 8003d40:	e0b2      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003d42:	183b      	adds	r3, r7, r0
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d100      	bne.n	8003d4c <HAL_UART_IRQHandler+0x490>
 8003d4a:	e0ad      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d54:	2488      	movs	r4, #136	@ 0x88
 8003d56:	193a      	adds	r2, r7, r4
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4951      	ldr	r1, [pc, #324]	@ (8003eb8 <HAL_UART_IRQHandler+0x5fc>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8310 	mrs	r3, PRIMASK
 8003d88:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	2484      	movs	r4, #132	@ 0x84
 8003d8e:	193a      	adds	r2, r7, r4
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	438a      	bics	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f383 8810 	msr	PRIMASK, r3
}
 8003dba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	2480      	movs	r4, #128	@ 0x80
 8003dda:	193a      	adds	r2, r7, r4
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	2301      	movs	r3, #1
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2110      	movs	r1, #16
 8003df6:	438a      	bics	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fc fe94 	bl	8000b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e1c:	e044      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e1e:	23a4      	movs	r3, #164	@ 0xa4
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	035b      	lsls	r3, r3, #13
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d010      	beq.n	8003e4e <HAL_UART_IRQHandler+0x592>
 8003e2c:	239c      	movs	r3, #156	@ 0x9c
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	03db      	lsls	r3, r3, #15
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	0352      	lsls	r2, r2, #13
 8003e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 ffd7 	bl	8004dfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e4c:	e02f      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e4e:	23a4      	movs	r3, #164	@ 0xa4
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	4013      	ands	r3, r2
 8003e58:	d00f      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e5a:	23a0      	movs	r3, #160	@ 0xa0
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	@ 0x80
 8003e62:	4013      	ands	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01e      	beq.n	8003eac <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	0010      	movs	r0, r2
 8003e76:	4798      	blx	r3
    }
    return;
 8003e78:	e018      	b.n	8003eac <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e7a:	23a4      	movs	r3, #164	@ 0xa4
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	4013      	ands	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x5f2>
 8003e86:	23a0      	movs	r3, #160	@ 0xa0
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 ff85 	bl	8004da4 <UART_EndTransmit_IT>
    return;
 8003e9a:	e008      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	e006      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
    return;
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	e004      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	e002      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
      return;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	e000      	b.n	8003eae <HAL_UART_IRQHandler+0x5f2>
    return;
 8003eac:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b02b      	add	sp, #172	@ 0xac
 8003eb2:	bd90      	pop	{r4, r7, pc}
 8003eb4:	fffffeff 	.word	0xfffffeff
 8003eb8:	fffffedf 	.word	0xfffffedf

08003ebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f08:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	589b      	ldr	r3, [r3, r2]
 8003f10:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2284      	movs	r2, #132	@ 0x84
 8003f2c:	589b      	ldr	r3, [r3, r2]
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b5b0      	push	{r4, r5, r7, lr}
 8003f3a:	b08e      	sub	sp, #56	@ 0x38
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f40:	231a      	movs	r3, #26
 8003f42:	2218      	movs	r2, #24
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4ac3      	ldr	r2, [pc, #780]	@ (8004278 <UART_SetConfig+0x340>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4abe      	ldr	r2, [pc, #760]	@ (800427c <UART_SetConfig+0x344>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4ab8      	ldr	r2, [pc, #736]	@ (8004280 <UART_SetConfig+0x348>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	4ab4      	ldr	r2, [pc, #720]	@ (8004284 <UART_SetConfig+0x34c>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4ab0      	ldr	r2, [pc, #704]	@ (8004288 <UART_SetConfig+0x350>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d131      	bne.n	8004030 <UART_SetConfig+0xf8>
 8003fcc:	4baf      	ldr	r3, [pc, #700]	@ (800428c <UART_SetConfig+0x354>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d01d      	beq.n	8004014 <UART_SetConfig+0xdc>
 8003fd8:	d823      	bhi.n	8004022 <UART_SetConfig+0xea>
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d00c      	beq.n	8003ff8 <UART_SetConfig+0xc0>
 8003fde:	d820      	bhi.n	8004022 <UART_SetConfig+0xea>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <UART_SetConfig+0xb2>
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d00e      	beq.n	8004006 <UART_SetConfig+0xce>
 8003fe8:	e01b      	b.n	8004022 <UART_SetConfig+0xea>
 8003fea:	231b      	movs	r3, #27
 8003fec:	2218      	movs	r2, #24
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e0b4      	b.n	8004162 <UART_SetConfig+0x22a>
 8003ff8:	231b      	movs	r3, #27
 8003ffa:	2218      	movs	r2, #24
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e0ad      	b.n	8004162 <UART_SetConfig+0x22a>
 8004006:	231b      	movs	r3, #27
 8004008:	2218      	movs	r2, #24
 800400a:	189b      	adds	r3, r3, r2
 800400c:	19db      	adds	r3, r3, r7
 800400e:	2204      	movs	r2, #4
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e0a6      	b.n	8004162 <UART_SetConfig+0x22a>
 8004014:	231b      	movs	r3, #27
 8004016:	2218      	movs	r2, #24
 8004018:	189b      	adds	r3, r3, r2
 800401a:	19db      	adds	r3, r3, r7
 800401c:	2208      	movs	r2, #8
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e09f      	b.n	8004162 <UART_SetConfig+0x22a>
 8004022:	231b      	movs	r3, #27
 8004024:	2218      	movs	r2, #24
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	2210      	movs	r2, #16
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e098      	b.n	8004162 <UART_SetConfig+0x22a>
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a96      	ldr	r2, [pc, #600]	@ (8004290 <UART_SetConfig+0x358>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d131      	bne.n	800409e <UART_SetConfig+0x166>
 800403a:	4b94      	ldr	r3, [pc, #592]	@ (800428c <UART_SetConfig+0x354>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	220c      	movs	r2, #12
 8004040:	4013      	ands	r3, r2
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d01d      	beq.n	8004082 <UART_SetConfig+0x14a>
 8004046:	d823      	bhi.n	8004090 <UART_SetConfig+0x158>
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00c      	beq.n	8004066 <UART_SetConfig+0x12e>
 800404c:	d820      	bhi.n	8004090 <UART_SetConfig+0x158>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <UART_SetConfig+0x120>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00e      	beq.n	8004074 <UART_SetConfig+0x13c>
 8004056:	e01b      	b.n	8004090 <UART_SetConfig+0x158>
 8004058:	231b      	movs	r3, #27
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e07d      	b.n	8004162 <UART_SetConfig+0x22a>
 8004066:	231b      	movs	r3, #27
 8004068:	2218      	movs	r2, #24
 800406a:	189b      	adds	r3, r3, r2
 800406c:	19db      	adds	r3, r3, r7
 800406e:	2202      	movs	r2, #2
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e076      	b.n	8004162 <UART_SetConfig+0x22a>
 8004074:	231b      	movs	r3, #27
 8004076:	2218      	movs	r2, #24
 8004078:	189b      	adds	r3, r3, r2
 800407a:	19db      	adds	r3, r3, r7
 800407c:	2204      	movs	r2, #4
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e06f      	b.n	8004162 <UART_SetConfig+0x22a>
 8004082:	231b      	movs	r3, #27
 8004084:	2218      	movs	r2, #24
 8004086:	189b      	adds	r3, r3, r2
 8004088:	19db      	adds	r3, r3, r7
 800408a:	2208      	movs	r2, #8
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e068      	b.n	8004162 <UART_SetConfig+0x22a>
 8004090:	231b      	movs	r3, #27
 8004092:	2218      	movs	r2, #24
 8004094:	189b      	adds	r3, r3, r2
 8004096:	19db      	adds	r3, r3, r7
 8004098:	2210      	movs	r2, #16
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e061      	b.n	8004162 <UART_SetConfig+0x22a>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004294 <UART_SetConfig+0x35c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d106      	bne.n	80040b6 <UART_SetConfig+0x17e>
 80040a8:	231b      	movs	r3, #27
 80040aa:	2218      	movs	r2, #24
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e055      	b.n	8004162 <UART_SetConfig+0x22a>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a77      	ldr	r2, [pc, #476]	@ (8004298 <UART_SetConfig+0x360>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d106      	bne.n	80040ce <UART_SetConfig+0x196>
 80040c0:	231b      	movs	r3, #27
 80040c2:	2218      	movs	r2, #24
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e049      	b.n	8004162 <UART_SetConfig+0x22a>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004280 <UART_SetConfig+0x348>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d13e      	bne.n	8004156 <UART_SetConfig+0x21e>
 80040d8:	4b6c      	ldr	r3, [pc, #432]	@ (800428c <UART_SetConfig+0x354>)
 80040da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040dc:	23c0      	movs	r3, #192	@ 0xc0
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4013      	ands	r3, r2
 80040e2:	22c0      	movs	r2, #192	@ 0xc0
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <UART_SetConfig+0x202>
 80040ea:	22c0      	movs	r2, #192	@ 0xc0
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d82a      	bhi.n	8004148 <UART_SetConfig+0x210>
 80040f2:	2280      	movs	r2, #128	@ 0x80
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d011      	beq.n	800411e <UART_SetConfig+0x1e6>
 80040fa:	2280      	movs	r2, #128	@ 0x80
 80040fc:	0112      	lsls	r2, r2, #4
 80040fe:	4293      	cmp	r3, r2
 8004100:	d822      	bhi.n	8004148 <UART_SetConfig+0x210>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <UART_SetConfig+0x1d8>
 8004106:	2280      	movs	r2, #128	@ 0x80
 8004108:	00d2      	lsls	r2, r2, #3
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <UART_SetConfig+0x1f4>
 800410e:	e01b      	b.n	8004148 <UART_SetConfig+0x210>
 8004110:	231b      	movs	r3, #27
 8004112:	2218      	movs	r2, #24
 8004114:	189b      	adds	r3, r3, r2
 8004116:	19db      	adds	r3, r3, r7
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e021      	b.n	8004162 <UART_SetConfig+0x22a>
 800411e:	231b      	movs	r3, #27
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e01a      	b.n	8004162 <UART_SetConfig+0x22a>
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e013      	b.n	8004162 <UART_SetConfig+0x22a>
 800413a:	231b      	movs	r3, #27
 800413c:	2218      	movs	r2, #24
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2208      	movs	r2, #8
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e00c      	b.n	8004162 <UART_SetConfig+0x22a>
 8004148:	231b      	movs	r3, #27
 800414a:	2218      	movs	r2, #24
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2210      	movs	r2, #16
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e005      	b.n	8004162 <UART_SetConfig+0x22a>
 8004156:	231b      	movs	r3, #27
 8004158:	2218      	movs	r2, #24
 800415a:	189b      	adds	r3, r3, r2
 800415c:	19db      	adds	r3, r3, r7
 800415e:	2210      	movs	r2, #16
 8004160:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a46      	ldr	r2, [pc, #280]	@ (8004280 <UART_SetConfig+0x348>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d000      	beq.n	800416e <UART_SetConfig+0x236>
 800416c:	e09a      	b.n	80042a4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800416e:	231b      	movs	r3, #27
 8004170:	2218      	movs	r2, #24
 8004172:	189b      	adds	r3, r3, r2
 8004174:	19db      	adds	r3, r3, r7
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d01d      	beq.n	80041b8 <UART_SetConfig+0x280>
 800417c:	dc20      	bgt.n	80041c0 <UART_SetConfig+0x288>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d015      	beq.n	80041ae <UART_SetConfig+0x276>
 8004182:	dc1d      	bgt.n	80041c0 <UART_SetConfig+0x288>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <UART_SetConfig+0x256>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0x260>
 800418c:	e018      	b.n	80041c0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418e:	f7fe fbd5 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8004192:	0003      	movs	r3, r0
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004196:	e01c      	b.n	80041d2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004198:	4b3c      	ldr	r3, [pc, #240]	@ (800428c <UART_SetConfig+0x354>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	4013      	ands	r3, r2
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041a2:	4b3e      	ldr	r3, [pc, #248]	@ (800429c <UART_SetConfig+0x364>)
 80041a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041a6:	e014      	b.n	80041d2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80041a8:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <UART_SetConfig+0x368>)
 80041aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041ac:	e011      	b.n	80041d2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	f7fe fb35 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80041b2:	0003      	movs	r3, r0
 80041b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041b6:	e00c      	b.n	80041d2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041be:	e008      	b.n	80041d2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80041c4:	231a      	movs	r3, #26
 80041c6:	2218      	movs	r2, #24
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
        break;
 80041d0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d100      	bne.n	80041da <UART_SetConfig+0x2a2>
 80041d8:	e133      	b.n	8004442 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	0013      	movs	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d305      	bcc.n	80041f6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d906      	bls.n	8004204 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80041f6:	231a      	movs	r3, #26
 80041f8:	2218      	movs	r2, #24
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	19db      	adds	r3, r3, r7
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e11e      	b.n	8004442 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	6939      	ldr	r1, [r7, #16]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	000b      	movs	r3, r1
 8004212:	0e1b      	lsrs	r3, r3, #24
 8004214:	0010      	movs	r0, r2
 8004216:	0205      	lsls	r5, r0, #8
 8004218:	431d      	orrs	r5, r3
 800421a:	000b      	movs	r3, r1
 800421c:	021c      	lsls	r4, r3, #8
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68b8      	ldr	r0, [r7, #8]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	1900      	adds	r0, r0, r4
 8004230:	4169      	adcs	r1, r5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f7fb fff6 	bl	8000230 <__aeabi_uldivmod>
 8004244:	0002      	movs	r2, r0
 8004246:	000b      	movs	r3, r1
 8004248:	0013      	movs	r3, r2
 800424a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800424c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800424e:	23c0      	movs	r3, #192	@ 0xc0
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	429a      	cmp	r2, r3
 8004254:	d309      	bcc.n	800426a <UART_SetConfig+0x332>
 8004256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	035b      	lsls	r3, r3, #13
 800425c:	429a      	cmp	r2, r3
 800425e:	d204      	bcs.n	800426a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	e0eb      	b.n	8004442 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800426a:	231a      	movs	r3, #26
 800426c:	2218      	movs	r2, #24
 800426e:	189b      	adds	r3, r3, r2
 8004270:	19db      	adds	r3, r3, r7
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e0e4      	b.n	8004442 <UART_SetConfig+0x50a>
 8004278:	efff69f3 	.word	0xefff69f3
 800427c:	ffffcfff 	.word	0xffffcfff
 8004280:	40004800 	.word	0x40004800
 8004284:	fffff4ff 	.word	0xfffff4ff
 8004288:	40013800 	.word	0x40013800
 800428c:	40021000 	.word	0x40021000
 8004290:	40004400 	.word	0x40004400
 8004294:	40004c00 	.word	0x40004c00
 8004298:	40005000 	.word	0x40005000
 800429c:	003d0900 	.word	0x003d0900
 80042a0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d000      	beq.n	80042b2 <UART_SetConfig+0x37a>
 80042b0:	e070      	b.n	8004394 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80042b2:	231b      	movs	r3, #27
 80042b4:	2218      	movs	r2, #24
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	19db      	adds	r3, r3, r7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d822      	bhi.n	8004306 <UART_SetConfig+0x3ce>
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	4b67      	ldr	r3, [pc, #412]	@ (8004460 <UART_SetConfig+0x528>)
 80042c4:	18d3      	adds	r3, r2, r3
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ca:	f7fe fb37 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80042ce:	0003      	movs	r3, r0
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042d2:	e021      	b.n	8004318 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fb48 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80042d8:	0003      	movs	r3, r0
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042dc:	e01c      	b.n	8004318 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042de:	4b61      	ldr	r3, [pc, #388]	@ (8004464 <UART_SetConfig+0x52c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2210      	movs	r2, #16
 80042e4:	4013      	ands	r3, r2
 80042e6:	d002      	beq.n	80042ee <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004468 <UART_SetConfig+0x530>)
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042ec:	e014      	b.n	8004318 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80042ee:	4b5f      	ldr	r3, [pc, #380]	@ (800446c <UART_SetConfig+0x534>)
 80042f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042f2:	e011      	b.n	8004318 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f4:	f7fe fa92 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80042f8:	0003      	movs	r3, r0
 80042fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042fc:	e00c      	b.n	8004318 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004304:	e008      	b.n	8004318 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800430a:	231a      	movs	r3, #26
 800430c:	2218      	movs	r2, #24
 800430e:	189b      	adds	r3, r3, r2
 8004310:	19db      	adds	r3, r3, r7
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
        break;
 8004316:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d100      	bne.n	8004320 <UART_SetConfig+0x3e8>
 800431e:	e090      	b.n	8004442 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	005a      	lsls	r2, r3, #1
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	18d2      	adds	r2, r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0019      	movs	r1, r3
 8004332:	0010      	movs	r0, r2
 8004334:	f7fb fef0 	bl	8000118 <__udivsi3>
 8004338:	0003      	movs	r3, r0
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d921      	bls.n	8004386 <UART_SetConfig+0x44e>
 8004342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	429a      	cmp	r2, r3
 800434a:	d21c      	bcs.n	8004386 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	b29a      	uxth	r2, r3
 8004350:	200e      	movs	r0, #14
 8004352:	2418      	movs	r4, #24
 8004354:	1903      	adds	r3, r0, r4
 8004356:	19db      	adds	r3, r3, r7
 8004358:	210f      	movs	r1, #15
 800435a:	438a      	bics	r2, r1
 800435c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	2207      	movs	r2, #7
 8004366:	4013      	ands	r3, r2
 8004368:	b299      	uxth	r1, r3
 800436a:	1903      	adds	r3, r0, r4
 800436c:	19db      	adds	r3, r3, r7
 800436e:	1902      	adds	r2, r0, r4
 8004370:	19d2      	adds	r2, r2, r7
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1902      	adds	r2, r0, r4
 800437e:	19d2      	adds	r2, r2, r7
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	e05d      	b.n	8004442 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004386:	231a      	movs	r3, #26
 8004388:	2218      	movs	r2, #24
 800438a:	189b      	adds	r3, r3, r2
 800438c:	19db      	adds	r3, r3, r7
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e056      	b.n	8004442 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004394:	231b      	movs	r3, #27
 8004396:	2218      	movs	r2, #24
 8004398:	189b      	adds	r3, r3, r2
 800439a:	19db      	adds	r3, r3, r7
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d822      	bhi.n	80043e8 <UART_SetConfig+0x4b0>
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	4b32      	ldr	r3, [pc, #200]	@ (8004470 <UART_SetConfig+0x538>)
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fac6 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80043b0:	0003      	movs	r3, r0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043b4:	e021      	b.n	80043fa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b6:	f7fe fad7 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80043ba:	0003      	movs	r3, r0
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043be:	e01c      	b.n	80043fa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c0:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <UART_SetConfig+0x52c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	4013      	ands	r3, r2
 80043c8:	d002      	beq.n	80043d0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043ca:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <UART_SetConfig+0x530>)
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043ce:	e014      	b.n	80043fa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80043d0:	4b26      	ldr	r3, [pc, #152]	@ (800446c <UART_SetConfig+0x534>)
 80043d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043d4:	e011      	b.n	80043fa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d6:	f7fe fa21 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80043da:	0003      	movs	r3, r0
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043de:	e00c      	b.n	80043fa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043e6:	e008      	b.n	80043fa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80043ec:	231a      	movs	r3, #26
 80043ee:	2218      	movs	r2, #24
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
        break;
 80043f8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	085a      	lsrs	r2, r3, #1
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	18d2      	adds	r2, r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0019      	movs	r1, r3
 8004410:	0010      	movs	r0, r2
 8004412:	f7fb fe81 	bl	8000118 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d90a      	bls.n	8004436 <UART_SetConfig+0x4fe>
 8004420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	429a      	cmp	r2, r3
 8004428:	d205      	bcs.n	8004436 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	b29a      	uxth	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e005      	b.n	8004442 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004436:	231a      	movs	r3, #26
 8004438:	2218      	movs	r2, #24
 800443a:	189b      	adds	r3, r3, r2
 800443c:	19db      	adds	r3, r3, r7
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2200      	movs	r2, #0
 8004446:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2200      	movs	r2, #0
 800444c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800444e:	231a      	movs	r3, #26
 8004450:	2218      	movs	r2, #24
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	781b      	ldrb	r3, [r3, #0]
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b00e      	add	sp, #56	@ 0x38
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	08005ab0 	.word	0x08005ab0
 8004464:	40021000 	.word	0x40021000
 8004468:	003d0900 	.word	0x003d0900
 800446c:	00f42400 	.word	0x00f42400
 8004470:	08005ad4 	.word	0x08005ad4

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	2208      	movs	r2, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a4a      	ldr	r2, [pc, #296]	@ (80045b8 <UART_AdvFeatureConfig+0x144>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2201      	movs	r2, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a43      	ldr	r2, [pc, #268]	@ (80045bc <UART_AdvFeatureConfig+0x148>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a3b      	ldr	r2, [pc, #236]	@ (80045c0 <UART_AdvFeatureConfig+0x14c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	2204      	movs	r2, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a34      	ldr	r2, [pc, #208]	@ (80045c4 <UART_AdvFeatureConfig+0x150>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2210      	movs	r2, #16
 800450a:	4013      	ands	r3, r2
 800450c:	d00b      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <UART_AdvFeatureConfig+0x154>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a25      	ldr	r2, [pc, #148]	@ (80045cc <UART_AdvFeatureConfig+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	2240      	movs	r2, #64	@ 0x40
 800454e:	4013      	ands	r3, r2
 8004550:	d01d      	beq.n	800458e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <UART_AdvFeatureConfig+0x15c>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	035b      	lsls	r3, r3, #13
 8004572:	429a      	cmp	r2, r3
 8004574:	d10b      	bne.n	800458e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <UART_AdvFeatureConfig+0x160>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	2280      	movs	r2, #128	@ 0x80
 8004594:	4013      	ands	r3, r2
 8004596:	d00b      	beq.n	80045b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a0e      	ldr	r2, [pc, #56]	@ (80045d8 <UART_AdvFeatureConfig+0x164>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ffff7fff 	.word	0xffff7fff
 80045bc:	fffdffff 	.word	0xfffdffff
 80045c0:	fffeffff 	.word	0xfffeffff
 80045c4:	fffbffff 	.word	0xfffbffff
 80045c8:	ffffefff 	.word	0xffffefff
 80045cc:	ffffdfff 	.word	0xffffdfff
 80045d0:	ffefffff 	.word	0xffefffff
 80045d4:	ff9fffff 	.word	0xff9fffff
 80045d8:	fff7ffff 	.word	0xfff7ffff

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b092      	sub	sp, #72	@ 0x48
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2284      	movs	r2, #132	@ 0x84
 80045e8:	2100      	movs	r1, #0
 80045ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc fd6c 	bl	80010c8 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2208      	movs	r2, #8
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d12c      	bne.n	800465c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	0391      	lsls	r1, r2, #14
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4a46      	ldr	r2, [pc, #280]	@ (8004724 <UART_CheckIdleState+0x148>)
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	f000 f88c 	bl	800472c <UART_WaitOnFlagUntilTimeout>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d021      	beq.n	800465c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004620:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004622:	2301      	movs	r3, #1
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	@ 0x80
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2278      	movs	r2, #120	@ 0x78
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e05f      	b.n	800471c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	2b04      	cmp	r3, #4
 8004668:	d146      	bne.n	80046f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466c:	2280      	movs	r2, #128	@ 0x80
 800466e:	03d1      	lsls	r1, r2, #15
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4a2c      	ldr	r2, [pc, #176]	@ (8004724 <UART_CheckIdleState+0x148>)
 8004674:	9200      	str	r2, [sp, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	f000 f858 	bl	800472c <UART_WaitOnFlagUntilTimeout>
 800467c:	1e03      	subs	r3, r0, #0
 800467e:	d03b      	beq.n	80046f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004680:	f3ef 8310 	mrs	r3, PRIMASK
 8004684:	60fb      	str	r3, [r7, #12]
  return(result);
 8004686:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
 800468a:	2301      	movs	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f383 8810 	msr	PRIMASK, r3
}
 8004694:	46c0      	nop			@ (mov r8, r8)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4921      	ldr	r1, [pc, #132]	@ (8004728 <UART_CheckIdleState+0x14c>)
 80046a2:	400a      	ands	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8310 	mrs	r3, PRIMASK
 80046b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80046b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80046bc:	2301      	movs	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	438a      	bics	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2280      	movs	r2, #128	@ 0x80
 80046e8:	2120      	movs	r1, #32
 80046ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2278      	movs	r2, #120	@ 0x78
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e011      	b.n	800471c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2280      	movs	r2, #128	@ 0x80
 8004702:	2120      	movs	r1, #32
 8004704:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2278      	movs	r2, #120	@ 0x78
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b010      	add	sp, #64	@ 0x40
 8004722:	bd80      	pop	{r7, pc}
 8004724:	01ffffff 	.word	0x01ffffff
 8004728:	fffffedf 	.word	0xfffffedf

0800472c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473c:	e051      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	3301      	adds	r3, #1
 8004742:	d04e      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fc fcc0 	bl	80010c8 <HAL_GetTick>
 8004748:	0002      	movs	r2, r0
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e051      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2204      	movs	r2, #4
 8004766:	4013      	ands	r3, r2
 8004768:	d03b      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b80      	cmp	r3, #128	@ 0x80
 800476e:	d038      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d035      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2208      	movs	r2, #8
 800477e:	4013      	ands	r3, r2
 8004780:	2b08      	cmp	r3, #8
 8004782:	d111      	bne.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2208      	movs	r2, #8
 800478a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	0018      	movs	r0, r3
 8004790:	f000 f900 	bl	8004994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2284      	movs	r2, #132	@ 0x84
 8004798:	2108      	movs	r1, #8
 800479a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2278      	movs	r2, #120	@ 0x78
 80047a0:	2100      	movs	r1, #0
 80047a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e02c      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	401a      	ands	r2, r3
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d112      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2280      	movs	r2, #128	@ 0x80
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 f8e3 	bl	8004994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2284      	movs	r2, #132	@ 0x84
 80047d2:	2120      	movs	r1, #32
 80047d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2278      	movs	r2, #120	@ 0x78
 80047da:	2100      	movs	r1, #0
 80047dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e00f      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	425a      	negs	r2, r3
 80047f2:	4153      	adcs	r3, r2
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	001a      	movs	r2, r3
 80047f8:	1dfb      	adds	r3, r7, #7
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d09e      	beq.n	800473e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b004      	add	sp, #16
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b090      	sub	sp, #64	@ 0x40
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	1dbb      	adds	r3, r7, #6
 8004818:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1dba      	adds	r2, r7, #6
 8004824:	2158      	movs	r1, #88	@ 0x58
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2284      	movs	r2, #132	@ 0x84
 800482e:	2100      	movs	r1, #0
 8004830:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2280      	movs	r2, #128	@ 0x80
 8004836:	2122      	movs	r1, #34	@ 0x22
 8004838:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483e:	2b00      	cmp	r3, #0
 8004840:	d028      	beq.n	8004894 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004846:	4a3e      	ldr	r2, [pc, #248]	@ (8004940 <UART_Start_Receive_DMA+0x134>)
 8004848:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484e:	4a3d      	ldr	r2, [pc, #244]	@ (8004944 <UART_Start_Receive_DMA+0x138>)
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004856:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <UART_Start_Receive_DMA+0x13c>)
 8004858:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	2200      	movs	r2, #0
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3324      	adds	r3, #36	@ 0x24
 800486c:	0019      	movs	r1, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	001a      	movs	r2, r3
 8004874:	1dbb      	adds	r3, r7, #6
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	f7fc fdaa 	bl	80013d0 <HAL_DMA_Start_IT>
 800487c:	1e03      	subs	r3, r0, #0
 800487e:	d009      	beq.n	8004894 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2284      	movs	r2, #132	@ 0x84
 8004884:	2110      	movs	r1, #16
 8004886:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	2120      	movs	r1, #32
 800488e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e050      	b.n	8004936 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d019      	beq.n	80048d0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489c:	f3ef 8310 	mrs	r3, PRIMASK
 80048a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a6:	2301      	movs	r3, #1
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	f383 8810 	msr	PRIMASK, r3
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2180      	movs	r1, #128	@ 0x80
 80048be:	0049      	lsls	r1, r1, #1
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	f383 8810 	msr	PRIMASK, r3
}
 80048ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d0:	f3ef 8310 	mrs	r3, PRIMASK
 80048d4:	613b      	str	r3, [r7, #16]
  return(result);
 80048d6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004902:	f3ef 8310 	mrs	r3, PRIMASK
 8004906:	61fb      	str	r3, [r7, #28]
  return(result);
 8004908:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
 800490c:	2301      	movs	r3, #1
 800490e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2140      	movs	r1, #64	@ 0x40
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b010      	add	sp, #64	@ 0x40
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	08004b15 	.word	0x08004b15
 8004944:	08004c7d 	.word	0x08004c7d
 8004948:	08004cfb 	.word	0x08004cfb

0800494c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	60bb      	str	r3, [r7, #8]
  return(result);
 800495a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	2301      	movs	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	21c0      	movs	r1, #192	@ 0xc0
 8004976:	438a      	bics	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}

08004994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	@ 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499c:	f3ef 8310 	mrs	r3, PRIMASK
 80049a0:	617b      	str	r3, [r7, #20]
  return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f383 8810 	msr	PRIMASK, r3
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4926      	ldr	r1, [pc, #152]	@ (8004a58 <UART_EndRxTransfer+0xc4>)
 80049be:	400a      	ands	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ce:	f3ef 8310 	mrs	r3, PRIMASK
 80049d2:	623b      	str	r3, [r7, #32]
  return(result);
 80049d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d8:	2301      	movs	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	f383 8810 	msr	PRIMASK, r3
}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	438a      	bics	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d118      	bne.n	8004a3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a08:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a12:	2301      	movs	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2110      	movs	r1, #16
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	2120      	movs	r1, #32
 8004a40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b00e      	add	sp, #56	@ 0x38
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	fffffedf 	.word	0xfffffedf

08004a5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	@ 0x30
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2220      	movs	r2, #32
 8004a72:	4013      	ands	r3, r2
 8004a74:	d135      	bne.n	8004ae2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	2252      	movs	r2, #82	@ 0x52
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a88:	2301      	movs	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f383 8810 	msr	PRIMASK, r3
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2180      	movs	r1, #128	@ 0x80
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ab6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f383 8810 	msr	PRIMASK, r3
}
 8004ac4:	46c0      	nop			@ (mov r8, r8)
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2140      	movs	r1, #64	@ 0x40
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	e004      	b.n	8004aec <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff f9e9 	bl	8003ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b00c      	add	sp, #48	@ 0x30
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7ff f9e1 	bl	8003ecc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b094      	sub	sp, #80	@ 0x50
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d16f      	bne.n	8004c0e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b30:	225a      	movs	r2, #90	@ 0x5a
 8004b32:	2100      	movs	r1, #0
 8004b34:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004b3c:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b40:	2301      	movs	r3, #1
 8004b42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4948      	ldr	r1, [pc, #288]	@ (8004c78 <UART_DMAReceiveCplt+0x164>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f383 8810 	msr	PRIMASK, r3
}
 8004b66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b68:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6c:	623b      	str	r3, [r7, #32]
  return(result);
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	2301      	movs	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2140      	movs	r1, #64	@ 0x40
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bce:	2280      	movs	r2, #128	@ 0x80
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d118      	bne.n	8004c0e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be2:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004be6:	2301      	movs	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2110      	movs	r1, #16
 8004bfe:	438a      	bics	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c10:	2200      	movs	r2, #0
 8004c12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d124      	bne.n	8004c66 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1e:	225a      	movs	r2, #90	@ 0x5a
 8004c20:	2100      	movs	r1, #0
 8004c22:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	213a      	movs	r1, #58	@ 0x3a
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c32:	2258      	movs	r2, #88	@ 0x58
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	187a      	adds	r2, r7, r1
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d204      	bcs.n	8004c48 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c40:	187a      	adds	r2, r7, r1
 8004c42:	215a      	movs	r1, #90	@ 0x5a
 8004c44:	8812      	ldrh	r2, [r2, #0]
 8004c46:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4a:	2258      	movs	r2, #88	@ 0x58
 8004c4c:	5a9a      	ldrh	r2, [r3, r2]
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c50:	215a      	movs	r1, #90	@ 0x5a
 8004c52:	5a5b      	ldrh	r3, [r3, r1]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5c:	0011      	movs	r1, r2
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fb ff70 	bl	8000b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c64:	e003      	b.n	8004c6e <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff f937 	bl	8003edc <HAL_UART_RxCpltCallback>
}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b014      	add	sp, #80	@ 0x50
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	fffffeff 	.word	0xfffffeff

08004c7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d128      	bne.n	8004cea <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2258      	movs	r2, #88	@ 0x58
 8004c9c:	5a9b      	ldrh	r3, [r3, r2]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	b299      	uxth	r1, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	225a      	movs	r2, #90	@ 0x5a
 8004ca6:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	210a      	movs	r1, #10
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2258      	movs	r2, #88	@ 0x58
 8004cb8:	5a9b      	ldrh	r3, [r3, r2]
 8004cba:	187a      	adds	r2, r7, r1
 8004cbc:	8812      	ldrh	r2, [r2, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d804      	bhi.n	8004ccc <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	187a      	adds	r2, r7, r1
 8004cc6:	215a      	movs	r1, #90	@ 0x5a
 8004cc8:	8812      	ldrh	r2, [r2, #0]
 8004cca:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2258      	movs	r2, #88	@ 0x58
 8004cd0:	5a9a      	ldrh	r2, [r3, r2]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	215a      	movs	r1, #90	@ 0x5a
 8004cd6:	5a5b      	ldrh	r3, [r3, r1]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	0011      	movs	r1, r2
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f7fb ff2e 	bl	8000b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ce8:	e003      	b.n	8004cf2 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7ff f8fd 	bl	8003eec <HAL_UART_RxHalfCpltCallback>
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2280      	movs	r2, #128	@ 0x80
 8004d12:	589b      	ldr	r3, [r3, r2]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2280      	movs	r2, #128	@ 0x80
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b80      	cmp	r3, #128	@ 0x80
 8004d22:	d10a      	bne.n	8004d3a <UART_DMAError+0x40>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b21      	cmp	r3, #33	@ 0x21
 8004d28:	d107      	bne.n	8004d3a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2252      	movs	r2, #82	@ 0x52
 8004d2e:	2100      	movs	r1, #0
 8004d30:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fe09 	bl	800494c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2240      	movs	r2, #64	@ 0x40
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d10a      	bne.n	8004d5e <UART_DMAError+0x64>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b22      	cmp	r3, #34	@ 0x22
 8004d4c:	d107      	bne.n	8004d5e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	225a      	movs	r2, #90	@ 0x5a
 8004d52:	2100      	movs	r1, #0
 8004d54:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff fe1b 	bl	8004994 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2284      	movs	r2, #132	@ 0x84
 8004d62:	589b      	ldr	r3, [r3, r2]
 8004d64:	2210      	movs	r2, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2184      	movs	r1, #132	@ 0x84
 8004d6c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fb ff03 	bl	8000b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b006      	add	sp, #24
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	225a      	movs	r2, #90	@ 0x5a
 8004d90:	2100      	movs	r1, #0
 8004d92:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7fb fef0 	bl	8000b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b004      	add	sp, #16
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004db2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	2301      	movs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			@ (mov r8, r8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2140      	movs	r1, #64	@ 0x40
 8004dce:	438a      	bics	r2, r1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff f865 	bl	8003ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b006      	add	sp, #24
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0a:	b5b0      	push	{r4, r5, r7, lr}
 8004e0c:	b08a      	sub	sp, #40	@ 0x28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	1dbb      	adds	r3, r7, #6
 8004e16:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2280      	movs	r2, #128	@ 0x80
 8004e1c:	589b      	ldr	r3, [r3, r2]
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d156      	bne.n	8004ed0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004e28:	1dbb      	adds	r3, r7, #6
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e04e      	b.n	8004ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	015b      	lsls	r3, r3, #5
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d109      	bne.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d001      	beq.n	8004e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e03e      	b.n	8004ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e60:	2527      	movs	r5, #39	@ 0x27
 8004e62:	197c      	adds	r4, r7, r5
 8004e64:	1dbb      	adds	r3, r7, #6
 8004e66:	881a      	ldrh	r2, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fccd 	bl	800480c <UART_Start_Receive_DMA>
 8004e72:	0003      	movs	r3, r0
 8004e74:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e76:	197b      	adds	r3, r7, r5
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d124      	bne.n	8004ec8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d11c      	bne.n	8004ec0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e92:	617b      	str	r3, [r7, #20]
  return(result);
 8004e94:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2110      	movs	r1, #16
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f383 8810 	msr	PRIMASK, r3
}
 8004ebe:	e003      	b.n	8004ec8 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ec0:	2327      	movs	r3, #39	@ 0x27
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004ec8:	2327      	movs	r3, #39	@ 0x27
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	e000      	b.n	8004ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b00a      	add	sp, #40	@ 0x28
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}

08004eda <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fc01 	bl	80056f0 <malloc>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b004      	add	sp, #16
 8004efa:	bd80      	pop	{r7, pc}

08004efc <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <ATC_Free+0x26>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fbf4 	bl	8005704 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
  }
}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b002      	add	sp, #8
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8a9b      	ldrh	r3, [r3, #20]
 8004f40:	001a      	movs	r2, r3
 8004f42:	2100      	movs	r1, #0
 8004f44:	f000 fc9a 	bl	800587c <memset>
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	1dbb      	adds	r3, r7, #6
 8004f5c:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004f5e:	2417      	movs	r4, #23
 8004f60:	193b      	adds	r3, r7, r4
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1dba      	adds	r2, r7, #6
 8004f6a:	8812      	ldrh	r2, [r2, #0]
 8004f6c:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	1dbb      	adds	r3, r7, #6
 8004f74:	881a      	ldrh	r2, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	0019      	movs	r1, r3
 8004f7a:	f7fe fafb 	bl	8003574 <HAL_UART_Transmit_DMA>
 8004f7e:	1e03      	subs	r3, r0, #0
 8004f80:	d103      	bne.n	8004f8a <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e000      	b.n	8004f8c <ATC_TxRaw+0x3c>
      break;
 8004f8a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8004f8c:	2317      	movs	r3, #23
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	781b      	ldrb	r3, [r3, #0]
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b007      	add	sp, #28
 8004f98:	bd90      	pop	{r4, r7, pc}

08004f9a <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fe ffa8 	bl	8003efc <HAL_UART_GetState>
 8004fac:	0003      	movs	r3, r0
 8004fae:	2b21      	cmp	r3, #33	@ 0x21
 8004fb0:	d007      	beq.n	8004fc2 <ATC_TxBusy+0x28>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7fe ffa0 	bl	8003efc <HAL_UART_GetState>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	2b23      	cmp	r3, #35	@ 0x23
 8004fc0:	d101      	bne.n	8004fc6 <ATC_TxBusy+0x2c>
  {
    return true;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8004fc6:	2300      	movs	r3, #0
  }
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8004fda:	230f      	movs	r3, #15
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8004fe2:	f7fc f871 	bl	80010c8 <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8004fea:	2001      	movs	r0, #1
 8004fec:	f000 fb73 	bl	80056d6 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fe ff81 	bl	8003efc <HAL_UART_GetState>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	2b22      	cmp	r3, #34	@ 0x22
 8004ffe:	d007      	beq.n	8005010 <ATC_TxWait+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0018      	movs	r0, r3
 8005006:	f7fe ff79 	bl	8003efc <HAL_UART_GetState>
 800500a:	0003      	movs	r3, r0
 800500c:	2b20      	cmp	r3, #32
 800500e:	d104      	bne.n	800501a <ATC_TxWait+0x4a>
    {
      answer = true;
 8005010:	230f      	movs	r3, #15
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
      break;
 8005018:	e01c      	b.n	8005054 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	0018      	movs	r0, r3
 8005020:	f7fe ff6c 	bl	8003efc <HAL_UART_GetState>
 8005024:	0003      	movs	r3, r0
 8005026:	2be0      	cmp	r3, #224	@ 0xe0
 8005028:	d014      	beq.n	8005054 <ATC_TxWait+0x84>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	0018      	movs	r0, r3
 8005030:	f7fe ff64 	bl	8003efc <HAL_UART_GetState>
 8005034:	0003      	movs	r3, r0
 8005036:	2ba0      	cmp	r3, #160	@ 0xa0
 8005038:	d00c      	beq.n	8005054 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800503a:	f7fc f845 	bl	80010c8 <HAL_GetTick>
 800503e:	0002      	movs	r2, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d8cf      	bhi.n	8004fea <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	0018      	movs	r0, r3
 8005050:	f7fe fb20 	bl	8003694 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8005054:	230f      	movs	r3, #15
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	781b      	ldrb	r3, [r3, #0]
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}

08005062 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8b1b      	ldrh	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d027      	beq.n	80050c2 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e01b      	b.n	80050b0 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	18d3      	adds	r3, r2, r3
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	0019      	movs	r1, r3
 800508a:	f000 fc13 	bl	80058b4 <strstr>
 800508e:	0003      	movs	r3, r0
 8005090:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	0010      	movs	r0, r2
 80050a8:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3de      	bcc.n	8005078 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff ff34 	bl	8004f2a <ATC_RxFlush>
  }
}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b004      	add	sp, #16
 80050c8:	bd80      	pop	{r7, pc}

080050ca <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80050d4:	230f      	movs	r3, #15
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8b1b      	ldrh	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d031      	beq.n	8005148 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80050e4:	230c      	movs	r3, #12
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	e025      	b.n	800513a <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80050f2:	230c      	movs	r3, #12
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	320a      	adds	r2, #10
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	58d3      	ldr	r3, [r2, r3]
 8005100:	0019      	movs	r1, r3
 8005102:	f000 fbd7 	bl	80058b4 <strstr>
 8005106:	0003      	movs	r3, r0
 8005108:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800511c:	230c      	movs	r3, #12
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	230f      	movs	r3, #15
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	3201      	adds	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
        break;
 800512c:	e00c      	b.n	8005148 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800512e:	210c      	movs	r1, #12
 8005130:	187b      	adds	r3, r7, r1
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	187b      	adds	r3, r7, r1
 8005136:	3201      	adds	r2, #1
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8adb      	ldrh	r3, [r3, #22]
 800513e:	220c      	movs	r2, #12
 8005140:	18ba      	adds	r2, r7, r2
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d3d2      	bcc.n	80050ee <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8005148:	230f      	movs	r3, #15
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	781b      	ldrb	r3, [r3, #0]
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b004      	add	sp, #16
 8005154:	bd80      	pop	{r7, pc}

08005156 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	0018      	movs	r0, r3
 8005164:	f7fe fedc 	bl	8003f20 <HAL_UART_GetError>
 8005168:	1e03      	subs	r3, r0, #0
 800516a:	d01f      	beq.n	80051ac <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	4252      	negs	r2, r2
 8005176:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0018      	movs	r0, r3
 800517e:	f7fe faef 	bl	8003760 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69d9      	ldr	r1, [r3, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8a9b      	ldrh	r3, [r3, #20]
 800518e:	001a      	movs	r2, r3
 8005190:	f7ff fe3b 	bl	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2104      	movs	r1, #4
 80051a8:	438a      	bics	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fe fea3 	bl	8003efc <HAL_UART_GetState>
 80051b6:	0003      	movs	r3, r0
 80051b8:	2b22      	cmp	r3, #34	@ 0x22
 80051ba:	d027      	beq.n	800520c <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7fe fe9b 	bl	8003efc <HAL_UART_GetState>
 80051c6:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80051c8:	2b23      	cmp	r3, #35	@ 0x23
 80051ca:	d01f      	beq.n	800520c <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	4252      	negs	r2, r2
 80051d6:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fe fabf 	bl	8003760 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69d9      	ldr	r1, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8a9b      	ldrh	r3, [r3, #20]
 80051ee:	001a      	movs	r2, r3
 80051f0:	f7ff fe0b 	bl	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2104      	movs	r1, #4
 8005208:	438a      	bics	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
  }
}
 800520c:	46c0      	nop			@ (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b002      	add	sp, #8
 8005212:	bd80      	pop	{r7, pc}

08005214 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	1dbb      	adds	r3, r7, #6
 8005222:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005224:	2317      	movs	r3, #23
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d100      	bne.n	8005234 <ATC_Init+0x20>
 8005232:	e07f      	b.n	8005334 <ATC_Init+0x120>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d100      	bne.n	800523c <ATC_Init+0x28>
 800523a:	e07b      	b.n	8005334 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	223c      	movs	r2, #60	@ 0x3c
 8005240:	2100      	movs	r1, #0
 8005242:	0018      	movs	r0, r3
 8005244:	f000 fb1a 	bl	800587c <memset>
    if (pName != NULL)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d006      	beq.n	800525c <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3304      	adds	r3, #4
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	2207      	movs	r2, #7
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fb18 	bl	800588c <strncpy>
    }
    hAtc->hUart = hUart;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8005262:	1dbb      	adds	r3, r7, #6
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff fe37 	bl	8004eda <ATC_Malloc>
 800526c:	0002      	movs	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d055      	beq.n	8005326 <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	69d8      	ldr	r0, [r3, #28]
 800527e:	1dbb      	adds	r3, r7, #6
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	001a      	movs	r2, r3
 8005284:	2100      	movs	r1, #0
 8005286:	f000 faf9 	bl	800587c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff fe23 	bl	8004eda <ATC_Malloc>
 8005294:	0002      	movs	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d043      	beq.n	800532a <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a18      	ldr	r0, [r3, #32]
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	001a      	movs	r2, r3
 80052ac:	2100      	movs	r1, #0
 80052ae:	f000 fae5 	bl	800587c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80052b2:	1dbb      	adds	r3, r7, #6
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7ff fe0f 	bl	8004eda <ATC_Malloc>
 80052bc:	0002      	movs	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d031      	beq.n	800532e <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80052ce:	1dbb      	adds	r3, r7, #6
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	001a      	movs	r2, r3
 80052d4:	2100      	movs	r1, #0
 80052d6:	f000 fad1 	bl	800587c <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1dba      	adds	r2, r7, #6
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	4252      	negs	r2, r2
 80052ec:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	69d9      	ldr	r1, [r3, #28]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8a9b      	ldrh	r3, [r3, #20]
 80052fa:	001a      	movs	r2, r3
 80052fc:	f7ff fd85 	bl	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d116      	bne.n	8005332 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2104      	movs	r1, #4
 8005318:	438a      	bics	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
    answer = true;
 800531c:	2317      	movs	r3, #23
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e006      	b.n	8005334 <ATC_Init+0x120>
      break;
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	e004      	b.n	8005334 <ATC_Init+0x120>
      break;
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	e002      	b.n	8005334 <ATC_Init+0x120>
      break;
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	e000      	b.n	8005334 <ATC_Init+0x120>
      break;
 8005332:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8005334:	2317      	movs	r3, #23
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	4053      	eors	r3, r2
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d017      	beq.n	8005374 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	331c      	adds	r3, #28
 8005350:	0018      	movs	r0, r3
 8005352:	f7ff fdd3 	bl	8004efc <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3324      	adds	r3, #36	@ 0x24
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fdca 	bl	8004efc <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	223c      	movs	r2, #60	@ 0x3c
 800536c:	2100      	movs	r1, #0
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fa84 	bl	800587c <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8005374:	2317      	movs	r3, #23
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	781b      	ldrb	r3, [r3, #0]
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b006      	add	sp, #24
 8005380:	bd80      	pop	{r7, pc}

08005382 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800538c:	230f      	movs	r3, #15
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01f      	beq.n	80053de <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01e      	beq.n	80053e2 <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80053a4:	e002      	b.n	80053ac <ATC_SetEvents+0x2a>
    {
      ev++;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <ATC_SetEvents+0x46>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	18d3      	adds	r3, r2, r3
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ee      	bne.n	80053a6 <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	611a      	str	r2, [r3, #16]
    answer = true;
 80053d4:	230f      	movs	r3, #15
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e002      	b.n	80053e4 <ATC_SetEvents+0x62>
      break;
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	e000      	b.n	80053e4 <ATC_SetEvents+0x62>
      break;
 80053e2:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80053e4:	230f      	movs	r3, #15
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	781b      	ldrb	r3, [r3, #0]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b004      	add	sp, #16
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7ff feaa 	bl	8005156 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff fe2c 	bl	8005062 <ATC_CheckEvents>
}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b002      	add	sp, #8
 8005410:	bd80      	pop	{r7, pc}

08005412 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8005412:	b5b0      	push	{r4, r5, r7, lr}
 8005414:	b08c      	sub	sp, #48	@ 0x30
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff fdb7 	bl	8004f9a <ATC_TxBusy>
 800542c:	1e03      	subs	r3, r0, #0
 800542e:	d002      	beq.n	8005436 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8005430:	2304      	movs	r3, #4
 8005432:	425b      	negs	r3, r3
 8005434:	e0e3      	b.n	80055fe <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8005436:	2344      	movs	r3, #68	@ 0x44
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d902      	bls.n	8005446 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8005440:	2305      	movs	r3, #5
 8005442:	425b      	negs	r3, r3
 8005444:	e0db      	b.n	80055fe <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff fe84 	bl	8005156 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800544e:	2348      	movs	r3, #72	@ 0x48
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8005454:	2300      	movs	r3, #0
 8005456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005458:	e051      	b.n	80054fe <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	1d1a      	adds	r2, r3, #4
 800545e:	617a      	str	r2, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	0018      	movs	r0, r3
 8005468:	f7fa fe4e 	bl	8000108 <strlen>
 800546c:	0003      	movs	r3, r0
 800546e:	3301      	adds	r3, #1
 8005470:	0018      	movs	r0, r3
 8005472:	f7ff fd32 	bl	8004eda <ATC_Malloc>
 8005476:	0001      	movs	r1, r0
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547c:	320a      	adds	r2, #10
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005486:	320a      	adds	r2, #10
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	58d3      	ldr	r3, [r2, r3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11c      	bne.n	80054ca <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8005490:	2327      	movs	r3, #39	@ 0x27
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e00e      	b.n	80054b8 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800549a:	2427      	movs	r4, #39	@ 0x27
 800549c:	193b      	adds	r3, r7, r4
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	330a      	adds	r3, #10
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	18d3      	adds	r3, r2, r3
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7ff fd27 	bl	8004efc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	193b      	adds	r3, r7, r4
 80054b4:	3201      	adds	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	2327      	movs	r3, #39	@ 0x27
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dcea      	bgt.n	800549a <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 80054c4:	2303      	movs	r3, #3
 80054c6:	425b      	negs	r3, r3
 80054c8:	e099      	b.n	80055fe <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ce:	320a      	adds	r2, #10
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	58d3      	ldr	r3, [r2, r3]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 fa3f 	bl	800595c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e2:	320a      	adds	r2, #10
 80054e4:	0092      	lsls	r2, r2, #2
 80054e6:	58d4      	ldr	r4, [r2, r3]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fa fe0c 	bl	8000108 <strlen>
 80054f0:	0003      	movs	r3, r0
 80054f2:	18e3      	adds	r3, r4, r3
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	3301      	adds	r3, #1
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fe:	2344      	movs	r3, #68	@ 0x44
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005506:	429a      	cmp	r2, r3
 8005508:	dba7      	blt.n	800545a <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	0018      	movs	r0, r3
 800550e:	f7ff fd0c 	bl	8004f2a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0018      	movs	r0, r3
 8005516:	f7fa fdf7 	bl	8000108 <strlen>
 800551a:	0003      	movs	r3, r0
 800551c:	b29a      	uxth	r2, r3
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fd14 	bl	8004f50 <ATC_TxRaw>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	2301      	movs	r3, #1
 800552e:	4053      	eors	r3, r2
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	425b      	negs	r3, r3
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800553c:	e010      	b.n	8005560 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	0011      	movs	r1, r2
 8005544:	0018      	movs	r0, r3
 8005546:	f7ff fd43 	bl	8004fd0 <ATC_TxWait>
 800554a:	0003      	movs	r3, r0
 800554c:	001a      	movs	r2, r3
 800554e:	2301      	movs	r3, #1
 8005550:	4053      	eors	r3, r2
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8005558:	2302      	movs	r3, #2
 800555a:	425b      	negs	r3, r3
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800555e:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8005560:	2444      	movs	r4, #68	@ 0x44
 8005562:	193b      	adds	r3, r7, r4
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d029      	beq.n	80055be <ATC_SendReceive+0x1ac>
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d126      	bne.n	80055be <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8005570:	f7fb fdaa 	bl	80010c8 <HAL_GetTick>
 8005574:	0003      	movs	r3, r0
 8005576:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8005578:	193b      	adds	r3, r7, r4
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8005582:	e014      	b.n	80055ae <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8005584:	2001      	movs	r0, #1
 8005586:	f000 f8a6 	bl	80056d6 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800558a:	251f      	movs	r5, #31
 800558c:	197c      	adds	r4, r7, r5
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff fd98 	bl	80050ca <ATC_CheckResponse>
 800559a:	0003      	movs	r3, r0
 800559c:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 800559e:	197b      	adds	r3, r7, r5
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 80055a6:	197b      	adds	r3, r7, r5
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055ac:	e007      	b.n	80055be <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 80055ae:	f7fb fd8b 	bl	80010c8 <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d8e2      	bhi.n	8005584 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80055c4:	2326      	movs	r3, #38	@ 0x26
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e00e      	b.n	80055ec <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80055ce:	2426      	movs	r4, #38	@ 0x26
 80055d0:	193b      	adds	r3, r7, r4
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	330a      	adds	r3, #10
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	18d3      	adds	r3, r2, r3
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff fc8d 	bl	8004efc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80055e2:	193b      	adds	r3, r7, r4
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	3201      	adds	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	2326      	movs	r3, #38	@ 0x26
 80055ee:	18fa      	adds	r2, r7, r3
 80055f0:	2344      	movs	r3, #68	@ 0x44
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d3e8      	bcc.n	80055ce <ATC_SendReceive+0x1bc>
  }
  return answer;
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b00c      	add	sp, #48	@ 0x30
 8005604:	bdb0      	pop	{r4, r5, r7, pc}

08005606 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	000a      	movs	r2, r1
 8005610:	1cbb      	adds	r3, r7, #2
 8005612:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005614:	1cbb      	adds	r3, r7, #2
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8a9b      	ldrh	r3, [r3, #20]
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8b1b      	ldrh	r3, [r3, #24]
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	429a      	cmp	r2, r3
 8005626:	dd06      	ble.n	8005636 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8a99      	ldrh	r1, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8b1a      	ldrh	r2, [r3, #24]
 8005630:	1cbb      	adds	r3, r7, #2
 8005632:	1a8a      	subs	r2, r1, r2
 8005634:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	8b12      	ldrh	r2, [r2, #24]
 800563e:	1898      	adds	r0, r3, r2
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69d9      	ldr	r1, [r3, #28]
 8005644:	1cbb      	adds	r3, r7, #2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	001a      	movs	r2, r3
 800564a:	f000 f98f 	bl	800596c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8b1a      	ldrh	r2, [r3, #24]
 8005652:	1cbb      	adds	r3, r7, #2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	18d3      	adds	r3, r2, r3
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69d9      	ldr	r1, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8a9b      	ldrh	r3, [r3, #20]
 800566a:	001a      	movs	r2, r3
 800566c:	f7ff fbcd 	bl	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d10c      	bne.n	800568e <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2104      	movs	r1, #4
 8005688:	438a      	bics	r2, r1
 800568a:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800568c:	e01f      	b.n	80056ce <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2201      	movs	r2, #1
 8005696:	4252      	negs	r2, r2
 8005698:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fe f85e 	bl	8003760 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69d9      	ldr	r1, [r3, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8a9b      	ldrh	r3, [r3, #20]
 80056b0:	001a      	movs	r2, r3
 80056b2:	f7ff fbaa 	bl	8004e0a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2104      	movs	r1, #4
 80056ca:	438a      	bics	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b002      	add	sp, #8
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7fb fcfb 	bl	80010dc <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b002      	add	sp, #8
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <malloc>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <malloc+0x10>)
 80056f4:	0001      	movs	r1, r0
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f000 f830 	bl	800575c <_malloc_r>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	20000010 	.word	0x20000010

08005704 <free>:
 8005704:	b510      	push	{r4, lr}
 8005706:	4b03      	ldr	r3, [pc, #12]	@ (8005714 <free+0x10>)
 8005708:	0001      	movs	r1, r0
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	f000 f938 	bl	8005980 <_free_r>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	20000010 	.word	0x20000010

08005718 <sbrk_aligned>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4e0f      	ldr	r6, [pc, #60]	@ (8005758 <sbrk_aligned+0x40>)
 800571c:	000d      	movs	r5, r1
 800571e:	6831      	ldr	r1, [r6, #0]
 8005720:	0004      	movs	r4, r0
 8005722:	2900      	cmp	r1, #0
 8005724:	d102      	bne.n	800572c <sbrk_aligned+0x14>
 8005726:	f000 f8db 	bl	80058e0 <_sbrk_r>
 800572a:	6030      	str	r0, [r6, #0]
 800572c:	0029      	movs	r1, r5
 800572e:	0020      	movs	r0, r4
 8005730:	f000 f8d6 	bl	80058e0 <_sbrk_r>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d103      	bne.n	8005740 <sbrk_aligned+0x28>
 8005738:	2501      	movs	r5, #1
 800573a:	426d      	negs	r5, r5
 800573c:	0028      	movs	r0, r5
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	2303      	movs	r3, #3
 8005742:	1cc5      	adds	r5, r0, #3
 8005744:	439d      	bics	r5, r3
 8005746:	42a8      	cmp	r0, r5
 8005748:	d0f8      	beq.n	800573c <sbrk_aligned+0x24>
 800574a:	1a29      	subs	r1, r5, r0
 800574c:	0020      	movs	r0, r4
 800574e:	f000 f8c7 	bl	80058e0 <_sbrk_r>
 8005752:	3001      	adds	r0, #1
 8005754:	d1f2      	bne.n	800573c <sbrk_aligned+0x24>
 8005756:	e7ef      	b.n	8005738 <sbrk_aligned+0x20>
 8005758:	20000254 	.word	0x20000254

0800575c <_malloc_r>:
 800575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575e:	2203      	movs	r2, #3
 8005760:	1ccb      	adds	r3, r1, #3
 8005762:	4393      	bics	r3, r2
 8005764:	3308      	adds	r3, #8
 8005766:	0005      	movs	r5, r0
 8005768:	001f      	movs	r7, r3
 800576a:	2b0c      	cmp	r3, #12
 800576c:	d234      	bcs.n	80057d8 <_malloc_r+0x7c>
 800576e:	270c      	movs	r7, #12
 8005770:	42b9      	cmp	r1, r7
 8005772:	d833      	bhi.n	80057dc <_malloc_r+0x80>
 8005774:	0028      	movs	r0, r5
 8005776:	f000 f871 	bl	800585c <__malloc_lock>
 800577a:	4e37      	ldr	r6, [pc, #220]	@ (8005858 <_malloc_r+0xfc>)
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	001c      	movs	r4, r3
 8005780:	2c00      	cmp	r4, #0
 8005782:	d12f      	bne.n	80057e4 <_malloc_r+0x88>
 8005784:	0039      	movs	r1, r7
 8005786:	0028      	movs	r0, r5
 8005788:	f7ff ffc6 	bl	8005718 <sbrk_aligned>
 800578c:	0004      	movs	r4, r0
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d15f      	bne.n	8005852 <_malloc_r+0xf6>
 8005792:	6834      	ldr	r4, [r6, #0]
 8005794:	9400      	str	r4, [sp, #0]
 8005796:	9b00      	ldr	r3, [sp, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d14a      	bne.n	8005832 <_malloc_r+0xd6>
 800579c:	2c00      	cmp	r4, #0
 800579e:	d052      	beq.n	8005846 <_malloc_r+0xea>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	0028      	movs	r0, r5
 80057a4:	18e3      	adds	r3, r4, r3
 80057a6:	9900      	ldr	r1, [sp, #0]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	f000 f899 	bl	80058e0 <_sbrk_r>
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	4283      	cmp	r3, r0
 80057b2:	d148      	bne.n	8005846 <_malloc_r+0xea>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	0028      	movs	r0, r5
 80057b8:	1aff      	subs	r7, r7, r3
 80057ba:	0039      	movs	r1, r7
 80057bc:	f7ff ffac 	bl	8005718 <sbrk_aligned>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d040      	beq.n	8005846 <_malloc_r+0xea>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	6833      	ldr	r3, [r6, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d133      	bne.n	800583a <_malloc_r+0xde>
 80057d2:	9b00      	ldr	r3, [sp, #0]
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	e019      	b.n	800580c <_malloc_r+0xb0>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dac9      	bge.n	8005770 <_malloc_r+0x14>
 80057dc:	230c      	movs	r3, #12
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	2000      	movs	r0, #0
 80057e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057e4:	6821      	ldr	r1, [r4, #0]
 80057e6:	1bc9      	subs	r1, r1, r7
 80057e8:	d420      	bmi.n	800582c <_malloc_r+0xd0>
 80057ea:	290b      	cmp	r1, #11
 80057ec:	d90a      	bls.n	8005804 <_malloc_r+0xa8>
 80057ee:	19e2      	adds	r2, r4, r7
 80057f0:	6027      	str	r7, [r4, #0]
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	d104      	bne.n	8005800 <_malloc_r+0xa4>
 80057f6:	6032      	str	r2, [r6, #0]
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	6011      	str	r1, [r2, #0]
 80057fc:	6053      	str	r3, [r2, #4]
 80057fe:	e005      	b.n	800580c <_malloc_r+0xb0>
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e7f9      	b.n	80057f8 <_malloc_r+0x9c>
 8005804:	6862      	ldr	r2, [r4, #4]
 8005806:	42a3      	cmp	r3, r4
 8005808:	d10e      	bne.n	8005828 <_malloc_r+0xcc>
 800580a:	6032      	str	r2, [r6, #0]
 800580c:	0028      	movs	r0, r5
 800580e:	f000 f82d 	bl	800586c <__malloc_unlock>
 8005812:	0020      	movs	r0, r4
 8005814:	2207      	movs	r2, #7
 8005816:	300b      	adds	r0, #11
 8005818:	1d23      	adds	r3, r4, #4
 800581a:	4390      	bics	r0, r2
 800581c:	1ac2      	subs	r2, r0, r3
 800581e:	4298      	cmp	r0, r3
 8005820:	d0df      	beq.n	80057e2 <_malloc_r+0x86>
 8005822:	1a1b      	subs	r3, r3, r0
 8005824:	50a3      	str	r3, [r4, r2]
 8005826:	e7dc      	b.n	80057e2 <_malloc_r+0x86>
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	e7ef      	b.n	800580c <_malloc_r+0xb0>
 800582c:	0023      	movs	r3, r4
 800582e:	6864      	ldr	r4, [r4, #4]
 8005830:	e7a6      	b.n	8005780 <_malloc_r+0x24>
 8005832:	9c00      	ldr	r4, [sp, #0]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	e7ad      	b.n	8005796 <_malloc_r+0x3a>
 800583a:	001a      	movs	r2, r3
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	42a3      	cmp	r3, r4
 8005840:	d1fb      	bne.n	800583a <_malloc_r+0xde>
 8005842:	2300      	movs	r3, #0
 8005844:	e7da      	b.n	80057fc <_malloc_r+0xa0>
 8005846:	230c      	movs	r3, #12
 8005848:	0028      	movs	r0, r5
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f000 f80e 	bl	800586c <__malloc_unlock>
 8005850:	e7c6      	b.n	80057e0 <_malloc_r+0x84>
 8005852:	6007      	str	r7, [r0, #0]
 8005854:	e7da      	b.n	800580c <_malloc_r+0xb0>
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	20000258 	.word	0x20000258

0800585c <__malloc_lock>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4802      	ldr	r0, [pc, #8]	@ (8005868 <__malloc_lock+0xc>)
 8005860:	f000 f87a 	bl	8005958 <__retarget_lock_acquire_recursive>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	20000398 	.word	0x20000398

0800586c <__malloc_unlock>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4802      	ldr	r0, [pc, #8]	@ (8005878 <__malloc_unlock+0xc>)
 8005870:	f000 f873 	bl	800595a <__retarget_lock_release_recursive>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	20000398 	.word	0x20000398

0800587c <memset>:
 800587c:	0003      	movs	r3, r0
 800587e:	1882      	adds	r2, r0, r2
 8005880:	4293      	cmp	r3, r2
 8005882:	d100      	bne.n	8005886 <memset+0xa>
 8005884:	4770      	bx	lr
 8005886:	7019      	strb	r1, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	e7f9      	b.n	8005880 <memset+0x4>

0800588c <strncpy>:
 800588c:	0003      	movs	r3, r0
 800588e:	b530      	push	{r4, r5, lr}
 8005890:	001d      	movs	r5, r3
 8005892:	2a00      	cmp	r2, #0
 8005894:	d006      	beq.n	80058a4 <strncpy+0x18>
 8005896:	780c      	ldrb	r4, [r1, #0]
 8005898:	3a01      	subs	r2, #1
 800589a:	3301      	adds	r3, #1
 800589c:	702c      	strb	r4, [r5, #0]
 800589e:	3101      	adds	r1, #1
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	d1f5      	bne.n	8005890 <strncpy+0x4>
 80058a4:	2100      	movs	r1, #0
 80058a6:	189a      	adds	r2, r3, r2
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <strncpy+0x22>
 80058ac:	bd30      	pop	{r4, r5, pc}
 80058ae:	7019      	strb	r1, [r3, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	e7f9      	b.n	80058a8 <strncpy+0x1c>

080058b4 <strstr>:
 80058b4:	780a      	ldrb	r2, [r1, #0]
 80058b6:	b530      	push	{r4, r5, lr}
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d10c      	bne.n	80058d6 <strstr+0x22>
 80058bc:	bd30      	pop	{r4, r5, pc}
 80058be:	429a      	cmp	r2, r3
 80058c0:	d108      	bne.n	80058d4 <strstr+0x20>
 80058c2:	2301      	movs	r3, #1
 80058c4:	5ccc      	ldrb	r4, [r1, r3]
 80058c6:	2c00      	cmp	r4, #0
 80058c8:	d0f8      	beq.n	80058bc <strstr+0x8>
 80058ca:	5cc5      	ldrb	r5, [r0, r3]
 80058cc:	42a5      	cmp	r5, r4
 80058ce:	d101      	bne.n	80058d4 <strstr+0x20>
 80058d0:	3301      	adds	r3, #1
 80058d2:	e7f7      	b.n	80058c4 <strstr+0x10>
 80058d4:	3001      	adds	r0, #1
 80058d6:	7803      	ldrb	r3, [r0, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <strstr+0xa>
 80058dc:	0018      	movs	r0, r3
 80058de:	e7ed      	b.n	80058bc <strstr+0x8>

080058e0 <_sbrk_r>:
 80058e0:	2300      	movs	r3, #0
 80058e2:	b570      	push	{r4, r5, r6, lr}
 80058e4:	4d06      	ldr	r5, [pc, #24]	@ (8005900 <_sbrk_r+0x20>)
 80058e6:	0004      	movs	r4, r0
 80058e8:	0008      	movs	r0, r1
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fb fa4c 	bl	8000d88 <_sbrk>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d103      	bne.n	80058fc <_sbrk_r+0x1c>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d000      	beq.n	80058fc <_sbrk_r+0x1c>
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	20000394 	.word	0x20000394

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	@ (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	20000010 	.word	0x20000010

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	2600      	movs	r6, #0
 8005914:	4c0c      	ldr	r4, [pc, #48]	@ (8005948 <__libc_init_array+0x38>)
 8005916:	4d0d      	ldr	r5, [pc, #52]	@ (800594c <__libc_init_array+0x3c>)
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	2600      	movs	r6, #0
 8005922:	f000 f877 	bl	8005a14 <_init>
 8005926:	4c0a      	ldr	r4, [pc, #40]	@ (8005950 <__libc_init_array+0x40>)
 8005928:	4d0a      	ldr	r5, [pc, #40]	@ (8005954 <__libc_init_array+0x44>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	00b3      	lsls	r3, r6, #2
 8005936:	58eb      	ldr	r3, [r5, r3]
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	00b3      	lsls	r3, r6, #2
 8005940:	58eb      	ldr	r3, [r5, r3]
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	08005b00 	.word	0x08005b00
 800594c:	08005b00 	.word	0x08005b00
 8005950:	08005b04 	.word	0x08005b04
 8005954:	08005b00 	.word	0x08005b00

08005958 <__retarget_lock_acquire_recursive>:
 8005958:	4770      	bx	lr

0800595a <__retarget_lock_release_recursive>:
 800595a:	4770      	bx	lr

0800595c <strcpy>:
 800595c:	0003      	movs	r3, r0
 800595e:	780a      	ldrb	r2, [r1, #0]
 8005960:	3101      	adds	r1, #1
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1f9      	bne.n	800595e <strcpy+0x2>
 800596a:	4770      	bx	lr

0800596c <memcpy>:
 800596c:	2300      	movs	r3, #0
 800596e:	b510      	push	{r4, lr}
 8005970:	429a      	cmp	r2, r3
 8005972:	d100      	bne.n	8005976 <memcpy+0xa>
 8005974:	bd10      	pop	{r4, pc}
 8005976:	5ccc      	ldrb	r4, [r1, r3]
 8005978:	54c4      	strb	r4, [r0, r3]
 800597a:	3301      	adds	r3, #1
 800597c:	e7f8      	b.n	8005970 <memcpy+0x4>
	...

08005980 <_free_r>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	0005      	movs	r5, r0
 8005984:	1e0c      	subs	r4, r1, #0
 8005986:	d010      	beq.n	80059aa <_free_r+0x2a>
 8005988:	3c04      	subs	r4, #4
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	da00      	bge.n	8005992 <_free_r+0x12>
 8005990:	18e4      	adds	r4, r4, r3
 8005992:	0028      	movs	r0, r5
 8005994:	f7ff ff62 	bl	800585c <__malloc_lock>
 8005998:	4a1d      	ldr	r2, [pc, #116]	@ (8005a10 <_free_r+0x90>)
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <_free_r+0x2c>
 80059a0:	6063      	str	r3, [r4, #4]
 80059a2:	6014      	str	r4, [r2, #0]
 80059a4:	0028      	movs	r0, r5
 80059a6:	f7ff ff61 	bl	800586c <__malloc_unlock>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	d908      	bls.n	80059c2 <_free_r+0x42>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	1821      	adds	r1, r4, r0
 80059b4:	428b      	cmp	r3, r1
 80059b6:	d1f3      	bne.n	80059a0 <_free_r+0x20>
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	1809      	adds	r1, r1, r0
 80059be:	6021      	str	r1, [r4, #0]
 80059c0:	e7ee      	b.n	80059a0 <_free_r+0x20>
 80059c2:	001a      	movs	r2, r3
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <_free_r+0x4e>
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	d9f9      	bls.n	80059c2 <_free_r+0x42>
 80059ce:	6811      	ldr	r1, [r2, #0]
 80059d0:	1850      	adds	r0, r2, r1
 80059d2:	42a0      	cmp	r0, r4
 80059d4:	d10b      	bne.n	80059ee <_free_r+0x6e>
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1809      	adds	r1, r1, r0
 80059da:	1850      	adds	r0, r2, r1
 80059dc:	6011      	str	r1, [r2, #0]
 80059de:	4283      	cmp	r3, r0
 80059e0:	d1e0      	bne.n	80059a4 <_free_r+0x24>
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	1841      	adds	r1, r0, r1
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	e7da      	b.n	80059a4 <_free_r+0x24>
 80059ee:	42a0      	cmp	r0, r4
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x78>
 80059f2:	230c      	movs	r3, #12
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	e7d5      	b.n	80059a4 <_free_r+0x24>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	1821      	adds	r1, r4, r0
 80059fc:	428b      	cmp	r3, r1
 80059fe:	d103      	bne.n	8005a08 <_free_r+0x88>
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	1809      	adds	r1, r1, r0
 8005a06:	6021      	str	r1, [r4, #0]
 8005a08:	6063      	str	r3, [r4, #4]
 8005a0a:	6054      	str	r4, [r2, #4]
 8005a0c:	e7ca      	b.n	80059a4 <_free_r+0x24>
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	20000258 	.word	0x20000258

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
