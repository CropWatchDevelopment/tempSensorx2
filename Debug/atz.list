
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006898  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006958  08006958  00007958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c60  08006c60  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c68  08006c68  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00007c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006c70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000060  08006cd0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200003bc  08006cd0  000083bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014777  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b9  00000000  00000000  0001c7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000201b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  00021378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd8  00000000  00000000  00022115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018355  00000000  00000000  00039eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087566  00000000  00000000  00052242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d97a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  000d97ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000dd938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006940 	.word	0x08006940

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006940 	.word	0x08006940

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f001 fade 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f001 faf0 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f006 f983 	bl	80067b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_GPIO_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fe9b 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2220      	movs	r2, #32
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fd0d 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2220      	movs	r2, #32
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <MX_GPIO_Init+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 fcfa 	bl	8001f3c <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	@ 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800055e:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <MX_I2C1_Init+0x7c>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000564:	22c1      	movs	r2, #193	@ 0xc1
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056a:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000572:	2201      	movs	r2, #1
 8000574:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fe6c 	bl	8002274 <HAL_I2C_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 fb24 	bl	8000bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fd0b 	bl	8002fc4 <HAL_I2CEx_ConfigAnalogFilter>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005b2:	f000 fb1b 	bl	8000bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fd4e 	bl	800305c <HAL_I2CEx_ConfigDigitalFilter>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005c4:	f000 fb12 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	40005400 	.word	0x40005400

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f006 f8e2 	bl	80067b4 <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	@ 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 fc7f 	bl	8001f3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	@ 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	50000400 	.word	0x50000400

08000660 <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = COLLECT_DATA;

void cb_WAKE(const char* str)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <cb_WAKE+0x18>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	2000010c 	.word	0x2000010c

0800067c <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <cb_JOIN_SUCCESS+0x18>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	20000000 	.word	0x20000000

08000698 <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <cb_NOT_JOINED+0x18>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000000 	.word	0x20000000

080006b4 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  // Check if this is a TX confirmation
  if (strstr(str, "TX:") != NULL) {
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <cb_DATA_RESPONSE+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f006 f88b 	bl	80067de <strstr>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d002      	beq.n	80006d2 <cb_DATA_RESPONSE+0x1e>
    lorawan_state = ENTER_SLEEP_MODE;
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <cb_DATA_RESPONSE+0x2c>)
 80006ce:	2205      	movs	r2, #5
 80006d0:	701a      	strb	r2, [r3, #0]
  }
  // You can parse downlink data here if needed
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	08006958 	.word	0x08006958
 80006e0:	20000000 	.word	0x20000000

080006e4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	000a      	movs	r2, r1
 80006ee:	1cbb      	adds	r3, r7, #2
 80006f0:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a07      	ldr	r2, [pc, #28]	@ (8000714 <HAL_UARTEx_RxEventCallback+0x30>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 80006fc:	1cbb      	adds	r3, r7, #2
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_UARTEx_RxEventCallback+0x34>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f005 ff1b 	bl	8006540 <ATC_IdleLineCallback>
	}
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	40004800 	.word	0x40004800
 8000718:	200000d0 	.word	0x200000d0

0800071c <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief RTC Wake-up Timer Event Callback
 * This function is called when the RTC wake-up timer expires
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    // Clean up the wake-up timer
    HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fec0 	bl	80044ac <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	22ff      	movs	r2, #255	@ 0xff
 8000734:	401a      	ands	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4905      	ldr	r1, [pc, #20]	@ (8000750 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 800073c:	430a      	orrs	r2, r1
 800073e:	60da      	str	r2, [r3, #12]
    
    // Set the next state
    lorawan_state = DEVICE_SLEEP;
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 8000742:	2206      	movs	r2, #6
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	fffffb7f 	.word	0xfffffb7f
 8000754:	20000000 	.word	0x20000000

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b098      	sub	sp, #96	@ 0x60
 800075c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f001 f80b 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f9cd 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f7ff fe97 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f7ff fe77 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 800076e:	f7ff fef3 	bl	8000558 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000772:	f000 fb33 	bl	8000ddc <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000776:	f000 fa47 	bl	8000c08 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Configure EXTI Line 20 for RTC wake-up timer
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4bc5      	ldr	r3, [pc, #788]	@ (8000a90 <main+0x338>)
 800077c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800077e:	4bc4      	ldr	r3, [pc, #784]	@ (8000a90 <main+0x338>)
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	639a      	str	r2, [r3, #56]	@ 0x38

  // Configure EXTI Line20 (RTC Wake-up Timer)
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8000788:	4bc2      	ldr	r3, [pc, #776]	@ (8000a94 <main+0x33c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4bc1      	ldr	r3, [pc, #772]	@ (8000a94 <main+0x33c>)
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	0349      	lsls	r1, r1, #13
 8000792:	430a      	orrs	r2, r1
 8000794:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8000796:	4bbf      	ldr	r3, [pc, #764]	@ (8000a94 <main+0x33c>)
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	4bbe      	ldr	r3, [pc, #760]	@ (8000a94 <main+0x33c>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0349      	lsls	r1, r1, #13
 80007a0:	430a      	orrs	r2, r1
 80007a2:	609a      	str	r2, [r3, #8]

  // Initialize ATC LoRa handle
  lora.hUart = &hlpuart1;
 80007a4:	4bbc      	ldr	r3, [pc, #752]	@ (8000a98 <main+0x340>)
 80007a6:	4abd      	ldr	r2, [pc, #756]	@ (8000a9c <main+0x344>)
 80007a8:	601a      	str	r2, [r3, #0]
  lora.psEvents = (ATC_EventTypeDef*)events;
 80007aa:	4bbb      	ldr	r3, [pc, #748]	@ (8000a98 <main+0x340>)
 80007ac:	4abc      	ldr	r2, [pc, #752]	@ (8000aa0 <main+0x348>)
 80007ae:	60da      	str	r2, [r3, #12]
  lora.Events = sizeof(events) / sizeof(events[0]);
 80007b0:	4bb9      	ldr	r3, [pc, #740]	@ (8000a98 <main+0x340>)
 80007b2:	2206      	movs	r2, #6
 80007b4:	611a      	str	r2, [r3, #16]
  lora.Size = 256;  // Buffer size
 80007b6:	4bb8      	ldr	r3, [pc, #736]	@ (8000a98 <main+0x340>)
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	829a      	strh	r2, [r3, #20]
  lora.pRxBuff = malloc(lora.Size);
 80007be:	4bb6      	ldr	r3, [pc, #728]	@ (8000a98 <main+0x340>)
 80007c0:	8a9b      	ldrh	r3, [r3, #20]
 80007c2:	0018      	movs	r0, r3
 80007c4:	f005 ff30 	bl	8006628 <malloc>
 80007c8:	0003      	movs	r3, r0
 80007ca:	001a      	movs	r2, r3
 80007cc:	4bb2      	ldr	r3, [pc, #712]	@ (8000a98 <main+0x340>)
 80007ce:	61da      	str	r2, [r3, #28]
  lora.pReadBuff = malloc(lora.Size);
 80007d0:	4bb1      	ldr	r3, [pc, #708]	@ (8000a98 <main+0x340>)
 80007d2:	8a9b      	ldrh	r3, [r3, #20]
 80007d4:	0018      	movs	r0, r3
 80007d6:	f005 ff27 	bl	8006628 <malloc>
 80007da:	0003      	movs	r3, r0
 80007dc:	001a      	movs	r2, r3
 80007de:	4bae      	ldr	r3, [pc, #696]	@ (8000a98 <main+0x340>)
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  lora.RxIndex = 0;
 80007e2:	4bad      	ldr	r3, [pc, #692]	@ (8000a98 <main+0x340>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	831a      	strh	r2, [r3, #24]
  lora.RespCount = 0;
 80007e8:	4bab      	ldr	r3, [pc, #684]	@ (8000a98 <main+0x340>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	82da      	strh	r2, [r3, #22]
  
  // Initialize response pointers to NULL
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 80007ee:	2300      	movs	r3, #0
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80007f2:	e008      	b.n	8000806 <main+0xae>
    lora.ppResp[i] = NULL;
 80007f4:	4ba8      	ldr	r3, [pc, #672]	@ (8000a98 <main+0x340>)
 80007f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007f8:	320a      	adds	r2, #10
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	2100      	movs	r1, #0
 80007fe:	50d1      	str	r1, [r2, r3]
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 8000800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000802:	3301      	adds	r3, #1
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000808:	2b0f      	cmp	r3, #15
 800080a:	ddf3      	ble.n	80007f4 <main+0x9c>
  }
  char* CONNECTION_STATUS = NULL;
 800080c:	2300      	movs	r3, #0
 800080e:	647b      	str	r3, [r7, #68]	@ 0x44
//  ATC_SendReceive(&lora, "ATS 213=1000\r\n", 200, &CONNECTION_STATUS, 2000, 1, "OK");
//  ATC_SendReceive(&lora, "AT&W", 200, &CONNECTION_STATUS, 2000, 1, "OK");
  HAL_Delay(10000);
 8000810:	4ba4      	ldr	r3, [pc, #656]	@ (8000aa4 <main+0x34c>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f820 	bl	8001858 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 8000818:	4b9f      	ldr	r3, [pc, #636]	@ (8000a98 <main+0x340>)
 800081a:	0018      	movs	r0, r3
 800081c:	f005 fd86 	bl	800632c <ATC_Loop>
	  switch (lorawan_state) {
 8000820:	4ba1      	ldr	r3, [pc, #644]	@ (8000aa8 <main+0x350>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b07      	cmp	r3, #7
 8000828:	d8f6      	bhi.n	8000818 <main+0xc0>
 800082a:	009a      	lsls	r2, r3, #2
 800082c:	4b9f      	ldr	r3, [pc, #636]	@ (8000aac <main+0x354>)
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			ATC_SendReceive(&lora, "AT\r\n", 200, &CONNECTION_STATUS, 2000, 1, "OK");
 8000834:	2344      	movs	r3, #68	@ 0x44
 8000836:	18fa      	adds	r2, r7, r3
 8000838:	499d      	ldr	r1, [pc, #628]	@ (8000ab0 <main+0x358>)
 800083a:	4897      	ldr	r0, [pc, #604]	@ (8000a98 <main+0x340>)
 800083c:	4b9d      	ldr	r3, [pc, #628]	@ (8000ab4 <main+0x35c>)
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2301      	movs	r3, #1
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	23fa      	movs	r3, #250	@ 0xfa
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	0013      	movs	r3, r2
 800084c:	22c8      	movs	r2, #200	@ 0xc8
 800084e:	f005 fd7d 	bl	800634c <ATC_SendReceive>
			LoRaWAN_Error_t join_result = join_network(&lora);
 8000852:	2549      	movs	r5, #73	@ 0x49
 8000854:	197c      	adds	r4, r7, r5
 8000856:	4b90      	ldr	r3, [pc, #576]	@ (8000a98 <main+0x340>)
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fb93 	bl	8000f84 <join_network>
 800085e:	0003      	movs	r3, r0
 8000860:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 8000862:	197b      	adds	r3, r7, r5
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <main+0x114>
 800086a:	e10c      	b.n	8000a86 <main+0x32e>
				lorawan_state = LORAWAN_JOINING;
 800086c:	4b8e      	ldr	r3, [pc, #568]	@ (8000aa8 <main+0x350>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
			} else {
				// Could implement retry logic here
			}
		}
		break;
 8000872:	e108      	b.n	8000a86 <main+0x32e>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 8000874:	4b90      	ldr	r3, [pc, #576]	@ (8000ab8 <main+0x360>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]

		  ATC_SendReceive(&lora, "AT\r\n", 200, &CONNECTION_STATUS, 2000, 1, "OK");
 800087a:	2444      	movs	r4, #68	@ 0x44
 800087c:	193a      	adds	r2, r7, r4
 800087e:	498c      	ldr	r1, [pc, #560]	@ (8000ab0 <main+0x358>)
 8000880:	4885      	ldr	r0, [pc, #532]	@ (8000a98 <main+0x340>)
 8000882:	4b8c      	ldr	r3, [pc, #560]	@ (8000ab4 <main+0x35c>)
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	2301      	movs	r3, #1
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	23fa      	movs	r3, #250	@ 0xfa
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	0013      	movs	r3, r2
 8000892:	22c8      	movs	r2, #200	@ 0xc8
 8000894:	f005 fd5a 	bl	800634c <ATC_SendReceive>
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 8000898:	193a      	adds	r2, r7, r4
 800089a:	4988      	ldr	r1, [pc, #544]	@ (8000abc <main+0x364>)
 800089c:	487e      	ldr	r0, [pc, #504]	@ (8000a98 <main+0x340>)
 800089e:	4b88      	ldr	r3, [pc, #544]	@ (8000ac0 <main+0x368>)
 80008a0:	9303      	str	r3, [sp, #12]
 80008a2:	4b88      	ldr	r3, [pc, #544]	@ (8000ac4 <main+0x36c>)
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	2302      	movs	r3, #2
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	23fa      	movs	r3, #250	@ 0xfa
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	0013      	movs	r3, r2
 80008b2:	22c8      	movs	r2, #200	@ 0xc8
 80008b4:	f005 fd4a 	bl	800634c <ATC_SendReceive>
 80008b8:	0002      	movs	r2, r0
 80008ba:	4b83      	ldr	r3, [pc, #524]	@ (8000ac8 <main+0x370>)
 80008bc:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 80008be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d103      	bne.n	80008cc <main+0x174>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 80008c4:	4b78      	ldr	r3, [pc, #480]	@ (8000aa8 <main+0x350>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
			  break;
 80008ca:	e0df      	b.n	8000a8c <main+0x334>
		  }

		  // Create AT command with sensor data
		  char at_command[64];
		  uint16_t sensor_val = temp_ticks_2; // Use sensor data
 80008cc:	214a      	movs	r1, #74	@ 0x4a
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	4a7e      	ldr	r2, [pc, #504]	@ (8000acc <main+0x374>)
 80008d2:	8812      	ldrh	r2, [r2, #0]
 80008d4:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	003a      	movs	r2, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fbb4 	bl	800104c <format_at_send_cmd>

		  char* ATSEND_Result = NULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	643b      	str	r3, [r7, #64]	@ 0x40
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK\r", "ERROR");
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	18fa      	adds	r2, r7, r3
 80008ec:	0039      	movs	r1, r7
 80008ee:	486a      	ldr	r0, [pc, #424]	@ (8000a98 <main+0x340>)
 80008f0:	4b77      	ldr	r3, [pc, #476]	@ (8000ad0 <main+0x378>)
 80008f2:	9303      	str	r3, [sp, #12]
 80008f4:	4b77      	ldr	r3, [pc, #476]	@ (8000ad4 <main+0x37c>)
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	2302      	movs	r3, #2
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	23fa      	movs	r3, #250	@ 0xfa
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	0013      	movs	r3, r2
 8000904:	22c8      	movs	r2, #200	@ 0xc8
 8000906:	f005 fd21 	bl	800634c <ATC_SendReceive>
 800090a:	0002      	movs	r2, r0
 800090c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ac8 <main+0x370>)
 800090e:	601a      	str	r2, [r3, #0]
		  if (resp == 1) {
 8000910:	4b6d      	ldr	r3, [pc, #436]	@ (8000ac8 <main+0x370>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d103      	bne.n	8000920 <main+0x1c8>
			  lorawan_state = LORAWAN_DATA_SENDING;
 8000918:	4b63      	ldr	r3, [pc, #396]	@ (8000aa8 <main+0x350>)
 800091a:	2204      	movs	r2, #4
 800091c:	701a      	strb	r2, [r3, #0]
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 800091e:	e0b5      	b.n	8000a8c <main+0x334>
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000920:	4b61      	ldr	r3, [pc, #388]	@ (8000aa8 <main+0x350>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	  break;
 8000926:	e0b1      	b.n	8000a8c <main+0x334>
	  case LORAWAN_DATA_SENDING:
			// Start timer when entering this state
			if (data_sending_start_time == 0) {
 8000928:	4b6b      	ldr	r3, [pc, #428]	@ (8000ad8 <main+0x380>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <main+0x1e2>
				data_sending_start_time = HAL_GetTick();
 8000930:	f000 ff88 	bl	8001844 <HAL_GetTick>
 8000934:	0002      	movs	r2, r0
 8000936:	4b68      	ldr	r3, [pc, #416]	@ (8000ad8 <main+0x380>)
 8000938:	601a      	str	r2, [r3, #0]
			}

			// Check if 10 seconds have passed
			if ((HAL_GetTick() - data_sending_start_time) >= 10000) {
 800093a:	f000 ff83 	bl	8001844 <HAL_GetTick>
 800093e:	0002      	movs	r2, r0
 8000940:	4b65      	ldr	r3, [pc, #404]	@ (8000ad8 <main+0x380>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a65      	ldr	r2, [pc, #404]	@ (8000adc <main+0x384>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d800      	bhi.n	800094e <main+0x1f6>
 800094c:	e09d      	b.n	8000a8a <main+0x332>
				data_sending_start_time = 0; // Reset timer
 800094e:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <main+0x380>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
				lorawan_state = ENTER_SLEEP_MODE;  // Go directly to sleep, not DEVICE_SLEEP
 8000954:	4b54      	ldr	r3, [pc, #336]	@ (8000aa8 <main+0x350>)
 8000956:	2205      	movs	r2, #5
 8000958:	701a      	strb	r2, [r3, #0]
			}
		break;
 800095a:	e096      	b.n	8000a8a <main+0x332>
	  case LORAWAN_DATA_RECEIVED:
		  // Handle received downlink data (this is only for actual downlink messages)
		  lorawan_state = ENTER_SLEEP_MODE;
 800095c:	4b52      	ldr	r3, [pc, #328]	@ (8000aa8 <main+0x350>)
 800095e:	2205      	movs	r2, #5
 8000960:	701a      	strb	r2, [r3, #0]
		  break;
 8000962:	e093      	b.n	8000a8c <main+0x334>
	  case ENTER_SLEEP_MODE:
		  // Put LoRa module to sleep first
		  resp = ATC_SendReceive(&lora, "AT+SLEEP\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 8000964:	2344      	movs	r3, #68	@ 0x44
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	495d      	ldr	r1, [pc, #372]	@ (8000ae0 <main+0x388>)
 800096a:	484b      	ldr	r0, [pc, #300]	@ (8000a98 <main+0x340>)
 800096c:	4b54      	ldr	r3, [pc, #336]	@ (8000ac0 <main+0x368>)
 800096e:	9303      	str	r3, [sp, #12]
 8000970:	4b54      	ldr	r3, [pc, #336]	@ (8000ac4 <main+0x36c>)
 8000972:	9302      	str	r3, [sp, #8]
 8000974:	2302      	movs	r3, #2
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	23fa      	movs	r3, #250	@ 0xfa
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	0013      	movs	r3, r2
 8000980:	22c8      	movs	r2, #200	@ 0xc8
 8000982:	f005 fce3 	bl	800634c <ATC_SendReceive>
 8000986:	0002      	movs	r2, r0
 8000988:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac8 <main+0x370>)
 800098a:	601a      	str	r2, [r3, #0]
		  HAL_Delay(5000);
 800098c:	4b55      	ldr	r3, [pc, #340]	@ (8000ae4 <main+0x38c>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 ff62 	bl	8001858 <HAL_Delay>
		  
		  // Simple approach - deactivate any existing timer
		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000994:	4b54      	ldr	r3, [pc, #336]	@ (8000ae8 <main+0x390>)
 8000996:	0018      	movs	r0, r3
 8000998:	f003 fd88 	bl	80044ac <HAL_RTCEx_DeactivateWakeUpTimer>
		  HAL_Delay(10);
 800099c:	200a      	movs	r0, #10
 800099e:	f000 ff5b 	bl	8001858 <HAL_Delay>
		  
		  // Clear any pending wake-up timer flags
		  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80009a2:	4b51      	ldr	r3, [pc, #324]	@ (8000ae8 <main+0x390>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	22ff      	movs	r2, #255	@ 0xff
 80009aa:	401a      	ands	r2, r3
 80009ac:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae8 <main+0x390>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	494e      	ldr	r1, [pc, #312]	@ (8000aec <main+0x394>)
 80009b2:	430a      	orrs	r2, r1
 80009b4:	60da      	str	r2, [r3, #12]
		  
		  // Set up the wake-up timer for 5 seconds
		  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 11561, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
 80009b6:	494e      	ldr	r1, [pc, #312]	@ (8000af0 <main+0x398>)
 80009b8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <main+0x390>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	0018      	movs	r0, r3
 80009be:	f003 fc9d 	bl	80042fc <HAL_RTCEx_SetWakeUpTimer_IT>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d03e      	beq.n	8000a44 <main+0x2ec>
		      // If HAL function fails, try direct register access
		      __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80009c6:	4b48      	ldr	r3, [pc, #288]	@ (8000ae8 <main+0x390>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	22ca      	movs	r2, #202	@ 0xca
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <main+0x390>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2253      	movs	r2, #83	@ 0x53
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
		      
		      // Ensure timer is disabled first
		      hrtc.Instance->CR &= ~RTC_CR_WUTE;
 80009d6:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <main+0x390>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	4b42      	ldr	r3, [pc, #264]	@ (8000ae8 <main+0x390>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4944      	ldr	r1, [pc, #272]	@ (8000af4 <main+0x39c>)
 80009e2:	400a      	ands	r2, r1
 80009e4:	609a      	str	r2, [r3, #8]
		      while((__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF)) == 0);
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <main+0x390>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	d0f9      	beq.n	80009e8 <main+0x290>
		      
		      // Set timer value and configuration
		      hrtc.Instance->WUTR = 11561;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae8 <main+0x390>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a3d      	ldr	r2, [pc, #244]	@ (8000af0 <main+0x398>)
 80009fa:	615a      	str	r2, [r3, #20]
		      hrtc.Instance->CR &= ~RTC_CR_WUCKSEL;
 80009fc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae8 <main+0x390>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	4b39      	ldr	r3, [pc, #228]	@ (8000ae8 <main+0x390>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2107      	movs	r1, #7
 8000a08:	438a      	bics	r2, r1
 8000a0a:	609a      	str	r2, [r3, #8]
		      hrtc.Instance->CR |= RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ae8 <main+0x390>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <main+0x390>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6892      	ldr	r2, [r2, #8]
 8000a16:	609a      	str	r2, [r3, #8]
		      
		      // Enable interrupt and timer
		      __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);
 8000a18:	4b33      	ldr	r3, [pc, #204]	@ (8000ae8 <main+0x390>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <main+0x390>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	01c9      	lsls	r1, r1, #7
 8000a26:	430a      	orrs	r2, r1
 8000a28:	609a      	str	r2, [r3, #8]
		      hrtc.Instance->CR |= RTC_CR_WUTE;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <main+0x390>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <main+0x390>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	00c9      	lsls	r1, r1, #3
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	609a      	str	r2, [r3, #8]
		      
		      __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <main+0x390>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	22ff      	movs	r2, #255	@ 0xff
 8000a42:	625a      	str	r2, [r3, #36]	@ 0x24
		  }
		  
		  // Suspend SysTick and enter STOP mode
		  HAL_SuspendTick();
 8000a44:	f000 ff2c 	bl	80018a0 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f002 fb52 	bl	80030f4 <HAL_PWR_EnterSTOPMode>
		  
		  // After wake-up, restore system clock first
		  SystemClock_Config();
 8000a50:	f000 f856 	bl	8000b00 <SystemClock_Config>
		  HAL_ResumeTick();
 8000a54:	f000 ff32 	bl	80018bc <HAL_ResumeTick>
		  
		  // Don't immediately clean up the timer - let the interrupt handler do it
		  // The wake-up callback will set the state
		  break;
 8000a58:	e018      	b.n	8000a8c <main+0x334>

	  case DEVICE_SLEEP:
		  lorawan_state = COLLECT_DATA;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <main+0x350>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
	  break;
 8000a60:	e014      	b.n	8000a8c <main+0x334>
	  case COLLECT_DATA:
		  // Scan for sensors and read data
		  scan_i2c_bus();
 8000a62:	f000 fb29 	bl	80010b8 <scan_i2c_bus>
		  if (has_sensor_1 || has_sensor_2) {
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <main+0x3a0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <main+0x31e>
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <main+0x3a4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <main+0x322>
			  sensor_init_and_read();
 8000a76:	f000 fb6b 	bl	8001150 <sensor_init_and_read>
		  }
		  lorawan_state = LORAWAN_JOINED; // Go back to send data
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <main+0x350>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	701a      	strb	r2, [r3, #0]
		  break;
 8000a80:	e004      	b.n	8000a8c <main+0x334>
		break;
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	e6c8      	b.n	8000818 <main+0xc0>
		break;
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	e6c6      	b.n	8000818 <main+0xc0>
		break;
 8000a8a:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000a8c:	e6c4      	b.n	8000818 <main+0xc0>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010400 	.word	0x40010400
 8000a98:	200000d0 	.word	0x200000d0
 8000a9c:	20000144 	.word	0x20000144
 8000aa0:	08006ba4 	.word	0x08006ba4
 8000aa4:	00002710 	.word	0x00002710
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	08006bd4 	.word	0x08006bd4
 8000ab0:	0800699c 	.word	0x0800699c
 8000ab4:	080069a4 	.word	0x080069a4
 8000ab8:	20000118 	.word	0x20000118
 8000abc:	080069a8 	.word	0x080069a8
 8000ac0:	080069b4 	.word	0x080069b4
 8000ac4:	080069b8 	.word	0x080069b8
 8000ac8:	20000110 	.word	0x20000110
 8000acc:	20000262 	.word	0x20000262
 8000ad0:	080069bc 	.word	0x080069bc
 8000ad4:	080069c4 	.word	0x080069c4
 8000ad8:	20000114 	.word	0x20000114
 8000adc:	0000270f 	.word	0x0000270f
 8000ae0:	080069c8 	.word	0x080069c8
 8000ae4:	00001388 	.word	0x00001388
 8000ae8:	2000011c 	.word	0x2000011c
 8000aec:	fffffb7f 	.word	0xfffffb7f
 8000af0:	00002d29 	.word	0x00002d29
 8000af4:	fffffbff 	.word	0xfffffbff
 8000af8:	2000025c 	.word	0x2000025c
 8000afc:	2000025d 	.word	0x2000025d

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b09f      	sub	sp, #124	@ 0x7c
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	2440      	movs	r4, #64	@ 0x40
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2338      	movs	r3, #56	@ 0x38
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f005 fe4f 	bl	80067b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b16:	232c      	movs	r3, #44	@ 0x2c
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2314      	movs	r3, #20
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f005 fe47 	bl	80067b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	2328      	movs	r3, #40	@ 0x28
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f005 fe40 	bl	80067b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <SystemClock_Config+0xe4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemClock_Config+0xe8>)
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <SystemClock_Config+0xe4>)
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	0109      	lsls	r1, r1, #4
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000b46:	0021      	movs	r1, r4
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2218      	movs	r2, #24
 8000b4c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2201      	movs	r2, #1
 8000b52:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2201      	movs	r2, #1
 8000b58:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	22a0      	movs	r2, #160	@ 0xa0
 8000b64:	0212      	lsls	r2, r2, #8
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 fb1b 	bl	80031ac <HAL_RCC_OscConfig>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b7a:	f000 f837 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	212c      	movs	r1, #44	@ 0x2c
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	220f      	movs	r2, #15
 8000b84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fed6 	bl	8003954 <HAL_RCC_ClockConfig>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000bac:	f000 f81e 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	222c      	movs	r2, #44	@ 0x2c
 8000bb4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	0292      	lsls	r2, r2, #10
 8000bc8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f003 f8c5 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000bd6:	f000 f809 	bl	8000bec <Error_Handler>
  }
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b01f      	add	sp, #124	@ 0x7c
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	40007000 	.word	0x40007000
 8000be8:	ffffe7ff 	.word	0xffffe7ff

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <Error_Handler+0x18>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 fb1c 	bl	8002238 <HAL_GPIO_WritePin>
  while (1)
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x14>
 8000c04:	50000400 	.word	0x50000400

08000c08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <MX_RTC_Init+0x64>)
 8000c10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c1a:	227f      	movs	r2, #127	@ 0x7f
 8000c1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c20:	22ff      	movs	r2, #255	@ 0xff
 8000c22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f003 fa2a 	bl	8004098 <HAL_RTC_Init>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c48:	f7ff ffd0 	bl	8000bec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000c4c:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <MX_RTC_Init+0x68>)
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_RTC_Init+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f003 fb52 	bl	80042fc <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f7ff ffc6 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	2000011c 	.word	0x2000011c
 8000c6c:	40002800 	.word	0x40002800
 8000c70:	0000500b 	.word	0x0000500b

08000c74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_RTC_MspInit+0x38>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10e      	bne.n	8000ca4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_RTC_MspInit+0x3c>)
 8000c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_RTC_MspInit+0x3c>)
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	02c9      	lsls	r1, r1, #11
 8000c90:	430a      	orrs	r2, r1
 8000c92:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 fed1 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f000 fee3 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40002800 	.word	0x40002800
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_MspInit+0x24>)
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0549      	lsls	r1, r1, #21
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 fd8c 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC wake-up timer through EXTI line 20 interrupt.
  */
void RTC_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <RTC_IRQHandler+0x14>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f003 fc2c 	bl	8004574 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	2000011c 	.word	0x2000011c

08000d28 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 f81d 	bl	8001d6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 f819 	bl	8001d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	20000214 	.word	0x20000214
 8000d48:	200001cc 	.word	0x200001cc

08000d4c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <RNG_LPUART1_IRQHandler+0x14>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f003 fe36 	bl	80049c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000144 	.word	0x20000144

08000d64 <_sbrk>:
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
 8000d94:	f005 fd4c 	bl	8006830 <__errno>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	425b      	negs	r3, r3
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	18d2      	adds	r2, r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <_sbrk+0x64>)
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b006      	add	sp, #24
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20005000 	.word	0x20005000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000140 	.word	0x20000140
 8000dcc:	200003c0 	.word	0x200003c0

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_LPUART1_UART_Init+0x58>)
 8000de4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000de8:	22e1      	movs	r2, #225	@ 0xe1
 8000dea:	0252      	lsls	r2, r2, #9
 8000dec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <MX_LPUART1_UART_Init+0x54>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f003 fbda 	bl	80045d4 <HAL_UART_Init>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e24:	f7ff fee2 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	20000144 	.word	0x20000144
 8000e34:	40004800 	.word	0x40004800

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	240c      	movs	r4, #12
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	2314      	movs	r3, #20
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f005 fcb2 	bl	80067b4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a45      	ldr	r2, [pc, #276]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d000      	beq.n	8000e5c <HAL_UART_MspInit+0x24>
 8000e5a:	e083      	b.n	8000f64 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e5c:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e60:	4b43      	ldr	r3, [pc, #268]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e62:	2180      	movs	r1, #128	@ 0x80
 8000e64:	02c9      	lsls	r1, r1, #11
 8000e66:	430a      	orrs	r2, r1
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e6e:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e76:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e82:	0021      	movs	r1, r4
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	187a      	adds	r2, r7, r1
 8000ea4:	23a0      	movs	r3, #160	@ 0xa0
 8000ea6:	05db      	lsls	r3, r3, #23
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 f846 	bl	8001f3c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000eb2:	4a31      	ldr	r2, [pc, #196]	@ (8000f78 <HAL_UART_MspInit+0x140>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000eb8:	2205      	movs	r2, #5
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fddb 	bl	8001aa4 <HAL_DMA_Init>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ef2:	f7ff fe7b 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000efa:	675a      	str	r2, [r3, #116]	@ 0x74
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <HAL_UART_MspInit+0x148>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fdb2 	bl	8001aa4 <HAL_DMA_Init>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f44:	f7ff fe52 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f4c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f000 fd71 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000f5e:	201d      	movs	r0, #29
 8000f60:	f000 fd83 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b009      	add	sp, #36	@ 0x24
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	200001cc 	.word	0x200001cc
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	4002001c 	.word	0x4002001c

08000f84 <join_network>:
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
    return LORAWAN_OK;
}

LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0c8      	sub	sp, #288	@ 0x120
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	6078      	str	r0, [r7, #4]
    char  response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 8000f92:	2308      	movs	r3, #8
 8000f94:	18fa      	adds	r2, r7, r3
 8000f96:	490e      	ldr	r1, [pc, #56]	@ (8000fd0 <join_network+0x4c>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <join_network+0x50>)
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <join_network+0x54>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	2264      	movs	r2, #100	@ 0x64
 8000faa:	f005 f9cf 	bl	800634c <ATC_SendReceive>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	2286      	movs	r2, #134	@ 0x86
 8000fb2:	0052      	lsls	r2, r2, #1
 8000fb4:	18b9      	adds	r1, r7, r2
 8000fb6:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8000fb8:	18bb      	adds	r3, r7, r2
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da01      	bge.n	8000fc4 <join_network+0x40>
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	e000      	b.n	8000fc6 <join_network+0x42>
    return LORAWAN_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b044      	add	sp, #272	@ 0x110
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	08006b50 	.word	0x08006b50
 8000fd4:	080069e0 	.word	0x080069e0
 8000fd8:	00002710 	.word	0x00002710

08000fdc <to_hex_str>:
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
    return LORAWAN_OK;
}

void to_hex_str(uint32_t value, uint8_t width, char *output) {
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	250b      	movs	r5, #11
 8000fe8:	197b      	adds	r3, r7, r5
 8000fea:	1c0a      	adds	r2, r1, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 8000fee:	2310      	movs	r3, #16
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <to_hex_str+0x6c>)
 8000ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff8:	6811      	ldr	r1, [r2, #0]
 8000ffa:	6019      	str	r1, [r3, #0]
 8000ffc:	7912      	ldrb	r2, [r2, #4]
 8000ffe:	711a      	strb	r2, [r3, #4]
    for (int i = width - 1; i >= 0; --i) {
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
 8001008:	e00f      	b.n	800102a <to_hex_str+0x4e>
        output[i] = hex_chars[value & 0xF];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	220f      	movs	r2, #15
 800100e:	401a      	ands	r2, r3
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	18cb      	adds	r3, r1, r3
 8001016:	2110      	movs	r1, #16
 8001018:	1879      	adds	r1, r7, r1
 800101a:	5c8a      	ldrb	r2, [r1, r2]
 800101c:	701a      	strb	r2, [r3, #0]
        value >>= 4;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
    for (int i = width - 1; i >= 0; --i) {
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	3b01      	subs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	2b00      	cmp	r3, #0
 800102e:	daec      	bge.n	800100a <to_hex_str+0x2e>
    }
    output[width] = '\0';
 8001030:	230b      	movs	r3, #11
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b00a      	add	sp, #40	@ 0x28
 8001044:	bdb0      	pop	{r4, r5, r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	08006b80 	.word	0x08006b80

0800104c <format_at_send_cmd>:

void format_at_send_cmd(uint32_t data, uint8_t hex_digits, char *out_buf) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08f      	sub	sp, #60	@ 0x3c
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	200b      	movs	r0, #11
 8001058:	183b      	adds	r3, r7, r0
 800105a:	1c0a      	adds	r2, r1, #0
 800105c:	701a      	strb	r2, [r3, #0]
    char hex_str[33];
    to_hex_str(data, hex_digits, hex_str);
 800105e:	2414      	movs	r4, #20
 8001060:	193a      	adds	r2, r7, r4
 8001062:	183b      	adds	r3, r7, r0
 8001064:	7819      	ldrb	r1, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ffb7 	bl	8000fdc <to_hex_str>
    strcpy(out_buf, "AT+SEND \"");
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <format_at_send_cmd+0x64>)
 8001072:	0010      	movs	r0, r2
 8001074:	0019      	movs	r1, r3
 8001076:	230a      	movs	r3, #10
 8001078:	001a      	movs	r2, r3
 800107a:	f005 fc0d 	bl	8006898 <memcpy>
    strcat(out_buf, hex_str);
 800107e:	193a      	adds	r2, r7, r4
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f005 fb9d 	bl	80067c4 <strcat>
    strcat(out_buf, "\"\r\n");
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff f83b 	bl	8000108 <strlen>
 8001092:	0003      	movs	r3, r0
 8001094:	001a      	movs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	189a      	adds	r2, r3, r2
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <format_at_send_cmd+0x68>)
 800109c:	0010      	movs	r0, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	2304      	movs	r3, #4
 80010a2:	001a      	movs	r2, r3
 80010a4:	f005 fbf8 	bl	8006898 <memcpy>
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b00f      	add	sp, #60	@ 0x3c
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	08006b94 	.word	0x08006b94
 80010b4:	08006ba0 	.word	0x08006ba0

080010b8 <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	// Reset sensor flags
	has_sensor_1 = false;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <scan_i2c_bus+0x88>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <scan_i2c_bus+0x8c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <scan_i2c_bus+0x90>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 f8b1 	bl	8002238 <HAL_GPIO_WritePin>
    uint8_t addr;
    HAL_Delay(100); // let bus settle
 80010d6:	2064      	movs	r0, #100	@ 0x64
 80010d8:	f000 fbbe 	bl	8001858 <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	2203      	movs	r2, #3
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e01e      	b.n	8001122 <scan_i2c_bus+0x6a>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	18db      	adds	r3, r3, r3
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <scan_i2c_bus+0x94>)
 80010f0:	230a      	movs	r3, #10
 80010f2:	2201      	movs	r2, #1
 80010f4:	f001 fb96 	bl	8002824 <HAL_I2C_IsDeviceReady>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d10d      	bne.n	8001118 <scan_i2c_bus+0x60>
        {
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b44      	cmp	r3, #68	@ 0x44
 8001102:	d102      	bne.n	800110a <scan_i2c_bus+0x52>
        		has_sensor_1 = true;
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <scan_i2c_bus+0x88>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
        	}
        	if (addr == 0x46) {
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b46      	cmp	r3, #70	@ 0x46
 8001110:	d102      	bne.n	8001118 <scan_i2c_bus+0x60>
        		has_sensor_2 = true;
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <scan_i2c_bus+0x8c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
    for (addr = 3; addr < 0x78; addr++)
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b77      	cmp	r3, #119	@ 0x77
 8001128:	d9dc      	bls.n	80010e4 <scan_i2c_bus+0x2c>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <scan_i2c_bus+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	2120      	movs	r1, #32
 8001130:	0018      	movs	r0, r3
 8001132:	f001 f881 	bl	8002238 <HAL_GPIO_WritePin>
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	2000025c 	.word	0x2000025c
 8001144:	2000025d 	.word	0x2000025d
 8001148:	50000400 	.word	0x50000400
 800114c:	2000007c 	.word	0x2000007c

08001150 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	if (!has_sensor_1 && !has_sensor_2) {
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <sensor_init_and_read+0xd0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4053      	eors	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <sensor_init_and_read+0x26>
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <sensor_init_and_read+0xd4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2201      	movs	r2, #1
 8001168:	4053      	eors	r3, r2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <sensor_init_and_read+0x26>
		return -1;
 8001170:	2301      	movs	r3, #1
 8001172:	425b      	negs	r3, r3
 8001174:	e050      	b.n	8001218 <sensor_init_and_read+0xc8>
	}
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001176:	4b2c      	ldr	r3, [pc, #176]	@ (8001228 <sensor_init_and_read+0xd8>)
 8001178:	2201      	movs	r2, #1
 800117a:	2120      	movs	r1, #32
 800117c:	0018      	movs	r0, r3
 800117e:	f001 f85b 	bl	8002238 <HAL_GPIO_WritePin>
	error = NO_ERROR;
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <sensor_init_and_read+0xdc>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 8001188:	2064      	movs	r0, #100	@ 0x64
 800118a:	f000 fb65 	bl	8001858 <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <sensor_init_and_read+0xd0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d015      	beq.n	80011c2 <sensor_init_and_read+0x72>
	{
		sht4x_init(SHT43_I2C_ADDR_44);
 8001196:	2044      	movs	r0, #68	@ 0x44
 8001198:	f000 fa14 	bl	80015c4 <sht4x_init>
		sht4x_soft_reset();
 800119c:	f000 fa86 	bl	80016ac <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <sensor_init_and_read+0xe0>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f9e4 	bl	8001570 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT43_I2C_ADDR_44);
 80011a8:	2044      	movs	r0, #68	@ 0x44
 80011aa:	f000 fa0b 	bl	80015c4 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80011ae:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <sensor_init_and_read+0xe4>)
 80011b0:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <sensor_init_and_read+0xe8>)
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fa15 	bl	80015e4 <sht4x_measure_high_precision_ticks>
 80011ba:	0003      	movs	r3, r0
 80011bc:	001a      	movs	r2, r3
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <sensor_init_and_read+0xdc>)
 80011c0:	801a      	strh	r2, [r3, #0]
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <sensor_init_and_read+0xd4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d015      	beq.n	80011f6 <sensor_init_and_read+0xa6>
	{
		sht4x_init(SHT40_I2C_ADDR_46);
 80011ca:	2046      	movs	r0, #70	@ 0x46
 80011cc:	f000 f9fa 	bl	80015c4 <sht4x_init>
		sht4x_soft_reset();
 80011d0:	f000 fa6c 	bl	80016ac <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <sensor_init_and_read+0xe0>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f9ca 	bl	8001570 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT40_I2C_ADDR_46);
 80011dc:	2046      	movs	r0, #70	@ 0x46
 80011de:	f000 f9f1 	bl	80015c4 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 80011e2:	4a16      	ldr	r2, [pc, #88]	@ (800123c <sensor_init_and_read+0xec>)
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <sensor_init_and_read+0xf0>)
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 f9fb 	bl	80015e4 <sht4x_measure_high_precision_ticks>
 80011ee:	0003      	movs	r3, r0
 80011f0:	001a      	movs	r2, r3
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <sensor_init_and_read+0xdc>)
 80011f4:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <sensor_init_and_read+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 f81b 	bl	8002238 <HAL_GPIO_WritePin>

	if (error) return (-200);
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <sensor_init_and_read+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	5e9b      	ldrsh	r3, [r3, r2]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <sensor_init_and_read+0xc2>
 800120c:	23c8      	movs	r3, #200	@ 0xc8
 800120e:	425b      	negs	r3, r3
 8001210:	e002      	b.n	8001218 <sensor_init_and_read+0xc8>
	return error;
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <sensor_init_and_read+0xdc>)
 8001214:	2200      	movs	r2, #0
 8001216:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	2000025c 	.word	0x2000025c
 8001224:	2000025d 	.word	0x2000025d
 8001228:	50000400 	.word	0x50000400
 800122c:	20000266 	.word	0x20000266
 8001230:	00002710 	.word	0x00002710
 8001234:	20000260 	.word	0x20000260
 8001238:	2000025e 	.word	0x2000025e
 800123c:	20000264 	.word	0x20000264
 8001240:	20000262 	.word	0x20000262

08001244 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b21b      	sxth	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	b29b      	uxth	r3, r3
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	000a      	movs	r2, r1
 8001276:	1cbb      	adds	r3, r7, #2
 8001278:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800127a:	230d      	movs	r3, #13
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	22ff      	movs	r2, #255	@ 0xff
 8001280:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001282:	230e      	movs	r3, #14
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
 800128a:	e038      	b.n	80012fe <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800128c:	230e      	movs	r3, #14
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	7819      	ldrb	r1, [r3, #0]
 8001298:	220d      	movs	r2, #13
 800129a:	18bb      	adds	r3, r7, r2
 800129c:	18ba      	adds	r2, r7, r2
 800129e:	7812      	ldrb	r2, [r2, #0]
 80012a0:	404a      	eors	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80012a4:	230c      	movs	r3, #12
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	2208      	movs	r2, #8
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e01c      	b.n	80012e8 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80012ae:	210d      	movs	r1, #13
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da0a      	bge.n	80012d0 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	18db      	adds	r3, r3, r3
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	2231      	movs	r2, #49	@ 0x31
 80012c6:	4053      	eors	r3, r2
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e005      	b.n	80012dc <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80012d0:	230d      	movs	r3, #13
 80012d2:	18fa      	adds	r2, r7, r3
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	18db      	adds	r3, r3, r3
 80012da:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80012dc:	220c      	movs	r2, #12
 80012de:	18bb      	adds	r3, r7, r2
 80012e0:	18ba      	adds	r2, r7, r2
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	3a01      	subs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	230c      	movs	r3, #12
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1dd      	bne.n	80012ae <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80012f2:	220e      	movs	r2, #14
 80012f4:	18bb      	adds	r3, r7, r2
 80012f6:	18ba      	adds	r2, r7, r2
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	3201      	adds	r2, #1
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	230e      	movs	r3, #14
 8001300:	18fa      	adds	r2, r7, r3
 8001302:	1cbb      	adds	r3, r7, #2
 8001304:	8812      	ldrh	r2, [r2, #0]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3bf      	bcc.n	800128c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800130c:	230d      	movs	r3, #13
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	781b      	ldrb	r3, [r3, #0]
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b004      	add	sp, #16
 8001318:	bd80      	pop	{r7, pc}

0800131a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	0008      	movs	r0, r1
 8001324:	0011      	movs	r1, r2
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	1c02      	adds	r2, r0, #0
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	1c7b      	adds	r3, r7, #1
 800132e:	1c0a      	adds	r2, r1, #0
 8001330:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001332:	1cbb      	adds	r3, r7, #2
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ff96 	bl	800126c <sensirion_i2c_generate_crc>
 8001340:	0003      	movs	r3, r0
 8001342:	001a      	movs	r2, r3
 8001344:	1c7b      	adds	r3, r7, #1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4293      	cmp	r3, r2
 800134a:	d001      	beq.n	8001350 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}

0800135a <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	0008      	movs	r0, r1
 8001364:	0011      	movs	r1, r2
 8001366:	1cbb      	adds	r3, r7, #2
 8001368:	1c02      	adds	r2, r0, #0
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	1c0a      	adds	r2, r1, #0
 8001370:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001372:	1cbb      	adds	r3, r7, #2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	1cba      	adds	r2, r7, #2
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	8011      	strh	r1, [r2, #0]
 800137c:	001a      	movs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	189b      	adds	r3, r3, r2
 8001382:	1c7a      	adds	r2, r7, #1
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	701a      	strb	r2, [r3, #0]
    return offset;
 8001388:	1cbb      	adds	r3, r7, #2
 800138a:	881b      	ldrh	r3, [r3, #0]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6039      	str	r1, [r7, #0]
 800139c:	0011      	movs	r1, r2
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	1c02      	adds	r2, r0, #0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	1c0a      	adds	r2, r1, #0
 80013a8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f8b8 	bl	800152c <sensirion_i2c_hal_write>
 80013bc:	0003      	movs	r3, r0
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80013c6:	b5b0      	push	{r4, r5, r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	1c02      	adds	r2, r0, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	1c0a      	adds	r2, r1, #0
 80013da:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	220a      	movs	r2, #10
 80013e6:	18ba      	adds	r2, r7, r2
 80013e8:	1c19      	adds	r1, r3, #0
 80013ea:	1c0b      	adds	r3, r1, #0
 80013ec:	18db      	adds	r3, r3, r3
 80013ee:	185b      	adds	r3, r3, r1
 80013f0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001400:	2304      	movs	r3, #4
 8001402:	e06c      	b.n	80014de <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001404:	230a      	movs	r3, #10
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f868 	bl	80014e8 <sensirion_i2c_hal_read>
 8001418:	0003      	movs	r3, r0
 800141a:	001a      	movs	r2, r3
 800141c:	2108      	movs	r1, #8
 800141e:	187b      	adds	r3, r7, r1
 8001420:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001422:	000a      	movs	r2, r1
 8001424:	18bb      	adds	r3, r7, r2
 8001426:	2100      	movs	r1, #0
 8001428:	5e5b      	ldrsh	r3, [r3, r1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800142e:	18bb      	adds	r3, r7, r2
 8001430:	2200      	movs	r2, #0
 8001432:	5e9b      	ldrsh	r3, [r3, r2]
 8001434:	e053      	b.n	80014de <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001436:	230e      	movs	r3, #14
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2200      	movs	r2, #0
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	230c      	movs	r3, #12
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
 8001446:	e041      	b.n	80014cc <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001448:	210e      	movs	r1, #14
 800144a:	187b      	adds	r3, r7, r1
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001452:	187b      	adds	r3, r7, r1
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3302      	adds	r3, #2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001a      	movs	r2, r3
 8001460:	2102      	movs	r1, #2
 8001462:	f7ff ff5a 	bl	800131a <sensirion_i2c_check_crc>
 8001466:	0003      	movs	r3, r0
 8001468:	001a      	movs	r2, r3
 800146a:	2108      	movs	r1, #8
 800146c:	187b      	adds	r3, r7, r1
 800146e:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001470:	000a      	movs	r2, r1
 8001472:	18bb      	adds	r3, r7, r2
 8001474:	2100      	movs	r1, #0
 8001476:	5e5b      	ldrsh	r3, [r3, r1]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 800147c:	18bb      	adds	r3, r7, r2
 800147e:	2200      	movs	r2, #0
 8001480:	5e9b      	ldrsh	r3, [r3, r2]
 8001482:	e02c      	b.n	80014de <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001484:	240e      	movs	r4, #14
 8001486:	193b      	adds	r3, r7, r4
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	18d2      	adds	r2, r2, r3
 800148e:	250c      	movs	r5, #12
 8001490:	197b      	adds	r3, r7, r5
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	1979      	adds	r1, r7, r5
 8001496:	1c58      	adds	r0, r3, #1
 8001498:	8008      	strh	r0, [r1, #0]
 800149a:	0019      	movs	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	185b      	adds	r3, r3, r1
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	18d2      	adds	r2, r2, r3
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	1979      	adds	r1, r7, r5
 80014b4:	1c58      	adds	r0, r3, #1
 80014b6:	8008      	strh	r0, [r1, #0]
 80014b8:	0019      	movs	r1, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	185b      	adds	r3, r3, r1
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	193a      	adds	r2, r7, r4
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	3203      	adds	r2, #3
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	230e      	movs	r3, #14
 80014ce:	18fa      	adds	r2, r7, r3
 80014d0:	230a      	movs	r3, #10
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	8812      	ldrh	r2, [r2, #0]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3b5      	bcc.n	8001448 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6039      	str	r1, [r7, #0]
 80014f0:	0011      	movs	r1, r2
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	1c02      	adds	r2, r0, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	1c0a      	adds	r2, r1, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	18db      	adds	r3, r3, r3
 8001506:	b299      	uxth	r1, r3
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <sensirion_i2c_hal_read+0x40>)
 8001512:	2464      	movs	r4, #100	@ 0x64
 8001514:	9400      	str	r4, [sp, #0]
 8001516:	f001 f87d 	bl	8002614 <HAL_I2C_Master_Receive>
 800151a:	0003      	movs	r3, r0
 800151c:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b003      	add	sp, #12
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	2000007c 	.word	0x2000007c

0800152c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af02      	add	r7, sp, #8
 8001532:	6039      	str	r1, [r7, #0]
 8001534:	0011      	movs	r1, r2
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	1c02      	adds	r2, r0, #0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	1c0a      	adds	r2, r1, #0
 8001540:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	18db      	adds	r3, r3, r3
 800154a:	b299      	uxth	r1, r3
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <sensirion_i2c_hal_write+0x40>)
 8001556:	2464      	movs	r4, #100	@ 0x64
 8001558:	9400      	str	r4, [sp, #0]
 800155a:	f000 ff31 	bl	80023c0 <HAL_I2C_Master_Transmit>
 800155e:	0003      	movs	r3, r0
 8001560:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b003      	add	sp, #12
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	2000007c 	.word	0x2000007c

08001570 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	22fa      	movs	r2, #250	@ 0xfa
 800157c:	0091      	lsls	r1, r2, #2
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdca 	bl	8000118 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	22fa      	movs	r2, #250	@ 0xfa
 800158c:	0091      	lsls	r1, r2, #2
 800158e:	0018      	movs	r0, r3
 8001590:	f7fe fe48 	bl	8000224 <__aeabi_uidivmod>
 8001594:	1e0b      	subs	r3, r1, #0
 8001596:	d002      	beq.n	800159e <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 800159e:	f000 f99b 	bl	80018d8 <HAL_GetHalVersion>
 80015a2:	0003      	movs	r3, r0
 80015a4:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <sensirion_i2c_hal_sleep_usec+0x50>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d802      	bhi.n	80015b0 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f950 	bl	8001858 <HAL_Delay>
}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	010100ff 	.word	0x010100ff

080015c4 <sht4x_init>:
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	0002      	movs	r2, r0
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <sht4x_init+0x1c>)
 80015d2:	1dfa      	adds	r2, r7, #7
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000026e 	.word	0x2000026e

080015e4 <sht4x_measure_high_precision_ticks>:
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	2516      	movs	r5, #22
 80015f0:	197b      	adds	r3, r7, r5
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <sht4x_measure_high_precision_ticks+0xbc>)
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	260e      	movs	r6, #14
 80015fc:	19bb      	adds	r3, r7, r6
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	19bc      	adds	r4, r7, r6
 8001604:	19bb      	adds	r3, r7, r6
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	22fd      	movs	r2, #253	@ 0xfd
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fea4 	bl	800135a <sensirion_i2c_add_command8_to_buffer>
 8001612:	0003      	movs	r3, r0
 8001614:	8023      	strh	r3, [r4, #0]
 8001616:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <sht4x_measure_high_precision_ticks+0xc0>)
 8001618:	7818      	ldrb	r0, [r3, #0]
 800161a:	197c      	adds	r4, r7, r5
 800161c:	19bb      	adds	r3, r7, r6
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	0019      	movs	r1, r3
 8001624:	f7ff feb6 	bl	8001394 <sensirion_i2c_write_data>
 8001628:	0003      	movs	r3, r0
 800162a:	8023      	strh	r3, [r4, #0]
 800162c:	197b      	adds	r3, r7, r5
 800162e:	2200      	movs	r2, #0
 8001630:	5e9b      	ldrsh	r3, [r3, r2]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <sht4x_measure_high_precision_ticks+0x5a>
 8001636:	197b      	adds	r3, r7, r5
 8001638:	2200      	movs	r2, #0
 800163a:	5e9b      	ldrsh	r3, [r3, r2]
 800163c:	e02c      	b.n	8001698 <sht4x_measure_high_precision_ticks+0xb4>
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <sht4x_measure_high_precision_ticks+0xc4>)
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff ff95 	bl	8001570 <sensirion_i2c_hal_sleep_usec>
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <sht4x_measure_high_precision_ticks+0xc0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2516      	movs	r5, #22
 800164c:	197c      	adds	r4, r7, r5
 800164e:	6939      	ldr	r1, [r7, #16]
 8001650:	2204      	movs	r2, #4
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff feb7 	bl	80013c6 <sensirion_i2c_read_data_inplace>
 8001658:	0003      	movs	r3, r0
 800165a:	8023      	strh	r3, [r4, #0]
 800165c:	197b      	adds	r3, r7, r5
 800165e:	2200      	movs	r2, #0
 8001660:	5e9b      	ldrsh	r3, [r3, r2]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <sht4x_measure_high_precision_ticks+0x8a>
 8001666:	197b      	adds	r3, r7, r5
 8001668:	2200      	movs	r2, #0
 800166a:	5e9b      	ldrsh	r3, [r3, r2]
 800166c:	e014      	b.n	8001698 <sht4x_measure_high_precision_ticks+0xb4>
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fde7 	bl	8001244 <sensirion_common_bytes_to_uint16_t>
 8001676:	0003      	movs	r3, r0
 8001678:	001a      	movs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	3302      	adds	r3, #2
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff fdde 	bl	8001244 <sensirion_common_bytes_to_uint16_t>
 8001688:	0003      	movs	r3, r0
 800168a:	001a      	movs	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	2316      	movs	r3, #22
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	5e9b      	ldrsh	r3, [r3, r2]
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b007      	add	sp, #28
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a0:	20000268 	.word	0x20000268
 80016a4:	2000026e 	.word	0x2000026e
 80016a8:	00002710 	.word	0x00002710

080016ac <sht4x_soft_reset>:
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	250e      	movs	r5, #14
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	2200      	movs	r2, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <sht4x_soft_reset+0x6c>)
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	1dbb      	adds	r3, r7, #6
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	1dbc      	adds	r4, r7, #6
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	8819      	ldrh	r1, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2294      	movs	r2, #148	@ 0x94
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff fe43 	bl	800135a <sensirion_i2c_add_command8_to_buffer>
 80016d4:	0003      	movs	r3, r0
 80016d6:	8023      	strh	r3, [r4, #0]
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <sht4x_soft_reset+0x70>)
 80016da:	7818      	ldrb	r0, [r3, #0]
 80016dc:	197c      	adds	r4, r7, r5
 80016de:	1dbb      	adds	r3, r7, #6
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	0019      	movs	r1, r3
 80016e6:	f7ff fe55 	bl	8001394 <sensirion_i2c_write_data>
 80016ea:	0003      	movs	r3, r0
 80016ec:	8023      	strh	r3, [r4, #0]
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	2200      	movs	r2, #0
 80016f2:	5e9b      	ldrsh	r3, [r3, r2]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <sht4x_soft_reset+0x54>
 80016f8:	197b      	adds	r3, r7, r5
 80016fa:	2200      	movs	r2, #0
 80016fc:	5e9b      	ldrsh	r3, [r3, r2]
 80016fe:	e007      	b.n	8001710 <sht4x_soft_reset+0x64>
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <sht4x_soft_reset+0x74>)
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ff34 	bl	8001570 <sensirion_i2c_hal_sleep_usec>
 8001708:	230e      	movs	r3, #14
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2200      	movs	r2, #0
 800170e:	5e9b      	ldrsh	r3, [r3, r2]
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bdb0      	pop	{r4, r5, r7, pc}
 8001718:	20000268 	.word	0x20000268
 800171c:	2000026e 	.word	0x2000026e
 8001720:	00002710 	.word	0x00002710

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001724:	480d      	ldr	r0, [pc, #52]	@ (800175c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001726:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001728:	f7ff fb52 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <LoopForever+0x6>)
  ldr r1, =_edata
 800172e:	490d      	ldr	r1, [pc, #52]	@ (8001764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <LoopForever+0xe>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001744:	4c0a      	ldr	r4, [pc, #40]	@ (8001770 <LoopForever+0x16>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001752:	f005 f873 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7fe ffff 	bl	8000758 <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
   ldr   r0, =_estack
 800175c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001768:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 800176c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001770:	200003bc 	.word	0x200003bc

08001774 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC1_COMP_IRQHandler>
	...

08001778 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_Init+0x3c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Init+0x3c>)
 800178a:	2140      	movs	r1, #64	@ 0x40
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001790:	2000      	movs	r0, #0
 8001792:	f000 f811 	bl	80017b8 <HAL_InitTick>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d003      	beq.n	80017a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e001      	b.n	80017a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a2:	f7ff fa87 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_InitTick+0x5c>)
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_InitTick+0x60>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	0019      	movs	r1, r3
 80017ca:	23fa      	movs	r3, #250	@ 0xfa
 80017cc:	0098      	lsls	r0, r3, #2
 80017ce:	f7fe fca3 	bl	8000118 <__udivsi3>
 80017d2:	0003      	movs	r3, r0
 80017d4:	0019      	movs	r1, r3
 80017d6:	0020      	movs	r0, r4
 80017d8:	f7fe fc9e 	bl	8000118 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f953 	bl	8001a8a <HAL_SYSTICK_Config>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d001      	beq.n	80017ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e00f      	b.n	800180c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d80b      	bhi.n	800180a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	2301      	movs	r3, #1
 80017f6:	425b      	negs	r3, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f920 	bl	8001a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_InitTick+0x64>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b003      	add	sp, #12
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	20000004 	.word	0x20000004
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_IncTick+0x1c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_IncTick+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	18d2      	adds	r2, r2, r3
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_IncTick+0x20>)
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	46c0      	nop			@ (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000270 	.word	0x20000270

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b02      	ldr	r3, [pc, #8]	@ (8001854 <HAL_GetTick+0x10>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	20000270 	.word	0x20000270

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff fff0 	bl	8001844 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	001a      	movs	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	189b      	adds	r3, r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	f7ff ffe0 	bl	8001844 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_SuspendTick+0x18>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_SuspendTick+0x18>)
 80018aa:	2102      	movs	r1, #2
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <HAL_ResumeTick+0x18>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_ResumeTick+0x18>)
 80018c6:	2102      	movs	r1, #2
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 80018dc:	4b01      	ldr	r3, [pc, #4]	@ (80018e4 <HAL_GetHalVersion+0xc>)
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	010a0700 	.word	0x010a0700

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0002      	movs	r2, r0
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80018fa:	d809      	bhi.n	8001910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	001a      	movs	r2, r3
 8001902:	231f      	movs	r3, #31
 8001904:	401a      	ands	r2, r3
 8001906:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_EnableIRQ+0x30>)
 8001908:	2101      	movs	r1, #1
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
  }
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001930:	d828      	bhi.n	8001984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001932:	4a2f      	ldr	r2, [pc, #188]	@ (80019f0 <__NVIC_SetPriority+0xd4>)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	33c0      	adds	r3, #192	@ 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	589b      	ldr	r3, [r3, r2]
 8001942:	1dfa      	adds	r2, r7, #7
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0011      	movs	r1, r2
 8001948:	2203      	movs	r2, #3
 800194a:	400a      	ands	r2, r1
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	21ff      	movs	r1, #255	@ 0xff
 8001950:	4091      	lsls	r1, r2
 8001952:	000a      	movs	r2, r1
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	22ff      	movs	r2, #255	@ 0xff
 8001960:	401a      	ands	r2, r3
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	0018      	movs	r0, r3
 8001968:	2303      	movs	r3, #3
 800196a:	4003      	ands	r3, r0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <__NVIC_SetPriority+0xd4>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	430a      	orrs	r2, r1
 800197c:	33c0      	adds	r3, #192	@ 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001982:	e031      	b.n	80019e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001984:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <__NVIC_SetPriority+0xd8>)
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0019      	movs	r1, r3
 800198c:	230f      	movs	r3, #15
 800198e:	400b      	ands	r3, r1
 8001990:	3b08      	subs	r3, #8
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3306      	adds	r3, #6
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	18d3      	adds	r3, r2, r3
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1dfa      	adds	r2, r7, #7
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	0011      	movs	r1, r2
 80019a4:	2203      	movs	r2, #3
 80019a6:	400a      	ands	r2, r1
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	21ff      	movs	r1, #255	@ 0xff
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	401a      	ands	r2, r3
 80019b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	401a      	ands	r2, r3
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0018      	movs	r0, r3
 80019c4:	2303      	movs	r3, #3
 80019c6:	4003      	ands	r3, r0
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019cc:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <__NVIC_SetPriority+0xd8>)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	001c      	movs	r4, r3
 80019d4:	230f      	movs	r3, #15
 80019d6:	4023      	ands	r3, r4
 80019d8:	3b08      	subs	r3, #8
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	430a      	orrs	r2, r1
 80019de:	3306      	adds	r3, #6
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18c3      	adds	r3, r0, r3
 80019e4:	3304      	adds	r3, #4
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b003      	add	sp, #12
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	045b      	lsls	r3, r3, #17
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d301      	bcc.n	8001a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e010      	b.n	8001a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <SysTick_Config+0x44>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	3a01      	subs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ff7c 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x44>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x44>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	0002      	movs	r2, r0
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff33 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ffaf 	bl	80019f8 <SysTick_Config>
 8001a9a:	0003      	movs	r3, r0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e061      	b.n	8001b7a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a32      	ldr	r2, [pc, #200]	@ (8001b84 <HAL_DMA_Init+0xe0>)
 8001abc:	4694      	mov	ip, r2
 8001abe:	4463      	add	r3, ip
 8001ac0:	2114      	movs	r1, #20
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7fe fb28 	bl	8000118 <__udivsi3>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	009a      	lsls	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b88 <HAL_DMA_Init+0xe4>)
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2225      	movs	r2, #37	@ 0x25
 8001ada:	2102      	movs	r1, #2
 8001adc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <HAL_DMA_Init+0xe8>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	01db      	lsls	r3, r3, #7
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d018      	beq.n	8001b62 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_DMA_Init+0xec>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	211c      	movs	r1, #28
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	4099      	lsls	r1, r3
 8001b40:	000b      	movs	r3, r1
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_DMA_Init+0xec>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_DMA_Init+0xec>)
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	201c      	movs	r0, #28
 8001b58:	4003      	ands	r3, r0
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_DMA_Init+0xec>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2225      	movs	r2, #37	@ 0x25
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	bffdfff8 	.word	0xbffdfff8
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	ffff800f 	.word	0xffff800f
 8001b90:	400200a8 	.word	0x400200a8

08001b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2224      	movs	r2, #36	@ 0x24
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DMA_Start_IT+0x24>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e04f      	b.n	8001c58 <HAL_DMA_Start_IT+0xc4>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2224      	movs	r2, #36	@ 0x24
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2225      	movs	r2, #37	@ 0x25
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d13a      	bne.n	8001c42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2225      	movs	r2, #37	@ 0x25
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	438a      	bics	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f974 	bl	8001ede <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	210e      	movs	r1, #14
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00f      	b.n	8001c30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	210a      	movs	r1, #10
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e007      	b.n	8001c52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2224      	movs	r2, #36	@ 0x24
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c4a:	2317      	movs	r3, #23
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2202      	movs	r2, #2
 8001c50:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001c52:	2317      	movs	r3, #23
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b006      	add	sp, #24
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	230f      	movs	r3, #15
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2225      	movs	r2, #37	@ 0x25
 8001c74:	5c9b      	ldrb	r3, [r3, r2]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2224      	movs	r2, #36	@ 0x24
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e024      	b.n	8001cd8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	210e      	movs	r1, #14
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	438a      	bics	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	221c      	movs	r2, #28
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4091      	lsls	r1, r2
 8001cbe:	000a      	movs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2225      	movs	r2, #37	@ 0x25
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2224      	movs	r2, #36	@ 0x24
 8001cce:	2100      	movs	r1, #0
 8001cd0:	5499      	strb	r1, [r3, r2]

    return status;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	210f      	movs	r1, #15
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2225      	movs	r2, #37	@ 0x25
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d006      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e02a      	b.n	8001d60 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	210e      	movs	r1, #14
 8001d16:	438a      	bics	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	438a      	bics	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	221c      	movs	r2, #28
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2101      	movs	r1, #1
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2225      	movs	r2, #37	@ 0x25
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2224      	movs	r2, #36	@ 0x24
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	4798      	blx	r3
    }
  }
  return status;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	221c      	movs	r2, #28
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2204      	movs	r2, #4
 8001d90:	409a      	lsls	r2, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	d026      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x7a>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d022      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	4013      	ands	r3, r2
 8001dac:	d107      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2104      	movs	r1, #4
 8001dba:	438a      	bics	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	221c      	movs	r2, #28
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4091      	lsls	r1, r2
 8001dce:	000a      	movs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d100      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x6e>
 8001dda:	e071      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	0010      	movs	r0, r2
 8001de4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001de6:	e06b      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	221c      	movs	r2, #28
 8001dee:	4013      	ands	r3, r2
 8001df0:	2202      	movs	r2, #2
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d02d      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xea>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d029      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d10b      	bne.n	8001e28 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	210a      	movs	r1, #10
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2225      	movs	r2, #37	@ 0x25
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2c:	221c      	movs	r2, #28
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	2102      	movs	r1, #2
 8001e36:	4091      	lsls	r1, r2
 8001e38:	000a      	movs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	@ 0x24
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d039      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	0010      	movs	r0, r2
 8001e54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e56:	e033      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	221c      	movs	r2, #28
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2208      	movs	r2, #8
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d02a      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x154>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2208      	movs	r2, #8
 8001e70:	4013      	ands	r3, r2
 8001e72:	d026      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	210e      	movs	r1, #14
 8001e80:	438a      	bics	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e88:	221c      	movs	r2, #28
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	2101      	movs	r1, #1
 8001e92:	4091      	lsls	r1, r2
 8001e94:	000a      	movs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2225      	movs	r2, #37	@ 0x25
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2224      	movs	r2, #36	@ 0x24
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	0010      	movs	r0, r2
 8001ebe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	46c0      	nop			@ (mov r8, r8)
}
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}

08001ede <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	221c      	movs	r2, #28
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4091      	lsls	r1, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d108      	bne.n	8001f22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f20:	e007      	b.n	8001f32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	60da      	str	r2, [r3, #12]
}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f52:	e155      	b.n	8002200 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4091      	lsls	r1, r2
 8001f5e:	000a      	movs	r2, r1
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d100      	bne.n	8001f6c <HAL_GPIO_Init+0x30>
 8001f6a:	e146      	b.n	80021fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d130      	bne.n	8001fe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fba:	2201      	movs	r2, #1
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d017      	beq.n	8002022 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	409a      	lsls	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	43da      	mvns	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2203      	movs	r2, #3
 8002028:	4013      	ands	r3, r2
 800202a:	2b02      	cmp	r3, #2
 800202c:	d123      	bne.n	8002076 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	58d3      	ldr	r3, [r2, r3]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2207      	movs	r2, #7
 8002040:	4013      	ands	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	409a      	lsls	r2, r3
 8002048:	0013      	movs	r3, r2
 800204a:	43da      	mvns	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2107      	movs	r1, #7
 800205a:	400b      	ands	r3, r1
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	43da      	mvns	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	401a      	ands	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	4013      	ands	r3, r2
 80020b4:	d100      	bne.n	80020b8 <HAL_GPIO_Init+0x17c>
 80020b6:	e0a0      	b.n	80021fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_GPIO_Init+0x2dc>)
 80020ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020bc:	4b56      	ldr	r3, [pc, #344]	@ (8002218 <HAL_GPIO_Init+0x2dc>)
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c4:	4a55      	ldr	r2, [pc, #340]	@ (800221c <HAL_GPIO_Init+0x2e0>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	43da      	mvns	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	23a0      	movs	r3, #160	@ 0xa0
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x1f6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002220 <HAL_GPIO_Init+0x2e4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x1f2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a49      	ldr	r2, [pc, #292]	@ (8002224 <HAL_GPIO_Init+0x2e8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x1ee>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a48      	ldr	r2, [pc, #288]	@ (8002228 <HAL_GPIO_Init+0x2ec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x1ea>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a47      	ldr	r2, [pc, #284]	@ (800222c <HAL_GPIO_Init+0x2f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x1e6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_GPIO_Init+0x2f4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x1e2>
 800211a:	2305      	movs	r3, #5
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 800211e:	2306      	movs	r3, #6
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x1f8>
 8002132:	2300      	movs	r3, #0
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	2103      	movs	r1, #3
 8002138:	400a      	ands	r2, r1
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	@ (800221c <HAL_GPIO_Init+0x2e0>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b38      	ldr	r3, [pc, #224]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	035b      	lsls	r3, r3, #13
 800216a:	4013      	ands	r3, r2
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002176:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43da      	mvns	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	039b      	lsls	r3, r3, #14
 8002194:	4013      	ands	r3, r2
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021a0:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43da      	mvns	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	4013      	ands	r3, r2
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	40da      	lsrs	r2, r3
 8002208:	1e13      	subs	r3, r2, #0
 800220a:	d000      	beq.n	800220e <HAL_GPIO_Init+0x2d2>
 800220c:	e6a2      	b.n	8001f54 <HAL_GPIO_Init+0x18>
  }
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b006      	add	sp, #24
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	50000400 	.word	0x50000400
 8002224:	50000800 	.word	0x50000800
 8002228:	50000c00 	.word	0x50000c00
 800222c:	50001000 	.word	0x50001000
 8002230:	50001c00 	.word	0x50001c00
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	0008      	movs	r0, r1
 8002242:	0011      	movs	r1, r2
 8002244:	1cbb      	adds	r3, r7, #2
 8002246:	1c02      	adds	r2, r0, #0
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	1c7b      	adds	r3, r7, #1
 800224c:	1c0a      	adds	r2, r1, #0
 800224e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002250:	1c7b      	adds	r3, r7, #1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002258:	1cbb      	adds	r3, r7, #2
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002262:	1cbb      	adds	r3, r7, #2
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e08f      	b.n	80023a6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2241      	movs	r2, #65	@ 0x41
 800228a:	5c9b      	ldrb	r3, [r3, r2]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	2100      	movs	r1, #0
 8002298:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe f99b 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	@ 0x41
 80022a6:	2124      	movs	r1, #36	@ 0x24
 80022a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	438a      	bics	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	493b      	ldr	r1, [pc, #236]	@ (80023b0 <HAL_I2C_Init+0x13c>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4938      	ldr	r1, [pc, #224]	@ (80023b4 <HAL_I2C_Init+0x140>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d108      	bne.n	80022f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	0209      	lsls	r1, r1, #8
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e007      	b.n	8002302 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2184      	movs	r1, #132	@ 0x84
 80022fc:	0209      	lsls	r1, r1, #8
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d109      	bne.n	800231e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	0109      	lsls	r1, r1, #4
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	e007      	b.n	800232e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4923      	ldr	r1, [pc, #140]	@ (80023b8 <HAL_I2C_Init+0x144>)
 800232a:	400a      	ands	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4920      	ldr	r1, [pc, #128]	@ (80023bc <HAL_I2C_Init+0x148>)
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	491a      	ldr	r1, [pc, #104]	@ (80023b4 <HAL_I2C_Init+0x140>)
 800234a:	400a      	ands	r2, r1
 800234c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	431a      	orrs	r2, r3
 8002358:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2241      	movs	r2, #65	@ 0x41
 8002392:	2120      	movs	r1, #32
 8002394:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2242      	movs	r2, #66	@ 0x42
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b002      	add	sp, #8
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	f0ffffff 	.word	0xf0ffffff
 80023b4:	ffff7fff 	.word	0xffff7fff
 80023b8:	fffff7ff 	.word	0xfffff7ff
 80023bc:	02008000 	.word	0x02008000

080023c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	0008      	movs	r0, r1
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	0019      	movs	r1, r3
 80023ce:	230a      	movs	r3, #10
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	1c02      	adds	r2, r0, #0
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	2308      	movs	r3, #8
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	1c0a      	adds	r2, r1, #0
 80023dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2241      	movs	r2, #65	@ 0x41
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d000      	beq.n	80023ec <HAL_I2C_Master_Transmit+0x2c>
 80023ea:	e10a      	b.n	8002602 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2240      	movs	r2, #64	@ 0x40
 80023f0:	5c9b      	ldrb	r3, [r3, r2]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Master_Transmit+0x3a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e104      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002402:	f7ff fa1f 	bl	8001844 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	0219      	lsls	r1, r3, #8
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	f000 fb22 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0ef      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2241      	movs	r2, #65	@ 0x41
 8002428:	2121      	movs	r1, #33	@ 0x21
 800242a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2242      	movs	r2, #66	@ 0x42
 8002430:	2110      	movs	r1, #16
 8002432:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2208      	movs	r2, #8
 8002444:	18ba      	adds	r2, r7, r2
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2bff      	cmp	r3, #255	@ 0xff
 8002458:	d906      	bls.n	8002468 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	22ff      	movs	r2, #255	@ 0xff
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	045b      	lsls	r3, r3, #17
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e007      	b.n	8002478 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	049b      	lsls	r3, r3, #18
 8002476:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	2b00      	cmp	r3, #0
 800247e:	d027      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	697c      	ldr	r4, [r7, #20]
 80024bc:	230a      	movs	r3, #10
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	8819      	ldrh	r1, [r3, #0]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	4b51      	ldr	r3, [pc, #324]	@ (800260c <HAL_I2C_Master_Transmit+0x24c>)
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	0023      	movs	r3, r4
 80024ca:	f000 fd41 	bl	8002f50 <I2C_TransferConfig>
 80024ce:	e06f      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	697c      	ldr	r4, [r7, #20]
 80024d8:	230a      	movs	r3, #10
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	8819      	ldrh	r1, [r3, #0]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_I2C_Master_Transmit+0x24c>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	0023      	movs	r3, r4
 80024e6:	f000 fd33 	bl	8002f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024ea:	e061      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb0c 	bl	8002b10 <I2C_WaitOnTXISFlagUntilTimeout>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e081      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03a      	beq.n	80025b0 <HAL_I2C_Master_Transmit+0x1f0>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d136      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	0013      	movs	r3, r2
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	f000 fa86 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e053      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	@ 0xff
 8002564:	d911      	bls.n	800258a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	@ 0xff
 800256a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	045c      	lsls	r4, r3, #17
 8002576:	230a      	movs	r3, #10
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	8819      	ldrh	r1, [r3, #0]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	0023      	movs	r3, r4
 8002584:	f000 fce4 	bl	8002f50 <I2C_TransferConfig>
 8002588:	e012      	b.n	80025b0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	049c      	lsls	r4, r3, #18
 800259e:	230a      	movs	r3, #10
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	8819      	ldrh	r1, [r3, #0]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	0023      	movs	r3, r4
 80025ac:	f000 fcd0 	bl	8002f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d198      	bne.n	80024ec <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 faeb 	bl	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e01a      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2220      	movs	r2, #32
 80025d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	490b      	ldr	r1, [pc, #44]	@ (8002610 <HAL_I2C_Master_Transmit+0x250>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	2120      	movs	r1, #32
 80025ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2242      	movs	r2, #66	@ 0x42
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2240      	movs	r2, #64	@ 0x40
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
  }
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b007      	add	sp, #28
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	80002000 	.word	0x80002000
 8002610:	fe00e800 	.word	0xfe00e800

08002614 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	@ 0x24
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	0008      	movs	r0, r1
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	0019      	movs	r1, r3
 8002622:	230a      	movs	r3, #10
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	1c02      	adds	r2, r0, #0
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	2308      	movs	r3, #8
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	1c0a      	adds	r2, r1, #0
 8002630:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2241      	movs	r2, #65	@ 0x41
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d000      	beq.n	8002640 <HAL_I2C_Master_Receive+0x2c>
 800263e:	e0e8      	b.n	8002812 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_I2C_Master_Receive+0x3a>
 800264a:	2302      	movs	r3, #2
 800264c:	e0e2      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2240      	movs	r2, #64	@ 0x40
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002656:	f7ff f8f5 	bl	8001844 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	0219      	lsls	r1, r3, #8
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2319      	movs	r3, #25
 800266a:	2201      	movs	r2, #1
 800266c:	f000 f9f8 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0cd      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2241      	movs	r2, #65	@ 0x41
 800267c:	2122      	movs	r1, #34	@ 0x22
 800267e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2242      	movs	r2, #66	@ 0x42
 8002684:	2110      	movs	r1, #16
 8002686:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2208      	movs	r2, #8
 8002698:	18ba      	adds	r2, r7, r2
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2bff      	cmp	r3, #255	@ 0xff
 80026ac:	d911      	bls.n	80026d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	045c      	lsls	r4, r3, #17
 80026be:	230a      	movs	r3, #10
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	8819      	ldrh	r1, [r3, #0]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	4b55      	ldr	r3, [pc, #340]	@ (800281c <HAL_I2C_Master_Receive+0x208>)
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	0023      	movs	r3, r4
 80026cc:	f000 fc40 	bl	8002f50 <I2C_TransferConfig>
 80026d0:	e076      	b.n	80027c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	049c      	lsls	r4, r3, #18
 80026e6:	230a      	movs	r3, #10
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	8819      	ldrh	r1, [r3, #0]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_I2C_Master_Receive+0x208>)
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	0023      	movs	r3, r4
 80026f4:	f000 fc2c 	bl	8002f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026f8:	e062      	b.n	80027c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 fa8f 	bl	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e082      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03a      	beq.n	80027c0 <HAL_I2C_Master_Receive+0x1ac>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d136      	bne.n	80027c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	0013      	movs	r3, r2
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	f000 f97e 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e053      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2bff      	cmp	r3, #255	@ 0xff
 8002774:	d911      	bls.n	800279a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	@ 0xff
 800277a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	045c      	lsls	r4, r3, #17
 8002786:	230a      	movs	r3, #10
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	8819      	ldrh	r1, [r3, #0]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	0023      	movs	r3, r4
 8002794:	f000 fbdc 	bl	8002f50 <I2C_TransferConfig>
 8002798:	e012      	b.n	80027c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	049c      	lsls	r4, r3, #18
 80027ae:	230a      	movs	r3, #10
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	8819      	ldrh	r1, [r3, #0]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	0023      	movs	r3, r4
 80027bc:	f000 fbc8 	bl	8002f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d197      	bne.n	80026fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f9e3 	bl	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e01a      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2220      	movs	r2, #32
 80027e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	490b      	ldr	r1, [pc, #44]	@ (8002820 <HAL_I2C_Master_Receive+0x20c>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2241      	movs	r2, #65	@ 0x41
 80027fa:	2120      	movs	r1, #32
 80027fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2242      	movs	r2, #66	@ 0x42
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2240      	movs	r2, #64	@ 0x40
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b007      	add	sp, #28
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	80002400 	.word	0x80002400
 8002820:	fe00e800 	.word	0xfe00e800

08002824 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	230a      	movs	r3, #10
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	1c0a      	adds	r2, r1, #0
 8002836:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2241      	movs	r2, #65	@ 0x41
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b20      	cmp	r3, #32
 8002846:	d000      	beq.n	800284a <HAL_I2C_IsDeviceReady+0x26>
 8002848:	e0df      	b.n	8002a0a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	401a      	ands	r2, r3
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	429a      	cmp	r2, r3
 800285c:	d101      	bne.n	8002862 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	e0d4      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2240      	movs	r2, #64	@ 0x40
 8002866:	5c9b      	ldrb	r3, [r3, r2]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2C_IsDeviceReady+0x4c>
 800286c:	2302      	movs	r3, #2
 800286e:	e0cd      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	2101      	movs	r1, #1
 8002876:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2241      	movs	r2, #65	@ 0x41
 800287c:	2124      	movs	r1, #36	@ 0x24
 800287e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_I2C_IsDeviceReady+0x7a>
 800288e:	230a      	movs	r3, #10
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	059b      	lsls	r3, r3, #22
 8002896:	0d9b      	lsrs	r3, r3, #22
 8002898:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <HAL_I2C_IsDeviceReady+0x1f0>)
 800289a:	431a      	orrs	r2, r3
 800289c:	e006      	b.n	80028ac <HAL_I2C_IsDeviceReady+0x88>
 800289e:	230a      	movs	r3, #10
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	059b      	lsls	r3, r3, #22
 80028a6:	0d9b      	lsrs	r3, r3, #22
 80028a8:	4a5b      	ldr	r2, [pc, #364]	@ (8002a18 <HAL_I2C_IsDeviceReady+0x1f4>)
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe ffc7 	bl	8001844 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2220      	movs	r2, #32
 80028c2:	4013      	ands	r3, r2
 80028c4:	3b20      	subs	r3, #32
 80028c6:	425a      	negs	r2, r3
 80028c8:	4153      	adcs	r3, r2
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	231f      	movs	r3, #31
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2210      	movs	r2, #16
 80028da:	4013      	ands	r3, r2
 80028dc:	3b10      	subs	r3, #16
 80028de:	425a      	negs	r2, r3
 80028e0:	4153      	adcs	r3, r2
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	231e      	movs	r3, #30
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028ea:	e035      	b.n	8002958 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	d01a      	beq.n	8002928 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe ffa7 	bl	8001844 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <HAL_I2C_IsDeviceReady+0xe4>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2241      	movs	r2, #65	@ 0x41
 800290c:	2120      	movs	r1, #32
 800290e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	2220      	movs	r2, #32
 8002916:	431a      	orrs	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e071      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
 8002932:	3b20      	subs	r3, #32
 8002934:	425a      	negs	r2, r3
 8002936:	4153      	adcs	r3, r2
 8002938:	b2da      	uxtb	r2, r3
 800293a:	231f      	movs	r3, #31
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2210      	movs	r2, #16
 8002948:	4013      	ands	r3, r2
 800294a:	3b10      	subs	r3, #16
 800294c:	425a      	negs	r2, r3
 800294e:	4153      	adcs	r3, r2
 8002950:	b2da      	uxtb	r2, r3
 8002952:	231e      	movs	r3, #30
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_I2C_IsDeviceReady+0x148>
 8002962:	231e      	movs	r3, #30
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0bf      	beq.n	80028ec <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2210      	movs	r2, #16
 8002974:	4013      	ands	r3, r2
 8002976:	2b10      	cmp	r3, #16
 8002978:	d01a      	beq.n	80029b0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	0013      	movs	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	2120      	movs	r1, #32
 8002988:	f000 f86a 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e03b      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2220      	movs	r2, #32
 800299a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2241      	movs	r2, #65	@ 0x41
 80029a0:	2120      	movs	r1, #32
 80029a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2240      	movs	r2, #64	@ 0x40
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e02d      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	0013      	movs	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	2120      	movs	r1, #32
 80029be:	f000 f84f 	bl	8002a60 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e020      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d900      	bls.n	80029ea <HAL_I2C_IsDeviceReady+0x1c6>
 80029e8:	e74d      	b.n	8002886 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2241      	movs	r2, #65	@ 0x41
 80029ee:	2120      	movs	r1, #32
 80029f0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	2220      	movs	r2, #32
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b008      	add	sp, #32
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	02002000 	.word	0x02002000
 8002a18:	02002800 	.word	0x02002800

08002a1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	619a      	str	r2, [r3, #24]
  }
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a70:	e03a      	b.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 f971 	bl	8002d60 <I2C_IsErrorOccurred>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e040      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	d02d      	beq.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8c:	f7fe feda 	bl	8001844 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d122      	bne.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	425a      	negs	r2, r3
 8002ab2:	4153      	adcs	r3, r2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d113      	bne.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2241      	movs	r2, #65	@ 0x41
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2242      	movs	r2, #66	@ 0x42
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2240      	movs	r2, #64	@ 0x40
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e00f      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	425a      	negs	r2, r3
 8002af8:	4153      	adcs	r3, r2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	001a      	movs	r2, r3
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d0b5      	beq.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b1c:	e032      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f91b 	bl	8002d60 <I2C_IsErrorOccurred>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e030      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3301      	adds	r3, #1
 8002b36:	d025      	beq.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fe84 	bl	8001844 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11a      	bne.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d013      	beq.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b60:	2220      	movs	r2, #32
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2241      	movs	r2, #65	@ 0x41
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2242      	movs	r2, #66	@ 0x42
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2240      	movs	r2, #64	@ 0x40
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d1c5      	bne.n	8002b1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	e02f      	b.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f8d5 	bl	8002d60 <I2C_IsErrorOccurred>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02d      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fe41 	bl	8001844 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11a      	bne.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d013      	beq.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	2220      	movs	r2, #32
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2241      	movs	r2, #65	@ 0x41
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2242      	movs	r2, #66	@ 0x42
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2220      	movs	r2, #32
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d1c8      	bne.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b004      	add	sp, #16
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2317      	movs	r3, #23
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c38:	e07b      	b.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 f88d 	bl	8002d60 <I2C_IsErrorOccurred>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d003      	beq.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d140      	bne.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002c60:	2117      	movs	r1, #23
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d13b      	bne.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d106      	bne.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d123      	bne.n	8002cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4929      	ldr	r1, [pc, #164]	@ (8002d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2241      	movs	r2, #65	@ 0x41
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2242      	movs	r2, #66	@ 0x42
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2240      	movs	r2, #64	@ 0x40
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002cd2:	2317      	movs	r3, #23
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e002      	b.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ce2:	f7fe fdaf 	bl	8001844 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11c      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002cf8:	2017      	movs	r0, #23
 8002cfa:	183b      	adds	r3, r7, r0
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d117      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d010      	beq.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	2220      	movs	r2, #32
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2241      	movs	r2, #65	@ 0x41
 8002d20:	2120      	movs	r1, #32
 8002d22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2240      	movs	r2, #64	@ 0x40
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002d2c:	183b      	adds	r3, r7, r0
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d005      	beq.n	8002d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d40:	2317      	movs	r3, #23
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d100      	bne.n	8002d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d4a:	e776      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002d4c:	2317      	movs	r3, #23
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	781b      	ldrb	r3, [r3, #0]
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b006      	add	sp, #24
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	fe00e800 	.word	0xfe00e800

08002d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2327      	movs	r3, #39	@ 0x27
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2210      	movs	r2, #16
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <I2C_IsErrorOccurred+0x2e>
 8002d8c:	e079      	b.n	8002e82 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d96:	e057      	b.n	8002e48 <I2C_IsErrorOccurred+0xe8>
 8002d98:	2227      	movs	r2, #39	@ 0x27
 8002d9a:	18bb      	adds	r3, r7, r2
 8002d9c:	18ba      	adds	r2, r7, r2
 8002d9e:	7812      	ldrb	r2, [r2, #0]
 8002da0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3301      	adds	r3, #1
 8002da6:	d04f      	beq.n	8002e48 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe fd4c 	bl	8001844 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_IsErrorOccurred+0x5e>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d144      	bne.n	8002e48 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	01db      	lsls	r3, r3, #7
 8002dc8:	4013      	ands	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dcc:	2013      	movs	r0, #19
 8002dce:	183b      	adds	r3, r7, r0
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	2142      	movs	r1, #66	@ 0x42
 8002dd4:	5c52      	ldrb	r2, [r2, r1]
 8002dd6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	401a      	ands	r2, r3
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d126      	bne.n	8002e3a <I2C_IsErrorOccurred+0xda>
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	01db      	lsls	r3, r3, #7
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d021      	beq.n	8002e3a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002df6:	183b      	adds	r3, r7, r0
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d01d      	beq.n	8002e3a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	@ 0x80
 8002e0a:	01c9      	lsls	r1, r1, #7
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e10:	f7fe fd18 	bl	8001844 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e18:	e00f      	b.n	8002e3a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e1a:	f7fe fd13 	bl	8001844 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b19      	cmp	r3, #25
 8002e26:	d908      	bls.n	8002e3a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e30:	2327      	movs	r3, #39	@ 0x27
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]

              break;
 8002e38:	e006      	b.n	8002e48 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2220      	movs	r2, #32
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d1e8      	bne.n	8002e1a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d004      	beq.n	8002e60 <I2C_IsErrorOccurred+0x100>
 8002e56:	2327      	movs	r3, #39	@ 0x27
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d09b      	beq.n	8002d98 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e60:	2327      	movs	r3, #39	@ 0x27
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2204      	movs	r2, #4
 8002e76:	4313      	orrs	r3, r2
 8002e78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e7a:	2327      	movs	r3, #39	@ 0x27
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00c      	beq.n	8002eae <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	0052      	lsls	r2, r2, #1
 8002ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea6:	2327      	movs	r3, #39	@ 0x27
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00c      	beq.n	8002ed2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2208      	movs	r2, #8
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2280      	movs	r2, #128	@ 0x80
 8002ec6:	00d2      	lsls	r2, r2, #3
 8002ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eca:	2327      	movs	r3, #39	@ 0x27
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00c      	beq.n	8002ef6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2280      	movs	r2, #128	@ 0x80
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eee:	2327      	movs	r3, #39	@ 0x27
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002ef6:	2327      	movs	r3, #39	@ 0x27
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01d      	beq.n	8002f3c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff fd8a 	bl	8002a1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <I2C_IsErrorOccurred+0x1ec>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2241      	movs	r2, #65	@ 0x41
 8002f28:	2120      	movs	r1, #32
 8002f2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2242      	movs	r2, #66	@ 0x42
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f3c:	2327      	movs	r3, #39	@ 0x27
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b00a      	add	sp, #40	@ 0x28
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	0008      	movs	r0, r1
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	240a      	movs	r4, #10
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	1c02      	adds	r2, r0, #0
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	2009      	movs	r0, #9
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	1c0a      	adds	r2, r1, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	059b      	lsls	r3, r3, #22
 8002f74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	0419      	lsls	r1, r3, #16
 8002f7c:	23ff      	movs	r3, #255	@ 0xff
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f9a:	0d51      	lsrs	r1, r2, #21
 8002f9c:	2280      	movs	r2, #128	@ 0x80
 8002f9e:	00d2      	lsls	r2, r2, #3
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	4907      	ldr	r1, [pc, #28]	@ (8002fc0 <I2C_TransferConfig+0x70>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	43d2      	mvns	r2, r2
 8002fa8:	401a      	ands	r2, r3
 8002faa:	0011      	movs	r1, r2
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b007      	add	sp, #28
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	03ff63ff 	.word	0x03ff63ff

08002fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2241      	movs	r2, #65	@ 0x41
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d138      	bne.n	800304c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	@ 0x40
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e032      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2240      	movs	r2, #64	@ 0x40
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2241      	movs	r2, #65	@ 0x41
 8002ff4:	2124      	movs	r1, #36	@ 0x24
 8002ff6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4911      	ldr	r1, [pc, #68]	@ (8003058 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003014:	400a      	ands	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2101      	movs	r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2241      	movs	r2, #65	@ 0x41
 800303c:	2120      	movs	r1, #32
 800303e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	@ 0x40
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	ffffefff 	.word	0xffffefff

0800305c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2241      	movs	r2, #65	@ 0x41
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	d139      	bne.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2240      	movs	r2, #64	@ 0x40
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800307c:	2302      	movs	r3, #2
 800307e:	e033      	b.n	80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2241      	movs	r2, #65	@ 0x41
 800308c:	2124      	movs	r1, #36	@ 0x24
 800308e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a11      	ldr	r2, [pc, #68]	@ (80030f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2241      	movs	r2, #65	@ 0x41
 80030d6:	2120      	movs	r1, #32
 80030d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2240      	movs	r2, #64	@ 0x40
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b004      	add	sp, #16
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	fffff0ff 	.word	0xfffff0ff

080030f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	000a      	movs	r2, r1
 80030fe:	1cfb      	adds	r3, r7, #3
 8003100:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003106:	4b25      	ldr	r3, [pc, #148]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003112:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <HAL_PWR_EnterSTOPMode+0xac>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_PWR_EnterSTOPMode+0x40>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003128:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 800312e:	491d      	ldr	r1, [pc, #116]	@ (80031a4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2203      	movs	r2, #3
 800313e:	4393      	bics	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003150:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003156:	2104      	movs	r1, #4
 8003158:	430a      	orrs	r2, r1
 800315a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800315c:	1cfb      	adds	r3, r7, #3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003164:	bf30      	wfi
 8003166:	e002      	b.n	800316e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003168:	bf40      	sev
    __WFE();
 800316a:	bf20      	wfe
    __WFE();
 800316c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800316e:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003174:	2104      	movs	r1, #4
 8003176:	438a      	bics	r2, r1
 8003178:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_PWR_EnterSTOPMode+0xa0>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_PWR_EnterSTOPMode+0xa8>)
 800318c:	2180      	movs	r1, #128	@ 0x80
 800318e:	0089      	lsls	r1, r1, #2
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
  }
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40007000 	.word	0x40007000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	fffffdff 	.word	0xfffffdff
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f000 fbbf 	bl	800393e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c0:	4bc9      	ldr	r3, [pc, #804]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	220c      	movs	r2, #12
 80031c6:	4013      	ands	r3, r2
 80031c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ca:	4bc7      	ldr	r3, [pc, #796]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	4013      	ands	r3, r2
 80031de:	d100      	bne.n	80031e2 <HAL_RCC_OscConfig+0x36>
 80031e0:	e07e      	b.n	80032e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d007      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d112      	bne.n	8003214 <HAL_RCC_OscConfig+0x68>
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d10d      	bne.n	8003214 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4bbb      	ldr	r3, [pc, #748]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	4013      	ands	r3, r2
 8003202:	d100      	bne.n	8003206 <HAL_RCC_OscConfig+0x5a>
 8003204:	e06b      	b.n	80032de <HAL_RCC_OscConfig+0x132>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d167      	bne.n	80032de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f000 fb95 	bl	800393e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	025b      	lsls	r3, r3, #9
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x84>
 8003220:	4bb1      	ldr	r3, [pc, #708]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4bb0      	ldr	r3, [pc, #704]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003226:	2180      	movs	r1, #128	@ 0x80
 8003228:	0249      	lsls	r1, r1, #9
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e027      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	23a0      	movs	r3, #160	@ 0xa0
 8003236:	02db      	lsls	r3, r3, #11
 8003238:	429a      	cmp	r2, r3
 800323a:	d10e      	bne.n	800325a <HAL_RCC_OscConfig+0xae>
 800323c:	4baa      	ldr	r3, [pc, #680]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4ba9      	ldr	r3, [pc, #676]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003242:	2180      	movs	r1, #128	@ 0x80
 8003244:	02c9      	lsls	r1, r1, #11
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4ba7      	ldr	r3, [pc, #668]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4ba6      	ldr	r3, [pc, #664]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003250:	2180      	movs	r1, #128	@ 0x80
 8003252:	0249      	lsls	r1, r1, #9
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e012      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 800325a:	4ba3      	ldr	r3, [pc, #652]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4ba2      	ldr	r3, [pc, #648]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003260:	49a2      	ldr	r1, [pc, #648]	@ (80034ec <HAL_RCC_OscConfig+0x340>)
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	4ba0      	ldr	r3, [pc, #640]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	4013      	ands	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4b9c      	ldr	r3, [pc, #624]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b9b      	ldr	r3, [pc, #620]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800327a:	499d      	ldr	r1, [pc, #628]	@ (80034f0 <HAL_RCC_OscConfig+0x344>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fadc 	bl	8001844 <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003292:	f7fe fad7 	bl	8001844 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	@ 0x64
 800329e:	d902      	bls.n	80032a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f000 fb4c 	bl	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a6:	4b90      	ldr	r3, [pc, #576]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	029b      	lsls	r3, r3, #10
 80032ae:	4013      	ands	r3, r2
 80032b0:	d0ef      	beq.n	8003292 <HAL_RCC_OscConfig+0xe6>
 80032b2:	e015      	b.n	80032e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fac6 	bl	8001844 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032be:	f7fe fac1 	bl	8001844 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e336      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032d0:	4b85      	ldr	r3, [pc, #532]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x112>
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2202      	movs	r2, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	d100      	bne.n	80032ec <HAL_RCC_OscConfig+0x140>
 80032ea:	e099      	b.n	8003420 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	2220      	movs	r2, #32
 80032f6:	4013      	ands	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80032fa:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b7a      	ldr	r3, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003300:	2120      	movs	r1, #32
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	2220      	movs	r2, #32
 800330a:	4393      	bics	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d005      	beq.n	8003320 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d13e      	bne.n	8003398 <HAL_RCC_OscConfig+0x1ec>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d13b      	bne.n	8003398 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003320:	4b71      	ldr	r3, [pc, #452]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2204      	movs	r2, #4
 8003326:	4013      	ands	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_RCC_OscConfig+0x188>
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e304      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b6c      	ldr	r3, [pc, #432]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a6e      	ldr	r2, [pc, #440]	@ (80034f4 <HAL_RCC_OscConfig+0x348>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	4b68      	ldr	r3, [pc, #416]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800334a:	4b67      	ldr	r3, [pc, #412]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2209      	movs	r2, #9
 8003350:	4393      	bics	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	4b64      	ldr	r3, [pc, #400]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800335c:	f000 fc42 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003360:	0001      	movs	r1, r0
 8003362:	4b61      	ldr	r3, [pc, #388]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	220f      	movs	r2, #15
 800336a:	4013      	ands	r3, r2
 800336c:	4a62      	ldr	r2, [pc, #392]	@ (80034f8 <HAL_RCC_OscConfig+0x34c>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	000a      	movs	r2, r1
 8003372:	40da      	lsrs	r2, r3
 8003374:	4b61      	ldr	r3, [pc, #388]	@ (80034fc <HAL_RCC_OscConfig+0x350>)
 8003376:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003378:	4b61      	ldr	r3, [pc, #388]	@ (8003500 <HAL_RCC_OscConfig+0x354>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2513      	movs	r5, #19
 800337e:	197c      	adds	r4, r7, r5
 8003380:	0018      	movs	r0, r3
 8003382:	f7fe fa19 	bl	80017b8 <HAL_InitTick>
 8003386:	0003      	movs	r3, r0
 8003388:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800338a:	197b      	adds	r3, r7, r5
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d046      	beq.n	8003420 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003392:	197b      	adds	r3, r7, r5
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	e2d2      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d027      	beq.n	80033ee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800339e:	4b52      	ldr	r3, [pc, #328]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2209      	movs	r2, #9
 80033a4:	4393      	bics	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	4b4f      	ldr	r3, [pc, #316]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fa48 	bl	8001844 <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fa43 	bl	8001844 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e2b8      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033cc:	4b46      	ldr	r3, [pc, #280]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2204      	movs	r2, #4
 80033d2:	4013      	ands	r3, r2
 80033d4:	d0f1      	beq.n	80033ba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b44      	ldr	r3, [pc, #272]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <HAL_RCC_OscConfig+0x348>)
 80033dc:	4013      	ands	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	021a      	lsls	r2, r3, #8
 80033e6:	4b40      	ldr	r3, [pc, #256]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	e018      	b.n	8003420 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ee:	4b3e      	ldr	r3, [pc, #248]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	438a      	bics	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fa23 	bl	8001844 <HAL_GetTick>
 80033fe:	0003      	movs	r3, r0
 8003400:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe fa1e 	bl	8001844 <HAL_GetTick>
 8003408:	0002      	movs	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e293      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003416:	4b34      	ldr	r3, [pc, #208]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
 800341e:	d1f1      	bne.n	8003404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	4013      	ands	r3, r2
 8003428:	d100      	bne.n	800342c <HAL_RCC_OscConfig+0x280>
 800342a:	e0a2      	b.n	8003572 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d140      	bne.n	80034b4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003432:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x29e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e279      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <HAL_RCC_OscConfig+0x358>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003458:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345e:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	0a19      	lsrs	r1, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	061a      	lsls	r2, r3, #24
 800346c:	4b1e      	ldr	r3, [pc, #120]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	3301      	adds	r3, #1
 800347a:	2280      	movs	r2, #128	@ 0x80
 800347c:	0212      	lsls	r2, r2, #8
 800347e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	210f      	movs	r1, #15
 8003488:	400b      	ands	r3, r1
 800348a:	491b      	ldr	r1, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x34c>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_RCC_OscConfig+0x350>)
 8003492:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_RCC_OscConfig+0x354>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2513      	movs	r5, #19
 800349a:	197c      	adds	r4, r7, r5
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe f98b 	bl	80017b8 <HAL_InitTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80034a6:	197b      	adds	r3, r7, r5
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d061      	beq.n	8003572 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80034ae:	197b      	adds	r3, r7, r5
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	e244      	b.n	800393e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d040      	beq.n	800353e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_RCC_OscConfig+0x33c>)
 80034c2:	2180      	movs	r1, #128	@ 0x80
 80034c4:	0049      	lsls	r1, r1, #1
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe f9bb 	bl	8001844 <HAL_GetTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034d2:	e019      	b.n	8003508 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d4:	f7fe f9b6 	bl	8001844 <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d912      	bls.n	8003508 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e22b      	b.n	800393e <HAL_RCC_OscConfig+0x792>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	40021000 	.word	0x40021000
 80034ec:	fffeffff 	.word	0xfffeffff
 80034f0:	fffbffff 	.word	0xfffbffff
 80034f4:	ffffe0ff 	.word	0xffffe0ff
 80034f8:	08006bf4 	.word	0x08006bf4
 80034fc:	20000004 	.word	0x20000004
 8003500:	20000008 	.word	0x20000008
 8003504:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003508:	4bca      	ldr	r3, [pc, #808]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4013      	ands	r3, r2
 8003512:	d0df      	beq.n	80034d4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003514:	4bc7      	ldr	r3, [pc, #796]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4ac7      	ldr	r2, [pc, #796]	@ (8003838 <HAL_RCC_OscConfig+0x68c>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003522:	4bc4      	ldr	r3, [pc, #784]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003528:	4bc2      	ldr	r3, [pc, #776]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	0a19      	lsrs	r1, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	061a      	lsls	r2, r3, #24
 8003536:	4bbf      	ldr	r3, [pc, #764]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	e019      	b.n	8003572 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800353e:	4bbd      	ldr	r3, [pc, #756]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4bbc      	ldr	r3, [pc, #752]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003544:	49bd      	ldr	r1, [pc, #756]	@ (800383c <HAL_RCC_OscConfig+0x690>)
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe f97b 	bl	8001844 <HAL_GetTick>
 800354e:	0003      	movs	r3, r0
 8003550:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003554:	f7fe f976 	bl	8001844 <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1eb      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003566:	4bb3      	ldr	r3, [pc, #716]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	2380      	movs	r3, #128	@ 0x80
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2208      	movs	r2, #8
 8003578:	4013      	ands	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003584:	4bab      	ldr	r3, [pc, #684]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003588:	4baa      	ldr	r3, [pc, #680]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800358a:	2101      	movs	r1, #1
 800358c:	430a      	orrs	r2, r1
 800358e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe f958 	bl	8001844 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359a:	f7fe f953 	bl	8001844 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1c8      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d0f1      	beq.n	800359a <HAL_RCC_OscConfig+0x3ee>
 80035b6:	e018      	b.n	80035ea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b9e      	ldr	r3, [pc, #632]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80035ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80035be:	2101      	movs	r1, #1
 80035c0:	438a      	bics	r2, r1
 80035c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fe f93e 	bl	8001844 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ce:	f7fe f939 	bl	8001844 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1ae      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035e0:	4b94      	ldr	r3, [pc, #592]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	2202      	movs	r2, #2
 80035e6:	4013      	ands	r3, r2
 80035e8:	d1f1      	bne.n	80035ce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	4013      	ands	r3, r2
 80035f2:	d100      	bne.n	80035f6 <HAL_RCC_OscConfig+0x44a>
 80035f4:	e0ae      	b.n	8003754 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2023      	movs	r0, #35	@ 0x23
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	055b      	lsls	r3, r3, #21
 8003606:	4013      	ands	r3, r2
 8003608:	d109      	bne.n	800361e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b8a      	ldr	r3, [pc, #552]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800360c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360e:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	0549      	lsls	r1, r1, #21
 8003614:	430a      	orrs	r2, r1
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003618:	183b      	adds	r3, r7, r0
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b88      	ldr	r3, [pc, #544]	@ (8003840 <HAL_RCC_OscConfig+0x694>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b85      	ldr	r3, [pc, #532]	@ (8003840 <HAL_RCC_OscConfig+0x694>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b84      	ldr	r3, [pc, #528]	@ (8003840 <HAL_RCC_OscConfig+0x694>)
 8003630:	2180      	movs	r1, #128	@ 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003638:	f7fe f904 	bl	8001844 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe f8ff 	bl	8001844 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	@ 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e174      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b7a      	ldr	r3, [pc, #488]	@ (8003840 <HAL_RCC_OscConfig+0x694>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4d0>
 800366c:	4b71      	ldr	r3, [pc, #452]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800366e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003670:	4b70      	ldr	r3, [pc, #448]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003672:	2180      	movs	r1, #128	@ 0x80
 8003674:	0049      	lsls	r1, r1, #1
 8003676:	430a      	orrs	r2, r1
 8003678:	651a      	str	r2, [r3, #80]	@ 0x50
 800367a:	e031      	b.n	80036e0 <HAL_RCC_OscConfig+0x534>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0x4f2>
 8003684:	4b6b      	ldr	r3, [pc, #428]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003688:	4b6a      	ldr	r3, [pc, #424]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800368a:	496c      	ldr	r1, [pc, #432]	@ (800383c <HAL_RCC_OscConfig+0x690>)
 800368c:	400a      	ands	r2, r1
 800368e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003692:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003694:	4b67      	ldr	r3, [pc, #412]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003696:	496b      	ldr	r1, [pc, #428]	@ (8003844 <HAL_RCC_OscConfig+0x698>)
 8003698:	400a      	ands	r2, r1
 800369a:	651a      	str	r2, [r3, #80]	@ 0x50
 800369c:	e020      	b.n	80036e0 <HAL_RCC_OscConfig+0x534>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	23a0      	movs	r3, #160	@ 0xa0
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d10e      	bne.n	80036c8 <HAL_RCC_OscConfig+0x51c>
 80036aa:	4b62      	ldr	r3, [pc, #392]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ae:	4b61      	ldr	r3, [pc, #388]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036b0:	2180      	movs	r1, #128	@ 0x80
 80036b2:	00c9      	lsls	r1, r1, #3
 80036b4:	430a      	orrs	r2, r1
 80036b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80036b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	0049      	lsls	r1, r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x534>
 80036c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036ce:	495b      	ldr	r1, [pc, #364]	@ (800383c <HAL_RCC_OscConfig+0x690>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80036d4:	4b57      	ldr	r3, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036d8:	4b56      	ldr	r3, [pc, #344]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80036da:	495a      	ldr	r1, [pc, #360]	@ (8003844 <HAL_RCC_OscConfig+0x698>)
 80036dc:	400a      	ands	r2, r1
 80036de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e8:	f7fe f8ac 	bl	8001844 <HAL_GetTick>
 80036ec:	0003      	movs	r3, r0
 80036ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f0:	e009      	b.n	8003706 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe f8a7 	bl	8001844 <HAL_GetTick>
 80036f6:	0002      	movs	r2, r0
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	4a52      	ldr	r2, [pc, #328]	@ (8003848 <HAL_RCC_OscConfig+0x69c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e11b      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003706:	4b4b      	ldr	r3, [pc, #300]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4013      	ands	r3, r2
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCC_OscConfig+0x546>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe f896 	bl	8001844 <HAL_GetTick>
 8003718:	0003      	movs	r3, r0
 800371a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	e009      	b.n	8003732 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe f891 	bl	8001844 <HAL_GetTick>
 8003722:	0002      	movs	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	4a47      	ldr	r2, [pc, #284]	@ (8003848 <HAL_RCC_OscConfig+0x69c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e105      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003732:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d1ef      	bne.n	800371e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800373e:	2323      	movs	r3, #35	@ 0x23
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b3a      	ldr	r3, [pc, #232]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800374a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800374e:	493f      	ldr	r1, [pc, #252]	@ (800384c <HAL_RCC_OscConfig+0x6a0>)
 8003750:	400a      	ands	r2, r1
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	4013      	ands	r3, r2
 800375c:	d049      	beq.n	80037f2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d026      	beq.n	80037b4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003766:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	4b32      	ldr	r3, [pc, #200]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800376c:	2101      	movs	r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003776:	4b2f      	ldr	r3, [pc, #188]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003778:	2101      	movs	r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	635a      	str	r2, [r3, #52]	@ 0x34
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_OscConfig+0x6a4>)
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_RCC_OscConfig+0x6a4>)
 8003784:	2180      	movs	r1, #128	@ 0x80
 8003786:	0189      	lsls	r1, r1, #6
 8003788:	430a      	orrs	r2, r1
 800378a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f85a 	bl	8001844 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003796:	f7fe f855 	bl	8001844 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0ca      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037a8:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d0f1      	beq.n	8003796 <HAL_RCC_OscConfig+0x5ea>
 80037b2:	e01e      	b.n	80037f2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_RCC_OscConfig+0x6a4>)
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_RCC_OscConfig+0x6a4>)
 80037c6:	4923      	ldr	r1, [pc, #140]	@ (8003854 <HAL_RCC_OscConfig+0x6a8>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe f83a 	bl	8001844 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d6:	f7fe f835 	bl	8001844 <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0aa      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d1f1      	bne.n	80037d6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d100      	bne.n	80037fc <HAL_RCC_OscConfig+0x650>
 80037fa:	e09f      	b.n	800393c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d100      	bne.n	8003804 <HAL_RCC_OscConfig+0x658>
 8003802:	e078      	b.n	80038f6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	2b02      	cmp	r3, #2
 800380a:	d159      	bne.n	80038c0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_RCC_OscConfig+0x688>)
 8003812:	4911      	ldr	r1, [pc, #68]	@ (8003858 <HAL_RCC_OscConfig+0x6ac>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe f814 	bl	8001844 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003820:	e01c      	b.n	800385c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe f80f 	bl	8001844 <HAL_GetTick>
 8003826:	0002      	movs	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d915      	bls.n	800385c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e084      	b.n	800393e <HAL_RCC_OscConfig+0x792>
 8003834:	40021000 	.word	0x40021000
 8003838:	ffff1fff 	.word	0xffff1fff
 800383c:	fffffeff 	.word	0xfffffeff
 8003840:	40007000 	.word	0x40007000
 8003844:	fffffbff 	.word	0xfffffbff
 8003848:	00001388 	.word	0x00001388
 800384c:	efffffff 	.word	0xefffffff
 8003850:	40010000 	.word	0x40010000
 8003854:	ffffdfff 	.word	0xffffdfff
 8003858:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800385c:	4b3a      	ldr	r3, [pc, #232]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	049b      	lsls	r3, r3, #18
 8003864:	4013      	ands	r3, r2
 8003866:	d1dc      	bne.n	8003822 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a37      	ldr	r2, [pc, #220]	@ (800394c <HAL_RCC_OscConfig+0x7a0>)
 800386e:	4013      	ands	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	431a      	orrs	r2, r3
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 8003884:	430a      	orrs	r2, r1
 8003886:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 800388e:	2180      	movs	r1, #128	@ 0x80
 8003890:	0449      	lsls	r1, r1, #17
 8003892:	430a      	orrs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd ffd5 	bl	8001844 <HAL_GetTick>
 800389a:	0003      	movs	r3, r0
 800389c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd ffd0 	bl	8001844 <HAL_GetTick>
 80038a4:	0002      	movs	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e045      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80038b2:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	049b      	lsls	r3, r3, #18
 80038ba:	4013      	ands	r3, r2
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x6f4>
 80038be:	e03d      	b.n	800393c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 80038c6:	4922      	ldr	r1, [pc, #136]	@ (8003950 <HAL_RCC_OscConfig+0x7a4>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fd ffba 	bl	8001844 <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd ffb5 	bl	8001844 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e02a      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038e8:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	049b      	lsls	r3, r3, #18
 80038f0:	4013      	ands	r3, r2
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x72a>
 80038f4:	e022      	b.n	800393c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e01d      	b.n	800393e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003902:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_RCC_OscConfig+0x79c>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	025b      	lsls	r3, r3, #9
 800390e:	401a      	ands	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d10f      	bne.n	8003938 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	23f0      	movs	r3, #240	@ 0xf0
 800391c:	039b      	lsls	r3, r3, #14
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	23c0      	movs	r3, #192	@ 0xc0
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b00a      	add	sp, #40	@ 0x28
 8003944:	bdb0      	pop	{r4, r5, r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	40021000 	.word	0x40021000
 800394c:	ff02ffff 	.word	0xff02ffff
 8003950:	feffffff 	.word	0xfeffffff

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e128      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b96      	ldr	r3, [pc, #600]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d91e      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b93      	ldr	r3, [pc, #588]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2201      	movs	r2, #1
 800397c:	4393      	bics	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	4b90      	ldr	r3, [pc, #576]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003988:	f7fd ff5c 	bl	8001844 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003990:	e009      	b.n	80039a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003992:	f7fd ff57 	bl	8001844 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	4a8a      	ldr	r2, [pc, #552]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e109      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b87      	ldr	r3, [pc, #540]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039be:	4b83      	ldr	r3, [pc, #524]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	22f0      	movs	r2, #240	@ 0xf0
 80039c4:	4393      	bics	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b7f      	ldr	r3, [pc, #508]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d100      	bne.n	80039de <HAL_RCC_ClockConfig+0x8a>
 80039dc:	e089      	b.n	8003af2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039e6:	4b79      	ldr	r3, [pc, #484]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	4013      	ands	r3, r2
 80039f0:	d120      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0e1      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039fe:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	049b      	lsls	r3, r3, #18
 8003a06:	4013      	ands	r3, r2
 8003a08:	d114      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0d5      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a16:	4b6d      	ldr	r3, [pc, #436]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0ca      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a24:	4b69      	ldr	r3, [pc, #420]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0c2      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a34:	4b65      	ldr	r3, [pc, #404]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fefc 	bl	8001844 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d111      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a58:	e009      	b.n	8003a6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5a:	f7fd fef3 	bl	8001844 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	4a58      	ldr	r2, [pc, #352]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e0a5      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	220c      	movs	r2, #12
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d1ef      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x106>
 8003a7a:	e03a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fd fedd 	bl	8001844 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e08f      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d1ef      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x132>
 8003aa6:	e024      	b.n	8003af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d11b      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ab0:	e009      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab2:	f7fd fec7 	bl	8001844 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	4a42      	ldr	r2, [pc, #264]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e079      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac6:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	220c      	movs	r2, #12
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d1ef      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x15e>
 8003ad2:	e00e      	b.n	8003af2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fd feb6 	bl	8001844 <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e068      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ae8:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	220c      	movs	r2, #12
 8003aee:	4013      	ands	r3, r2
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af2:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d21e      	bcs.n	8003b3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b00:	4b30      	ldr	r3, [pc, #192]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	4393      	bics	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fe97 	bl	8001844 <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	e009      	b.n	8003b30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd fe92 	bl	8001844 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	4a28      	ldr	r2, [pc, #160]	@ (8003bc8 <HAL_RCC_ClockConfig+0x274>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e044      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b30:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCC_ClockConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2204      	movs	r2, #4
 8003b44:	4013      	ands	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <HAL_RCC_ClockConfig+0x27c>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	0019      	movs	r1, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b66:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd4 <HAL_RCC_ClockConfig+0x280>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	0019      	movs	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00da      	lsls	r2, r3, #3
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7c:	f000 f832 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003b80:	0001      	movs	r1, r0
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_ClockConfig+0x278>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	220f      	movs	r2, #15
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <HAL_RCC_ClockConfig+0x284>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	000a      	movs	r2, r1
 8003b92:	40da      	lsrs	r2, r3
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_RCC_ClockConfig+0x288>)
 8003b96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_RCC_ClockConfig+0x28c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	250b      	movs	r5, #11
 8003b9e:	197c      	adds	r4, r7, r5
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fd fe09 	bl	80017b8 <HAL_InitTick>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003baa:	197b      	adds	r3, r7, r5
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003bb2:	197b      	adds	r3, r7, r5
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	40022000 	.word	0x40022000
 8003bc8:	00001388 	.word	0x00001388
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	fffff8ff 	.word	0xfffff8ff
 8003bd4:	ffffc7ff 	.word	0xffffc7ff
 8003bd8:	08006bf4 	.word	0x08006bf4
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	20000008 	.word	0x20000008

08003be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003bea:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d013      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3e>
 8003bfa:	d85c      	bhi.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xd2>
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d002      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x22>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d00b      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x38>
 8003c04:	e057      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c06:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d002      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003c10:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c12:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003c14:	e05d      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003c16:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c18:	613b      	str	r3, [r7, #16]
      break;
 8003c1a:	e05a      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c1e:	613b      	str	r3, [r7, #16]
      break;
 8003c20:	e057      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0c9b      	lsrs	r3, r3, #18
 8003c26:	220f      	movs	r2, #15
 8003c28:	4013      	ands	r3, r2
 8003c2a:	4a30      	ldr	r2, [pc, #192]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0d9b      	lsrs	r3, r3, #22
 8003c34:	2203      	movs	r2, #3
 8003c36:	4013      	ands	r3, r2
 8003c38:	3301      	adds	r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3c:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	025b      	lsls	r3, r3, #9
 8003c44:	4013      	ands	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	000a      	movs	r2, r1
 8003c4c:	0152      	lsls	r2, r2, #5
 8003c4e:	1a52      	subs	r2, r2, r1
 8003c50:	0193      	lsls	r3, r2, #6
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	185b      	adds	r3, r3, r1
 8003c58:	025b      	lsls	r3, r3, #9
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fc fa5b 	bl	8000118 <__udivsi3>
 8003c62:	0003      	movs	r3, r0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e023      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c68:	4b1c      	ldr	r3, [pc, #112]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d00f      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	000a      	movs	r2, r1
 8003c76:	0152      	lsls	r2, r2, #5
 8003c78:	1a52      	subs	r2, r2, r1
 8003c7a:	0193      	lsls	r3, r2, #6
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	185b      	adds	r3, r3, r1
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fc fa46 	bl	8000118 <__udivsi3>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e00e      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	000a      	movs	r2, r1
 8003c96:	0152      	lsls	r2, r2, #5
 8003c98:	1a52      	subs	r2, r2, r1
 8003c9a:	0193      	lsls	r3, r2, #6
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	185b      	adds	r3, r3, r1
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f7fc fa36 	bl	8000118 <__udivsi3>
 8003cac:	0003      	movs	r3, r0
 8003cae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	613b      	str	r3, [r7, #16]
      break;
 8003cb4:	e00d      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	2207      	movs	r2, #7
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	2280      	movs	r2, #128	@ 0x80
 8003cc8:	0212      	lsls	r2, r2, #8
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	0013      	movs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
      break;
 8003cd0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003cd2:	693b      	ldr	r3, [r7, #16]
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	003d0900 	.word	0x003d0900
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200
 8003cec:	08006c0c 	.word	0x08006c0c

08003cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf4:	4b02      	ldr	r3, [pc, #8]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff2 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d0c:	0001      	movs	r1, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	2207      	movs	r2, #7
 8003d16:	4013      	ands	r3, r2
 8003d18:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	40d9      	lsrs	r1, r3
 8003d1e:	000b      	movs	r3, r1
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08006c04 	.word	0x08006c04

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d34:	f7ff ffdc 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d38:	0001      	movs	r1, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	2207      	movs	r2, #7
 8003d42:	4013      	ands	r3, r2
 8003d44:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	40d9      	lsrs	r1, r3
 8003d4a:	000b      	movs	r3, r1
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08006c04 	.word	0x08006c04

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003d64:	2317      	movs	r3, #23
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2220      	movs	r2, #32
 8003d72:	4013      	ands	r3, r2
 8003d74:	d106      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d100      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003d82:	e104      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d84:	4bb9      	ldr	r3, [pc, #740]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	055b      	lsls	r3, r3, #21
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d10a      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4bb6      	ldr	r3, [pc, #728]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d94:	4bb5      	ldr	r3, [pc, #724]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	0549      	lsls	r1, r1, #21
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003d9e:	2317      	movs	r3, #23
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4bb2      	ldr	r3, [pc, #712]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4013      	ands	r3, r2
 8003db0:	d11a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4baf      	ldr	r3, [pc, #700]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4bae      	ldr	r3, [pc, #696]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003db8:	2180      	movs	r1, #128	@ 0x80
 8003dba:	0049      	lsls	r1, r1, #1
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fd40 	bl	8001844 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fd3b 	bl	8001844 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	@ 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e143      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003de8:	4ba0      	ldr	r3, [pc, #640]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	23c0      	movs	r3, #192	@ 0xc0
 8003dee:	039b      	lsls	r3, r3, #14
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	23c0      	movs	r3, #192	@ 0xc0
 8003dfa:	039b      	lsls	r3, r3, #14
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d107      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	23c0      	movs	r3, #192	@ 0xc0
 8003e0a:	039b      	lsls	r3, r3, #14
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d013      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	23c0      	movs	r3, #192	@ 0xc0
 8003e1a:	029b      	lsls	r3, r3, #10
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	23c0      	movs	r3, #192	@ 0xc0
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e26:	4b91      	ldr	r3, [pc, #580]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	029b      	lsls	r3, r3, #10
 8003e2e:	401a      	ands	r2, r3
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	029b      	lsls	r3, r3, #10
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d101      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e113      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003e3c:	4b8b      	ldr	r3, [pc, #556]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e40:	23c0      	movs	r3, #192	@ 0xc0
 8003e42:	029b      	lsls	r3, r3, #10
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d049      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	23c0      	movs	r3, #192	@ 0xc0
 8003e54:	029b      	lsls	r3, r3, #10
 8003e56:	4013      	ands	r3, r2
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d004      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	4013      	ands	r3, r2
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	23c0      	movs	r3, #192	@ 0xc0
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d034      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4013      	ands	r3, r2
 8003e82:	d02e      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003e84:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e88:	4a7a      	ldr	r2, [pc, #488]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b77      	ldr	r3, [pc, #476]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e92:	4b76      	ldr	r3, [pc, #472]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e94:	2180      	movs	r1, #128	@ 0x80
 8003e96:	0309      	lsls	r1, r1, #12
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9c:	4b73      	ldr	r3, [pc, #460]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ea0:	4b72      	ldr	r3, [pc, #456]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ea2:	4975      	ldr	r1, [pc, #468]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003ea8:	4b70      	ldr	r3, [pc, #448]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d014      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fcc4 	bl	8001844 <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd fcbf 	bl	8001844 <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0c6      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed6:	4b65      	ldr	r3, [pc, #404]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d0ef      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	4013      	ands	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	23c0      	movs	r3, #192	@ 0xc0
 8003ef4:	029b      	lsls	r3, r3, #10
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	23c0      	movs	r3, #192	@ 0xc0
 8003efa:	029b      	lsls	r3, r3, #10
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10c      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003f00:	4b5a      	ldr	r3, [pc, #360]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a5e      	ldr	r2, [pc, #376]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	23c0      	movs	r3, #192	@ 0xc0
 8003f10:	039b      	lsls	r3, r3, #14
 8003f12:	401a      	ands	r2, r3
 8003f14:	4b55      	ldr	r3, [pc, #340]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4b54      	ldr	r3, [pc, #336]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	23c0      	movs	r3, #192	@ 0xc0
 8003f24:	029b      	lsls	r3, r3, #10
 8003f26:	401a      	ands	r2, r3
 8003f28:	4b50      	ldr	r3, [pc, #320]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2220      	movs	r2, #32
 8003f34:	4013      	ands	r3, r2
 8003f36:	d01f      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	23c0      	movs	r3, #192	@ 0xc0
 8003f3e:	029b      	lsls	r3, r3, #10
 8003f40:	401a      	ands	r2, r3
 8003f42:	23c0      	movs	r3, #192	@ 0xc0
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003f4a:	4b48      	ldr	r3, [pc, #288]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	23c0      	movs	r3, #192	@ 0xc0
 8003f5a:	039b      	lsls	r3, r3, #14
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	4b41      	ldr	r3, [pc, #260]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f66:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	23c0      	movs	r3, #192	@ 0xc0
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	401a      	ands	r2, r3
 8003f72:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f78:	2317      	movs	r3, #23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b3a      	ldr	r3, [pc, #232]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f88:	493e      	ldr	r1, [pc, #248]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2201      	movs	r2, #1
 8003f94:	4013      	ands	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f98:	4b34      	ldr	r3, [pc, #208]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	4b31      	ldr	r3, [pc, #196]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	220c      	movs	r2, #12
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	4b29      	ldr	r3, [pc, #164]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff6:	4a25      	ldr	r2, [pc, #148]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004002:	430a      	orrs	r2, r1
 8004004:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4013      	ands	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004012:	4b16      	ldr	r3, [pc, #88]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	4b12      	ldr	r3, [pc, #72]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004022:	430a      	orrs	r2, r1
 8004024:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	4013      	ands	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004030:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004036:	4013      	ands	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004040:	430a      	orrs	r2, r1
 8004042:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2280      	movs	r2, #128	@ 0x80
 800404a:	4013      	ands	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	4a10      	ldr	r2, [pc, #64]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	4b03      	ldr	r3, [pc, #12]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800405e:	430a      	orrs	r2, r1
 8004060:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b006      	add	sp, #24
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	40007000 	.word	0x40007000
 8004074:	fffcffff 	.word	0xfffcffff
 8004078:	fff7ffff 	.word	0xfff7ffff
 800407c:	00001388 	.word	0x00001388
 8004080:	ffcfffff 	.word	0xffcfffff
 8004084:	efffffff 	.word	0xefffffff
 8004088:	fffff3ff 	.word	0xfffff3ff
 800408c:	ffffcfff 	.word	0xffffcfff
 8004090:	fbffffff 	.word	0xfbffffff
 8004094:	fff3ffff 	.word	0xfff3ffff

08004098 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040a0:	230f      	movs	r3, #15
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e088      	b.n	80041c4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2221      	movs	r2, #33	@ 0x21
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fc fdd3 	bl	8000c74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2221      	movs	r2, #33	@ 0x21
 80040d2:	2102      	movs	r1, #2
 80040d4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2210      	movs	r2, #16
 80040de:	4013      	ands	r3, r2
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d05f      	beq.n	80041a4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	22ca      	movs	r2, #202	@ 0xca
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2253      	movs	r2, #83	@ 0x53
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040f4:	250f      	movs	r5, #15
 80040f6:	197c      	adds	r4, r7, r5
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f890 	bl	8004220 <RTC_EnterInitMode>
 8004100:	0003      	movs	r3, r0
 8004102:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004104:	0028      	movs	r0, r5
 8004106:	183b      	adds	r3, r7, r0
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12c      	bne.n	8004168 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	492c      	ldr	r1, [pc, #176]	@ (80041cc <HAL_RTC_Init+0x134>)
 800411a:	400a      	ands	r2, r1
 800411c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68d2      	ldr	r2, [r2, #12]
 8004144:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6919      	ldr	r1, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	041a      	lsls	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800415a:	183c      	adds	r4, r7, r0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f8a2 	bl	80042a8 <RTC_ExitInitMode>
 8004164:	0003      	movs	r3, r0
 8004166:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004168:	230f      	movs	r3, #15
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d113      	bne.n	800419a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2103      	movs	r1, #3
 800417e:	438a      	bics	r2, r1
 8004180:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	22ff      	movs	r2, #255	@ 0xff
 80041a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80041a2:	e003      	b.n	80041ac <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80041ac:	230f      	movs	r3, #15
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2221      	movs	r2, #33	@ 0x21
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b004      	add	sp, #16
 80041ca:	bdb0      	pop	{r4, r5, r7, pc}
 80041cc:	ff8fffbf 	.word	0xff8fffbf

080041d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <HAL_RTC_WaitForSynchro+0x4c>)
 80041e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e4:	f7fd fb2e 	bl	8001844 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041ec:	e00a      	b.n	8004204 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041ee:	f7fd fb29 	bl	8001844 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	23fa      	movs	r3, #250	@ 0xfa
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d901      	bls.n	8004204 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	4013      	ands	r3, r2
 800420e:	d0ee      	beq.n	80041ee <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	0001ff5f 	.word	0x0001ff5f

08004220 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	230f      	movs	r3, #15
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2240      	movs	r2, #64	@ 0x40
 800423c:	4013      	ands	r3, r2
 800423e:	d12c      	bne.n	800429a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	430a      	orrs	r2, r1
 800424e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004250:	f7fd faf8 	bl	8001844 <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004258:	e014      	b.n	8004284 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800425a:	f7fd faf3 	bl	8001844 <HAL_GetTick>
 800425e:	0002      	movs	r2, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	200f      	movs	r0, #15
 8004266:	183b      	adds	r3, r7, r0
 8004268:	1839      	adds	r1, r7, r0
 800426a:	7809      	ldrb	r1, [r1, #0]
 800426c:	7019      	strb	r1, [r3, #0]
 800426e:	23fa      	movs	r3, #250	@ 0xfa
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	429a      	cmp	r2, r3
 8004274:	d906      	bls.n	8004284 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2221      	movs	r2, #33	@ 0x21
 800427a:	2104      	movs	r1, #4
 800427c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800427e:	183b      	adds	r3, r7, r0
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2240      	movs	r2, #64	@ 0x40
 800428c:	4013      	ands	r3, r2
 800428e:	d104      	bne.n	800429a <RTC_EnterInitMode+0x7a>
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d1df      	bne.n	800425a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800429a:	230f      	movs	r3, #15
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	240f      	movs	r4, #15
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	438a      	bics	r2, r1
 80042c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2220      	movs	r2, #32
 80042d0:	4013      	ands	r3, r2
 80042d2:	d10c      	bne.n	80042ee <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff ff7a 	bl	80041d0 <HAL_RTC_WaitForSynchro>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d006      	beq.n	80042ee <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2221      	movs	r2, #33	@ 0x21
 80042e4:	2104      	movs	r1, #4
 80042e6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80042ee:	230f      	movs	r3, #15
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b005      	add	sp, #20
 80042fa:	bd90      	pop	{r4, r7, pc}

080042fc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004308:	4b64      	ldr	r3, [pc, #400]	@ (800449c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22fa      	movs	r2, #250	@ 0xfa
 800430e:	01d1      	lsls	r1, r2, #7
 8004310:	0018      	movs	r0, r3
 8004312:	f7fb ff01 	bl	8000118 <__udivsi3>
 8004316:	0003      	movs	r3, r0
 8004318:	001a      	movs	r2, r3
 800431a:	0013      	movs	r3, r2
 800431c:	015b      	lsls	r3, r3, #5
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	189b      	adds	r3, r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004332:	2302      	movs	r3, #2
 8004334:	e0ad      	b.n	8004492 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	2101      	movs	r1, #1
 800433c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2221      	movs	r2, #33	@ 0x21
 8004342:	2102      	movs	r1, #2
 8004344:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	22ca      	movs	r2, #202	@ 0xca
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2253      	movs	r2, #83	@ 0x53
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4013      	ands	r3, r2
 8004362:	d019      	beq.n	8004398 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3b01      	subs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10d      	bne.n	800438c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	22ff      	movs	r2, #255	@ 0xff
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2221      	movs	r2, #33	@ 0x21
 800437c:	2103      	movs	r1, #3
 800437e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e082      	b.n	8004492 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2204      	movs	r2, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d1e5      	bne.n	8004364 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	493f      	ldr	r1, [pc, #252]	@ (80044a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	22ff      	movs	r2, #255	@ 0xff
 80043b0:	401a      	ands	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	493b      	ldr	r1, [pc, #236]	@ (80044a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80043bc:	4b37      	ldr	r3, [pc, #220]	@ (800449c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22fa      	movs	r2, #250	@ 0xfa
 80043c2:	01d1      	lsls	r1, r2, #7
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fb fea7 	bl	8000118 <__udivsi3>
 80043ca:	0003      	movs	r3, r0
 80043cc:	001a      	movs	r2, r3
 80043ce:	0013      	movs	r3, r2
 80043d0:	015b      	lsls	r3, r3, #5
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3b01      	subs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	22ff      	movs	r2, #255	@ 0xff
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2221      	movs	r2, #33	@ 0x21
 80043f4:	2103      	movs	r1, #3
 80043f6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	2100      	movs	r1, #0
 80043fe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e046      	b.n	8004492 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2204      	movs	r2, #4
 800440c:	4013      	ands	r3, r2
 800440e:	d0e5      	beq.n	80043dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2107      	movs	r1, #7
 800441c:	438a      	bics	r2, r1
 800441e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004438:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800443e:	2180      	movs	r1, #128	@ 0x80
 8004440:	0349      	lsls	r1, r1, #13
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800444c:	2180      	movs	r1, #128	@ 0x80
 800444e:	0349      	lsls	r1, r1, #13
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2180      	movs	r1, #128	@ 0x80
 8004460:	01c9      	lsls	r1, r1, #7
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	00c9      	lsls	r1, r1, #3
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	22ff      	movs	r2, #255	@ 0xff
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	@ 0x21
 8004484:	2101      	movs	r1, #1
 8004486:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b006      	add	sp, #24
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	20000004 	.word	0x20000004
 80044a0:	fffffbff 	.word	0xfffffbff
 80044a4:	fffffb7f 	.word	0xfffffb7f
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	5c9b      	ldrb	r3, [r3, r2]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e04e      	b.n	8004564 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2221      	movs	r2, #33	@ 0x21
 80044d2:	2102      	movs	r1, #2
 80044d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ca      	movs	r2, #202	@ 0xca
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2253      	movs	r2, #83	@ 0x53
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	491e      	ldr	r1, [pc, #120]	@ (800456c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80044f2:	400a      	ands	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	491b      	ldr	r1, [pc, #108]	@ (8004570 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8004502:	400a      	ands	r2, r1
 8004504:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004506:	f7fd f99d 	bl	8001844 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800450e:	e016      	b.n	800453e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004510:	f7fd f998 	bl	8001844 <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	23fa      	movs	r3, #250	@ 0xfa
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	429a      	cmp	r2, r3
 8004520:	d90d      	bls.n	800453e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	22ff      	movs	r2, #255	@ 0xff
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2221      	movs	r2, #33	@ 0x21
 800452e:	2103      	movs	r1, #3
 8004530:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e012      	b.n	8004564 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2204      	movs	r2, #4
 8004546:	4013      	ands	r3, r2
 8004548:	d0e2      	beq.n	8004510 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	22ff      	movs	r2, #255	@ 0xff
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2221      	movs	r2, #33	@ 0x21
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	b004      	add	sp, #16
 800456a:	bd80      	pop	{r7, pc}
 800456c:	fffffbff 	.word	0xfffffbff
 8004570:	ffffbfff 	.word	0xffffbfff

08004574 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800457c:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800457e:	2280      	movs	r2, #128	@ 0x80
 8004580:	0352      	lsls	r2, r2, #13
 8004582:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	01db      	lsls	r3, r3, #7
 800458e:	4013      	ands	r3, r2
 8004590:	d014      	beq.n	80045bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4013      	ands	r3, r2
 800459e:	d00d      	beq.n	80045bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	22ff      	movs	r2, #255	@ 0xff
 80045a8:	401a      	ands	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4908      	ldr	r1, [pc, #32]	@ (80045d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7fc f8b0 	bl	800071c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2221      	movs	r2, #33	@ 0x21
 80045c0:	2101      	movs	r1, #1
 80045c2:	5499      	strb	r1, [r3, r2]
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40010400 	.word	0x40010400
 80045d0:	fffffb7f 	.word	0xfffffb7f

080045d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e044      	b.n	8004670 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2278      	movs	r2, #120	@ 0x78
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fc fc1d 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2224      	movs	r2, #36	@ 0x24
 8004602:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	438a      	bics	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0018      	movs	r0, r3
 8004620:	f000 ffb4 	bl	800558c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 fd12 	bl	8005050 <UART_SetConfig>
 800462c:	0003      	movs	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e01c      	b.n	8004670 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	490d      	ldr	r1, [pc, #52]	@ (8004678 <HAL_UART_Init+0xa4>)
 8004642:	400a      	ands	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	212a      	movs	r1, #42	@ 0x2a
 8004652:	438a      	bics	r2, r1
 8004654:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f001 f843 	bl	80056f4 <UART_CheckIdleState>
 800466e:	0003      	movs	r3, r0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}
 8004678:	ffffb7ff 	.word	0xffffb7ff

0800467c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	1dbb      	adds	r3, r7, #6
 8004688:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800468e:	2b20      	cmp	r3, #32
 8004690:	d000      	beq.n	8004694 <HAL_UART_Transmit_DMA+0x18>
 8004692:	e077      	b.n	8004784 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_UART_Transmit_DMA+0x26>
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e06f      	b.n	8004786 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	2380      	movs	r3, #128	@ 0x80
 80046ac:	015b      	lsls	r3, r3, #5
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d109      	bne.n	80046c6 <HAL_UART_Transmit_DMA+0x4a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2201      	movs	r2, #1
 80046be:	4013      	ands	r3, r2
 80046c0:	d001      	beq.n	80046c6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e05f      	b.n	8004786 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1dba      	adds	r2, r7, #6
 80046d0:	2150      	movs	r1, #80	@ 0x50
 80046d2:	8812      	ldrh	r2, [r2, #0]
 80046d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1dba      	adds	r2, r7, #6
 80046da:	2152      	movs	r1, #82	@ 0x52
 80046dc:	8812      	ldrh	r2, [r2, #0]
 80046de:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2284      	movs	r2, #132	@ 0x84
 80046e4:	2100      	movs	r1, #0
 80046e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2221      	movs	r2, #33	@ 0x21
 80046ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d027      	beq.n	8004746 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <HAL_UART_Transmit_DMA+0x114>)
 80046fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	4a24      	ldr	r2, [pc, #144]	@ (8004794 <HAL_UART_Transmit_DMA+0x118>)
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <HAL_UART_Transmit_DMA+0x11c>)
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	2200      	movs	r2, #0
 8004714:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	0019      	movs	r1, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3328      	adds	r3, #40	@ 0x28
 8004726:	001a      	movs	r2, r3
 8004728:	1dbb      	adds	r3, r7, #6
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	f7fd fa32 	bl	8001b94 <HAL_DMA_Start_IT>
 8004730:	1e03      	subs	r3, r0, #0
 8004732:	d008      	beq.n	8004746 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2284      	movs	r2, #132	@ 0x84
 8004738:	2110      	movs	r1, #16
 800473a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e01f      	b.n	8004786 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474e:	f3ef 8310 	mrs	r3, PRIMASK
 8004752:	613b      	str	r3, [r7, #16]
  return(result);
 8004754:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2180      	movs	r1, #128	@ 0x80
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b008      	add	sp, #32
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	08005b75 	.word	0x08005b75
 8004794:	08005c0d 	.word	0x08005c0d
 8004798:	08005e13 	.word	0x08005e13

0800479c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	@ 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a4:	f3ef 8310 	mrs	r3, PRIMASK
 80047a8:	617b      	str	r3, [r7, #20]
  return(result);
 80047aa:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			@ (mov r8, r8)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	21c0      	movs	r1, #192	@ 0xc0
 80047c6:	438a      	bics	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	4013      	ands	r3, r2
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d135      	bne.n	8004850 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ea:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	2301      	movs	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2180      	movs	r1, #128	@ 0x80
 8004806:	438a      	bics	r2, r1
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	2200      	movs	r2, #0
 8004824:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	0018      	movs	r0, r3
 800482c:	f7fd fa18 	bl	8001c60 <HAL_DMA_Abort>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d00d      	beq.n	8004850 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004838:	0018      	movs	r0, r3
 800483a:	f7fd fb46 	bl	8001eca <HAL_DMA_GetError>
 800483e:	0003      	movs	r3, r0
 8004840:	2b20      	cmp	r3, #32
 8004842:	d105      	bne.n	8004850 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2284      	movs	r2, #132	@ 0x84
 8004848:	2110      	movs	r1, #16
 800484a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e007      	b.n	8004860 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2252      	movs	r2, #82	@ 0x52
 8004854:	2100      	movs	r1, #0
 8004856:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b00a      	add	sp, #40	@ 0x28
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b092      	sub	sp, #72	@ 0x48
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004870:	f3ef 8310 	mrs	r3, PRIMASK
 8004874:	623b      	str	r3, [r7, #32]
  return(result);
 8004876:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	2301      	movs	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			@ (mov r8, r8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	494b      	ldr	r1, [pc, #300]	@ (80049c0 <HAL_UART_AbortReceive+0x158>)
 8004892:	400a      	ands	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a2:	f3ef 8310 	mrs	r3, PRIMASK
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80048a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ac:	2301      	movs	r3, #1
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d118      	bne.n	800490e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8310 	mrs	r3, PRIMASK
 80048e0:	617b      	str	r3, [r7, #20]
  return(result);
 80048e2:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80048e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f383 8810 	msr	PRIMASK, r3
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2110      	movs	r1, #16
 80048fe:	438a      	bics	r2, r1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	4013      	ands	r3, r2
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d135      	bne.n	8004988 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491c:	f3ef 8310 	mrs	r3, PRIMASK
 8004920:	60bb      	str	r3, [r7, #8]
  return(result);
 8004922:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004924:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004926:	2301      	movs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	46c0      	nop			@ (mov r8, r8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2140      	movs	r1, #64	@ 0x40
 800493e:	438a      	bics	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f383 8810 	msr	PRIMASK, r3
}
 800494c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495a:	2200      	movs	r2, #0
 800495c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	0018      	movs	r0, r3
 8004964:	f7fd f97c 	bl	8001c60 <HAL_DMA_Abort>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d00d      	beq.n	8004988 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004970:	0018      	movs	r0, r3
 8004972:	f7fd faaa 	bl	8001eca <HAL_DMA_GetError>
 8004976:	0003      	movs	r3, r0
 8004978:	2b20      	cmp	r3, #32
 800497a:	d105      	bne.n	8004988 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2284      	movs	r2, #132	@ 0x84
 8004980:	2110      	movs	r1, #16
 8004982:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e017      	b.n	80049b8 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	225a      	movs	r2, #90	@ 0x5a
 800498c:	2100      	movs	r1, #0
 800498e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	220f      	movs	r2, #15
 8004996:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2108      	movs	r1, #8
 80049a4:	430a      	orrs	r2, r1
 80049a6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2280      	movs	r2, #128	@ 0x80
 80049ac:	2120      	movs	r1, #32
 80049ae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b012      	add	sp, #72	@ 0x48
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffffedf 	.word	0xfffffedf

080049c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b0ab      	sub	sp, #172	@ 0xac
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	22a4      	movs	r2, #164	@ 0xa4
 80049d4:	18b9      	adds	r1, r7, r2
 80049d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	20a0      	movs	r0, #160	@ 0xa0
 80049e0:	1839      	adds	r1, r7, r0
 80049e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	219c      	movs	r1, #156	@ 0x9c
 80049ec:	1879      	adds	r1, r7, r1
 80049ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049f0:	0011      	movs	r1, r2
 80049f2:	18bb      	adds	r3, r7, r2
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a99      	ldr	r2, [pc, #612]	@ (8004c5c <HAL_UART_IRQHandler+0x298>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	2298      	movs	r2, #152	@ 0x98
 80049fc:	18bc      	adds	r4, r7, r2
 80049fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a00:	18bb      	adds	r3, r7, r2
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d114      	bne.n	8004a32 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d00f      	beq.n	8004a32 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a12:	183b      	adds	r3, r7, r0
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2220      	movs	r2, #32
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d00a      	beq.n	8004a32 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d100      	bne.n	8004a26 <HAL_UART_IRQHandler+0x62>
 8004a24:	e2be      	b.n	8004fa4 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	0010      	movs	r0, r2
 8004a2e:	4798      	blx	r3
      }
      return;
 8004a30:	e2b8      	b.n	8004fa4 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a32:	2398      	movs	r3, #152	@ 0x98
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d100      	bne.n	8004a3e <HAL_UART_IRQHandler+0x7a>
 8004a3c:	e114      	b.n	8004c68 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a3e:	239c      	movs	r3, #156	@ 0x9c
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	4013      	ands	r3, r2
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a4a:	23a0      	movs	r3, #160	@ 0xa0
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a83      	ldr	r2, [pc, #524]	@ (8004c60 <HAL_UART_IRQHandler+0x29c>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_UART_IRQHandler+0x94>
 8004a56:	e107      	b.n	8004c68 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a58:	23a4      	movs	r3, #164	@ 0xa4
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4013      	ands	r3, r2
 8004a62:	d012      	beq.n	8004a8a <HAL_UART_IRQHandler+0xc6>
 8004a64:	23a0      	movs	r3, #160	@ 0xa0
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2284      	movs	r2, #132	@ 0x84
 8004a7e:	589b      	ldr	r3, [r3, r2]
 8004a80:	2201      	movs	r2, #1
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2184      	movs	r1, #132	@ 0x84
 8004a88:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a8a:	23a4      	movs	r3, #164	@ 0xa4
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d011      	beq.n	8004aba <HAL_UART_IRQHandler+0xf6>
 8004a96:	239c      	movs	r3, #156	@ 0x9c
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2284      	movs	r2, #132	@ 0x84
 8004aae:	589b      	ldr	r3, [r3, r2]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2184      	movs	r1, #132	@ 0x84
 8004ab8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aba:	23a4      	movs	r3, #164	@ 0xa4
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d011      	beq.n	8004aea <HAL_UART_IRQHandler+0x126>
 8004ac6:	239c      	movs	r3, #156	@ 0x9c
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2284      	movs	r2, #132	@ 0x84
 8004ade:	589b      	ldr	r3, [r3, r2]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2184      	movs	r1, #132	@ 0x84
 8004ae8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004aea:	23a4      	movs	r3, #164	@ 0xa4
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2208      	movs	r2, #8
 8004af2:	4013      	ands	r3, r2
 8004af4:	d017      	beq.n	8004b26 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af6:	23a0      	movs	r3, #160	@ 0xa0
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2220      	movs	r2, #32
 8004afe:	4013      	ands	r3, r2
 8004b00:	d105      	bne.n	8004b0e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b02:	239c      	movs	r3, #156	@ 0x9c
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b0c:	d00b      	beq.n	8004b26 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2208      	movs	r2, #8
 8004b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2284      	movs	r2, #132	@ 0x84
 8004b1a:	589b      	ldr	r3, [r3, r2]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2184      	movs	r1, #132	@ 0x84
 8004b24:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b26:	23a4      	movs	r3, #164	@ 0xa4
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4013      	ands	r3, r2
 8004b32:	d013      	beq.n	8004b5c <HAL_UART_IRQHandler+0x198>
 8004b34:	23a0      	movs	r3, #160	@ 0xa0
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	2380      	movs	r3, #128	@ 0x80
 8004b3c:	04db      	lsls	r3, r3, #19
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00c      	beq.n	8004b5c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	0112      	lsls	r2, r2, #4
 8004b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2284      	movs	r2, #132	@ 0x84
 8004b50:	589b      	ldr	r3, [r3, r2]
 8004b52:	2220      	movs	r2, #32
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2184      	movs	r1, #132	@ 0x84
 8004b5a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2284      	movs	r2, #132	@ 0x84
 8004b60:	589b      	ldr	r3, [r3, r2]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d100      	bne.n	8004b68 <HAL_UART_IRQHandler+0x1a4>
 8004b66:	e21f      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b68:	23a4      	movs	r3, #164	@ 0xa4
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	4013      	ands	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b74:	23a0      	movs	r3, #160	@ 0xa0
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	0010      	movs	r0, r2
 8004b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2284      	movs	r2, #132	@ 0x84
 8004b96:	589b      	ldr	r3, [r3, r2]
 8004b98:	2194      	movs	r1, #148	@ 0x94
 8004b9a:	187a      	adds	r2, r7, r1
 8004b9c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2240      	movs	r2, #64	@ 0x40
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d004      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2228      	movs	r2, #40	@ 0x28
 8004bb2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bb4:	d047      	beq.n	8004c46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 ff77 	bl	8005aac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2240      	movs	r2, #64	@ 0x40
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d137      	bne.n	8004c3c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd4:	2090      	movs	r0, #144	@ 0x90
 8004bd6:	183a      	adds	r2, r7, r0
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be0:	f383 8810 	msr	PRIMASK, r3
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2140      	movs	r1, #64	@ 0x40
 8004bf2:	438a      	bics	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	183b      	adds	r3, r7, r0
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <HAL_UART_IRQHandler+0x2a0>)
 8004c12:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7fd f861 	bl	8001ce0 <HAL_DMA_Abort_IT>
 8004c1e:	1e03      	subs	r3, r0, #0
 8004c20:	d01a      	beq.n	8004c58 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e012      	b.n	8004c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 f9e5 	bl	8005004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	e00d      	b.n	8004c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f9e0 	bl	8005004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e008      	b.n	8004c58 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f9db 	bl	8005004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2284      	movs	r2, #132	@ 0x84
 8004c52:	2100      	movs	r1, #0
 8004c54:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c56:	e1a7      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	46c0      	nop			@ (mov r8, r8)
    return;
 8004c5a:	e1a5      	b.n	8004fa8 <HAL_UART_IRQHandler+0x5e4>
 8004c5c:	0000080f 	.word	0x0000080f
 8004c60:	04000120 	.word	0x04000120
 8004c64:	08005e97 	.word	0x08005e97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d000      	beq.n	8004c72 <HAL_UART_IRQHandler+0x2ae>
 8004c70:	e159      	b.n	8004f26 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c72:	23a4      	movs	r3, #164	@ 0xa4
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d100      	bne.n	8004c80 <HAL_UART_IRQHandler+0x2bc>
 8004c7e:	e152      	b.n	8004f26 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c80:	23a0      	movs	r3, #160	@ 0xa0
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2210      	movs	r2, #16
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <HAL_UART_IRQHandler+0x2ca>
 8004c8c:	e14b      	b.n	8004f26 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2210      	movs	r2, #16
 8004c94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2240      	movs	r2, #64	@ 0x40
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d000      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x2e2>
 8004ca4:	e0bf      	b.n	8004e26 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	217e      	movs	r1, #126	@ 0x7e
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d100      	bne.n	8004cbe <HAL_UART_IRQHandler+0x2fa>
 8004cbc:	e095      	b.n	8004dea <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2258      	movs	r2, #88	@ 0x58
 8004cc2:	5a9b      	ldrh	r3, [r3, r2]
 8004cc4:	187a      	adds	r2, r7, r1
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d300      	bcc.n	8004cce <HAL_UART_IRQHandler+0x30a>
 8004ccc:	e08d      	b.n	8004dea <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	187a      	adds	r2, r7, r1
 8004cd2:	215a      	movs	r1, #90	@ 0x5a
 8004cd4:	8812      	ldrh	r2, [r2, #0]
 8004cd6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d16f      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	49ad      	ldr	r1, [pc, #692]	@ (8004fbc <HAL_UART_IRQHandler+0x5f8>)
 8004d08:	400a      	ands	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	f383 8810 	msr	PRIMASK, r3
}
 8004d16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d18:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d22:	2301      	movs	r3, #1
 8004d24:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]
 8004d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d40:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d44:	f383 8810 	msr	PRIMASK, r3
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d54:	2301      	movs	r3, #1
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2140      	movs	r1, #64	@ 0x40
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d72:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d76:	f383 8810 	msr	PRIMASK, r3
}
 8004d7a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2280      	movs	r2, #128	@ 0x80
 8004d80:	2120      	movs	r1, #32
 8004d82:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d94:	2301      	movs	r3, #1
 8004d96:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d9a:	f383 8810 	msr	PRIMASK, r3
}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2110      	movs	r1, #16
 8004dac:	438a      	bics	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7fc ff4d 	bl	8001c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2258      	movs	r2, #88	@ 0x58
 8004dd0:	5a9a      	ldrh	r2, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	215a      	movs	r1, #90	@ 0x5a
 8004dd6:	5a5b      	ldrh	r3, [r3, r1]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0011      	movs	r1, r2
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fb fc7e 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004de8:	e0e0      	b.n	8004fac <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2258      	movs	r2, #88	@ 0x58
 8004dee:	5a9b      	ldrh	r3, [r3, r2]
 8004df0:	227e      	movs	r2, #126	@ 0x7e
 8004df2:	18ba      	adds	r2, r7, r2
 8004df4:	8812      	ldrh	r2, [r2, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d000      	beq.n	8004dfc <HAL_UART_IRQHandler+0x438>
 8004dfa:	e0d7      	b.n	8004fac <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2220      	movs	r2, #32
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d000      	beq.n	8004e0e <HAL_UART_IRQHandler+0x44a>
 8004e0c:	e0ce      	b.n	8004fac <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2258      	movs	r2, #88	@ 0x58
 8004e18:	5a9a      	ldrh	r2, [r3, r2]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0011      	movs	r1, r2
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7fb fc60 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004e24:	e0c2      	b.n	8004fac <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2258      	movs	r2, #88	@ 0x58
 8004e2a:	5a99      	ldrh	r1, [r3, r2]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	225a      	movs	r2, #90	@ 0x5a
 8004e30:	5a9b      	ldrh	r3, [r3, r2]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	208e      	movs	r0, #142	@ 0x8e
 8004e36:	183b      	adds	r3, r7, r0
 8004e38:	1a8a      	subs	r2, r1, r2
 8004e3a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	225a      	movs	r2, #90	@ 0x5a
 8004e40:	5a9b      	ldrh	r3, [r3, r2]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d100      	bne.n	8004e4a <HAL_UART_IRQHandler+0x486>
 8004e48:	e0b2      	b.n	8004fb0 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d100      	bne.n	8004e54 <HAL_UART_IRQHandler+0x490>
 8004e52:	e0ad      	b.n	8004fb0 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5c:	2488      	movs	r4, #136	@ 0x88
 8004e5e:	193a      	adds	r2, r7, r4
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			@ (mov r8, r8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4951      	ldr	r1, [pc, #324]	@ (8004fc0 <HAL_UART_IRQHandler+0x5fc>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e90:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e92:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	2484      	movs	r4, #132	@ 0x84
 8004e96:	193a      	adds	r2, r7, r4
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	438a      	bics	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2280      	movs	r2, #128	@ 0x80
 8004ec8:	2120      	movs	r1, #32
 8004eca:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	2480      	movs	r4, #128	@ 0x80
 8004ee2:	193a      	adds	r2, r7, r4
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			@ (mov r8, r8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2110      	movs	r1, #16
 8004efe:	438a      	bics	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	881a      	ldrh	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0011      	movs	r1, r2
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f7fb fbe0 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f24:	e044      	b.n	8004fb0 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f26:	23a4      	movs	r3, #164	@ 0xa4
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	035b      	lsls	r3, r3, #13
 8004f30:	4013      	ands	r3, r2
 8004f32:	d010      	beq.n	8004f56 <HAL_UART_IRQHandler+0x592>
 8004f34:	239c      	movs	r3, #156	@ 0x9c
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	@ 0x80
 8004f3c:	03db      	lsls	r3, r3, #15
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2280      	movs	r2, #128	@ 0x80
 8004f48:	0352      	lsls	r2, r2, #13
 8004f4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 ffdf 	bl	8005f12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f54:	e02f      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f56:	23a4      	movs	r3, #164	@ 0xa4
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2280      	movs	r2, #128	@ 0x80
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f62:	23a0      	movs	r3, #160	@ 0xa0
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2280      	movs	r2, #128	@ 0x80
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01e      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	0010      	movs	r0, r2
 8004f7e:	4798      	blx	r3
    }
    return;
 8004f80:	e018      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f82:	23a4      	movs	r3, #164	@ 0xa4
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2240      	movs	r2, #64	@ 0x40
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
 8004f8e:	23a0      	movs	r3, #160	@ 0xa0
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2240      	movs	r2, #64	@ 0x40
 8004f96:	4013      	ands	r3, r2
 8004f98:	d00d      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 ff8d 	bl	8005ebc <UART_EndTransmit_IT>
    return;
 8004fa2:	e008      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	e006      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	e004      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fac:	46c0      	nop			@ (mov r8, r8)
 8004fae:	e002      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	e000      	b.n	8004fb6 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004fb4:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b02b      	add	sp, #172	@ 0xac
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	fffffeff 	.word	0xfffffeff
 8004fc0:	fffffedf 	.word	0xfffffedf

08004fc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fec:	46c0      	nop			@ (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b002      	add	sp, #8
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b002      	add	sp, #8
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005020:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2280      	movs	r2, #128	@ 0x80
 8005026:	589b      	ldr	r3, [r3, r2]
 8005028:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b004      	add	sp, #16
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2284      	movs	r2, #132	@ 0x84
 8005044:	589b      	ldr	r3, [r3, r2]
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b002      	add	sp, #8
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b08e      	sub	sp, #56	@ 0x38
 8005054:	af00      	add	r7, sp, #0
 8005056:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005058:	231a      	movs	r3, #26
 800505a:	2218      	movs	r2, #24
 800505c:	189b      	adds	r3, r3, r2
 800505e:	19db      	adds	r3, r3, r7
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	431a      	orrs	r2, r3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	4313      	orrs	r3, r2
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4ac3      	ldr	r2, [pc, #780]	@ (8005390 <UART_SetConfig+0x340>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4abe      	ldr	r2, [pc, #760]	@ (8005394 <UART_SetConfig+0x344>)
 800509a:	4013      	ands	r3, r2
 800509c:	0019      	movs	r1, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4ab8      	ldr	r2, [pc, #736]	@ (8005398 <UART_SetConfig+0x348>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050c0:	4313      	orrs	r3, r2
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4ab4      	ldr	r2, [pc, #720]	@ (800539c <UART_SetConfig+0x34c>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050d6:	430a      	orrs	r2, r1
 80050d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4ab0      	ldr	r2, [pc, #704]	@ (80053a0 <UART_SetConfig+0x350>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d131      	bne.n	8005148 <UART_SetConfig+0xf8>
 80050e4:	4baf      	ldr	r3, [pc, #700]	@ (80053a4 <UART_SetConfig+0x354>)
 80050e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e8:	2203      	movs	r2, #3
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d01d      	beq.n	800512c <UART_SetConfig+0xdc>
 80050f0:	d823      	bhi.n	800513a <UART_SetConfig+0xea>
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d00c      	beq.n	8005110 <UART_SetConfig+0xc0>
 80050f6:	d820      	bhi.n	800513a <UART_SetConfig+0xea>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <UART_SetConfig+0xb2>
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d00e      	beq.n	800511e <UART_SetConfig+0xce>
 8005100:	e01b      	b.n	800513a <UART_SetConfig+0xea>
 8005102:	231b      	movs	r3, #27
 8005104:	2218      	movs	r2, #24
 8005106:	189b      	adds	r3, r3, r2
 8005108:	19db      	adds	r3, r3, r7
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e0b4      	b.n	800527a <UART_SetConfig+0x22a>
 8005110:	231b      	movs	r3, #27
 8005112:	2218      	movs	r2, #24
 8005114:	189b      	adds	r3, r3, r2
 8005116:	19db      	adds	r3, r3, r7
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e0ad      	b.n	800527a <UART_SetConfig+0x22a>
 800511e:	231b      	movs	r3, #27
 8005120:	2218      	movs	r2, #24
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	2204      	movs	r2, #4
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e0a6      	b.n	800527a <UART_SetConfig+0x22a>
 800512c:	231b      	movs	r3, #27
 800512e:	2218      	movs	r2, #24
 8005130:	189b      	adds	r3, r3, r2
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2208      	movs	r2, #8
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e09f      	b.n	800527a <UART_SetConfig+0x22a>
 800513a:	231b      	movs	r3, #27
 800513c:	2218      	movs	r2, #24
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	2210      	movs	r2, #16
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e098      	b.n	800527a <UART_SetConfig+0x22a>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a96      	ldr	r2, [pc, #600]	@ (80053a8 <UART_SetConfig+0x358>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d131      	bne.n	80051b6 <UART_SetConfig+0x166>
 8005152:	4b94      	ldr	r3, [pc, #592]	@ (80053a4 <UART_SetConfig+0x354>)
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	220c      	movs	r2, #12
 8005158:	4013      	ands	r3, r2
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d01d      	beq.n	800519a <UART_SetConfig+0x14a>
 800515e:	d823      	bhi.n	80051a8 <UART_SetConfig+0x158>
 8005160:	2b08      	cmp	r3, #8
 8005162:	d00c      	beq.n	800517e <UART_SetConfig+0x12e>
 8005164:	d820      	bhi.n	80051a8 <UART_SetConfig+0x158>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <UART_SetConfig+0x120>
 800516a:	2b04      	cmp	r3, #4
 800516c:	d00e      	beq.n	800518c <UART_SetConfig+0x13c>
 800516e:	e01b      	b.n	80051a8 <UART_SetConfig+0x158>
 8005170:	231b      	movs	r3, #27
 8005172:	2218      	movs	r2, #24
 8005174:	189b      	adds	r3, r3, r2
 8005176:	19db      	adds	r3, r3, r7
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e07d      	b.n	800527a <UART_SetConfig+0x22a>
 800517e:	231b      	movs	r3, #27
 8005180:	2218      	movs	r2, #24
 8005182:	189b      	adds	r3, r3, r2
 8005184:	19db      	adds	r3, r3, r7
 8005186:	2202      	movs	r2, #2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e076      	b.n	800527a <UART_SetConfig+0x22a>
 800518c:	231b      	movs	r3, #27
 800518e:	2218      	movs	r2, #24
 8005190:	189b      	adds	r3, r3, r2
 8005192:	19db      	adds	r3, r3, r7
 8005194:	2204      	movs	r2, #4
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e06f      	b.n	800527a <UART_SetConfig+0x22a>
 800519a:	231b      	movs	r3, #27
 800519c:	2218      	movs	r2, #24
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	19db      	adds	r3, r3, r7
 80051a2:	2208      	movs	r2, #8
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e068      	b.n	800527a <UART_SetConfig+0x22a>
 80051a8:	231b      	movs	r3, #27
 80051aa:	2218      	movs	r2, #24
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	19db      	adds	r3, r3, r7
 80051b0:	2210      	movs	r2, #16
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e061      	b.n	800527a <UART_SetConfig+0x22a>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a7c      	ldr	r2, [pc, #496]	@ (80053ac <UART_SetConfig+0x35c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d106      	bne.n	80051ce <UART_SetConfig+0x17e>
 80051c0:	231b      	movs	r3, #27
 80051c2:	2218      	movs	r2, #24
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	19db      	adds	r3, r3, r7
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e055      	b.n	800527a <UART_SetConfig+0x22a>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a77      	ldr	r2, [pc, #476]	@ (80053b0 <UART_SetConfig+0x360>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d106      	bne.n	80051e6 <UART_SetConfig+0x196>
 80051d8:	231b      	movs	r3, #27
 80051da:	2218      	movs	r2, #24
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e049      	b.n	800527a <UART_SetConfig+0x22a>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005398 <UART_SetConfig+0x348>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d13e      	bne.n	800526e <UART_SetConfig+0x21e>
 80051f0:	4b6c      	ldr	r3, [pc, #432]	@ (80053a4 <UART_SetConfig+0x354>)
 80051f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051f4:	23c0      	movs	r3, #192	@ 0xc0
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4013      	ands	r3, r2
 80051fa:	22c0      	movs	r2, #192	@ 0xc0
 80051fc:	0112      	lsls	r2, r2, #4
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <UART_SetConfig+0x202>
 8005202:	22c0      	movs	r2, #192	@ 0xc0
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	4293      	cmp	r3, r2
 8005208:	d82a      	bhi.n	8005260 <UART_SetConfig+0x210>
 800520a:	2280      	movs	r2, #128	@ 0x80
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	4293      	cmp	r3, r2
 8005210:	d011      	beq.n	8005236 <UART_SetConfig+0x1e6>
 8005212:	2280      	movs	r2, #128	@ 0x80
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	4293      	cmp	r3, r2
 8005218:	d822      	bhi.n	8005260 <UART_SetConfig+0x210>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <UART_SetConfig+0x1d8>
 800521e:	2280      	movs	r2, #128	@ 0x80
 8005220:	00d2      	lsls	r2, r2, #3
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <UART_SetConfig+0x1f4>
 8005226:	e01b      	b.n	8005260 <UART_SetConfig+0x210>
 8005228:	231b      	movs	r3, #27
 800522a:	2218      	movs	r2, #24
 800522c:	189b      	adds	r3, r3, r2
 800522e:	19db      	adds	r3, r3, r7
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e021      	b.n	800527a <UART_SetConfig+0x22a>
 8005236:	231b      	movs	r3, #27
 8005238:	2218      	movs	r2, #24
 800523a:	189b      	adds	r3, r3, r2
 800523c:	19db      	adds	r3, r3, r7
 800523e:	2202      	movs	r2, #2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e01a      	b.n	800527a <UART_SetConfig+0x22a>
 8005244:	231b      	movs	r3, #27
 8005246:	2218      	movs	r2, #24
 8005248:	189b      	adds	r3, r3, r2
 800524a:	19db      	adds	r3, r3, r7
 800524c:	2204      	movs	r2, #4
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e013      	b.n	800527a <UART_SetConfig+0x22a>
 8005252:	231b      	movs	r3, #27
 8005254:	2218      	movs	r2, #24
 8005256:	189b      	adds	r3, r3, r2
 8005258:	19db      	adds	r3, r3, r7
 800525a:	2208      	movs	r2, #8
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e00c      	b.n	800527a <UART_SetConfig+0x22a>
 8005260:	231b      	movs	r3, #27
 8005262:	2218      	movs	r2, #24
 8005264:	189b      	adds	r3, r3, r2
 8005266:	19db      	adds	r3, r3, r7
 8005268:	2210      	movs	r2, #16
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	e005      	b.n	800527a <UART_SetConfig+0x22a>
 800526e:	231b      	movs	r3, #27
 8005270:	2218      	movs	r2, #24
 8005272:	189b      	adds	r3, r3, r2
 8005274:	19db      	adds	r3, r3, r7
 8005276:	2210      	movs	r2, #16
 8005278:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a46      	ldr	r2, [pc, #280]	@ (8005398 <UART_SetConfig+0x348>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d000      	beq.n	8005286 <UART_SetConfig+0x236>
 8005284:	e09a      	b.n	80053bc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005286:	231b      	movs	r3, #27
 8005288:	2218      	movs	r2, #24
 800528a:	189b      	adds	r3, r3, r2
 800528c:	19db      	adds	r3, r3, r7
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d01d      	beq.n	80052d0 <UART_SetConfig+0x280>
 8005294:	dc20      	bgt.n	80052d8 <UART_SetConfig+0x288>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d015      	beq.n	80052c6 <UART_SetConfig+0x276>
 800529a:	dc1d      	bgt.n	80052d8 <UART_SetConfig+0x288>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <UART_SetConfig+0x256>
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d005      	beq.n	80052b0 <UART_SetConfig+0x260>
 80052a4:	e018      	b.n	80052d8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fe fd2d 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80052aa:	0003      	movs	r3, r0
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052ae:	e01c      	b.n	80052ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b0:	4b3c      	ldr	r3, [pc, #240]	@ (80053a4 <UART_SetConfig+0x354>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2210      	movs	r2, #16
 80052b6:	4013      	ands	r3, r2
 80052b8:	d002      	beq.n	80052c0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052ba:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <UART_SetConfig+0x364>)
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052be:	e014      	b.n	80052ea <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <UART_SetConfig+0x368>)
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052c4:	e011      	b.n	80052ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe fc8d 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 80052ca:	0003      	movs	r3, r0
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052ce:	e00c      	b.n	80052ea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052d6:	e008      	b.n	80052ea <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80052dc:	231a      	movs	r3, #26
 80052de:	2218      	movs	r2, #24
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
        break;
 80052e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d100      	bne.n	80052f2 <UART_SetConfig+0x2a2>
 80052f0:	e133      	b.n	800555a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	0013      	movs	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	189b      	adds	r3, r3, r2
 80052fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d305      	bcc.n	800530e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d906      	bls.n	800531c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800530e:	231a      	movs	r3, #26
 8005310:	2218      	movs	r2, #24
 8005312:	189b      	adds	r3, r3, r2
 8005314:	19db      	adds	r3, r3, r7
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e11e      	b.n	800555a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	6939      	ldr	r1, [r7, #16]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	000b      	movs	r3, r1
 800532a:	0e1b      	lsrs	r3, r3, #24
 800532c:	0010      	movs	r0, r2
 800532e:	0205      	lsls	r5, r0, #8
 8005330:	431d      	orrs	r5, r3
 8005332:	000b      	movs	r3, r1
 8005334:	021c      	lsls	r4, r3, #8
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68b8      	ldr	r0, [r7, #8]
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	1900      	adds	r0, r0, r4
 8005348:	4169      	adcs	r1, r5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f7fa ff6a 	bl	8000230 <__aeabi_uldivmod>
 800535c:	0002      	movs	r2, r0
 800535e:	000b      	movs	r3, r1
 8005360:	0013      	movs	r3, r2
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005366:	23c0      	movs	r3, #192	@ 0xc0
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	429a      	cmp	r2, r3
 800536c:	d309      	bcc.n	8005382 <UART_SetConfig+0x332>
 800536e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	035b      	lsls	r3, r3, #13
 8005374:	429a      	cmp	r2, r3
 8005376:	d204      	bcs.n	8005382 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e0eb      	b.n	800555a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005382:	231a      	movs	r3, #26
 8005384:	2218      	movs	r2, #24
 8005386:	189b      	adds	r3, r3, r2
 8005388:	19db      	adds	r3, r3, r7
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e0e4      	b.n	800555a <UART_SetConfig+0x50a>
 8005390:	efff69f3 	.word	0xefff69f3
 8005394:	ffffcfff 	.word	0xffffcfff
 8005398:	40004800 	.word	0x40004800
 800539c:	fffff4ff 	.word	0xfffff4ff
 80053a0:	40013800 	.word	0x40013800
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004c00 	.word	0x40004c00
 80053b0:	40005000 	.word	0x40005000
 80053b4:	003d0900 	.word	0x003d0900
 80053b8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d000      	beq.n	80053ca <UART_SetConfig+0x37a>
 80053c8:	e070      	b.n	80054ac <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80053ca:	231b      	movs	r3, #27
 80053cc:	2218      	movs	r2, #24
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d822      	bhi.n	800541e <UART_SetConfig+0x3ce>
 80053d8:	009a      	lsls	r2, r3, #2
 80053da:	4b67      	ldr	r3, [pc, #412]	@ (8005578 <UART_SetConfig+0x528>)
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e2:	f7fe fc8f 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80053e6:	0003      	movs	r3, r0
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ea:	e021      	b.n	8005430 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ec:	f7fe fca0 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80053f0:	0003      	movs	r3, r0
 80053f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053f4:	e01c      	b.n	8005430 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f6:	4b61      	ldr	r3, [pc, #388]	@ (800557c <UART_SetConfig+0x52c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	4013      	ands	r3, r2
 80053fe:	d002      	beq.n	8005406 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005400:	4b5f      	ldr	r3, [pc, #380]	@ (8005580 <UART_SetConfig+0x530>)
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005404:	e014      	b.n	8005430 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005406:	4b5f      	ldr	r3, [pc, #380]	@ (8005584 <UART_SetConfig+0x534>)
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800540a:	e011      	b.n	8005430 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540c:	f7fe fbea 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8005410:	0003      	movs	r3, r0
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005414:	e00c      	b.n	8005430 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800541c:	e008      	b.n	8005430 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005422:	231a      	movs	r3, #26
 8005424:	2218      	movs	r2, #24
 8005426:	189b      	adds	r3, r3, r2
 8005428:	19db      	adds	r3, r3, r7
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
        break;
 800542e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d100      	bne.n	8005438 <UART_SetConfig+0x3e8>
 8005436:	e090      	b.n	800555a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	005a      	lsls	r2, r3, #1
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	18d2      	adds	r2, r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	0019      	movs	r1, r3
 800544a:	0010      	movs	r0, r2
 800544c:	f7fa fe64 	bl	8000118 <__udivsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d921      	bls.n	800549e <UART_SetConfig+0x44e>
 800545a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	025b      	lsls	r3, r3, #9
 8005460:	429a      	cmp	r2, r3
 8005462:	d21c      	bcs.n	800549e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	b29a      	uxth	r2, r3
 8005468:	200e      	movs	r0, #14
 800546a:	2418      	movs	r4, #24
 800546c:	1903      	adds	r3, r0, r4
 800546e:	19db      	adds	r3, r3, r7
 8005470:	210f      	movs	r1, #15
 8005472:	438a      	bics	r2, r1
 8005474:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	b29b      	uxth	r3, r3
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	b299      	uxth	r1, r3
 8005482:	1903      	adds	r3, r0, r4
 8005484:	19db      	adds	r3, r3, r7
 8005486:	1902      	adds	r2, r0, r4
 8005488:	19d2      	adds	r2, r2, r7
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1902      	adds	r2, r0, r4
 8005496:	19d2      	adds	r2, r2, r7
 8005498:	8812      	ldrh	r2, [r2, #0]
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	e05d      	b.n	800555a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800549e:	231a      	movs	r3, #26
 80054a0:	2218      	movs	r2, #24
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	19db      	adds	r3, r3, r7
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e056      	b.n	800555a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ac:	231b      	movs	r3, #27
 80054ae:	2218      	movs	r2, #24
 80054b0:	189b      	adds	r3, r3, r2
 80054b2:	19db      	adds	r3, r3, r7
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d822      	bhi.n	8005500 <UART_SetConfig+0x4b0>
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	4b32      	ldr	r3, [pc, #200]	@ (8005588 <UART_SetConfig+0x538>)
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7fe fc1e 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80054c8:	0003      	movs	r3, r0
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054cc:	e021      	b.n	8005512 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ce:	f7fe fc2f 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80054d2:	0003      	movs	r3, r0
 80054d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054d6:	e01c      	b.n	8005512 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054d8:	4b28      	ldr	r3, [pc, #160]	@ (800557c <UART_SetConfig+0x52c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2210      	movs	r2, #16
 80054de:	4013      	ands	r3, r2
 80054e0:	d002      	beq.n	80054e8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <UART_SetConfig+0x530>)
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054e6:	e014      	b.n	8005512 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80054e8:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <UART_SetConfig+0x534>)
 80054ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054ec:	e011      	b.n	8005512 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe fb79 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 80054f2:	0003      	movs	r3, r0
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054f6:	e00c      	b.n	8005512 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f8:	2380      	movs	r3, #128	@ 0x80
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054fe:	e008      	b.n	8005512 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005504:	231a      	movs	r3, #26
 8005506:	2218      	movs	r2, #24
 8005508:	189b      	adds	r3, r3, r2
 800550a:	19db      	adds	r3, r3, r7
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
        break;
 8005510:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	085a      	lsrs	r2, r3, #1
 800551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005520:	18d2      	adds	r2, r2, r3
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	0019      	movs	r1, r3
 8005528:	0010      	movs	r0, r2
 800552a:	f7fa fdf5 	bl	8000118 <__udivsi3>
 800552e:	0003      	movs	r3, r0
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d90a      	bls.n	800554e <UART_SetConfig+0x4fe>
 8005538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553a:	2380      	movs	r3, #128	@ 0x80
 800553c:	025b      	lsls	r3, r3, #9
 800553e:	429a      	cmp	r2, r3
 8005540:	d205      	bcs.n	800554e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	b29a      	uxth	r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	e005      	b.n	800555a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800554e:	231a      	movs	r3, #26
 8005550:	2218      	movs	r2, #24
 8005552:	189b      	adds	r3, r3, r2
 8005554:	19db      	adds	r3, r3, r7
 8005556:	2201      	movs	r2, #1
 8005558:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	2200      	movs	r2, #0
 800555e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2200      	movs	r2, #0
 8005564:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005566:	231a      	movs	r3, #26
 8005568:	2218      	movs	r2, #24
 800556a:	189b      	adds	r3, r3, r2
 800556c:	19db      	adds	r3, r3, r7
 800556e:	781b      	ldrb	r3, [r3, #0]
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b00e      	add	sp, #56	@ 0x38
 8005576:	bdb0      	pop	{r4, r5, r7, pc}
 8005578:	08006c18 	.word	0x08006c18
 800557c:	40021000 	.word	0x40021000
 8005580:	003d0900 	.word	0x003d0900
 8005584:	00f42400 	.word	0x00f42400
 8005588:	08006c3c 	.word	0x08006c3c

0800558c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	2208      	movs	r2, #8
 800559a:	4013      	ands	r3, r2
 800559c:	d00b      	beq.n	80055b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a4a      	ldr	r2, [pc, #296]	@ (80056d0 <UART_AdvFeatureConfig+0x144>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	0019      	movs	r1, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	2201      	movs	r2, #1
 80055bc:	4013      	ands	r3, r2
 80055be:	d00b      	beq.n	80055d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4a43      	ldr	r2, [pc, #268]	@ (80056d4 <UART_AdvFeatureConfig+0x148>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	0019      	movs	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	d00b      	beq.n	80055fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a3b      	ldr	r2, [pc, #236]	@ (80056d8 <UART_AdvFeatureConfig+0x14c>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d00b      	beq.n	800561c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4a34      	ldr	r2, [pc, #208]	@ (80056dc <UART_AdvFeatureConfig+0x150>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	2210      	movs	r2, #16
 8005622:	4013      	ands	r3, r2
 8005624:	d00b      	beq.n	800563e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a2c      	ldr	r2, [pc, #176]	@ (80056e0 <UART_AdvFeatureConfig+0x154>)
 800562e:	4013      	ands	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	2220      	movs	r2, #32
 8005644:	4013      	ands	r3, r2
 8005646:	d00b      	beq.n	8005660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	4a25      	ldr	r2, [pc, #148]	@ (80056e4 <UART_AdvFeatureConfig+0x158>)
 8005650:	4013      	ands	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	2240      	movs	r2, #64	@ 0x40
 8005666:	4013      	ands	r3, r2
 8005668:	d01d      	beq.n	80056a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a1d      	ldr	r2, [pc, #116]	@ (80056e8 <UART_AdvFeatureConfig+0x15c>)
 8005672:	4013      	ands	r3, r2
 8005674:	0019      	movs	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	035b      	lsls	r3, r3, #13
 800568a:	429a      	cmp	r2, r3
 800568c:	d10b      	bne.n	80056a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a15      	ldr	r2, [pc, #84]	@ (80056ec <UART_AdvFeatureConfig+0x160>)
 8005696:	4013      	ands	r3, r2
 8005698:	0019      	movs	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	2280      	movs	r2, #128	@ 0x80
 80056ac:	4013      	ands	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4a0e      	ldr	r2, [pc, #56]	@ (80056f0 <UART_AdvFeatureConfig+0x164>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	0019      	movs	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	605a      	str	r2, [r3, #4]
  }
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b002      	add	sp, #8
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	ffff7fff 	.word	0xffff7fff
 80056d4:	fffdffff 	.word	0xfffdffff
 80056d8:	fffeffff 	.word	0xfffeffff
 80056dc:	fffbffff 	.word	0xfffbffff
 80056e0:	ffffefff 	.word	0xffffefff
 80056e4:	ffffdfff 	.word	0xffffdfff
 80056e8:	ffefffff 	.word	0xffefffff
 80056ec:	ff9fffff 	.word	0xff9fffff
 80056f0:	fff7ffff 	.word	0xfff7ffff

080056f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b092      	sub	sp, #72	@ 0x48
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2284      	movs	r2, #132	@ 0x84
 8005700:	2100      	movs	r1, #0
 8005702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005704:	f7fc f89e 	bl	8001844 <HAL_GetTick>
 8005708:	0003      	movs	r3, r0
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2208      	movs	r2, #8
 8005714:	4013      	ands	r3, r2
 8005716:	2b08      	cmp	r3, #8
 8005718:	d12c      	bne.n	8005774 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	0391      	lsls	r1, r2, #14
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4a46      	ldr	r2, [pc, #280]	@ (800583c <UART_CheckIdleState+0x148>)
 8005724:	9200      	str	r2, [sp, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	f000 f88c 	bl	8005844 <UART_WaitOnFlagUntilTimeout>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d021      	beq.n	8005774 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005730:	f3ef 8310 	mrs	r3, PRIMASK
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800573a:	2301      	movs	r3, #1
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	46c0      	nop			@ (mov r8, r8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	438a      	bics	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2278      	movs	r2, #120	@ 0x78
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e05f      	b.n	8005834 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2204      	movs	r2, #4
 800577c:	4013      	ands	r3, r2
 800577e:	2b04      	cmp	r3, #4
 8005780:	d146      	bne.n	8005810 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005784:	2280      	movs	r2, #128	@ 0x80
 8005786:	03d1      	lsls	r1, r2, #15
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <UART_CheckIdleState+0x148>)
 800578c:	9200      	str	r2, [sp, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	f000 f858 	bl	8005844 <UART_WaitOnFlagUntilTimeout>
 8005794:	1e03      	subs	r3, r0, #0
 8005796:	d03b      	beq.n	8005810 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005798:	f3ef 8310 	mrs	r3, PRIMASK
 800579c:	60fb      	str	r3, [r7, #12]
  return(result);
 800579e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	2301      	movs	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f383 8810 	msr	PRIMASK, r3
}
 80057ac:	46c0      	nop			@ (mov r8, r8)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4921      	ldr	r1, [pc, #132]	@ (8005840 <UART_CheckIdleState+0x14c>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f383 8810 	msr	PRIMASK, r3
}
 80057c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8310 	mrs	r3, PRIMASK
 80057ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80057d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d4:	2301      	movs	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f383 8810 	msr	PRIMASK, r3
}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2101      	movs	r1, #1
 80057ec:	438a      	bics	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f383 8810 	msr	PRIMASK, r3
}
 80057fa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2280      	movs	r2, #128	@ 0x80
 8005800:	2120      	movs	r1, #32
 8005802:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2278      	movs	r2, #120	@ 0x78
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e011      	b.n	8005834 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2280      	movs	r2, #128	@ 0x80
 800581a:	2120      	movs	r1, #32
 800581c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2278      	movs	r2, #120	@ 0x78
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b010      	add	sp, #64	@ 0x40
 800583a:	bd80      	pop	{r7, pc}
 800583c:	01ffffff 	.word	0x01ffffff
 8005840:	fffffedf 	.word	0xfffffedf

08005844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	1dfb      	adds	r3, r7, #7
 8005852:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005854:	e051      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3301      	adds	r3, #1
 800585a:	d04e      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585c:	f7fb fff2 	bl	8001844 <HAL_GetTick>
 8005860:	0002      	movs	r2, r0
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <UART_WaitOnFlagUntilTimeout+0x2e>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e051      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2204      	movs	r2, #4
 800587e:	4013      	ands	r3, r2
 8005880:	d03b      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b80      	cmp	r3, #128	@ 0x80
 8005886:	d038      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d035      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	2208      	movs	r2, #8
 8005896:	4013      	ands	r3, r2
 8005898:	2b08      	cmp	r3, #8
 800589a:	d111      	bne.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2208      	movs	r2, #8
 80058a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 f900 	bl	8005aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2284      	movs	r2, #132	@ 0x84
 80058b0:	2108      	movs	r1, #8
 80058b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2278      	movs	r2, #120	@ 0x78
 80058b8:	2100      	movs	r1, #0
 80058ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e02c      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	2380      	movs	r3, #128	@ 0x80
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	401a      	ands	r2, r3
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d112      	bne.n	80058fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2280      	movs	r2, #128	@ 0x80
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f000 f8e3 	bl	8005aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2284      	movs	r2, #132	@ 0x84
 80058ea:	2120      	movs	r1, #32
 80058ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2278      	movs	r2, #120	@ 0x78
 80058f2:	2100      	movs	r1, #0
 80058f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e00f      	b.n	800591a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	425a      	negs	r2, r3
 800590a:	4153      	adcs	r3, r2
 800590c:	b2db      	uxtb	r3, r3
 800590e:	001a      	movs	r2, r3
 8005910:	1dfb      	adds	r3, r7, #7
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d09e      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b004      	add	sp, #16
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b090      	sub	sp, #64	@ 0x40
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	1dbb      	adds	r3, r7, #6
 8005930:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1dba      	adds	r2, r7, #6
 800593c:	2158      	movs	r1, #88	@ 0x58
 800593e:	8812      	ldrh	r2, [r2, #0]
 8005940:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2284      	movs	r2, #132	@ 0x84
 8005946:	2100      	movs	r1, #0
 8005948:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2280      	movs	r2, #128	@ 0x80
 800594e:	2122      	movs	r1, #34	@ 0x22
 8005950:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	2b00      	cmp	r3, #0
 8005958:	d028      	beq.n	80059ac <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a58 <UART_Start_Receive_DMA+0x134>)
 8005960:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005966:	4a3d      	ldr	r2, [pc, #244]	@ (8005a5c <UART_Start_Receive_DMA+0x138>)
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a60 <UART_Start_Receive_DMA+0x13c>)
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	2200      	movs	r2, #0
 8005978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3324      	adds	r3, #36	@ 0x24
 8005984:	0019      	movs	r1, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	001a      	movs	r2, r3
 800598c:	1dbb      	adds	r3, r7, #6
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	f7fc f900 	bl	8001b94 <HAL_DMA_Start_IT>
 8005994:	1e03      	subs	r3, r0, #0
 8005996:	d009      	beq.n	80059ac <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2284      	movs	r2, #132	@ 0x84
 800599c:	2110      	movs	r1, #16
 800599e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2280      	movs	r2, #128	@ 0x80
 80059a4:	2120      	movs	r1, #32
 80059a6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e050      	b.n	8005a4e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d019      	beq.n	80059e8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b4:	f3ef 8310 	mrs	r3, PRIMASK
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059be:	2301      	movs	r3, #1
 80059c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	f383 8810 	msr	PRIMASK, r3
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	0049      	lsls	r1, r1, #1
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	f383 8810 	msr	PRIMASK, r3
}
 80059e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ec:	613b      	str	r3, [r7, #16]
  return(result);
 80059ee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a20:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a24:	2301      	movs	r3, #1
 8005a26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2140      	movs	r1, #64	@ 0x40
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	0018      	movs	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b010      	add	sp, #64	@ 0x40
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	08005c2d 	.word	0x08005c2d
 8005a5c:	08005d95 	.word	0x08005d95
 8005a60:	08005e13 	.word	0x08005e13

08005a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	2301      	movs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	21c0      	movs	r1, #192	@ 0xc0
 8005a8e:	438a      	bics	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005aa4:	46c0      	nop			@ (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b006      	add	sp, #24
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08e      	sub	sp, #56	@ 0x38
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4926      	ldr	r1, [pc, #152]	@ (8005b70 <UART_EndRxTransfer+0xc4>)
 8005ad6:	400a      	ands	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f383 8810 	msr	PRIMASK, r3
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aea:	623b      	str	r3, [r7, #32]
  return(result);
 8005aec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af0:	2301      	movs	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	438a      	bics	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	f383 8810 	msr	PRIMASK, r3
}
 8005b16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d118      	bne.n	8005b52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b20:	f3ef 8310 	mrs	r3, PRIMASK
 8005b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f383 8810 	msr	PRIMASK, r3
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2110      	movs	r1, #16
 8005b42:	438a      	bics	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f383 8810 	msr	PRIMASK, r3
}
 8005b50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2280      	movs	r2, #128	@ 0x80
 8005b56:	2120      	movs	r1, #32
 8005b58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b00e      	add	sp, #56	@ 0x38
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	fffffedf 	.word	0xfffffedf

08005b74 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	@ 0x30
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d135      	bne.n	8005bfa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	2252      	movs	r2, #82	@ 0x52
 8005b92:	2100      	movs	r1, #0
 8005b94:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b96:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b9c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			@ (mov r8, r8)
 8005bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2180      	movs	r1, #128	@ 0x80
 8005bb8:	438a      	bics	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f383 8810 	msr	PRIMASK, r3
}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bce:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			@ (mov r8, r8)
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2140      	movs	r1, #64	@ 0x40
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	e004      	b.n	8005c04 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7ff f9e1 	bl	8004fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	46c0      	nop			@ (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b00c      	add	sp, #48	@ 0x30
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c18:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7ff f9d9 	bl	8004fd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b004      	add	sp, #16
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b094      	sub	sp, #80	@ 0x50
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2220      	movs	r2, #32
 8005c42:	4013      	ands	r3, r2
 8005c44:	d16f      	bne.n	8005d26 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c48:	225a      	movs	r2, #90	@ 0x5a
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c52:	617b      	str	r3, [r7, #20]
  return(result);
 8005c54:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c58:	2301      	movs	r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4948      	ldr	r1, [pc, #288]	@ (8005d90 <UART_DMAReceiveCplt+0x164>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	623b      	str	r3, [r7, #32]
  return(result);
 8005c86:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
 8005c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2140      	movs	r1, #64	@ 0x40
 8005cd4:	438a      	bics	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce6:	2280      	movs	r2, #128	@ 0x80
 8005ce8:	2120      	movs	r1, #32
 8005cea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d118      	bne.n	8005d26 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfe:	2301      	movs	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f383 8810 	msr	PRIMASK, r3
}
 8005d08:	46c0      	nop			@ (mov r8, r8)
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2110      	movs	r1, #16
 8005d16:	438a      	bics	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f383 8810 	msr	PRIMASK, r3
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d28:	2200      	movs	r2, #0
 8005d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d124      	bne.n	8005d7e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d36:	225a      	movs	r2, #90	@ 0x5a
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	213a      	movs	r1, #58	@ 0x3a
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d4a:	2258      	movs	r2, #88	@ 0x58
 8005d4c:	5a9b      	ldrh	r3, [r3, r2]
 8005d4e:	187a      	adds	r2, r7, r1
 8005d50:	8812      	ldrh	r2, [r2, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d204      	bcs.n	8005d60 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d58:	187a      	adds	r2, r7, r1
 8005d5a:	215a      	movs	r1, #90	@ 0x5a
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d62:	2258      	movs	r2, #88	@ 0x58
 8005d64:	5a9a      	ldrh	r2, [r3, r2]
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	215a      	movs	r1, #90	@ 0x5a
 8005d6a:	5a5b      	ldrh	r3, [r3, r1]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7fa fcb4 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d7c:	e003      	b.n	8005d86 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7ff f92f 	bl	8004fe4 <HAL_UART_RxCpltCallback>
}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b014      	add	sp, #80	@ 0x50
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	fffffeff 	.word	0xfffffeff

08005d94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d128      	bne.n	8005e02 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2258      	movs	r2, #88	@ 0x58
 8005db4:	5a9b      	ldrh	r3, [r3, r2]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	b299      	uxth	r1, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	225a      	movs	r2, #90	@ 0x5a
 8005dbe:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	210a      	movs	r1, #10
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2258      	movs	r2, #88	@ 0x58
 8005dd0:	5a9b      	ldrh	r3, [r3, r2]
 8005dd2:	187a      	adds	r2, r7, r1
 8005dd4:	8812      	ldrh	r2, [r2, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d804      	bhi.n	8005de4 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	187a      	adds	r2, r7, r1
 8005dde:	215a      	movs	r1, #90	@ 0x5a
 8005de0:	8812      	ldrh	r2, [r2, #0]
 8005de2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2258      	movs	r2, #88	@ 0x58
 8005de8:	5a9a      	ldrh	r2, [r3, r2]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	215a      	movs	r1, #90	@ 0x5a
 8005dee:	5a5b      	ldrh	r3, [r3, r1]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fa fc72 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e00:	e003      	b.n	8005e0a <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7ff f8f5 	bl	8004ff4 <HAL_UART_RxHalfCpltCallback>
}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b004      	add	sp, #16
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2280      	movs	r2, #128	@ 0x80
 8005e2a:	589b      	ldr	r3, [r3, r2]
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2280      	movs	r2, #128	@ 0x80
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d10a      	bne.n	8005e52 <UART_DMAError+0x40>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b21      	cmp	r3, #33	@ 0x21
 8005e40:	d107      	bne.n	8005e52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2252      	movs	r2, #82	@ 0x52
 8005e46:	2100      	movs	r1, #0
 8005e48:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7ff fe09 	bl	8005a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2240      	movs	r2, #64	@ 0x40
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d10a      	bne.n	8005e76 <UART_DMAError+0x64>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b22      	cmp	r3, #34	@ 0x22
 8005e64:	d107      	bne.n	8005e76 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	225a      	movs	r2, #90	@ 0x5a
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7ff fe1b 	bl	8005aac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2284      	movs	r2, #132	@ 0x84
 8005e7a:	589b      	ldr	r3, [r3, r2]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2184      	movs	r1, #132	@ 0x84
 8005e84:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7ff f8bb 	bl	8005004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b006      	add	sp, #24
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	225a      	movs	r2, #90	@ 0x5a
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7ff f8a8 	bl	8005004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b004      	add	sp, #16
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eca:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			@ (mov r8, r8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2140      	movs	r1, #64	@ 0x40
 8005ee6:	438a      	bics	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff f85d 	bl	8004fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b006      	add	sp, #24
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f22:	b5b0      	push	{r4, r5, r7, lr}
 8005f24:	b08a      	sub	sp, #40	@ 0x28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	1dbb      	adds	r3, r7, #6
 8005f2e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2280      	movs	r2, #128	@ 0x80
 8005f34:	589b      	ldr	r3, [r3, r2]
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d156      	bne.n	8005fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f40:	1dbb      	adds	r3, r7, #6
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04e      	b.n	8005fea <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	2380      	movs	r3, #128	@ 0x80
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d109      	bne.n	8005f6c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d001      	beq.n	8005f6c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e03e      	b.n	8005fea <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f78:	2527      	movs	r5, #39	@ 0x27
 8005f7a:	197c      	adds	r4, r7, r5
 8005f7c:	1dbb      	adds	r3, r7, #6
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7ff fccd 	bl	8005924 <UART_Start_Receive_DMA>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f8e:	197b      	adds	r3, r7, r5
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d124      	bne.n	8005fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d11c      	bne.n	8005fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005faa:	617b      	str	r3, [r7, #20]
  return(result);
 8005fac:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fae:	623b      	str	r3, [r7, #32]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f383 8810 	msr	PRIMASK, r3
}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2110      	movs	r1, #16
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f383 8810 	msr	PRIMASK, r3
}
 8005fd6:	e003      	b.n	8005fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fd8:	2327      	movs	r3, #39	@ 0x27
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005fe0:	2327      	movs	r3, #39	@ 0x27
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	e000      	b.n	8005fea <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b00a      	add	sp, #40	@ 0x28
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}

08005ff2 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 fb11 	bl	8006628 <malloc>
 8006006:	0003      	movs	r3, r0
 8006008:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800600a:	68fb      	ldr	r3, [r7, #12]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}

08006014 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <ATC_Free+0x26>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	0018      	movs	r0, r3
 8006030:	f000 fb04 	bl	800663c <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
  }
}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b002      	add	sp, #8
 8006040:	bd80      	pop	{r7, pc}

08006042 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8a9b      	ldrh	r3, [r3, #20]
 8006058:	001a      	movs	r2, r3
 800605a:	2100      	movs	r1, #0
 800605c:	f000 fbaa 	bl	80067b4 <memset>
}
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}

08006068 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	1dbb      	adds	r3, r7, #6
 8006074:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8006076:	2417      	movs	r4, #23
 8006078:	193b      	adds	r3, r7, r4
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1dba      	adds	r2, r7, #6
 8006082:	8812      	ldrh	r2, [r2, #0]
 8006084:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	1dbb      	adds	r3, r7, #6
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	0019      	movs	r1, r3
 8006092:	f7fe faf3 	bl	800467c <HAL_UART_Transmit_DMA>
 8006096:	1e03      	subs	r3, r0, #0
 8006098:	d103      	bne.n	80060a2 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 800609a:	193b      	adds	r3, r7, r4
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e000      	b.n	80060a4 <ATC_TxRaw+0x3c>
      break;
 80060a2:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80060a4:	2317      	movs	r3, #23
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	781b      	ldrb	r3, [r3, #0]
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b007      	add	sp, #28
 80060b0:	bd90      	pop	{r4, r7, pc}

080060b2 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	0018      	movs	r0, r3
 80060c0:	f7fe ffa8 	bl	8005014 <HAL_UART_GetState>
 80060c4:	0003      	movs	r3, r0
 80060c6:	2b21      	cmp	r3, #33	@ 0x21
 80060c8:	d007      	beq.n	80060da <ATC_TxBusy+0x28>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fe ffa0 	bl	8005014 <HAL_UART_GetState>
 80060d4:	0003      	movs	r3, r0
 80060d6:	2b23      	cmp	r3, #35	@ 0x23
 80060d8:	d101      	bne.n	80060de <ATC_TxBusy+0x2c>
  {
    return true;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80060de:	2300      	movs	r3, #0
  }
}
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b002      	add	sp, #8
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80060f2:	230f      	movs	r3, #15
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 80060fa:	f7fb fba3 	bl	8001844 <HAL_GetTick>
 80060fe:	0003      	movs	r3, r0
 8006100:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8006102:	2001      	movs	r0, #1
 8006104:	f000 fa84 	bl	8006610 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0018      	movs	r0, r3
 800610e:	f7fe ff81 	bl	8005014 <HAL_UART_GetState>
 8006112:	0003      	movs	r3, r0
 8006114:	2b22      	cmp	r3, #34	@ 0x22
 8006116:	d007      	beq.n	8006128 <ATC_TxWait+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	0018      	movs	r0, r3
 800611e:	f7fe ff79 	bl	8005014 <HAL_UART_GetState>
 8006122:	0003      	movs	r3, r0
 8006124:	2b20      	cmp	r3, #32
 8006126:	d104      	bne.n	8006132 <ATC_TxWait+0x4a>
    {
      answer = true;
 8006128:	230f      	movs	r3, #15
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
      break;
 8006130:	e01c      	b.n	800616c <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	0018      	movs	r0, r3
 8006138:	f7fe ff6c 	bl	8005014 <HAL_UART_GetState>
 800613c:	0003      	movs	r3, r0
 800613e:	2be0      	cmp	r3, #224	@ 0xe0
 8006140:	d014      	beq.n	800616c <ATC_TxWait+0x84>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	0018      	movs	r0, r3
 8006148:	f7fe ff64 	bl	8005014 <HAL_UART_GetState>
 800614c:	0003      	movs	r3, r0
 800614e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006150:	d00c      	beq.n	800616c <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8006152:	f7fb fb77 	bl	8001844 <HAL_GetTick>
 8006156:	0002      	movs	r2, r0
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d8cf      	bhi.n	8006102 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	0018      	movs	r0, r3
 8006168:	f7fe fb18 	bl	800479c <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800616c:	230f      	movs	r3, #15
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	781b      	ldrb	r3, [r3, #0]
}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b004      	add	sp, #16
 8006178:	bd80      	pop	{r7, pc}

0800617a <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8b1b      	ldrh	r3, [r3, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d027      	beq.n	80061da <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e01b      	b.n	80061c8 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	18d3      	adds	r3, r2, r3
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	0019      	movs	r1, r3
 80061a2:	f000 fb1c 	bl	80067de <strstr>
 80061a6:	0003      	movs	r3, r0
 80061a8:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	0010      	movs	r0, r2
 80061c0:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3de      	bcc.n	8006190 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7ff ff34 	bl	8006042 <ATC_RxFlush>
  }
}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80061ec:	230f      	movs	r3, #15
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8b1b      	ldrh	r3, [r3, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d031      	beq.n	8006260 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80061fc:	230c      	movs	r3, #12
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2200      	movs	r2, #0
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e025      	b.n	8006252 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800620a:	230c      	movs	r3, #12
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	320a      	adds	r2, #10
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	58d3      	ldr	r3, [r2, r3]
 8006218:	0019      	movs	r1, r3
 800621a:	f000 fae0 	bl	80067de <strstr>
 800621e:	0003      	movs	r3, r0
 8006220:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8006234:	230c      	movs	r3, #12
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b2da      	uxtb	r2, r3
 800623c:	230f      	movs	r3, #15
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	3201      	adds	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
        break;
 8006244:	e00c      	b.n	8006260 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8006246:	210c      	movs	r1, #12
 8006248:	187b      	adds	r3, r7, r1
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	187b      	adds	r3, r7, r1
 800624e:	3201      	adds	r2, #1
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8adb      	ldrh	r3, [r3, #22]
 8006256:	220c      	movs	r2, #12
 8006258:	18ba      	adds	r2, r7, r2
 800625a:	8812      	ldrh	r2, [r2, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d3d2      	bcc.n	8006206 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8006260:	230f      	movs	r3, #15
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
}
 8006266:	0018      	movs	r0, r3
 8006268:	46bd      	mov	sp, r7
 800626a:	b004      	add	sp, #16
 800626c:	bd80      	pop	{r7, pc}

0800626e <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	0018      	movs	r0, r3
 800627c:	f7fe fedc 	bl	8005038 <HAL_UART_GetError>
 8006280:	1e03      	subs	r3, r0, #0
 8006282:	d01f      	beq.n	80062c4 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2201      	movs	r2, #1
 800628c:	4252      	negs	r2, r2
 800628e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0018      	movs	r0, r3
 8006296:	f7fe fae7 	bl	8004868 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69d9      	ldr	r1, [r3, #28]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8a9b      	ldrh	r3, [r3, #20]
 80062a6:	001a      	movs	r2, r3
 80062a8:	f7ff fe3b 	bl	8005f22 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2104      	movs	r1, #4
 80062c0:	438a      	bics	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7fe fea3 	bl	8005014 <HAL_UART_GetState>
 80062ce:	0003      	movs	r3, r0
 80062d0:	2b22      	cmp	r3, #34	@ 0x22
 80062d2:	d027      	beq.n	8006324 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	0018      	movs	r0, r3
 80062da:	f7fe fe9b 	bl	8005014 <HAL_UART_GetState>
 80062de:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80062e0:	2b23      	cmp	r3, #35	@ 0x23
 80062e2:	d01f      	beq.n	8006324 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	4252      	negs	r2, r2
 80062ee:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f7fe fab7 	bl	8004868 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69d9      	ldr	r1, [r3, #28]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8a9b      	ldrh	r3, [r3, #20]
 8006306:	001a      	movs	r2, r3
 8006308:	f7ff fe0b 	bl	8005f22 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2104      	movs	r1, #4
 8006320:	438a      	bics	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
  }
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	0018      	movs	r0, r3
 8006338:	f7ff ff99 	bl	800626e <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f7ff ff1b 	bl	800617a <ATC_CheckEvents>
}
 8006344:	46c0      	nop			@ (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b002      	add	sp, #8
 800634a:	bd80      	pop	{r7, pc}

0800634c <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b08c      	sub	sp, #48	@ 0x30
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800635a:	2300      	movs	r3, #0
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	0018      	movs	r0, r3
 8006362:	f7ff fea6 	bl	80060b2 <ATC_TxBusy>
 8006366:	1e03      	subs	r3, r0, #0
 8006368:	d002      	beq.n	8006370 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800636a:	2304      	movs	r3, #4
 800636c:	425b      	negs	r3, r3
 800636e:	e0e3      	b.n	8006538 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8006370:	2344      	movs	r3, #68	@ 0x44
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b05      	cmp	r3, #5
 8006378:	d902      	bls.n	8006380 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 800637a:	2305      	movs	r3, #5
 800637c:	425b      	negs	r3, r3
 800637e:	e0db      	b.n	8006538 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	0018      	movs	r0, r3
 8006384:	f7ff ff73 	bl	800626e <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8006388:	2348      	movs	r3, #72	@ 0x48
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800638e:	2300      	movs	r3, #0
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006392:	e051      	b.n	8006438 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1d1a      	adds	r2, r3, #4
 8006398:	617a      	str	r2, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7f9 feb1 	bl	8000108 <strlen>
 80063a6:	0003      	movs	r3, r0
 80063a8:	3301      	adds	r3, #1
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff fe21 	bl	8005ff2 <ATC_Malloc>
 80063b0:	0001      	movs	r1, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b6:	320a      	adds	r2, #10
 80063b8:	0092      	lsls	r2, r2, #2
 80063ba:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c0:	320a      	adds	r2, #10
 80063c2:	0092      	lsls	r2, r2, #2
 80063c4:	58d3      	ldr	r3, [r2, r3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d11c      	bne.n	8006404 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 80063ca:	2327      	movs	r3, #39	@ 0x27
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e00e      	b.n	80063f2 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80063d4:	2427      	movs	r4, #39	@ 0x27
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	330a      	adds	r3, #10
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7ff fe16 	bl	8006014 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80063e8:	193b      	adds	r3, r7, r4
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	193b      	adds	r3, r7, r4
 80063ee:	3201      	adds	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	2327      	movs	r3, #39	@ 0x27
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063fa:	429a      	cmp	r2, r3
 80063fc:	dcea      	bgt.n	80063d4 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 80063fe:	2303      	movs	r3, #3
 8006400:	425b      	negs	r3, r3
 8006402:	e099      	b.n	8006538 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006408:	320a      	adds	r2, #10
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	58d3      	ldr	r3, [r2, r3]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0011      	movs	r1, r2
 8006412:	0018      	movs	r0, r3
 8006414:	f000 fa38 	bl	8006888 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800641c:	320a      	adds	r2, #10
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	58d4      	ldr	r4, [r2, r3]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	0018      	movs	r0, r3
 8006426:	f7f9 fe6f 	bl	8000108 <strlen>
 800642a:	0003      	movs	r3, r0
 800642c:	18e3      	adds	r3, r4, r3
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	3301      	adds	r3, #1
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006438:	2344      	movs	r3, #68	@ 0x44
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006440:	429a      	cmp	r2, r3
 8006442:	dba7      	blt.n	8006394 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	0018      	movs	r0, r3
 8006448:	f7ff fdfb 	bl	8006042 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	0018      	movs	r0, r3
 8006450:	f7f9 fe5a 	bl	8000108 <strlen>
 8006454:	0003      	movs	r3, r0
 8006456:	b29a      	uxth	r2, r3
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	0018      	movs	r0, r3
 800645e:	f7ff fe03 	bl	8006068 <ATC_TxRaw>
 8006462:	0003      	movs	r3, r0
 8006464:	001a      	movs	r2, r3
 8006466:	2301      	movs	r3, #1
 8006468:	4053      	eors	r3, r2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	425b      	negs	r3, r3
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006476:	e010      	b.n	800649a <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	0011      	movs	r1, r2
 800647e:	0018      	movs	r0, r3
 8006480:	f7ff fe32 	bl	80060e8 <ATC_TxWait>
 8006484:	0003      	movs	r3, r0
 8006486:	001a      	movs	r2, r3
 8006488:	2301      	movs	r3, #1
 800648a:	4053      	eors	r3, r2
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8006492:	2302      	movs	r3, #2
 8006494:	425b      	negs	r3, r3
 8006496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006498:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800649a:	2444      	movs	r4, #68	@ 0x44
 800649c:	193b      	adds	r3, r7, r4
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d029      	beq.n	80064f8 <ATC_SendReceive+0x1ac>
 80064a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d126      	bne.n	80064f8 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 80064aa:	f7fb f9cb 	bl	8001844 <HAL_GetTick>
 80064ae:	0003      	movs	r3, r0
 80064b0:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 80064b2:	193b      	adds	r3, r7, r4
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80064bc:	e014      	b.n	80064e8 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 80064be:	2001      	movs	r0, #1
 80064c0:	f000 f8a6 	bl	8006610 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80064c4:	251f      	movs	r5, #31
 80064c6:	197c      	adds	r4, r7, r5
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	0011      	movs	r1, r2
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7ff fe87 	bl	80061e2 <ATC_CheckResponse>
 80064d4:	0003      	movs	r3, r0
 80064d6:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 80064d8:	197b      	adds	r3, r7, r5
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 80064e0:	197b      	adds	r3, r7, r5
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064e6:	e007      	b.n	80064f8 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 80064e8:	f7fb f9ac 	bl	8001844 <HAL_GetTick>
 80064ec:	0002      	movs	r2, r0
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d8e2      	bhi.n	80064be <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80064fe:	2326      	movs	r3, #38	@ 0x26
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e00e      	b.n	8006526 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8006508:	2426      	movs	r4, #38	@ 0x26
 800650a:	193b      	adds	r3, r7, r4
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	330a      	adds	r3, #10
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	18d3      	adds	r3, r2, r3
 8006516:	0018      	movs	r0, r3
 8006518:	f7ff fd7c 	bl	8006014 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800651c:	193b      	adds	r3, r7, r4
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	193b      	adds	r3, r7, r4
 8006522:	3201      	adds	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	2326      	movs	r3, #38	@ 0x26
 8006528:	18fa      	adds	r2, r7, r3
 800652a:	2344      	movs	r3, #68	@ 0x44
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d3e8      	bcc.n	8006508 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b00c      	add	sp, #48	@ 0x30
 800653e:	bdb0      	pop	{r4, r5, r7, pc}

08006540 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	000a      	movs	r2, r1
 800654a:	1cbb      	adds	r3, r7, #2
 800654c:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800654e:	1cbb      	adds	r3, r7, #2
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8a9b      	ldrh	r3, [r3, #20]
 8006556:	0019      	movs	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8b1b      	ldrh	r3, [r3, #24]
 800655c:	1acb      	subs	r3, r1, r3
 800655e:	429a      	cmp	r2, r3
 8006560:	dd06      	ble.n	8006570 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8a99      	ldrh	r1, [r3, #20]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8b1a      	ldrh	r2, [r3, #24]
 800656a:	1cbb      	adds	r3, r7, #2
 800656c:	1a8a      	subs	r2, r1, r2
 800656e:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	8b12      	ldrh	r2, [r2, #24]
 8006578:	1898      	adds	r0, r3, r2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69d9      	ldr	r1, [r3, #28]
 800657e:	1cbb      	adds	r3, r7, #2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	001a      	movs	r2, r3
 8006584:	f000 f988 	bl	8006898 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8b1a      	ldrh	r2, [r3, #24]
 800658c:	1cbb      	adds	r3, r7, #2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	18d3      	adds	r3, r2, r3
 8006592:	b29a      	uxth	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69d9      	ldr	r1, [r3, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8a9b      	ldrh	r3, [r3, #20]
 80065a4:	001a      	movs	r2, r3
 80065a6:	f7ff fcbc 	bl	8005f22 <HAL_UARTEx_ReceiveToIdle_DMA>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d10c      	bne.n	80065c8 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2104      	movs	r1, #4
 80065c2:	438a      	bics	r2, r1
 80065c4:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80065c6:	e01f      	b.n	8006608 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2201      	movs	r2, #1
 80065d0:	4252      	negs	r2, r2
 80065d2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0018      	movs	r0, r3
 80065da:	f7fe f945 	bl	8004868 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69d9      	ldr	r1, [r3, #28]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8a9b      	ldrh	r3, [r3, #20]
 80065ea:	001a      	movs	r2, r3
 80065ec:	f7ff fc99 	bl	8005f22 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2104      	movs	r1, #4
 8006604:	438a      	bics	r2, r1
 8006606:	601a      	str	r2, [r3, #0]
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}

08006610 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0018      	movs	r0, r3
 800661c:	f7fb f91c 	bl	8001858 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8006620:	46c0      	nop			@ (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <malloc>:
 8006628:	b510      	push	{r4, lr}
 800662a:	4b03      	ldr	r3, [pc, #12]	@ (8006638 <malloc+0x10>)
 800662c:	0001      	movs	r1, r0
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	f000 f830 	bl	8006694 <_malloc_r>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20000010 	.word	0x20000010

0800663c <free>:
 800663c:	b510      	push	{r4, lr}
 800663e:	4b03      	ldr	r3, [pc, #12]	@ (800664c <free+0x10>)
 8006640:	0001      	movs	r1, r0
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	f000 f932 	bl	80068ac <_free_r>
 8006648:	bd10      	pop	{r4, pc}
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	20000010 	.word	0x20000010

08006650 <sbrk_aligned>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4e0f      	ldr	r6, [pc, #60]	@ (8006690 <sbrk_aligned+0x40>)
 8006654:	000d      	movs	r5, r1
 8006656:	6831      	ldr	r1, [r6, #0]
 8006658:	0004      	movs	r4, r0
 800665a:	2900      	cmp	r1, #0
 800665c:	d102      	bne.n	8006664 <sbrk_aligned+0x14>
 800665e:	f000 f8d5 	bl	800680c <_sbrk_r>
 8006662:	6030      	str	r0, [r6, #0]
 8006664:	0029      	movs	r1, r5
 8006666:	0020      	movs	r0, r4
 8006668:	f000 f8d0 	bl	800680c <_sbrk_r>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d103      	bne.n	8006678 <sbrk_aligned+0x28>
 8006670:	2501      	movs	r5, #1
 8006672:	426d      	negs	r5, r5
 8006674:	0028      	movs	r0, r5
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	2303      	movs	r3, #3
 800667a:	1cc5      	adds	r5, r0, #3
 800667c:	439d      	bics	r5, r3
 800667e:	42a8      	cmp	r0, r5
 8006680:	d0f8      	beq.n	8006674 <sbrk_aligned+0x24>
 8006682:	1a29      	subs	r1, r5, r0
 8006684:	0020      	movs	r0, r4
 8006686:	f000 f8c1 	bl	800680c <_sbrk_r>
 800668a:	3001      	adds	r0, #1
 800668c:	d1f2      	bne.n	8006674 <sbrk_aligned+0x24>
 800668e:	e7ef      	b.n	8006670 <sbrk_aligned+0x20>
 8006690:	20000274 	.word	0x20000274

08006694 <_malloc_r>:
 8006694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006696:	2203      	movs	r2, #3
 8006698:	1ccb      	adds	r3, r1, #3
 800669a:	4393      	bics	r3, r2
 800669c:	3308      	adds	r3, #8
 800669e:	0005      	movs	r5, r0
 80066a0:	001f      	movs	r7, r3
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d234      	bcs.n	8006710 <_malloc_r+0x7c>
 80066a6:	270c      	movs	r7, #12
 80066a8:	42b9      	cmp	r1, r7
 80066aa:	d833      	bhi.n	8006714 <_malloc_r+0x80>
 80066ac:	0028      	movs	r0, r5
 80066ae:	f000 f871 	bl	8006794 <__malloc_lock>
 80066b2:	4e37      	ldr	r6, [pc, #220]	@ (8006790 <_malloc_r+0xfc>)
 80066b4:	6833      	ldr	r3, [r6, #0]
 80066b6:	001c      	movs	r4, r3
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	d12f      	bne.n	800671c <_malloc_r+0x88>
 80066bc:	0039      	movs	r1, r7
 80066be:	0028      	movs	r0, r5
 80066c0:	f7ff ffc6 	bl	8006650 <sbrk_aligned>
 80066c4:	0004      	movs	r4, r0
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d15f      	bne.n	800678a <_malloc_r+0xf6>
 80066ca:	6834      	ldr	r4, [r6, #0]
 80066cc:	9400      	str	r4, [sp, #0]
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d14a      	bne.n	800676a <_malloc_r+0xd6>
 80066d4:	2c00      	cmp	r4, #0
 80066d6:	d052      	beq.n	800677e <_malloc_r+0xea>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	0028      	movs	r0, r5
 80066dc:	18e3      	adds	r3, r4, r3
 80066de:	9900      	ldr	r1, [sp, #0]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f000 f893 	bl	800680c <_sbrk_r>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	4283      	cmp	r3, r0
 80066ea:	d148      	bne.n	800677e <_malloc_r+0xea>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	0028      	movs	r0, r5
 80066f0:	1aff      	subs	r7, r7, r3
 80066f2:	0039      	movs	r1, r7
 80066f4:	f7ff ffac 	bl	8006650 <sbrk_aligned>
 80066f8:	3001      	adds	r0, #1
 80066fa:	d040      	beq.n	800677e <_malloc_r+0xea>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	19db      	adds	r3, r3, r7
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	6833      	ldr	r3, [r6, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	2a00      	cmp	r2, #0
 8006708:	d133      	bne.n	8006772 <_malloc_r+0xde>
 800670a:	9b00      	ldr	r3, [sp, #0]
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	e019      	b.n	8006744 <_malloc_r+0xb0>
 8006710:	2b00      	cmp	r3, #0
 8006712:	dac9      	bge.n	80066a8 <_malloc_r+0x14>
 8006714:	230c      	movs	r3, #12
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	2000      	movs	r0, #0
 800671a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	1bc9      	subs	r1, r1, r7
 8006720:	d420      	bmi.n	8006764 <_malloc_r+0xd0>
 8006722:	290b      	cmp	r1, #11
 8006724:	d90a      	bls.n	800673c <_malloc_r+0xa8>
 8006726:	19e2      	adds	r2, r4, r7
 8006728:	6027      	str	r7, [r4, #0]
 800672a:	42a3      	cmp	r3, r4
 800672c:	d104      	bne.n	8006738 <_malloc_r+0xa4>
 800672e:	6032      	str	r2, [r6, #0]
 8006730:	6863      	ldr	r3, [r4, #4]
 8006732:	6011      	str	r1, [r2, #0]
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	e005      	b.n	8006744 <_malloc_r+0xb0>
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e7f9      	b.n	8006730 <_malloc_r+0x9c>
 800673c:	6862      	ldr	r2, [r4, #4]
 800673e:	42a3      	cmp	r3, r4
 8006740:	d10e      	bne.n	8006760 <_malloc_r+0xcc>
 8006742:	6032      	str	r2, [r6, #0]
 8006744:	0028      	movs	r0, r5
 8006746:	f000 f82d 	bl	80067a4 <__malloc_unlock>
 800674a:	0020      	movs	r0, r4
 800674c:	2207      	movs	r2, #7
 800674e:	300b      	adds	r0, #11
 8006750:	1d23      	adds	r3, r4, #4
 8006752:	4390      	bics	r0, r2
 8006754:	1ac2      	subs	r2, r0, r3
 8006756:	4298      	cmp	r0, r3
 8006758:	d0df      	beq.n	800671a <_malloc_r+0x86>
 800675a:	1a1b      	subs	r3, r3, r0
 800675c:	50a3      	str	r3, [r4, r2]
 800675e:	e7dc      	b.n	800671a <_malloc_r+0x86>
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	e7ef      	b.n	8006744 <_malloc_r+0xb0>
 8006764:	0023      	movs	r3, r4
 8006766:	6864      	ldr	r4, [r4, #4]
 8006768:	e7a6      	b.n	80066b8 <_malloc_r+0x24>
 800676a:	9c00      	ldr	r4, [sp, #0]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	e7ad      	b.n	80066ce <_malloc_r+0x3a>
 8006772:	001a      	movs	r2, r3
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	42a3      	cmp	r3, r4
 8006778:	d1fb      	bne.n	8006772 <_malloc_r+0xde>
 800677a:	2300      	movs	r3, #0
 800677c:	e7da      	b.n	8006734 <_malloc_r+0xa0>
 800677e:	230c      	movs	r3, #12
 8006780:	0028      	movs	r0, r5
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f000 f80e 	bl	80067a4 <__malloc_unlock>
 8006788:	e7c6      	b.n	8006718 <_malloc_r+0x84>
 800678a:	6007      	str	r7, [r0, #0]
 800678c:	e7da      	b.n	8006744 <_malloc_r+0xb0>
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	20000278 	.word	0x20000278

08006794 <__malloc_lock>:
 8006794:	b510      	push	{r4, lr}
 8006796:	4802      	ldr	r0, [pc, #8]	@ (80067a0 <__malloc_lock+0xc>)
 8006798:	f000 f874 	bl	8006884 <__retarget_lock_acquire_recursive>
 800679c:	bd10      	pop	{r4, pc}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	200003b8 	.word	0x200003b8

080067a4 <__malloc_unlock>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4802      	ldr	r0, [pc, #8]	@ (80067b0 <__malloc_unlock+0xc>)
 80067a8:	f000 f86d 	bl	8006886 <__retarget_lock_release_recursive>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	200003b8 	.word	0x200003b8

080067b4 <memset>:
 80067b4:	0003      	movs	r3, r0
 80067b6:	1882      	adds	r2, r0, r2
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d100      	bne.n	80067be <memset+0xa>
 80067bc:	4770      	bx	lr
 80067be:	7019      	strb	r1, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	e7f9      	b.n	80067b8 <memset+0x4>

080067c4 <strcat>:
 80067c4:	0002      	movs	r2, r0
 80067c6:	b510      	push	{r4, lr}
 80067c8:	7813      	ldrb	r3, [r2, #0]
 80067ca:	0014      	movs	r4, r2
 80067cc:	3201      	adds	r2, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1fa      	bne.n	80067c8 <strcat+0x4>
 80067d2:	5cca      	ldrb	r2, [r1, r3]
 80067d4:	54e2      	strb	r2, [r4, r3]
 80067d6:	3301      	adds	r3, #1
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1fa      	bne.n	80067d2 <strcat+0xe>
 80067dc:	bd10      	pop	{r4, pc}

080067de <strstr>:
 80067de:	780a      	ldrb	r2, [r1, #0]
 80067e0:	b530      	push	{r4, r5, lr}
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d10c      	bne.n	8006800 <strstr+0x22>
 80067e6:	bd30      	pop	{r4, r5, pc}
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d108      	bne.n	80067fe <strstr+0x20>
 80067ec:	2301      	movs	r3, #1
 80067ee:	5ccc      	ldrb	r4, [r1, r3]
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d0f8      	beq.n	80067e6 <strstr+0x8>
 80067f4:	5cc5      	ldrb	r5, [r0, r3]
 80067f6:	42a5      	cmp	r5, r4
 80067f8:	d101      	bne.n	80067fe <strstr+0x20>
 80067fa:	3301      	adds	r3, #1
 80067fc:	e7f7      	b.n	80067ee <strstr+0x10>
 80067fe:	3001      	adds	r0, #1
 8006800:	7803      	ldrb	r3, [r0, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <strstr+0xa>
 8006806:	0018      	movs	r0, r3
 8006808:	e7ed      	b.n	80067e6 <strstr+0x8>
	...

0800680c <_sbrk_r>:
 800680c:	2300      	movs	r3, #0
 800680e:	b570      	push	{r4, r5, r6, lr}
 8006810:	4d06      	ldr	r5, [pc, #24]	@ (800682c <_sbrk_r+0x20>)
 8006812:	0004      	movs	r4, r0
 8006814:	0008      	movs	r0, r1
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	f7fa faa4 	bl	8000d64 <_sbrk>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d103      	bne.n	8006828 <_sbrk_r+0x1c>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d000      	beq.n	8006828 <_sbrk_r+0x1c>
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	bd70      	pop	{r4, r5, r6, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	200003b4 	.word	0x200003b4

08006830 <__errno>:
 8006830:	4b01      	ldr	r3, [pc, #4]	@ (8006838 <__errno+0x8>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	4770      	bx	lr
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	20000010 	.word	0x20000010

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	2600      	movs	r6, #0
 8006840:	4c0c      	ldr	r4, [pc, #48]	@ (8006874 <__libc_init_array+0x38>)
 8006842:	4d0d      	ldr	r5, [pc, #52]	@ (8006878 <__libc_init_array+0x3c>)
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	2600      	movs	r6, #0
 800684e:	f000 f877 	bl	8006940 <_init>
 8006852:	4c0a      	ldr	r4, [pc, #40]	@ (800687c <__libc_init_array+0x40>)
 8006854:	4d0a      	ldr	r5, [pc, #40]	@ (8006880 <__libc_init_array+0x44>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	00b3      	lsls	r3, r6, #2
 8006862:	58eb      	ldr	r3, [r5, r3]
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	00b3      	lsls	r3, r6, #2
 800686c:	58eb      	ldr	r3, [r5, r3]
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	08006c68 	.word	0x08006c68
 8006878:	08006c68 	.word	0x08006c68
 800687c:	08006c6c 	.word	0x08006c6c
 8006880:	08006c68 	.word	0x08006c68

08006884 <__retarget_lock_acquire_recursive>:
 8006884:	4770      	bx	lr

08006886 <__retarget_lock_release_recursive>:
 8006886:	4770      	bx	lr

08006888 <strcpy>:
 8006888:	0003      	movs	r3, r0
 800688a:	780a      	ldrb	r2, [r1, #0]
 800688c:	3101      	adds	r1, #1
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	2a00      	cmp	r2, #0
 8006894:	d1f9      	bne.n	800688a <strcpy+0x2>
 8006896:	4770      	bx	lr

08006898 <memcpy>:
 8006898:	2300      	movs	r3, #0
 800689a:	b510      	push	{r4, lr}
 800689c:	429a      	cmp	r2, r3
 800689e:	d100      	bne.n	80068a2 <memcpy+0xa>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	5ccc      	ldrb	r4, [r1, r3]
 80068a4:	54c4      	strb	r4, [r0, r3]
 80068a6:	3301      	adds	r3, #1
 80068a8:	e7f8      	b.n	800689c <memcpy+0x4>
	...

080068ac <_free_r>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	0005      	movs	r5, r0
 80068b0:	1e0c      	subs	r4, r1, #0
 80068b2:	d010      	beq.n	80068d6 <_free_r+0x2a>
 80068b4:	3c04      	subs	r4, #4
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da00      	bge.n	80068be <_free_r+0x12>
 80068bc:	18e4      	adds	r4, r4, r3
 80068be:	0028      	movs	r0, r5
 80068c0:	f7ff ff68 	bl	8006794 <__malloc_lock>
 80068c4:	4a1d      	ldr	r2, [pc, #116]	@ (800693c <_free_r+0x90>)
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <_free_r+0x2c>
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	6014      	str	r4, [r2, #0]
 80068d0:	0028      	movs	r0, r5
 80068d2:	f7ff ff67 	bl	80067a4 <__malloc_unlock>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d908      	bls.n	80068ee <_free_r+0x42>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	1821      	adds	r1, r4, r0
 80068e0:	428b      	cmp	r3, r1
 80068e2:	d1f3      	bne.n	80068cc <_free_r+0x20>
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	1809      	adds	r1, r1, r0
 80068ea:	6021      	str	r1, [r4, #0]
 80068ec:	e7ee      	b.n	80068cc <_free_r+0x20>
 80068ee:	001a      	movs	r2, r3
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <_free_r+0x4e>
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	d9f9      	bls.n	80068ee <_free_r+0x42>
 80068fa:	6811      	ldr	r1, [r2, #0]
 80068fc:	1850      	adds	r0, r2, r1
 80068fe:	42a0      	cmp	r0, r4
 8006900:	d10b      	bne.n	800691a <_free_r+0x6e>
 8006902:	6820      	ldr	r0, [r4, #0]
 8006904:	1809      	adds	r1, r1, r0
 8006906:	1850      	adds	r0, r2, r1
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	4283      	cmp	r3, r0
 800690c:	d1e0      	bne.n	80068d0 <_free_r+0x24>
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	1841      	adds	r1, r0, r1
 8006914:	6011      	str	r1, [r2, #0]
 8006916:	6053      	str	r3, [r2, #4]
 8006918:	e7da      	b.n	80068d0 <_free_r+0x24>
 800691a:	42a0      	cmp	r0, r4
 800691c:	d902      	bls.n	8006924 <_free_r+0x78>
 800691e:	230c      	movs	r3, #12
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	e7d5      	b.n	80068d0 <_free_r+0x24>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	1821      	adds	r1, r4, r0
 8006928:	428b      	cmp	r3, r1
 800692a:	d103      	bne.n	8006934 <_free_r+0x88>
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	1809      	adds	r1, r1, r0
 8006932:	6021      	str	r1, [r4, #0]
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	6054      	str	r4, [r2, #4]
 8006938:	e7ca      	b.n	80068d0 <_free_r+0x24>
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	20000278 	.word	0x20000278

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
