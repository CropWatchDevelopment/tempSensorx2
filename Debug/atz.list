
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005844  08005844  00006844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800584c  0800584c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005854  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000005c  080058b0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000398  080058b0  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011323  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f05  00000000  00000000  000183a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba0  00000000  00000000  0001c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a23  00000000  00000000  0001cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147d5  00000000  00000000  0003378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008657e  00000000  00000000  00047f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce4de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003838  00000000  00000000  000ce524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d1d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005770 	.word	0x08005770

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005770 	.word	0x08005770

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f000 ff66 	bl	8001350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 ff78 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f005 f895 	bl	80055d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_GPIO_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fb23 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2220      	movs	r2, #32
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 f995 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2220      	movs	r2, #32
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <MX_GPIO_Init+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 f982 	bl	800184c <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	@ 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800055e:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <MX_I2C1_Init+0x7c>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000564:	22c1      	movs	r2, #193	@ 0xc1
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056a:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000572:	2201      	movs	r2, #1
 8000574:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 faf4 	bl	8001b84 <HAL_I2C_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 fba8 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fb91 	bl	8001cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005b2:	f000 fb9f 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fbd4 	bl	8001d68 <HAL_I2CEx_ConfigDigitalFilter>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005c4:	f000 fb96 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	20000078 	.word	0x20000078
 80005d4:	40005400 	.word	0x40005400

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 fff4 	bl	80055d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	@ 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 f907 	bl	800184c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	@ 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	50000400 	.word	0x50000400

08000660 <enter_low_power_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void enter_low_power_mode(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b09f      	sub	sp, #124	@ 0x7c
 8000664:	af00      	add	r7, sp, #0
    // Handle specific pins BEFORE configuring all pins as analog
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	2464      	movs	r4, #100	@ 0x64
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f004 ffb1 	bl	80055d8 <memset>
    
    // Ensure GPIOB clock is enabled for configuration
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4bbc      	ldr	r3, [pc, #752]	@ (8000968 <enter_low_power_mode+0x308>)
 8000678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800067a:	4bbb      	ldr	r3, [pc, #748]	@ (8000968 <enter_low_power_mode+0x308>)
 800067c:	2102      	movs	r1, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000682:	4bb9      	ldr	r3, [pc, #740]	@ (8000968 <enter_low_power_mode+0x308>)
 8000684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000686:	2202      	movs	r2, #2
 8000688:	4013      	ands	r3, r2
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
    
    // Configure I2C pins (PB6, PB7) as GPIO output low to avoid current through pull-ups
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	22c0      	movs	r2, #192	@ 0xc0
 8000692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	4ab0      	ldr	r2, [pc, #704]	@ (800096c <enter_low_power_mode+0x30c>)
 80006aa:	0019      	movs	r1, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	f001 f8cd 	bl	800184c <HAL_GPIO_Init>
    
    // Configure PB5 as GPIO output low for sleep mode
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2220      	movs	r2, #32
 80006b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2201      	movs	r2, #1
 80006bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	4aa7      	ldr	r2, [pc, #668]	@ (800096c <enter_low_power_mode+0x30c>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f001 f8bb 	bl	800184c <HAL_GPIO_Init>
    
    // Set I2C pins and PB5 LOW to prevent current flow
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80006d6:	4ba5      	ldr	r3, [pc, #660]	@ (800096c <enter_low_power_mode+0x30c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	21e0      	movs	r1, #224	@ 0xe0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fa33 	bl	8001b48 <HAL_GPIO_WritePin>
    
    // Small delay to ensure pins are stable
    HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fd64 	bl	80011b0 <HAL_Delay>
    
    // Now configure all other GPIO pins as analog
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4aa1      	ldr	r2, [pc, #644]	@ (8000970 <enter_low_power_mode+0x310>)
 80006ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2203      	movs	r2, #3
 80006f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
    
    // Configure ALL GPIO ports as analog
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b9b      	ldr	r3, [pc, #620]	@ (8000968 <enter_low_power_mode+0x308>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fe:	4b9a      	ldr	r3, [pc, #616]	@ (8000968 <enter_low_power_mode+0x308>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000706:	4b98      	ldr	r3, [pc, #608]	@ (8000968 <enter_low_power_mode+0x308>)
 8000708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	193a      	adds	r2, r7, r4
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f001 f896 	bl	800184c <HAL_GPIO_Init>
    __HAL_RCC_GPIOA_CLK_DISABLE();
 8000720:	4b91      	ldr	r3, [pc, #580]	@ (8000968 <enter_low_power_mode+0x308>)
 8000722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000724:	4b90      	ldr	r3, [pc, #576]	@ (8000968 <enter_low_power_mode+0x308>)
 8000726:	2101      	movs	r1, #1
 8000728:	438a      	bics	r2, r1
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // For GPIOB, exclude I2C pins (PB6, PB7) and PB5 from analog configuration
    GPIO_InitStruct.Pin = GPIO_PIN_All & ~(GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 800072c:	193b      	adds	r3, r7, r4
 800072e:	4a91      	ldr	r2, [pc, #580]	@ (8000974 <enter_low_power_mode+0x314>)
 8000730:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	193b      	adds	r3, r7, r4
 8000734:	4a8d      	ldr	r2, [pc, #564]	@ (800096c <enter_low_power_mode+0x30c>)
 8000736:	0019      	movs	r1, r3
 8000738:	0010      	movs	r0, r2
 800073a:	f001 f887 	bl	800184c <HAL_GPIO_Init>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 800073e:	4b8a      	ldr	r3, [pc, #552]	@ (8000968 <enter_low_power_mode+0x308>)
 8000740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000742:	4b89      	ldr	r3, [pc, #548]	@ (8000968 <enter_low_power_mode+0x308>)
 8000744:	2102      	movs	r1, #2
 8000746:	438a      	bics	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b87      	ldr	r3, [pc, #540]	@ (8000968 <enter_low_power_mode+0x308>)
 800074c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800074e:	4b86      	ldr	r3, [pc, #536]	@ (8000968 <enter_low_power_mode+0x308>)
 8000750:	2104      	movs	r1, #4
 8000752:	430a      	orrs	r2, r1
 8000754:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000756:	4b84      	ldr	r3, [pc, #528]	@ (8000968 <enter_low_power_mode+0x308>)
 8000758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075a:	2204      	movs	r2, #4
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	193b      	adds	r3, r7, r4
 8000764:	4a84      	ldr	r2, [pc, #528]	@ (8000978 <enter_low_power_mode+0x318>)
 8000766:	0019      	movs	r1, r3
 8000768:	0010      	movs	r0, r2
 800076a:	f001 f86f 	bl	800184c <HAL_GPIO_Init>
    __HAL_RCC_GPIOC_CLK_DISABLE();
 800076e:	4b7e      	ldr	r3, [pc, #504]	@ (8000968 <enter_low_power_mode+0x308>)
 8000770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000772:	4b7d      	ldr	r3, [pc, #500]	@ (8000968 <enter_low_power_mode+0x308>)
 8000774:	2104      	movs	r1, #4
 8000776:	438a      	bics	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b7b      	ldr	r3, [pc, #492]	@ (8000968 <enter_low_power_mode+0x308>)
 800077c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800077e:	4b7a      	ldr	r3, [pc, #488]	@ (8000968 <enter_low_power_mode+0x308>)
 8000780:	2108      	movs	r1, #8
 8000782:	430a      	orrs	r2, r1
 8000784:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000786:	4b78      	ldr	r3, [pc, #480]	@ (8000968 <enter_low_power_mode+0x308>)
 8000788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078a:	2208      	movs	r2, #8
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a76      	ldr	r2, [pc, #472]	@ (8000970 <enter_low_power_mode+0x310>)
 8000796:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000798:	193b      	adds	r3, r7, r4
 800079a:	4a78      	ldr	r2, [pc, #480]	@ (800097c <enter_low_power_mode+0x31c>)
 800079c:	0019      	movs	r1, r3
 800079e:	0010      	movs	r0, r2
 80007a0:	f001 f854 	bl	800184c <HAL_GPIO_Init>
    __HAL_RCC_GPIOD_CLK_DISABLE();
 80007a4:	4b70      	ldr	r3, [pc, #448]	@ (8000968 <enter_low_power_mode+0x308>)
 80007a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000968 <enter_low_power_mode+0x308>)
 80007aa:	2108      	movs	r1, #8
 80007ac:	438a      	bics	r2, r1
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b0:	4b6d      	ldr	r3, [pc, #436]	@ (8000968 <enter_low_power_mode+0x308>)
 80007b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007b4:	4b6c      	ldr	r3, [pc, #432]	@ (8000968 <enter_low_power_mode+0x308>)
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	430a      	orrs	r2, r1
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007bc:	4b6a      	ldr	r3, [pc, #424]	@ (8000968 <enter_low_power_mode+0x308>)
 80007be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	4013      	ands	r3, r2
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	4a6d      	ldr	r2, [pc, #436]	@ (8000980 <enter_low_power_mode+0x320>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f001 f83c 	bl	800184c <HAL_GPIO_Init>
    __HAL_RCC_GPIOH_CLK_DISABLE();
 80007d4:	4b64      	ldr	r3, [pc, #400]	@ (8000968 <enter_low_power_mode+0x308>)
 80007d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007d8:	4b63      	ldr	r3, [pc, #396]	@ (8000968 <enter_low_power_mode+0x308>)
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	438a      	bics	r2, r1
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Disable peripheral clocks that exist on STM32L073
    __HAL_RCC_I2C1_CLK_DISABLE();
 80007e0:	4b61      	ldr	r3, [pc, #388]	@ (8000968 <enter_low_power_mode+0x308>)
 80007e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007e4:	4b60      	ldr	r3, [pc, #384]	@ (8000968 <enter_low_power_mode+0x308>)
 80007e6:	4967      	ldr	r1, [pc, #412]	@ (8000984 <enter_low_power_mode+0x324>)
 80007e8:	400a      	ands	r2, r1
 80007ea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80007ec:	4b5e      	ldr	r3, [pc, #376]	@ (8000968 <enter_low_power_mode+0x308>)
 80007ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000968 <enter_low_power_mode+0x308>)
 80007f2:	4965      	ldr	r1, [pc, #404]	@ (8000988 <enter_low_power_mode+0x328>)
 80007f4:	400a      	ands	r2, r1
 80007f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_DISABLE();
 80007f8:	4b5b      	ldr	r3, [pc, #364]	@ (8000968 <enter_low_power_mode+0x308>)
 80007fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000968 <enter_low_power_mode+0x308>)
 80007fe:	2101      	movs	r1, #1
 8000800:	438a      	bics	r2, r1
 8000802:	631a      	str	r2, [r3, #48]	@ 0x30
    // Note: DMA2 doesn't exist on STM32L073, removed
    
    // Disable ADC
    __HAL_RCC_ADC1_CLK_DISABLE();
 8000804:	4b58      	ldr	r3, [pc, #352]	@ (8000968 <enter_low_power_mode+0x308>)
 8000806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000808:	4b57      	ldr	r3, [pc, #348]	@ (8000968 <enter_low_power_mode+0x308>)
 800080a:	4960      	ldr	r1, [pc, #384]	@ (800098c <enter_low_power_mode+0x32c>)
 800080c:	400a      	ands	r2, r1
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Disable TIM clocks that exist on STM32L073
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000810:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <enter_low_power_mode+0x308>)
 8000812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000814:	4b54      	ldr	r3, [pc, #336]	@ (8000968 <enter_low_power_mode+0x308>)
 8000816:	2101      	movs	r1, #1
 8000818:	438a      	bics	r2, r1
 800081a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_DISABLE();
 800081c:	4b52      	ldr	r3, [pc, #328]	@ (8000968 <enter_low_power_mode+0x308>)
 800081e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000820:	4b51      	ldr	r3, [pc, #324]	@ (8000968 <enter_low_power_mode+0x308>)
 8000822:	2102      	movs	r1, #2
 8000824:	438a      	bics	r2, r1
 8000826:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM6_CLK_DISABLE();
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <enter_low_power_mode+0x308>)
 800082a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800082c:	4b4e      	ldr	r3, [pc, #312]	@ (8000968 <enter_low_power_mode+0x308>)
 800082e:	2110      	movs	r1, #16
 8000830:	438a      	bics	r2, r1
 8000832:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM7_CLK_DISABLE();
 8000834:	4b4c      	ldr	r3, [pc, #304]	@ (8000968 <enter_low_power_mode+0x308>)
 8000836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000838:	4b4b      	ldr	r3, [pc, #300]	@ (8000968 <enter_low_power_mode+0x308>)
 800083a:	2120      	movs	r1, #32
 800083c:	438a      	bics	r2, r1
 800083e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM21_CLK_DISABLE();
 8000840:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <enter_low_power_mode+0x308>)
 8000842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000844:	4b48      	ldr	r3, [pc, #288]	@ (8000968 <enter_low_power_mode+0x308>)
 8000846:	2104      	movs	r1, #4
 8000848:	438a      	bics	r2, r1
 800084a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_TIM22_CLK_DISABLE();
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <enter_low_power_mode+0x308>)
 800084e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000850:	4b45      	ldr	r3, [pc, #276]	@ (8000968 <enter_low_power_mode+0x308>)
 8000852:	2120      	movs	r1, #32
 8000854:	438a      	bics	r2, r1
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Disable communication peripherals that exist on STM32L073
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000858:	4b43      	ldr	r3, [pc, #268]	@ (8000968 <enter_low_power_mode+0x308>)
 800085a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085c:	4b42      	ldr	r3, [pc, #264]	@ (8000968 <enter_low_power_mode+0x308>)
 800085e:	494c      	ldr	r1, [pc, #304]	@ (8000990 <enter_low_power_mode+0x330>)
 8000860:	400a      	ands	r2, r1
 8000862:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000864:	4b40      	ldr	r3, [pc, #256]	@ (8000968 <enter_low_power_mode+0x308>)
 8000866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000868:	4b3f      	ldr	r3, [pc, #252]	@ (8000968 <enter_low_power_mode+0x308>)
 800086a:	494a      	ldr	r1, [pc, #296]	@ (8000994 <enter_low_power_mode+0x334>)
 800086c:	400a      	ands	r2, r1
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CLK_DISABLE();
 8000870:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <enter_low_power_mode+0x308>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000874:	4b3c      	ldr	r3, [pc, #240]	@ (8000968 <enter_low_power_mode+0x308>)
 8000876:	4947      	ldr	r1, [pc, #284]	@ (8000994 <enter_low_power_mode+0x334>)
 8000878:	400a      	ands	r2, r1
 800087a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_USART2_CLK_DISABLE();
 800087c:	4b3a      	ldr	r3, [pc, #232]	@ (8000968 <enter_low_power_mode+0x308>)
 800087e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <enter_low_power_mode+0x308>)
 8000882:	4945      	ldr	r1, [pc, #276]	@ (8000998 <enter_low_power_mode+0x338>)
 8000884:	400a      	ands	r2, r1
 8000886:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART4_CLK_DISABLE();
 8000888:	4b37      	ldr	r3, [pc, #220]	@ (8000968 <enter_low_power_mode+0x308>)
 800088a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800088c:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <enter_low_power_mode+0x308>)
 800088e:	4943      	ldr	r1, [pc, #268]	@ (800099c <enter_low_power_mode+0x33c>)
 8000890:	400a      	ands	r2, r1
 8000892:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART5_CLK_DISABLE();
 8000894:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <enter_low_power_mode+0x308>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000898:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <enter_low_power_mode+0x308>)
 800089a:	4941      	ldr	r1, [pc, #260]	@ (80009a0 <enter_low_power_mode+0x340>)
 800089c:	400a      	ands	r2, r1
 800089e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    // Disable other peripherals that exist on STM32L073
    __HAL_RCC_USB_CLK_DISABLE();
 80008a0:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <enter_low_power_mode+0x308>)
 80008a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008a4:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <enter_low_power_mode+0x308>)
 80008a6:	493f      	ldr	r1, [pc, #252]	@ (80009a4 <enter_low_power_mode+0x344>)
 80008a8:	400a      	ands	r2, r1
 80008aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_CRC_CLK_DISABLE();
 80008ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <enter_low_power_mode+0x308>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <enter_low_power_mode+0x308>)
 80008b2:	4937      	ldr	r1, [pc, #220]	@ (8000990 <enter_low_power_mode+0x330>)
 80008b4:	400a      	ands	r2, r1
 80008b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_TSC_CLK_DISABLE();
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <enter_low_power_mode+0x308>)
 80008ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <enter_low_power_mode+0x308>)
 80008be:	493a      	ldr	r1, [pc, #232]	@ (80009a8 <enter_low_power_mode+0x348>)
 80008c0:	400a      	ands	r2, r1
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_RNG_CLK_DISABLE();
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <enter_low_power_mode+0x308>)
 80008c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <enter_low_power_mode+0x308>)
 80008ca:	4935      	ldr	r1, [pc, #212]	@ (80009a0 <enter_low_power_mode+0x340>)
 80008cc:	400a      	ands	r2, r1
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
    // Note: AES doesn't exist on STM32L073, removed
    
    // Disable SYSCFG (but keep RTC enabled!)
    __HAL_RCC_SYSCFG_CLK_DISABLE();
 80008d0:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <enter_low_power_mode+0x308>)
 80008d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <enter_low_power_mode+0x308>)
 80008d6:	2101      	movs	r1, #1
 80008d8:	438a      	bics	r2, r1
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Configure the system for lowest power consumption
    // Switch to MSI at lowest frequency (65.536 kHz)
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008dc:	242c      	movs	r4, #44	@ 0x2c
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2338      	movs	r3, #56	@ 0x38
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f004 fe76 	bl	80055d8 <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2210      	movs	r2, #16
 80008f2:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0; // 65.536 kHz
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2201      	movs	r2, #1
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800090c:	187b      	adds	r3, r7, r1
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fad2 	bl	8001eb8 <HAL_RCC_OscConfig>
    
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	2418      	movs	r4, #24
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f004 fe5a 	bl	80055d8 <memset>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	0021      	movs	r1, r4
 8000926:	187b      	adds	r3, r7, r1
 8000928:	220f      	movs	r2, #15
 800092a:	601a      	str	r2, [r3, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2100      	movs	r1, #0
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fe89 	bl	8002660 <HAL_RCC_ClockConfig>
    
    // Enter Stop Mode (deepest sleep while keeping RTC)
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800094e:	2101      	movs	r1, #1
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fa55 	bl	8001e00 <HAL_PWR_EnterSTOPMode>
    
    // When we wake up, execution continues here
    // We need to restore the system clock
    SystemClock_Config();
 8000956:	f000 f927 	bl	8000ba8 <SystemClock_Config>
    exit_low_power_mode();
 800095a:	f000 f827 	bl	80009ac <exit_low_power_mode>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b01f      	add	sp, #124	@ 0x7c
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	40021000 	.word	0x40021000
 800096c:	50000400 	.word	0x50000400
 8000970:	0000ffff 	.word	0x0000ffff
 8000974:	0000ff1f 	.word	0x0000ff1f
 8000978:	50000800 	.word	0x50000800
 800097c:	50000c00 	.word	0x50000c00
 8000980:	50001c00 	.word	0x50001c00
 8000984:	ffdfffff 	.word	0xffdfffff
 8000988:	fffbffff 	.word	0xfffbffff
 800098c:	fffffdff 	.word	0xfffffdff
 8000990:	ffffefff 	.word	0xffffefff
 8000994:	ffffbfff 	.word	0xffffbfff
 8000998:	fffdffff 	.word	0xfffdffff
 800099c:	fff7ffff 	.word	0xfff7ffff
 80009a0:	ffefffff 	.word	0xffefffff
 80009a4:	ff7fffff 	.word	0xff7fffff
 80009a8:	fffeffff 	.word	0xfffeffff

080009ac <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009d0:	2102      	movs	r1, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009da:	2202      	movs	r2, #2
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <exit_low_power_mode+0x98>)
 80009fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	0389      	lsls	r1, r1, #14
 8000a04:	430a      	orrs	r2, r1
 8000a06:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	02c9      	lsls	r1, r1, #11
 8000a12:	430a      	orrs	r2, r1
 8000a14:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <exit_low_power_mode+0x98>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs (this will restore PB5 to its normal configuration)
    MX_GPIO_Init();
 8000a2e:	f7ff fd33 	bl	8000498 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000a32:	f000 fa4f 	bl	8000ed4 <MX_LPUART1_UART_Init>
    MX_DMA_Init();
 8000a36:	f7ff fd11 	bl	800045c <MX_DMA_Init>
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	40021000 	.word	0x40021000

08000a48 <cb_WAKE>:


void cb_WAKE(const char* str)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  __NOP();
 8000a50:	46c0      	nop			@ (mov r8, r8)
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <cb_OK>:
void cb_OK(const char* str)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  __NOP();
 8000a62:	46c0      	nop			@ (mov r8, r8)
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <cb_JOIN>:
void cb_JOIN(const char* str)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	switch (str[7]) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3307      	adds	r3, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b46      	cmp	r3, #70	@ 0x46
 8000a7c:	d005      	beq.n	8000a8a <cb_JOIN+0x1e>
 8000a7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a80:	d107      	bne.n	8000a92 <cb_JOIN+0x26>
		case 'O':
			joined = true;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <cb_JOIN+0x3c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
			break;
 8000a88:	e004      	b.n	8000a94 <cb_JOIN+0x28>
		case 'F':
			joined = false;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <cb_JOIN+0x3c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
			break;
 8000a90:	e000      	b.n	8000a94 <cb_JOIN+0x28>
		default:
			__NOP();
 8000a92:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_Delay(500);
 8000a94:	23fa      	movs	r3, #250	@ 0xfa
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fb89 	bl	80011b0 <HAL_Delay>
}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	20000108 	.word	0x20000108

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fb0d 	bl	80010d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f877 	bl	8000ba8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff fced 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 8000abe:	f7ff fccd 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 8000ac2:	f7ff fd49 	bl	8000558 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000ac6:	f000 fa05 	bl	8000ed4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000aca:	f000 f919 	bl	8000d00 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 8000ace:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <main+0xd4>)
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	492b      	ldr	r1, [pc, #172]	@ (8000b84 <main+0xd8>)
 8000ad6:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <main+0xdc>)
 8000ad8:	f004 fa4a 	bl	8004f70 <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000adc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <main+0xe0>)
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <main+0xdc>)
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f004 fafb 	bl	80050de <ATC_SetEvents>
  HAL_Delay(10000);
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <main+0xe4>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fb60 	bl	80011b0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int resp = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  char* ATSEND_Result = NULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  uint32_t last_command_time = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]

  enter_low_power_mode();
 8000afc:	f7ff fdb0 	bl	8000660 <enter_low_power_mode>

  while(1)
  {
      ATC_Loop(&lora);
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <main+0xdc>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f004 fb23 	bl	800514e <ATC_Loop>
      
      // Send AT+JOIN every 10 seconds if not successful
      if (HAL_GetTick() - last_command_time > 10000 && !joined)
 8000b08:	f000 fb48 	bl	800119c <HAL_GetTick>
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <main+0xe4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d92b      	bls.n	8000b70 <main+0xc4>
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <main+0xe8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4053      	eors	r3, r2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d024      	beq.n	8000b70 <main+0xc4>
      {
    	  resp = ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000b26:	1d3c      	adds	r4, r7, #4
 8000b28:	23fa      	movs	r3, #250	@ 0xfa
 8000b2a:	009a      	lsls	r2, r3, #2
 8000b2c:	491a      	ldr	r1, [pc, #104]	@ (8000b98 <main+0xec>)
 8000b2e:	4816      	ldr	r0, [pc, #88]	@ (8000b88 <main+0xdc>)
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <main+0xf0>)
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <main+0xf4>)
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	0023      	movs	r3, r4
 8000b3e:	f004 fb16 	bl	800516e <ATC_SendReceive>
 8000b42:	0003      	movs	r3, r0
 8000b44:	60bb      	str	r3, [r7, #8]
          resp = ATC_SendReceive(&lora, "AT+JOIN\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000b46:	1d3c      	adds	r4, r7, #4
 8000b48:	23fa      	movs	r3, #250	@ 0xfa
 8000b4a:	009a      	lsls	r2, r3, #2
 8000b4c:	4915      	ldr	r1, [pc, #84]	@ (8000ba4 <main+0xf8>)
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <main+0xdc>)
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <main+0xf0>)
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2301      	movs	r3, #1
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <main+0xf4>)
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	0023      	movs	r3, r4
 8000b5e:	f004 fb06 	bl	800516e <ATC_SendReceive>
 8000b62:	0003      	movs	r3, r0
 8000b64:	60bb      	str	r3, [r7, #8]
          last_command_time = HAL_GetTick();
 8000b66:	f000 fb19 	bl	800119c <HAL_GetTick>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	60fb      	str	r3, [r7, #12]
          
          // Add breakpoint here to check resp value
          __NOP();
 8000b6e:	46c0      	nop			@ (mov r8, r8)
      }
      if (joined)
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <main+0xe8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0c3      	beq.n	8000b00 <main+0x54>
      {
    	  enter_low_power_mode();
 8000b78:	f7ff fd72 	bl	8000660 <enter_low_power_mode>
      ATC_Loop(&lora);
 8000b7c:	e7c0      	b.n	8000b00 <main+0x54>
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	0800579c 	.word	0x0800579c
 8000b84:	20000134 	.word	0x20000134
 8000b88:	200000cc 	.word	0x200000cc
 8000b8c:	080057b8 	.word	0x080057b8
 8000b90:	00002710 	.word	0x00002710
 8000b94:	20000108 	.word	0x20000108
 8000b98:	080057a4 	.word	0x080057a4
 8000b9c:	08005790 	.word	0x08005790
 8000ba0:	00000bb8 	.word	0x00000bb8
 8000ba4:	080057ac 	.word	0x080057ac

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b09f      	sub	sp, #124	@ 0x7c
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	2440      	movs	r4, #64	@ 0x40
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2338      	movs	r3, #56	@ 0x38
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f004 fd0d 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbe:	232c      	movs	r3, #44	@ 0x2c
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f004 fd05 	bl	80055d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2328      	movs	r3, #40	@ 0x28
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f004 fcfe 	bl	80055d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <SystemClock_Config+0xe4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c90 <SystemClock_Config+0xe8>)
 8000be2:	401a      	ands	r2, r3
 8000be4:	4b29      	ldr	r3, [pc, #164]	@ (8000c8c <SystemClock_Config+0xe4>)
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	0109      	lsls	r1, r1, #4
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000bee:	0021      	movs	r1, r4
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2218      	movs	r2, #24
 8000bf4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	22a0      	movs	r2, #160	@ 0xa0
 8000c0c:	0212      	lsls	r2, r2, #8
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 f94d 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c22:	f000 f867 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	212c      	movs	r1, #44	@ 0x2c
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2100      	movs	r1, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fd08 	bl	8002660 <HAL_RCC_ClockConfig>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c54:	f000 f84e 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	222c      	movs	r2, #44	@ 0x2c
 8000c5c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	0292      	lsls	r2, r2, #10
 8000c70:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fef7 	bl	8002a68 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c7e:	f000 f839 	bl	8000cf4 <Error_Handler>
  }
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b01f      	add	sp, #124	@ 0x7c
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	ffffe7ff 	.word	0xffffe7ff

08000c94 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	1cbb      	adds	r3, r7, #2
 8000ca0:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_UARTEx_RxEventCallback+0x30>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d106      	bne.n	8000cba <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 8000cac:	1cbb      	adds	r3, r7, #2
 8000cae:	881a      	ldrh	r2, [r3, #0]
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_UARTEx_RxEventCallback+0x34>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 fb54 	bl	8005362 <ATC_IdleLineCallback>
  }
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	200000cc 	.word	0x200000cc

08000ccc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <HAL_UART_ErrorCallback+0x24>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d104      	bne.n	8000ce8 <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	621a      	str	r2, [r3, #32]
  }
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <MX_RTC_Init+0x64>)
 8000d08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d12:	227f      	movs	r2, #127	@ 0x7f
 8000d14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d18:	22ff      	movs	r2, #255	@ 0xff
 8000d1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 f834 	bl	8002da4 <HAL_RTC_Init>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d40:	f7ff ffd8 	bl	8000cf4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d44:	4908      	ldr	r1, [pc, #32]	@ (8000d68 <MX_RTC_Init+0x68>)
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_RTC_Init+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f002 f95c 	bl	8003008 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff ffce 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	2000010c 	.word	0x2000010c
 8000d64:	40002800 	.word	0x40002800
 8000d68:	0000500b 	.word	0x0000500b

08000d6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_RTC_MspInit+0x38>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10e      	bne.n	8000d9c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_RTC_MspInit+0x3c>)
 8000d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_RTC_MspInit+0x3c>)
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	02c9      	lsls	r1, r1, #11
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 fadd 	bl	8001350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f000 faef 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40002800 	.word	0x40002800
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_MspInit+0x24>)
 8000db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x24>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <HAL_MspInit+0x24>)
 8000dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_MspInit+0x24>)
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0549      	lsls	r1, r1, #21
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f9bc 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <RTC_IRQHandler+0x14>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f002 f9d2 	bl	80031b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	2000010c 	.word	0x2000010c

08000e20 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fc29 	bl	800167e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fc25 	bl	800167e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	20000204 	.word	0x20000204
 8000e40:	200001bc 	.word	0x200001bc

08000e44 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <RNG_LPUART1_IRQHandler+0x14>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fbe4 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	20000134 	.word	0x20000134

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f004 fbe8 	bl	8005660 <__errno>
 8000e90:	0003      	movs	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	18d2      	adds	r2, r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20005000 	.word	0x20005000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000130 	.word	0x20000130
 8000ec4:	20000398 	.word	0x20000398

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000eda:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <MX_LPUART1_UART_Init+0x58>)
 8000edc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000ee0:	22e1      	movs	r2, #225	@ 0xe1
 8000ee2:	0252      	lsls	r2, r2, #9
 8000ee4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <MX_LPUART1_UART_Init+0x54>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f002 f988 	bl	8003228 <HAL_UART_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f7ff feea 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	20000134 	.word	0x20000134
 8000f2c:	40004800 	.word	0x40004800

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	240c      	movs	r4, #12
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f004 fb48 	bl	80055d8 <memset>
  if(uartHandle->Instance==LPUART1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a45      	ldr	r2, [pc, #276]	@ (8001064 <HAL_UART_MspInit+0x134>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d000      	beq.n	8000f54 <HAL_UART_MspInit+0x24>
 8000f52:	e083      	b.n	800105c <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f54:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <HAL_UART_MspInit+0x138>)
 8000f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f58:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <HAL_UART_MspInit+0x138>)
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	02c9      	lsls	r1, r1, #11
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <HAL_UART_MspInit+0x138>)
 8000f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f66:	4b40      	ldr	r3, [pc, #256]	@ (8001068 <HAL_UART_MspInit+0x138>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001068 <HAL_UART_MspInit+0x138>)
 8000f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2203      	movs	r2, #3
 8000f92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2206      	movs	r2, #6
 8000f98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	187a      	adds	r2, r7, r1
 8000f9c:	23a0      	movs	r3, #160	@ 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fc52 	bl	800184c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000faa:	4a31      	ldr	r2, [pc, #196]	@ (8001070 <HAL_UART_MspInit+0x140>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fc2:	2280      	movs	r2, #128	@ 0x80
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f9e7 	bl	80013b4 <HAL_DMA_Init>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000fea:	f7ff fe83 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000ff2:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_UART_MspInit+0x13c>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_UART_MspInit+0x148>)
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001002:	2205      	movs	r2, #5
 8001004:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001008:	2210      	movs	r2, #16
 800100a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_UART_MspInit+0x144>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_MspInit+0x144>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_UART_MspInit+0x144>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001032:	0018      	movs	r0, r3
 8001034:	f000 f9be 	bl	80013b4 <HAL_DMA_Init>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800103c:	f7ff fe5a 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001044:	671a      	str	r2, [r3, #112]	@ 0x70
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_UART_MspInit+0x144>)
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	201d      	movs	r0, #29
 8001052:	f000 f97d 	bl	8001350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8001056:	201d      	movs	r0, #29
 8001058:	f000 f98f 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b009      	add	sp, #36	@ 0x24
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40004800 	.word	0x40004800
 8001068:	40021000 	.word	0x40021000
 800106c:	200001bc 	.word	0x200001bc
 8001070:	40020030 	.word	0x40020030
 8001074:	20000204 	.word	0x20000204
 8001078:	4002001c 	.word	0x4002001c

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff ff22 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fadf 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fcfd 	bl	8000aac <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
   ldr   r0, =_estack
 80010b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c0:	08005854 	.word	0x08005854
  ldr r2, =_sbss
 80010c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010c8:	20000398 	.word	0x20000398

080010cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_COMP_IRQHandler>
	...

080010d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_Init+0x3c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Init+0x3c>)
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f811 	bl	8001110 <HAL_InitTick>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d003      	beq.n	80010fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e001      	b.n	80010fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010fa:	f7ff fe57 	bl	8000dac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_InitTick+0x5c>)
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	0019      	movs	r1, r3
 8001122:	23fa      	movs	r3, #250	@ 0xfa
 8001124:	0098      	lsls	r0, r3, #2
 8001126:	f7fe fff7 	bl	8000118 <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	0019      	movs	r1, r3
 800112e:	0020      	movs	r0, r4
 8001130:	f7fe fff2 	bl	8000118 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f92f 	bl	800139a <HAL_SYSTICK_Config>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e00f      	b.n	8001164 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d80b      	bhi.n	8001162 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	2301      	movs	r3, #1
 800114e:	425b      	negs	r3, r3
 8001150:	2200      	movs	r2, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f000 f8fc 	bl	8001350 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_InitTick+0x64>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b003      	add	sp, #12
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	18d2      	adds	r2, r2, r3
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_IncTick+0x20>)
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	20000008 	.word	0x20000008
 8001198:	2000024c 	.word	0x2000024c

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	@ (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	2000024c 	.word	0x2000024c

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b7f      	cmp	r3, #127	@ 0x7f
 800120a:	d809      	bhi.n	8001220 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	231f      	movs	r3, #31
 8001214:	401a      	ands	r2, r3
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_EnableIRQ+0x30>)
 8001218:	2101      	movs	r1, #1
 800121a:	4091      	lsls	r1, r2
 800121c:	000a      	movs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
  }
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001240:	d828      	bhi.n	8001294 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	4a2f      	ldr	r2, [pc, #188]	@ (8001300 <__NVIC_SetPriority+0xd4>)
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b25b      	sxtb	r3, r3
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	33c0      	adds	r3, #192	@ 0xc0
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	589b      	ldr	r3, [r3, r2]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	@ 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	@ 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	481f      	ldr	r0, [pc, #124]	@ (8001300 <__NVIC_SetPriority+0xd4>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	430a      	orrs	r2, r1
 800128c:	33c0      	adds	r3, #192	@ 0xc0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001292:	e031      	b.n	80012f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0019      	movs	r1, r3
 800129c:	230f      	movs	r3, #15
 800129e:	400b      	ands	r3, r1
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3306      	adds	r3, #6
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	18d3      	adds	r3, r2, r3
 80012aa:	3304      	adds	r3, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1dfa      	adds	r2, r7, #7
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	2203      	movs	r2, #3
 80012b6:	400a      	ands	r2, r1
 80012b8:	00d2      	lsls	r2, r2, #3
 80012ba:	21ff      	movs	r1, #255	@ 0xff
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	401a      	ands	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	4003      	ands	r3, r0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <__NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	001c      	movs	r4, r3
 80012e4:	230f      	movs	r3, #15
 80012e6:	4023      	ands	r3, r4
 80012e8:	3b08      	subs	r3, #8
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	430a      	orrs	r2, r1
 80012ee:	3306      	adds	r3, #6
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	18c3      	adds	r3, r0, r3
 80012f4:	3304      	adds	r3, #4
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b003      	add	sp, #12
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	045b      	lsls	r3, r3, #17
 8001318:	429a      	cmp	r2, r3
 800131a:	d301      	bcc.n	8001320 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131c:	2301      	movs	r3, #1
 800131e:	e010      	b.n	8001342 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <SysTick_Config+0x44>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	3a01      	subs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001328:	2301      	movs	r3, #1
 800132a:	425b      	negs	r3, r3
 800132c:	2103      	movs	r1, #3
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff7c 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <SysTick_Config+0x44>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SysTick_Config+0x44>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	210f      	movs	r1, #15
 800135c:	187b      	adds	r3, r7, r1
 800135e:	1c02      	adds	r2, r0, #0
 8001360:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	187b      	adds	r3, r7, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	0002      	movs	r2, r0
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b25b      	sxtb	r3, r3
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ffaf 	bl	8001308 <SysTick_Config>
 80013aa:	0003      	movs	r3, r0
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e061      	b.n	800148a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <HAL_DMA_Init+0xe0>)
 80013cc:	4694      	mov	ip, r2
 80013ce:	4463      	add	r3, ip
 80013d0:	2114      	movs	r1, #20
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7fe fea0 	bl	8000118 <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	009a      	lsls	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001498 <HAL_DMA_Init+0xe4>)
 80013e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2225      	movs	r2, #37	@ 0x25
 80013ea:	2102      	movs	r1, #2
 80013ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a28      	ldr	r2, [pc, #160]	@ (800149c <HAL_DMA_Init+0xe8>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	429a      	cmp	r2, r3
 800143e:	d018      	beq.n	8001472 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <HAL_DMA_Init+0xec>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001448:	211c      	movs	r1, #28
 800144a:	400b      	ands	r3, r1
 800144c:	210f      	movs	r1, #15
 800144e:	4099      	lsls	r1, r3
 8001450:	000b      	movs	r3, r1
 8001452:	43d9      	mvns	r1, r3
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_DMA_Init+0xec>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <HAL_DMA_Init+0xec>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	201c      	movs	r0, #28
 8001468:	4003      	ands	r3, r0
 800146a:	409a      	lsls	r2, r3
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_DMA_Init+0xec>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2225      	movs	r2, #37	@ 0x25
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	bffdfff8 	.word	0xbffdfff8
 8001498:	40020000 	.word	0x40020000
 800149c:	ffff800f 	.word	0xffff800f
 80014a0:	400200a8 	.word	0x400200a8

080014a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2317      	movs	r3, #23
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2224      	movs	r2, #36	@ 0x24
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_DMA_Start_IT+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e04f      	b.n	8001568 <HAL_DMA_Start_IT+0xc4>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2224      	movs	r2, #36	@ 0x24
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2225      	movs	r2, #37	@ 0x25
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d13a      	bne.n	8001552 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2225      	movs	r2, #37	@ 0x25
 80014e0:	2102      	movs	r1, #2
 80014e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	438a      	bics	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f974 	bl	80017ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	210e      	movs	r1, #14
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00f      	b.n	8001540 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	210a      	movs	r1, #10
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e007      	b.n	8001562 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2224      	movs	r2, #36	@ 0x24
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800155a:	2317      	movs	r3, #23
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b006      	add	sp, #24
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	230f      	movs	r3, #15
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2225      	movs	r2, #37	@ 0x25
 8001584:	5c9b      	ldrb	r3, [r3, r2]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d008      	beq.n	800159e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2204      	movs	r2, #4
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2224      	movs	r2, #36	@ 0x24
 8001596:	2100      	movs	r1, #0
 8001598:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e024      	b.n	80015e8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	210e      	movs	r1, #14
 80015aa:	438a      	bics	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	438a      	bics	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	221c      	movs	r2, #28
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	2101      	movs	r1, #1
 80015cc:	4091      	lsls	r1, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2225      	movs	r2, #37	@ 0x25
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2224      	movs	r2, #36	@ 0x24
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]

    return status;
 80015e2:	230f      	movs	r3, #15
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	210f      	movs	r1, #15
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2225      	movs	r2, #37	@ 0x25
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d006      	beq.n	800161a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2204      	movs	r2, #4
 8001610:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e02a      	b.n	8001670 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	210e      	movs	r1, #14
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	221c      	movs	r2, #28
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	2101      	movs	r1, #1
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2225      	movs	r2, #37	@ 0x25
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2224      	movs	r2, #36	@ 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	0010      	movs	r0, r2
 800166e:	4798      	blx	r3
    }
  }
  return status;
 8001670:	230f      	movs	r3, #15
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	781b      	ldrb	r3, [r3, #0]
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	221c      	movs	r2, #28
 800169c:	4013      	ands	r3, r2
 800169e:	2204      	movs	r2, #4
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	d026      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x7a>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2204      	movs	r2, #4
 80016ae:	4013      	ands	r3, r2
 80016b0:	d022      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2220      	movs	r2, #32
 80016ba:	4013      	ands	r3, r2
 80016bc:	d107      	bne.n	80016ce <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2104      	movs	r1, #4
 80016ca:	438a      	bics	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	221c      	movs	r2, #28
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2104      	movs	r1, #4
 80016dc:	4091      	lsls	r1, r2
 80016de:	000a      	movs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d100      	bne.n	80016ec <HAL_DMA_IRQHandler+0x6e>
 80016ea:	e071      	b.n	80017d0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	0010      	movs	r0, r2
 80016f4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80016f6:	e06b      	b.n	80017d0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	221c      	movs	r2, #28
 80016fe:	4013      	ands	r3, r2
 8001700:	2202      	movs	r2, #2
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	d02d      	beq.n	8001768 <HAL_DMA_IRQHandler+0xea>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d029      	beq.n	8001768 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2220      	movs	r2, #32
 800171c:	4013      	ands	r3, r2
 800171e:	d10b      	bne.n	8001738 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	210a      	movs	r1, #10
 800172c:	438a      	bics	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2225      	movs	r2, #37	@ 0x25
 8001734:	2101      	movs	r1, #1
 8001736:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	221c      	movs	r2, #28
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	2102      	movs	r1, #2
 8001746:	4091      	lsls	r1, r2
 8001748:	000a      	movs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	@ 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d039      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	0010      	movs	r0, r2
 8001764:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001766:	e033      	b.n	80017d0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	221c      	movs	r2, #28
 800176e:	4013      	ands	r3, r2
 8001770:	2208      	movs	r2, #8
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	d02a      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x154>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2208      	movs	r2, #8
 8001780:	4013      	ands	r3, r2
 8001782:	d026      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	210e      	movs	r1, #14
 8001790:	438a      	bics	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	221c      	movs	r2, #28
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	2101      	movs	r1, #1
 80017a2:	4091      	lsls	r1, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2225      	movs	r2, #37	@ 0x25
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2224      	movs	r2, #36	@ 0x24
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	0010      	movs	r0, r2
 80017ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46c0      	nop			@ (mov r8, r8)
}
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}

080017ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	221c      	movs	r2, #28
 8001802:	401a      	ands	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2101      	movs	r1, #1
 800180a:	4091      	lsls	r1, r2
 800180c:	000a      	movs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d108      	bne.n	8001832 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001830:	e007      	b.n	8001842 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	60da      	str	r2, [r3, #12]
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001862:	e155      	b.n	8001b10 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4091      	lsls	r1, r2
 800186e:	000a      	movs	r2, r1
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <HAL_GPIO_Init+0x30>
 800187a:	e146      	b.n	8001b0a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	4013      	ands	r3, r2
 8001884:	2b01      	cmp	r3, #1
 8001886:	d005      	beq.n	8001894 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001890:	2b02      	cmp	r3, #2
 8001892:	d130      	bne.n	80018f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	409a      	lsls	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	43da      	mvns	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ca:	2201      	movs	r2, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	2201      	movs	r2, #1
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d017      	beq.n	8001932 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	4013      	ands	r3, r2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d123      	bne.n	8001986 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	58d3      	ldr	r3, [r2, r3]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2207      	movs	r2, #7
 8001950:	4013      	ands	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2107      	movs	r1, #7
 800196a:	400b      	ands	r3, r1
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	6939      	ldr	r1, [r7, #16]
 8001984:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	401a      	ands	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	23c0      	movs	r3, #192	@ 0xc0
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	d100      	bne.n	80019c8 <HAL_GPIO_Init+0x17c>
 80019c6:	e0a0      	b.n	8001b0a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019cc:	4b56      	ldr	r3, [pc, #344]	@ (8001b28 <HAL_GPIO_Init+0x2dc>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a55      	ldr	r2, [pc, #340]	@ (8001b2c <HAL_GPIO_Init+0x2e0>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	589b      	ldr	r3, [r3, r2]
 80019e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2203      	movs	r2, #3
 80019e6:	4013      	ands	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	23a0      	movs	r3, #160	@ 0xa0
 80019fc:	05db      	lsls	r3, r3, #23
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x1f6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4a      	ldr	r2, [pc, #296]	@ (8001b30 <HAL_GPIO_Init+0x2e4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x1f2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	@ (8001b34 <HAL_GPIO_Init+0x2e8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	@ (8001b38 <HAL_GPIO_Init+0x2ec>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x1ea>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	@ (8001b3c <HAL_GPIO_Init+0x2f0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x1e6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	@ (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1f8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	@ (8001b2c <HAL_GPIO_Init+0x2e0>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	035b      	lsls	r3, r3, #13
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001ab6:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	4013      	ands	r3, r2
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_GPIO_Init+0x2f8>)
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	1e13      	subs	r3, r2, #0
 8001b1a:	d000      	beq.n	8001b1e <HAL_GPIO_Init+0x2d2>
 8001b1c:	e6a2      	b.n	8001864 <HAL_GPIO_Init+0x18>
  }
}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b006      	add	sp, #24
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	50000400 	.word	0x50000400
 8001b34:	50000800 	.word	0x50000800
 8001b38:	50000c00 	.word	0x50000c00
 8001b3c:	50001000 	.word	0x50001000
 8001b40:	50001c00 	.word	0x50001c00
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	0008      	movs	r0, r1
 8001b52:	0011      	movs	r1, r2
 8001b54:	1cbb      	adds	r3, r7, #2
 8001b56:	1c02      	adds	r2, r0, #0
 8001b58:	801a      	strh	r2, [r3, #0]
 8001b5a:	1c7b      	adds	r3, r7, #1
 8001b5c:	1c0a      	adds	r2, r1, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b60:	1c7b      	adds	r3, r7, #1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b68:	1cbb      	adds	r3, r7, #2
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b72:	1cbb      	adds	r3, r7, #2
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e08f      	b.n	8001cb6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2241      	movs	r2, #65	@ 0x41
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2240      	movs	r2, #64	@ 0x40
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fd13 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2241      	movs	r2, #65	@ 0x41
 8001bb6:	2124      	movs	r1, #36	@ 0x24
 8001bb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	438a      	bics	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	493b      	ldr	r1, [pc, #236]	@ (8001cc0 <HAL_I2C_Init+0x13c>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4938      	ldr	r1, [pc, #224]	@ (8001cc4 <HAL_I2C_Init+0x140>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	0209      	lsls	r1, r1, #8
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e007      	b.n	8001c12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2184      	movs	r1, #132	@ 0x84
 8001c0c:	0209      	lsls	r1, r1, #8
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d109      	bne.n	8001c2e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	0109      	lsls	r1, r1, #4
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	e007      	b.n	8001c3e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4923      	ldr	r1, [pc, #140]	@ (8001cc8 <HAL_I2C_Init+0x144>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4920      	ldr	r1, [pc, #128]	@ (8001ccc <HAL_I2C_Init+0x148>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	491a      	ldr	r1, [pc, #104]	@ (8001cc4 <HAL_I2C_Init+0x140>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69d9      	ldr	r1, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2241      	movs	r2, #65	@ 0x41
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2242      	movs	r2, #66	@ 0x42
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	f0ffffff 	.word	0xf0ffffff
 8001cc4:	ffff7fff 	.word	0xffff7fff
 8001cc8:	fffff7ff 	.word	0xfffff7ff
 8001ccc:	02008000 	.word	0x02008000

08001cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2241      	movs	r2, #65	@ 0x41
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d138      	bne.n	8001d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2240      	movs	r2, #64	@ 0x40
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e032      	b.n	8001d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	@ 0x40
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2241      	movs	r2, #65	@ 0x41
 8001d00:	2124      	movs	r1, #36	@ 0x24
 8001d02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	438a      	bics	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4911      	ldr	r1, [pc, #68]	@ (8001d64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	2120      	movs	r1, #32
 8001d4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	@ 0x40
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	ffffefff 	.word	0xffffefff

08001d68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2241      	movs	r2, #65	@ 0x41
 8001d76:	5c9b      	ldrb	r3, [r3, r2]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d139      	bne.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	5c9b      	ldrb	r3, [r3, r2]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e033      	b.n	8001df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2240      	movs	r2, #64	@ 0x40
 8001d90:	2101      	movs	r1, #1
 8001d92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2241      	movs	r2, #65	@ 0x41
 8001d98:	2124      	movs	r1, #36	@ 0x24
 8001d9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2101      	movs	r1, #1
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a11      	ldr	r2, [pc, #68]	@ (8001dfc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2241      	movs	r2, #65	@ 0x41
 8001de2:	2120      	movs	r1, #32
 8001de4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
  }
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	fffff0ff 	.word	0xfffff0ff

08001e00 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	000a      	movs	r2, r1
 8001e0a:	1cfb      	adds	r3, r7, #3
 8001e0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_PWR_EnterSTOPMode+0xac>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <HAL_PWR_EnterSTOPMode+0x40>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001e34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e3a:	491d      	ldr	r1, [pc, #116]	@ (8001eb0 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	430a      	orrs	r2, r1
 8001e66:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001e68:	1cfb      	adds	r3, r7, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001e70:	bf30      	wfi
 8001e72:	e002      	b.n	8001e7a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001e74:	bf40      	sev
    __WFE();
 8001e76:	bf20      	wfe
    __WFE();
 8001e78:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001e80:	2104      	movs	r1, #4
 8001e82:	438a      	bics	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_PWR_EnterSTOPMode+0xa0>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	0089      	lsls	r1, r1, #2
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
  }
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b006      	add	sp, #24
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	fffffdff 	.word	0xfffffdff
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f000 fbbf 	bl	800264a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ecc:	4bc9      	ldr	r3, [pc, #804]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed6:	4bc7      	ldr	r3, [pc, #796]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x36>
 8001eec:	e07e      	b.n	8001fec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d007      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d112      	bne.n	8001f20 <HAL_RCC_OscConfig+0x68>
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	025b      	lsls	r3, r3, #9
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10d      	bne.n	8001f20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4bbb      	ldr	r3, [pc, #748]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCC_OscConfig+0x5a>
 8001f10:	e06b      	b.n	8001fea <HAL_RCC_OscConfig+0x132>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d167      	bne.n	8001fea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f000 fb95 	bl	800264a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x84>
 8001f2c:	4bb1      	ldr	r3, [pc, #708]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4bb0      	ldr	r3, [pc, #704]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f32:	2180      	movs	r1, #128	@ 0x80
 8001f34:	0249      	lsls	r1, r1, #9
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e027      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	23a0      	movs	r3, #160	@ 0xa0
 8001f42:	02db      	lsls	r3, r3, #11
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d10e      	bne.n	8001f66 <HAL_RCC_OscConfig+0xae>
 8001f48:	4baa      	ldr	r3, [pc, #680]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4ba9      	ldr	r3, [pc, #676]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f4e:	2180      	movs	r1, #128	@ 0x80
 8001f50:	02c9      	lsls	r1, r1, #11
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	4ba7      	ldr	r3, [pc, #668]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4ba6      	ldr	r3, [pc, #664]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	0249      	lsls	r1, r1, #9
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e012      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f66:	4ba3      	ldr	r3, [pc, #652]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4ba2      	ldr	r3, [pc, #648]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f6c:	49a2      	ldr	r1, [pc, #648]	@ (80021f8 <HAL_RCC_OscConfig+0x340>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4ba0      	ldr	r3, [pc, #640]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4b9c      	ldr	r3, [pc, #624]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b9b      	ldr	r3, [pc, #620]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001f86:	499d      	ldr	r1, [pc, #628]	@ (80021fc <HAL_RCC_OscConfig+0x344>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff f902 	bl	800119c <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9e:	f7ff f8fd 	bl	800119c <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	@ 0x64
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f000 fb4c 	bl	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fb2:	4b90      	ldr	r3, [pc, #576]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCC_OscConfig+0xe6>
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f8ec 	bl	800119c <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fca:	f7ff f8e7 	bl	800119c <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	@ 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e336      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fdc:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x112>
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x140>
 8001ff6:	e099      	b.n	800212c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	2220      	movs	r2, #32
 8002002:	4013      	ands	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002006:	4b7b      	ldr	r3, [pc, #492]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b7a      	ldr	r3, [pc, #488]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800200c:	2120      	movs	r1, #32
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	2220      	movs	r2, #32
 8002016:	4393      	bics	r3, r2
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d13e      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1ec>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d13b      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800202c:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_RCC_OscConfig+0x188>
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e304      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b6c      	ldr	r3, [pc, #432]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a6e      	ldr	r2, [pc, #440]	@ (8002200 <HAL_RCC_OscConfig+0x348>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	021a      	lsls	r2, r3, #8
 8002050:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002056:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2209      	movs	r2, #9
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002068:	f000 fc42 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 800206c:	0001      	movs	r1, r0
 800206e:	4b61      	ldr	r3, [pc, #388]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a62      	ldr	r2, [pc, #392]	@ (8002204 <HAL_RCC_OscConfig+0x34c>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	000a      	movs	r2, r1
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b61      	ldr	r3, [pc, #388]	@ (8002208 <HAL_RCC_OscConfig+0x350>)
 8002082:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002084:	4b61      	ldr	r3, [pc, #388]	@ (800220c <HAL_RCC_OscConfig+0x354>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2513      	movs	r5, #19
 800208a:	197c      	adds	r4, r7, r5
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f83f 	bl	8001110 <HAL_InitTick>
 8002092:	0003      	movs	r3, r0
 8002094:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002096:	197b      	adds	r3, r7, r5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d046      	beq.n	800212c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	e2d2      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d027      	beq.n	80020fa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020aa:	4b52      	ldr	r3, [pc, #328]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2209      	movs	r2, #9
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	4b4f      	ldr	r3, [pc, #316]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff f86e 	bl	800119c <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff f869 	bl	800119c <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2b8      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020d8:	4b46      	ldr	r3, [pc, #280]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d0f1      	beq.n	80020c6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a46      	ldr	r2, [pc, #280]	@ (8002200 <HAL_RCC_OscConfig+0x348>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e018      	b.n	800212c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b3d      	ldr	r3, [pc, #244]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002100:	2101      	movs	r1, #1
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff f849 	bl	800119c <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff f844 	bl	800119c <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e293      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d1f1      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2210      	movs	r2, #16
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_RCC_OscConfig+0x280>
 8002136:	e0a2      	b.n	800227e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d140      	bne.n	80021c0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x29e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e279      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a2d      	ldr	r2, [pc, #180]	@ (8002210 <HAL_RCC_OscConfig+0x358>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002164:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	0a19      	lsrs	r1, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	061a      	lsls	r2, r3, #24
 8002178:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	0b5b      	lsrs	r3, r3, #13
 8002184:	3301      	adds	r3, #1
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	0212      	lsls	r2, r2, #8
 800218a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	210f      	movs	r1, #15
 8002194:	400b      	ands	r3, r1
 8002196:	491b      	ldr	r1, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x34c>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_RCC_OscConfig+0x350>)
 800219e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_RCC_OscConfig+0x354>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2513      	movs	r5, #19
 80021a6:	197c      	adds	r4, r7, r5
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe ffb1 	bl	8001110 <HAL_InitTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021b2:	197b      	adds	r3, r7, r5
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d061      	beq.n	800227e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80021ba:	197b      	adds	r3, r7, r5
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	e244      	b.n	800264a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d040      	beq.n	800224a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_OscConfig+0x33c>)
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	0049      	lsls	r1, r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe ffe1 	bl	800119c <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021de:	e019      	b.n	8002214 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7fe ffdc 	bl	800119c <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d912      	bls.n	8002214 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e22b      	b.n	800264a <HAL_RCC_OscConfig+0x792>
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	40021000 	.word	0x40021000
 80021f8:	fffeffff 	.word	0xfffeffff
 80021fc:	fffbffff 	.word	0xfffbffff
 8002200:	ffffe0ff 	.word	0xffffe0ff
 8002204:	080057d8 	.word	0x080057d8
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004
 8002210:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002214:	4bca      	ldr	r3, [pc, #808]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d0df      	beq.n	80021e0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002220:	4bc7      	ldr	r3, [pc, #796]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4ac7      	ldr	r2, [pc, #796]	@ (8002544 <HAL_RCC_OscConfig+0x68c>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222e:	4bc4      	ldr	r3, [pc, #784]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4bc2      	ldr	r3, [pc, #776]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	0a19      	lsrs	r1, r3, #8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	4bbf      	ldr	r3, [pc, #764]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e019      	b.n	800227e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800224a:	4bbd      	ldr	r3, [pc, #756]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4bbc      	ldr	r3, [pc, #752]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002250:	49bd      	ldr	r1, [pc, #756]	@ (8002548 <HAL_RCC_OscConfig+0x690>)
 8002252:	400a      	ands	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe ffa1 	bl	800119c <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002260:	f7fe ff9c 	bl	800119c <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1eb      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002272:	4bb3      	ldr	r3, [pc, #716]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2208      	movs	r2, #8
 8002284:	4013      	ands	r3, r2
 8002286:	d036      	beq.n	80022f6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d019      	beq.n	80022c4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002290:	4bab      	ldr	r3, [pc, #684]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002294:	4baa      	ldr	r3, [pc, #680]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002296:	2101      	movs	r1, #1
 8002298:	430a      	orrs	r2, r1
 800229a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe ff7e 	bl	800119c <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a6:	f7fe ff79 	bl	800119c <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1c8      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022b8:	4ba1      	ldr	r3, [pc, #644]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80022ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d0f1      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3ee>
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b9e      	ldr	r3, [pc, #632]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80022c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe ff64 	bl	800119c <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe ff5f 	bl	800119c <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1ae      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ec:	4b94      	ldr	r3, [pc, #592]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80022ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f1      	bne.n	80022da <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2204      	movs	r2, #4
 80022fc:	4013      	ands	r3, r2
 80022fe:	d100      	bne.n	8002302 <HAL_RCC_OscConfig+0x44a>
 8002300:	e0ae      	b.n	8002460 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2023      	movs	r0, #35	@ 0x23
 8002304:	183b      	adds	r3, r7, r0
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800230c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	055b      	lsls	r3, r3, #21
 8002312:	4013      	ands	r3, r2
 8002314:	d109      	bne.n	800232a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b8a      	ldr	r3, [pc, #552]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800231a:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0549      	lsls	r1, r1, #21
 8002320:	430a      	orrs	r2, r1
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002324:	183b      	adds	r3, r7, r0
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b88      	ldr	r3, [pc, #544]	@ (800254c <HAL_RCC_OscConfig+0x694>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4013      	ands	r3, r2
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b85      	ldr	r3, [pc, #532]	@ (800254c <HAL_RCC_OscConfig+0x694>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b84      	ldr	r3, [pc, #528]	@ (800254c <HAL_RCC_OscConfig+0x694>)
 800233c:	2180      	movs	r1, #128	@ 0x80
 800233e:	0049      	lsls	r1, r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002344:	f7fe ff2a 	bl	800119c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe ff25 	bl	800119c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	@ 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e174      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b7a      	ldr	r3, [pc, #488]	@ (800254c <HAL_RCC_OscConfig+0x694>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d0>
 8002378:	4b71      	ldr	r3, [pc, #452]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800237a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800237c:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800237e:	2180      	movs	r1, #128	@ 0x80
 8002380:	0049      	lsls	r1, r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	651a      	str	r2, [r3, #80]	@ 0x50
 8002386:	e031      	b.n	80023ec <HAL_RCC_OscConfig+0x534>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x4f2>
 8002390:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002392:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002394:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002396:	496c      	ldr	r1, [pc, #432]	@ (8002548 <HAL_RCC_OscConfig+0x690>)
 8002398:	400a      	ands	r2, r1
 800239a:	651a      	str	r2, [r3, #80]	@ 0x50
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800239e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a0:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023a2:	496b      	ldr	r1, [pc, #428]	@ (8002550 <HAL_RCC_OscConfig+0x698>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80023a8:	e020      	b.n	80023ec <HAL_RCC_OscConfig+0x534>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	23a0      	movs	r3, #160	@ 0xa0
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x51c>
 80023b6:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ba:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	00c9      	lsls	r1, r1, #3
 80023c0:	430a      	orrs	r2, r1
 80023c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	0049      	lsls	r1, r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x534>
 80023d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d8:	4b59      	ldr	r3, [pc, #356]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023da:	495b      	ldr	r1, [pc, #364]	@ (8002548 <HAL_RCC_OscConfig+0x690>)
 80023dc:	400a      	ands	r2, r1
 80023de:	651a      	str	r2, [r3, #80]	@ 0x50
 80023e0:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e4:	4b56      	ldr	r3, [pc, #344]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80023e6:	495a      	ldr	r1, [pc, #360]	@ (8002550 <HAL_RCC_OscConfig+0x698>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fed2 	bl	800119c <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023fc:	e009      	b.n	8002412 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe fecd 	bl	800119c <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_RCC_OscConfig+0x69c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e11b      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002412:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d0ef      	beq.n	80023fe <HAL_RCC_OscConfig+0x546>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe febc 	bl	800119c <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe feb7 	bl	800119c <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a47      	ldr	r2, [pc, #284]	@ (8002554 <HAL_RCC_OscConfig+0x69c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e105      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800243e:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d1ef      	bne.n	800242a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800244a:	2323      	movs	r3, #35	@ 0x23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800245a:	493f      	ldr	r1, [pc, #252]	@ (8002558 <HAL_RCC_OscConfig+0x6a0>)
 800245c:	400a      	ands	r2, r1
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2220      	movs	r2, #32
 8002466:	4013      	ands	r3, r2
 8002468:	d049      	beq.n	80024fe <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d026      	beq.n	80024c0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002472:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
 800248a:	4b34      	ldr	r3, [pc, #208]	@ (800255c <HAL_RCC_OscConfig+0x6a4>)
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x6a4>)
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	0189      	lsls	r1, r1, #6
 8002494:	430a      	orrs	r2, r1
 8002496:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fe80 	bl	800119c <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a2:	f7fe fe7b 	bl	800119c <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0ca      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	d0f1      	beq.n	80024a2 <HAL_RCC_OscConfig+0x5ea>
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_RCC_OscConfig+0x6a4>)
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	4b22      	ldr	r3, [pc, #136]	@ (800255c <HAL_RCC_OscConfig+0x6a4>)
 80024d2:	4923      	ldr	r1, [pc, #140]	@ (8002560 <HAL_RCC_OscConfig+0x6a8>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fe60 	bl	800119c <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e2:	f7fe fe5b 	bl	800119c <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0aa      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d1f1      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d100      	bne.n	8002508 <HAL_RCC_OscConfig+0x650>
 8002506:	e09f      	b.n	8002648 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d100      	bne.n	8002510 <HAL_RCC_OscConfig+0x658>
 800250e:	e078      	b.n	8002602 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	2b02      	cmp	r3, #2
 8002516:	d159      	bne.n	80025cc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_RCC_OscConfig+0x688>)
 800251e:	4911      	ldr	r1, [pc, #68]	@ (8002564 <HAL_RCC_OscConfig+0x6ac>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fe3a 	bl	800119c <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252e:	f7fe fe35 	bl	800119c <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d915      	bls.n	8002568 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e084      	b.n	800264a <HAL_RCC_OscConfig+0x792>
 8002540:	40021000 	.word	0x40021000
 8002544:	ffff1fff 	.word	0xffff1fff
 8002548:	fffffeff 	.word	0xfffffeff
 800254c:	40007000 	.word	0x40007000
 8002550:	fffffbff 	.word	0xfffffbff
 8002554:	00001388 	.word	0x00001388
 8002558:	efffffff 	.word	0xefffffff
 800255c:	40010000 	.word	0x40010000
 8002560:	ffffdfff 	.word	0xffffdfff
 8002564:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	049b      	lsls	r3, r3, #18
 8002570:	4013      	ands	r3, r2
 8002572:	d1dc      	bne.n	800252e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a37      	ldr	r2, [pc, #220]	@ (8002658 <HAL_RCC_OscConfig+0x7a0>)
 800257a:	4013      	ands	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	431a      	orrs	r2, r3
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	0449      	lsls	r1, r1, #17
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fdfb 	bl	800119c <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fdf6 	bl	800119c <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e045      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	049b      	lsls	r3, r3, #18
 80025c6:	4013      	ands	r3, r2
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x6f4>
 80025ca:	e03d      	b.n	8002648 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 80025d2:	4922      	ldr	r1, [pc, #136]	@ (800265c <HAL_RCC_OscConfig+0x7a4>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fde0 	bl	800119c <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fddb 	bl	800119c <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e02a      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	049b      	lsls	r3, r3, #18
 80025fc:	4013      	ands	r3, r2
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x72a>
 8002600:	e022      	b.n	8002648 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01d      	b.n	800264a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_OscConfig+0x79c>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	401a      	ands	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d10f      	bne.n	8002644 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	23f0      	movs	r3, #240	@ 0xf0
 8002628:	039b      	lsls	r3, r3, #14
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	23c0      	movs	r3, #192	@ 0xc0
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b00a      	add	sp, #40	@ 0x28
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	ff02ffff 	.word	0xff02ffff
 800265c:	feffffff 	.word	0xfeffffff

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e128      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b96      	ldr	r3, [pc, #600]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d91e      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b93      	ldr	r3, [pc, #588]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	4b90      	ldr	r3, [pc, #576]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002694:	f7fe fd82 	bl	800119c <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fd7d 	bl	800119c <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a8a      	ldr	r2, [pc, #552]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e109      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b87      	ldr	r3, [pc, #540]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b83      	ldr	r3, [pc, #524]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	22f0      	movs	r2, #240	@ 0xf0
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d100      	bne.n	80026ea <HAL_RCC_ClockConfig+0x8a>
 80026e8:	e089      	b.n	80027fe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f2:	4b79      	ldr	r3, [pc, #484]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	4013      	ands	r3, r2
 80026fc:	d120      	bne.n	8002740 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0e1      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270a:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	049b      	lsls	r3, r3, #18
 8002712:	4013      	ands	r3, r2
 8002714:	d114      	bne.n	8002740 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0d5      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d106      	bne.n	8002730 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	4b6d      	ldr	r3, [pc, #436]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d109      	bne.n	8002740 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0ca      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002730:	4b69      	ldr	r3, [pc, #420]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0c2      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002740:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2203      	movs	r2, #3
 8002746:	4393      	bics	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fe fd22 	bl	800119c <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d111      	bne.n	8002788 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	e009      	b.n	800277a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002766:	f7fe fd19 	bl	800119c <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a58      	ldr	r2, [pc, #352]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0a5      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800277a:	4b57      	ldr	r3, [pc, #348]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	220c      	movs	r2, #12
 8002780:	4013      	ands	r3, r2
 8002782:	2b08      	cmp	r3, #8
 8002784:	d1ef      	bne.n	8002766 <HAL_RCC_ClockConfig+0x106>
 8002786:	e03a      	b.n	80027fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7fe fd03 	bl	800119c <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a4d      	ldr	r2, [pc, #308]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e08f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	220c      	movs	r2, #12
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_ClockConfig+0x132>
 80027b2:	e024      	b.n	80027fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d11b      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fe fced 	bl	800119c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a42      	ldr	r2, [pc, #264]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e079      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d2:	4b41      	ldr	r3, [pc, #260]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	220c      	movs	r2, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x15e>
 80027de:	e00e      	b.n	80027fe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe fcdc 	bl	800119c <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	4a3a      	ldr	r2, [pc, #232]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e068      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027f4:	4b38      	ldr	r3, [pc, #224]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	220c      	movs	r2, #12
 80027fa:	4013      	ands	r3, r2
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fe:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d21e      	bcs.n	800284a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280c:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4393      	bics	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800281e:	f7fe fcbd 	bl	800119c <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	e009      	b.n	800283c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe fcb8 	bl	800119c <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	4a28      	ldr	r2, [pc, #160]	@ (80028d4 <HAL_RCC_ClockConfig+0x274>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e044      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_ClockConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_RCC_ClockConfig+0x27c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	4013      	ands	r3, r2
 8002870:	d00a      	beq.n	8002888 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <HAL_RCC_ClockConfig+0x280>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	00da      	lsls	r2, r3, #3
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002888:	f000 f832 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 800288c:	0001      	movs	r1, r0
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_RCC_ClockConfig+0x278>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	220f      	movs	r2, #15
 8002896:	4013      	ands	r3, r2
 8002898:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <HAL_RCC_ClockConfig+0x284>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80028a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <HAL_RCC_ClockConfig+0x28c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	250b      	movs	r5, #11
 80028aa:	197c      	adds	r4, r7, r5
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7fe fc2f 	bl	8001110 <HAL_InitTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028b6:	197b      	adds	r3, r7, r5
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028be:	197b      	adds	r3, r7, r5
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	40022000 	.word	0x40022000
 80028d4:	00001388 	.word	0x00001388
 80028d8:	40021000 	.word	0x40021000
 80028dc:	fffff8ff 	.word	0xfffff8ff
 80028e0:	ffffc7ff 	.word	0xffffc7ff
 80028e4:	080057d8 	.word	0x080057d8
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028f6:	4b3c      	ldr	r3, [pc, #240]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	220c      	movs	r2, #12
 8002900:	4013      	ands	r3, r2
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d013      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x3e>
 8002906:	d85c      	bhi.n	80029c2 <HAL_RCC_GetSysClockFreq+0xd2>
 8002908:	2b04      	cmp	r3, #4
 800290a:	d002      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x22>
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00b      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x38>
 8002910:	e057      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002912:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2210      	movs	r2, #16
 8002918:	4013      	ands	r3, r2
 800291a:	d002      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800291c:	4b33      	ldr	r3, [pc, #204]	@ (80029ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800291e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002920:	e05d      	b.n	80029de <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002922:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002924:	613b      	str	r3, [r7, #16]
      break;
 8002926:	e05a      	b.n	80029de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002928:	4b32      	ldr	r3, [pc, #200]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800292a:	613b      	str	r3, [r7, #16]
      break;
 800292c:	e057      	b.n	80029de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0c9b      	lsrs	r3, r3, #18
 8002932:	220f      	movs	r2, #15
 8002934:	4013      	ands	r3, r2
 8002936:	4a30      	ldr	r2, [pc, #192]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0d9b      	lsrs	r3, r3, #22
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	3301      	adds	r3, #1
 8002946:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002948:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	025b      	lsls	r3, r3, #9
 8002950:	4013      	ands	r3, r2
 8002952:	d00f      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	000a      	movs	r2, r1
 8002958:	0152      	lsls	r2, r2, #5
 800295a:	1a52      	subs	r2, r2, r1
 800295c:	0193      	lsls	r3, r2, #6
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	185b      	adds	r3, r3, r1
 8002964:	025b      	lsls	r3, r3, #9
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f7fd fbd5 	bl	8000118 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e023      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002974:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	4013      	ands	r3, r2
 800297c:	d00f      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	000a      	movs	r2, r1
 8002982:	0152      	lsls	r2, r2, #5
 8002984:	1a52      	subs	r2, r2, r1
 8002986:	0193      	lsls	r3, r2, #6
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	185b      	adds	r3, r3, r1
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f7fd fbc0 	bl	8000118 <__udivsi3>
 8002998:	0003      	movs	r3, r0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e00e      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	000a      	movs	r2, r1
 80029a2:	0152      	lsls	r2, r2, #5
 80029a4:	1a52      	subs	r2, r2, r1
 80029a6:	0193      	lsls	r3, r2, #6
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	185b      	adds	r3, r3, r1
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fbb0 	bl	8000118 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	e00d      	b.n	80029de <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	2207      	movs	r2, #7
 80029ca:	4013      	ands	r3, r2
 80029cc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	0212      	lsls	r2, r2, #8
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b006      	add	sp, #24
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	003d0900 	.word	0x003d0900
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	080057f0 	.word	0x080057f0

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	0001      	movs	r1, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	2207      	movs	r2, #7
 8002a22:	4013      	ands	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	40d9      	lsrs	r1, r3
 8002a2a:	000b      	movs	r3, r1
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080057e8 	.word	0x080057e8

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffdc 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a44:	0001      	movs	r1, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	4013      	ands	r3, r2
 8002a50:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	40d9      	lsrs	r1, r3
 8002a56:	000b      	movs	r3, r1
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	080057e8 	.word	0x080057e8

08002a68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a70:	2317      	movs	r3, #23
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d106      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d100      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002a8e:	e104      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a90:	4bb9      	ldr	r3, [pc, #740]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4bb6      	ldr	r3, [pc, #728]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa0:	4bb5      	ldr	r3, [pc, #724]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aa2:	2180      	movs	r1, #128	@ 0x80
 8002aa4:	0549      	lsls	r1, r1, #21
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002aaa:	2317      	movs	r3, #23
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4bb2      	ldr	r3, [pc, #712]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002abe:	4baf      	ldr	r3, [pc, #700]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4bae      	ldr	r3, [pc, #696]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	0049      	lsls	r1, r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fb66 	bl	800119c <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fb61 	bl	800119c <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e143      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4ba4      	ldr	r3, [pc, #656]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002af4:	4ba0      	ldr	r3, [pc, #640]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	23c0      	movs	r3, #192	@ 0xc0
 8002afa:	039b      	lsls	r3, r3, #14
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	23c0      	movs	r3, #192	@ 0xc0
 8002b06:	039b      	lsls	r3, r3, #14
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	23c0      	movs	r3, #192	@ 0xc0
 8002b16:	039b      	lsls	r3, r3, #14
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	23c0      	movs	r3, #192	@ 0xc0
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	401a      	ands	r2, r3
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10a      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b32:	4b91      	ldr	r3, [pc, #580]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d101      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e113      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b48:	4b8b      	ldr	r3, [pc, #556]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d049      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	23c0      	movs	r3, #192	@ 0xc0
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	4013      	ands	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d004      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	4013      	ands	r3, r2
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	23c0      	movs	r3, #192	@ 0xc0
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d034      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d02e      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b90:	4b79      	ldr	r3, [pc, #484]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b94:	4a7a      	ldr	r2, [pc, #488]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b77      	ldr	r3, [pc, #476]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b9e:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0309      	lsls	r1, r1, #12
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b73      	ldr	r3, [pc, #460]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bac:	4b72      	ldr	r3, [pc, #456]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bae:	4975      	ldr	r1, [pc, #468]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bb4:	4b70      	ldr	r3, [pc, #448]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d014      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe faea 	bl	800119c <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bcc:	e009      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fae5 	bl	800119c <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0c6      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be2:	4b65      	ldr	r3, [pc, #404]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d0ef      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	23c0      	movs	r3, #192	@ 0xc0
 8002c00:	029b      	lsls	r3, r3, #10
 8002c02:	401a      	ands	r2, r3
 8002c04:	23c0      	movs	r3, #192	@ 0xc0
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5e      	ldr	r2, [pc, #376]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	23c0      	movs	r3, #192	@ 0xc0
 8002c1c:	039b      	lsls	r3, r3, #14
 8002c1e:	401a      	ands	r2, r3
 8002c20:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	4b54      	ldr	r3, [pc, #336]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	23c0      	movs	r3, #192	@ 0xc0
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	401a      	ands	r2, r3
 8002c34:	4b50      	ldr	r3, [pc, #320]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4013      	ands	r3, r2
 8002c42:	d01f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	23c0      	movs	r3, #192	@ 0xc0
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002c56:	4b48      	ldr	r3, [pc, #288]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	23c0      	movs	r3, #192	@ 0xc0
 8002c66:	039b      	lsls	r3, r3, #14
 8002c68:	401a      	ands	r2, r3
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c72:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	23c0      	movs	r3, #192	@ 0xc0
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c84:	2317      	movs	r3, #23
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c94:	493e      	ldr	r1, [pc, #248]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	4013      	ands	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d5a:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5e:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b006      	add	sp, #24
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	fffcffff 	.word	0xfffcffff
 8002d84:	fff7ffff 	.word	0xfff7ffff
 8002d88:	00001388 	.word	0x00001388
 8002d8c:	ffcfffff 	.word	0xffcfffff
 8002d90:	efffffff 	.word	0xefffffff
 8002d94:	fffff3ff 	.word	0xfffff3ff
 8002d98:	ffffcfff 	.word	0xffffcfff
 8002d9c:	fbffffff 	.word	0xfbffffff
 8002da0:	fff3ffff 	.word	0xfff3ffff

08002da4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dac:	230f      	movs	r3, #15
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e088      	b.n	8002ed0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2221      	movs	r2, #33	@ 0x21
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fd ffc9 	bl	8000d6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2221      	movs	r2, #33	@ 0x21
 8002dde:	2102      	movs	r1, #2
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2210      	movs	r2, #16
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05f      	beq.n	8002eb0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	22ca      	movs	r2, #202	@ 0xca
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2253      	movs	r2, #83	@ 0x53
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e00:	250f      	movs	r5, #15
 8002e02:	197c      	adds	r4, r7, r5
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f890 	bl	8002f2c <RTC_EnterInitMode>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002e10:	0028      	movs	r0, r5
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d12c      	bne.n	8002e74 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	492c      	ldr	r1, [pc, #176]	@ (8002ed8 <HAL_RTC_Init+0x134>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68d2      	ldr	r2, [r2, #12]
 8002e50:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e66:	183c      	adds	r4, r7, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f8a2 	bl	8002fb4 <RTC_ExitInitMode>
 8002e70:	0003      	movs	r3, r0
 8002e72:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002e74:	230f      	movs	r3, #15
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d113      	bne.n	8002ea6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2103      	movs	r1, #3
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	22ff      	movs	r2, #255	@ 0xff
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eae:	e003      	b.n	8002eb8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002eb8:	230f      	movs	r3, #15
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2221      	movs	r2, #33	@ 0x21
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002eca:	230f      	movs	r3, #15
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed8:	ff8fffbf 	.word	0xff8fffbf

08002edc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <HAL_RTC_WaitForSynchro+0x4c>)
 8002eee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7fe f954 	bl	800119c <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002efa:	f7fe f94f 	bl	800119c <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad2      	subs	r2, r2, r3
 8002f04:	23fa      	movs	r3, #250	@ 0xfa
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d901      	bls.n	8002f10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e006      	b.n	8002f1e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	0001ff5f 	.word	0x0001ff5f

08002f2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2240      	movs	r2, #64	@ 0x40
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d12c      	bne.n	8002fa6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f91e 	bl	800119c <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f64:	e014      	b.n	8002f90 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f66:	f7fe f919 	bl	800119c <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	200f      	movs	r0, #15
 8002f72:	183b      	adds	r3, r7, r0
 8002f74:	1839      	adds	r1, r7, r0
 8002f76:	7809      	ldrb	r1, [r1, #0]
 8002f78:	7019      	strb	r1, [r3, #0]
 8002f7a:	23fa      	movs	r3, #250	@ 0xfa
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d906      	bls.n	8002f90 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	2104      	movs	r1, #4
 8002f88:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2240      	movs	r2, #64	@ 0x40
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d104      	bne.n	8002fa6 <RTC_EnterInitMode+0x7a>
 8002f9c:	230f      	movs	r3, #15
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d1df      	bne.n	8002f66 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	240f      	movs	r4, #15
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d10c      	bne.n	8002ffa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff ff7a 	bl	8002edc <HAL_RTC_WaitForSynchro>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d006      	beq.n	8002ffa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2221      	movs	r2, #33	@ 0x21
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002ffa:	230f      	movs	r3, #15
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b005      	add	sp, #20
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003014:	4b64      	ldr	r3, [pc, #400]	@ (80031a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	22fa      	movs	r2, #250	@ 0xfa
 800301a:	01d1      	lsls	r1, r2, #7
 800301c:	0018      	movs	r0, r3
 800301e:	f7fd f87b 	bl	8000118 <__udivsi3>
 8003022:	0003      	movs	r3, r0
 8003024:	001a      	movs	r2, r3
 8003026:	0013      	movs	r3, r2
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	189b      	adds	r3, r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ad      	b.n	800319e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2221      	movs	r2, #33	@ 0x21
 800304e:	2102      	movs	r1, #2
 8003050:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ca      	movs	r2, #202	@ 0xca
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2253      	movs	r2, #83	@ 0x53
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4013      	ands	r3, r2
 800306e:	d019      	beq.n	80030a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3b01      	subs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	22ff      	movs	r2, #255	@ 0xff
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2221      	movs	r2, #33	@ 0x21
 8003088:	2103      	movs	r1, #3
 800308a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e082      	b.n	800319e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d1e5      	bne.n	8003070 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	493f      	ldr	r1, [pc, #252]	@ (80031ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	22ff      	movs	r2, #255	@ 0xff
 80030bc:	401a      	ands	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	493b      	ldr	r1, [pc, #236]	@ (80031b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030c8:	4b37      	ldr	r3, [pc, #220]	@ (80031a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	22fa      	movs	r2, #250	@ 0xfa
 80030ce:	01d1      	lsls	r1, r2, #7
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fd f821 	bl	8000118 <__udivsi3>
 80030d6:	0003      	movs	r3, r0
 80030d8:	001a      	movs	r2, r3
 80030da:	0013      	movs	r3, r2
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	22ff      	movs	r2, #255	@ 0xff
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2221      	movs	r2, #33	@ 0x21
 8003100:	2103      	movs	r1, #3
 8003102:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e046      	b.n	800319e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d0e5      	beq.n	80030e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2107      	movs	r1, #7
 8003128:	438a      	bics	r2, r1
 800312a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	0349      	lsls	r1, r1, #13
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003152:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003158:	2180      	movs	r1, #128	@ 0x80
 800315a:	0349      	lsls	r1, r1, #13
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	01c9      	lsls	r1, r1, #7
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	00c9      	lsls	r1, r1, #3
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	22ff      	movs	r2, #255	@ 0xff
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2221      	movs	r2, #33	@ 0x21
 8003190:	2101      	movs	r1, #1
 8003192:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	20000000 	.word	0x20000000
 80031ac:	fffffbff 	.word	0xfffffbff
 80031b0:	fffffb7f 	.word	0xfffffb7f
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	0352      	lsls	r2, r2, #13
 80031c6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	01db      	lsls	r3, r3, #7
 80031d2:	4013      	ands	r3, r2
 80031d4:	d014      	beq.n	8003200 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00d      	beq.n	8003200 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4908      	ldr	r1, [pc, #32]	@ (8003214 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f80c 	bl	8003218 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2221      	movs	r2, #33	@ 0x21
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]
}
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010400 	.word	0x40010400
 8003214:	fffffb7f 	.word	0xfffffb7f

08003218 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e044      	b.n	80032c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2278      	movs	r2, #120	@ 0x78
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fe6f 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	@ 0x24
 8003256:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 ffac 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fd0a 	bl	8003c94 <UART_SetConfig>
 8003280:	0003      	movs	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01c      	b.n	80032c4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	490d      	ldr	r1, [pc, #52]	@ (80032cc <HAL_UART_Init+0xa4>)
 8003296:	400a      	ands	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	212a      	movs	r1, #42	@ 0x2a
 80032a6:	438a      	bics	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f001 f83b 	bl	8004338 <UART_CheckIdleState>
 80032c2:	0003      	movs	r3, r0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	ffffb7ff 	.word	0xffffb7ff

080032d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	1dbb      	adds	r3, r7, #6
 80032dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d000      	beq.n	80032e8 <HAL_UART_Transmit_DMA+0x18>
 80032e6:	e077      	b.n	80033d8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_UART_Transmit_DMA+0x26>
 80032ee:	1dbb      	adds	r3, r7, #6
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06f      	b.n	80033da <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	429a      	cmp	r2, r3
 8003304:	d109      	bne.n	800331a <HAL_UART_Transmit_DMA+0x4a>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2201      	movs	r2, #1
 8003312:	4013      	ands	r3, r2
 8003314:	d001      	beq.n	800331a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e05f      	b.n	80033da <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1dba      	adds	r2, r7, #6
 8003324:	2150      	movs	r1, #80	@ 0x50
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1dba      	adds	r2, r7, #6
 800332e:	2152      	movs	r1, #82	@ 0x52
 8003330:	8812      	ldrh	r2, [r2, #0]
 8003332:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2284      	movs	r2, #132	@ 0x84
 8003338:	2100      	movs	r1, #0
 800333a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2221      	movs	r2, #33	@ 0x21
 8003340:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	2b00      	cmp	r3, #0
 8003348:	d027      	beq.n	800339a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a25      	ldr	r2, [pc, #148]	@ (80033e4 <HAL_UART_Transmit_DMA+0x114>)
 8003350:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a24      	ldr	r2, [pc, #144]	@ (80033e8 <HAL_UART_Transmit_DMA+0x118>)
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a23      	ldr	r2, [pc, #140]	@ (80033ec <HAL_UART_Transmit_DMA+0x11c>)
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	2200      	movs	r2, #0
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	0019      	movs	r1, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3328      	adds	r3, #40	@ 0x28
 800337a:	001a      	movs	r2, r3
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f7fe f890 	bl	80014a4 <HAL_DMA_Start_IT>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d008      	beq.n	800339a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2284      	movs	r2, #132	@ 0x84
 800338c:	2110      	movs	r1, #16
 800338e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e01f      	b.n	80033da <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2240      	movs	r2, #64	@ 0x40
 80033a0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a2:	f3ef 8310 	mrs	r3, PRIMASK
 80033a6:	613b      	str	r3, [r7, #16]
  return(result);
 80033a8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b008      	add	sp, #32
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	080047b9 	.word	0x080047b9
 80033e8:	08004851 	.word	0x08004851
 80033ec:	08004a57 	.word	0x08004a57

080033f0 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f8:	f3ef 8310 	mrs	r3, PRIMASK
 80033fc:	617b      	str	r3, [r7, #20]
  return(result);
 80033fe:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			@ (mov r8, r8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	21c0      	movs	r1, #192	@ 0xc0
 800341a:	438a      	bics	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f383 8810 	msr	PRIMASK, r3
}
 8003428:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2280      	movs	r2, #128	@ 0x80
 8003432:	4013      	ands	r3, r2
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d135      	bne.n	80034a4 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003438:	f3ef 8310 	mrs	r3, PRIMASK
 800343c:	60bb      	str	r3, [r7, #8]
  return(result);
 800343e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	2301      	movs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2180      	movs	r1, #128	@ 0x80
 800345a:	438a      	bics	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	2b00      	cmp	r3, #0
 8003470:	d018      	beq.n	80034a4 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	2200      	movs	r2, #0
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	0018      	movs	r0, r3
 8003480:	f7fe f876 	bl	8001570 <HAL_DMA_Abort>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d00d      	beq.n	80034a4 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	0018      	movs	r0, r3
 800348e:	f7fe f9a4 	bl	80017da <HAL_DMA_GetError>
 8003492:	0003      	movs	r3, r0
 8003494:	2b20      	cmp	r3, #32
 8003496:	d105      	bne.n	80034a4 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2284      	movs	r2, #132	@ 0x84
 800349c:	2110      	movs	r1, #16
 800349e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e007      	b.n	80034b4 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2252      	movs	r2, #82	@ 0x52
 80034a8:	2100      	movs	r1, #0
 80034aa:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b00a      	add	sp, #40	@ 0x28
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b092      	sub	sp, #72	@ 0x48
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c4:	f3ef 8310 	mrs	r3, PRIMASK
 80034c8:	623b      	str	r3, [r7, #32]
  return(result);
 80034ca:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			@ (mov r8, r8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	494b      	ldr	r1, [pc, #300]	@ (8003614 <HAL_UART_AbortReceive+0x158>)
 80034e6:	400a      	ands	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003500:	2301      	movs	r3, #1
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	438a      	bics	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	2b01      	cmp	r3, #1
 800352e:	d118      	bne.n	8003562 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003530:	f3ef 8310 	mrs	r3, PRIMASK
 8003534:	617b      	str	r3, [r7, #20]
  return(result);
 8003536:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2110      	movs	r1, #16
 8003552:	438a      	bics	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2240      	movs	r2, #64	@ 0x40
 800356a:	4013      	ands	r3, r2
 800356c:	2b40      	cmp	r3, #64	@ 0x40
 800356e:	d135      	bne.n	80035dc <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003570:	f3ef 8310 	mrs	r3, PRIMASK
 8003574:	60bb      	str	r3, [r7, #8]
  return(result);
 8003576:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800357a:	2301      	movs	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2140      	movs	r1, #64	@ 0x40
 8003592:	438a      	bics	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ae:	2200      	movs	r2, #0
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fd ffda 	bl	8001570 <HAL_DMA_Abort>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d00d      	beq.n	80035dc <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fe f908 	bl	80017da <HAL_DMA_GetError>
 80035ca:	0003      	movs	r3, r0
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d105      	bne.n	80035dc <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2284      	movs	r2, #132	@ 0x84
 80035d4:	2110      	movs	r1, #16
 80035d6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e017      	b.n	800360c <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	225a      	movs	r2, #90	@ 0x5a
 80035e0:	2100      	movs	r1, #0
 80035e2:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	220f      	movs	r2, #15
 80035ea:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2108      	movs	r1, #8
 80035f8:	430a      	orrs	r2, r1
 80035fa:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	2120      	movs	r1, #32
 8003602:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b012      	add	sp, #72	@ 0x48
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffffedf 	.word	0xfffffedf

08003618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b0ab      	sub	sp, #172	@ 0xac
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	22a4      	movs	r2, #164	@ 0xa4
 8003628:	18b9      	adds	r1, r7, r2
 800362a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	20a0      	movs	r0, #160	@ 0xa0
 8003634:	1839      	adds	r1, r7, r0
 8003636:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	219c      	movs	r1, #156	@ 0x9c
 8003640:	1879      	adds	r1, r7, r1
 8003642:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003644:	0011      	movs	r1, r2
 8003646:	18bb      	adds	r3, r7, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a99      	ldr	r2, [pc, #612]	@ (80038b0 <HAL_UART_IRQHandler+0x298>)
 800364c:	4013      	ands	r3, r2
 800364e:	2298      	movs	r2, #152	@ 0x98
 8003650:	18bc      	adds	r4, r7, r2
 8003652:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003654:	18bb      	adds	r3, r7, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800365c:	187b      	adds	r3, r7, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2220      	movs	r2, #32
 8003662:	4013      	ands	r3, r2
 8003664:	d00f      	beq.n	8003686 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003666:	183b      	adds	r3, r7, r0
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2220      	movs	r2, #32
 800366c:	4013      	ands	r3, r2
 800366e:	d00a      	beq.n	8003686 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003674:	2b00      	cmp	r3, #0
 8003676:	d100      	bne.n	800367a <HAL_UART_IRQHandler+0x62>
 8003678:	e2be      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	0010      	movs	r0, r2
 8003682:	4798      	blx	r3
      }
      return;
 8003684:	e2b8      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003686:	2398      	movs	r3, #152	@ 0x98
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <HAL_UART_IRQHandler+0x7a>
 8003690:	e114      	b.n	80038bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003692:	239c      	movs	r3, #156	@ 0x9c
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d106      	bne.n	80036ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800369e:	23a0      	movs	r3, #160	@ 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a83      	ldr	r2, [pc, #524]	@ (80038b4 <HAL_UART_IRQHandler+0x29c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_UART_IRQHandler+0x94>
 80036aa:	e107      	b.n	80038bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036ac:	23a4      	movs	r3, #164	@ 0xa4
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	d012      	beq.n	80036de <HAL_UART_IRQHandler+0xc6>
 80036b8:	23a0      	movs	r3, #160	@ 0xa0
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2284      	movs	r2, #132	@ 0x84
 80036d2:	589b      	ldr	r3, [r3, r2]
 80036d4:	2201      	movs	r2, #1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2184      	movs	r1, #132	@ 0x84
 80036dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036de:	23a4      	movs	r3, #164	@ 0xa4
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2202      	movs	r2, #2
 80036e6:	4013      	ands	r3, r2
 80036e8:	d011      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
 80036ea:	239c      	movs	r3, #156	@ 0x9c
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00b      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2202      	movs	r2, #2
 80036fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2284      	movs	r2, #132	@ 0x84
 8003702:	589b      	ldr	r3, [r3, r2]
 8003704:	2204      	movs	r2, #4
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2184      	movs	r1, #132	@ 0x84
 800370c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800370e:	23a4      	movs	r3, #164	@ 0xa4
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2204      	movs	r2, #4
 8003716:	4013      	ands	r3, r2
 8003718:	d011      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
 800371a:	239c      	movs	r3, #156	@ 0x9c
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	4013      	ands	r3, r2
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2204      	movs	r2, #4
 800372c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2284      	movs	r2, #132	@ 0x84
 8003732:	589b      	ldr	r3, [r3, r2]
 8003734:	2202      	movs	r2, #2
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2184      	movs	r1, #132	@ 0x84
 800373c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800373e:	23a4      	movs	r3, #164	@ 0xa4
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2208      	movs	r2, #8
 8003746:	4013      	ands	r3, r2
 8003748:	d017      	beq.n	800377a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800374a:	23a0      	movs	r3, #160	@ 0xa0
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	4013      	ands	r3, r2
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003756:	239c      	movs	r3, #156	@ 0x9c
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2208      	movs	r2, #8
 8003768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2284      	movs	r2, #132	@ 0x84
 800376e:	589b      	ldr	r3, [r3, r2]
 8003770:	2208      	movs	r2, #8
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2184      	movs	r1, #132	@ 0x84
 8003778:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800377a:	23a4      	movs	r3, #164	@ 0xa4
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_UART_IRQHandler+0x198>
 8003788:	23a0      	movs	r3, #160	@ 0xa0
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	04db      	lsls	r3, r3, #19
 8003792:	4013      	ands	r3, r2
 8003794:	d00c      	beq.n	80037b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2284      	movs	r2, #132	@ 0x84
 80037a4:	589b      	ldr	r3, [r3, r2]
 80037a6:	2220      	movs	r2, #32
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2184      	movs	r1, #132	@ 0x84
 80037ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2284      	movs	r2, #132	@ 0x84
 80037b4:	589b      	ldr	r3, [r3, r2]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <HAL_UART_IRQHandler+0x1a4>
 80037ba:	e21f      	b.n	8003bfc <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037bc:	23a4      	movs	r3, #164	@ 0xa4
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	4013      	ands	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037c8:	23a0      	movs	r3, #160	@ 0xa0
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2220      	movs	r2, #32
 80037d0:	4013      	ands	r3, r2
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	0010      	movs	r0, r2
 80037e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2284      	movs	r2, #132	@ 0x84
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	2194      	movs	r1, #148	@ 0x94
 80037ee:	187a      	adds	r2, r7, r1
 80037f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2240      	movs	r2, #64	@ 0x40
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d004      	beq.n	800380a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003800:	187b      	adds	r3, r7, r1
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2228      	movs	r2, #40	@ 0x28
 8003806:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003808:	d047      	beq.n	800389a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 ff6f 	bl	80046f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	4013      	ands	r3, r2
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d137      	bne.n	8003890 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003828:	2090      	movs	r0, #144	@ 0x90
 800382a:	183a      	adds	r2, r7, r0
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2140      	movs	r1, #64	@ 0x40
 8003846:	438a      	bics	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	183b      	adds	r3, r7, r0
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003852:	f383 8810 	msr	PRIMASK, r3
}
 8003856:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <HAL_UART_IRQHandler+0x2a0>)
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	0018      	movs	r0, r3
 800386e:	f7fd febf 	bl	80015f0 <HAL_DMA_Abort_IT>
 8003872:	1e03      	subs	r3, r0, #0
 8003874:	d01a      	beq.n	80038ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003880:	0018      	movs	r0, r3
 8003882:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	e012      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fa1f 	bl	8000ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388e:	e00d      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f7fd fa1a 	bl	8000ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e008      	b.n	80038ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f7fd fa15 	bl	8000ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2284      	movs	r2, #132	@ 0x84
 80038a6:	2100      	movs	r1, #0
 80038a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038aa:	e1a7      	b.n	8003bfc <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80038ae:	e1a5      	b.n	8003bfc <HAL_UART_IRQHandler+0x5e4>
 80038b0:	0000080f 	.word	0x0000080f
 80038b4:	04000120 	.word	0x04000120
 80038b8:	08004adb 	.word	0x08004adb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d000      	beq.n	80038c6 <HAL_UART_IRQHandler+0x2ae>
 80038c4:	e159      	b.n	8003b7a <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038c6:	23a4      	movs	r3, #164	@ 0xa4
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	4013      	ands	r3, r2
 80038d0:	d100      	bne.n	80038d4 <HAL_UART_IRQHandler+0x2bc>
 80038d2:	e152      	b.n	8003b7a <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038d4:	23a0      	movs	r3, #160	@ 0xa0
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	4013      	ands	r3, r2
 80038de:	d100      	bne.n	80038e2 <HAL_UART_IRQHandler+0x2ca>
 80038e0:	e14b      	b.n	8003b7a <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2210      	movs	r2, #16
 80038e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2240      	movs	r2, #64	@ 0x40
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d000      	beq.n	80038fa <HAL_UART_IRQHandler+0x2e2>
 80038f8:	e0bf      	b.n	8003a7a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	217e      	movs	r1, #126	@ 0x7e
 8003904:	187b      	adds	r3, r7, r1
 8003906:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003908:	187b      	adds	r3, r7, r1
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d100      	bne.n	8003912 <HAL_UART_IRQHandler+0x2fa>
 8003910:	e095      	b.n	8003a3e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2258      	movs	r2, #88	@ 0x58
 8003916:	5a9b      	ldrh	r3, [r3, r2]
 8003918:	187a      	adds	r2, r7, r1
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d300      	bcc.n	8003922 <HAL_UART_IRQHandler+0x30a>
 8003920:	e08d      	b.n	8003a3e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	187a      	adds	r2, r7, r1
 8003926:	215a      	movs	r1, #90	@ 0x5a
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	4013      	ands	r3, r2
 8003938:	d16f      	bne.n	8003a1a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003944:	2301      	movs	r3, #1
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	49ad      	ldr	r1, [pc, #692]	@ (8003c10 <HAL_UART_IRQHandler+0x5f8>)
 800395c:	400a      	ands	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003962:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	677b      	str	r3, [r7, #116]	@ 0x74
 8003976:	2301      	movs	r3, #1
 8003978:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	438a      	bics	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399e:	f3ef 8310 	mrs	r3, PRIMASK
 80039a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80039a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80039a8:	2301      	movs	r3, #1
 80039aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	438a      	bics	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	2120      	movs	r1, #32
 80039d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039de:	f3ef 8310 	mrs	r3, PRIMASK
 80039e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039e8:	2301      	movs	r3, #1
 80039ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2110      	movs	r1, #16
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7fd fdab 	bl	8001570 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2258      	movs	r2, #88	@ 0x58
 8003a24:	5a9a      	ldrh	r2, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	215a      	movs	r1, #90	@ 0x5a
 8003a2a:	5a5b      	ldrh	r3, [r3, r1]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fd f92c 	bl	8000c94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a3c:	e0e0      	b.n	8003c00 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2258      	movs	r2, #88	@ 0x58
 8003a42:	5a9b      	ldrh	r3, [r3, r2]
 8003a44:	227e      	movs	r2, #126	@ 0x7e
 8003a46:	18ba      	adds	r2, r7, r2
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d000      	beq.n	8003a50 <HAL_UART_IRQHandler+0x438>
 8003a4e:	e0d7      	b.n	8003c00 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d000      	beq.n	8003a62 <HAL_UART_IRQHandler+0x44a>
 8003a60:	e0ce      	b.n	8003c00 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2258      	movs	r2, #88	@ 0x58
 8003a6c:	5a9a      	ldrh	r2, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fd f90e 	bl	8000c94 <HAL_UARTEx_RxEventCallback>
      return;
 8003a78:	e0c2      	b.n	8003c00 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2258      	movs	r2, #88	@ 0x58
 8003a7e:	5a99      	ldrh	r1, [r3, r2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	225a      	movs	r2, #90	@ 0x5a
 8003a84:	5a9b      	ldrh	r3, [r3, r2]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	208e      	movs	r0, #142	@ 0x8e
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	1a8a      	subs	r2, r1, r2
 8003a8e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	225a      	movs	r2, #90	@ 0x5a
 8003a94:	5a9b      	ldrh	r3, [r3, r2]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d100      	bne.n	8003a9e <HAL_UART_IRQHandler+0x486>
 8003a9c:	e0b2      	b.n	8003c04 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x490>
 8003aa6:	e0ad      	b.n	8003c04 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab0:	2488      	movs	r4, #136	@ 0x88
 8003ab2:	193a      	adds	r2, r7, r4
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4951      	ldr	r1, [pc, #324]	@ (8003c14 <HAL_UART_IRQHandler+0x5fc>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae8:	2484      	movs	r4, #132	@ 0x84
 8003aea:	193a      	adds	r2, r7, r4
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	2301      	movs	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	2480      	movs	r4, #128	@ 0x80
 8003b36:	193a      	adds	r2, r7, r4
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2110      	movs	r1, #16
 8003b52:	438a      	bics	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7fd f88e 	bl	8000c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b78:	e044      	b.n	8003c04 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b7a:	23a4      	movs	r3, #164	@ 0xa4
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	035b      	lsls	r3, r3, #13
 8003b84:	4013      	ands	r3, r2
 8003b86:	d010      	beq.n	8003baa <HAL_UART_IRQHandler+0x592>
 8003b88:	239c      	movs	r3, #156	@ 0x9c
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	03db      	lsls	r3, r3, #15
 8003b92:	4013      	ands	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	0352      	lsls	r2, r2, #13
 8003b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f000 ffd7 	bl	8004b56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ba8:	e02f      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003baa:	23a4      	movs	r3, #164	@ 0xa4
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2280      	movs	r2, #128	@ 0x80
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d00f      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bb6:	23a0      	movs	r3, #160	@ 0xa0
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	@ 0x80
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01e      	beq.n	8003c08 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	0010      	movs	r0, r2
 8003bd2:	4798      	blx	r3
    }
    return;
 8003bd4:	e018      	b.n	8003c08 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bd6:	23a4      	movs	r3, #164	@ 0xa4
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2240      	movs	r2, #64	@ 0x40
 8003bde:	4013      	ands	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
 8003be2:	23a0      	movs	r3, #160	@ 0xa0
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2240      	movs	r2, #64	@ 0x40
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 ff85 	bl	8004b00 <UART_EndTransmit_IT>
    return;
 8003bf6:	e008      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	e006      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
    return;
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	e004      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	e002      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	e000      	b.n	8003c0a <HAL_UART_IRQHandler+0x5f2>
    return;
 8003c08:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b02b      	add	sp, #172	@ 0xac
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	fffffeff 	.word	0xfffffeff
 8003c14:	fffffedf 	.word	0xfffffedf

08003c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c64:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	589b      	ldr	r3, [r3, r2]
 8003c6c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4313      	orrs	r3, r2
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2284      	movs	r2, #132	@ 0x84
 8003c88:	589b      	ldr	r3, [r3, r2]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b08e      	sub	sp, #56	@ 0x38
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c9c:	231a      	movs	r3, #26
 8003c9e:	2218      	movs	r2, #24
 8003ca0:	189b      	adds	r3, r3, r2
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4ac3      	ldr	r2, [pc, #780]	@ (8003fd4 <UART_SetConfig+0x340>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4abe      	ldr	r2, [pc, #760]	@ (8003fd8 <UART_SetConfig+0x344>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4ab8      	ldr	r2, [pc, #736]	@ (8003fdc <UART_SetConfig+0x348>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d04:	4313      	orrs	r3, r2
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4ab4      	ldr	r2, [pc, #720]	@ (8003fe0 <UART_SetConfig+0x34c>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4ab0      	ldr	r2, [pc, #704]	@ (8003fe4 <UART_SetConfig+0x350>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d131      	bne.n	8003d8c <UART_SetConfig+0xf8>
 8003d28:	4baf      	ldr	r3, [pc, #700]	@ (8003fe8 <UART_SetConfig+0x354>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d01d      	beq.n	8003d70 <UART_SetConfig+0xdc>
 8003d34:	d823      	bhi.n	8003d7e <UART_SetConfig+0xea>
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d00c      	beq.n	8003d54 <UART_SetConfig+0xc0>
 8003d3a:	d820      	bhi.n	8003d7e <UART_SetConfig+0xea>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <UART_SetConfig+0xb2>
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d00e      	beq.n	8003d62 <UART_SetConfig+0xce>
 8003d44:	e01b      	b.n	8003d7e <UART_SetConfig+0xea>
 8003d46:	231b      	movs	r3, #27
 8003d48:	2218      	movs	r2, #24
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e0b4      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003d54:	231b      	movs	r3, #27
 8003d56:	2218      	movs	r2, #24
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e0ad      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003d62:	231b      	movs	r3, #27
 8003d64:	2218      	movs	r2, #24
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e0a6      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2218      	movs	r2, #24
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2208      	movs	r2, #8
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e09f      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2218      	movs	r2, #24
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2210      	movs	r2, #16
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e098      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a96      	ldr	r2, [pc, #600]	@ (8003fec <UART_SetConfig+0x358>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d131      	bne.n	8003dfa <UART_SetConfig+0x166>
 8003d96:	4b94      	ldr	r3, [pc, #592]	@ (8003fe8 <UART_SetConfig+0x354>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d01d      	beq.n	8003dde <UART_SetConfig+0x14a>
 8003da2:	d823      	bhi.n	8003dec <UART_SetConfig+0x158>
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d00c      	beq.n	8003dc2 <UART_SetConfig+0x12e>
 8003da8:	d820      	bhi.n	8003dec <UART_SetConfig+0x158>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <UART_SetConfig+0x120>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00e      	beq.n	8003dd0 <UART_SetConfig+0x13c>
 8003db2:	e01b      	b.n	8003dec <UART_SetConfig+0x158>
 8003db4:	231b      	movs	r3, #27
 8003db6:	2218      	movs	r2, #24
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e07d      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2218      	movs	r2, #24
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e076      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2218      	movs	r2, #24
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2204      	movs	r2, #4
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e06f      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003dde:	231b      	movs	r3, #27
 8003de0:	2218      	movs	r2, #24
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	2208      	movs	r2, #8
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e068      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003dec:	231b      	movs	r3, #27
 8003dee:	2218      	movs	r2, #24
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2210      	movs	r2, #16
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e061      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff0 <UART_SetConfig+0x35c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d106      	bne.n	8003e12 <UART_SetConfig+0x17e>
 8003e04:	231b      	movs	r3, #27
 8003e06:	2218      	movs	r2, #24
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	19db      	adds	r3, r3, r7
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e055      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a77      	ldr	r2, [pc, #476]	@ (8003ff4 <UART_SetConfig+0x360>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d106      	bne.n	8003e2a <UART_SetConfig+0x196>
 8003e1c:	231b      	movs	r3, #27
 8003e1e:	2218      	movs	r2, #24
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e049      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8003fdc <UART_SetConfig+0x348>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d13e      	bne.n	8003eb2 <UART_SetConfig+0x21e>
 8003e34:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe8 <UART_SetConfig+0x354>)
 8003e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e38:	23c0      	movs	r3, #192	@ 0xc0
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	22c0      	movs	r2, #192	@ 0xc0
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d027      	beq.n	8003e96 <UART_SetConfig+0x202>
 8003e46:	22c0      	movs	r2, #192	@ 0xc0
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d82a      	bhi.n	8003ea4 <UART_SetConfig+0x210>
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d011      	beq.n	8003e7a <UART_SetConfig+0x1e6>
 8003e56:	2280      	movs	r2, #128	@ 0x80
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d822      	bhi.n	8003ea4 <UART_SetConfig+0x210>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <UART_SetConfig+0x1d8>
 8003e62:	2280      	movs	r2, #128	@ 0x80
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <UART_SetConfig+0x1f4>
 8003e6a:	e01b      	b.n	8003ea4 <UART_SetConfig+0x210>
 8003e6c:	231b      	movs	r3, #27
 8003e6e:	2218      	movs	r2, #24
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	19db      	adds	r3, r3, r7
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e021      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003e7a:	231b      	movs	r3, #27
 8003e7c:	2218      	movs	r2, #24
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	19db      	adds	r3, r3, r7
 8003e82:	2202      	movs	r2, #2
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e01a      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003e88:	231b      	movs	r3, #27
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2204      	movs	r2, #4
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e013      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003e96:	231b      	movs	r3, #27
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e00c      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2218      	movs	r2, #24
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	2210      	movs	r2, #16
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e005      	b.n	8003ebe <UART_SetConfig+0x22a>
 8003eb2:	231b      	movs	r3, #27
 8003eb4:	2218      	movs	r2, #24
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	19db      	adds	r3, r3, r7
 8003eba:	2210      	movs	r2, #16
 8003ebc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a46      	ldr	r2, [pc, #280]	@ (8003fdc <UART_SetConfig+0x348>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d000      	beq.n	8003eca <UART_SetConfig+0x236>
 8003ec8:	e09a      	b.n	8004000 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eca:	231b      	movs	r3, #27
 8003ecc:	2218      	movs	r2, #24
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	19db      	adds	r3, r3, r7
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d01d      	beq.n	8003f14 <UART_SetConfig+0x280>
 8003ed8:	dc20      	bgt.n	8003f1c <UART_SetConfig+0x288>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d015      	beq.n	8003f0a <UART_SetConfig+0x276>
 8003ede:	dc1d      	bgt.n	8003f1c <UART_SetConfig+0x288>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <UART_SetConfig+0x256>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0x260>
 8003ee8:	e018      	b.n	8003f1c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eea:	f7fe fd91 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ef2:	e01c      	b.n	8003f2e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <UART_SetConfig+0x354>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	4013      	ands	r3, r2
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003efe:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff8 <UART_SetConfig+0x364>)
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f02:	e014      	b.n	8003f2e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <UART_SetConfig+0x368>)
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f08:	e011      	b.n	8003f2e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe fcf1 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f12:	e00c      	b.n	8003f2e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f1a:	e008      	b.n	8003f2e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f20:	231a      	movs	r3, #26
 8003f22:	2218      	movs	r2, #24
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
        break;
 8003f2c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d100      	bne.n	8003f36 <UART_SetConfig+0x2a2>
 8003f34:	e133      	b.n	800419e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	0013      	movs	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d305      	bcc.n	8003f52 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d906      	bls.n	8003f60 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003f52:	231a      	movs	r3, #26
 8003f54:	2218      	movs	r2, #24
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e11e      	b.n	800419e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	6939      	ldr	r1, [r7, #16]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	000b      	movs	r3, r1
 8003f6e:	0e1b      	lsrs	r3, r3, #24
 8003f70:	0010      	movs	r0, r2
 8003f72:	0205      	lsls	r5, r0, #8
 8003f74:	431d      	orrs	r5, r3
 8003f76:	000b      	movs	r3, r1
 8003f78:	021c      	lsls	r4, r3, #8
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	1900      	adds	r0, r0, r4
 8003f8c:	4169      	adcs	r1, r5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f7fc f948 	bl	8000230 <__aeabi_uldivmod>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	000b      	movs	r3, r1
 8003fa4:	0013      	movs	r3, r2
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003faa:	23c0      	movs	r3, #192	@ 0xc0
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d309      	bcc.n	8003fc6 <UART_SetConfig+0x332>
 8003fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	035b      	lsls	r3, r3, #13
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d204      	bcs.n	8003fc6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e0eb      	b.n	800419e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc6:	231a      	movs	r3, #26
 8003fc8:	2218      	movs	r2, #24
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e0e4      	b.n	800419e <UART_SetConfig+0x50a>
 8003fd4:	efff69f3 	.word	0xefff69f3
 8003fd8:	ffffcfff 	.word	0xffffcfff
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	fffff4ff 	.word	0xfffff4ff
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40004400 	.word	0x40004400
 8003ff0:	40004c00 	.word	0x40004c00
 8003ff4:	40005000 	.word	0x40005000
 8003ff8:	003d0900 	.word	0x003d0900
 8003ffc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	2380      	movs	r3, #128	@ 0x80
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	429a      	cmp	r2, r3
 800400a:	d000      	beq.n	800400e <UART_SetConfig+0x37a>
 800400c:	e070      	b.n	80040f0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800400e:	231b      	movs	r3, #27
 8004010:	2218      	movs	r2, #24
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d822      	bhi.n	8004062 <UART_SetConfig+0x3ce>
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	4b67      	ldr	r3, [pc, #412]	@ (80041bc <UART_SetConfig+0x528>)
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004026:	f7fe fcf3 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800402a:	0003      	movs	r3, r0
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800402e:	e021      	b.n	8004074 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe fd04 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8004034:	0003      	movs	r3, r0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004038:	e01c      	b.n	8004074 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800403a:	4b61      	ldr	r3, [pc, #388]	@ (80041c0 <UART_SetConfig+0x52c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2210      	movs	r2, #16
 8004040:	4013      	ands	r3, r2
 8004042:	d002      	beq.n	800404a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004044:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <UART_SetConfig+0x530>)
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004048:	e014      	b.n	8004074 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800404a:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <UART_SetConfig+0x534>)
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800404e:	e011      	b.n	8004074 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004050:	f7fe fc4e 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004054:	0003      	movs	r3, r0
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004058:	e00c      	b.n	8004074 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004060:	e008      	b.n	8004074 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004066:	231a      	movs	r3, #26
 8004068:	2218      	movs	r2, #24
 800406a:	189b      	adds	r3, r3, r2
 800406c:	19db      	adds	r3, r3, r7
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
        break;
 8004072:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d100      	bne.n	800407c <UART_SetConfig+0x3e8>
 800407a:	e090      	b.n	800419e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	005a      	lsls	r2, r3, #1
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	18d2      	adds	r2, r2, r3
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	0019      	movs	r1, r3
 800408e:	0010      	movs	r0, r2
 8004090:	f7fc f842 	bl	8000118 <__udivsi3>
 8004094:	0003      	movs	r3, r0
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d921      	bls.n	80040e2 <UART_SetConfig+0x44e>
 800409e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d21c      	bcs.n	80040e2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	200e      	movs	r0, #14
 80040ae:	2418      	movs	r4, #24
 80040b0:	1903      	adds	r3, r0, r4
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	210f      	movs	r1, #15
 80040b6:	438a      	bics	r2, r1
 80040b8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2207      	movs	r2, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	b299      	uxth	r1, r3
 80040c6:	1903      	adds	r3, r0, r4
 80040c8:	19db      	adds	r3, r3, r7
 80040ca:	1902      	adds	r2, r0, r4
 80040cc:	19d2      	adds	r2, r2, r7
 80040ce:	8812      	ldrh	r2, [r2, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1902      	adds	r2, r0, r4
 80040da:	19d2      	adds	r2, r2, r7
 80040dc:	8812      	ldrh	r2, [r2, #0]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e05d      	b.n	800419e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80040e2:	231a      	movs	r3, #26
 80040e4:	2218      	movs	r2, #24
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	19db      	adds	r3, r3, r7
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e056      	b.n	800419e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f0:	231b      	movs	r3, #27
 80040f2:	2218      	movs	r2, #24
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d822      	bhi.n	8004144 <UART_SetConfig+0x4b0>
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	4b32      	ldr	r3, [pc, #200]	@ (80041cc <UART_SetConfig+0x538>)
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004108:	f7fe fc82 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 800410c:	0003      	movs	r3, r0
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004110:	e021      	b.n	8004156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004112:	f7fe fc93 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8004116:	0003      	movs	r3, r0
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800411a:	e01c      	b.n	8004156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800411c:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <UART_SetConfig+0x52c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	d002      	beq.n	800412c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004126:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <UART_SetConfig+0x530>)
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800412a:	e014      	b.n	8004156 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800412c:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <UART_SetConfig+0x534>)
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004130:	e011      	b.n	8004156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7fe fbdd 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004136:	0003      	movs	r3, r0
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800413a:	e00c      	b.n	8004156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004142:	e008      	b.n	8004156 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004148:	231a      	movs	r3, #26
 800414a:	2218      	movs	r2, #24
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
        break;
 8004154:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	085a      	lsrs	r2, r3, #1
 8004162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004164:	18d2      	adds	r2, r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	0019      	movs	r1, r3
 800416c:	0010      	movs	r0, r2
 800416e:	f7fb ffd3 	bl	8000118 <__udivsi3>
 8004172:	0003      	movs	r3, r0
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d90a      	bls.n	8004192 <UART_SetConfig+0x4fe>
 800417c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800417e:	2380      	movs	r3, #128	@ 0x80
 8004180:	025b      	lsls	r3, r3, #9
 8004182:	429a      	cmp	r2, r3
 8004184:	d205      	bcs.n	8004192 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004188:	b29a      	uxth	r2, r3
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004192:	231a      	movs	r3, #26
 8004194:	2218      	movs	r2, #24
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2200      	movs	r2, #0
 80041a2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2200      	movs	r2, #0
 80041a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041aa:	231a      	movs	r3, #26
 80041ac:	2218      	movs	r2, #24
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b00e      	add	sp, #56	@ 0x38
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	080057fc 	.word	0x080057fc
 80041c0:	40021000 	.word	0x40021000
 80041c4:	003d0900 	.word	0x003d0900
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	08005820 	.word	0x08005820

080041d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	2208      	movs	r2, #8
 80041de:	4013      	ands	r3, r2
 80041e0:	d00b      	beq.n	80041fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004314 <UART_AdvFeatureConfig+0x144>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	d00b      	beq.n	800421c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a43      	ldr	r2, [pc, #268]	@ (8004318 <UART_AdvFeatureConfig+0x148>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	d00b      	beq.n	800423e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <UART_AdvFeatureConfig+0x14c>)
 800422e:	4013      	ands	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d00b      	beq.n	8004260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a34      	ldr	r2, [pc, #208]	@ (8004320 <UART_AdvFeatureConfig+0x150>)
 8004250:	4013      	ands	r3, r2
 8004252:	0019      	movs	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	2210      	movs	r2, #16
 8004266:	4013      	ands	r3, r2
 8004268:	d00b      	beq.n	8004282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a2c      	ldr	r2, [pc, #176]	@ (8004324 <UART_AdvFeatureConfig+0x154>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	2220      	movs	r2, #32
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a25      	ldr	r2, [pc, #148]	@ (8004328 <UART_AdvFeatureConfig+0x158>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	4013      	ands	r3, r2
 80042ac:	d01d      	beq.n	80042ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <UART_AdvFeatureConfig+0x15c>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	035b      	lsls	r3, r3, #13
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10b      	bne.n	80042ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <UART_AdvFeatureConfig+0x160>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2280      	movs	r2, #128	@ 0x80
 80042f0:	4013      	ands	r3, r2
 80042f2:	d00b      	beq.n	800430c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <UART_AdvFeatureConfig+0x164>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}
 8004314:	ffff7fff 	.word	0xffff7fff
 8004318:	fffdffff 	.word	0xfffdffff
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffbffff 	.word	0xfffbffff
 8004324:	ffffefff 	.word	0xffffefff
 8004328:	ffffdfff 	.word	0xffffdfff
 800432c:	ffefffff 	.word	0xffefffff
 8004330:	ff9fffff 	.word	0xff9fffff
 8004334:	fff7ffff 	.word	0xfff7ffff

08004338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b092      	sub	sp, #72	@ 0x48
 800433c:	af02      	add	r7, sp, #8
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2284      	movs	r2, #132	@ 0x84
 8004344:	2100      	movs	r1, #0
 8004346:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004348:	f7fc ff28 	bl	800119c <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2208      	movs	r2, #8
 8004358:	4013      	ands	r3, r2
 800435a:	2b08      	cmp	r3, #8
 800435c:	d12c      	bne.n	80043b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004360:	2280      	movs	r2, #128	@ 0x80
 8004362:	0391      	lsls	r1, r2, #14
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4a46      	ldr	r2, [pc, #280]	@ (8004480 <UART_CheckIdleState+0x148>)
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	f000 f88c 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d021      	beq.n	80043b8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800437e:	2301      	movs	r3, #1
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2180      	movs	r1, #128	@ 0x80
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2278      	movs	r2, #120	@ 0x78
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e05f      	b.n	8004478 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2204      	movs	r2, #4
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d146      	bne.n	8004454 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c8:	2280      	movs	r2, #128	@ 0x80
 80043ca:	03d1      	lsls	r1, r2, #15
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004480 <UART_CheckIdleState+0x148>)
 80043d0:	9200      	str	r2, [sp, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f000 f858 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 80043d8:	1e03      	subs	r3, r0, #0
 80043da:	d03b      	beq.n	8004454 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043dc:	f3ef 8310 	mrs	r3, PRIMASK
 80043e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e6:	2301      	movs	r3, #1
 80043e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4921      	ldr	r1, [pc, #132]	@ (8004484 <UART_CheckIdleState+0x14c>)
 80043fe:	400a      	ands	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440e:	f3ef 8310 	mrs	r3, PRIMASK
 8004412:	61bb      	str	r3, [r7, #24]
  return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
 8004418:	2301      	movs	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	438a      	bics	r2, r1
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f383 8810 	msr	PRIMASK, r3
}
 800443e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2280      	movs	r2, #128	@ 0x80
 8004444:	2120      	movs	r1, #32
 8004446:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2278      	movs	r2, #120	@ 0x78
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e011      	b.n	8004478 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2280      	movs	r2, #128	@ 0x80
 800445e:	2120      	movs	r1, #32
 8004460:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2278      	movs	r2, #120	@ 0x78
 8004472:	2100      	movs	r1, #0
 8004474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b010      	add	sp, #64	@ 0x40
 800447e:	bd80      	pop	{r7, pc}
 8004480:	01ffffff 	.word	0x01ffffff
 8004484:	fffffedf 	.word	0xfffffedf

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e051      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3301      	adds	r3, #1
 800449e:	d04e      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fc fe7c 	bl	800119c <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e051      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2204      	movs	r2, #4
 80044c2:	4013      	ands	r3, r2
 80044c4:	d03b      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d038      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d035      	beq.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2208      	movs	r2, #8
 80044da:	4013      	ands	r3, r2
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d111      	bne.n	8004504 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f900 	bl	80046f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2284      	movs	r2, #132	@ 0x84
 80044f4:	2108      	movs	r1, #8
 80044f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2278      	movs	r2, #120	@ 0x78
 80044fc:	2100      	movs	r1, #0
 80044fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02c      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	2380      	movs	r3, #128	@ 0x80
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	401a      	ands	r2, r3
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	429a      	cmp	r2, r3
 8004516:	d112      	bne.n	800453e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2280      	movs	r2, #128	@ 0x80
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f8e3 	bl	80046f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2284      	movs	r2, #132	@ 0x84
 800452e:	2120      	movs	r1, #32
 8004530:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2278      	movs	r2, #120	@ 0x78
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e00f      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	425a      	negs	r2, r3
 800454e:	4153      	adcs	r3, r2
 8004550:	b2db      	uxtb	r3, r3
 8004552:	001a      	movs	r2, r3
 8004554:	1dfb      	adds	r3, r7, #7
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d09e      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b004      	add	sp, #16
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b090      	sub	sp, #64	@ 0x40
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1dba      	adds	r2, r7, #6
 8004580:	2158      	movs	r1, #88	@ 0x58
 8004582:	8812      	ldrh	r2, [r2, #0]
 8004584:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2284      	movs	r2, #132	@ 0x84
 800458a:	2100      	movs	r1, #0
 800458c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2280      	movs	r2, #128	@ 0x80
 8004592:	2122      	movs	r1, #34	@ 0x22
 8004594:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	2b00      	cmp	r3, #0
 800459c:	d028      	beq.n	80045f0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a2:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <UART_Start_Receive_DMA+0x134>)
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <UART_Start_Receive_DMA+0x138>)
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	4a3c      	ldr	r2, [pc, #240]	@ (80046a4 <UART_Start_Receive_DMA+0x13c>)
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ba:	2200      	movs	r2, #0
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3324      	adds	r3, #36	@ 0x24
 80045c8:	0019      	movs	r1, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	001a      	movs	r2, r3
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	f7fc ff66 	bl	80014a4 <HAL_DMA_Start_IT>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d009      	beq.n	80045f0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2284      	movs	r2, #132	@ 0x84
 80045e0:	2110      	movs	r1, #16
 80045e2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2280      	movs	r2, #128	@ 0x80
 80045e8:	2120      	movs	r1, #32
 80045ea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e050      	b.n	8004692 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d019      	beq.n	800462c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f8:	f3ef 8310 	mrs	r3, PRIMASK
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004602:	2301      	movs	r3, #1
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	0049      	lsls	r1, r1, #1
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004622:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	f383 8810 	msr	PRIMASK, r3
}
 800462a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8310 	mrs	r3, PRIMASK
 8004630:	613b      	str	r3, [r7, #16]
  return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004636:	2301      	movs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f383 8810 	msr	PRIMASK, r3
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2101      	movs	r1, #1
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f383 8810 	msr	PRIMASK, r3
}
 800465c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465e:	f3ef 8310 	mrs	r3, PRIMASK
 8004662:	61fb      	str	r3, [r7, #28]
  return(result);
 8004664:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
 8004668:	2301      	movs	r3, #1
 800466a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2140      	movs	r1, #64	@ 0x40
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b010      	add	sp, #64	@ 0x40
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	08004871 	.word	0x08004871
 80046a0:	080049d9 	.word	0x080049d9
 80046a4:	08004a57 	.word	0x08004a57

080046a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b0:	f3ef 8310 	mrs	r3, PRIMASK
 80046b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	2301      	movs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f383 8810 	msr	PRIMASK, r3
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	21c0      	movs	r1, #192	@ 0xc0
 80046d2:	438a      	bics	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b006      	add	sp, #24
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	@ 0x38
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f8:	f3ef 8310 	mrs	r3, PRIMASK
 80046fc:	617b      	str	r3, [r7, #20]
  return(result);
 80046fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
 8004702:	2301      	movs	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4926      	ldr	r1, [pc, #152]	@ (80047b4 <UART_EndRxTransfer+0xc4>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472a:	f3ef 8310 	mrs	r3, PRIMASK
 800472e:	623b      	str	r3, [r7, #32]
  return(result);
 8004730:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	633b      	str	r3, [r7, #48]	@ 0x30
 8004734:	2301      	movs	r3, #1
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004760:	2b01      	cmp	r3, #1
 8004762:	d118      	bne.n	8004796 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	60bb      	str	r3, [r7, #8]
  return(result);
 800476a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476e:	2301      	movs	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2110      	movs	r1, #16
 8004786:	438a      	bics	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2280      	movs	r2, #128	@ 0x80
 800479a:	2120      	movs	r1, #32
 800479c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b00e      	add	sp, #56	@ 0x38
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	fffffedf 	.word	0xfffffedf

080047b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	@ 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	4013      	ands	r3, r2
 80047d0:	d135      	bne.n	800483e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	2252      	movs	r2, #82	@ 0x52
 80047d6:	2100      	movs	r1, #0
 80047d8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047da:	f3ef 8310 	mrs	r3, PRIMASK
 80047de:	60fb      	str	r3, [r7, #12]
  return(result);
 80047e0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e4:	2301      	movs	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f383 8810 	msr	PRIMASK, r3
}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	438a      	bics	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480c:	f3ef 8310 	mrs	r3, PRIMASK
 8004810:	61bb      	str	r3, [r7, #24]
  return(result);
 8004812:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f383 8810 	msr	PRIMASK, r3
}
 8004820:	46c0      	nop			@ (mov r8, r8)
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	@ 0x40
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	e004      	b.n	8004848 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800483e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004840:	0018      	movs	r0, r3
 8004842:	f7ff f9e9 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b00c      	add	sp, #48	@ 0x30
 800484e:	bd80      	pop	{r7, pc}

08004850 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff f9e1 	bl	8003c28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b004      	add	sp, #16
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b094      	sub	sp, #80	@ 0x50
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2220      	movs	r2, #32
 8004886:	4013      	ands	r3, r2
 8004888:	d16f      	bne.n	800496a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800488a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488c:	225a      	movs	r2, #90	@ 0x5a
 800488e:	2100      	movs	r1, #0
 8004890:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004892:	f3ef 8310 	mrs	r3, PRIMASK
 8004896:	617b      	str	r3, [r7, #20]
  return(result);
 8004898:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800489c:	2301      	movs	r3, #1
 800489e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4948      	ldr	r1, [pc, #288]	@ (80049d4 <UART_DMAReceiveCplt+0x164>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	623b      	str	r3, [r7, #32]
  return(result);
 80048ca:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ce:	2301      	movs	r3, #1
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	438a      	bics	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f6:	f3ef 8310 	mrs	r3, PRIMASK
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80048fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004900:	2301      	movs	r3, #1
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	f383 8810 	msr	PRIMASK, r3
}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2140      	movs	r1, #64	@ 0x40
 8004918:	438a      	bics	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	f383 8810 	msr	PRIMASK, r3
}
 8004926:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492a:	2280      	movs	r2, #128	@ 0x80
 800492c:	2120      	movs	r1, #32
 800492e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	2b01      	cmp	r3, #1
 8004936:	d118      	bne.n	800496a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004938:	f3ef 8310 	mrs	r3, PRIMASK
 800493c:	60bb      	str	r3, [r7, #8]
  return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004942:	2301      	movs	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f383 8810 	msr	PRIMASK, r3
}
 800494c:	46c0      	nop			@ (mov r8, r8)
 800494e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2110      	movs	r1, #16
 800495a:	438a      	bics	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496c:	2200      	movs	r2, #0
 800496e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004974:	2b01      	cmp	r3, #1
 8004976:	d124      	bne.n	80049c2 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497a:	225a      	movs	r2, #90	@ 0x5a
 800497c:	2100      	movs	r1, #0
 800497e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	213a      	movs	r1, #58	@ 0x3a
 8004988:	187b      	adds	r3, r7, r1
 800498a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 800498c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800498e:	2258      	movs	r2, #88	@ 0x58
 8004990:	5a9b      	ldrh	r3, [r3, r2]
 8004992:	187a      	adds	r2, r7, r1
 8004994:	8812      	ldrh	r2, [r2, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d204      	bcs.n	80049a4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800499a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499c:	187a      	adds	r2, r7, r1
 800499e:	215a      	movs	r1, #90	@ 0x5a
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a6:	2258      	movs	r2, #88	@ 0x58
 80049a8:	5a9a      	ldrh	r2, [r3, r2]
 80049aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ac:	215a      	movs	r1, #90	@ 0x5a
 80049ae:	5a5b      	ldrh	r3, [r3, r1]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7fc f96a 	bl	8000c94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c0:	e003      	b.n	80049ca <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 80049c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff f937 	bl	8003c38 <HAL_UART_RxCpltCallback>
}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b014      	add	sp, #80	@ 0x50
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	fffffeff 	.word	0xfffffeff

080049d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d128      	bne.n	8004a46 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2258      	movs	r2, #88	@ 0x58
 80049f8:	5a9b      	ldrh	r3, [r3, r2]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b299      	uxth	r1, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	225a      	movs	r2, #90	@ 0x5a
 8004a02:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	210a      	movs	r1, #10
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2258      	movs	r2, #88	@ 0x58
 8004a14:	5a9b      	ldrh	r3, [r3, r2]
 8004a16:	187a      	adds	r2, r7, r1
 8004a18:	8812      	ldrh	r2, [r2, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d804      	bhi.n	8004a28 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	187a      	adds	r2, r7, r1
 8004a22:	215a      	movs	r1, #90	@ 0x5a
 8004a24:	8812      	ldrh	r2, [r2, #0]
 8004a26:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2258      	movs	r2, #88	@ 0x58
 8004a2c:	5a9a      	ldrh	r2, [r3, r2]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	215a      	movs	r1, #90	@ 0x5a
 8004a32:	5a5b      	ldrh	r3, [r3, r1]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0011      	movs	r1, r2
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7fc f928 	bl	8000c94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a44:	e003      	b.n	8004a4e <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff f8fd 	bl	8003c48 <HAL_UART_RxHalfCpltCallback>
}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b004      	add	sp, #16
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2280      	movs	r2, #128	@ 0x80
 8004a6e:	589b      	ldr	r3, [r3, r2]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2280      	movs	r2, #128	@ 0x80
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b80      	cmp	r3, #128	@ 0x80
 8004a7e:	d10a      	bne.n	8004a96 <UART_DMAError+0x40>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b21      	cmp	r3, #33	@ 0x21
 8004a84:	d107      	bne.n	8004a96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2252      	movs	r2, #82	@ 0x52
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7ff fe09 	bl	80046a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2240      	movs	r2, #64	@ 0x40
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d10a      	bne.n	8004aba <UART_DMAError+0x64>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b22      	cmp	r3, #34	@ 0x22
 8004aa8:	d107      	bne.n	8004aba <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	225a      	movs	r2, #90	@ 0x5a
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff fe1b 	bl	80046f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2284      	movs	r2, #132	@ 0x84
 8004abe:	589b      	ldr	r3, [r3, r2]
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2184      	movs	r1, #132	@ 0x84
 8004ac8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fc f8fd 	bl	8000ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b006      	add	sp, #24
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	225a      	movs	r2, #90	@ 0x5a
 8004aec:	2100      	movs	r1, #0
 8004aee:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fc f8ea 	bl	8000ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b08:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	2301      	movs	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f383 8810 	msr	PRIMASK, r3
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2140      	movs	r1, #64	@ 0x40
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff f865 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b66:	b5b0      	push	{r4, r5, r7, lr}
 8004b68:	b08a      	sub	sp, #40	@ 0x28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	1dbb      	adds	r3, r7, #6
 8004b72:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2280      	movs	r2, #128	@ 0x80
 8004b78:	589b      	ldr	r3, [r3, r2]
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d156      	bne.n	8004c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b84:	1dbb      	adds	r3, r7, #6
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e04e      	b.n	8004c2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	015b      	lsls	r3, r3, #5
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d109      	bne.n	8004bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d001      	beq.n	8004bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e03e      	b.n	8004c2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bbc:	2527      	movs	r5, #39	@ 0x27
 8004bbe:	197c      	adds	r4, r7, r5
 8004bc0:	1dbb      	adds	r3, r7, #6
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff fccd 	bl	8004568 <UART_Start_Receive_DMA>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004bd2:	197b      	adds	r3, r7, r5
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d124      	bne.n	8004c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d11c      	bne.n	8004c1c <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2210      	movs	r2, #16
 8004be8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bea:	f3ef 8310 	mrs	r3, PRIMASK
 8004bee:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2110      	movs	r1, #16
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f383 8810 	msr	PRIMASK, r3
}
 8004c1a:	e003      	b.n	8004c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c1c:	2327      	movs	r3, #39	@ 0x27
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	2201      	movs	r2, #1
 8004c22:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004c24:	2327      	movs	r3, #39	@ 0x27
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	e000      	b.n	8004c2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b00a      	add	sp, #40	@ 0x28
 8004c34:	bdb0      	pop	{r4, r5, r7, pc}

08004c36 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 fc01 	bl	800544c <malloc>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b004      	add	sp, #16
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <ATC_Free+0x26>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 fbf4 	bl	8005460 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
  }
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b002      	add	sp, #8
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8a9b      	ldrh	r3, [r3, #20]
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	f000 fc9a 	bl	80055d8 <memset>
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}

08004cac <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	1dbb      	adds	r3, r7, #6
 8004cb8:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004cba:	2417      	movs	r4, #23
 8004cbc:	193b      	adds	r3, r7, r4
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1dba      	adds	r2, r7, #6
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	1dbb      	adds	r3, r7, #6
 8004cd0:	881a      	ldrh	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	f7fe fafb 	bl	80032d0 <HAL_UART_Transmit_DMA>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d103      	bne.n	8004ce6 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e000      	b.n	8004ce8 <ATC_TxRaw+0x3c>
      break;
 8004ce6:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8004ce8:	2317      	movs	r3, #23
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b007      	add	sp, #28
 8004cf4:	bd90      	pop	{r4, r7, pc}

08004cf6 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fe ffa8 	bl	8003c58 <HAL_UART_GetState>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	2b21      	cmp	r3, #33	@ 0x21
 8004d0c:	d007      	beq.n	8004d1e <ATC_TxBusy+0x28>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0018      	movs	r0, r3
 8004d14:	f7fe ffa0 	bl	8003c58 <HAL_UART_GetState>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	2b23      	cmp	r3, #35	@ 0x23
 8004d1c:	d101      	bne.n	8004d22 <ATC_TxBusy+0x2c>
  {
    return true;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8004d22:	2300      	movs	r3, #0
  }
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8004d3e:	f7fc fa2d 	bl	800119c <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f000 fb73 	bl	8005432 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7fe ff81 	bl	8003c58 <HAL_UART_GetState>
 8004d56:	0003      	movs	r3, r0
 8004d58:	2b22      	cmp	r3, #34	@ 0x22
 8004d5a:	d007      	beq.n	8004d6c <ATC_TxWait+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fe ff79 	bl	8003c58 <HAL_UART_GetState>
 8004d66:	0003      	movs	r3, r0
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d104      	bne.n	8004d76 <ATC_TxWait+0x4a>
    {
      answer = true;
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
      break;
 8004d74:	e01c      	b.n	8004db0 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fe ff6c 	bl	8003c58 <HAL_UART_GetState>
 8004d80:	0003      	movs	r3, r0
 8004d82:	2be0      	cmp	r3, #224	@ 0xe0
 8004d84:	d014      	beq.n	8004db0 <ATC_TxWait+0x84>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7fe ff64 	bl	8003c58 <HAL_UART_GetState>
 8004d90:	0003      	movs	r3, r0
 8004d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d94:	d00c      	beq.n	8004db0 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8004d96:	f7fc fa01 	bl	800119c <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d8cf      	bhi.n	8004d46 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe fb20 	bl	80033f0 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8004db0:	230f      	movs	r3, #15
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	781b      	ldrb	r3, [r3, #0]
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8b1b      	ldrh	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d027      	beq.n	8004e1e <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e01b      	b.n	8004e0c <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0019      	movs	r1, r3
 8004de6:	f000 fc13 	bl	8005610 <strstr>
 8004dea:	0003      	movs	r3, r0
 8004dec:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	0010      	movs	r0, r2
 8004e04:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3de      	bcc.n	8004dd4 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff ff34 	bl	8004c86 <ATC_RxFlush>
  }
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b004      	add	sp, #16
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8004e30:	230f      	movs	r3, #15
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8b1b      	ldrh	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d031      	beq.n	8004ea4 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8004e40:	230c      	movs	r3, #12
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	2200      	movs	r2, #0
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e025      	b.n	8004e96 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004e4e:	230c      	movs	r3, #12
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	881a      	ldrh	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	320a      	adds	r2, #10
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	58d3      	ldr	r3, [r2, r3]
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	f000 fbd7 	bl	8005610 <strstr>
 8004e62:	0003      	movs	r3, r0
 8004e64:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8004e78:	230c      	movs	r3, #12
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	3201      	adds	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
        break;
 8004e88:	e00c      	b.n	8004ea4 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8004e8a:	210c      	movs	r1, #12
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	3201      	adds	r2, #1
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8adb      	ldrh	r3, [r3, #22]
 8004e9a:	220c      	movs	r2, #12
 8004e9c:	18ba      	adds	r2, r7, r2
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d3d2      	bcc.n	8004e4a <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8004ea4:	230f      	movs	r3, #15
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	781b      	ldrb	r3, [r3, #0]
}
 8004eaa:	0018      	movs	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b004      	add	sp, #16
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fe fedc 	bl	8003c7c <HAL_UART_GetError>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d01f      	beq.n	8004f08 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	4252      	negs	r2, r2
 8004ed2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fe faef 	bl	80034bc <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69d9      	ldr	r1, [r3, #28]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8a9b      	ldrh	r3, [r3, #20]
 8004eea:	001a      	movs	r2, r3
 8004eec:	f7ff fe3b 	bl	8004b66 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2104      	movs	r1, #4
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7fe fea3 	bl	8003c58 <HAL_UART_GetState>
 8004f12:	0003      	movs	r3, r0
 8004f14:	2b22      	cmp	r3, #34	@ 0x22
 8004f16:	d027      	beq.n	8004f68 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7fe fe9b 	bl	8003c58 <HAL_UART_GetState>
 8004f22:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8004f24:	2b23      	cmp	r3, #35	@ 0x23
 8004f26:	d01f      	beq.n	8004f68 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4252      	negs	r2, r2
 8004f32:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7fe fabf 	bl	80034bc <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69d9      	ldr	r1, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8a9b      	ldrh	r3, [r3, #20]
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	f7ff fe0b 	bl	8004b66 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2104      	movs	r1, #4
 8004f64:	438a      	bics	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
  }
}
 8004f68:	46c0      	nop			@ (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	1dbb      	adds	r3, r7, #6
 8004f7e:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004f80:	2317      	movs	r3, #23
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d100      	bne.n	8004f90 <ATC_Init+0x20>
 8004f8e:	e07f      	b.n	8005090 <ATC_Init+0x120>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d100      	bne.n	8004f98 <ATC_Init+0x28>
 8004f96:	e07b      	b.n	8005090 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	223c      	movs	r2, #60	@ 0x3c
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fb1a 	bl	80055d8 <memset>
    if (pName != NULL)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f000 fb18 	bl	80055e8 <strncpy>
    }
    hAtc->hUart = hUart;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7ff fe37 	bl	8004c36 <ATC_Malloc>
 8004fc8:	0002      	movs	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d055      	beq.n	8005082 <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	69d8      	ldr	r0, [r3, #28]
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	001a      	movs	r2, r3
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f000 faf9 	bl	80055d8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8004fe6:	1dbb      	adds	r3, r7, #6
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff fe23 	bl	8004c36 <ATC_Malloc>
 8004ff0:	0002      	movs	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d043      	beq.n	8005086 <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a18      	ldr	r0, [r3, #32]
 8005002:	1dbb      	adds	r3, r7, #6
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	001a      	movs	r2, r3
 8005008:	2100      	movs	r1, #0
 800500a:	f000 fae5 	bl	80055d8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800500e:	1dbb      	adds	r3, r7, #6
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff fe0f 	bl	8004c36 <ATC_Malloc>
 8005018:	0002      	movs	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d031      	beq.n	800508a <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	001a      	movs	r2, r3
 8005030:	2100      	movs	r1, #0
 8005032:	f000 fad1 	bl	80055d8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1dba      	adds	r2, r7, #6
 800503a:	8812      	ldrh	r2, [r2, #0]
 800503c:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2201      	movs	r2, #1
 8005046:	4252      	negs	r2, r2
 8005048:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	69d9      	ldr	r1, [r3, #28]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8a9b      	ldrh	r3, [r3, #20]
 8005056:	001a      	movs	r2, r3
 8005058:	f7ff fd85 	bl	8004b66 <HAL_UARTEx_ReceiveToIdle_DMA>
 800505c:	1e03      	subs	r3, r0, #0
 800505e:	d116      	bne.n	800508e <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2104      	movs	r1, #4
 8005074:	438a      	bics	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
    answer = true;
 8005078:	2317      	movs	r3, #23
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e006      	b.n	8005090 <ATC_Init+0x120>
      break;
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	e004      	b.n	8005090 <ATC_Init+0x120>
      break;
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	e002      	b.n	8005090 <ATC_Init+0x120>
      break;
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	e000      	b.n	8005090 <ATC_Init+0x120>
      break;
 800508e:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8005090:	2317      	movs	r3, #23
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	4053      	eors	r3, r2
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	331c      	adds	r3, #28
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7ff fdd3 	bl	8004c58 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3324      	adds	r3, #36	@ 0x24
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fdca 	bl	8004c58 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	223c      	movs	r2, #60	@ 0x3c
 80050c8:	2100      	movs	r1, #0
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 fa84 	bl	80055d8 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 80050d0:	2317      	movs	r3, #23
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	781b      	ldrb	r3, [r3, #0]
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b006      	add	sp, #24
 80050dc:	bd80      	pop	{r7, pc}

080050de <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80050e8:	230f      	movs	r3, #15
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01f      	beq.n	800513a <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005100:	e002      	b.n	8005108 <ATC_SetEvents+0x2a>
    {
      ev++;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3301      	adds	r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	18d3      	adds	r3, r2, r3
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <ATC_SetEvents+0x46>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ee      	bne.n	8005102 <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	611a      	str	r2, [r3, #16]
    answer = true;
 8005130:	230f      	movs	r3, #15
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e002      	b.n	8005140 <ATC_SetEvents+0x62>
      break;
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	e000      	b.n	8005140 <ATC_SetEvents+0x62>
      break;
 800513e:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005140:	230f      	movs	r3, #15
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	781b      	ldrb	r3, [r3, #0]
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}

0800514e <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff feaa 	bl	8004eb2 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff fe2c 	bl	8004dbe <ATC_CheckEvents>
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800516e:	b5b0      	push	{r4, r5, r7, lr}
 8005170:	b08c      	sub	sp, #48	@ 0x30
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0018      	movs	r0, r3
 8005184:	f7ff fdb7 	bl	8004cf6 <ATC_TxBusy>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d002      	beq.n	8005192 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800518c:	2304      	movs	r3, #4
 800518e:	425b      	negs	r3, r3
 8005190:	e0e3      	b.n	800535a <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8005192:	2344      	movs	r3, #68	@ 0x44
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b05      	cmp	r3, #5
 800519a:	d902      	bls.n	80051a2 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 800519c:	2305      	movs	r3, #5
 800519e:	425b      	negs	r3, r3
 80051a0:	e0db      	b.n	800535a <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f7ff fe84 	bl	8004eb2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80051aa:	2348      	movs	r3, #72	@ 0x48
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b4:	e051      	b.n	800525a <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	617a      	str	r2, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fa ffa0 	bl	8000108 <strlen>
 80051c8:	0003      	movs	r3, r0
 80051ca:	3301      	adds	r3, #1
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7ff fd32 	bl	8004c36 <ATC_Malloc>
 80051d2:	0001      	movs	r1, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d8:	320a      	adds	r2, #10
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e2:	320a      	adds	r2, #10
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	58d3      	ldr	r3, [r2, r3]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11c      	bne.n	8005226 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 80051ec:	2327      	movs	r3, #39	@ 0x27
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e00e      	b.n	8005214 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80051f6:	2427      	movs	r4, #39	@ 0x27
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	330a      	adds	r3, #10
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	18d3      	adds	r3, r2, r3
 8005204:	0018      	movs	r0, r3
 8005206:	f7ff fd27 	bl	8004c58 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800520a:	193b      	adds	r3, r7, r4
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	193b      	adds	r3, r7, r4
 8005210:	3201      	adds	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	2327      	movs	r3, #39	@ 0x27
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800521c:	429a      	cmp	r2, r3
 800521e:	dcea      	bgt.n	80051f6 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8005220:	2303      	movs	r3, #3
 8005222:	425b      	negs	r3, r3
 8005224:	e099      	b.n	800535a <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800522a:	320a      	adds	r2, #10
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	58d3      	ldr	r3, [r2, r3]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	0011      	movs	r1, r2
 8005234:	0018      	movs	r0, r3
 8005236:	f000 fa3f 	bl	80056b8 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523e:	320a      	adds	r2, #10
 8005240:	0092      	lsls	r2, r2, #2
 8005242:	58d4      	ldr	r4, [r2, r3]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0018      	movs	r0, r3
 8005248:	f7fa ff5e 	bl	8000108 <strlen>
 800524c:	0003      	movs	r3, r0
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	3301      	adds	r3, #1
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525a:	2344      	movs	r3, #68	@ 0x44
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005262:	429a      	cmp	r2, r3
 8005264:	dba7      	blt.n	80051b6 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0018      	movs	r0, r3
 800526a:	f7ff fd0c 	bl	8004c86 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	0018      	movs	r0, r3
 8005272:	f7fa ff49 	bl	8000108 <strlen>
 8005276:	0003      	movs	r3, r0
 8005278:	b29a      	uxth	r2, r3
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	0018      	movs	r0, r3
 8005280:	f7ff fd14 	bl	8004cac <ATC_TxRaw>
 8005284:	0003      	movs	r3, r0
 8005286:	001a      	movs	r2, r3
 8005288:	2301      	movs	r3, #1
 800528a:	4053      	eors	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	425b      	negs	r3, r3
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005298:	e010      	b.n	80052bc <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	0011      	movs	r1, r2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7ff fd43 	bl	8004d2c <ATC_TxWait>
 80052a6:	0003      	movs	r3, r0
 80052a8:	001a      	movs	r2, r3
 80052aa:	2301      	movs	r3, #1
 80052ac:	4053      	eors	r3, r2
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80052b4:	2302      	movs	r3, #2
 80052b6:	425b      	negs	r3, r3
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80052ba:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80052bc:	2444      	movs	r4, #68	@ 0x44
 80052be:	193b      	adds	r3, r7, r4
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d029      	beq.n	800531a <ATC_SendReceive+0x1ac>
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d126      	bne.n	800531a <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 80052cc:	f7fb ff66 	bl	800119c <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 80052d4:	193b      	adds	r3, r7, r4
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80052de:	e014      	b.n	800530a <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 80052e0:	2001      	movs	r0, #1
 80052e2:	f000 f8a6 	bl	8005432 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80052e6:	251f      	movs	r5, #31
 80052e8:	197c      	adds	r4, r7, r5
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	0011      	movs	r1, r2
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7ff fd98 	bl	8004e26 <ATC_CheckResponse>
 80052f6:	0003      	movs	r3, r0
 80052f8:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 80052fa:	197b      	adds	r3, r7, r5
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8005302:	197b      	adds	r3, r7, r5
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005308:	e007      	b.n	800531a <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 800530a:	f7fb ff47 	bl	800119c <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005316:	429a      	cmp	r2, r3
 8005318:	d8e2      	bhi.n	80052e0 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8005320:	2326      	movs	r3, #38	@ 0x26
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	e00e      	b.n	8005348 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800532a:	2426      	movs	r4, #38	@ 0x26
 800532c:	193b      	adds	r3, r7, r4
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	330a      	adds	r3, #10
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	18d3      	adds	r3, r2, r3
 8005338:	0018      	movs	r0, r3
 800533a:	f7ff fc8d 	bl	8004c58 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800533e:	193b      	adds	r3, r7, r4
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	193b      	adds	r3, r7, r4
 8005344:	3201      	adds	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	2326      	movs	r3, #38	@ 0x26
 800534a:	18fa      	adds	r2, r7, r3
 800534c:	2344      	movs	r3, #68	@ 0x44
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3e8      	bcc.n	800532a <ATC_SendReceive+0x1bc>
  }
  return answer;
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b00c      	add	sp, #48	@ 0x30
 8005360:	bdb0      	pop	{r4, r5, r7, pc}

08005362 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	000a      	movs	r2, r1
 800536c:	1cbb      	adds	r3, r7, #2
 800536e:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005370:	1cbb      	adds	r3, r7, #2
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8a9b      	ldrh	r3, [r3, #20]
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8b1b      	ldrh	r3, [r3, #24]
 800537e:	1acb      	subs	r3, r1, r3
 8005380:	429a      	cmp	r2, r3
 8005382:	dd06      	ble.n	8005392 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8a99      	ldrh	r1, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8b1a      	ldrh	r2, [r3, #24]
 800538c:	1cbb      	adds	r3, r7, #2
 800538e:	1a8a      	subs	r2, r1, r2
 8005390:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	8b12      	ldrh	r2, [r2, #24]
 800539a:	1898      	adds	r0, r3, r2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	1cbb      	adds	r3, r7, #2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	001a      	movs	r2, r3
 80053a6:	f000 f98f 	bl	80056c8 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	8b1a      	ldrh	r2, [r3, #24]
 80053ae:	1cbb      	adds	r3, r7, #2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69d9      	ldr	r1, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8a9b      	ldrh	r3, [r3, #20]
 80053c6:	001a      	movs	r2, r3
 80053c8:	f7ff fbcd 	bl	8004b66 <HAL_UARTEx_ReceiveToIdle_DMA>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d10c      	bne.n	80053ea <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2104      	movs	r1, #4
 80053e4:	438a      	bics	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80053e8:	e01f      	b.n	800542a <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4252      	negs	r2, r2
 80053f4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fe f85e 	bl	80034bc <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69d9      	ldr	r1, [r3, #28]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8a9b      	ldrh	r3, [r3, #20]
 800540c:	001a      	movs	r2, r3
 800540e:	f7ff fbaa 	bl	8004b66 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2104      	movs	r1, #4
 8005426:	438a      	bics	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b002      	add	sp, #8
 8005430:	bd80      	pop	{r7, pc}

08005432 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f7fb feb7 	bl	80011b0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b002      	add	sp, #8
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <malloc>:
 800544c:	b510      	push	{r4, lr}
 800544e:	4b03      	ldr	r3, [pc, #12]	@ (800545c <malloc+0x10>)
 8005450:	0001      	movs	r1, r0
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	f000 f830 	bl	80054b8 <_malloc_r>
 8005458:	bd10      	pop	{r4, pc}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	2000000c 	.word	0x2000000c

08005460 <free>:
 8005460:	b510      	push	{r4, lr}
 8005462:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <free+0x10>)
 8005464:	0001      	movs	r1, r0
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	f000 f938 	bl	80056dc <_free_r>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	2000000c 	.word	0x2000000c

08005474 <sbrk_aligned>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0f      	ldr	r6, [pc, #60]	@ (80054b4 <sbrk_aligned+0x40>)
 8005478:	000d      	movs	r5, r1
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	0004      	movs	r4, r0
 800547e:	2900      	cmp	r1, #0
 8005480:	d102      	bne.n	8005488 <sbrk_aligned+0x14>
 8005482:	f000 f8db 	bl	800563c <_sbrk_r>
 8005486:	6030      	str	r0, [r6, #0]
 8005488:	0029      	movs	r1, r5
 800548a:	0020      	movs	r0, r4
 800548c:	f000 f8d6 	bl	800563c <_sbrk_r>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d103      	bne.n	800549c <sbrk_aligned+0x28>
 8005494:	2501      	movs	r5, #1
 8005496:	426d      	negs	r5, r5
 8005498:	0028      	movs	r0, r5
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	2303      	movs	r3, #3
 800549e:	1cc5      	adds	r5, r0, #3
 80054a0:	439d      	bics	r5, r3
 80054a2:	42a8      	cmp	r0, r5
 80054a4:	d0f8      	beq.n	8005498 <sbrk_aligned+0x24>
 80054a6:	1a29      	subs	r1, r5, r0
 80054a8:	0020      	movs	r0, r4
 80054aa:	f000 f8c7 	bl	800563c <_sbrk_r>
 80054ae:	3001      	adds	r0, #1
 80054b0:	d1f2      	bne.n	8005498 <sbrk_aligned+0x24>
 80054b2:	e7ef      	b.n	8005494 <sbrk_aligned+0x20>
 80054b4:	20000250 	.word	0x20000250

080054b8 <_malloc_r>:
 80054b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ba:	2203      	movs	r2, #3
 80054bc:	1ccb      	adds	r3, r1, #3
 80054be:	4393      	bics	r3, r2
 80054c0:	3308      	adds	r3, #8
 80054c2:	0005      	movs	r5, r0
 80054c4:	001f      	movs	r7, r3
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d234      	bcs.n	8005534 <_malloc_r+0x7c>
 80054ca:	270c      	movs	r7, #12
 80054cc:	42b9      	cmp	r1, r7
 80054ce:	d833      	bhi.n	8005538 <_malloc_r+0x80>
 80054d0:	0028      	movs	r0, r5
 80054d2:	f000 f871 	bl	80055b8 <__malloc_lock>
 80054d6:	4e37      	ldr	r6, [pc, #220]	@ (80055b4 <_malloc_r+0xfc>)
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	001c      	movs	r4, r3
 80054dc:	2c00      	cmp	r4, #0
 80054de:	d12f      	bne.n	8005540 <_malloc_r+0x88>
 80054e0:	0039      	movs	r1, r7
 80054e2:	0028      	movs	r0, r5
 80054e4:	f7ff ffc6 	bl	8005474 <sbrk_aligned>
 80054e8:	0004      	movs	r4, r0
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	d15f      	bne.n	80055ae <_malloc_r+0xf6>
 80054ee:	6834      	ldr	r4, [r6, #0]
 80054f0:	9400      	str	r4, [sp, #0]
 80054f2:	9b00      	ldr	r3, [sp, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d14a      	bne.n	800558e <_malloc_r+0xd6>
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d052      	beq.n	80055a2 <_malloc_r+0xea>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	0028      	movs	r0, r5
 8005500:	18e3      	adds	r3, r4, r3
 8005502:	9900      	ldr	r1, [sp, #0]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 f899 	bl	800563c <_sbrk_r>
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	4283      	cmp	r3, r0
 800550e:	d148      	bne.n	80055a2 <_malloc_r+0xea>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	0028      	movs	r0, r5
 8005514:	1aff      	subs	r7, r7, r3
 8005516:	0039      	movs	r1, r7
 8005518:	f7ff ffac 	bl	8005474 <sbrk_aligned>
 800551c:	3001      	adds	r0, #1
 800551e:	d040      	beq.n	80055a2 <_malloc_r+0xea>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	19db      	adds	r3, r3, r7
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	6833      	ldr	r3, [r6, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	2a00      	cmp	r2, #0
 800552c:	d133      	bne.n	8005596 <_malloc_r+0xde>
 800552e:	9b00      	ldr	r3, [sp, #0]
 8005530:	6033      	str	r3, [r6, #0]
 8005532:	e019      	b.n	8005568 <_malloc_r+0xb0>
 8005534:	2b00      	cmp	r3, #0
 8005536:	dac9      	bge.n	80054cc <_malloc_r+0x14>
 8005538:	230c      	movs	r3, #12
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	2000      	movs	r0, #0
 800553e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005540:	6821      	ldr	r1, [r4, #0]
 8005542:	1bc9      	subs	r1, r1, r7
 8005544:	d420      	bmi.n	8005588 <_malloc_r+0xd0>
 8005546:	290b      	cmp	r1, #11
 8005548:	d90a      	bls.n	8005560 <_malloc_r+0xa8>
 800554a:	19e2      	adds	r2, r4, r7
 800554c:	6027      	str	r7, [r4, #0]
 800554e:	42a3      	cmp	r3, r4
 8005550:	d104      	bne.n	800555c <_malloc_r+0xa4>
 8005552:	6032      	str	r2, [r6, #0]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	6011      	str	r1, [r2, #0]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	e005      	b.n	8005568 <_malloc_r+0xb0>
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	e7f9      	b.n	8005554 <_malloc_r+0x9c>
 8005560:	6862      	ldr	r2, [r4, #4]
 8005562:	42a3      	cmp	r3, r4
 8005564:	d10e      	bne.n	8005584 <_malloc_r+0xcc>
 8005566:	6032      	str	r2, [r6, #0]
 8005568:	0028      	movs	r0, r5
 800556a:	f000 f82d 	bl	80055c8 <__malloc_unlock>
 800556e:	0020      	movs	r0, r4
 8005570:	2207      	movs	r2, #7
 8005572:	300b      	adds	r0, #11
 8005574:	1d23      	adds	r3, r4, #4
 8005576:	4390      	bics	r0, r2
 8005578:	1ac2      	subs	r2, r0, r3
 800557a:	4298      	cmp	r0, r3
 800557c:	d0df      	beq.n	800553e <_malloc_r+0x86>
 800557e:	1a1b      	subs	r3, r3, r0
 8005580:	50a3      	str	r3, [r4, r2]
 8005582:	e7dc      	b.n	800553e <_malloc_r+0x86>
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e7ef      	b.n	8005568 <_malloc_r+0xb0>
 8005588:	0023      	movs	r3, r4
 800558a:	6864      	ldr	r4, [r4, #4]
 800558c:	e7a6      	b.n	80054dc <_malloc_r+0x24>
 800558e:	9c00      	ldr	r4, [sp, #0]
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	e7ad      	b.n	80054f2 <_malloc_r+0x3a>
 8005596:	001a      	movs	r2, r3
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	42a3      	cmp	r3, r4
 800559c:	d1fb      	bne.n	8005596 <_malloc_r+0xde>
 800559e:	2300      	movs	r3, #0
 80055a0:	e7da      	b.n	8005558 <_malloc_r+0xa0>
 80055a2:	230c      	movs	r3, #12
 80055a4:	0028      	movs	r0, r5
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f000 f80e 	bl	80055c8 <__malloc_unlock>
 80055ac:	e7c6      	b.n	800553c <_malloc_r+0x84>
 80055ae:	6007      	str	r7, [r0, #0]
 80055b0:	e7da      	b.n	8005568 <_malloc_r+0xb0>
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	20000254 	.word	0x20000254

080055b8 <__malloc_lock>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	4802      	ldr	r0, [pc, #8]	@ (80055c4 <__malloc_lock+0xc>)
 80055bc:	f000 f87a 	bl	80056b4 <__retarget_lock_acquire_recursive>
 80055c0:	bd10      	pop	{r4, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	20000394 	.word	0x20000394

080055c8 <__malloc_unlock>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4802      	ldr	r0, [pc, #8]	@ (80055d4 <__malloc_unlock+0xc>)
 80055cc:	f000 f873 	bl	80056b6 <__retarget_lock_release_recursive>
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	20000394 	.word	0x20000394

080055d8 <memset>:
 80055d8:	0003      	movs	r3, r0
 80055da:	1882      	adds	r2, r0, r2
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	7019      	strb	r1, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <strncpy>:
 80055e8:	0003      	movs	r3, r0
 80055ea:	b530      	push	{r4, r5, lr}
 80055ec:	001d      	movs	r5, r3
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d006      	beq.n	8005600 <strncpy+0x18>
 80055f2:	780c      	ldrb	r4, [r1, #0]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	3301      	adds	r3, #1
 80055f8:	702c      	strb	r4, [r5, #0]
 80055fa:	3101      	adds	r1, #1
 80055fc:	2c00      	cmp	r4, #0
 80055fe:	d1f5      	bne.n	80055ec <strncpy+0x4>
 8005600:	2100      	movs	r1, #0
 8005602:	189a      	adds	r2, r3, r2
 8005604:	4293      	cmp	r3, r2
 8005606:	d100      	bne.n	800560a <strncpy+0x22>
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	7019      	strb	r1, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	e7f9      	b.n	8005604 <strncpy+0x1c>

08005610 <strstr>:
 8005610:	780a      	ldrb	r2, [r1, #0]
 8005612:	b530      	push	{r4, r5, lr}
 8005614:	2a00      	cmp	r2, #0
 8005616:	d10c      	bne.n	8005632 <strstr+0x22>
 8005618:	bd30      	pop	{r4, r5, pc}
 800561a:	429a      	cmp	r2, r3
 800561c:	d108      	bne.n	8005630 <strstr+0x20>
 800561e:	2301      	movs	r3, #1
 8005620:	5ccc      	ldrb	r4, [r1, r3]
 8005622:	2c00      	cmp	r4, #0
 8005624:	d0f8      	beq.n	8005618 <strstr+0x8>
 8005626:	5cc5      	ldrb	r5, [r0, r3]
 8005628:	42a5      	cmp	r5, r4
 800562a:	d101      	bne.n	8005630 <strstr+0x20>
 800562c:	3301      	adds	r3, #1
 800562e:	e7f7      	b.n	8005620 <strstr+0x10>
 8005630:	3001      	adds	r0, #1
 8005632:	7803      	ldrb	r3, [r0, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <strstr+0xa>
 8005638:	0018      	movs	r0, r3
 800563a:	e7ed      	b.n	8005618 <strstr+0x8>

0800563c <_sbrk_r>:
 800563c:	2300      	movs	r3, #0
 800563e:	b570      	push	{r4, r5, r6, lr}
 8005640:	4d06      	ldr	r5, [pc, #24]	@ (800565c <_sbrk_r+0x20>)
 8005642:	0004      	movs	r4, r0
 8005644:	0008      	movs	r0, r1
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	f7fb fc08 	bl	8000e5c <_sbrk>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d103      	bne.n	8005658 <_sbrk_r+0x1c>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d000      	beq.n	8005658 <_sbrk_r+0x1c>
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	20000390 	.word	0x20000390

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	2000000c 	.word	0x2000000c

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	2600      	movs	r6, #0
 8005670:	4c0c      	ldr	r4, [pc, #48]	@ (80056a4 <__libc_init_array+0x38>)
 8005672:	4d0d      	ldr	r5, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	2600      	movs	r6, #0
 800567e:	f000 f877 	bl	8005770 <_init>
 8005682:	4c0a      	ldr	r4, [pc, #40]	@ (80056ac <__libc_init_array+0x40>)
 8005684:	4d0a      	ldr	r5, [pc, #40]	@ (80056b0 <__libc_init_array+0x44>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	00b3      	lsls	r3, r6, #2
 8005692:	58eb      	ldr	r3, [r5, r3]
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	00b3      	lsls	r3, r6, #2
 800569c:	58eb      	ldr	r3, [r5, r3]
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	0800584c 	.word	0x0800584c
 80056a8:	0800584c 	.word	0x0800584c
 80056ac:	08005850 	.word	0x08005850
 80056b0:	0800584c 	.word	0x0800584c

080056b4 <__retarget_lock_acquire_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_release_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <strcpy>:
 80056b8:	0003      	movs	r3, r0
 80056ba:	780a      	ldrb	r2, [r1, #0]
 80056bc:	3101      	adds	r1, #1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d1f9      	bne.n	80056ba <strcpy+0x2>
 80056c6:	4770      	bx	lr

080056c8 <memcpy>:
 80056c8:	2300      	movs	r3, #0
 80056ca:	b510      	push	{r4, lr}
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d100      	bne.n	80056d2 <memcpy+0xa>
 80056d0:	bd10      	pop	{r4, pc}
 80056d2:	5ccc      	ldrb	r4, [r1, r3]
 80056d4:	54c4      	strb	r4, [r0, r3]
 80056d6:	3301      	adds	r3, #1
 80056d8:	e7f8      	b.n	80056cc <memcpy+0x4>
	...

080056dc <_free_r>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	0005      	movs	r5, r0
 80056e0:	1e0c      	subs	r4, r1, #0
 80056e2:	d010      	beq.n	8005706 <_free_r+0x2a>
 80056e4:	3c04      	subs	r4, #4
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da00      	bge.n	80056ee <_free_r+0x12>
 80056ec:	18e4      	adds	r4, r4, r3
 80056ee:	0028      	movs	r0, r5
 80056f0:	f7ff ff62 	bl	80055b8 <__malloc_lock>
 80056f4:	4a1d      	ldr	r2, [pc, #116]	@ (800576c <_free_r+0x90>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <_free_r+0x2c>
 80056fc:	6063      	str	r3, [r4, #4]
 80056fe:	6014      	str	r4, [r2, #0]
 8005700:	0028      	movs	r0, r5
 8005702:	f7ff ff61 	bl	80055c8 <__malloc_unlock>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	42a3      	cmp	r3, r4
 800570a:	d908      	bls.n	800571e <_free_r+0x42>
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	1821      	adds	r1, r4, r0
 8005710:	428b      	cmp	r3, r1
 8005712:	d1f3      	bne.n	80056fc <_free_r+0x20>
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	1809      	adds	r1, r1, r0
 800571a:	6021      	str	r1, [r4, #0]
 800571c:	e7ee      	b.n	80056fc <_free_r+0x20>
 800571e:	001a      	movs	r2, r3
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <_free_r+0x4e>
 8005726:	42a3      	cmp	r3, r4
 8005728:	d9f9      	bls.n	800571e <_free_r+0x42>
 800572a:	6811      	ldr	r1, [r2, #0]
 800572c:	1850      	adds	r0, r2, r1
 800572e:	42a0      	cmp	r0, r4
 8005730:	d10b      	bne.n	800574a <_free_r+0x6e>
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1809      	adds	r1, r1, r0
 8005736:	1850      	adds	r0, r2, r1
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	4283      	cmp	r3, r0
 800573c:	d1e0      	bne.n	8005700 <_free_r+0x24>
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	1841      	adds	r1, r0, r1
 8005744:	6011      	str	r1, [r2, #0]
 8005746:	6053      	str	r3, [r2, #4]
 8005748:	e7da      	b.n	8005700 <_free_r+0x24>
 800574a:	42a0      	cmp	r0, r4
 800574c:	d902      	bls.n	8005754 <_free_r+0x78>
 800574e:	230c      	movs	r3, #12
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	e7d5      	b.n	8005700 <_free_r+0x24>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	1821      	adds	r1, r4, r0
 8005758:	428b      	cmp	r3, r1
 800575a:	d103      	bne.n	8005764 <_free_r+0x88>
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	1809      	adds	r1, r1, r0
 8005762:	6021      	str	r1, [r4, #0]
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	6054      	str	r4, [r2, #4]
 8005768:	e7ca      	b.n	8005700 <_free_r+0x24>
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	20000254 	.word	0x20000254

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
