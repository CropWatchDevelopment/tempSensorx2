
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006968  08006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c58  08006c58  00007c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c60  08006c60  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c64  08006c64  00007c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006c68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000060  08006cc8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200003bc  08006cc8  000083bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145a4  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e3  00000000  00000000  0001c62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00020010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  000211d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc0  00000000  00000000  00021f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019643  00000000  00000000  00039d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087507  00000000  00000000  00053370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000da8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000dea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006950 	.word	0x08006950

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006950 	.word	0x08006950

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_DMA_Init+0x38>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_DMA_Init+0x38>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_DMA_Init+0x38>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f001 fa38 	bl	80018f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f001 fa4a 	bl	800191e <HAL_NVIC_EnableIRQ>

}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b089      	sub	sp, #36	@ 0x24
 800049c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	240c      	movs	r4, #12
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2314      	movs	r3, #20
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f006 f98b 	bl	80067c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004be:	2204      	movs	r2, #4
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d6:	2201      	movs	r2, #1
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	430a      	orrs	r2, r1
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_GPIO_Init+0xb8>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_GPIO_Init+0xbc>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fdf5 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2220      	movs	r2, #32
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	23a0      	movs	r3, #160	@ 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fc67 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2220      	movs	r2, #32
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <MX_GPIO_Init+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f001 fc54 	bl	8001df0 <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	@ 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800055e:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <MX_I2C1_Init+0x7c>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000564:	22c1      	movs	r2, #193	@ 0xc1
 8000566:	00d2      	lsls	r2, r2, #3
 8000568:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800056a:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000572:	2201      	movs	r2, #1
 8000574:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_I2C1_Init+0x78>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_I2C1_Init+0x78>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fdc6 	bl	8002128 <HAL_I2C_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 fa7a 	bl	8000a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fc65 	bl	8002e78 <HAL_I2CEx_ConfigAnalogFilter>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005b2:	f000 fa71 	bl	8000a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_I2C1_Init+0x78>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fca8 	bl	8002f10 <HAL_I2CEx_ConfigDigitalFilter>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005c4:	f000 fa68 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	40005400 	.word	0x40005400

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f006 f8ea 	bl	80067c4 <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fe:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	2102      	movs	r1, #2
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	@ 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 fbd9 	bl	8001df0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	@ 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	50000400 	.word	0x50000400

08000660 <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = COLLECT_DATA;

void cb_WAKE(const char* str)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <cb_WAKE+0x18>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	2000010c 	.word	0x2000010c

0800067c <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <cb_JOIN_SUCCESS+0x18>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	20000000 	.word	0x20000000

08000698 <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <cb_NOT_JOINED+0x18>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000000 	.word	0x20000000

080006b4 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  // Check if this is a TX confirmation
  if (strstr(str, "TX:") != NULL) {
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <cb_DATA_RESPONSE+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f006 f893 	bl	80067ee <strstr>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d002      	beq.n	80006d2 <cb_DATA_RESPONSE+0x1e>
    lorawan_state = ENTER_SLEEP_MODE;
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <cb_DATA_RESPONSE+0x2c>)
 80006ce:	2205      	movs	r2, #5
 80006d0:	701a      	strb	r2, [r3, #0]
  }
  // You can parse downlink data here if needed
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	08006968 	.word	0x08006968
 80006e0:	20000000 	.word	0x20000000

080006e4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	000a      	movs	r2, r1
 80006ee:	1cbb      	adds	r3, r7, #2
 80006f0:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a07      	ldr	r2, [pc, #28]	@ (8000714 <HAL_UARTEx_RxEventCallback+0x30>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 80006fc:	1cbb      	adds	r3, r7, #2
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_UARTEx_RxEventCallback+0x34>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f005 ff23 	bl	8006550 <ATC_IdleLineCallback>
	}
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	40004800 	.word	0x40004800
 8000718:	200000d0 	.word	0x200000d0

0800071c <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief RTC Wake-up Timer Event Callback
 * This function is called when the RTC wake-up timer expires
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	// The main loop will handle the state transition
	lorawan_state = DEVICE_SLEEP; // CHANGED: Ensure state transition on wake-up
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <HAL_RTCEx_WakeUpTimerEventCallback+0x18>)
 8000726:	2206      	movs	r2, #6
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000000 	.word	0x20000000

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b09a      	sub	sp, #104	@ 0x68
 800073c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 ff75 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f933 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f7ff fea7 	bl	8000498 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f7ff fe87 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 800074e:	f7ff ff03 	bl	8000558 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000752:	f000 fa9d 	bl	8000c90 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000756:	f000 f9a5 	bl	8000aa4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Initialize ATC LoRa handle
  lora.hUart = &hlpuart1;
 800075a:	4b80      	ldr	r3, [pc, #512]	@ (800095c <main+0x224>)
 800075c:	4a80      	ldr	r2, [pc, #512]	@ (8000960 <main+0x228>)
 800075e:	601a      	str	r2, [r3, #0]
  lora.psEvents = (ATC_EventTypeDef*)events;
 8000760:	4b7e      	ldr	r3, [pc, #504]	@ (800095c <main+0x224>)
 8000762:	4a80      	ldr	r2, [pc, #512]	@ (8000964 <main+0x22c>)
 8000764:	60da      	str	r2, [r3, #12]
  lora.Events = sizeof(events) / sizeof(events[0]);
 8000766:	4b7d      	ldr	r3, [pc, #500]	@ (800095c <main+0x224>)
 8000768:	2206      	movs	r2, #6
 800076a:	611a      	str	r2, [r3, #16]
  lora.Size = 256;  // Buffer size
 800076c:	4b7b      	ldr	r3, [pc, #492]	@ (800095c <main+0x224>)
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	829a      	strh	r2, [r3, #20]
  lora.pRxBuff = malloc(lora.Size);
 8000774:	4b79      	ldr	r3, [pc, #484]	@ (800095c <main+0x224>)
 8000776:	8a9b      	ldrh	r3, [r3, #20]
 8000778:	0018      	movs	r0, r3
 800077a:	f005 ff5d 	bl	8006638 <malloc>
 800077e:	0003      	movs	r3, r0
 8000780:	001a      	movs	r2, r3
 8000782:	4b76      	ldr	r3, [pc, #472]	@ (800095c <main+0x224>)
 8000784:	61da      	str	r2, [r3, #28]
  lora.pReadBuff = malloc(lora.Size);
 8000786:	4b75      	ldr	r3, [pc, #468]	@ (800095c <main+0x224>)
 8000788:	8a9b      	ldrh	r3, [r3, #20]
 800078a:	0018      	movs	r0, r3
 800078c:	f005 ff54 	bl	8006638 <malloc>
 8000790:	0003      	movs	r3, r0
 8000792:	001a      	movs	r2, r3
 8000794:	4b71      	ldr	r3, [pc, #452]	@ (800095c <main+0x224>)
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  lora.RxIndex = 0;
 8000798:	4b70      	ldr	r3, [pc, #448]	@ (800095c <main+0x224>)
 800079a:	2200      	movs	r2, #0
 800079c:	831a      	strh	r2, [r3, #24]
  lora.RespCount = 0;
 800079e:	4b6f      	ldr	r3, [pc, #444]	@ (800095c <main+0x224>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	82da      	strh	r2, [r3, #22]
  
  // Initialize response pointers to NULL
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 80007a4:	2300      	movs	r3, #0
 80007a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80007a8:	e008      	b.n	80007bc <main+0x84>
    lora.ppResp[i] = NULL;
 80007aa:	4b6c      	ldr	r3, [pc, #432]	@ (800095c <main+0x224>)
 80007ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80007ae:	320a      	adds	r2, #10
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	2100      	movs	r1, #0
 80007b4:	50d1      	str	r1, [r2, r3]
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 80007b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007b8:	3301      	adds	r3, #1
 80007ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80007bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	ddf3      	ble.n	80007aa <main+0x72>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 80007c2:	4b66      	ldr	r3, [pc, #408]	@ (800095c <main+0x224>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f005 fdb9 	bl	800633c <ATC_Loop>
	  switch (lorawan_state) {
 80007ca:	4b67      	ldr	r3, [pc, #412]	@ (8000968 <main+0x230>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b07      	cmp	r3, #7
 80007d2:	d8f6      	bhi.n	80007c2 <main+0x8a>
 80007d4:	009a      	lsls	r2, r3, #2
 80007d6:	4b65      	ldr	r3, [pc, #404]	@ (800096c <main+0x234>)
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 80007de:	254f      	movs	r5, #79	@ 0x4f
 80007e0:	197c      	adds	r4, r7, r5
 80007e2:	4b5e      	ldr	r3, [pc, #376]	@ (800095c <main+0x224>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fb27 	bl	8000e38 <join_network>
 80007ea:	0003      	movs	r3, r0
 80007ec:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 80007ee:	197b      	adds	r3, r7, r5
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d000      	beq.n	80007f8 <main+0xc0>
 80007f6:	e0ac      	b.n	8000952 <main+0x21a>
				lorawan_state = LORAWAN_JOINING;
 80007f8:	4b5b      	ldr	r3, [pc, #364]	@ (8000968 <main+0x230>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
			} else {
				// Could implement retry logic here
			}
		}
		break;
 80007fe:	e0a8      	b.n	8000952 <main+0x21a>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 8000800:	4b5b      	ldr	r3, [pc, #364]	@ (8000970 <main+0x238>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]

		  char* CONNECTION_STATUS = NULL;
 8000806:	2300      	movs	r3, #0
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 800080a:	2348      	movs	r3, #72	@ 0x48
 800080c:	18fa      	adds	r2, r7, r3
 800080e:	4959      	ldr	r1, [pc, #356]	@ (8000974 <main+0x23c>)
 8000810:	4852      	ldr	r0, [pc, #328]	@ (800095c <main+0x224>)
 8000812:	4b59      	ldr	r3, [pc, #356]	@ (8000978 <main+0x240>)
 8000814:	9303      	str	r3, [sp, #12]
 8000816:	4b59      	ldr	r3, [pc, #356]	@ (800097c <main+0x244>)
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2302      	movs	r3, #2
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	23fa      	movs	r3, #250	@ 0xfa
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	0013      	movs	r3, r2
 8000826:	22c8      	movs	r2, #200	@ 0xc8
 8000828:	f005 fd98 	bl	800635c <ATC_SendReceive>
 800082c:	0002      	movs	r2, r0
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <main+0x248>)
 8000830:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 8000832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <main+0x108>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000838:	4b4b      	ldr	r3, [pc, #300]	@ (8000968 <main+0x230>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
			  break;
 800083e:	e08b      	b.n	8000958 <main+0x220>
		  }

		  // Create AT command with sensor data
		  char at_command[64];
		  uint16_t sensor_val = temp_ticks_2; // Use sensor data
 8000840:	2150      	movs	r1, #80	@ 0x50
 8000842:	187b      	adds	r3, r7, r1
 8000844:	4a4f      	ldr	r2, [pc, #316]	@ (8000984 <main+0x24c>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 800084a:	187b      	adds	r3, r7, r1
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	2104      	movs	r1, #4
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fb54 	bl	8000f00 <format_at_send_cmd>

		  char* ATSEND_Result = NULL;
 8000858:	2300      	movs	r3, #0
 800085a:	647b      	str	r3, [r7, #68]	@ 0x44
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK\r", "ERROR");
 800085c:	2344      	movs	r3, #68	@ 0x44
 800085e:	18fa      	adds	r2, r7, r3
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	483e      	ldr	r0, [pc, #248]	@ (800095c <main+0x224>)
 8000864:	4b48      	ldr	r3, [pc, #288]	@ (8000988 <main+0x250>)
 8000866:	9303      	str	r3, [sp, #12]
 8000868:	4b48      	ldr	r3, [pc, #288]	@ (800098c <main+0x254>)
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2302      	movs	r3, #2
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	23fa      	movs	r3, #250	@ 0xfa
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	0013      	movs	r3, r2
 8000878:	22c8      	movs	r2, #200	@ 0xc8
 800087a:	f005 fd6f 	bl	800635c <ATC_SendReceive>
 800087e:	0002      	movs	r2, r0
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <main+0x248>)
 8000882:	601a      	str	r2, [r3, #0]
		  if (resp == 1) {
 8000884:	4b3e      	ldr	r3, [pc, #248]	@ (8000980 <main+0x248>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d103      	bne.n	8000894 <main+0x15c>
			  lorawan_state = LORAWAN_DATA_SENDING;
 800088c:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <main+0x230>)
 800088e:	2204      	movs	r2, #4
 8000890:	701a      	strb	r2, [r3, #0]
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 8000892:	e061      	b.n	8000958 <main+0x220>
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000894:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <main+0x230>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	  break;
 800089a:	e05d      	b.n	8000958 <main+0x220>
	  case LORAWAN_DATA_SENDING:
			// Start timer when entering this state
			if (data_sending_start_time == 0) {
 800089c:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <main+0x258>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <main+0x176>
				data_sending_start_time = HAL_GetTick();
 80008a4:	f000 ff28 	bl	80016f8 <HAL_GetTick>
 80008a8:	0002      	movs	r2, r0
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <main+0x258>)
 80008ac:	601a      	str	r2, [r3, #0]
			}

			// Check if 10 seconds have passed
			if ((HAL_GetTick() - data_sending_start_time) >= 10000) {
 80008ae:	f000 ff23 	bl	80016f8 <HAL_GetTick>
 80008b2:	0002      	movs	r2, r0
 80008b4:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <main+0x258>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	4a36      	ldr	r2, [pc, #216]	@ (8000994 <main+0x25c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d94a      	bls.n	8000956 <main+0x21e>
				data_sending_start_time = 0; // Reset timer
 80008c0:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <main+0x258>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
				lorawan_state = ENTER_SLEEP_MODE;  // Go directly to sleep, not DEVICE_SLEEP
 80008c6:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <main+0x230>)
 80008c8:	2205      	movs	r2, #5
 80008ca:	701a      	strb	r2, [r3, #0]
			}
		break;
 80008cc:	e043      	b.n	8000956 <main+0x21e>
	  case LORAWAN_DATA_RECEIVED:
		  // Handle received downlink data (this is only for actual downlink messages)
		  lorawan_state = ENTER_SLEEP_MODE;
 80008ce:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <main+0x230>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	701a      	strb	r2, [r3, #0]
		  break;
 80008d4:	e040      	b.n	8000958 <main+0x220>
	  case ENTER_SLEEP_MODE:
		  // For now, let's test without actual sleep mode to isolate the issue
		  
		  // Use a simple delay instead of sleep mode for testing
		  HAL_Delay(5000);
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <main+0x260>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 ff17 	bl	800170c <HAL_Delay>
		  
		// CHANGED: Replaced HAL_Delay with RTC-based STOP mode
		HAL_SuspendTick(); // Suspend SysTick to prevent interrupts in STOP mode
 80008de:	f000 ff39 	bl	8001754 <HAL_SuspendTick>

		// Configure RTC wake-up timer for 5 seconds
		// LSI = 37 kHz, with RTC_WAKEUPCLOCK_RTCCLK_DIV16 = 37k/16 ≈ 2312.5 Hz
		// For 5 seconds: WakeUpCounter = 2312.5 * 5 - 1 ≈ 11561
		HAL_StatusTypeDef timer_status = HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 11561, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80008e2:	2553      	movs	r5, #83	@ 0x53
 80008e4:	197c      	adds	r4, r7, r5
 80008e6:	492d      	ldr	r1, [pc, #180]	@ (800099c <main+0x264>)
 80008e8:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <main+0x268>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 fd0d 	bl	800430c <HAL_RTCEx_SetWakeUpTimer_IT>
 80008f2:	0003      	movs	r3, r0
 80008f4:	7023      	strb	r3, [r4, #0]
		if (timer_status != HAL_OK) {
 80008f6:	197b      	adds	r3, r7, r5
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <main+0x1ce>
		  HAL_ResumeTick(); // Resume SysTick if RTC setup fails
 80008fe:	f000 ff37 	bl	8001770 <HAL_ResumeTick>
		  Error_Handler();  // Handle RTC configuration error
 8000902:	f000 f8c9 	bl	8000a98 <Error_Handler>
		}

		// Enter STOP mode
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000906:	2101      	movs	r1, #1
 8000908:	2001      	movs	r0, #1
 800090a:	f002 fb4d 	bl	8002fa8 <HAL_PWR_EnterSTOPMode>

		// After wake-up, disable wake-up timer and restore system
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800090e:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <main+0x268>)
 8000910:	0018      	movs	r0, r3
 8000912:	f003 fdd3 	bl	80044bc <HAL_RTCEx_DeactivateWakeUpTimer>
		SystemClock_Config(); // Reconfigure system clock
 8000916:	f000 f849 	bl	80009ac <SystemClock_Config>
		HAL_ResumeTick(); // Resume SysTick
 800091a:	f000 ff29 	bl	8001770 <HAL_ResumeTick>

		lorawan_state = DEVICE_SLEEP; // Transition to DEVICE_SLEEP
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <main+0x230>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
		break;
 8000924:	e018      	b.n	8000958 <main+0x220>

	  case DEVICE_SLEEP:
		  lorawan_state = COLLECT_DATA;
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <main+0x230>)
 8000928:	2207      	movs	r2, #7
 800092a:	701a      	strb	r2, [r3, #0]
	  break;
 800092c:	e014      	b.n	8000958 <main+0x220>
	  case COLLECT_DATA:
		  // Scan for sensors and read data
		  scan_i2c_bus();
 800092e:	f000 fb1d 	bl	8000f6c <scan_i2c_bus>
		  if (has_sensor_1 || has_sensor_2) {
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <main+0x26c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <main+0x20a>
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <main+0x270>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <main+0x20e>
			  sensor_init_and_read();
 8000942:	f000 fb5f 	bl	8001004 <sensor_init_and_read>
		  }
		  lorawan_state = LORAWAN_JOINED; // Go back to send data
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <main+0x230>)
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
		  break;
 800094c:	e004      	b.n	8000958 <main+0x220>
		break;
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	e737      	b.n	80007c2 <main+0x8a>
		break;
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	e735      	b.n	80007c2 <main+0x8a>
		break;
 8000956:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000958:	e733      	b.n	80007c2 <main+0x8a>
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	200000d0 	.word	0x200000d0
 8000960:	20000144 	.word	0x20000144
 8000964:	08006b9c 	.word	0x08006b9c
 8000968:	20000000 	.word	0x20000000
 800096c:	08006bcc 	.word	0x08006bcc
 8000970:	20000118 	.word	0x20000118
 8000974:	080069ac 	.word	0x080069ac
 8000978:	080069b8 	.word	0x080069b8
 800097c:	080069bc 	.word	0x080069bc
 8000980:	20000110 	.word	0x20000110
 8000984:	20000262 	.word	0x20000262
 8000988:	080069c0 	.word	0x080069c0
 800098c:	080069c8 	.word	0x080069c8
 8000990:	20000114 	.word	0x20000114
 8000994:	0000270f 	.word	0x0000270f
 8000998:	00001388 	.word	0x00001388
 800099c:	00002d29 	.word	0x00002d29
 80009a0:	2000011c 	.word	0x2000011c
 80009a4:	2000025c 	.word	0x2000025c
 80009a8:	2000025d 	.word	0x2000025d

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	2440      	movs	r4, #64	@ 0x40
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2338      	movs	r3, #56	@ 0x38
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f005 ff01 	bl	80067c4 <memset>
	    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	232c      	movs	r3, #44	@ 0x2c
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	0018      	movs	r0, r3
 80009c8:	2314      	movs	r3, #20
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f005 fef9 	bl	80067c4 <memset>
	    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2328      	movs	r3, #40	@ 0x28
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f005 fef2 	bl	80067c4 <memset>

	    /** Configure the main internal regulator output voltage
	    */
	    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <SystemClock_Config+0xe4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a94 <SystemClock_Config+0xe8>)
 80009e6:	401a      	ands	r2, r3
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <SystemClock_Config+0xe4>)
 80009ea:	2180      	movs	r1, #128	@ 0x80
 80009ec:	0109      	lsls	r1, r1, #4
 80009ee:	430a      	orrs	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]

	    /** Initializes the RCC Oscillators according to the specified parameters
	    * in the RCC_OscInitTypeDef structure.
	    */
	    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2218      	movs	r2, #24
 80009f8:	601a      	str	r2, [r3, #0]
	    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2201      	movs	r2, #1
 80009fe:	615a      	str	r2, [r3, #20]
	    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2201      	movs	r2, #1
 8000a04:	61da      	str	r2, [r3, #28]
	    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
	    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	22a0      	movs	r2, #160	@ 0xa0
 8000a10:	0212      	lsls	r2, r2, #8
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
	    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
	    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fb1f 	bl	8003060 <HAL_RCC_OscConfig>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x7e>
	    {
	        Error_Handler();
 8000a26:	f000 f837 	bl	8000a98 <Error_Handler>
	    }

	    /** Initializes the CPU, AHB and APB buses clocks
	    */
	    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	212c      	movs	r1, #44	@ 0x2c
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	220f      	movs	r2, #15
 8000a30:	601a      	str	r2, [r3, #0]
	                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
	    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
	    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
	    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]

	    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 feda 	bl	8003808 <HAL_RCC_ClockConfig>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xb0>
	    {
	        Error_Handler();
 8000a58:	f000 f81e 	bl	8000a98 <Error_Handler>
	    }
	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	222c      	movs	r2, #44	@ 0x2c
 8000a60:	601a      	str	r2, [r3, #0]
	                                |RCC_PERIPHCLK_RTC;
	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
	    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
	    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	0292      	lsls	r2, r2, #10
 8000a74:	605a      	str	r2, [r3, #4]
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f003 f8c9 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xda>
	    {
	        Error_Handler();
 8000a82:	f000 f809 	bl	8000a98 <Error_Handler>
	    }
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b01f      	add	sp, #124	@ 0x7c
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40007000 	.word	0x40007000
 8000a94:	ffffe7ff 	.word	0xffffe7ff

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8000aaa:	003b      	movs	r3, r7
 8000aac:	0018      	movs	r0, r3
 8000aae:	2328      	movs	r3, #40	@ 0x28
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f005 fe86 	bl	80067c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <MX_RTC_Init+0x74>)
 8000abc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ac6:	227f      	movs	r2, #127	@ 0x7f
 8000ac8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000acc:	22ff      	movs	r2, #255	@ 0xff
 8000ace:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f003 fa2e 	bl	8003f4c <HAL_RTC_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000af4:	f7ff ffd0 	bl	8000a98 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000af8:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <MX_RTC_Init+0x78>)
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_RTC_Init+0x70>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f003 fc04 	bl	800430c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000b08:	f7ff ffc6 	bl	8000a98 <Error_Handler>
  */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b00a      	add	sp, #40	@ 0x28
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000011c 	.word	0x2000011c
 8000b18:	40002800 	.word	0x40002800
 8000b1c:	0000500b 	.word	0x0000500b

08000b20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_RTC_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10e      	bne.n	8000b50 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_RTC_MspInit+0x3c>)
 8000b34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_RTC_MspInit+0x3c>)
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	02c9      	lsls	r1, r1, #11
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 fed5 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f000 fee7 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40002800 	.word	0x40002800
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_MspInit+0x24>)
 8000b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_MspInit+0x24>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <HAL_MspInit+0x24>)
 8000b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_MspInit+0x24>)
 8000b76:	2180      	movs	r1, #128	@ 0x80
 8000b78:	0549      	lsls	r1, r1, #21
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 fd90 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <RTC_IRQHandler+0x1c>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f003 fcde 	bl	8004584 <HAL_RTCEx_WakeUpTimerIRQHandler>
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <RTC_IRQHandler+0x1c>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f003 faf0 	bl	80041b0 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	2000011c 	.word	0x2000011c

08000bdc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 f81d 	bl	8001c22 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <DMA1_Channel2_3_IRQHandler+0x20>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 f819 	bl	8001c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	20000214 	.word	0x20000214
 8000bfc:	200001cc 	.word	0x200001cc

08000c00 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <RNG_LPUART1_IRQHandler+0x14>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f003 fee4 	bl	80049d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	20000144 	.word	0x20000144

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f005 fdfa 	bl	8006840 <__errno>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	425b      	negs	r3, r3
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	18d2      	adds	r2, r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b006      	add	sp, #24
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20005000 	.word	0x20005000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000140 	.word	0x20000140
 8000c80:	200003c0 	.word	0x200003c0

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <MX_LPUART1_UART_Init+0x58>)
 8000c98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000c9c:	22e1      	movs	r2, #225	@ 0xe1
 8000c9e:	0252      	lsls	r2, r2, #9
 8000ca0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <MX_LPUART1_UART_Init+0x54>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 fc88 	bl	80045e4 <HAL_UART_Init>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f7ff fede 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000144 	.word	0x20000144
 8000ce8:	40004800 	.word	0x40004800

08000cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	240c      	movs	r4, #12
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2314      	movs	r3, #20
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f005 fd60 	bl	80067c4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a45      	ldr	r2, [pc, #276]	@ (8000e20 <HAL_UART_MspInit+0x134>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d000      	beq.n	8000d10 <HAL_UART_MspInit+0x24>
 8000d0e:	e083      	b.n	8000e18 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d10:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <HAL_UART_MspInit+0x138>)
 8000d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d14:	4b43      	ldr	r3, [pc, #268]	@ (8000e24 <HAL_UART_MspInit+0x138>)
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	02c9      	lsls	r1, r1, #11
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <HAL_UART_MspInit+0x138>)
 8000d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d22:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <HAL_UART_MspInit+0x138>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <HAL_UART_MspInit+0x138>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2206      	movs	r2, #6
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	187a      	adds	r2, r7, r1
 8000d58:	23a0      	movs	r3, #160	@ 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 f846 	bl	8001df0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d66:	4a31      	ldr	r2, [pc, #196]	@ (8000e2c <HAL_UART_MspInit+0x140>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fddb 	bl	8001958 <HAL_DMA_Init>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000da6:	f7ff fe77 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000dae:	675a      	str	r2, [r3, #116]	@ 0x74
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0x13c>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000db8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e34 <HAL_UART_MspInit+0x148>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000dec:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fdb2 	bl	8001958 <HAL_DMA_Init>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000df8:	f7ff fe4e 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000e00:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <HAL_UART_MspInit+0x144>)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	201d      	movs	r0, #29
 8000e0e:	f000 fd71 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000e12:	201d      	movs	r0, #29
 8000e14:	f000 fd83 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b009      	add	sp, #36	@ 0x24
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40004800 	.word	0x40004800
 8000e24:	40021000 	.word	0x40021000
 8000e28:	200001cc 	.word	0x200001cc
 8000e2c:	40020030 	.word	0x40020030
 8000e30:	20000214 	.word	0x20000214
 8000e34:	4002001c 	.word	0x4002001c

08000e38 <join_network>:
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0c8      	sub	sp, #288	@ 0x120
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	230c      	movs	r3, #12
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	2308      	movs	r3, #8
 8000e48:	18fa      	adds	r2, r7, r3
 8000e4a:	490e      	ldr	r1, [pc, #56]	@ (8000e84 <join_network+0x4c>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <join_network+0x50>)
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2301      	movs	r3, #1
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <join_network+0x54>)
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	2264      	movs	r2, #100	@ 0x64
 8000e5e:	f005 fa7d 	bl	800635c <ATC_SendReceive>
 8000e62:	0003      	movs	r3, r0
 8000e64:	2286      	movs	r2, #134	@ 0x86
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	18b9      	adds	r1, r7, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	18bb      	adds	r3, r7, r2
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da01      	bge.n	8000e78 <join_network+0x40>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e000      	b.n	8000e7a <join_network+0x42>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b044      	add	sp, #272	@ 0x110
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	08006b48 	.word	0x08006b48
 8000e88:	080069d8 	.word	0x080069d8
 8000e8c:	00002710 	.word	0x00002710

08000e90 <to_hex_str>:
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	250b      	movs	r5, #11
 8000e9c:	197b      	adds	r3, r7, r5
 8000e9e:	1c0a      	adds	r2, r1, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <to_hex_str+0x6c>)
 8000ea8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000eaa:	c313      	stmia	r3!, {r0, r1, r4}
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	6019      	str	r1, [r3, #0]
 8000eb0:	7912      	ldrb	r2, [r2, #4]
 8000eb2:	711a      	strb	r2, [r3, #4]
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ebc:	e00f      	b.n	8000ede <to_hex_str+0x4e>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	18cb      	adds	r3, r1, r3
 8000eca:	2110      	movs	r1, #16
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	5c8a      	ldrb	r2, [r1, r2]
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	3b01      	subs	r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	daec      	bge.n	8000ebe <to_hex_str+0x2e>
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	18d3      	adds	r3, r2, r3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b00a      	add	sp, #40	@ 0x28
 8000ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	08006b78 	.word	0x08006b78

08000f00 <format_at_send_cmd>:
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08f      	sub	sp, #60	@ 0x3c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	200b      	movs	r0, #11
 8000f0c:	183b      	adds	r3, r7, r0
 8000f0e:	1c0a      	adds	r2, r1, #0
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	2414      	movs	r4, #20
 8000f14:	193a      	adds	r2, r7, r4
 8000f16:	183b      	adds	r3, r7, r0
 8000f18:	7819      	ldrb	r1, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ffb7 	bl	8000e90 <to_hex_str>
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <format_at_send_cmd+0x64>)
 8000f26:	0010      	movs	r0, r2
 8000f28:	0019      	movs	r1, r3
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	f005 fcbb 	bl	80068a8 <memcpy>
 8000f32:	193a      	adds	r2, r7, r4
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f005 fc4b 	bl	80067d4 <strcat>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff f8e1 	bl	8000108 <strlen>
 8000f46:	0003      	movs	r3, r0
 8000f48:	001a      	movs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	189a      	adds	r2, r3, r2
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <format_at_send_cmd+0x68>)
 8000f50:	0010      	movs	r0, r2
 8000f52:	0019      	movs	r1, r3
 8000f54:	2304      	movs	r3, #4
 8000f56:	001a      	movs	r2, r3
 8000f58:	f005 fca6 	bl	80068a8 <memcpy>
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b00f      	add	sp, #60	@ 0x3c
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	08006b8c 	.word	0x08006b8c
 8000f68:	08006b98 	.word	0x08006b98

08000f6c <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	// Reset sensor flags
	has_sensor_1 = false;
 8000f72:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <scan_i2c_bus+0x88>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <scan_i2c_bus+0x8c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <scan_i2c_bus+0x90>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	2120      	movs	r1, #32
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 f8b1 	bl	80020ec <HAL_GPIO_WritePin>
    uint8_t addr;
    HAL_Delay(100); // let bus settle
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f000 fbbe 	bl	800170c <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++)
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	2203      	movs	r2, #3
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e01e      	b.n	8000fd6 <scan_i2c_bus+0x6a>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	18db      	adds	r3, r3, r3
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	@ (8001000 <scan_i2c_bus+0x94>)
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f001 fb96 	bl	80026d8 <HAL_I2C_IsDeviceReady>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d10d      	bne.n	8000fcc <scan_i2c_bus+0x60>
        {
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b44      	cmp	r3, #68	@ 0x44
 8000fb6:	d102      	bne.n	8000fbe <scan_i2c_bus+0x52>
        		has_sensor_1 = true;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <scan_i2c_bus+0x88>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
        	}
        	if (addr == 0x46) {
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b46      	cmp	r3, #70	@ 0x46
 8000fc4:	d102      	bne.n	8000fcc <scan_i2c_bus+0x60>
        		has_sensor_2 = true;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <scan_i2c_bus+0x8c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
    for (addr = 3; addr < 0x78; addr++)
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b77      	cmp	r3, #119	@ 0x77
 8000fdc:	d9dc      	bls.n	8000f98 <scan_i2c_bus+0x2c>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <scan_i2c_bus+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f001 f881 	bl	80020ec <HAL_GPIO_WritePin>
}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	2000025c 	.word	0x2000025c
 8000ff8:	2000025d 	.word	0x2000025d
 8000ffc:	50000400 	.word	0x50000400
 8001000:	2000007c 	.word	0x2000007c

08001004 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	if (!has_sensor_1 && !has_sensor_2) {
 8001008:	4b32      	ldr	r3, [pc, #200]	@ (80010d4 <sensor_init_and_read+0xd0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	4053      	eors	r3, r2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d009      	beq.n	800102a <sensor_init_and_read+0x26>
 8001016:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <sensor_init_and_read+0xd4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	4053      	eors	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <sensor_init_and_read+0x26>
		return -1;
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	e050      	b.n	80010cc <sensor_init_and_read+0xc8>
	}
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <sensor_init_and_read+0xd8>)
 800102c:	2201      	movs	r2, #1
 800102e:	2120      	movs	r1, #32
 8001030:	0018      	movs	r0, r3
 8001032:	f001 f85b 	bl	80020ec <HAL_GPIO_WritePin>
	error = NO_ERROR;
 8001036:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <sensor_init_and_read+0xdc>)
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f000 fb65 	bl	800170c <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <sensor_init_and_read+0xd0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <sensor_init_and_read+0x72>
	{
		sht4x_init(SHT43_I2C_ADDR_44);
 800104a:	2044      	movs	r0, #68	@ 0x44
 800104c:	f000 fa14 	bl	8001478 <sht4x_init>
		sht4x_soft_reset();
 8001050:	f000 fa86 	bl	8001560 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <sensor_init_and_read+0xe0>)
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f9e4 	bl	8001424 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT43_I2C_ADDR_44);
 800105c:	2044      	movs	r0, #68	@ 0x44
 800105e:	f000 fa0b 	bl	8001478 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <sensor_init_and_read+0xe4>)
 8001064:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <sensor_init_and_read+0xe8>)
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fa15 	bl	8001498 <sht4x_measure_high_precision_ticks>
 800106e:	0003      	movs	r3, r0
 8001070:	001a      	movs	r2, r3
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <sensor_init_and_read+0xdc>)
 8001074:	801a      	strh	r2, [r3, #0]
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <sensor_init_and_read+0xd4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <sensor_init_and_read+0xa6>
	{
		sht4x_init(SHT40_I2C_ADDR_46);
 800107e:	2046      	movs	r0, #70	@ 0x46
 8001080:	f000 f9fa 	bl	8001478 <sht4x_init>
		sht4x_soft_reset();
 8001084:	f000 fa6c 	bl	8001560 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001088:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <sensor_init_and_read+0xe0>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f9ca 	bl	8001424 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT40_I2C_ADDR_46);
 8001090:	2046      	movs	r0, #70	@ 0x46
 8001092:	f000 f9f1 	bl	8001478 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001096:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <sensor_init_and_read+0xec>)
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <sensor_init_and_read+0xf0>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f000 f9fb 	bl	8001498 <sht4x_measure_high_precision_ticks>
 80010a2:	0003      	movs	r3, r0
 80010a4:	001a      	movs	r2, r3
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <sensor_init_and_read+0xdc>)
 80010a8:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <sensor_init_and_read+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	0018      	movs	r0, r3
 80010b2:	f001 f81b 	bl	80020ec <HAL_GPIO_WritePin>

	if (error) return (-200);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <sensor_init_and_read+0xdc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	5e9b      	ldrsh	r3, [r3, r2]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <sensor_init_and_read+0xc2>
 80010c0:	23c8      	movs	r3, #200	@ 0xc8
 80010c2:	425b      	negs	r3, r3
 80010c4:	e002      	b.n	80010cc <sensor_init_and_read+0xc8>
	return error;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <sensor_init_and_read+0xdc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	5e9b      	ldrsh	r3, [r3, r2]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	2000025c 	.word	0x2000025c
 80010d8:	2000025d 	.word	0x2000025d
 80010dc:	50000400 	.word	0x50000400
 80010e0:	20000266 	.word	0x20000266
 80010e4:	00002710 	.word	0x00002710
 80010e8:	20000260 	.word	0x20000260
 80010ec:	2000025e 	.word	0x2000025e
 80010f0:	20000264 	.word	0x20000264
 80010f4:	20000262 	.word	0x20000262

080010f8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b21b      	sxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	000a      	movs	r2, r1
 800112a:	1cbb      	adds	r3, r7, #2
 800112c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800112e:	230d      	movs	r3, #13
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	22ff      	movs	r2, #255	@ 0xff
 8001134:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001136:	230e      	movs	r3, #14
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2200      	movs	r2, #0
 800113c:	801a      	strh	r2, [r3, #0]
 800113e:	e038      	b.n	80011b2 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001140:	230e      	movs	r3, #14
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	220d      	movs	r2, #13
 800114e:	18bb      	adds	r3, r7, r2
 8001150:	18ba      	adds	r2, r7, r2
 8001152:	7812      	ldrb	r2, [r2, #0]
 8001154:	404a      	eors	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001158:	230c      	movs	r3, #12
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2208      	movs	r2, #8
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e01c      	b.n	800119c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001162:	210d      	movs	r1, #13
 8001164:	187b      	adds	r3, r7, r1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	da0a      	bge.n	8001184 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	18db      	adds	r3, r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	2231      	movs	r2, #49	@ 0x31
 800117a:	4053      	eors	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	187b      	adds	r3, r7, r1
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e005      	b.n	8001190 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001184:	230d      	movs	r3, #13
 8001186:	18fa      	adds	r2, r7, r3
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	18db      	adds	r3, r3, r3
 800118e:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001190:	220c      	movs	r2, #12
 8001192:	18bb      	adds	r3, r7, r2
 8001194:	18ba      	adds	r2, r7, r2
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	3a01      	subs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	230c      	movs	r3, #12
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1dd      	bne.n	8001162 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80011a6:	220e      	movs	r2, #14
 80011a8:	18bb      	adds	r3, r7, r2
 80011aa:	18ba      	adds	r2, r7, r2
 80011ac:	8812      	ldrh	r2, [r2, #0]
 80011ae:	3201      	adds	r2, #1
 80011b0:	801a      	strh	r2, [r3, #0]
 80011b2:	230e      	movs	r3, #14
 80011b4:	18fa      	adds	r2, r7, r3
 80011b6:	1cbb      	adds	r3, r7, #2
 80011b8:	8812      	ldrh	r2, [r2, #0]
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3bf      	bcc.n	8001140 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80011c0:	230d      	movs	r3, #13
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}

080011ce <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	0008      	movs	r0, r1
 80011d8:	0011      	movs	r1, r2
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	1c02      	adds	r2, r0, #0
 80011de:	801a      	strh	r2, [r3, #0]
 80011e0:	1c7b      	adds	r3, r7, #1
 80011e2:	1c0a      	adds	r2, r1, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0011      	movs	r1, r2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff ff96 	bl	8001120 <sensirion_i2c_generate_crc>
 80011f4:	0003      	movs	r3, r0
 80011f6:	001a      	movs	r2, r3
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d001      	beq.n	8001204 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	0008      	movs	r0, r1
 8001218:	0011      	movs	r1, r2
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	1c02      	adds	r2, r0, #0
 800121e:	801a      	strh	r2, [r3, #0]
 8001220:	1c7b      	adds	r3, r7, #1
 8001222:	1c0a      	adds	r2, r1, #0
 8001224:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	1cba      	adds	r2, r7, #2
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	8011      	strh	r1, [r2, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	189b      	adds	r3, r3, r2
 8001236:	1c7a      	adds	r2, r7, #1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
    return offset;
 800123c:	1cbb      	adds	r3, r7, #2
 800123e:	881b      	ldrh	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}

08001248 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6039      	str	r1, [r7, #0]
 8001250:	0011      	movs	r1, r2
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	1c02      	adds	r2, r0, #0
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	1c0a      	adds	r2, r1, #0
 800125c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f8b8 	bl	80013e0 <sensirion_i2c_hal_write>
 8001270:	0003      	movs	r3, r0
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}

0800127a <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800127a:	b5b0      	push	{r4, r5, r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	1c02      	adds	r2, r0, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	1c0a      	adds	r2, r1, #0
 800128e:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	220a      	movs	r2, #10
 800129a:	18ba      	adds	r2, r7, r2
 800129c:	1c19      	adds	r1, r3, #0
 800129e:	1c0b      	adds	r3, r1, #0
 80012a0:	18db      	adds	r3, r3, r3
 80012a2:	185b      	adds	r3, r3, r1
 80012a4:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2201      	movs	r2, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80012b4:	2304      	movs	r3, #4
 80012b6:	e06c      	b.n	8001392 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80012b8:	230a      	movs	r3, #10
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f868 	bl	800139c <sensirion_i2c_hal_read>
 80012cc:	0003      	movs	r3, r0
 80012ce:	001a      	movs	r2, r3
 80012d0:	2108      	movs	r1, #8
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	801a      	strh	r2, [r3, #0]
    if (error) {
 80012d6:	000a      	movs	r2, r1
 80012d8:	18bb      	adds	r3, r7, r2
 80012da:	2100      	movs	r1, #0
 80012dc:	5e5b      	ldrsh	r3, [r3, r1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80012e2:	18bb      	adds	r3, r7, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	5e9b      	ldrsh	r3, [r3, r2]
 80012e8:	e053      	b.n	8001392 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80012ea:	230e      	movs	r3, #14
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	230c      	movs	r3, #12
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	e041      	b.n	8001380 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80012fc:	210e      	movs	r1, #14
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001306:	187b      	adds	r3, r7, r1
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	001a      	movs	r2, r3
 8001314:	2102      	movs	r1, #2
 8001316:	f7ff ff5a 	bl	80011ce <sensirion_i2c_check_crc>
 800131a:	0003      	movs	r3, r0
 800131c:	001a      	movs	r2, r3
 800131e:	2108      	movs	r1, #8
 8001320:	187b      	adds	r3, r7, r1
 8001322:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001324:	000a      	movs	r2, r1
 8001326:	18bb      	adds	r3, r7, r2
 8001328:	2100      	movs	r1, #0
 800132a:	5e5b      	ldrsh	r3, [r3, r1]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001330:	18bb      	adds	r3, r7, r2
 8001332:	2200      	movs	r2, #0
 8001334:	5e9b      	ldrsh	r3, [r3, r2]
 8001336:	e02c      	b.n	8001392 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001338:	240e      	movs	r4, #14
 800133a:	193b      	adds	r3, r7, r4
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	18d2      	adds	r2, r2, r3
 8001342:	250c      	movs	r5, #12
 8001344:	197b      	adds	r3, r7, r5
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	1979      	adds	r1, r7, r5
 800134a:	1c58      	adds	r0, r3, #1
 800134c:	8008      	strh	r0, [r1, #0]
 800134e:	0019      	movs	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	185b      	adds	r3, r3, r1
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001358:	193b      	adds	r3, r7, r4
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	18d2      	adds	r2, r2, r3
 8001362:	197b      	adds	r3, r7, r5
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	1979      	adds	r1, r7, r5
 8001368:	1c58      	adds	r0, r3, #1
 800136a:	8008      	strh	r0, [r1, #0]
 800136c:	0019      	movs	r1, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	185b      	adds	r3, r3, r1
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001376:	193b      	adds	r3, r7, r4
 8001378:	193a      	adds	r2, r7, r4
 800137a:	8812      	ldrh	r2, [r2, #0]
 800137c:	3203      	adds	r2, #3
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	230e      	movs	r3, #14
 8001382:	18fa      	adds	r2, r7, r3
 8001384:	230a      	movs	r3, #10
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	8812      	ldrh	r2, [r2, #0]
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3b5      	bcc.n	80012fc <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800139c <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b085      	sub	sp, #20
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6039      	str	r1, [r7, #0]
 80013a4:	0011      	movs	r1, r2
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	1c02      	adds	r2, r0, #0
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	1c0a      	adds	r2, r1, #0
 80013b0:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	18db      	adds	r3, r3, r3
 80013ba:	b299      	uxth	r1, r3
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <sensirion_i2c_hal_read+0x40>)
 80013c6:	2464      	movs	r4, #100	@ 0x64
 80013c8:	9400      	str	r4, [sp, #0]
 80013ca:	f001 f87d 	bl	80024c8 <HAL_I2C_Master_Receive>
 80013ce:	0003      	movs	r3, r0
 80013d0:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b003      	add	sp, #12
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	2000007c 	.word	0x2000007c

080013e0 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6039      	str	r1, [r7, #0]
 80013e8:	0011      	movs	r1, r2
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	1c02      	adds	r2, r0, #0
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	1c0a      	adds	r2, r1, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	18db      	adds	r3, r3, r3
 80013fe:	b299      	uxth	r1, r3
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <sensirion_i2c_hal_write+0x40>)
 800140a:	2464      	movs	r4, #100	@ 0x64
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	f000 ff31 	bl	8002274 <HAL_I2C_Master_Transmit>
 8001412:	0003      	movs	r3, r0
 8001414:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b003      	add	sp, #12
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	2000007c 	.word	0x2000007c

08001424 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	22fa      	movs	r2, #250	@ 0xfa
 8001430:	0091      	lsls	r1, r2, #2
 8001432:	0018      	movs	r0, r3
 8001434:	f7fe fe70 	bl	8000118 <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	22fa      	movs	r2, #250	@ 0xfa
 8001440:	0091      	lsls	r1, r2, #2
 8001442:	0018      	movs	r0, r3
 8001444:	f7fe feee 	bl	8000224 <__aeabi_uidivmod>
 8001448:	1e0b      	subs	r3, r1, #0
 800144a:	d002      	beq.n	8001452 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001452:	f000 f99b 	bl	800178c <HAL_GetHalVersion>
 8001456:	0003      	movs	r3, r0
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <sensirion_i2c_hal_sleep_usec+0x50>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f950 	bl	800170c <HAL_Delay>
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}
 8001474:	010100ff 	.word	0x010100ff

08001478 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	0002      	movs	r2, r0
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <sht4x_init+0x1c>)
 8001486:	1dfa      	adds	r2, r7, #7
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000026e 	.word	0x2000026e

08001498 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80014a2:	2516      	movs	r5, #22
 80014a4:	197b      	adds	r3, r7, r5
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <sht4x_measure_high_precision_ticks+0xbc>)
 80014ac:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 80014ae:	260e      	movs	r6, #14
 80014b0:	19bb      	adds	r3, r7, r6
 80014b2:	2200      	movs	r2, #0
 80014b4:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 80014b6:	19bc      	adds	r4, r7, r6
 80014b8:	19bb      	adds	r3, r7, r6
 80014ba:	8819      	ldrh	r1, [r3, #0]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	22fd      	movs	r2, #253	@ 0xfd
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fea4 	bl	800120e <sensirion_i2c_add_command8_to_buffer>
 80014c6:	0003      	movs	r3, r0
 80014c8:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <sht4x_measure_high_precision_ticks+0xc0>)
 80014cc:	7818      	ldrb	r0, [r3, #0]
 80014ce:	197c      	adds	r4, r7, r5
 80014d0:	19bb      	adds	r3, r7, r6
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	0019      	movs	r1, r3
 80014d8:	f7ff feb6 	bl	8001248 <sensirion_i2c_write_data>
 80014dc:	0003      	movs	r3, r0
 80014de:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80014e0:	197b      	adds	r3, r7, r5
 80014e2:	2200      	movs	r2, #0
 80014e4:	5e9b      	ldrsh	r3, [r3, r2]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	2200      	movs	r2, #0
 80014ee:	5e9b      	ldrsh	r3, [r3, r2]
 80014f0:	e02c      	b.n	800154c <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <sht4x_measure_high_precision_ticks+0xc4>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ff95 	bl	8001424 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <sht4x_measure_high_precision_ticks+0xc0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2516      	movs	r5, #22
 8001500:	197c      	adds	r4, r7, r5
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	2204      	movs	r2, #4
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff feb7 	bl	800127a <sensirion_i2c_read_data_inplace>
 800150c:	0003      	movs	r3, r0
 800150e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001510:	197b      	adds	r3, r7, r5
 8001512:	2200      	movs	r2, #0
 8001514:	5e9b      	ldrsh	r3, [r3, r2]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 800151a:	197b      	adds	r3, r7, r5
 800151c:	2200      	movs	r2, #0
 800151e:	5e9b      	ldrsh	r3, [r3, r2]
 8001520:	e014      	b.n	800154c <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff fde7 	bl	80010f8 <sensirion_common_bytes_to_uint16_t>
 800152a:	0003      	movs	r3, r0
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3302      	adds	r3, #2
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff fdde 	bl	80010f8 <sensirion_common_bytes_to_uint16_t>
 800153c:	0003      	movs	r3, r0
 800153e:	001a      	movs	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001544:	2316      	movs	r3, #22
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2200      	movs	r2, #0
 800154a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b007      	add	sp, #28
 8001552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001554:	20000268 	.word	0x20000268
 8001558:	2000026e 	.word	0x2000026e
 800155c:	00002710 	.word	0x00002710

08001560 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001566:	250e      	movs	r5, #14
 8001568:	197b      	adds	r3, r7, r5
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <sht4x_soft_reset+0x6c>)
 8001570:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001572:	1dbb      	adds	r3, r7, #6
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001578:	1dbc      	adds	r4, r7, #6
 800157a:	1dbb      	adds	r3, r7, #6
 800157c:	8819      	ldrh	r1, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2294      	movs	r2, #148	@ 0x94
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fe43 	bl	800120e <sensirion_i2c_add_command8_to_buffer>
 8001588:	0003      	movs	r3, r0
 800158a:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <sht4x_soft_reset+0x70>)
 800158e:	7818      	ldrb	r0, [r3, #0]
 8001590:	197c      	adds	r4, r7, r5
 8001592:	1dbb      	adds	r3, r7, #6
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	0019      	movs	r1, r3
 800159a:	f7ff fe55 	bl	8001248 <sensirion_i2c_write_data>
 800159e:	0003      	movs	r3, r0
 80015a0:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80015a2:	197b      	adds	r3, r7, r5
 80015a4:	2200      	movs	r2, #0
 80015a6:	5e9b      	ldrsh	r3, [r3, r2]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <sht4x_soft_reset+0x54>
        return local_error;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	2200      	movs	r2, #0
 80015b0:	5e9b      	ldrsh	r3, [r3, r2]
 80015b2:	e007      	b.n	80015c4 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <sht4x_soft_reset+0x74>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff ff34 	bl	8001424 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80015bc:	230e      	movs	r3, #14
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	20000268 	.word	0x20000268
 80015d0:	2000026e 	.word	0x2000026e
 80015d4:	00002710 	.word	0x00002710

080015d8 <Reset_Handler>:
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <LoopForever+0x2>)
 80015da:	4685      	mov	sp, r0
 80015dc:	f7ff fb52 	bl	8000c84 <SystemInit>
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopForever+0x6>)
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopForever+0xa>)
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopForever+0xe>)
 80015e6:	2300      	movs	r3, #0
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:
 80015ea:	58d4      	ldr	r4, [r2, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:
 80015f0:	18c4      	adds	r4, r0, r3
 80015f2:	428c      	cmp	r4, r1
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopForever+0x16>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:
 8001602:	42a2      	cmp	r2, r4
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>
 8001606:	f005 f921 	bl	800684c <__libc_init_array>
 800160a:	f7ff f895 	bl	8000738 <main>

0800160e <LoopForever>:
 800160e:	e7fe      	b.n	800160e <LoopForever>
 8001610:	20005000 	.word	0x20005000
 8001614:	20000000 	.word	0x20000000
 8001618:	20000060 	.word	0x20000060
 800161c:	08006c68 	.word	0x08006c68
 8001620:	20000060 	.word	0x20000060
 8001624:	200003bc 	.word	0x200003bc

08001628 <ADC1_COMP_IRQHandler>:
 8001628:	e7fe      	b.n	8001628 <ADC1_COMP_IRQHandler>
	...

0800162c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_Init+0x3c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_Init+0x3c>)
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001644:	2000      	movs	r0, #0
 8001646:	f000 f811 	bl	800166c <HAL_InitTick>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d003      	beq.n	8001656 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e001      	b.n	800165a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001656:	f7ff fa83 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_InitTick+0x5c>)
 8001676:	681c      	ldr	r4, [r3, #0]
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_InitTick+0x60>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	0019      	movs	r1, r3
 800167e:	23fa      	movs	r3, #250	@ 0xfa
 8001680:	0098      	lsls	r0, r3, #2
 8001682:	f7fe fd49 	bl	8000118 <__udivsi3>
 8001686:	0003      	movs	r3, r0
 8001688:	0019      	movs	r1, r3
 800168a:	0020      	movs	r0, r4
 800168c:	f7fe fd44 	bl	8000118 <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	0018      	movs	r0, r3
 8001694:	f000 f953 	bl	800193e <HAL_SYSTICK_Config>
 8001698:	1e03      	subs	r3, r0, #0
 800169a:	d001      	beq.n	80016a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e00f      	b.n	80016c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d80b      	bhi.n	80016be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	2301      	movs	r3, #1
 80016aa:	425b      	negs	r3, r3
 80016ac:	2200      	movs	r2, #0
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f920 	bl	80018f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_InitTick+0x64>)
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b003      	add	sp, #12
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	20000004 	.word	0x20000004
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	20000008 	.word	0x20000008

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	001a      	movs	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	18d2      	adds	r2, r2, r3
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20000270 	.word	0x20000270

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	20000270 	.word	0x20000270

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	001a      	movs	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	189b      	adds	r3, r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	2000000c 	.word	0x2000000c

08001754 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <HAL_SuspendTick+0x18>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_SuspendTick+0x18>)
 800175e:	2102      	movs	r1, #2
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <HAL_ResumeTick+0x18>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_ResumeTick+0x18>)
 800177a:	2102      	movs	r1, #2
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <HAL_GetHalVersion+0xc>)
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	010a0700 	.word	0x010a0700

0800179c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0002      	movs	r2, r0
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ae:	d809      	bhi.n	80017c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	001a      	movs	r2, r3
 80017b6:	231f      	movs	r3, #31
 80017b8:	401a      	ands	r2, r3
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_EnableIRQ+0x30>)
 80017bc:	2101      	movs	r1, #1
 80017be:	4091      	lsls	r1, r2
 80017c0:	000a      	movs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
  }
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	0002      	movs	r2, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80017e4:	d828      	bhi.n	8001838 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e6:	4a2f      	ldr	r2, [pc, #188]	@ (80018a4 <__NVIC_SetPriority+0xd4>)
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	33c0      	adds	r3, #192	@ 0xc0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	589b      	ldr	r3, [r3, r2]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	@ 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	481f      	ldr	r0, [pc, #124]	@ (80018a4 <__NVIC_SetPriority+0xd4>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25b      	sxtb	r3, r3
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	430a      	orrs	r2, r1
 8001830:	33c0      	adds	r3, #192	@ 0xc0
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001836:	e031      	b.n	800189c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <__NVIC_SetPriority+0xd8>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	0019      	movs	r1, r3
 8001840:	230f      	movs	r3, #15
 8001842:	400b      	ands	r3, r1
 8001844:	3b08      	subs	r3, #8
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3306      	adds	r3, #6
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1dfa      	adds	r2, r7, #7
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	0011      	movs	r1, r2
 8001858:	2203      	movs	r2, #3
 800185a:	400a      	ands	r2, r1
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	21ff      	movs	r1, #255	@ 0xff
 8001860:	4091      	lsls	r1, r2
 8001862:	000a      	movs	r2, r1
 8001864:	43d2      	mvns	r2, r2
 8001866:	401a      	ands	r2, r3
 8001868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	22ff      	movs	r2, #255	@ 0xff
 8001870:	401a      	ands	r2, r3
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0018      	movs	r0, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4003      	ands	r3, r0
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001880:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <__NVIC_SetPriority+0xd8>)
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	001c      	movs	r4, r3
 8001888:	230f      	movs	r3, #15
 800188a:	4023      	ands	r3, r4
 800188c:	3b08      	subs	r3, #8
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	430a      	orrs	r2, r1
 8001892:	3306      	adds	r3, #6
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	18c3      	adds	r3, r0, r3
 8001898:	3304      	adds	r3, #4
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b003      	add	sp, #12
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	045b      	lsls	r3, r3, #17
 80018bc:	429a      	cmp	r2, r3
 80018be:	d301      	bcc.n	80018c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c0:	2301      	movs	r3, #1
 80018c2:	e010      	b.n	80018e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <SysTick_Config+0x44>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018cc:	2301      	movs	r3, #1
 80018ce:	425b      	negs	r3, r3
 80018d0:	2103      	movs	r1, #3
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff ff7c 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <SysTick_Config+0x44>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <SysTick_Config+0x44>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	210f      	movs	r1, #15
 8001900:	187b      	adds	r3, r7, r1
 8001902:	1c02      	adds	r2, r0, #0
 8001904:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	187b      	adds	r3, r7, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	0002      	movs	r2, r0
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ff33 	bl	800179c <__NVIC_EnableIRQ>
}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ffaf 	bl	80018ac <SysTick_Config>
 800194e:	0003      	movs	r3, r0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e061      	b.n	8001a2e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <HAL_DMA_Init+0xe0>)
 8001970:	4694      	mov	ip, r2
 8001972:	4463      	add	r3, ip
 8001974:	2114      	movs	r1, #20
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe fbce 	bl	8000118 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <HAL_DMA_Init+0xe4>)
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2225      	movs	r2, #37	@ 0x25
 800198e:	2102      	movs	r1, #2
 8001990:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a28      	ldr	r2, [pc, #160]	@ (8001a40 <HAL_DMA_Init+0xe8>)
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	01db      	lsls	r3, r3, #7
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_DMA_Init+0xec>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ec:	211c      	movs	r1, #28
 80019ee:	400b      	ands	r3, r1
 80019f0:	210f      	movs	r1, #15
 80019f2:	4099      	lsls	r1, r3
 80019f4:	000b      	movs	r3, r1
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_DMA_Init+0xec>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_DMA_Init+0xec>)
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	201c      	movs	r0, #28
 8001a0c:	4003      	ands	r3, r0
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <HAL_DMA_Init+0xec>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2225      	movs	r2, #37	@ 0x25
 8001a20:	2101      	movs	r1, #1
 8001a22:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	bffdfff8 	.word	0xbffdfff8
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	ffff800f 	.word	0xffff800f
 8001a44:	400200a8 	.word	0x400200a8

08001a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2317      	movs	r3, #23
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2224      	movs	r2, #36	@ 0x24
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Start_IT+0x24>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e04f      	b.n	8001b0c <HAL_DMA_Start_IT+0xc4>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2224      	movs	r2, #36	@ 0x24
 8001a70:	2101      	movs	r1, #1
 8001a72:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2225      	movs	r2, #37	@ 0x25
 8001a78:	5c9b      	ldrb	r3, [r3, r2]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d13a      	bne.n	8001af6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2225      	movs	r2, #37	@ 0x25
 8001a84:	2102      	movs	r1, #2
 8001a86:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	438a      	bics	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f974 	bl	8001d92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	210e      	movs	r1, #14
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2104      	movs	r1, #4
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	210a      	movs	r1, #10
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2224      	movs	r2, #36	@ 0x24
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001afe:	2317      	movs	r3, #23
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2202      	movs	r2, #2
 8001b04:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001b06:	2317      	movs	r3, #23
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	781b      	ldrb	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b006      	add	sp, #24
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2225      	movs	r2, #37	@ 0x25
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2204      	movs	r2, #4
 8001b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2224      	movs	r2, #36	@ 0x24
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e024      	b.n	8001b8c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	210e      	movs	r1, #14
 8001b4e:	438a      	bics	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	221c      	movs	r2, #28
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4091      	lsls	r1, r2
 8001b72:	000a      	movs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2225      	movs	r2, #37	@ 0x25
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2224      	movs	r2, #36	@ 0x24
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]

    return status;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2225      	movs	r2, #37	@ 0x25
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d006      	beq.n	8001bbe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e02a      	b.n	8001c14 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	210e      	movs	r1, #14
 8001bca:	438a      	bics	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	221c      	movs	r2, #28
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2101      	movs	r1, #1
 8001bec:	4091      	lsls	r1, r2
 8001bee:	000a      	movs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2225      	movs	r2, #37	@ 0x25
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2224      	movs	r2, #36	@ 0x24
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	0010      	movs	r0, r2
 8001c12:	4798      	blx	r3
    }
  }
  return status;
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781b      	ldrb	r3, [r3, #0]
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	221c      	movs	r2, #28
 8001c40:	4013      	ands	r3, r2
 8001c42:	2204      	movs	r2, #4
 8001c44:	409a      	lsls	r2, r3
 8001c46:	0013      	movs	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d026      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x7a>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d107      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	438a      	bics	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	221c      	movs	r2, #28
 8001c78:	401a      	ands	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d100      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x6e>
 8001c8e:	e071      	b.n	8001d74 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	0010      	movs	r0, r2
 8001c98:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001c9a:	e06b      	b.n	8001d74 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	221c      	movs	r2, #28
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	d02d      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xea>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d029      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d10b      	bne.n	8001cdc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	210a      	movs	r1, #10
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2225      	movs	r2, #37	@ 0x25
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	221c      	movs	r2, #28
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4091      	lsls	r1, r2
 8001cec:	000a      	movs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d039      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	0010      	movs	r0, r2
 8001d08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d0a:	e033      	b.n	8001d74 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	221c      	movs	r2, #28
 8001d12:	4013      	ands	r3, r2
 8001d14:	2208      	movs	r2, #8
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d02a      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x154>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2208      	movs	r2, #8
 8001d24:	4013      	ands	r3, r2
 8001d26:	d026      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	210e      	movs	r1, #14
 8001d34:	438a      	bics	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	221c      	movs	r2, #28
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	2101      	movs	r1, #1
 8001d46:	4091      	lsls	r1, r2
 8001d48:	000a      	movs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2225      	movs	r2, #37	@ 0x25
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2224      	movs	r2, #36	@ 0x24
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	0010      	movs	r0, r2
 8001d72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46c0      	nop			@ (mov r8, r8)
}
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	221c      	movs	r2, #28
 8001da6:	401a      	ands	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	2101      	movs	r1, #1
 8001dae:	4091      	lsls	r1, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d108      	bne.n	8001dd6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dd4:	e007      	b.n	8001de6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]
}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e06:	e155      	b.n	80020b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <HAL_GPIO_Init+0x30>
 8001e1e:	e146      	b.n	80020ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	409a      	lsls	r2, r3
 8001e46:	0013      	movs	r3, r2
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	2201      	movs	r2, #1
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d017      	beq.n	8001ed6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2203      	movs	r2, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d123      	bne.n	8001f2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	08da      	lsrs	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3208      	adds	r2, #8
 8001eea:	0092      	lsls	r2, r2, #2
 8001eec:	58d3      	ldr	r3, [r2, r3]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	43da      	mvns	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2107      	movs	r1, #7
 8001f0e:	400b      	ands	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	0013      	movs	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	23c0      	movs	r3, #192	@ 0xc0
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d100      	bne.n	8001f6c <HAL_GPIO_Init+0x17c>
 8001f6a:	e0a0      	b.n	80020ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6c:	4b57      	ldr	r3, [pc, #348]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f70:	4b56      	ldr	r3, [pc, #344]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f78:	4a55      	ldr	r2, [pc, #340]	@ (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	589b      	ldr	r3, [r3, r2]
 8001f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	23a0      	movs	r3, #160	@ 0xa0
 8001fa0:	05db      	lsls	r3, r3, #23
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x1f6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x1f2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	@ (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	@ (80020dc <HAL_GPIO_Init+0x2ec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x1ea>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a47      	ldr	r2, [pc, #284]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x1e6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a46      	ldr	r2, [pc, #280]	@ (80020e4 <HAL_GPIO_Init+0x2f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x1e2>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x1f8>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	2103      	movs	r1, #3
 8001fec:	400a      	ands	r2, r1
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4935      	ldr	r1, [pc, #212]	@ (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002006:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43da      	mvns	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	035b      	lsls	r3, r3, #13
 800201e:	4013      	ands	r3, r2
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43da      	mvns	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	039b      	lsls	r3, r3, #14
 8002048:	4013      	ands	r3, r2
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800205a:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	029b      	lsls	r3, r3, #10
 8002072:	4013      	ands	r3, r2
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43da      	mvns	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	4013      	ands	r3, r2
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_GPIO_Init+0x2f8>)
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	40da      	lsrs	r2, r3
 80020bc:	1e13      	subs	r3, r2, #0
 80020be:	d000      	beq.n	80020c2 <HAL_GPIO_Init+0x2d2>
 80020c0:	e6a2      	b.n	8001e08 <HAL_GPIO_Init+0x18>
  }
}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b006      	add	sp, #24
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	50000400 	.word	0x50000400
 80020d8:	50000800 	.word	0x50000800
 80020dc:	50000c00 	.word	0x50000c00
 80020e0:	50001000 	.word	0x50001000
 80020e4:	50001c00 	.word	0x50001c00
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	0008      	movs	r0, r1
 80020f6:	0011      	movs	r1, r2
 80020f8:	1cbb      	adds	r3, r7, #2
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	1c7b      	adds	r3, r7, #1
 8002100:	1c0a      	adds	r2, r1, #0
 8002102:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002104:	1c7b      	adds	r3, r7, #1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210c:	1cbb      	adds	r3, r7, #2
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002116:	1cbb      	adds	r3, r7, #2
 8002118:	881a      	ldrh	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e08f      	b.n	800225a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2241      	movs	r2, #65	@ 0x41
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d107      	bne.n	8002156 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f7fe fa41 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2241      	movs	r2, #65	@ 0x41
 800215a:	2124      	movs	r1, #36	@ 0x24
 800215c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	438a      	bics	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	493b      	ldr	r1, [pc, #236]	@ (8002264 <HAL_I2C_Init+0x13c>)
 8002178:	400a      	ands	r2, r1
 800217a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4938      	ldr	r1, [pc, #224]	@ (8002268 <HAL_I2C_Init+0x140>)
 8002188:	400a      	ands	r2, r1
 800218a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	0209      	lsls	r1, r1, #8
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e007      	b.n	80021b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2184      	movs	r1, #132	@ 0x84
 80021b0:	0209      	lsls	r1, r1, #8
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d109      	bne.n	80021d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0109      	lsls	r1, r1, #4
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	e007      	b.n	80021e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4923      	ldr	r1, [pc, #140]	@ (800226c <HAL_I2C_Init+0x144>)
 80021de:	400a      	ands	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4920      	ldr	r1, [pc, #128]	@ (8002270 <HAL_I2C_Init+0x148>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	491a      	ldr	r1, [pc, #104]	@ (8002268 <HAL_I2C_Init+0x140>)
 80021fe:	400a      	ands	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	431a      	orrs	r2, r3
 800220c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2241      	movs	r2, #65	@ 0x41
 8002246:	2120      	movs	r1, #32
 8002248:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2242      	movs	r2, #66	@ 0x42
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	f0ffffff 	.word	0xf0ffffff
 8002268:	ffff7fff 	.word	0xffff7fff
 800226c:	fffff7ff 	.word	0xfffff7ff
 8002270:	02008000 	.word	0x02008000

08002274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	0008      	movs	r0, r1
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	0019      	movs	r1, r3
 8002282:	230a      	movs	r3, #10
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	1c02      	adds	r2, r0, #0
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	2308      	movs	r3, #8
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	1c0a      	adds	r2, r1, #0
 8002290:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2241      	movs	r2, #65	@ 0x41
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b20      	cmp	r3, #32
 800229c:	d000      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x2c>
 800229e:	e10a      	b.n	80024b6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	5c9b      	ldrb	r3, [r3, r2]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Master_Transmit+0x3a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e104      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2240      	movs	r2, #64	@ 0x40
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b6:	f7ff fa1f 	bl	80016f8 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	0219      	lsls	r1, r3, #8
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2319      	movs	r3, #25
 80022ca:	2201      	movs	r2, #1
 80022cc:	f000 fb22 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0ef      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2241      	movs	r2, #65	@ 0x41
 80022dc:	2121      	movs	r1, #33	@ 0x21
 80022de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2242      	movs	r2, #66	@ 0x42
 80022e4:	2110      	movs	r1, #16
 80022e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2208      	movs	r2, #8
 80022f8:	18ba      	adds	r2, r7, r2
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2bff      	cmp	r3, #255	@ 0xff
 800230c:	d906      	bls.n	800231c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	22ff      	movs	r2, #255	@ 0xff
 8002312:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	045b      	lsls	r3, r3, #17
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e007      	b.n	800232c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	049b      	lsls	r3, r3, #18
 800232a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d027      	beq.n	8002384 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	697c      	ldr	r4, [r7, #20]
 8002370:	230a      	movs	r3, #10
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	8819      	ldrh	r1, [r3, #0]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	4b51      	ldr	r3, [pc, #324]	@ (80024c0 <HAL_I2C_Master_Transmit+0x24c>)
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	0023      	movs	r3, r4
 800237e:	f000 fd41 	bl	8002e04 <I2C_TransferConfig>
 8002382:	e06f      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	697c      	ldr	r4, [r7, #20]
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	4b4a      	ldr	r3, [pc, #296]	@ (80024c0 <HAL_I2C_Master_Transmit+0x24c>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	0023      	movs	r3, r4
 800239a:	f000 fd33 	bl	8002e04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800239e:	e061      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 fb0c 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e081      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03a      	beq.n	8002464 <HAL_I2C_Master_Transmit+0x1f0>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d136      	bne.n	8002464 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	0013      	movs	r3, r2
 8002400:	2200      	movs	r2, #0
 8002402:	2180      	movs	r1, #128	@ 0x80
 8002404:	f000 fa86 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e053      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2bff      	cmp	r3, #255	@ 0xff
 8002418:	d911      	bls.n	800243e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22ff      	movs	r2, #255	@ 0xff
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	045c      	lsls	r4, r3, #17
 800242a:	230a      	movs	r3, #10
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	8819      	ldrh	r1, [r3, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	2300      	movs	r3, #0
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	0023      	movs	r3, r4
 8002438:	f000 fce4 	bl	8002e04 <I2C_TransferConfig>
 800243c:	e012      	b.n	8002464 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	049c      	lsls	r4, r3, #18
 8002452:	230a      	movs	r3, #10
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	8819      	ldrh	r1, [r3, #0]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	0023      	movs	r3, r4
 8002460:	f000 fcd0 	bl	8002e04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d198      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 faeb 	bl	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e01a      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	490b      	ldr	r1, [pc, #44]	@ (80024c4 <HAL_I2C_Master_Transmit+0x250>)
 8002496:	400a      	ands	r2, r1
 8002498:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2241      	movs	r2, #65	@ 0x41
 800249e:	2120      	movs	r1, #32
 80024a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2242      	movs	r2, #66	@ 0x42
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2240      	movs	r2, #64	@ 0x40
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b007      	add	sp, #28
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	80002000 	.word	0x80002000
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	0008      	movs	r0, r1
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	0019      	movs	r1, r3
 80024d6:	230a      	movs	r3, #10
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	2308      	movs	r3, #8
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	1c0a      	adds	r2, r1, #0
 80024e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2241      	movs	r2, #65	@ 0x41
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d000      	beq.n	80024f4 <HAL_I2C_Master_Receive+0x2c>
 80024f2:	e0e8      	b.n	80026c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2240      	movs	r2, #64	@ 0x40
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Master_Receive+0x3a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e0e2      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2240      	movs	r2, #64	@ 0x40
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800250a:	f7ff f8f5 	bl	80016f8 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	0219      	lsls	r1, r3, #8
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	f000 f9f8 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cd      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2241      	movs	r2, #65	@ 0x41
 8002530:	2122      	movs	r1, #34	@ 0x22
 8002532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2242      	movs	r2, #66	@ 0x42
 8002538:	2110      	movs	r1, #16
 800253a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2208      	movs	r2, #8
 800254c:	18ba      	adds	r2, r7, r2
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2bff      	cmp	r3, #255	@ 0xff
 8002560:	d911      	bls.n	8002586 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	b2da      	uxtb	r2, r3
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	045c      	lsls	r4, r3, #17
 8002572:	230a      	movs	r3, #10
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	8819      	ldrh	r1, [r3, #0]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	4b55      	ldr	r3, [pc, #340]	@ (80026d0 <HAL_I2C_Master_Receive+0x208>)
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	0023      	movs	r3, r4
 8002580:	f000 fc40 	bl	8002e04 <I2C_TransferConfig>
 8002584:	e076      	b.n	8002674 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	049c      	lsls	r4, r3, #18
 800259a:	230a      	movs	r3, #10
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	8819      	ldrh	r1, [r3, #0]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <HAL_I2C_Master_Receive+0x208>)
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	0023      	movs	r3, r4
 80025a8:	f000 fc2c 	bl	8002e04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025ac:	e062      	b.n	8002674 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fa8f 	bl	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e082      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03a      	beq.n	8002674 <HAL_I2C_Master_Receive+0x1ac>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d136      	bne.n	8002674 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	0013      	movs	r3, r2
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	f000 f97e 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e053      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2bff      	cmp	r3, #255	@ 0xff
 8002628:	d911      	bls.n	800264e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	22ff      	movs	r2, #255	@ 0xff
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	045c      	lsls	r4, r3, #17
 800263a:	230a      	movs	r3, #10
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	8819      	ldrh	r1, [r3, #0]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	0023      	movs	r3, r4
 8002648:	f000 fbdc 	bl	8002e04 <I2C_TransferConfig>
 800264c:	e012      	b.n	8002674 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	049c      	lsls	r4, r3, #18
 8002662:	230a      	movs	r3, #10
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	8819      	ldrh	r1, [r3, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	2300      	movs	r3, #0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	0023      	movs	r3, r4
 8002670:	f000 fbc8 	bl	8002e04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d197      	bne.n	80025ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f9e3 	bl	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01a      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	490b      	ldr	r1, [pc, #44]	@ (80026d4 <HAL_I2C_Master_Receive+0x20c>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2241      	movs	r2, #65	@ 0x41
 80026ae:	2120      	movs	r1, #32
 80026b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2242      	movs	r2, #66	@ 0x42
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2240      	movs	r2, #64	@ 0x40
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b007      	add	sp, #28
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	80002400 	.word	0x80002400
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	230a      	movs	r3, #10
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	1c0a      	adds	r2, r1, #0
 80026ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2241      	movs	r2, #65	@ 0x41
 80026f4:	5c9b      	ldrb	r3, [r3, r2]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d000      	beq.n	80026fe <HAL_I2C_IsDeviceReady+0x26>
 80026fc:	e0df      	b.n	80028be <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	401a      	ands	r2, r3
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	429a      	cmp	r2, r3
 8002710:	d101      	bne.n	8002716 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e0d4      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_IsDeviceReady+0x4c>
 8002720:	2302      	movs	r3, #2
 8002722:	e0cd      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	@ 0x40
 8002728:	2101      	movs	r1, #1
 800272a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	@ 0x41
 8002730:	2124      	movs	r1, #36	@ 0x24
 8002732:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_I2C_IsDeviceReady+0x7a>
 8002742:	230a      	movs	r3, #10
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	059b      	lsls	r3, r3, #22
 800274a:	0d9b      	lsrs	r3, r3, #22
 800274c:	4a5e      	ldr	r2, [pc, #376]	@ (80028c8 <HAL_I2C_IsDeviceReady+0x1f0>)
 800274e:	431a      	orrs	r2, r3
 8002750:	e006      	b.n	8002760 <HAL_I2C_IsDeviceReady+0x88>
 8002752:	230a      	movs	r3, #10
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	059b      	lsls	r3, r3, #22
 800275a:	0d9b      	lsrs	r3, r3, #22
 800275c:	4a5b      	ldr	r2, [pc, #364]	@ (80028cc <HAL_I2C_IsDeviceReady+0x1f4>)
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002766:	f7fe ffc7 	bl	80016f8 <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2220      	movs	r2, #32
 8002776:	4013      	ands	r3, r2
 8002778:	3b20      	subs	r3, #32
 800277a:	425a      	negs	r2, r3
 800277c:	4153      	adcs	r3, r2
 800277e:	b2da      	uxtb	r2, r3
 8002780:	231f      	movs	r3, #31
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2210      	movs	r2, #16
 800278e:	4013      	ands	r3, r2
 8002790:	3b10      	subs	r3, #16
 8002792:	425a      	negs	r2, r3
 8002794:	4153      	adcs	r3, r2
 8002796:	b2da      	uxtb	r2, r3
 8002798:	231e      	movs	r3, #30
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800279e:	e035      	b.n	800280c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	d01a      	beq.n	80027dc <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe ffa7 	bl	80016f8 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <HAL_I2C_IsDeviceReady+0xe4>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2241      	movs	r2, #65	@ 0x41
 80027c0:	2120      	movs	r1, #32
 80027c2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c8:	2220      	movs	r2, #32
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e071      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4013      	ands	r3, r2
 80027e6:	3b20      	subs	r3, #32
 80027e8:	425a      	negs	r2, r3
 80027ea:	4153      	adcs	r3, r2
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2210      	movs	r2, #16
 80027fc:	4013      	ands	r3, r2
 80027fe:	3b10      	subs	r3, #16
 8002800:	425a      	negs	r2, r3
 8002802:	4153      	adcs	r3, r2
 8002804:	b2da      	uxtb	r2, r3
 8002806:	231e      	movs	r3, #30
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800280c:	231f      	movs	r3, #31
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_I2C_IsDeviceReady+0x148>
 8002816:	231e      	movs	r3, #30
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0bf      	beq.n	80027a0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2210      	movs	r2, #16
 8002828:	4013      	ands	r3, r2
 800282a:	2b10      	cmp	r3, #16
 800282c:	d01a      	beq.n	8002864 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	0013      	movs	r3, r2
 8002838:	2200      	movs	r2, #0
 800283a:	2120      	movs	r1, #32
 800283c:	f000 f86a 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e03b      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2220      	movs	r2, #32
 800284e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2241      	movs	r2, #65	@ 0x41
 8002854:	2120      	movs	r1, #32
 8002856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	@ 0x40
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e02d      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	0013      	movs	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	2120      	movs	r1, #32
 8002872:	f000 f84f 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e020      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2220      	movs	r2, #32
 800288c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3301      	adds	r3, #1
 8002892:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d900      	bls.n	800289e <HAL_I2C_IsDeviceReady+0x1c6>
 800289c:	e74d      	b.n	800273a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2241      	movs	r2, #65	@ 0x41
 80028a2:	2120      	movs	r1, #32
 80028a4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	2220      	movs	r2, #32
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2240      	movs	r2, #64	@ 0x40
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b008      	add	sp, #32
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	02002000 	.word	0x02002000
 80028cc:	02002800 	.word	0x02002800

080028d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d103      	bne.n	80028ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d007      	beq.n	800290c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
  }
}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e03a      	b.n	800299c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0018      	movs	r0, r3
 800292e:	f000 f971 	bl	8002c14 <I2C_IsErrorOccurred>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d001      	beq.n	800293a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e040      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	d02d      	beq.n	800299c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7fe feda 	bl	80016f8 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d122      	bne.n	800299c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	425a      	negs	r2, r3
 8002966:	4153      	adcs	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	001a      	movs	r2, r3
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d113      	bne.n	800299c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	2220      	movs	r2, #32
 800297a:	431a      	orrs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2241      	movs	r2, #65	@ 0x41
 8002984:	2120      	movs	r1, #32
 8002986:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2242      	movs	r2, #66	@ 0x42
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e00f      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	425a      	negs	r2, r3
 80029ac:	4153      	adcs	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	001a      	movs	r2, r3
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d0b5      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d0:	e032      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f91b 	bl	8002c14 <I2C_IsErrorOccurred>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e030      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	d025      	beq.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fe fe84 	bl	80016f8 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11a      	bne.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d013      	beq.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	2220      	movs	r2, #32
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2241      	movs	r2, #65	@ 0x41
 8002a20:	2120      	movs	r1, #32
 8002a22:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2242      	movs	r2, #66	@ 0x42
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d1c5      	bne.n	80029d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5c:	e02f      	b.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f8d5 	bl	8002c14 <I2C_IsErrorOccurred>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02d      	b.n	8002ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fe fe41 	bl	80016f8 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11a      	bne.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d013      	beq.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2241      	movs	r2, #65	@ 0x41
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2242      	movs	r2, #66	@ 0x42
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d1c8      	bne.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002aec:	e07b      	b.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f88d 	bl	8002c14 <I2C_IsErrorOccurred>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d003      	beq.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002afe:	2317      	movs	r3, #23
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d140      	bne.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002b14:	2117      	movs	r1, #23
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d13b      	bne.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2204      	movs	r2, #4
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d106      	bne.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d123      	bne.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2204      	movs	r2, #4
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4929      	ldr	r1, [pc, #164]	@ (8002c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2241      	movs	r2, #65	@ 0x41
 8002b72:	2120      	movs	r1, #32
 8002b74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2242      	movs	r2, #66	@ 0x42
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2240      	movs	r2, #64	@ 0x40
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002b86:	2317      	movs	r3, #23
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e002      	b.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002b96:	f7fe fdaf 	bl	80016f8 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11c      	bne.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002bac:	2017      	movs	r0, #23
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d117      	bne.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d010      	beq.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc8:	2220      	movs	r2, #32
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2241      	movs	r2, #65	@ 0x41
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d005      	beq.n	8002c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d100      	bne.n	8002c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002bfe:	e776      	b.n	8002aee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002c00:	2317      	movs	r3, #23
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2327      	movs	r3, #39	@ 0x27
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <I2C_IsErrorOccurred+0x2e>
 8002c40:	e079      	b.n	8002d36 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c4a:	e057      	b.n	8002cfc <I2C_IsErrorOccurred+0xe8>
 8002c4c:	2227      	movs	r2, #39	@ 0x27
 8002c4e:	18bb      	adds	r3, r7, r2
 8002c50:	18ba      	adds	r2, r7, r2
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	d04f      	beq.n	8002cfc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c5c:	f7fe fd4c 	bl	80016f8 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d302      	bcc.n	8002c72 <I2C_IsErrorOccurred+0x5e>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d144      	bne.n	8002cfc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	01db      	lsls	r3, r3, #7
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c80:	2013      	movs	r0, #19
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	2142      	movs	r1, #66	@ 0x42
 8002c88:	5c52      	ldrb	r2, [r2, r1]
 8002c8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	401a      	ands	r2, r3
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d126      	bne.n	8002cee <I2C_IsErrorOccurred+0xda>
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	01db      	lsls	r3, r3, #7
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d021      	beq.n	8002cee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d01d      	beq.n	8002cee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2180      	movs	r1, #128	@ 0x80
 8002cbe:	01c9      	lsls	r1, r1, #7
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cc4:	f7fe fd18 	bl	80016f8 <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ccc:	e00f      	b.n	8002cee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cce:	f7fe fd13 	bl	80016f8 <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b19      	cmp	r3, #25
 8002cda:	d908      	bls.n	8002cee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ce4:	2327      	movs	r3, #39	@ 0x27
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]

              break;
 8002cec:	e006      	b.n	8002cfc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d1e8      	bne.n	8002cce <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d004      	beq.n	8002d14 <I2C_IsErrorOccurred+0x100>
 8002d0a:	2327      	movs	r3, #39	@ 0x27
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d09b      	beq.n	8002c4c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d14:	2327      	movs	r3, #39	@ 0x27
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2220      	movs	r2, #32
 8002d24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d2e:	2327      	movs	r3, #39	@ 0x27
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d00c      	beq.n	8002d62 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	0052      	lsls	r2, r2, #1
 8002d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5a:	2327      	movs	r3, #39	@ 0x27
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d00c      	beq.n	8002d86 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	4313      	orrs	r3, r2
 8002d72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2280      	movs	r2, #128	@ 0x80
 8002d7a:	00d2      	lsls	r2, r2, #3
 8002d7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7e:	2327      	movs	r3, #39	@ 0x27
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00c      	beq.n	8002daa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2202      	movs	r2, #2
 8002d94:	4313      	orrs	r3, r2
 8002d96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002da2:	2327      	movs	r3, #39	@ 0x27
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002daa:	2327      	movs	r3, #39	@ 0x27
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01d      	beq.n	8002df0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7ff fd8a 	bl	80028d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	490e      	ldr	r1, [pc, #56]	@ (8002e00 <I2C_IsErrorOccurred+0x1ec>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2241      	movs	r2, #65	@ 0x41
 8002ddc:	2120      	movs	r1, #32
 8002dde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2242      	movs	r2, #66	@ 0x42
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	@ 0x40
 8002dec:	2100      	movs	r1, #0
 8002dee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002df0:	2327      	movs	r3, #39	@ 0x27
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b00a      	add	sp, #40	@ 0x28
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	fe00e800 	.word	0xfe00e800

08002e04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	0008      	movs	r0, r1
 8002e0e:	0011      	movs	r1, r2
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	240a      	movs	r4, #10
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	1c02      	adds	r2, r0, #0
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	2009      	movs	r0, #9
 8002e1c:	183b      	adds	r3, r7, r0
 8002e1e:	1c0a      	adds	r2, r1, #0
 8002e20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	059b      	lsls	r3, r3, #22
 8002e28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	0419      	lsls	r1, r3, #16
 8002e30:	23ff      	movs	r3, #255	@ 0xff
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e4e:	0d51      	lsrs	r1, r2, #21
 8002e50:	2280      	movs	r2, #128	@ 0x80
 8002e52:	00d2      	lsls	r2, r2, #3
 8002e54:	400a      	ands	r2, r1
 8002e56:	4907      	ldr	r1, [pc, #28]	@ (8002e74 <I2C_TransferConfig+0x70>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	43d2      	mvns	r2, r2
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	0011      	movs	r1, r2
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b007      	add	sp, #28
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	03ff63ff 	.word	0x03ff63ff

08002e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2241      	movs	r2, #65	@ 0x41
 8002e86:	5c9b      	ldrb	r3, [r3, r2]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d138      	bne.n	8002f00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2240      	movs	r2, #64	@ 0x40
 8002e92:	5c9b      	ldrb	r3, [r3, r2]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e032      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2241      	movs	r2, #65	@ 0x41
 8002ea8:	2124      	movs	r1, #36	@ 0x24
 8002eaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4911      	ldr	r1, [pc, #68]	@ (8002f0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2241      	movs	r2, #65	@ 0x41
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	ffffefff 	.word	0xffffefff

08002f10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2241      	movs	r2, #65	@ 0x41
 8002f1e:	5c9b      	ldrb	r3, [r3, r2]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d139      	bne.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2240      	movs	r2, #64	@ 0x40
 8002f2a:	5c9b      	ldrb	r3, [r3, r2]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e033      	b.n	8002f9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	2101      	movs	r1, #1
 8002f3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2241      	movs	r2, #65	@ 0x41
 8002f40:	2124      	movs	r1, #36	@ 0x24
 8002f42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	438a      	bics	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2241      	movs	r2, #65	@ 0x41
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2240      	movs	r2, #64	@ 0x40
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	fffff0ff 	.word	0xfffff0ff

08002fa8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	000a      	movs	r2, r1
 8002fb2:	1cfb      	adds	r3, r7, #3
 8002fb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002fba:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	@ 0x80
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002fc6:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <HAL_PWR_EnterSTOPMode+0xac>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_PWR_EnterSTOPMode+0x40>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fe2:	491d      	ldr	r1, [pc, #116]	@ (8003058 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002ffe:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003004:	4b15      	ldr	r3, [pc, #84]	@ (800305c <HAL_PWR_EnterSTOPMode+0xb4>)
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <HAL_PWR_EnterSTOPMode+0xb4>)
 800300a:	2104      	movs	r1, #4
 800300c:	430a      	orrs	r2, r1
 800300e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003010:	1cfb      	adds	r3, r7, #3
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003018:	bf30      	wfi
 800301a:	e002      	b.n	8003022 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800301c:	bf40      	sev
    __WFE();
 800301e:	bf20      	wfe
    __WFE();
 8003020:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_PWR_EnterSTOPMode+0xb4>)
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_PWR_EnterSTOPMode+0xb4>)
 8003028:	2104      	movs	r1, #4
 800302a:	438a      	bics	r2, r1
 800302c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_PWR_EnterSTOPMode+0xa0>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800303a:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	0089      	lsls	r1, r1, #2
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
  }
}
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40007000 	.word	0x40007000
 8003054:	40010000 	.word	0x40010000
 8003058:	fffffdff 	.word	0xfffffdff
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f000 fbbf 	bl	80037f2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003074:	4bc9      	ldr	r3, [pc, #804]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	220c      	movs	r2, #12
 800307a:	4013      	ands	r3, r2
 800307c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800307e:	4bc7      	ldr	r3, [pc, #796]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	025b      	lsls	r3, r3, #9
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x36>
 8003094:	e07e      	b.n	8003194 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d007      	beq.n	80030ac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x68>
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	025b      	lsls	r3, r3, #9
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4bbb      	ldr	r3, [pc, #748]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	4013      	ands	r3, r2
 80030b6:	d100      	bne.n	80030ba <HAL_RCC_OscConfig+0x5a>
 80030b8:	e06b      	b.n	8003192 <HAL_RCC_OscConfig+0x132>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d167      	bne.n	8003192 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f000 fb95 	bl	80037f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	025b      	lsls	r3, r3, #9
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x84>
 80030d4:	4bb1      	ldr	r3, [pc, #708]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4bb0      	ldr	r3, [pc, #704]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	0249      	lsls	r1, r1, #9
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e027      	b.n	8003134 <HAL_RCC_OscConfig+0xd4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	23a0      	movs	r3, #160	@ 0xa0
 80030ea:	02db      	lsls	r3, r3, #11
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10e      	bne.n	800310e <HAL_RCC_OscConfig+0xae>
 80030f0:	4baa      	ldr	r3, [pc, #680]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4ba9      	ldr	r3, [pc, #676]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80030f6:	2180      	movs	r1, #128	@ 0x80
 80030f8:	02c9      	lsls	r1, r1, #11
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4ba7      	ldr	r3, [pc, #668]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4ba6      	ldr	r3, [pc, #664]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	0249      	lsls	r1, r1, #9
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e012      	b.n	8003134 <HAL_RCC_OscConfig+0xd4>
 800310e:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4ba2      	ldr	r3, [pc, #648]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003114:	49a2      	ldr	r1, [pc, #648]	@ (80033a0 <HAL_RCC_OscConfig+0x340>)
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	4ba0      	ldr	r3, [pc, #640]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	4013      	ands	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4b9c      	ldr	r3, [pc, #624]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b9b      	ldr	r3, [pc, #620]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800312e:	499d      	ldr	r1, [pc, #628]	@ (80033a4 <HAL_RCC_OscConfig+0x344>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fadc 	bl	80016f8 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003144:	e009      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003146:	f7fe fad7 	bl	80016f8 <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	@ 0x64
 8003152:	d902      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	f000 fb4c 	bl	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800315a:	4b90      	ldr	r3, [pc, #576]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	4013      	ands	r3, r2
 8003164:	d0ef      	beq.n	8003146 <HAL_RCC_OscConfig+0xe6>
 8003166:	e015      	b.n	8003194 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fac6 	bl	80016f8 <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003172:	f7fe fac1 	bl	80016f8 <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	@ 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e336      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003184:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	4013      	ands	r3, r2
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x112>
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d100      	bne.n	80031a0 <HAL_RCC_OscConfig+0x140>
 800319e:	e099      	b.n	80032d4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80031ae:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b7a      	ldr	r3, [pc, #488]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80031b4:	2120      	movs	r1, #32
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	2220      	movs	r2, #32
 80031be:	4393      	bics	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d13e      	bne.n	800324c <HAL_RCC_OscConfig+0x1ec>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13b      	bne.n	800324c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80031d4:	4b71      	ldr	r3, [pc, #452]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2204      	movs	r2, #4
 80031da:	4013      	ands	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_RCC_OscConfig+0x188>
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e304      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a6e      	ldr	r2, [pc, #440]	@ (80033a8 <HAL_RCC_OscConfig+0x348>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	4b68      	ldr	r3, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80031fe:	4b67      	ldr	r3, [pc, #412]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2209      	movs	r2, #9
 8003204:	4393      	bics	r3, r2
 8003206:	0019      	movs	r1, r3
 8003208:	4b64      	ldr	r3, [pc, #400]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003210:	f000 fc42 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003214:	0001      	movs	r1, r0
 8003216:	4b61      	ldr	r3, [pc, #388]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	220f      	movs	r2, #15
 800321e:	4013      	ands	r3, r2
 8003220:	4a62      	ldr	r2, [pc, #392]	@ (80033ac <HAL_RCC_OscConfig+0x34c>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	000a      	movs	r2, r1
 8003226:	40da      	lsrs	r2, r3
 8003228:	4b61      	ldr	r3, [pc, #388]	@ (80033b0 <HAL_RCC_OscConfig+0x350>)
 800322a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800322c:	4b61      	ldr	r3, [pc, #388]	@ (80033b4 <HAL_RCC_OscConfig+0x354>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2513      	movs	r5, #19
 8003232:	197c      	adds	r4, r7, r5
 8003234:	0018      	movs	r0, r3
 8003236:	f7fe fa19 	bl	800166c <HAL_InitTick>
 800323a:	0003      	movs	r3, r0
 800323c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800323e:	197b      	adds	r3, r7, r5
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d046      	beq.n	80032d4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003246:	197b      	adds	r3, r7, r5
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	e2d2      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d027      	beq.n	80032a2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2209      	movs	r2, #9
 8003258:	4393      	bics	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	4b4f      	ldr	r3, [pc, #316]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fa48 	bl	80016f8 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe fa43 	bl	80016f8 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e2b8      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003280:	4b46      	ldr	r3, [pc, #280]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	d0f1      	beq.n	800326e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b44      	ldr	r3, [pc, #272]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a46      	ldr	r2, [pc, #280]	@ (80033a8 <HAL_RCC_OscConfig+0x348>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	e018      	b.n	80032d4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b3e      	ldr	r3, [pc, #248]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b3d      	ldr	r3, [pc, #244]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	438a      	bics	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe fa23 	bl	80016f8 <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b8:	f7fe fa1e 	bl	80016f8 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e293      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032ca:	4b34      	ldr	r3, [pc, #208]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	d1f1      	bne.n	80032b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_RCC_OscConfig+0x280>
 80032de:	e0a2      	b.n	8003426 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d140      	bne.n	8003368 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x29e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e279      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fe:	4b27      	ldr	r3, [pc, #156]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <HAL_RCC_OscConfig+0x358>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	0a19      	lsrs	r1, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	061a      	lsls	r2, r3, #24
 8003320:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	0b5b      	lsrs	r3, r3, #13
 800332c:	3301      	adds	r3, #1
 800332e:	2280      	movs	r2, #128	@ 0x80
 8003330:	0212      	lsls	r2, r2, #8
 8003332:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	210f      	movs	r1, #15
 800333c:	400b      	ands	r3, r1
 800333e:	491b      	ldr	r1, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x34c>)
 8003340:	5ccb      	ldrb	r3, [r1, r3]
 8003342:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_RCC_OscConfig+0x350>)
 8003346:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003348:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <HAL_RCC_OscConfig+0x354>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2513      	movs	r5, #19
 800334e:	197c      	adds	r4, r7, r5
 8003350:	0018      	movs	r0, r3
 8003352:	f7fe f98b 	bl	800166c <HAL_InitTick>
 8003356:	0003      	movs	r3, r0
 8003358:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800335a:	197b      	adds	r3, r7, r5
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d061      	beq.n	8003426 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003362:	197b      	adds	r3, r7, r5
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	e244      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d040      	beq.n	80033f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003370:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_RCC_OscConfig+0x33c>)
 8003376:	2180      	movs	r1, #128	@ 0x80
 8003378:	0049      	lsls	r1, r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fe f9bb 	bl	80016f8 <HAL_GetTick>
 8003382:	0003      	movs	r3, r0
 8003384:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003386:	e019      	b.n	80033bc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003388:	f7fe f9b6 	bl	80016f8 <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d912      	bls.n	80033bc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e22b      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	40021000 	.word	0x40021000
 80033a0:	fffeffff 	.word	0xfffeffff
 80033a4:	fffbffff 	.word	0xfffbffff
 80033a8:	ffffe0ff 	.word	0xffffe0ff
 80033ac:	08006bec 	.word	0x08006bec
 80033b0:	20000004 	.word	0x20000004
 80033b4:	20000008 	.word	0x20000008
 80033b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033bc:	4bca      	ldr	r3, [pc, #808]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d0df      	beq.n	8003388 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c8:	4bc7      	ldr	r3, [pc, #796]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4ac7      	ldr	r2, [pc, #796]	@ (80036ec <HAL_RCC_OscConfig+0x68c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d6:	4bc4      	ldr	r3, [pc, #784]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033dc:	4bc2      	ldr	r3, [pc, #776]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	0a19      	lsrs	r1, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	061a      	lsls	r2, r3, #24
 80033ea:	4bbf      	ldr	r3, [pc, #764]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	e019      	b.n	8003426 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033f2:	4bbd      	ldr	r3, [pc, #756]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4bbc      	ldr	r3, [pc, #752]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80033f8:	49bd      	ldr	r1, [pc, #756]	@ (80036f0 <HAL_RCC_OscConfig+0x690>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe f97b 	bl	80016f8 <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003408:	f7fe f976 	bl	80016f8 <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1eb      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800341a:	4bb3      	ldr	r3, [pc, #716]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	4013      	ands	r3, r2
 800342e:	d036      	beq.n	800349e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d019      	beq.n	800346c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003438:	4bab      	ldr	r3, [pc, #684]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800343a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800343c:	4baa      	ldr	r3, [pc, #680]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800343e:	2101      	movs	r1, #1
 8003440:	430a      	orrs	r2, r1
 8003442:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe f958 	bl	80016f8 <HAL_GetTick>
 8003448:	0003      	movs	r3, r0
 800344a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344e:	f7fe f953 	bl	80016f8 <HAL_GetTick>
 8003452:	0002      	movs	r2, r0
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1c8      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003460:	4ba1      	ldr	r3, [pc, #644]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d0f1      	beq.n	800344e <HAL_RCC_OscConfig+0x3ee>
 800346a:	e018      	b.n	800349e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346c:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800346e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003470:	4b9d      	ldr	r3, [pc, #628]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003472:	2101      	movs	r1, #1
 8003474:	438a      	bics	r2, r1
 8003476:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe f93e 	bl	80016f8 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003482:	f7fe f939 	bl	80016f8 <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1ae      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003494:	4b94      	ldr	r3, [pc, #592]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	2202      	movs	r2, #2
 800349a:	4013      	ands	r3, r2
 800349c:	d1f1      	bne.n	8003482 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d100      	bne.n	80034aa <HAL_RCC_OscConfig+0x44a>
 80034a8:	e0ae      	b.n	8003608 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2023      	movs	r0, #35	@ 0x23
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b8d      	ldr	r3, [pc, #564]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80034b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	4013      	ands	r3, r2
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	4b8a      	ldr	r3, [pc, #552]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80034c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c2:	4b89      	ldr	r3, [pc, #548]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80034c4:	2180      	movs	r1, #128	@ 0x80
 80034c6:	0549      	lsls	r1, r1, #21
 80034c8:	430a      	orrs	r2, r1
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80034cc:	183b      	adds	r3, r7, r0
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_OscConfig+0x694>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d11a      	bne.n	8003514 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b85      	ldr	r3, [pc, #532]	@ (80036f4 <HAL_RCC_OscConfig+0x694>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b84      	ldr	r3, [pc, #528]	@ (80036f4 <HAL_RCC_OscConfig+0x694>)
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	0049      	lsls	r1, r1, #1
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7fe f904 	bl	80016f8 <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe f8ff 	bl	80016f8 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	@ 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e174      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b7a      	ldr	r3, [pc, #488]	@ (80036f4 <HAL_RCC_OscConfig+0x694>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x4d0>
 8003520:	4b71      	ldr	r3, [pc, #452]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003524:	4b70      	ldr	r3, [pc, #448]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003526:	2180      	movs	r1, #128	@ 0x80
 8003528:	0049      	lsls	r1, r1, #1
 800352a:	430a      	orrs	r2, r1
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
 800352e:	e031      	b.n	8003594 <HAL_RCC_OscConfig+0x534>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10c      	bne.n	8003552 <HAL_RCC_OscConfig+0x4f2>
 8003538:	4b6b      	ldr	r3, [pc, #428]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800353a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800353c:	4b6a      	ldr	r3, [pc, #424]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800353e:	496c      	ldr	r1, [pc, #432]	@ (80036f0 <HAL_RCC_OscConfig+0x690>)
 8003540:	400a      	ands	r2, r1
 8003542:	651a      	str	r2, [r3, #80]	@ 0x50
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003548:	4b67      	ldr	r3, [pc, #412]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800354a:	496b      	ldr	r1, [pc, #428]	@ (80036f8 <HAL_RCC_OscConfig+0x698>)
 800354c:	400a      	ands	r2, r1
 800354e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003550:	e020      	b.n	8003594 <HAL_RCC_OscConfig+0x534>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	23a0      	movs	r3, #160	@ 0xa0
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	429a      	cmp	r2, r3
 800355c:	d10e      	bne.n	800357c <HAL_RCC_OscConfig+0x51c>
 800355e:	4b62      	ldr	r3, [pc, #392]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003562:	4b61      	ldr	r3, [pc, #388]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	00c9      	lsls	r1, r1, #3
 8003568:	430a      	orrs	r2, r1
 800356a:	651a      	str	r2, [r3, #80]	@ 0x50
 800356c:	4b5e      	ldr	r3, [pc, #376]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800356e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003570:	4b5d      	ldr	r3, [pc, #372]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	0049      	lsls	r1, r1, #1
 8003576:	430a      	orrs	r2, r1
 8003578:	651a      	str	r2, [r3, #80]	@ 0x50
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0x534>
 800357c:	4b5a      	ldr	r3, [pc, #360]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800357e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003580:	4b59      	ldr	r3, [pc, #356]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003582:	495b      	ldr	r1, [pc, #364]	@ (80036f0 <HAL_RCC_OscConfig+0x690>)
 8003584:	400a      	ands	r2, r1
 8003586:	651a      	str	r2, [r3, #80]	@ 0x50
 8003588:	4b57      	ldr	r3, [pc, #348]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800358a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800358c:	4b56      	ldr	r3, [pc, #344]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800358e:	495a      	ldr	r1, [pc, #360]	@ (80036f8 <HAL_RCC_OscConfig+0x698>)
 8003590:	400a      	ands	r2, r1
 8003592:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d015      	beq.n	80035c8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fe f8ac 	bl	80016f8 <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035a4:	e009      	b.n	80035ba <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fe f8a7 	bl	80016f8 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_RCC_OscConfig+0x69c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e11b      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ba:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80035bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4013      	ands	r3, r2
 80035c4:	d0ef      	beq.n	80035a6 <HAL_RCC_OscConfig+0x546>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fe f896 	bl	80016f8 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035d0:	e009      	b.n	80035e6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe f891 	bl	80016f8 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	4a47      	ldr	r2, [pc, #284]	@ (80036fc <HAL_RCC_OscConfig+0x69c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e105      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035e6:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80035e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d1ef      	bne.n	80035d2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035f2:	2323      	movs	r3, #35	@ 0x23
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b3a      	ldr	r3, [pc, #232]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80035fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003600:	4b39      	ldr	r3, [pc, #228]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003602:	493f      	ldr	r1, [pc, #252]	@ (8003700 <HAL_RCC_OscConfig+0x6a0>)
 8003604:	400a      	ands	r2, r1
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d049      	beq.n	80036a6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d026      	beq.n	8003668 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800361a:	4b33      	ldr	r3, [pc, #204]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003620:	2101      	movs	r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 8003628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362a:	4b2f      	ldr	r3, [pc, #188]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800362c:	2101      	movs	r1, #1
 800362e:	430a      	orrs	r2, r1
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x6a4>)
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	4b33      	ldr	r3, [pc, #204]	@ (8003704 <HAL_RCC_OscConfig+0x6a4>)
 8003638:	2180      	movs	r1, #128	@ 0x80
 800363a:	0189      	lsls	r1, r1, #6
 800363c:	430a      	orrs	r2, r1
 800363e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe f85a 	bl	80016f8 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fe f855 	bl	80016f8 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0ca      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2202      	movs	r2, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d0f1      	beq.n	800364a <HAL_RCC_OscConfig+0x5ea>
 8003666:	e01e      	b.n	80036a6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800366e:	2101      	movs	r1, #1
 8003670:	438a      	bics	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	4b23      	ldr	r3, [pc, #140]	@ (8003704 <HAL_RCC_OscConfig+0x6a4>)
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <HAL_RCC_OscConfig+0x6a4>)
 800367a:	4923      	ldr	r1, [pc, #140]	@ (8003708 <HAL_RCC_OscConfig+0x6a8>)
 800367c:	400a      	ands	r2, r1
 800367e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe f83a 	bl	80016f8 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368a:	f7fe f835 	bl	80016f8 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0aa      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800369c:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d1f1      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d100      	bne.n	80036b0 <HAL_RCC_OscConfig+0x650>
 80036ae:	e09f      	b.n	80037f0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d100      	bne.n	80036b8 <HAL_RCC_OscConfig+0x658>
 80036b6:	e078      	b.n	80037aa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d159      	bne.n	8003774 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <HAL_RCC_OscConfig+0x688>)
 80036c6:	4911      	ldr	r1, [pc, #68]	@ (800370c <HAL_RCC_OscConfig+0x6ac>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe f814 	bl	80016f8 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036d4:	e01c      	b.n	8003710 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe f80f 	bl	80016f8 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d915      	bls.n	8003710 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e084      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	ffff1fff 	.word	0xffff1fff
 80036f0:	fffffeff 	.word	0xfffffeff
 80036f4:	40007000 	.word	0x40007000
 80036f8:	fffffbff 	.word	0xfffffbff
 80036fc:	00001388 	.word	0x00001388
 8003700:	efffffff 	.word	0xefffffff
 8003704:	40010000 	.word	0x40010000
 8003708:	ffffdfff 	.word	0xffffdfff
 800370c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003710:	4b3a      	ldr	r3, [pc, #232]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	049b      	lsls	r3, r3, #18
 8003718:	4013      	ands	r3, r2
 800371a:	d1dc      	bne.n	80036d6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371c:	4b37      	ldr	r3, [pc, #220]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a37      	ldr	r2, [pc, #220]	@ (8003800 <HAL_RCC_OscConfig+0x7a0>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003734:	431a      	orrs	r2, r3
 8003736:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b2f      	ldr	r3, [pc, #188]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 8003742:	2180      	movs	r1, #128	@ 0x80
 8003744:	0449      	lsls	r1, r1, #17
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fd ffd5 	bl	80016f8 <HAL_GetTick>
 800374e:	0003      	movs	r3, r0
 8003750:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd ffd0 	bl	80016f8 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e045      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003766:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	049b      	lsls	r3, r3, #18
 800376e:	4013      	ands	r3, r2
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x6f4>
 8003772:	e03d      	b.n	80037f0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 800377a:	4922      	ldr	r1, [pc, #136]	@ (8003804 <HAL_RCC_OscConfig+0x7a4>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fd ffba 	bl	80016f8 <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378a:	f7fd ffb5 	bl	80016f8 <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e02a      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	049b      	lsls	r3, r3, #18
 80037a4:	4013      	ands	r3, r2
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x72a>
 80037a8:	e022      	b.n	80037f0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e01d      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_OscConfig+0x79c>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	025b      	lsls	r3, r3, #9
 80037c2:	401a      	ands	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d10f      	bne.n	80037ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	23f0      	movs	r3, #240	@ 0xf0
 80037d0:	039b      	lsls	r3, r3, #14
 80037d2:	401a      	ands	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	23c0      	movs	r3, #192	@ 0xc0
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	401a      	ands	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b00a      	add	sp, #40	@ 0x28
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000
 8003800:	ff02ffff 	.word	0xff02ffff
 8003804:	feffffff 	.word	0xfeffffff

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e128      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b96      	ldr	r3, [pc, #600]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d91e      	bls.n	8003868 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b93      	ldr	r3, [pc, #588]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	4393      	bics	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	4b90      	ldr	r3, [pc, #576]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800383c:	f7fd ff5c 	bl	80016f8 <HAL_GetTick>
 8003840:	0003      	movs	r3, r0
 8003842:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003844:	e009      	b.n	800385a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003846:	f7fd ff57 	bl	80016f8 <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	4a8a      	ldr	r2, [pc, #552]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e109      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b87      	ldr	r3, [pc, #540]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d1ee      	bne.n	8003846 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003872:	4b83      	ldr	r3, [pc, #524]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	22f0      	movs	r2, #240	@ 0xf0
 8003878:	4393      	bics	r3, r2
 800387a:	0019      	movs	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	4b7f      	ldr	r3, [pc, #508]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003882:	430a      	orrs	r2, r1
 8003884:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d100      	bne.n	8003892 <HAL_RCC_ClockConfig+0x8a>
 8003890:	e089      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800389a:	4b79      	ldr	r3, [pc, #484]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	029b      	lsls	r3, r3, #10
 80038a2:	4013      	ands	r3, r2
 80038a4:	d120      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0e1      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038b2:	4b73      	ldr	r3, [pc, #460]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	049b      	lsls	r3, r3, #18
 80038ba:	4013      	ands	r3, r2
 80038bc:	d114      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0d5      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2204      	movs	r2, #4
 80038d0:	4013      	ands	r3, r2
 80038d2:	d109      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0ca      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038d8:	4b69      	ldr	r3, [pc, #420]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4013      	ands	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0c2      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e8:	4b65      	ldr	r3, [pc, #404]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4393      	bics	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4b62      	ldr	r3, [pc, #392]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fd fefc 	bl	80016f8 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d111      	bne.n	8003930 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800390c:	e009      	b.n	8003922 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390e:	f7fd fef3 	bl	80016f8 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0a5      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	220c      	movs	r2, #12
 8003928:	4013      	ands	r3, r2
 800392a:	2b08      	cmp	r3, #8
 800392c:	d1ef      	bne.n	800390e <HAL_RCC_ClockConfig+0x106>
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d111      	bne.n	800395c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003938:	e009      	b.n	800394e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393a:	f7fd fedd 	bl	80016f8 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e08f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	220c      	movs	r2, #12
 8003954:	4013      	ands	r3, r2
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d1ef      	bne.n	800393a <HAL_RCC_ClockConfig+0x132>
 800395a:	e024      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d11b      	bne.n	800399c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003964:	e009      	b.n	800397a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003966:	f7fd fec7 	bl	80016f8 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	4a42      	ldr	r2, [pc, #264]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e079      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	220c      	movs	r2, #12
 8003980:	4013      	ands	r3, r2
 8003982:	2b04      	cmp	r3, #4
 8003984:	d1ef      	bne.n	8003966 <HAL_RCC_ClockConfig+0x15e>
 8003986:	e00e      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fd feb6 	bl	80016f8 <HAL_GetTick>
 800398c:	0002      	movs	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e068      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800399c:	4b38      	ldr	r3, [pc, #224]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	220c      	movs	r2, #12
 80039a2:	4013      	ands	r3, r2
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d21e      	bcs.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	4393      	bics	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	4b2e      	ldr	r3, [pc, #184]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039c6:	f7fd fe97 	bl	80016f8 <HAL_GetTick>
 80039ca:	0003      	movs	r3, r0
 80039cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	e009      	b.n	80039e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd fe92 	bl	80016f8 <HAL_GetTick>
 80039d4:	0002      	movs	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e044      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e4:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d1ee      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2204      	movs	r2, #4
 80039f8:	4013      	ands	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a20      	ldr	r2, [pc, #128]	@ (8003a84 <HAL_RCC_ClockConfig+0x27c>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	4013      	ands	r3, r2
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a88 <HAL_RCC_ClockConfig+0x280>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	00da      	lsls	r2, r3, #3
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a30:	f000 f832 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a34:	0001      	movs	r1, r0
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_RCC_ClockConfig+0x278>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	4013      	ands	r3, r2
 8003a40:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <HAL_RCC_ClockConfig+0x284>)
 8003a42:	5cd3      	ldrb	r3, [r2, r3]
 8003a44:	000a      	movs	r2, r1
 8003a46:	40da      	lsrs	r2, r3
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_RCC_ClockConfig+0x288>)
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a4c:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_RCC_ClockConfig+0x28c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	250b      	movs	r5, #11
 8003a52:	197c      	adds	r4, r7, r5
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7fd fe09 	bl	800166c <HAL_InitTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003a5e:	197b      	adds	r3, r7, r5
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003a66:	197b      	adds	r3, r7, r5
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bdb0      	pop	{r4, r5, r7, pc}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	00001388 	.word	0x00001388
 8003a80:	40021000 	.word	0x40021000
 8003a84:	fffff8ff 	.word	0xfffff8ff
 8003a88:	ffffc7ff 	.word	0xffffc7ff
 8003a8c:	08006bec 	.word	0x08006bec
 8003a90:	20000004 	.word	0x20000004
 8003a94:	20000008 	.word	0x20000008

08003a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d013      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003aae:	d85c      	bhi.n	8003b6a <HAL_RCC_GetSysClockFreq+0xd2>
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d002      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x22>
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ab8:	e057      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003aba:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d002      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ac4:	4b33      	ldr	r3, [pc, #204]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ac6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ac8:	e05d      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003aca:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8003acc:	613b      	str	r3, [r7, #16]
      break;
 8003ace:	e05a      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad0:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ad2:	613b      	str	r3, [r7, #16]
      break;
 8003ad4:	e057      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0c9b      	lsrs	r3, r3, #18
 8003ada:	220f      	movs	r2, #15
 8003adc:	4013      	ands	r3, r2
 8003ade:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0d9b      	lsrs	r3, r3, #22
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4013      	ands	r3, r2
 8003aec:	3301      	adds	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	2380      	movs	r3, #128	@ 0x80
 8003af6:	025b      	lsls	r3, r3, #9
 8003af8:	4013      	ands	r3, r2
 8003afa:	d00f      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	000a      	movs	r2, r1
 8003b00:	0152      	lsls	r2, r2, #5
 8003b02:	1a52      	subs	r2, r2, r1
 8003b04:	0193      	lsls	r3, r2, #6
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	185b      	adds	r3, r3, r1
 8003b0c:	025b      	lsls	r3, r3, #9
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fc fb01 	bl	8000118 <__udivsi3>
 8003b16:	0003      	movs	r3, r0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e023      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2210      	movs	r2, #16
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00f      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	000a      	movs	r2, r1
 8003b2a:	0152      	lsls	r2, r2, #5
 8003b2c:	1a52      	subs	r2, r2, r1
 8003b2e:	0193      	lsls	r3, r2, #6
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	185b      	adds	r3, r3, r1
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fc faec 	bl	8000118 <__udivsi3>
 8003b40:	0003      	movs	r3, r0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e00e      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	000a      	movs	r2, r1
 8003b4a:	0152      	lsls	r2, r2, #5
 8003b4c:	1a52      	subs	r2, r2, r1
 8003b4e:	0193      	lsls	r3, r2, #6
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	185b      	adds	r3, r3, r1
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7fc fadc 	bl	8000118 <__udivsi3>
 8003b60:	0003      	movs	r3, r0
 8003b62:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
      break;
 8003b68:	e00d      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	2207      	movs	r2, #7
 8003b72:	4013      	ands	r3, r2
 8003b74:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	0212      	lsls	r2, r2, #8
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	0013      	movs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
      break;
 8003b84:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b86:	693b      	ldr	r3, [r7, #16]
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	003d0900 	.word	0x003d0900
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	08006c04 	.word	0x08006c04

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b02      	ldr	r3, [pc, #8]	@ (8003bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff2 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc0:	0001      	movs	r1, r0
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	2207      	movs	r2, #7
 8003bca:	4013      	ands	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	40d9      	lsrs	r1, r3
 8003bd2:	000b      	movs	r3, r1
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08006bfc 	.word	0x08006bfc

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffdc 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bec:	0001      	movs	r1, r0
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	0adb      	lsrs	r3, r3, #11
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	40d9      	lsrs	r1, r3
 8003bfe:	000b      	movs	r3, r1
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08006bfc 	.word	0x08006bfc

08003c10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003c18:	2317      	movs	r3, #23
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2220      	movs	r2, #32
 8003c26:	4013      	ands	r3, r2
 8003c28:	d106      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4013      	ands	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003c36:	e104      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c38:	4bb9      	ldr	r3, [pc, #740]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	055b      	lsls	r3, r3, #21
 8003c40:	4013      	ands	r3, r2
 8003c42:	d10a      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4bb6      	ldr	r3, [pc, #728]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c48:	4bb5      	ldr	r3, [pc, #724]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c4a:	2180      	movs	r1, #128	@ 0x80
 8003c4c:	0549      	lsls	r1, r1, #21
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003c52:	2317      	movs	r3, #23
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4bb2      	ldr	r3, [pc, #712]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	d11a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4baf      	ldr	r3, [pc, #700]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4bae      	ldr	r3, [pc, #696]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c6c:	2180      	movs	r1, #128	@ 0x80
 8003c6e:	0049      	lsls	r1, r1, #1
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c74:	f7fd fd40 	bl	80016f8 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd fd3b 	bl	80016f8 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	@ 0x64
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e143      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4ba4      	ldr	r3, [pc, #656]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	23c0      	movs	r3, #192	@ 0xc0
 8003ca2:	039b      	lsls	r3, r3, #14
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	23c0      	movs	r3, #192	@ 0xc0
 8003cae:	039b      	lsls	r3, r3, #14
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	23c0      	movs	r3, #192	@ 0xc0
 8003cbe:	039b      	lsls	r3, r3, #14
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	23c0      	movs	r3, #192	@ 0xc0
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	23c0      	movs	r3, #192	@ 0xc0
 8003cd4:	029b      	lsls	r3, r3, #10
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cda:	4b91      	ldr	r3, [pc, #580]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e113      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003cf0:	4b8b      	ldr	r3, [pc, #556]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cf4:	23c0      	movs	r3, #192	@ 0xc0
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d049      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	23c0      	movs	r3, #192	@ 0xc0
 8003d08:	029b      	lsls	r3, r3, #10
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d004      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2220      	movs	r2, #32
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	23c0      	movs	r3, #192	@ 0xc0
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	4013      	ands	r3, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d034      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4013      	ands	r3, r2
 8003d36:	d02e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003d38:	4b79      	ldr	r3, [pc, #484]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d42:	4b77      	ldr	r3, [pc, #476]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d46:	4b76      	ldr	r3, [pc, #472]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d48:	2180      	movs	r1, #128	@ 0x80
 8003d4a:	0309      	lsls	r1, r1, #12
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d50:	4b73      	ldr	r3, [pc, #460]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d54:	4b72      	ldr	r3, [pc, #456]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d56:	4975      	ldr	r1, [pc, #468]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003d5c:	4b70      	ldr	r3, [pc, #448]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d014      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fcc4 	bl	80016f8 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d74:	e009      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd fcbf 	bl	80016f8 <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	4a6b      	ldr	r2, [pc, #428]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e0c6      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8a:	4b65      	ldr	r3, [pc, #404]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4013      	ands	r3, r2
 8003d94:	d0ef      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d01f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	23c0      	movs	r3, #192	@ 0xc0
 8003da8:	029b      	lsls	r3, r3, #10
 8003daa:	401a      	ands	r2, r3
 8003dac:	23c0      	movs	r3, #192	@ 0xc0
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10c      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003db4:	4b5a      	ldr	r3, [pc, #360]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	23c0      	movs	r3, #192	@ 0xc0
 8003dc4:	039b      	lsls	r3, r3, #14
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	4b55      	ldr	r3, [pc, #340]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	4b54      	ldr	r3, [pc, #336]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	23c0      	movs	r3, #192	@ 0xc0
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	401a      	ands	r2, r3
 8003ddc:	4b50      	ldr	r3, [pc, #320]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2220      	movs	r2, #32
 8003de8:	4013      	ands	r3, r2
 8003dea:	d01f      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	23c0      	movs	r3, #192	@ 0xc0
 8003df2:	029b      	lsls	r3, r3, #10
 8003df4:	401a      	ands	r2, r3
 8003df6:	23c0      	movs	r3, #192	@ 0xc0
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003dfe:	4b48      	ldr	r3, [pc, #288]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4c      	ldr	r2, [pc, #304]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	23c0      	movs	r3, #192	@ 0xc0
 8003e0e:	039b      	lsls	r3, r3, #14
 8003e10:	401a      	ands	r2, r3
 8003e12:	4b43      	ldr	r3, [pc, #268]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e1a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	23c0      	movs	r3, #192	@ 0xc0
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	401a      	ands	r2, r3
 8003e26:	4b3e      	ldr	r3, [pc, #248]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e2c:	2317      	movs	r3, #23
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3a:	4b39      	ldr	r3, [pc, #228]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e3c:	493e      	ldr	r1, [pc, #248]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4c:	4b34      	ldr	r3, [pc, #208]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e50:	2203      	movs	r2, #3
 8003e52:	4393      	bics	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2202      	movs	r2, #2
 8003e66:	4013      	ands	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	220c      	movs	r2, #12
 8003e70:	4393      	bics	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b29      	ldr	r3, [pc, #164]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2204      	movs	r2, #4
 8003e84:	4013      	ands	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	4a25      	ldr	r2, [pc, #148]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec6:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	0019      	movs	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2280      	movs	r2, #128	@ 0x80
 8003efe:	4013      	ands	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003f02:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f06:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f12:	430a      	orrs	r2, r1
 8003f14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40007000 	.word	0x40007000
 8003f28:	fffcffff 	.word	0xfffcffff
 8003f2c:	fff7ffff 	.word	0xfff7ffff
 8003f30:	00001388 	.word	0x00001388
 8003f34:	ffcfffff 	.word	0xffcfffff
 8003f38:	efffffff 	.word	0xefffffff
 8003f3c:	fffff3ff 	.word	0xfffff3ff
 8003f40:	ffffcfff 	.word	0xffffcfff
 8003f44:	fbffffff 	.word	0xfbffffff
 8003f48:	fff3ffff 	.word	0xfff3ffff

08003f4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f4c:	b5b0      	push	{r4, r5, r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e088      	b.n	8004078 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2221      	movs	r2, #33	@ 0x21
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d107      	bne.n	8003f82 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fc fdcf 	bl	8000b20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2221      	movs	r2, #33	@ 0x21
 8003f86:	2102      	movs	r1, #2
 8003f88:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d05f      	beq.n	8004058 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	22ca      	movs	r2, #202	@ 0xca
 8003f9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2253      	movs	r2, #83	@ 0x53
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003fa8:	250f      	movs	r5, #15
 8003faa:	197c      	adds	r4, r7, r5
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 f890 	bl	80040d4 <RTC_EnterInitMode>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003fb8:	0028      	movs	r0, r5
 8003fba:	183b      	adds	r3, r7, r0
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12c      	bne.n	800401c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	492c      	ldr	r1, [pc, #176]	@ (8004080 <HAL_RTC_Init+0x134>)
 8003fce:	400a      	ands	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68d2      	ldr	r2, [r2, #12]
 8003ff8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6919      	ldr	r1, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800400e:	183c      	adds	r4, r7, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f8a2 	bl	800415c <RTC_ExitInitMode>
 8004018:	0003      	movs	r3, r0
 800401a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800401c:	230f      	movs	r3, #15
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d113      	bne.n	800404e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2103      	movs	r1, #3
 8004032:	438a      	bics	r2, r1
 8004034:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	22ff      	movs	r2, #255	@ 0xff
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24
 8004056:	e003      	b.n	8004060 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004058:	230f      	movs	r3, #15
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004060:	230f      	movs	r3, #15
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2221      	movs	r2, #33	@ 0x21
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004072:	230f      	movs	r3, #15
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	781b      	ldrb	r3, [r3, #0]
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b004      	add	sp, #16
 800407e:	bdb0      	pop	{r4, r5, r7, pc}
 8004080:	ff8fffbf 	.word	0xff8fffbf

08004084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <HAL_RTC_WaitForSynchro+0x4c>)
 8004096:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004098:	f7fd fb2e 	bl	80016f8 <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040a0:	e00a      	b.n	80040b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a2:	f7fd fb29 	bl	80016f8 <HAL_GetTick>
 80040a6:	0002      	movs	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	23fa      	movs	r3, #250	@ 0xfa
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d901      	bls.n	80040b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	4013      	ands	r3, r2
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	0001ff5f 	.word	0x0001ff5f

080040d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040e0:	230f      	movs	r3, #15
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	4013      	ands	r3, r2
 80040f2:	d12c      	bne.n	800414e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004104:	f7fd faf8 	bl	80016f8 <HAL_GetTick>
 8004108:	0003      	movs	r3, r0
 800410a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800410c:	e014      	b.n	8004138 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800410e:	f7fd faf3 	bl	80016f8 <HAL_GetTick>
 8004112:	0002      	movs	r2, r0
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	200f      	movs	r0, #15
 800411a:	183b      	adds	r3, r7, r0
 800411c:	1839      	adds	r1, r7, r0
 800411e:	7809      	ldrb	r1, [r1, #0]
 8004120:	7019      	strb	r1, [r3, #0]
 8004122:	23fa      	movs	r3, #250	@ 0xfa
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	429a      	cmp	r2, r3
 8004128:	d906      	bls.n	8004138 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2221      	movs	r2, #33	@ 0x21
 800412e:	2104      	movs	r1, #4
 8004130:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004132:	183b      	adds	r3, r7, r0
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2240      	movs	r2, #64	@ 0x40
 8004140:	4013      	ands	r3, r2
 8004142:	d104      	bne.n	800414e <RTC_EnterInitMode+0x7a>
 8004144:	230f      	movs	r3, #15
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d1df      	bne.n	800410e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800414e:	230f      	movs	r3, #15
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	781b      	ldrb	r3, [r3, #0]
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b004      	add	sp, #16
 800415a:	bd80      	pop	{r7, pc}

0800415c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	240f      	movs	r4, #15
 8004166:	193b      	adds	r3, r7, r4
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2180      	movs	r1, #128	@ 0x80
 8004178:	438a      	bics	r2, r1
 800417a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2220      	movs	r2, #32
 8004184:	4013      	ands	r3, r2
 8004186:	d10c      	bne.n	80041a2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f7ff ff7a 	bl	8004084 <HAL_RTC_WaitForSynchro>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d006      	beq.n	80041a2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2221      	movs	r2, #33	@ 0x21
 8004198:	2104      	movs	r1, #4
 800419a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800419c:	193b      	adds	r3, r7, r4
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80041a2:	230f      	movs	r3, #15
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	781b      	ldrb	r3, [r3, #0]
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b005      	add	sp, #20
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 80041b8:	4b3c      	ldr	r3, [pc, #240]	@ (80042ac <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	0312      	lsls	r2, r2, #12
 80041be:	615a      	str	r2, [r3, #20]

  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	4013      	ands	r3, r2
 80041cc:	d014      	beq.n	80041f8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	2380      	movs	r3, #128	@ 0x80
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4013      	ands	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 f874 	bl	80042cc <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit after returning from callback
         as RTC_TSTR and RTC_TSDR registers are cleared when TSF bit is reset */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	22ff      	movs	r2, #255	@ 0xff
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	492f      	ldr	r1, [pc, #188]	@ (80042b0 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <HAL_RTCEx_TamperTimeStampIRQHandler+0x104>)
 8004200:	4013      	ands	r3, r2
 8004202:	d014      	beq.n	800422e <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	2380      	movs	r3, #128	@ 0x80
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	4013      	ands	r3, r2
 8004210:	d00d      	beq.n	800422e <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	22ff      	movs	r2, #255	@ 0xff
 800421a:	401a      	ands	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4925      	ldr	r1, [pc, #148]	@ (80042b8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x108>)
 8004222:	430a      	orrs	r2, r1
 8004224:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 f857 	bl	80042dc <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	4a21      	ldr	r2, [pc, #132]	@ (80042bc <HAL_RTCEx_TamperTimeStampIRQHandler+0x10c>)
 8004236:	4013      	ands	r3, r2
 8004238:	d014      	beq.n	8004264 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4013      	ands	r3, r2
 8004246:	d00d      	beq.n	8004264 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	22ff      	movs	r2, #255	@ 0xff
 8004250:	401a      	ands	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	491a      	ldr	r1, [pc, #104]	@ (80042c0 <HAL_RTCEx_TamperTimeStampIRQHandler+0x110>)
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f000 f844 	bl	80042ec <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper 3 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4a16      	ldr	r2, [pc, #88]	@ (80042c4 <HAL_RTCEx_TamperTimeStampIRQHandler+0x114>)
 800426c:	4013      	ands	r3, r2
 800426e:	d014      	beq.n	800429a <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
  {
    /* Get the pending status of the Tamper 3 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	4013      	ands	r3, r2
 800427c:	d00d      	beq.n	800429a <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	22ff      	movs	r2, #255	@ 0xff
 8004286:	401a      	ands	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x118>)
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f831 	bl	80042fc <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2221      	movs	r2, #33	@ 0x21
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]
}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b002      	add	sp, #8
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	40010400 	.word	0x40010400
 80042b0:	fffff77f 	.word	0xfffff77f
 80042b4:	00010004 	.word	0x00010004
 80042b8:	ffffdf7f 	.word	0xffffdf7f
 80042bc:	00080004 	.word	0x00080004
 80042c0:	ffffbf7f 	.word	0xffffbf7f
 80042c4:	00400004 	.word	0x00400004
 80042c8:	ffff7f7f 	.word	0xffff7f7f

080042cc <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b002      	add	sp, #8
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			@ (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004318:	4b64      	ldr	r3, [pc, #400]	@ (80044ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	22fa      	movs	r2, #250	@ 0xfa
 800431e:	01d1      	lsls	r1, r2, #7
 8004320:	0018      	movs	r0, r3
 8004322:	f7fb fef9 	bl	8000118 <__udivsi3>
 8004326:	0003      	movs	r3, r0
 8004328:	001a      	movs	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	015b      	lsls	r3, r3, #5
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	189b      	adds	r3, r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	5c9b      	ldrb	r3, [r3, r2]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004342:	2302      	movs	r3, #2
 8004344:	e0ad      	b.n	80044a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	@ 0x21
 8004352:	2102      	movs	r1, #2
 8004354:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	22ca      	movs	r2, #202	@ 0xca
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2253      	movs	r2, #83	@ 0x53
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	2380      	movs	r3, #128	@ 0x80
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4013      	ands	r3, r2
 8004372:	d019      	beq.n	80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3b01      	subs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	22ff      	movs	r2, #255	@ 0xff
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2221      	movs	r2, #33	@ 0x21
 800438c:	2103      	movs	r1, #3
 800438e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e082      	b.n	80044a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2204      	movs	r2, #4
 80043a4:	4013      	ands	r3, r2
 80043a6:	d1e5      	bne.n	8004374 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	493f      	ldr	r1, [pc, #252]	@ (80044b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	22ff      	movs	r2, #255	@ 0xff
 80043c0:	401a      	ands	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	493b      	ldr	r1, [pc, #236]	@ (80044b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80043c8:	430a      	orrs	r2, r1
 80043ca:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80043cc:	4b37      	ldr	r3, [pc, #220]	@ (80044ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	22fa      	movs	r2, #250	@ 0xfa
 80043d2:	01d1      	lsls	r1, r2, #7
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7fb fe9f 	bl	8000118 <__udivsi3>
 80043da:	0003      	movs	r3, r0
 80043dc:	001a      	movs	r2, r3
 80043de:	0013      	movs	r3, r2
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10d      	bne.n	8004414 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	22ff      	movs	r2, #255	@ 0xff
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2221      	movs	r2, #33	@ 0x21
 8004404:	2103      	movs	r1, #3
 8004406:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e046      	b.n	80044a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2204      	movs	r2, #4
 800441c:	4013      	ands	r3, r2
 800441e:	d0e5      	beq.n	80043ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2107      	movs	r1, #7
 800442c:	438a      	bics	r2, r1
 800442e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800444e:	2180      	movs	r1, #128	@ 0x80
 8004450:	0349      	lsls	r1, r1, #13
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004456:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800445c:	2180      	movs	r1, #128	@ 0x80
 800445e:	0349      	lsls	r1, r1, #13
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	01c9      	lsls	r1, r1, #7
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2180      	movs	r1, #128	@ 0x80
 8004482:	00c9      	lsls	r1, r1, #3
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	22ff      	movs	r2, #255	@ 0xff
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2221      	movs	r2, #33	@ 0x21
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b006      	add	sp, #24
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	20000004 	.word	0x20000004
 80044b0:	fffffbff 	.word	0xfffffbff
 80044b4:	fffffb7f 	.word	0xfffffb7f
 80044b8:	40010400 	.word	0x40010400

080044bc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	5c9b      	ldrb	r3, [r3, r2]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e04e      	b.n	8004574 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2221      	movs	r2, #33	@ 0x21
 80044e2:	2102      	movs	r1, #2
 80044e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	22ca      	movs	r2, #202	@ 0xca
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2253      	movs	r2, #83	@ 0x53
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	491e      	ldr	r1, [pc, #120]	@ (800457c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004502:	400a      	ands	r2, r1
 8004504:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	491b      	ldr	r1, [pc, #108]	@ (8004580 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8004512:	400a      	ands	r2, r1
 8004514:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004516:	f7fd f8ef 	bl	80016f8 <HAL_GetTick>
 800451a:	0003      	movs	r3, r0
 800451c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800451e:	e016      	b.n	800454e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004520:	f7fd f8ea 	bl	80016f8 <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	23fa      	movs	r3, #250	@ 0xfa
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	429a      	cmp	r2, r3
 8004530:	d90d      	bls.n	800454e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	22ff      	movs	r2, #255	@ 0xff
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2221      	movs	r2, #33	@ 0x21
 800453e:	2103      	movs	r1, #3
 8004540:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e012      	b.n	8004574 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2204      	movs	r2, #4
 8004556:	4013      	ands	r3, r2
 8004558:	d0e2      	beq.n	8004520 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	22ff      	movs	r2, #255	@ 0xff
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2221      	movs	r2, #33	@ 0x21
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}
 800457c:	fffffbff 	.word	0xfffffbff
 8004580:	ffffbfff 	.word	0xffffbfff

08004584 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800458c:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800458e:	2280      	movs	r2, #128	@ 0x80
 8004590:	0352      	lsls	r2, r2, #13
 8004592:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	4013      	ands	r3, r2
 80045a0:	d014      	beq.n	80045cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00d      	beq.n	80045cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	22ff      	movs	r2, #255	@ 0xff
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7fc f8a8 	bl	800071c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2221      	movs	r2, #33	@ 0x21
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40010400 	.word	0x40010400
 80045e0:	fffffb7f 	.word	0xfffffb7f

080045e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e044      	b.n	8004680 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2278      	movs	r2, #120	@ 0x78
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7fc fb6f 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2101      	movs	r1, #1
 8004620:	438a      	bics	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	0018      	movs	r0, r3
 8004630:	f000 ffb4 	bl	800559c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0018      	movs	r0, r3
 8004638:	f000 fd12 	bl	8005060 <UART_SetConfig>
 800463c:	0003      	movs	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01c      	b.n	8004680 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	490d      	ldr	r1, [pc, #52]	@ (8004688 <HAL_UART_Init+0xa4>)
 8004652:	400a      	ands	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	212a      	movs	r1, #42	@ 0x2a
 8004662:	438a      	bics	r2, r1
 8004664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2101      	movs	r1, #1
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f001 f843 	bl	8005704 <UART_CheckIdleState>
 800467e:	0003      	movs	r3, r0
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}
 8004688:	ffffb7ff 	.word	0xffffb7ff

0800468c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	1dbb      	adds	r3, r7, #6
 8004698:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d000      	beq.n	80046a4 <HAL_UART_Transmit_DMA+0x18>
 80046a2:	e077      	b.n	8004794 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_UART_Transmit_DMA+0x26>
 80046aa:	1dbb      	adds	r3, r7, #6
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e06f      	b.n	8004796 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	2380      	movs	r3, #128	@ 0x80
 80046bc:	015b      	lsls	r3, r3, #5
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_UART_Transmit_DMA+0x4a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	d001      	beq.n	80046d6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e05f      	b.n	8004796 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1dba      	adds	r2, r7, #6
 80046e0:	2150      	movs	r1, #80	@ 0x50
 80046e2:	8812      	ldrh	r2, [r2, #0]
 80046e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1dba      	adds	r2, r7, #6
 80046ea:	2152      	movs	r1, #82	@ 0x52
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2284      	movs	r2, #132	@ 0x84
 80046f4:	2100      	movs	r1, #0
 80046f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2221      	movs	r2, #33	@ 0x21
 80046fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	2b00      	cmp	r3, #0
 8004704:	d027      	beq.n	8004756 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a25      	ldr	r2, [pc, #148]	@ (80047a0 <HAL_UART_Transmit_DMA+0x114>)
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a24      	ldr	r2, [pc, #144]	@ (80047a4 <HAL_UART_Transmit_DMA+0x118>)
 8004714:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a23      	ldr	r2, [pc, #140]	@ (80047a8 <HAL_UART_Transmit_DMA+0x11c>)
 800471c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	2200      	movs	r2, #0
 8004724:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	0019      	movs	r1, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3328      	adds	r3, #40	@ 0x28
 8004736:	001a      	movs	r2, r3
 8004738:	1dbb      	adds	r3, r7, #6
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f7fd f984 	bl	8001a48 <HAL_DMA_Start_IT>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d008      	beq.n	8004756 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2284      	movs	r2, #132	@ 0x84
 8004748:	2110      	movs	r1, #16
 800474a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e01f      	b.n	8004796 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2240      	movs	r2, #64	@ 0x40
 800475c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475e:	f3ef 8310 	mrs	r3, PRIMASK
 8004762:	613b      	str	r3, [r7, #16]
  return(result);
 8004764:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2180      	movs	r1, #128	@ 0x80
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b008      	add	sp, #32
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	08005b85 	.word	0x08005b85
 80047a4:	08005c1d 	.word	0x08005c1d
 80047a8:	08005e23 	.word	0x08005e23

080047ac <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b4:	f3ef 8310 	mrs	r3, PRIMASK
 80047b8:	617b      	str	r3, [r7, #20]
  return(result);
 80047ba:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047be:	2301      	movs	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f383 8810 	msr	PRIMASK, r3
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	21c0      	movs	r1, #192	@ 0xc0
 80047d6:	438a      	bics	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2280      	movs	r2, #128	@ 0x80
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b80      	cmp	r3, #128	@ 0x80
 80047f2:	d135      	bne.n	8004860 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f4:	f3ef 8310 	mrs	r3, PRIMASK
 80047f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047fa:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	2301      	movs	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			@ (mov r8, r8)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	438a      	bics	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	2200      	movs	r2, #0
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	0018      	movs	r0, r3
 800483c:	f7fd f96a 	bl	8001b14 <HAL_DMA_Abort>
 8004840:	1e03      	subs	r3, r0, #0
 8004842:	d00d      	beq.n	8004860 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	0018      	movs	r0, r3
 800484a:	f7fd fa98 	bl	8001d7e <HAL_DMA_GetError>
 800484e:	0003      	movs	r3, r0
 8004850:	2b20      	cmp	r3, #32
 8004852:	d105      	bne.n	8004860 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2284      	movs	r2, #132	@ 0x84
 8004858:	2110      	movs	r1, #16
 800485a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e007      	b.n	8004870 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2252      	movs	r2, #82	@ 0x52
 8004864:	2100      	movs	r1, #0
 8004866:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b00a      	add	sp, #40	@ 0x28
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b092      	sub	sp, #72	@ 0x48
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004880:	f3ef 8310 	mrs	r3, PRIMASK
 8004884:	623b      	str	r3, [r7, #32]
  return(result);
 8004886:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004888:	647b      	str	r3, [r7, #68]	@ 0x44
 800488a:	2301      	movs	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	494b      	ldr	r1, [pc, #300]	@ (80049d0 <HAL_UART_AbortReceive+0x158>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	f383 8810 	msr	PRIMASK, r3
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b2:	f3ef 8310 	mrs	r3, PRIMASK
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80048bc:	2301      	movs	r3, #1
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d118      	bne.n	800491e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ec:	f3ef 8310 	mrs	r3, PRIMASK
 80048f0:	617b      	str	r3, [r7, #20]
  return(result);
 80048f2:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2110      	movs	r1, #16
 800490e:	438a      	bics	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f383 8810 	msr	PRIMASK, r3
}
 800491c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2240      	movs	r2, #64	@ 0x40
 8004926:	4013      	ands	r3, r2
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d135      	bne.n	8004998 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492c:	f3ef 8310 	mrs	r3, PRIMASK
 8004930:	60bb      	str	r3, [r7, #8]
  return(result);
 8004932:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004936:	2301      	movs	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	@ 0x40
 800494e:	438a      	bics	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f383 8810 	msr	PRIMASK, r3
}
 800495c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496a:	2200      	movs	r2, #0
 800496c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004972:	0018      	movs	r0, r3
 8004974:	f7fd f8ce 	bl	8001b14 <HAL_DMA_Abort>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d00d      	beq.n	8004998 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004980:	0018      	movs	r0, r3
 8004982:	f7fd f9fc 	bl	8001d7e <HAL_DMA_GetError>
 8004986:	0003      	movs	r3, r0
 8004988:	2b20      	cmp	r3, #32
 800498a:	d105      	bne.n	8004998 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2284      	movs	r2, #132	@ 0x84
 8004990:	2110      	movs	r1, #16
 8004992:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e017      	b.n	80049c8 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	225a      	movs	r2, #90	@ 0x5a
 800499c:	2100      	movs	r1, #0
 800499e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	220f      	movs	r2, #15
 80049a6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2108      	movs	r1, #8
 80049b4:	430a      	orrs	r2, r1
 80049b6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2280      	movs	r2, #128	@ 0x80
 80049bc:	2120      	movs	r1, #32
 80049be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b012      	add	sp, #72	@ 0x48
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffffedf 	.word	0xfffffedf

080049d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b0ab      	sub	sp, #172	@ 0xac
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	22a4      	movs	r2, #164	@ 0xa4
 80049e4:	18b9      	adds	r1, r7, r2
 80049e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	20a0      	movs	r0, #160	@ 0xa0
 80049f0:	1839      	adds	r1, r7, r0
 80049f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	219c      	movs	r1, #156	@ 0x9c
 80049fc:	1879      	adds	r1, r7, r1
 80049fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a00:	0011      	movs	r1, r2
 8004a02:	18bb      	adds	r3, r7, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a99      	ldr	r2, [pc, #612]	@ (8004c6c <HAL_UART_IRQHandler+0x298>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2298      	movs	r2, #152	@ 0x98
 8004a0c:	18bc      	adds	r4, r7, r2
 8004a0e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a10:	18bb      	adds	r3, r7, r2
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a22:	183b      	adds	r3, r7, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00a      	beq.n	8004a42 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d100      	bne.n	8004a36 <HAL_UART_IRQHandler+0x62>
 8004a34:	e2be      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	0010      	movs	r0, r2
 8004a3e:	4798      	blx	r3
      }
      return;
 8004a40:	e2b8      	b.n	8004fb4 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a42:	2398      	movs	r3, #152	@ 0x98
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d100      	bne.n	8004a4e <HAL_UART_IRQHandler+0x7a>
 8004a4c:	e114      	b.n	8004c78 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a4e:	239c      	movs	r3, #156	@ 0x9c
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4013      	ands	r3, r2
 8004a58:	d106      	bne.n	8004a68 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a5a:	23a0      	movs	r3, #160	@ 0xa0
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <HAL_UART_IRQHandler+0x29c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	d100      	bne.n	8004a68 <HAL_UART_IRQHandler+0x94>
 8004a66:	e107      	b.n	8004c78 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a68:	23a4      	movs	r3, #164	@ 0xa4
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d012      	beq.n	8004a9a <HAL_UART_IRQHandler+0xc6>
 8004a74:	23a0      	movs	r3, #160	@ 0xa0
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	2380      	movs	r3, #128	@ 0x80
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2284      	movs	r2, #132	@ 0x84
 8004a8e:	589b      	ldr	r3, [r3, r2]
 8004a90:	2201      	movs	r2, #1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2184      	movs	r1, #132	@ 0x84
 8004a98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a9a:	23a4      	movs	r3, #164	@ 0xa4
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d011      	beq.n	8004aca <HAL_UART_IRQHandler+0xf6>
 8004aa6:	239c      	movs	r3, #156	@ 0x9c
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2284      	movs	r2, #132	@ 0x84
 8004abe:	589b      	ldr	r3, [r3, r2]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2184      	movs	r1, #132	@ 0x84
 8004ac8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aca:	23a4      	movs	r3, #164	@ 0xa4
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d011      	beq.n	8004afa <HAL_UART_IRQHandler+0x126>
 8004ad6:	239c      	movs	r3, #156	@ 0x9c
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	@ 0x84
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2202      	movs	r2, #2
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2184      	movs	r1, #132	@ 0x84
 8004af8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004afa:	23a4      	movs	r3, #164	@ 0xa4
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4013      	ands	r3, r2
 8004b04:	d017      	beq.n	8004b36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b06:	23a0      	movs	r3, #160	@ 0xa0
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d105      	bne.n	8004b1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b12:	239c      	movs	r3, #156	@ 0x9c
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2208      	movs	r2, #8
 8004b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2284      	movs	r2, #132	@ 0x84
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2184      	movs	r1, #132	@ 0x84
 8004b34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b36:	23a4      	movs	r3, #164	@ 0xa4
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4013      	ands	r3, r2
 8004b42:	d013      	beq.n	8004b6c <HAL_UART_IRQHandler+0x198>
 8004b44:	23a0      	movs	r3, #160	@ 0xa0
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	04db      	lsls	r3, r3, #19
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d00c      	beq.n	8004b6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2284      	movs	r2, #132	@ 0x84
 8004b60:	589b      	ldr	r3, [r3, r2]
 8004b62:	2220      	movs	r2, #32
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2184      	movs	r1, #132	@ 0x84
 8004b6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2284      	movs	r2, #132	@ 0x84
 8004b70:	589b      	ldr	r3, [r3, r2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d100      	bne.n	8004b78 <HAL_UART_IRQHandler+0x1a4>
 8004b76:	e21f      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b78:	23a4      	movs	r3, #164	@ 0xa4
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	4013      	ands	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b84:	23a0      	movs	r3, #160	@ 0xa0
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	0010      	movs	r0, r2
 8004ba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2284      	movs	r2, #132	@ 0x84
 8004ba6:	589b      	ldr	r3, [r3, r2]
 8004ba8:	2194      	movs	r1, #148	@ 0x94
 8004baa:	187a      	adds	r2, r7, r1
 8004bac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2240      	movs	r2, #64	@ 0x40
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d004      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2228      	movs	r2, #40	@ 0x28
 8004bc2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bc4:	d047      	beq.n	8004c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 ff77 	bl	8005abc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d137      	bne.n	8004c4c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be4:	2090      	movs	r0, #144	@ 0x90
 8004be6:	183a      	adds	r2, r7, r0
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	2301      	movs	r3, #1
 8004bec:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2140      	movs	r1, #64	@ 0x40
 8004c02:	438a      	bics	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	183b      	adds	r3, r7, r0
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c20:	4a14      	ldr	r2, [pc, #80]	@ (8004c74 <HAL_UART_IRQHandler+0x2a0>)
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fc ffb3 	bl	8001b94 <HAL_DMA_Abort_IT>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d01a      	beq.n	8004c68 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e012      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 f9e5 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	e00d      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 f9e0 	bl	8005014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e008      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 f9db 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2284      	movs	r2, #132	@ 0x84
 8004c62:	2100      	movs	r1, #0
 8004c64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c66:	e1a7      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	46c0      	nop			@ (mov r8, r8)
    return;
 8004c6a:	e1a5      	b.n	8004fb8 <HAL_UART_IRQHandler+0x5e4>
 8004c6c:	0000080f 	.word	0x0000080f
 8004c70:	04000120 	.word	0x04000120
 8004c74:	08005ea7 	.word	0x08005ea7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d000      	beq.n	8004c82 <HAL_UART_IRQHandler+0x2ae>
 8004c80:	e159      	b.n	8004f36 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c82:	23a4      	movs	r3, #164	@ 0xa4
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d100      	bne.n	8004c90 <HAL_UART_IRQHandler+0x2bc>
 8004c8e:	e152      	b.n	8004f36 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c90:	23a0      	movs	r3, #160	@ 0xa0
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <HAL_UART_IRQHandler+0x2ca>
 8004c9c:	e14b      	b.n	8004f36 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d000      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x2e2>
 8004cb4:	e0bf      	b.n	8004e36 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	217e      	movs	r1, #126	@ 0x7e
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d100      	bne.n	8004cce <HAL_UART_IRQHandler+0x2fa>
 8004ccc:	e095      	b.n	8004dfa <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2258      	movs	r2, #88	@ 0x58
 8004cd2:	5a9b      	ldrh	r3, [r3, r2]
 8004cd4:	187a      	adds	r2, r7, r1
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d300      	bcc.n	8004cde <HAL_UART_IRQHandler+0x30a>
 8004cdc:	e08d      	b.n	8004dfa <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	187a      	adds	r2, r7, r1
 8004ce2:	215a      	movs	r1, #90	@ 0x5a
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d16f      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d00:	2301      	movs	r3, #1
 8004d02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	49ad      	ldr	r1, [pc, #692]	@ (8004fcc <HAL_UART_IRQHandler+0x5f8>)
 8004d18:	400a      	ands	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d32:	2301      	movs	r3, #1
 8004d34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			@ (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d64:	2301      	movs	r3, #1
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2140      	movs	r1, #64	@ 0x40
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2280      	movs	r2, #128	@ 0x80
 8004d90:	2120      	movs	r1, #32
 8004d92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004da4:	2301      	movs	r3, #1
 8004da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2110      	movs	r1, #16
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fc fe9f 	bl	8001b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2258      	movs	r2, #88	@ 0x58
 8004de0:	5a9a      	ldrh	r2, [r3, r2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	215a      	movs	r1, #90	@ 0x5a
 8004de6:	5a5b      	ldrh	r3, [r3, r1]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0011      	movs	r1, r2
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7fb fc76 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004df8:	e0e0      	b.n	8004fbc <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2258      	movs	r2, #88	@ 0x58
 8004dfe:	5a9b      	ldrh	r3, [r3, r2]
 8004e00:	227e      	movs	r2, #126	@ 0x7e
 8004e02:	18ba      	adds	r2, r7, r2
 8004e04:	8812      	ldrh	r2, [r2, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d000      	beq.n	8004e0c <HAL_UART_IRQHandler+0x438>
 8004e0a:	e0d7      	b.n	8004fbc <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2220      	movs	r2, #32
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d000      	beq.n	8004e1e <HAL_UART_IRQHandler+0x44a>
 8004e1c:	e0ce      	b.n	8004fbc <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2258      	movs	r2, #88	@ 0x58
 8004e28:	5a9a      	ldrh	r2, [r3, r2]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7fb fc58 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004e34:	e0c2      	b.n	8004fbc <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2258      	movs	r2, #88	@ 0x58
 8004e3a:	5a99      	ldrh	r1, [r3, r2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	225a      	movs	r2, #90	@ 0x5a
 8004e40:	5a9b      	ldrh	r3, [r3, r2]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	208e      	movs	r0, #142	@ 0x8e
 8004e46:	183b      	adds	r3, r7, r0
 8004e48:	1a8a      	subs	r2, r1, r2
 8004e4a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	225a      	movs	r2, #90	@ 0x5a
 8004e50:	5a9b      	ldrh	r3, [r3, r2]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d100      	bne.n	8004e5a <HAL_UART_IRQHandler+0x486>
 8004e58:	e0b2      	b.n	8004fc0 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8004e5a:	183b      	adds	r3, r7, r0
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d100      	bne.n	8004e64 <HAL_UART_IRQHandler+0x490>
 8004e62:	e0ad      	b.n	8004fc0 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6c:	2488      	movs	r4, #136	@ 0x88
 8004e6e:	193a      	adds	r2, r7, r4
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	2301      	movs	r3, #1
 8004e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4951      	ldr	r1, [pc, #324]	@ (8004fd0 <HAL_UART_IRQHandler+0x5fc>)
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ea2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea4:	2484      	movs	r4, #132	@ 0x84
 8004ea6:	193a      	adds	r2, r7, r4
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	2120      	movs	r1, #32
 8004eda:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	2480      	movs	r4, #128	@ 0x80
 8004ef2:	193a      	adds	r2, r7, r4
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	f383 8810 	msr	PRIMASK, r3
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2110      	movs	r1, #16
 8004f0e:	438a      	bics	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	193b      	adds	r3, r7, r4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1a:	f383 8810 	msr	PRIMASK, r3
}
 8004f1e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fb fbd8 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f34:	e044      	b.n	8004fc0 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f36:	23a4      	movs	r3, #164	@ 0xa4
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	035b      	lsls	r3, r3, #13
 8004f40:	4013      	ands	r3, r2
 8004f42:	d010      	beq.n	8004f66 <HAL_UART_IRQHandler+0x592>
 8004f44:	239c      	movs	r3, #156	@ 0x9c
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	@ 0x80
 8004f4c:	03db      	lsls	r3, r3, #15
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2280      	movs	r2, #128	@ 0x80
 8004f58:	0352      	lsls	r2, r2, #13
 8004f5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 ffdf 	bl	8005f22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f64:	e02f      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f66:	23a4      	movs	r3, #164	@ 0xa4
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2280      	movs	r2, #128	@ 0x80
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f72:	23a0      	movs	r3, #160	@ 0xa0
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2280      	movs	r2, #128	@ 0x80
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01e      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	0010      	movs	r0, r2
 8004f8e:	4798      	blx	r3
    }
    return;
 8004f90:	e018      	b.n	8004fc4 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f92:	23a4      	movs	r3, #164	@ 0xa4
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2240      	movs	r2, #64	@ 0x40
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
 8004f9e:	23a0      	movs	r3, #160	@ 0xa0
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2240      	movs	r2, #64	@ 0x40
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 ff8d 	bl	8005ecc <UART_EndTransmit_IT>
    return;
 8004fb2:	e008      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	e006      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004fb8:	46c0      	nop			@ (mov r8, r8)
 8004fba:	e004      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fbc:	46c0      	nop			@ (mov r8, r8)
 8004fbe:	e002      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004fc0:	46c0      	nop			@ (mov r8, r8)
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004fc4:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b02b      	add	sp, #172	@ 0xac
 8004fca:	bd90      	pop	{r4, r7, pc}
 8004fcc:	fffffeff 	.word	0xfffffeff
 8004fd0:	fffffedf 	.word	0xfffffedf

08004fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fec:	46c0      	nop			@ (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b002      	add	sp, #8
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b002      	add	sp, #8
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b002      	add	sp, #8
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005030:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2280      	movs	r2, #128	@ 0x80
 8005036:	589b      	ldr	r3, [r3, r2]
 8005038:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b004      	add	sp, #16
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2284      	movs	r2, #132	@ 0x84
 8005054:	589b      	ldr	r3, [r3, r2]
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b002      	add	sp, #8
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	b5b0      	push	{r4, r5, r7, lr}
 8005062:	b08e      	sub	sp, #56	@ 0x38
 8005064:	af00      	add	r7, sp, #0
 8005066:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005068:	231a      	movs	r3, #26
 800506a:	2218      	movs	r2, #24
 800506c:	189b      	adds	r3, r3, r2
 800506e:	19db      	adds	r3, r3, r7
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4ac3      	ldr	r2, [pc, #780]	@ (80053a0 <UART_SetConfig+0x340>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4abe      	ldr	r2, [pc, #760]	@ (80053a4 <UART_SetConfig+0x344>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4ab8      	ldr	r2, [pc, #736]	@ (80053a8 <UART_SetConfig+0x348>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050d0:	4313      	orrs	r3, r2
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4ab4      	ldr	r2, [pc, #720]	@ (80053ac <UART_SetConfig+0x34c>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4ab0      	ldr	r2, [pc, #704]	@ (80053b0 <UART_SetConfig+0x350>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d131      	bne.n	8005158 <UART_SetConfig+0xf8>
 80050f4:	4baf      	ldr	r3, [pc, #700]	@ (80053b4 <UART_SetConfig+0x354>)
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f8:	2203      	movs	r2, #3
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d01d      	beq.n	800513c <UART_SetConfig+0xdc>
 8005100:	d823      	bhi.n	800514a <UART_SetConfig+0xea>
 8005102:	2b02      	cmp	r3, #2
 8005104:	d00c      	beq.n	8005120 <UART_SetConfig+0xc0>
 8005106:	d820      	bhi.n	800514a <UART_SetConfig+0xea>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <UART_SetConfig+0xb2>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00e      	beq.n	800512e <UART_SetConfig+0xce>
 8005110:	e01b      	b.n	800514a <UART_SetConfig+0xea>
 8005112:	231b      	movs	r3, #27
 8005114:	2218      	movs	r2, #24
 8005116:	189b      	adds	r3, r3, r2
 8005118:	19db      	adds	r3, r3, r7
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e0b4      	b.n	800528a <UART_SetConfig+0x22a>
 8005120:	231b      	movs	r3, #27
 8005122:	2218      	movs	r2, #24
 8005124:	189b      	adds	r3, r3, r2
 8005126:	19db      	adds	r3, r3, r7
 8005128:	2202      	movs	r2, #2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e0ad      	b.n	800528a <UART_SetConfig+0x22a>
 800512e:	231b      	movs	r3, #27
 8005130:	2218      	movs	r2, #24
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	2204      	movs	r2, #4
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e0a6      	b.n	800528a <UART_SetConfig+0x22a>
 800513c:	231b      	movs	r3, #27
 800513e:	2218      	movs	r2, #24
 8005140:	189b      	adds	r3, r3, r2
 8005142:	19db      	adds	r3, r3, r7
 8005144:	2208      	movs	r2, #8
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e09f      	b.n	800528a <UART_SetConfig+0x22a>
 800514a:	231b      	movs	r3, #27
 800514c:	2218      	movs	r2, #24
 800514e:	189b      	adds	r3, r3, r2
 8005150:	19db      	adds	r3, r3, r7
 8005152:	2210      	movs	r2, #16
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e098      	b.n	800528a <UART_SetConfig+0x22a>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a96      	ldr	r2, [pc, #600]	@ (80053b8 <UART_SetConfig+0x358>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d131      	bne.n	80051c6 <UART_SetConfig+0x166>
 8005162:	4b94      	ldr	r3, [pc, #592]	@ (80053b4 <UART_SetConfig+0x354>)
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	220c      	movs	r2, #12
 8005168:	4013      	ands	r3, r2
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d01d      	beq.n	80051aa <UART_SetConfig+0x14a>
 800516e:	d823      	bhi.n	80051b8 <UART_SetConfig+0x158>
 8005170:	2b08      	cmp	r3, #8
 8005172:	d00c      	beq.n	800518e <UART_SetConfig+0x12e>
 8005174:	d820      	bhi.n	80051b8 <UART_SetConfig+0x158>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <UART_SetConfig+0x120>
 800517a:	2b04      	cmp	r3, #4
 800517c:	d00e      	beq.n	800519c <UART_SetConfig+0x13c>
 800517e:	e01b      	b.n	80051b8 <UART_SetConfig+0x158>
 8005180:	231b      	movs	r3, #27
 8005182:	2218      	movs	r2, #24
 8005184:	189b      	adds	r3, r3, r2
 8005186:	19db      	adds	r3, r3, r7
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e07d      	b.n	800528a <UART_SetConfig+0x22a>
 800518e:	231b      	movs	r3, #27
 8005190:	2218      	movs	r2, #24
 8005192:	189b      	adds	r3, r3, r2
 8005194:	19db      	adds	r3, r3, r7
 8005196:	2202      	movs	r2, #2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e076      	b.n	800528a <UART_SetConfig+0x22a>
 800519c:	231b      	movs	r3, #27
 800519e:	2218      	movs	r2, #24
 80051a0:	189b      	adds	r3, r3, r2
 80051a2:	19db      	adds	r3, r3, r7
 80051a4:	2204      	movs	r2, #4
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e06f      	b.n	800528a <UART_SetConfig+0x22a>
 80051aa:	231b      	movs	r3, #27
 80051ac:	2218      	movs	r2, #24
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	19db      	adds	r3, r3, r7
 80051b2:	2208      	movs	r2, #8
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e068      	b.n	800528a <UART_SetConfig+0x22a>
 80051b8:	231b      	movs	r3, #27
 80051ba:	2218      	movs	r2, #24
 80051bc:	189b      	adds	r3, r3, r2
 80051be:	19db      	adds	r3, r3, r7
 80051c0:	2210      	movs	r2, #16
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	e061      	b.n	800528a <UART_SetConfig+0x22a>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7c      	ldr	r2, [pc, #496]	@ (80053bc <UART_SetConfig+0x35c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d106      	bne.n	80051de <UART_SetConfig+0x17e>
 80051d0:	231b      	movs	r3, #27
 80051d2:	2218      	movs	r2, #24
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	19db      	adds	r3, r3, r7
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e055      	b.n	800528a <UART_SetConfig+0x22a>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a77      	ldr	r2, [pc, #476]	@ (80053c0 <UART_SetConfig+0x360>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d106      	bne.n	80051f6 <UART_SetConfig+0x196>
 80051e8:	231b      	movs	r3, #27
 80051ea:	2218      	movs	r2, #24
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	19db      	adds	r3, r3, r7
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e049      	b.n	800528a <UART_SetConfig+0x22a>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6b      	ldr	r2, [pc, #428]	@ (80053a8 <UART_SetConfig+0x348>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d13e      	bne.n	800527e <UART_SetConfig+0x21e>
 8005200:	4b6c      	ldr	r3, [pc, #432]	@ (80053b4 <UART_SetConfig+0x354>)
 8005202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005204:	23c0      	movs	r3, #192	@ 0xc0
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	4013      	ands	r3, r2
 800520a:	22c0      	movs	r2, #192	@ 0xc0
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	4293      	cmp	r3, r2
 8005210:	d027      	beq.n	8005262 <UART_SetConfig+0x202>
 8005212:	22c0      	movs	r2, #192	@ 0xc0
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	4293      	cmp	r3, r2
 8005218:	d82a      	bhi.n	8005270 <UART_SetConfig+0x210>
 800521a:	2280      	movs	r2, #128	@ 0x80
 800521c:	0112      	lsls	r2, r2, #4
 800521e:	4293      	cmp	r3, r2
 8005220:	d011      	beq.n	8005246 <UART_SetConfig+0x1e6>
 8005222:	2280      	movs	r2, #128	@ 0x80
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	4293      	cmp	r3, r2
 8005228:	d822      	bhi.n	8005270 <UART_SetConfig+0x210>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <UART_SetConfig+0x1d8>
 800522e:	2280      	movs	r2, #128	@ 0x80
 8005230:	00d2      	lsls	r2, r2, #3
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <UART_SetConfig+0x1f4>
 8005236:	e01b      	b.n	8005270 <UART_SetConfig+0x210>
 8005238:	231b      	movs	r3, #27
 800523a:	2218      	movs	r2, #24
 800523c:	189b      	adds	r3, r3, r2
 800523e:	19db      	adds	r3, r3, r7
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e021      	b.n	800528a <UART_SetConfig+0x22a>
 8005246:	231b      	movs	r3, #27
 8005248:	2218      	movs	r2, #24
 800524a:	189b      	adds	r3, r3, r2
 800524c:	19db      	adds	r3, r3, r7
 800524e:	2202      	movs	r2, #2
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e01a      	b.n	800528a <UART_SetConfig+0x22a>
 8005254:	231b      	movs	r3, #27
 8005256:	2218      	movs	r2, #24
 8005258:	189b      	adds	r3, r3, r2
 800525a:	19db      	adds	r3, r3, r7
 800525c:	2204      	movs	r2, #4
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e013      	b.n	800528a <UART_SetConfig+0x22a>
 8005262:	231b      	movs	r3, #27
 8005264:	2218      	movs	r2, #24
 8005266:	189b      	adds	r3, r3, r2
 8005268:	19db      	adds	r3, r3, r7
 800526a:	2208      	movs	r2, #8
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e00c      	b.n	800528a <UART_SetConfig+0x22a>
 8005270:	231b      	movs	r3, #27
 8005272:	2218      	movs	r2, #24
 8005274:	189b      	adds	r3, r3, r2
 8005276:	19db      	adds	r3, r3, r7
 8005278:	2210      	movs	r2, #16
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e005      	b.n	800528a <UART_SetConfig+0x22a>
 800527e:	231b      	movs	r3, #27
 8005280:	2218      	movs	r2, #24
 8005282:	189b      	adds	r3, r3, r2
 8005284:	19db      	adds	r3, r3, r7
 8005286:	2210      	movs	r2, #16
 8005288:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a46      	ldr	r2, [pc, #280]	@ (80053a8 <UART_SetConfig+0x348>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d000      	beq.n	8005296 <UART_SetConfig+0x236>
 8005294:	e09a      	b.n	80053cc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005296:	231b      	movs	r3, #27
 8005298:	2218      	movs	r2, #24
 800529a:	189b      	adds	r3, r3, r2
 800529c:	19db      	adds	r3, r3, r7
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d01d      	beq.n	80052e0 <UART_SetConfig+0x280>
 80052a4:	dc20      	bgt.n	80052e8 <UART_SetConfig+0x288>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d015      	beq.n	80052d6 <UART_SetConfig+0x276>
 80052aa:	dc1d      	bgt.n	80052e8 <UART_SetConfig+0x288>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <UART_SetConfig+0x256>
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0x260>
 80052b4:	e018      	b.n	80052e8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b6:	f7fe fc7f 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 80052ba:	0003      	movs	r3, r0
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052be:	e01c      	b.n	80052fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c0:	4b3c      	ldr	r3, [pc, #240]	@ (80053b4 <UART_SetConfig+0x354>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2210      	movs	r2, #16
 80052c6:	4013      	ands	r3, r2
 80052c8:	d002      	beq.n	80052d0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052ca:	4b3e      	ldr	r3, [pc, #248]	@ (80053c4 <UART_SetConfig+0x364>)
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <UART_SetConfig+0x368>)
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052d4:	e011      	b.n	80052fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fbdf 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 80052da:	0003      	movs	r3, r0
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052de:	e00c      	b.n	80052fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052e6:	e008      	b.n	80052fa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80052ec:	231a      	movs	r3, #26
 80052ee:	2218      	movs	r2, #24
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	19db      	adds	r3, r3, r7
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
        break;
 80052f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d100      	bne.n	8005302 <UART_SetConfig+0x2a2>
 8005300:	e133      	b.n	800556a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	0013      	movs	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	189b      	adds	r3, r3, r2
 800530c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d305      	bcc.n	800531e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531a:	429a      	cmp	r2, r3
 800531c:	d906      	bls.n	800532c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800531e:	231a      	movs	r3, #26
 8005320:	2218      	movs	r2, #24
 8005322:	189b      	adds	r3, r3, r2
 8005324:	19db      	adds	r3, r3, r7
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e11e      	b.n	800556a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	6939      	ldr	r1, [r7, #16]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	000b      	movs	r3, r1
 800533a:	0e1b      	lsrs	r3, r3, #24
 800533c:	0010      	movs	r0, r2
 800533e:	0205      	lsls	r5, r0, #8
 8005340:	431d      	orrs	r5, r3
 8005342:	000b      	movs	r3, r1
 8005344:	021c      	lsls	r4, r3, #8
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	1900      	adds	r0, r0, r4
 8005358:	4169      	adcs	r1, r5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f7fa ff62 	bl	8000230 <__aeabi_uldivmod>
 800536c:	0002      	movs	r2, r0
 800536e:	000b      	movs	r3, r1
 8005370:	0013      	movs	r3, r2
 8005372:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005376:	23c0      	movs	r3, #192	@ 0xc0
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	429a      	cmp	r2, r3
 800537c:	d309      	bcc.n	8005392 <UART_SetConfig+0x332>
 800537e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	035b      	lsls	r3, r3, #13
 8005384:	429a      	cmp	r2, r3
 8005386:	d204      	bcs.n	8005392 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e0eb      	b.n	800556a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005392:	231a      	movs	r3, #26
 8005394:	2218      	movs	r2, #24
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e0e4      	b.n	800556a <UART_SetConfig+0x50a>
 80053a0:	efff69f3 	.word	0xefff69f3
 80053a4:	ffffcfff 	.word	0xffffcfff
 80053a8:	40004800 	.word	0x40004800
 80053ac:	fffff4ff 	.word	0xfffff4ff
 80053b0:	40013800 	.word	0x40013800
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40004400 	.word	0x40004400
 80053bc:	40004c00 	.word	0x40004c00
 80053c0:	40005000 	.word	0x40005000
 80053c4:	003d0900 	.word	0x003d0900
 80053c8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d000      	beq.n	80053da <UART_SetConfig+0x37a>
 80053d8:	e070      	b.n	80054bc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80053da:	231b      	movs	r3, #27
 80053dc:	2218      	movs	r2, #24
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	19db      	adds	r3, r3, r7
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d822      	bhi.n	800542e <UART_SetConfig+0x3ce>
 80053e8:	009a      	lsls	r2, r3, #2
 80053ea:	4b67      	ldr	r3, [pc, #412]	@ (8005588 <UART_SetConfig+0x528>)
 80053ec:	18d3      	adds	r3, r2, r3
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f2:	f7fe fbe1 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 80053f6:	0003      	movs	r3, r0
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053fa:	e021      	b.n	8005440 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe fbf2 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8005400:	0003      	movs	r3, r0
 8005402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005404:	e01c      	b.n	8005440 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005406:	4b61      	ldr	r3, [pc, #388]	@ (800558c <UART_SetConfig+0x52c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2210      	movs	r2, #16
 800540c:	4013      	ands	r3, r2
 800540e:	d002      	beq.n	8005416 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005410:	4b5f      	ldr	r3, [pc, #380]	@ (8005590 <UART_SetConfig+0x530>)
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005414:	e014      	b.n	8005440 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005416:	4b5f      	ldr	r3, [pc, #380]	@ (8005594 <UART_SetConfig+0x534>)
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800541a:	e011      	b.n	8005440 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541c:	f7fe fb3c 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8005420:	0003      	movs	r3, r0
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005424:	e00c      	b.n	8005440 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005426:	2380      	movs	r3, #128	@ 0x80
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800542c:	e008      	b.n	8005440 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005432:	231a      	movs	r3, #26
 8005434:	2218      	movs	r2, #24
 8005436:	189b      	adds	r3, r3, r2
 8005438:	19db      	adds	r3, r3, r7
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
        break;
 800543e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d100      	bne.n	8005448 <UART_SetConfig+0x3e8>
 8005446:	e090      	b.n	800556a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544a:	005a      	lsls	r2, r3, #1
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	18d2      	adds	r2, r2, r3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	0019      	movs	r1, r3
 800545a:	0010      	movs	r0, r2
 800545c:	f7fa fe5c 	bl	8000118 <__udivsi3>
 8005460:	0003      	movs	r3, r0
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d921      	bls.n	80054ae <UART_SetConfig+0x44e>
 800546a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	025b      	lsls	r3, r3, #9
 8005470:	429a      	cmp	r2, r3
 8005472:	d21c      	bcs.n	80054ae <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	b29a      	uxth	r2, r3
 8005478:	200e      	movs	r0, #14
 800547a:	2418      	movs	r4, #24
 800547c:	1903      	adds	r3, r0, r4
 800547e:	19db      	adds	r3, r3, r7
 8005480:	210f      	movs	r1, #15
 8005482:	438a      	bics	r2, r1
 8005484:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	2207      	movs	r2, #7
 800548e:	4013      	ands	r3, r2
 8005490:	b299      	uxth	r1, r3
 8005492:	1903      	adds	r3, r0, r4
 8005494:	19db      	adds	r3, r3, r7
 8005496:	1902      	adds	r2, r0, r4
 8005498:	19d2      	adds	r2, r2, r7
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1902      	adds	r2, r0, r4
 80054a6:	19d2      	adds	r2, r2, r7
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	e05d      	b.n	800556a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054ae:	231a      	movs	r3, #26
 80054b0:	2218      	movs	r2, #24
 80054b2:	189b      	adds	r3, r3, r2
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e056      	b.n	800556a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054bc:	231b      	movs	r3, #27
 80054be:	2218      	movs	r2, #24
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d822      	bhi.n	8005510 <UART_SetConfig+0x4b0>
 80054ca:	009a      	lsls	r2, r3, #2
 80054cc:	4b32      	ldr	r3, [pc, #200]	@ (8005598 <UART_SetConfig+0x538>)
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fe fb70 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 80054d8:	0003      	movs	r3, r0
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054dc:	e021      	b.n	8005522 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054de:	f7fe fb81 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 80054e2:	0003      	movs	r3, r0
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054e6:	e01c      	b.n	8005522 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e8:	4b28      	ldr	r3, [pc, #160]	@ (800558c <UART_SetConfig+0x52c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2210      	movs	r2, #16
 80054ee:	4013      	ands	r3, r2
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054f2:	4b27      	ldr	r3, [pc, #156]	@ (8005590 <UART_SetConfig+0x530>)
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054f6:	e014      	b.n	8005522 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b26      	ldr	r3, [pc, #152]	@ (8005594 <UART_SetConfig+0x534>)
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054fc:	e011      	b.n	8005522 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fe facb 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8005502:	0003      	movs	r3, r0
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005506:	e00c      	b.n	8005522 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800550e:	e008      	b.n	8005522 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005514:	231a      	movs	r3, #26
 8005516:	2218      	movs	r2, #24
 8005518:	189b      	adds	r3, r3, r2
 800551a:	19db      	adds	r3, r3, r7
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
        break;
 8005520:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	085a      	lsrs	r2, r3, #1
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	18d2      	adds	r2, r2, r3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	0019      	movs	r1, r3
 8005538:	0010      	movs	r0, r2
 800553a:	f7fa fded 	bl	8000118 <__udivsi3>
 800553e:	0003      	movs	r3, r0
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d90a      	bls.n	800555e <UART_SetConfig+0x4fe>
 8005548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	025b      	lsls	r3, r3, #9
 800554e:	429a      	cmp	r2, r3
 8005550:	d205      	bcs.n	800555e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	b29a      	uxth	r2, r3
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e005      	b.n	800556a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800555e:	231a      	movs	r3, #26
 8005560:	2218      	movs	r2, #24
 8005562:	189b      	adds	r3, r3, r2
 8005564:	19db      	adds	r3, r3, r7
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2200      	movs	r2, #0
 800556e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2200      	movs	r2, #0
 8005574:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005576:	231a      	movs	r3, #26
 8005578:	2218      	movs	r2, #24
 800557a:	189b      	adds	r3, r3, r2
 800557c:	19db      	adds	r3, r3, r7
 800557e:	781b      	ldrb	r3, [r3, #0]
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b00e      	add	sp, #56	@ 0x38
 8005586:	bdb0      	pop	{r4, r5, r7, pc}
 8005588:	08006c10 	.word	0x08006c10
 800558c:	40021000 	.word	0x40021000
 8005590:	003d0900 	.word	0x003d0900
 8005594:	00f42400 	.word	0x00f42400
 8005598:	08006c34 	.word	0x08006c34

0800559c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	2208      	movs	r2, #8
 80055aa:	4013      	ands	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a4a      	ldr	r2, [pc, #296]	@ (80056e0 <UART_AdvFeatureConfig+0x144>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	0019      	movs	r1, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2201      	movs	r2, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4a43      	ldr	r2, [pc, #268]	@ (80056e4 <UART_AdvFeatureConfig+0x148>)
 80055d8:	4013      	ands	r3, r2
 80055da:	0019      	movs	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	2202      	movs	r2, #2
 80055ee:	4013      	ands	r3, r2
 80055f0:	d00b      	beq.n	800560a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	@ (80056e8 <UART_AdvFeatureConfig+0x14c>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	d00b      	beq.n	800562c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4a34      	ldr	r2, [pc, #208]	@ (80056ec <UART_AdvFeatureConfig+0x150>)
 800561c:	4013      	ands	r3, r2
 800561e:	0019      	movs	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	2210      	movs	r2, #16
 8005632:	4013      	ands	r3, r2
 8005634:	d00b      	beq.n	800564e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a2c      	ldr	r2, [pc, #176]	@ (80056f0 <UART_AdvFeatureConfig+0x154>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	2220      	movs	r2, #32
 8005654:	4013      	ands	r3, r2
 8005656:	d00b      	beq.n	8005670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	4a25      	ldr	r2, [pc, #148]	@ (80056f4 <UART_AdvFeatureConfig+0x158>)
 8005660:	4013      	ands	r3, r2
 8005662:	0019      	movs	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	2240      	movs	r2, #64	@ 0x40
 8005676:	4013      	ands	r3, r2
 8005678:	d01d      	beq.n	80056b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	@ (80056f8 <UART_AdvFeatureConfig+0x15c>)
 8005682:	4013      	ands	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	035b      	lsls	r3, r3, #13
 800569a:	429a      	cmp	r2, r3
 800569c:	d10b      	bne.n	80056b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <UART_AdvFeatureConfig+0x160>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	2280      	movs	r2, #128	@ 0x80
 80056bc:	4013      	ands	r3, r2
 80056be:	d00b      	beq.n	80056d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005700 <UART_AdvFeatureConfig+0x164>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
}
 80056d8:	46c0      	nop			@ (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	ffff7fff 	.word	0xffff7fff
 80056e4:	fffdffff 	.word	0xfffdffff
 80056e8:	fffeffff 	.word	0xfffeffff
 80056ec:	fffbffff 	.word	0xfffbffff
 80056f0:	ffffefff 	.word	0xffffefff
 80056f4:	ffffdfff 	.word	0xffffdfff
 80056f8:	ffefffff 	.word	0xffefffff
 80056fc:	ff9fffff 	.word	0xff9fffff
 8005700:	fff7ffff 	.word	0xfff7ffff

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b092      	sub	sp, #72	@ 0x48
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2284      	movs	r2, #132	@ 0x84
 8005710:	2100      	movs	r1, #0
 8005712:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb fff0 	bl	80016f8 <HAL_GetTick>
 8005718:	0003      	movs	r3, r0
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2208      	movs	r2, #8
 8005724:	4013      	ands	r3, r2
 8005726:	2b08      	cmp	r3, #8
 8005728:	d12c      	bne.n	8005784 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	0391      	lsls	r1, r2, #14
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4a46      	ldr	r2, [pc, #280]	@ (800584c <UART_CheckIdleState+0x148>)
 8005734:	9200      	str	r2, [sp, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	f000 f88c 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 800573c:	1e03      	subs	r3, r0, #0
 800573e:	d021      	beq.n	8005784 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005740:	f3ef 8310 	mrs	r3, PRIMASK
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800574a:	2301      	movs	r3, #1
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	46c0      	nop			@ (mov r8, r8)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2180      	movs	r1, #128	@ 0x80
 8005762:	438a      	bics	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576c:	f383 8810 	msr	PRIMASK, r3
}
 8005770:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2278      	movs	r2, #120	@ 0x78
 800577c:	2100      	movs	r1, #0
 800577e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e05f      	b.n	8005844 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2204      	movs	r2, #4
 800578c:	4013      	ands	r3, r2
 800578e:	2b04      	cmp	r3, #4
 8005790:	d146      	bne.n	8005820 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005794:	2280      	movs	r2, #128	@ 0x80
 8005796:	03d1      	lsls	r1, r2, #15
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4a2c      	ldr	r2, [pc, #176]	@ (800584c <UART_CheckIdleState+0x148>)
 800579c:	9200      	str	r2, [sp, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	f000 f858 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 80057a4:	1e03      	subs	r3, r0, #0
 80057a6:	d03b      	beq.n	8005820 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b2:	2301      	movs	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4921      	ldr	r1, [pc, #132]	@ (8005850 <UART_CheckIdleState+0x14c>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e4:	2301      	movs	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	438a      	bics	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2280      	movs	r2, #128	@ 0x80
 8005810:	2120      	movs	r1, #32
 8005812:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2278      	movs	r2, #120	@ 0x78
 8005818:	2100      	movs	r1, #0
 800581a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e011      	b.n	8005844 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2280      	movs	r2, #128	@ 0x80
 800582a:	2120      	movs	r1, #32
 800582c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2278      	movs	r2, #120	@ 0x78
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b010      	add	sp, #64	@ 0x40
 800584a:	bd80      	pop	{r7, pc}
 800584c:	01ffffff 	.word	0x01ffffff
 8005850:	fffffedf 	.word	0xfffffedf

08005854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	1dfb      	adds	r3, r7, #7
 8005862:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005864:	e051      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3301      	adds	r3, #1
 800586a:	d04e      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586c:	f7fb ff44 	bl	80016f8 <HAL_GetTick>
 8005870:	0002      	movs	r2, r0
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	429a      	cmp	r2, r3
 800587a:	d302      	bcc.n	8005882 <UART_WaitOnFlagUntilTimeout+0x2e>
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e051      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2204      	movs	r2, #4
 800588e:	4013      	ands	r3, r2
 8005890:	d03b      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b80      	cmp	r3, #128	@ 0x80
 8005896:	d038      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d035      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2208      	movs	r2, #8
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d111      	bne.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2208      	movs	r2, #8
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f900 	bl	8005abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2284      	movs	r2, #132	@ 0x84
 80058c0:	2108      	movs	r1, #8
 80058c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2278      	movs	r2, #120	@ 0x78
 80058c8:	2100      	movs	r1, #0
 80058ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e02c      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	401a      	ands	r2, r3
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d112      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2280      	movs	r2, #128	@ 0x80
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f8e3 	bl	8005abc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2284      	movs	r2, #132	@ 0x84
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2278      	movs	r2, #120	@ 0x78
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e00f      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	425a      	negs	r2, r3
 800591a:	4153      	adcs	r3, r2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	001a      	movs	r2, r3
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d09e      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b004      	add	sp, #16
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b090      	sub	sp, #64	@ 0x40
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	1dbb      	adds	r3, r7, #6
 8005940:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1dba      	adds	r2, r7, #6
 800594c:	2158      	movs	r1, #88	@ 0x58
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2284      	movs	r2, #132	@ 0x84
 8005956:	2100      	movs	r1, #0
 8005958:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2280      	movs	r2, #128	@ 0x80
 800595e:	2122      	movs	r1, #34	@ 0x22
 8005960:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005966:	2b00      	cmp	r3, #0
 8005968:	d028      	beq.n	80059bc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a68 <UART_Start_Receive_DMA+0x134>)
 8005970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	4a3d      	ldr	r2, [pc, #244]	@ (8005a6c <UART_Start_Receive_DMA+0x138>)
 8005978:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597e:	4a3c      	ldr	r2, [pc, #240]	@ (8005a70 <UART_Start_Receive_DMA+0x13c>)
 8005980:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005986:	2200      	movs	r2, #0
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3324      	adds	r3, #36	@ 0x24
 8005994:	0019      	movs	r1, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	001a      	movs	r2, r3
 800599c:	1dbb      	adds	r3, r7, #6
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	f7fc f852 	bl	8001a48 <HAL_DMA_Start_IT>
 80059a4:	1e03      	subs	r3, r0, #0
 80059a6:	d009      	beq.n	80059bc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2284      	movs	r2, #132	@ 0x84
 80059ac:	2110      	movs	r1, #16
 80059ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	2120      	movs	r1, #32
 80059b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e050      	b.n	8005a5e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d019      	beq.n	80059f8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c4:	f3ef 8310 	mrs	r3, PRIMASK
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ce:	2301      	movs	r3, #1
 80059d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	f383 8810 	msr	PRIMASK, r3
}
 80059d8:	46c0      	nop			@ (mov r8, r8)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2180      	movs	r1, #128	@ 0x80
 80059e6:	0049      	lsls	r1, r1, #1
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f8:	f3ef 8310 	mrs	r3, PRIMASK
 80059fc:	613b      	str	r3, [r7, #16]
  return(result);
 80059fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f383 8810 	msr	PRIMASK, r3
}
 8005a0c:	46c0      	nop			@ (mov r8, r8)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f383 8810 	msr	PRIMASK, r3
}
 8005a28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a30:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a34:	2301      	movs	r3, #1
 8005a36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2140      	movs	r1, #64	@ 0x40
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b010      	add	sp, #64	@ 0x40
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	08005c3d 	.word	0x08005c3d
 8005a6c:	08005da5 	.word	0x08005da5
 8005a70:	08005e23 	.word	0x08005e23

08005a74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a82:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	2301      	movs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			@ (mov r8, r8)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	21c0      	movs	r1, #192	@ 0xc0
 8005a9e:	438a      	bics	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b006      	add	sp, #24
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	@ 0x38
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			@ (mov r8, r8)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4926      	ldr	r1, [pc, #152]	@ (8005b80 <UART_EndRxTransfer+0xc4>)
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f383 8810 	msr	PRIMASK, r3
}
 8005af4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	623b      	str	r3, [r7, #32]
  return(result);
 8005afc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b00:	2301      	movs	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	438a      	bics	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d118      	bne.n	8005b62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b30:	f3ef 8310 	mrs	r3, PRIMASK
 8005b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f383 8810 	msr	PRIMASK, r3
}
 8005b44:	46c0      	nop			@ (mov r8, r8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2110      	movs	r1, #16
 8005b52:	438a      	bics	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f383 8810 	msr	PRIMASK, r3
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2280      	movs	r2, #128	@ 0x80
 8005b66:	2120      	movs	r1, #32
 8005b68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b00e      	add	sp, #56	@ 0x38
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	fffffedf 	.word	0xfffffedf

08005b84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08c      	sub	sp, #48	@ 0x30
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d135      	bne.n	8005c0a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	2252      	movs	r2, #82	@ 0x52
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8005baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bac:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f383 8810 	msr	PRIMASK, r3
}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	438a      	bics	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f383 8810 	msr	PRIMASK, r3
}
 8005bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bde:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be2:	2301      	movs	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f383 8810 	msr	PRIMASK, r3
}
 8005bec:	46c0      	nop			@ (mov r8, r8)
 8005bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2140      	movs	r1, #64	@ 0x40
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	e004      	b.n	8005c14 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff f9e1 	bl	8004fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	46c0      	nop			@ (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b00c      	add	sp, #48	@ 0x30
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff f9d9 	bl	8004fe4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b094      	sub	sp, #80	@ 0x50
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2220      	movs	r2, #32
 8005c52:	4013      	ands	r3, r2
 8005c54:	d16f      	bne.n	8005d36 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c58:	225a      	movs	r2, #90	@ 0x5a
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c62:	617b      	str	r3, [r7, #20]
  return(result);
 8005c64:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c68:	2301      	movs	r3, #1
 8005c6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4948      	ldr	r1, [pc, #288]	@ (8005da0 <UART_DMAReceiveCplt+0x164>)
 8005c80:	400a      	ands	r2, r1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c90:	f3ef 8310 	mrs	r3, PRIMASK
 8005c94:	623b      	str	r3, [r7, #32]
  return(result);
 8005c96:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	438a      	bics	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
 8005cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	f383 8810 	msr	PRIMASK, r3
}
 8005cc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ccc:	2301      	movs	r3, #1
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f383 8810 	msr	PRIMASK, r3
}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2140      	movs	r1, #64	@ 0x40
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cee:	f383 8810 	msr	PRIMASK, r3
}
 8005cf2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf6:	2280      	movs	r2, #128	@ 0x80
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d118      	bne.n	8005d36 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d04:	f3ef 8310 	mrs	r3, PRIMASK
 8005d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0e:	2301      	movs	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			@ (mov r8, r8)
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2110      	movs	r1, #16
 8005d26:	438a      	bics	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d38:	2200      	movs	r2, #0
 8005d3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d124      	bne.n	8005d8e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8005d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d46:	225a      	movs	r2, #90	@ 0x5a
 8005d48:	2100      	movs	r1, #0
 8005d4a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	213a      	movs	r1, #58	@ 0x3a
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8005d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d5a:	2258      	movs	r2, #88	@ 0x58
 8005d5c:	5a9b      	ldrh	r3, [r3, r2]
 8005d5e:	187a      	adds	r2, r7, r1
 8005d60:	8812      	ldrh	r2, [r2, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d204      	bcs.n	8005d70 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	187a      	adds	r2, r7, r1
 8005d6a:	215a      	movs	r1, #90	@ 0x5a
 8005d6c:	8812      	ldrh	r2, [r2, #0]
 8005d6e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d72:	2258      	movs	r2, #88	@ 0x58
 8005d74:	5a9a      	ldrh	r2, [r3, r2]
 8005d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d78:	215a      	movs	r1, #90	@ 0x5a
 8005d7a:	5a5b      	ldrh	r3, [r3, r1]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d84:	0011      	movs	r1, r2
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7fa fcac 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d8c:	e003      	b.n	8005d96 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7ff f92f 	bl	8004ff4 <HAL_UART_RxCpltCallback>
}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b014      	add	sp, #80	@ 0x50
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	fffffeff 	.word	0xfffffeff

08005da4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d128      	bne.n	8005e12 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2258      	movs	r2, #88	@ 0x58
 8005dc4:	5a9b      	ldrh	r3, [r3, r2]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	b299      	uxth	r1, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	225a      	movs	r2, #90	@ 0x5a
 8005dce:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	210a      	movs	r1, #10
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2258      	movs	r2, #88	@ 0x58
 8005de0:	5a9b      	ldrh	r3, [r3, r2]
 8005de2:	187a      	adds	r2, r7, r1
 8005de4:	8812      	ldrh	r2, [r2, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d804      	bhi.n	8005df4 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	187a      	adds	r2, r7, r1
 8005dee:	215a      	movs	r1, #90	@ 0x5a
 8005df0:	8812      	ldrh	r2, [r2, #0]
 8005df2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2258      	movs	r2, #88	@ 0x58
 8005df8:	5a9a      	ldrh	r2, [r3, r2]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	215a      	movs	r1, #90	@ 0x5a
 8005dfe:	5a5b      	ldrh	r3, [r3, r1]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0011      	movs	r1, r2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fa fc6a 	bl	80006e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e10:	e003      	b.n	8005e1a <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff f8f5 	bl	8005004 <HAL_UART_RxHalfCpltCallback>
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2280      	movs	r2, #128	@ 0x80
 8005e3a:	589b      	ldr	r3, [r3, r2]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2280      	movs	r2, #128	@ 0x80
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b80      	cmp	r3, #128	@ 0x80
 8005e4a:	d10a      	bne.n	8005e62 <UART_DMAError+0x40>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b21      	cmp	r3, #33	@ 0x21
 8005e50:	d107      	bne.n	8005e62 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2252      	movs	r2, #82	@ 0x52
 8005e56:	2100      	movs	r1, #0
 8005e58:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7ff fe09 	bl	8005a74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2240      	movs	r2, #64	@ 0x40
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	d10a      	bne.n	8005e86 <UART_DMAError+0x64>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b22      	cmp	r3, #34	@ 0x22
 8005e74:	d107      	bne.n	8005e86 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	225a      	movs	r2, #90	@ 0x5a
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7ff fe1b 	bl	8005abc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2284      	movs	r2, #132	@ 0x84
 8005e8a:	589b      	ldr	r3, [r3, r2]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2184      	movs	r1, #132	@ 0x84
 8005e94:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7ff f8bb 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b006      	add	sp, #24
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	225a      	movs	r2, #90	@ 0x5a
 8005eb8:	2100      	movs	r1, #0
 8005eba:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7ff f8a8 	bl	8005014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eda:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f383 8810 	msr	PRIMASK, r3
}
 8005ee8:	46c0      	nop			@ (mov r8, r8)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2140      	movs	r1, #64	@ 0x40
 8005ef6:	438a      	bics	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f383 8810 	msr	PRIMASK, r3
}
 8005f04:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7ff f85d 	bl	8004fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b006      	add	sp, #24
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f32:	b5b0      	push	{r4, r5, r7, lr}
 8005f34:	b08a      	sub	sp, #40	@ 0x28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	1dbb      	adds	r3, r7, #6
 8005f3e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2280      	movs	r2, #128	@ 0x80
 8005f44:	589b      	ldr	r3, [r3, r2]
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d156      	bne.n	8005ff8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f50:	1dbb      	adds	r3, r7, #6
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e04e      	b.n	8005ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	015b      	lsls	r3, r3, #5
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d109      	bne.n	8005f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2201      	movs	r2, #1
 8005f74:	4013      	ands	r3, r2
 8005f76:	d001      	beq.n	8005f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e03e      	b.n	8005ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f88:	2527      	movs	r5, #39	@ 0x27
 8005f8a:	197c      	adds	r4, r7, r5
 8005f8c:	1dbb      	adds	r3, r7, #6
 8005f8e:	881a      	ldrh	r2, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7ff fccd 	bl	8005934 <UART_Start_Receive_DMA>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f9e:	197b      	adds	r3, r7, r5
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d124      	bne.n	8005ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d11c      	bne.n	8005fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fba:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbc:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2110      	movs	r1, #16
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f383 8810 	msr	PRIMASK, r3
}
 8005fe6:	e003      	b.n	8005ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fe8:	2327      	movs	r3, #39	@ 0x27
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005ff0:	2327      	movs	r3, #39	@ 0x27
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	e000      	b.n	8005ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
  }
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b00a      	add	sp, #40	@ 0x28
 8006000:	bdb0      	pop	{r4, r5, r7, pc}

08006002 <ATC_Malloc>:
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 fb11 	bl	8006638 <malloc>
 8006016:	0003      	movs	r3, r0
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b004      	add	sp, #16
 8006022:	bd80      	pop	{r7, pc}

08006024 <ATC_Free>:
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <ATC_Free+0x26>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <ATC_Free+0x26>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	0018      	movs	r0, r3
 8006040:	f000 fb04 	bl	800664c <free>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b002      	add	sp, #8
 8006050:	bd80      	pop	{r7, pc}

08006052 <ATC_RxFlush>:
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	831a      	strh	r2, [r3, #24]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8a9b      	ldrh	r3, [r3, #20]
 8006068:	001a      	movs	r2, r3
 800606a:	2100      	movs	r1, #0
 800606c:	f000 fbaa 	bl	80067c4 <memset>
 8006070:	46c0      	nop			@ (mov r8, r8)
 8006072:	46bd      	mov	sp, r7
 8006074:	b002      	add	sp, #8
 8006076:	bd80      	pop	{r7, pc}

08006078 <ATC_TxRaw>:
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	1dbb      	adds	r3, r7, #6
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	2417      	movs	r4, #23
 8006088:	193b      	adds	r3, r7, r4
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1dba      	adds	r2, r7, #6
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	835a      	strh	r2, [r3, #26]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	1dbb      	adds	r3, r7, #6
 800609c:	881a      	ldrh	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	0019      	movs	r1, r3
 80060a2:	f7fe faf3 	bl	800468c <HAL_UART_Transmit_DMA>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d103      	bne.n	80060b2 <ATC_TxRaw+0x3a>
 80060aa:	193b      	adds	r3, r7, r4
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e000      	b.n	80060b4 <ATC_TxRaw+0x3c>
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b007      	add	sp, #28
 80060c0:	bd90      	pop	{r4, r7, pc}

080060c2 <ATC_TxBusy>:
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fe ffa8 	bl	8005024 <HAL_UART_GetState>
 80060d4:	0003      	movs	r3, r0
 80060d6:	2b21      	cmp	r3, #33	@ 0x21
 80060d8:	d007      	beq.n	80060ea <ATC_TxBusy+0x28>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fe ffa0 	bl	8005024 <HAL_UART_GetState>
 80060e4:	0003      	movs	r3, r0
 80060e6:	2b23      	cmp	r3, #35	@ 0x23
 80060e8:	d101      	bne.n	80060ee <ATC_TxBusy+0x2c>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <ATC_TxBusy+0x2e>
 80060ee:	2300      	movs	r3, #0
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b002      	add	sp, #8
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <ATC_TxWait>:
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	230f      	movs	r3, #15
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	f7fb faf5 	bl	80016f8 <HAL_GetTick>
 800610e:	0003      	movs	r3, r0
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	2001      	movs	r0, #1
 8006114:	f000 fa84 	bl	8006620 <ATC_Delay>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	0018      	movs	r0, r3
 800611e:	f7fe ff81 	bl	8005024 <HAL_UART_GetState>
 8006122:	0003      	movs	r3, r0
 8006124:	2b22      	cmp	r3, #34	@ 0x22
 8006126:	d007      	beq.n	8006138 <ATC_TxWait+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0018      	movs	r0, r3
 800612e:	f7fe ff79 	bl	8005024 <HAL_UART_GetState>
 8006132:	0003      	movs	r3, r0
 8006134:	2b20      	cmp	r3, #32
 8006136:	d104      	bne.n	8006142 <ATC_TxWait+0x4a>
 8006138:	230f      	movs	r3, #15
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e01c      	b.n	800617c <ATC_TxWait+0x84>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	0018      	movs	r0, r3
 8006148:	f7fe ff6c 	bl	8005024 <HAL_UART_GetState>
 800614c:	0003      	movs	r3, r0
 800614e:	2be0      	cmp	r3, #224	@ 0xe0
 8006150:	d014      	beq.n	800617c <ATC_TxWait+0x84>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	0018      	movs	r0, r3
 8006158:	f7fe ff64 	bl	8005024 <HAL_UART_GetState>
 800615c:	0003      	movs	r3, r0
 800615e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006160:	d00c      	beq.n	800617c <ATC_TxWait+0x84>
 8006162:	f7fb fac9 	bl	80016f8 <HAL_GetTick>
 8006166:	0002      	movs	r2, r0
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d8cf      	bhi.n	8006112 <ATC_TxWait+0x1a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	0018      	movs	r0, r3
 8006178:	f7fe fb18 	bl	80047ac <HAL_UART_AbortTransmit>
 800617c:	230f      	movs	r3, #15
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	0018      	movs	r0, r3
 8006184:	46bd      	mov	sp, r7
 8006186:	b004      	add	sp, #16
 8006188:	bd80      	pop	{r7, pc}

0800618a <ATC_CheckEvents>:
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8b1b      	ldrh	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d027      	beq.n	80061ea <ATC_CheckEvents+0x60>
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e01b      	b.n	80061d8 <ATC_CheckEvents+0x4e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	18d3      	adds	r3, r2, r3
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	0019      	movs	r1, r3
 80061b2:	f000 fb1c 	bl	80067ee <strstr>
 80061b6:	0003      	movs	r3, r0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <ATC_CheckEvents+0x48>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0010      	movs	r0, r2
 80061d0:	4798      	blx	r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3de      	bcc.n	80061a0 <ATC_CheckEvents+0x16>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	0018      	movs	r0, r3
 80061e6:	f7ff ff34 	bl	8006052 <ATC_RxFlush>
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <ATC_CheckResponse>:
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
 80061fc:	230f      	movs	r3, #15
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8b1b      	ldrh	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d031      	beq.n	8006270 <ATC_CheckResponse+0x7e>
 800620c:	230c      	movs	r3, #12
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2200      	movs	r2, #0
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	e025      	b.n	8006262 <ATC_CheckResponse+0x70>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800621a:	230c      	movs	r3, #12
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	881a      	ldrh	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	320a      	adds	r2, #10
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	58d3      	ldr	r3, [r2, r3]
 8006228:	0019      	movs	r1, r3
 800622a:	f000 fae0 	bl	80067ee <strstr>
 800622e:	0003      	movs	r3, r0
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <ATC_CheckResponse+0x64>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <ATC_CheckResponse+0x52>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	230c      	movs	r3, #12
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	230f      	movs	r3, #15
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	3201      	adds	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e00c      	b.n	8006270 <ATC_CheckResponse+0x7e>
 8006256:	210c      	movs	r1, #12
 8006258:	187b      	adds	r3, r7, r1
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	187b      	adds	r3, r7, r1
 800625e:	3201      	adds	r2, #1
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8adb      	ldrh	r3, [r3, #22]
 8006266:	220c      	movs	r2, #12
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d3d2      	bcc.n	8006216 <ATC_CheckResponse+0x24>
 8006270:	230f      	movs	r3, #15
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	0018      	movs	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	b004      	add	sp, #16
 800627c:	bd80      	pop	{r7, pc}

0800627e <ATC_CheckErrors>:
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	0018      	movs	r0, r3
 800628c:	f7fe fedc 	bl	8005048 <HAL_UART_GetError>
 8006290:	1e03      	subs	r3, r0, #0
 8006292:	d01f      	beq.n	80062d4 <ATC_CheckErrors+0x56>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	4252      	negs	r2, r2
 800629e:	621a      	str	r2, [r3, #32]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fe fae7 	bl	8004878 <HAL_UART_AbortReceive>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69d9      	ldr	r1, [r3, #28]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8a9b      	ldrh	r3, [r3, #20]
 80062b6:	001a      	movs	r2, r3
 80062b8:	f7ff fe3b 	bl	8005f32 <HAL_UARTEx_ReceiveToIdle_DMA>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2104      	movs	r1, #4
 80062d0:	438a      	bics	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	0018      	movs	r0, r3
 80062da:	f7fe fea3 	bl	8005024 <HAL_UART_GetState>
 80062de:	0003      	movs	r3, r0
 80062e0:	2b22      	cmp	r3, #34	@ 0x22
 80062e2:	d027      	beq.n	8006334 <ATC_CheckErrors+0xb6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7fe fe9b 	bl	8005024 <HAL_UART_GetState>
 80062ee:	0003      	movs	r3, r0
 80062f0:	2b23      	cmp	r3, #35	@ 0x23
 80062f2:	d01f      	beq.n	8006334 <ATC_CheckErrors+0xb6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4252      	negs	r2, r2
 80062fe:	621a      	str	r2, [r3, #32]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	0018      	movs	r0, r3
 8006306:	f7fe fab7 	bl	8004878 <HAL_UART_AbortReceive>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69d9      	ldr	r1, [r3, #28]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8a9b      	ldrh	r3, [r3, #20]
 8006316:	001a      	movs	r2, r3
 8006318:	f7ff fe0b 	bl	8005f32 <HAL_UARTEx_ReceiveToIdle_DMA>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2104      	movs	r1, #4
 8006330:	438a      	bics	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	46c0      	nop			@ (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}

0800633c <ATC_Loop>:
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0018      	movs	r0, r3
 8006348:	f7ff ff99 	bl	800627e <ATC_CheckErrors>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0018      	movs	r0, r3
 8006350:	f7ff ff1b 	bl	800618a <ATC_CheckEvents>
 8006354:	46c0      	nop			@ (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}

0800635c <ATC_SendReceive>:
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff fea6 	bl	80060c2 <ATC_TxBusy>
 8006376:	1e03      	subs	r3, r0, #0
 8006378:	d002      	beq.n	8006380 <ATC_SendReceive+0x24>
 800637a:	2304      	movs	r3, #4
 800637c:	425b      	negs	r3, r3
 800637e:	e0e3      	b.n	8006548 <ATC_SendReceive+0x1ec>
 8006380:	2344      	movs	r3, #68	@ 0x44
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b05      	cmp	r3, #5
 8006388:	d902      	bls.n	8006390 <ATC_SendReceive+0x34>
 800638a:	2305      	movs	r3, #5
 800638c:	425b      	negs	r3, r3
 800638e:	e0db      	b.n	8006548 <ATC_SendReceive+0x1ec>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	0018      	movs	r0, r3
 8006394:	f7ff ff73 	bl	800627e <ATC_CheckErrors>
 8006398:	2348      	movs	r3, #72	@ 0x48
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	2300      	movs	r3, #0
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a2:	e051      	b.n	8006448 <ATC_SendReceive+0xec>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	617a      	str	r2, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7f9 fea9 	bl	8000108 <strlen>
 80063b6:	0003      	movs	r3, r0
 80063b8:	3301      	adds	r3, #1
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7ff fe21 	bl	8006002 <ATC_Malloc>
 80063c0:	0001      	movs	r1, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c6:	320a      	adds	r2, #10
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	50d1      	str	r1, [r2, r3]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063d0:	320a      	adds	r2, #10
 80063d2:	0092      	lsls	r2, r2, #2
 80063d4:	58d3      	ldr	r3, [r2, r3]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11c      	bne.n	8006414 <ATC_SendReceive+0xb8>
 80063da:	2327      	movs	r3, #39	@ 0x27
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e00e      	b.n	8006402 <ATC_SendReceive+0xa6>
 80063e4:	2427      	movs	r4, #39	@ 0x27
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	330a      	adds	r3, #10
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	18d3      	adds	r3, r2, r3
 80063f2:	0018      	movs	r0, r3
 80063f4:	f7ff fe16 	bl	8006024 <ATC_Free>
 80063f8:	193b      	adds	r3, r7, r4
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	193b      	adds	r3, r7, r4
 80063fe:	3201      	adds	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	2327      	movs	r3, #39	@ 0x27
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800640a:	429a      	cmp	r2, r3
 800640c:	dcea      	bgt.n	80063e4 <ATC_SendReceive+0x88>
 800640e:	2303      	movs	r3, #3
 8006410:	425b      	negs	r3, r3
 8006412:	e099      	b.n	8006548 <ATC_SendReceive+0x1ec>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006418:	320a      	adds	r2, #10
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	58d3      	ldr	r3, [r2, r3]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	0011      	movs	r1, r2
 8006422:	0018      	movs	r0, r3
 8006424:	f000 fa38 	bl	8006898 <strcpy>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800642c:	320a      	adds	r2, #10
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	58d4      	ldr	r4, [r2, r3]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	0018      	movs	r0, r3
 8006436:	f7f9 fe67 	bl	8000108 <strlen>
 800643a:	0003      	movs	r3, r0
 800643c:	18e3      	adds	r3, r4, r3
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	3301      	adds	r3, #1
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006448:	2344      	movs	r3, #68	@ 0x44
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006450:	429a      	cmp	r2, r3
 8006452:	dba7      	blt.n	80063a4 <ATC_SendReceive+0x48>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fdfb 	bl	8006052 <ATC_RxFlush>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	0018      	movs	r0, r3
 8006460:	f7f9 fe52 	bl	8000108 <strlen>
 8006464:	0003      	movs	r3, r0
 8006466:	b29a      	uxth	r2, r3
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	0018      	movs	r0, r3
 800646e:	f7ff fe03 	bl	8006078 <ATC_TxRaw>
 8006472:	0003      	movs	r3, r0
 8006474:	001a      	movs	r2, r3
 8006476:	2301      	movs	r3, #1
 8006478:	4053      	eors	r3, r2
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <ATC_SendReceive+0x12c>
 8006480:	2301      	movs	r3, #1
 8006482:	425b      	negs	r3, r3
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006486:	e010      	b.n	80064aa <ATC_SendReceive+0x14e>
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	0011      	movs	r1, r2
 800648e:	0018      	movs	r0, r3
 8006490:	f7ff fe32 	bl	80060f8 <ATC_TxWait>
 8006494:	0003      	movs	r3, r0
 8006496:	001a      	movs	r2, r3
 8006498:	2301      	movs	r3, #1
 800649a:	4053      	eors	r3, r2
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <ATC_SendReceive+0x14e>
 80064a2:	2302      	movs	r3, #2
 80064a4:	425b      	negs	r3, r3
 80064a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a8:	46c0      	nop			@ (mov r8, r8)
 80064aa:	2444      	movs	r4, #68	@ 0x44
 80064ac:	193b      	adds	r3, r7, r4
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d029      	beq.n	8006508 <ATC_SendReceive+0x1ac>
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d126      	bne.n	8006508 <ATC_SendReceive+0x1ac>
 80064ba:	f7fb f91d 	bl	80016f8 <HAL_GetTick>
 80064be:	0003      	movs	r3, r0
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	193b      	adds	r3, r7, r4
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	82da      	strh	r2, [r3, #22]
 80064cc:	e014      	b.n	80064f8 <ATC_SendReceive+0x19c>
 80064ce:	2001      	movs	r0, #1
 80064d0:	f000 f8a6 	bl	8006620 <ATC_Delay>
 80064d4:	251f      	movs	r5, #31
 80064d6:	197c      	adds	r4, r7, r5
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	0011      	movs	r1, r2
 80064de:	0018      	movs	r0, r3
 80064e0:	f7ff fe87 	bl	80061f2 <ATC_CheckResponse>
 80064e4:	0003      	movs	r3, r0
 80064e6:	7023      	strb	r3, [r4, #0]
 80064e8:	197b      	adds	r3, r7, r5
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <ATC_SendReceive+0x19c>
 80064f0:	197b      	adds	r3, r7, r5
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f6:	e007      	b.n	8006508 <ATC_SendReceive+0x1ac>
 80064f8:	f7fb f8fe 	bl	80016f8 <HAL_GetTick>
 80064fc:	0002      	movs	r2, r0
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006504:	429a      	cmp	r2, r3
 8006506:	d8e2      	bhi.n	80064ce <ATC_SendReceive+0x172>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	82da      	strh	r2, [r3, #22]
 800650e:	2326      	movs	r3, #38	@ 0x26
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e00e      	b.n	8006536 <ATC_SendReceive+0x1da>
 8006518:	2426      	movs	r4, #38	@ 0x26
 800651a:	193b      	adds	r3, r7, r4
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	330a      	adds	r3, #10
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	18d3      	adds	r3, r2, r3
 8006526:	0018      	movs	r0, r3
 8006528:	f7ff fd7c 	bl	8006024 <ATC_Free>
 800652c:	193b      	adds	r3, r7, r4
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	193b      	adds	r3, r7, r4
 8006532:	3201      	adds	r2, #1
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	2326      	movs	r3, #38	@ 0x26
 8006538:	18fa      	adds	r2, r7, r3
 800653a:	2344      	movs	r3, #68	@ 0x44
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d3e8      	bcc.n	8006518 <ATC_SendReceive+0x1bc>
 8006546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	b00c      	add	sp, #48	@ 0x30
 800654e:	bdb0      	pop	{r4, r5, r7, pc}

08006550 <ATC_IdleLineCallback>:
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	000a      	movs	r2, r1
 800655a:	1cbb      	adds	r3, r7, #2
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	1cbb      	adds	r3, r7, #2
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8a9b      	ldrh	r3, [r3, #20]
 8006566:	0019      	movs	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8b1b      	ldrh	r3, [r3, #24]
 800656c:	1acb      	subs	r3, r1, r3
 800656e:	429a      	cmp	r2, r3
 8006570:	dd06      	ble.n	8006580 <ATC_IdleLineCallback+0x30>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8a99      	ldrh	r1, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8b1a      	ldrh	r2, [r3, #24]
 800657a:	1cbb      	adds	r3, r7, #2
 800657c:	1a8a      	subs	r2, r1, r2
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	8b12      	ldrh	r2, [r2, #24]
 8006588:	1898      	adds	r0, r3, r2
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69d9      	ldr	r1, [r3, #28]
 800658e:	1cbb      	adds	r3, r7, #2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	001a      	movs	r2, r3
 8006594:	f000 f988 	bl	80068a8 <memcpy>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8b1a      	ldrh	r2, [r3, #24]
 800659c:	1cbb      	adds	r3, r7, #2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	831a      	strh	r2, [r3, #24]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8a9b      	ldrh	r3, [r3, #20]
 80065b4:	001a      	movs	r2, r3
 80065b6:	f7ff fcbc 	bl	8005f32 <HAL_UARTEx_ReceiveToIdle_DMA>
 80065ba:	1e03      	subs	r3, r0, #0
 80065bc:	d10c      	bne.n	80065d8 <ATC_IdleLineCallback+0x88>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2104      	movs	r1, #4
 80065d2:	438a      	bics	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e01f      	b.n	8006618 <ATC_IdleLineCallback+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2201      	movs	r2, #1
 80065e0:	4252      	negs	r2, r2
 80065e2:	621a      	str	r2, [r3, #32]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7fe f945 	bl	8004878 <HAL_UART_AbortReceive>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69d9      	ldr	r1, [r3, #28]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	8a9b      	ldrh	r3, [r3, #20]
 80065fa:	001a      	movs	r2, r3
 80065fc:	f7ff fc99 	bl	8005f32 <HAL_UARTEx_ReceiveToIdle_DMA>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2104      	movs	r1, #4
 8006614:	438a      	bics	r2, r1
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	46c0      	nop			@ (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b002      	add	sp, #8
 800661e:	bd80      	pop	{r7, pc}

08006620 <ATC_Delay>:
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	0018      	movs	r0, r3
 800662c:	f7fb f86e 	bl	800170c <HAL_Delay>
 8006630:	46c0      	nop			@ (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}

08006638 <malloc>:
 8006638:	b510      	push	{r4, lr}
 800663a:	4b03      	ldr	r3, [pc, #12]	@ (8006648 <malloc+0x10>)
 800663c:	0001      	movs	r1, r0
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	f000 f830 	bl	80066a4 <_malloc_r>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	20000010 	.word	0x20000010

0800664c <free>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4b03      	ldr	r3, [pc, #12]	@ (800665c <free+0x10>)
 8006650:	0001      	movs	r1, r0
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f000 f932 	bl	80068bc <_free_r>
 8006658:	bd10      	pop	{r4, pc}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	20000010 	.word	0x20000010

08006660 <sbrk_aligned>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4e0f      	ldr	r6, [pc, #60]	@ (80066a0 <sbrk_aligned+0x40>)
 8006664:	000d      	movs	r5, r1
 8006666:	6831      	ldr	r1, [r6, #0]
 8006668:	0004      	movs	r4, r0
 800666a:	2900      	cmp	r1, #0
 800666c:	d102      	bne.n	8006674 <sbrk_aligned+0x14>
 800666e:	f000 f8d5 	bl	800681c <_sbrk_r>
 8006672:	6030      	str	r0, [r6, #0]
 8006674:	0029      	movs	r1, r5
 8006676:	0020      	movs	r0, r4
 8006678:	f000 f8d0 	bl	800681c <_sbrk_r>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d103      	bne.n	8006688 <sbrk_aligned+0x28>
 8006680:	2501      	movs	r5, #1
 8006682:	426d      	negs	r5, r5
 8006684:	0028      	movs	r0, r5
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	2303      	movs	r3, #3
 800668a:	1cc5      	adds	r5, r0, #3
 800668c:	439d      	bics	r5, r3
 800668e:	42a8      	cmp	r0, r5
 8006690:	d0f8      	beq.n	8006684 <sbrk_aligned+0x24>
 8006692:	1a29      	subs	r1, r5, r0
 8006694:	0020      	movs	r0, r4
 8006696:	f000 f8c1 	bl	800681c <_sbrk_r>
 800669a:	3001      	adds	r0, #1
 800669c:	d1f2      	bne.n	8006684 <sbrk_aligned+0x24>
 800669e:	e7ef      	b.n	8006680 <sbrk_aligned+0x20>
 80066a0:	20000274 	.word	0x20000274

080066a4 <_malloc_r>:
 80066a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a6:	2203      	movs	r2, #3
 80066a8:	1ccb      	adds	r3, r1, #3
 80066aa:	4393      	bics	r3, r2
 80066ac:	3308      	adds	r3, #8
 80066ae:	0005      	movs	r5, r0
 80066b0:	001f      	movs	r7, r3
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d234      	bcs.n	8006720 <_malloc_r+0x7c>
 80066b6:	270c      	movs	r7, #12
 80066b8:	42b9      	cmp	r1, r7
 80066ba:	d833      	bhi.n	8006724 <_malloc_r+0x80>
 80066bc:	0028      	movs	r0, r5
 80066be:	f000 f871 	bl	80067a4 <__malloc_lock>
 80066c2:	4e37      	ldr	r6, [pc, #220]	@ (80067a0 <_malloc_r+0xfc>)
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	001c      	movs	r4, r3
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	d12f      	bne.n	800672c <_malloc_r+0x88>
 80066cc:	0039      	movs	r1, r7
 80066ce:	0028      	movs	r0, r5
 80066d0:	f7ff ffc6 	bl	8006660 <sbrk_aligned>
 80066d4:	0004      	movs	r4, r0
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d15f      	bne.n	800679a <_malloc_r+0xf6>
 80066da:	6834      	ldr	r4, [r6, #0]
 80066dc:	9400      	str	r4, [sp, #0]
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d14a      	bne.n	800677a <_malloc_r+0xd6>
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d052      	beq.n	800678e <_malloc_r+0xea>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	0028      	movs	r0, r5
 80066ec:	18e3      	adds	r3, r4, r3
 80066ee:	9900      	ldr	r1, [sp, #0]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	f000 f893 	bl	800681c <_sbrk_r>
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	4283      	cmp	r3, r0
 80066fa:	d148      	bne.n	800678e <_malloc_r+0xea>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	0028      	movs	r0, r5
 8006700:	1aff      	subs	r7, r7, r3
 8006702:	0039      	movs	r1, r7
 8006704:	f7ff ffac 	bl	8006660 <sbrk_aligned>
 8006708:	3001      	adds	r0, #1
 800670a:	d040      	beq.n	800678e <_malloc_r+0xea>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	19db      	adds	r3, r3, r7
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	6833      	ldr	r3, [r6, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	2a00      	cmp	r2, #0
 8006718:	d133      	bne.n	8006782 <_malloc_r+0xde>
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	e019      	b.n	8006754 <_malloc_r+0xb0>
 8006720:	2b00      	cmp	r3, #0
 8006722:	dac9      	bge.n	80066b8 <_malloc_r+0x14>
 8006724:	230c      	movs	r3, #12
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	2000      	movs	r0, #0
 800672a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800672c:	6821      	ldr	r1, [r4, #0]
 800672e:	1bc9      	subs	r1, r1, r7
 8006730:	d420      	bmi.n	8006774 <_malloc_r+0xd0>
 8006732:	290b      	cmp	r1, #11
 8006734:	d90a      	bls.n	800674c <_malloc_r+0xa8>
 8006736:	19e2      	adds	r2, r4, r7
 8006738:	6027      	str	r7, [r4, #0]
 800673a:	42a3      	cmp	r3, r4
 800673c:	d104      	bne.n	8006748 <_malloc_r+0xa4>
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	6863      	ldr	r3, [r4, #4]
 8006742:	6011      	str	r1, [r2, #0]
 8006744:	6053      	str	r3, [r2, #4]
 8006746:	e005      	b.n	8006754 <_malloc_r+0xb0>
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e7f9      	b.n	8006740 <_malloc_r+0x9c>
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	42a3      	cmp	r3, r4
 8006750:	d10e      	bne.n	8006770 <_malloc_r+0xcc>
 8006752:	6032      	str	r2, [r6, #0]
 8006754:	0028      	movs	r0, r5
 8006756:	f000 f82d 	bl	80067b4 <__malloc_unlock>
 800675a:	0020      	movs	r0, r4
 800675c:	2207      	movs	r2, #7
 800675e:	300b      	adds	r0, #11
 8006760:	1d23      	adds	r3, r4, #4
 8006762:	4390      	bics	r0, r2
 8006764:	1ac2      	subs	r2, r0, r3
 8006766:	4298      	cmp	r0, r3
 8006768:	d0df      	beq.n	800672a <_malloc_r+0x86>
 800676a:	1a1b      	subs	r3, r3, r0
 800676c:	50a3      	str	r3, [r4, r2]
 800676e:	e7dc      	b.n	800672a <_malloc_r+0x86>
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	e7ef      	b.n	8006754 <_malloc_r+0xb0>
 8006774:	0023      	movs	r3, r4
 8006776:	6864      	ldr	r4, [r4, #4]
 8006778:	e7a6      	b.n	80066c8 <_malloc_r+0x24>
 800677a:	9c00      	ldr	r4, [sp, #0]
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	e7ad      	b.n	80066de <_malloc_r+0x3a>
 8006782:	001a      	movs	r2, r3
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	42a3      	cmp	r3, r4
 8006788:	d1fb      	bne.n	8006782 <_malloc_r+0xde>
 800678a:	2300      	movs	r3, #0
 800678c:	e7da      	b.n	8006744 <_malloc_r+0xa0>
 800678e:	230c      	movs	r3, #12
 8006790:	0028      	movs	r0, r5
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	f000 f80e 	bl	80067b4 <__malloc_unlock>
 8006798:	e7c6      	b.n	8006728 <_malloc_r+0x84>
 800679a:	6007      	str	r7, [r0, #0]
 800679c:	e7da      	b.n	8006754 <_malloc_r+0xb0>
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	20000278 	.word	0x20000278

080067a4 <__malloc_lock>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4802      	ldr	r0, [pc, #8]	@ (80067b0 <__malloc_lock+0xc>)
 80067a8:	f000 f874 	bl	8006894 <__retarget_lock_acquire_recursive>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	200003b8 	.word	0x200003b8

080067b4 <__malloc_unlock>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4802      	ldr	r0, [pc, #8]	@ (80067c0 <__malloc_unlock+0xc>)
 80067b8:	f000 f86d 	bl	8006896 <__retarget_lock_release_recursive>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	200003b8 	.word	0x200003b8

080067c4 <memset>:
 80067c4:	0003      	movs	r3, r0
 80067c6:	1882      	adds	r2, r0, r2
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d100      	bne.n	80067ce <memset+0xa>
 80067cc:	4770      	bx	lr
 80067ce:	7019      	strb	r1, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	e7f9      	b.n	80067c8 <memset+0x4>

080067d4 <strcat>:
 80067d4:	0002      	movs	r2, r0
 80067d6:	b510      	push	{r4, lr}
 80067d8:	7813      	ldrb	r3, [r2, #0]
 80067da:	0014      	movs	r4, r2
 80067dc:	3201      	adds	r2, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1fa      	bne.n	80067d8 <strcat+0x4>
 80067e2:	5cca      	ldrb	r2, [r1, r3]
 80067e4:	54e2      	strb	r2, [r4, r3]
 80067e6:	3301      	adds	r3, #1
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d1fa      	bne.n	80067e2 <strcat+0xe>
 80067ec:	bd10      	pop	{r4, pc}

080067ee <strstr>:
 80067ee:	780a      	ldrb	r2, [r1, #0]
 80067f0:	b530      	push	{r4, r5, lr}
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	d10c      	bne.n	8006810 <strstr+0x22>
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d108      	bne.n	800680e <strstr+0x20>
 80067fc:	2301      	movs	r3, #1
 80067fe:	5ccc      	ldrb	r4, [r1, r3]
 8006800:	2c00      	cmp	r4, #0
 8006802:	d0f8      	beq.n	80067f6 <strstr+0x8>
 8006804:	5cc5      	ldrb	r5, [r0, r3]
 8006806:	42a5      	cmp	r5, r4
 8006808:	d101      	bne.n	800680e <strstr+0x20>
 800680a:	3301      	adds	r3, #1
 800680c:	e7f7      	b.n	80067fe <strstr+0x10>
 800680e:	3001      	adds	r0, #1
 8006810:	7803      	ldrb	r3, [r0, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <strstr+0xa>
 8006816:	0018      	movs	r0, r3
 8006818:	e7ed      	b.n	80067f6 <strstr+0x8>
	...

0800681c <_sbrk_r>:
 800681c:	2300      	movs	r3, #0
 800681e:	b570      	push	{r4, r5, r6, lr}
 8006820:	4d06      	ldr	r5, [pc, #24]	@ (800683c <_sbrk_r+0x20>)
 8006822:	0004      	movs	r4, r0
 8006824:	0008      	movs	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa f9f6 	bl	8000c18 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d103      	bne.n	8006838 <_sbrk_r+0x1c>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d000      	beq.n	8006838 <_sbrk_r+0x1c>
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	bd70      	pop	{r4, r5, r6, pc}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	200003b4 	.word	0x200003b4

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	@ (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	20000010 	.word	0x20000010

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2600      	movs	r6, #0
 8006850:	4c0c      	ldr	r4, [pc, #48]	@ (8006884 <__libc_init_array+0x38>)
 8006852:	4d0d      	ldr	r5, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	2600      	movs	r6, #0
 800685e:	f000 f877 	bl	8006950 <_init>
 8006862:	4c0a      	ldr	r4, [pc, #40]	@ (800688c <__libc_init_array+0x40>)
 8006864:	4d0a      	ldr	r5, [pc, #40]	@ (8006890 <__libc_init_array+0x44>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	00b3      	lsls	r3, r6, #2
 8006872:	58eb      	ldr	r3, [r5, r3]
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	00b3      	lsls	r3, r6, #2
 800687c:	58eb      	ldr	r3, [r5, r3]
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	08006c60 	.word	0x08006c60
 8006888:	08006c60 	.word	0x08006c60
 800688c:	08006c64 	.word	0x08006c64
 8006890:	08006c60 	.word	0x08006c60

08006894 <__retarget_lock_acquire_recursive>:
 8006894:	4770      	bx	lr

08006896 <__retarget_lock_release_recursive>:
 8006896:	4770      	bx	lr

08006898 <strcpy>:
 8006898:	0003      	movs	r3, r0
 800689a:	780a      	ldrb	r2, [r1, #0]
 800689c:	3101      	adds	r1, #1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	d1f9      	bne.n	800689a <strcpy+0x2>
 80068a6:	4770      	bx	lr

080068a8 <memcpy>:
 80068a8:	2300      	movs	r3, #0
 80068aa:	b510      	push	{r4, lr}
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d100      	bne.n	80068b2 <memcpy+0xa>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	5ccc      	ldrb	r4, [r1, r3]
 80068b4:	54c4      	strb	r4, [r0, r3]
 80068b6:	3301      	adds	r3, #1
 80068b8:	e7f8      	b.n	80068ac <memcpy+0x4>
	...

080068bc <_free_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	0005      	movs	r5, r0
 80068c0:	1e0c      	subs	r4, r1, #0
 80068c2:	d010      	beq.n	80068e6 <_free_r+0x2a>
 80068c4:	3c04      	subs	r4, #4
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da00      	bge.n	80068ce <_free_r+0x12>
 80068cc:	18e4      	adds	r4, r4, r3
 80068ce:	0028      	movs	r0, r5
 80068d0:	f7ff ff68 	bl	80067a4 <__malloc_lock>
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <_free_r+0x90>)
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <_free_r+0x2c>
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	6014      	str	r4, [r2, #0]
 80068e0:	0028      	movs	r0, r5
 80068e2:	f7ff ff67 	bl	80067b4 <__malloc_unlock>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d908      	bls.n	80068fe <_free_r+0x42>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	1821      	adds	r1, r4, r0
 80068f0:	428b      	cmp	r3, r1
 80068f2:	d1f3      	bne.n	80068dc <_free_r+0x20>
 80068f4:	6819      	ldr	r1, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	1809      	adds	r1, r1, r0
 80068fa:	6021      	str	r1, [r4, #0]
 80068fc:	e7ee      	b.n	80068dc <_free_r+0x20>
 80068fe:	001a      	movs	r2, r3
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <_free_r+0x4e>
 8006906:	42a3      	cmp	r3, r4
 8006908:	d9f9      	bls.n	80068fe <_free_r+0x42>
 800690a:	6811      	ldr	r1, [r2, #0]
 800690c:	1850      	adds	r0, r2, r1
 800690e:	42a0      	cmp	r0, r4
 8006910:	d10b      	bne.n	800692a <_free_r+0x6e>
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	1809      	adds	r1, r1, r0
 8006916:	1850      	adds	r0, r2, r1
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	4283      	cmp	r3, r0
 800691c:	d1e0      	bne.n	80068e0 <_free_r+0x24>
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	1841      	adds	r1, r0, r1
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	6053      	str	r3, [r2, #4]
 8006928:	e7da      	b.n	80068e0 <_free_r+0x24>
 800692a:	42a0      	cmp	r0, r4
 800692c:	d902      	bls.n	8006934 <_free_r+0x78>
 800692e:	230c      	movs	r3, #12
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	e7d5      	b.n	80068e0 <_free_r+0x24>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	1821      	adds	r1, r4, r0
 8006938:	428b      	cmp	r3, r1
 800693a:	d103      	bne.n	8006944 <_free_r+0x88>
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1809      	adds	r1, r1, r0
 8006942:	6021      	str	r1, [r4, #0]
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6054      	str	r4, [r2, #4]
 8006948:	e7ca      	b.n	80068e0 <_free_r+0x24>
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	20000278 	.word	0x20000278

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr
