
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08007ad0  08007ad0  00008ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008288  08008288  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008288  08008288  00009288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800828c  0800828c  0000928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008290  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000006c  080082fc  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200003cc  080082fc  0000a3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c98  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf3  00000000  00000000  0001ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00022920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1d  00000000  00000000  00023b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0f  00000000  00000000  0002499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189b5  00000000  00000000  0003d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fd2  00000000  00000000  00055d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ded33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  000ded78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e3584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ab8 	.word	0x08007ab8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08007ab8 	.word	0x08007ab8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fb68 	bl	8001b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fb7a 	bl	8001b92 <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f006 fdd9 	bl	8007074 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b27      	ldr	r3, [pc, #156]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <MX_GPIO_Init+0xb8>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2202      	movs	r2, #2
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_GPIO_Init+0xbc>)
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	0018      	movs	r0, r3
 8000512:	f001 ff25 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2220      	movs	r2, #32
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	193a      	adds	r2, r7, r4
 800052a:	23a0      	movs	r3, #160	@ 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fd97 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2220      	movs	r2, #32
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000550:	187b      	adds	r3, r7, r1
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <MX_GPIO_Init+0xbc>)
 8000554:	0019      	movs	r1, r3
 8000556:	0010      	movs	r0, r2
 8000558:	f001 fd84 	bl	8002064 <HAL_GPIO_Init>

}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b009      	add	sp, #36	@ 0x24
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	50000400 	.word	0x50000400

0800056c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000570:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <MX_I2C1_Init+0x7c>)
 8000574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000578:	22c1      	movs	r2, #193	@ 0xc1
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000584:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000586:	2201      	movs	r2, #1
 8000588:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <MX_I2C1_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_I2C1_Init+0x78>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fef6 	bl	800239c <HAL_I2C_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005b4:	f000 fa66 	bl	8000a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 fd95 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005c6:	f000 fa5d 	bl	8000a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 fdd8 	bl	8003184 <HAL_I2CEx_ConfigDigitalFilter>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005d8:	f000 fa54 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	20000088 	.word	0x20000088
 80005e8:	40005400 	.word	0x40005400

080005ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b089      	sub	sp, #36	@ 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	240c      	movs	r4, #12
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f006 fd38 	bl	8007074 <memset>
  if(i2cHandle->Instance==I2C1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <HAL_I2C_MspInit+0x7c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d128      	bne.n	8000660 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000614:	2102      	movs	r1, #2
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <HAL_I2C_MspInit+0x80>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	2202      	movs	r2, #2
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	22c0      	movs	r2, #192	@ 0xc0
 800062c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2212      	movs	r2, #18
 8000632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2203      	movs	r2, #3
 800063e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	187b      	adds	r3, r7, r1
 8000648:	4a09      	ldr	r2, [pc, #36]	@ (8000670 <HAL_I2C_MspInit+0x84>)
 800064a:	0019      	movs	r1, r3
 800064c:	0010      	movs	r0, r2
 800064e:	f001 fd09 	bl	8002064 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	0389      	lsls	r1, r1, #14
 800065c:	430a      	orrs	r2, r1
 800065e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b009      	add	sp, #36	@ 0x24
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40005400 	.word	0x40005400
 800066c:	40021000 	.word	0x40021000
 8000670:	50000400 	.word	0x50000400

08000674 <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = COLLECT_DATA;

void cb_WAKE(const char* str)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <cb_WAKE+0x18>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	20000118 	.word	0x20000118

08000690 <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <cb_JOIN_SUCCESS+0x18>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	20000000 	.word	0x20000000

080006ac <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <cb_NOT_JOINED+0x18>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000000 	.word	0x20000000

080006c8 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  __NOP();
 80006d0:	46c0      	nop			@ (mov r8, r8)
    // You can parse downlink data here if needed
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	000a      	movs	r2, r1
 80006e6:	1cbb      	adds	r3, r7, #2
 80006e8:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_UARTEx_RxEventCallback+0x30>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d106      	bne.n	8000702 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 80006f4:	1cbb      	adds	r3, r7, #2
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x34>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f006 f95f 	bl	80069c0 <ATC_IdleLineCallback>
	}
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	40004800 	.word	0x40004800
 8000710:	200000dc 	.word	0x200000dc

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b098      	sub	sp, #96	@ 0x60
 8000718:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f001 f8c1 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f93b 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f7ff fec3 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000726:	f7ff fea3 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800072a:	f7ff ff1f 	bl	800056c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800072e:	f000 fb3b 	bl	8000da8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000732:	f000 f9ad 	bl	8000a90 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Initialize ATC LoRa handle
  lora.hUart = &hlpuart1;
 8000736:	4b81      	ldr	r3, [pc, #516]	@ (800093c <main+0x228>)
 8000738:	4a81      	ldr	r2, [pc, #516]	@ (8000940 <main+0x22c>)
 800073a:	601a      	str	r2, [r3, #0]
  lora.psEvents = (ATC_EventTypeDef*)events;
 800073c:	4b7f      	ldr	r3, [pc, #508]	@ (800093c <main+0x228>)
 800073e:	4a81      	ldr	r2, [pc, #516]	@ (8000944 <main+0x230>)
 8000740:	60da      	str	r2, [r3, #12]
  lora.Events = sizeof(events) / sizeof(events[0]);
 8000742:	4b7e      	ldr	r3, [pc, #504]	@ (800093c <main+0x228>)
 8000744:	2206      	movs	r2, #6
 8000746:	611a      	str	r2, [r3, #16]
  lora.Size = 256;  // Buffer size
 8000748:	4b7c      	ldr	r3, [pc, #496]	@ (800093c <main+0x228>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	829a      	strh	r2, [r3, #20]
  lora.pRxBuff = malloc(lora.Size);
 8000750:	4b7a      	ldr	r3, [pc, #488]	@ (800093c <main+0x228>)
 8000752:	8a9b      	ldrh	r3, [r3, #20]
 8000754:	0018      	movs	r0, r3
 8000756:	f006 f9a7 	bl	8006aa8 <malloc>
 800075a:	0003      	movs	r3, r0
 800075c:	001a      	movs	r2, r3
 800075e:	4b77      	ldr	r3, [pc, #476]	@ (800093c <main+0x228>)
 8000760:	61da      	str	r2, [r3, #28]
  lora.pReadBuff = malloc(lora.Size);
 8000762:	4b76      	ldr	r3, [pc, #472]	@ (800093c <main+0x228>)
 8000764:	8a9b      	ldrh	r3, [r3, #20]
 8000766:	0018      	movs	r0, r3
 8000768:	f006 f99e 	bl	8006aa8 <malloc>
 800076c:	0003      	movs	r3, r0
 800076e:	001a      	movs	r2, r3
 8000770:	4b72      	ldr	r3, [pc, #456]	@ (800093c <main+0x228>)
 8000772:	625a      	str	r2, [r3, #36]	@ 0x24
  lora.RxIndex = 0;
 8000774:	4b71      	ldr	r3, [pc, #452]	@ (800093c <main+0x228>)
 8000776:	2200      	movs	r2, #0
 8000778:	831a      	strh	r2, [r3, #24]
  lora.RespCount = 0;
 800077a:	4b70      	ldr	r3, [pc, #448]	@ (800093c <main+0x228>)
 800077c:	2200      	movs	r2, #0
 800077e:	82da      	strh	r2, [r3, #22]
  
  // Initialize response pointers to NULL
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 8000780:	2300      	movs	r3, #0
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000784:	e008      	b.n	8000798 <main+0x84>
    lora.ppResp[i] = NULL;
 8000786:	4b6d      	ldr	r3, [pc, #436]	@ (800093c <main+0x228>)
 8000788:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800078a:	320a      	adds	r2, #10
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	2100      	movs	r1, #0
 8000790:	50d1      	str	r1, [r2, r3]
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 8000792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000794:	3301      	adds	r3, #1
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800079a:	2b0f      	cmp	r3, #15
 800079c:	ddf3      	ble.n	8000786 <main+0x72>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 800079e:	4b67      	ldr	r3, [pc, #412]	@ (800093c <main+0x228>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f006 f803 	bl	80067ac <ATC_Loop>
	  switch (lorawan_state) {
 80007a6:	4b68      	ldr	r3, [pc, #416]	@ (8000948 <main+0x234>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d8f6      	bhi.n	800079e <main+0x8a>
 80007b0:	009a      	lsls	r2, r3, #2
 80007b2:	4b66      	ldr	r3, [pc, #408]	@ (800094c <main+0x238>)
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 80007ba:	2549      	movs	r5, #73	@ 0x49
 80007bc:	197c      	adds	r4, r7, r5
 80007be:	4b5f      	ldr	r3, [pc, #380]	@ (800093c <main+0x228>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fbc5 	bl	8000f50 <join_network>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <main+0xce>
				lorawan_state = LORAWAN_JOINING;
 80007d2:	4b5d      	ldr	r3, [pc, #372]	@ (8000948 <main+0x234>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: Join command sent successfully\n");
 80007d8:	4b5d      	ldr	r3, [pc, #372]	@ (8000950 <main+0x23c>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f006 fb54 	bl	8006e88 <puts>
			} else {
				printf("ERROR: Join command failed with error %d\n", join_result);
				// Could implement retry logic here
			}
		}
		break;
 80007e0:	e0aa      	b.n	8000938 <main+0x224>
				printf("ERROR: Join command failed with error %d\n", join_result);
 80007e2:	2349      	movs	r3, #73	@ 0x49
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <main+0x240>)
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f006 fae5 	bl	8006dbc <iprintf>
		break;
 80007f2:	e0a1      	b.n	8000938 <main+0x224>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 80007f4:	4b58      	ldr	r3, [pc, #352]	@ (8000958 <main+0x244>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]

		  char* CONNECTION_STATUS = NULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 80007fe:	2344      	movs	r3, #68	@ 0x44
 8000800:	18fa      	adds	r2, r7, r3
 8000802:	4956      	ldr	r1, [pc, #344]	@ (800095c <main+0x248>)
 8000804:	484d      	ldr	r0, [pc, #308]	@ (800093c <main+0x228>)
 8000806:	4b56      	ldr	r3, [pc, #344]	@ (8000960 <main+0x24c>)
 8000808:	9303      	str	r3, [sp, #12]
 800080a:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <main+0x250>)
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2302      	movs	r3, #2
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	23fa      	movs	r3, #250	@ 0xfa
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	0013      	movs	r3, r2
 800081a:	22c8      	movs	r2, #200	@ 0xc8
 800081c:	f005 ffd6 	bl	80067cc <ATC_SendReceive>
 8000820:	0002      	movs	r2, r0
 8000822:	4b51      	ldr	r3, [pc, #324]	@ (8000968 <main+0x254>)
 8000824:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 8000826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000828:	2b00      	cmp	r3, #0
 800082a:	d103      	bne.n	8000834 <main+0x120>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 800082c:	4b46      	ldr	r3, [pc, #280]	@ (8000948 <main+0x234>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			  break;
 8000832:	e081      	b.n	8000938 <main+0x224>
		  }

		  // Create AT command with sensor data
		  char at_command[64];
		  uint16_t sensor_val = temp_ticks_2; // Use sensor data
 8000834:	214a      	movs	r1, #74	@ 0x4a
 8000836:	187b      	adds	r3, r7, r1
 8000838:	4a4c      	ldr	r2, [pc, #304]	@ (800096c <main+0x258>)
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	003a      	movs	r2, r7
 8000844:	2104      	movs	r1, #4
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fbe6 	bl	8001018 <format_at_send_cmd>

		  char* ATSEND_Result = NULL;
 800084c:	2300      	movs	r3, #0
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK\r", "ERROR");
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	18fa      	adds	r2, r7, r3
 8000854:	0039      	movs	r1, r7
 8000856:	4839      	ldr	r0, [pc, #228]	@ (800093c <main+0x228>)
 8000858:	4b45      	ldr	r3, [pc, #276]	@ (8000970 <main+0x25c>)
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	4b45      	ldr	r3, [pc, #276]	@ (8000974 <main+0x260>)
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2302      	movs	r3, #2
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	23fa      	movs	r3, #250	@ 0xfa
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	0013      	movs	r3, r2
 800086c:	22c8      	movs	r2, #200	@ 0xc8
 800086e:	f005 ffad 	bl	80067cc <ATC_SendReceive>
 8000872:	0002      	movs	r2, r0
 8000874:	4b3c      	ldr	r3, [pc, #240]	@ (8000968 <main+0x254>)
 8000876:	601a      	str	r2, [r3, #0]
		  if (resp == 1) {
 8000878:	4b3b      	ldr	r3, [pc, #236]	@ (8000968 <main+0x254>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d107      	bne.n	8000890 <main+0x17c>
			  lorawan_state = LORAWAN_DATA_SENDING;
 8000880:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <main+0x234>)
 8000882:	2204      	movs	r2, #4
 8000884:	701a      	strb	r2, [r3, #0]
			  printf("DEBUG: Send command accepted\n");
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <main+0x264>)
 8000888:	0018      	movs	r0, r3
 800088a:	f006 fafd 	bl	8006e88 <puts>
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 800088e:	e053      	b.n	8000938 <main+0x224>
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000890:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <main+0x234>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
	  break;
 8000896:	e04f      	b.n	8000938 <main+0x224>
	  case LORAWAN_DATA_SENDING:
			// Start timer when entering this state
			if (data_sending_start_time == 0) {
 8000898:	4b38      	ldr	r3, [pc, #224]	@ (800097c <main+0x268>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <main+0x196>
				data_sending_start_time = HAL_GetTick();
 80008a0:	f001 f864 	bl	800196c <HAL_GetTick>
 80008a4:	0002      	movs	r2, r0
 80008a6:	4b35      	ldr	r3, [pc, #212]	@ (800097c <main+0x268>)
 80008a8:	601a      	str	r2, [r3, #0]
			}

			// Check if 10 seconds have passed
			if ((HAL_GetTick() - data_sending_start_time) >= 10000) {
 80008aa:	f001 f85f 	bl	800196c <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b32      	ldr	r3, [pc, #200]	@ (800097c <main+0x268>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a32      	ldr	r2, [pc, #200]	@ (8000980 <main+0x26c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d93c      	bls.n	8000936 <main+0x222>
				printf("DEBUG: Data sending timeout - going to sleep\n");
 80008bc:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <main+0x270>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f006 fae2 	bl	8006e88 <puts>
				data_sending_start_time = 0; // Reset timer
 80008c4:	4b2d      	ldr	r3, [pc, #180]	@ (800097c <main+0x268>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
				lorawan_state = DEVICE_SLEEP;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <main+0x234>)
 80008cc:	2205      	movs	r2, #5
 80008ce:	701a      	strb	r2, [r3, #0]
			}
		break;
 80008d0:	e031      	b.n	8000936 <main+0x222>
	  case LORAWAN_DATA_RECEIVED:
		  // Handle received data
		  HAL_SuspendTick();
 80008d2:	f001 f879 	bl	80019c8 <HAL_SuspendTick>
	      HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 119, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <main+0x274>)
 80008d8:	2200      	movs	r2, #0
 80008da:	2177      	movs	r1, #119	@ 0x77
 80008dc:	0018      	movs	r0, r3
 80008de:	f003 ff45 	bl	800476c <HAL_RTCEx_SetWakeUpTimer_IT>
	      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 fc99 	bl	800321c <HAL_PWR_EnterSTOPMode>
		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80008ea:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <main+0x274>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f004 f815 	bl	800491c <HAL_RTCEx_DeactivateWakeUpTimer>
		  SystemClock_Config();
 80008f2:	f000 f851 	bl	8000998 <SystemClock_Config>
		  HAL_ResumeTick();
 80008f6:	f001 f875 	bl	80019e4 <HAL_ResumeTick>
		  lorawan_state = DEVICE_SLEEP;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <main+0x234>)
 80008fc:	2205      	movs	r2, #5
 80008fe:	701a      	strb	r2, [r3, #0]
		  break;
 8000900:	e01a      	b.n	8000938 <main+0x224>
	  case DEVICE_SLEEP:

		  lorawan_state = COLLECT_DATA;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <main+0x234>)
 8000904:	2206      	movs	r2, #6
 8000906:	701a      	strb	r2, [r3, #0]
	  break;
 8000908:	e016      	b.n	8000938 <main+0x224>
	  case COLLECT_DATA:
		  // Scan for sensors and read data
		  scan_i2c_bus();
 800090a:	f000 fbbb 	bl	8001084 <scan_i2c_bus>
		  if (has_sensor_1 || has_sensor_2) {
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <main+0x278>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <main+0x20a>
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <main+0x27c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <main+0x216>
			  sensor_init_and_read();
 800091e:	f000 fc2f 	bl	8001180 <sensor_init_and_read>
			  printf("DEBUG: Sensor data collected\n");
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <main+0x280>)
 8000924:	0018      	movs	r0, r3
 8000926:	f006 faaf 	bl	8006e88 <puts>
		  }
		  lorawan_state = LORAWAN_JOINED; // Go back to send data
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <main+0x234>)
 800092c:	2202      	movs	r2, #2
 800092e:	701a      	strb	r2, [r3, #0]
		  break;
 8000930:	e002      	b.n	8000938 <main+0x224>
		break;
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	e733      	b.n	800079e <main+0x8a>
		break;
 8000936:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000938:	e731      	b.n	800079e <main+0x8a>
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	200000dc 	.word	0x200000dc
 8000940:	20000150 	.word	0x20000150
 8000944:	08008194 	.word	0x08008194
 8000948:	20000000 	.word	0x20000000
 800094c:	080081c4 	.word	0x080081c4
 8000950:	08007b10 	.word	0x08007b10
 8000954:	08007b38 	.word	0x08007b38
 8000958:	20000124 	.word	0x20000124
 800095c:	08007b64 	.word	0x08007b64
 8000960:	08007b70 	.word	0x08007b70
 8000964:	08007b74 	.word	0x08007b74
 8000968:	2000011c 	.word	0x2000011c
 800096c:	2000026e 	.word	0x2000026e
 8000970:	08007b78 	.word	0x08007b78
 8000974:	08007b80 	.word	0x08007b80
 8000978:	08007b84 	.word	0x08007b84
 800097c:	20000120 	.word	0x20000120
 8000980:	0000270f 	.word	0x0000270f
 8000984:	08007ba4 	.word	0x08007ba4
 8000988:	20000128 	.word	0x20000128
 800098c:	20000268 	.word	0x20000268
 8000990:	20000269 	.word	0x20000269
 8000994:	08007bd4 	.word	0x08007bd4

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b09f      	sub	sp, #124	@ 0x7c
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	2440      	movs	r4, #64	@ 0x40
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	0018      	movs	r0, r3
 80009a4:	2338      	movs	r3, #56	@ 0x38
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f006 fb63 	bl	8007074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ae:	232c      	movs	r3, #44	@ 0x2c
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	0018      	movs	r0, r3
 80009b4:	2314      	movs	r3, #20
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f006 fb5b 	bl	8007074 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	2328      	movs	r3, #40	@ 0x28
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f006 fb54 	bl	8007074 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <SystemClock_Config+0xe4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a80 <SystemClock_Config+0xe8>)
 80009d2:	401a      	ands	r2, r3
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <SystemClock_Config+0xe4>)
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	0109      	lsls	r1, r1, #4
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2218      	movs	r2, #24
 80009e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22a0      	movs	r2, #160	@ 0xa0
 80009fc:	0212      	lsls	r2, r2, #8
 80009fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f002 fc63 	bl	80032d4 <HAL_RCC_OscConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a12:	f000 f837 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	212c      	movs	r1, #44	@ 0x2c
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 f81e 	bl	8003a7c <HAL_RCC_ClockConfig>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a44:	f000 f81e 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	222c      	movs	r2, #44	@ 0x2c
 8000a4c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	0292      	lsls	r2, r2, #10
 8000a60:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	f003 fa0d 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a6e:	f000 f809 	bl	8000a84 <Error_Handler>
  }
}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b01f      	add	sp, #124	@ 0x7c
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	40007000 	.word	0x40007000
 8000a80:	ffffe7ff 	.word	0xffffe7ff

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8000a96:	003b      	movs	r3, r7
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2328      	movs	r3, #40	@ 0x28
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f006 fae8 	bl	8007074 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <MX_RTC_Init+0xc8>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ab2:	227f      	movs	r2, #127	@ 0x7f
 8000ab4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ab8:	22ff      	movs	r2, #255	@ 0xff
 8000aba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000abc:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f003 fb72 	bl	80041c0 <HAL_RTC_Init>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000ae0:	f7ff ffd0 	bl	8000a84 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ae4:	491d      	ldr	r1, [pc, #116]	@ (8000b5c <MX_RTC_Init+0xcc>)
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f003 fe3e 	bl	800476c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000af4:	f7ff ffc6 	bl	8000a84 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	0252      	lsls	r2, r2, #9
 8000b04:	605a      	str	r2, [r3, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 8000b36:	003a      	movs	r2, r7
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_RTC_Init+0xc4>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f003 fc71 	bl	8004424 <HAL_RTCEx_SetTamper_IT>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8000b46:	f7ff ff9d 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b00a      	add	sp, #40	@ 0x28
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000128 	.word	0x20000128
 8000b58:	40002800 	.word	0x40002800
 8000b5c:	0000500b 	.word	0x0000500b

08000b60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_RTC_MspInit+0x38>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10e      	bne.n	8000b90 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_RTC_MspInit+0x3c>)
 8000b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_RTC_MspInit+0x3c>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	02c9      	lsls	r1, r1, #11
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2002      	movs	r0, #2
 8000b86:	f000 ffef 	bl	8001b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f001 f801 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40002800 	.word	0x40002800
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <HAL_MspInit+0x24>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x24>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <HAL_MspInit+0x24>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <HAL_MspInit+0x24>)
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	0549      	lsls	r1, r1, #21
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 8000bd4:	4b02      	ldr	r3, [pc, #8]	@ (8000be0 <HardFault_Handler+0x10>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f006 f956 	bl	8006e88 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0xc>
 8000be0:	08007bf4 	.word	0x08007bf4

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 fea4 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <RTC_IRQHandler+0x1c>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f003 fee8 	bl	80049e4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <RTC_IRQHandler+0x1c>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f003 fcfa 	bl	8004610 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	20000128 	.word	0x20000128

08000c28 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 f931 	bl	8001e96 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 f92d 	bl	8001e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000220 	.word	0x20000220
 8000c48:	200001d8 	.word	0x200001d8

08000c4c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <RNG_LPUART1_IRQHandler+0x14>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f004 f8f6 	bl	8004e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	20000150 	.word	0x20000150

08000c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	e000      	b.n	8000c7a <_read+0x16>
 8000c78:	bf00      	nop
 8000c7a:	0001      	movs	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b006      	add	sp, #24
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	0018      	movs	r0, r3
 8000cba:	e000      	b.n	8000cbe <_write+0x20>
 8000cbc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x12>
  }
  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b006      	add	sp, #24
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:

int _close(int file)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	425b      	negs	r3, r3
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	0192      	lsls	r2, r2, #6
 8000cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_isatty>:

int _isatty(int file)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f006 fa14 	bl	800718c <__errno>
 8000d64:	0003      	movs	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	18d2      	adds	r2, r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b006      	add	sp, #24
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20005000 	.word	0x20005000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000014c 	.word	0x2000014c
 8000d98:	200003d0 	.word	0x200003d0

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <MX_LPUART1_UART_Init+0x58>)
 8000db0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000db4:	22e1      	movs	r2, #225	@ 0xe1
 8000db6:	0252      	lsls	r2, r2, #9
 8000db8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <MX_LPUART1_UART_Init+0x54>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f003 fe34 	bl	8004a54 <HAL_UART_Init>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000df0:	f7ff fe48 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	20000150 	.word	0x20000150
 8000e00:	40004800 	.word	0x40004800

08000e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	240c      	movs	r4, #12
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	0018      	movs	r0, r3
 8000e12:	2314      	movs	r3, #20
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f006 f92c 	bl	8007074 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a45      	ldr	r2, [pc, #276]	@ (8000f38 <HAL_UART_MspInit+0x134>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d000      	beq.n	8000e28 <HAL_UART_MspInit+0x24>
 8000e26:	e083      	b.n	8000f30 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e28:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <HAL_UART_MspInit+0x138>)
 8000e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e2c:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <HAL_UART_MspInit+0x138>)
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	02c9      	lsls	r1, r1, #11
 8000e32:	430a      	orrs	r2, r1
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b41      	ldr	r3, [pc, #260]	@ (8000f3c <HAL_UART_MspInit+0x138>)
 8000e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <HAL_UART_MspInit+0x138>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e42:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <HAL_UART_MspInit+0x138>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e46:	2201      	movs	r2, #1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4e:	0021      	movs	r1, r4
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2202      	movs	r2, #2
 8000e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2203      	movs	r2, #3
 8000e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	187a      	adds	r2, r7, r1
 8000e70:	23a0      	movs	r3, #160	@ 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 f8f4 	bl	8002064 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e7e:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <HAL_UART_MspInit+0x140>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e84:	2205      	movs	r2, #5
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fe89 	bl	8001bcc <HAL_DMA_Init>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ebe:	f7ff fde1 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000ec6:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_UART_MspInit+0x13c>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <HAL_UART_MspInit+0x148>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000edc:	2210      	movs	r2, #16
 8000ede:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fe60 	bl	8001bcc <HAL_DMA_Init>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f10:	f7ff fdb8 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a0c      	ldr	r2, [pc, #48]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000f18:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_UART_MspInit+0x144>)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	201d      	movs	r0, #29
 8000f26:	f000 fe1f 	bl	8001b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000f2a:	201d      	movs	r0, #29
 8000f2c:	f000 fe31 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b009      	add	sp, #36	@ 0x24
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	200001d8 	.word	0x200001d8
 8000f44:	40020030 	.word	0x40020030
 8000f48:	20000220 	.word	0x20000220
 8000f4c:	4002001c 	.word	0x4002001c

08000f50 <join_network>:
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
    return LORAWAN_OK;
}

LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0c8      	sub	sp, #288	@ 0x120
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
    char  response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 8000f5e:	2308      	movs	r3, #8
 8000f60:	18fa      	adds	r2, r7, r3
 8000f62:	490e      	ldr	r1, [pc, #56]	@ (8000f9c <join_network+0x4c>)
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <join_network+0x50>)
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <join_network+0x54>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	0013      	movs	r3, r2
 8000f74:	2264      	movs	r2, #100	@ 0x64
 8000f76:	f005 fc29 	bl	80067cc <ATC_SendReceive>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	2286      	movs	r2, #134	@ 0x86
 8000f7e:	0052      	lsls	r2, r2, #1
 8000f80:	18b9      	adds	r1, r7, r2
 8000f82:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8000f84:	18bb      	adds	r3, r7, r2
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da01      	bge.n	8000f90 <join_network+0x40>
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	e000      	b.n	8000f92 <join_network+0x42>
    return LORAWAN_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b044      	add	sp, #272	@ 0x110
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	08007dac 	.word	0x08007dac
 8000fa0:	08007c3c 	.word	0x08007c3c
 8000fa4:	00002710 	.word	0x00002710

08000fa8 <to_hex_str>:
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
    return LORAWAN_OK;
}

void to_hex_str(uint32_t value, uint8_t width, char *output) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	250b      	movs	r5, #11
 8000fb4:	197b      	adds	r3, r7, r5
 8000fb6:	1c0a      	adds	r2, r1, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 8000fba:	2310      	movs	r3, #16
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <to_hex_str+0x6c>)
 8000fc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fc2:	c313      	stmia	r3!, {r0, r1, r4}
 8000fc4:	6811      	ldr	r1, [r2, #0]
 8000fc6:	6019      	str	r1, [r3, #0]
 8000fc8:	7912      	ldrb	r2, [r2, #4]
 8000fca:	711a      	strb	r2, [r3, #4]
    for (int i = width - 1; i >= 0; --i) {
 8000fcc:	197b      	adds	r3, r7, r5
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd4:	e00f      	b.n	8000ff6 <to_hex_str+0x4e>
        output[i] = hex_chars[value & 0xF];
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	220f      	movs	r2, #15
 8000fda:	401a      	ands	r2, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	18cb      	adds	r3, r1, r3
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	1879      	adds	r1, r7, r1
 8000fe6:	5c8a      	ldrb	r2, [r1, r2]
 8000fe8:	701a      	strb	r2, [r3, #0]
        value >>= 4;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	60fb      	str	r3, [r7, #12]
    for (int i = width - 1; i >= 0; --i) {
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	daec      	bge.n	8000fd6 <to_hex_str+0x2e>
    }
    output[width] = '\0';
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b00a      	add	sp, #40	@ 0x28
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	08007ddc 	.word	0x08007ddc

08001018 <format_at_send_cmd>:

void format_at_send_cmd(uint32_t data, uint8_t hex_digits, char *out_buf) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b08f      	sub	sp, #60	@ 0x3c
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	200b      	movs	r0, #11
 8001024:	183b      	adds	r3, r7, r0
 8001026:	1c0a      	adds	r2, r1, #0
 8001028:	701a      	strb	r2, [r3, #0]
    char hex_str[33];
    to_hex_str(data, hex_digits, hex_str);
 800102a:	2414      	movs	r4, #20
 800102c:	193a      	adds	r2, r7, r4
 800102e:	183b      	adds	r3, r7, r0
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ffb7 	bl	8000fa8 <to_hex_str>
    strcpy(out_buf, "AT+SEND \"");
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <format_at_send_cmd+0x64>)
 800103e:	0010      	movs	r0, r2
 8001040:	0019      	movs	r1, r3
 8001042:	230a      	movs	r3, #10
 8001044:	001a      	movs	r2, r3
 8001046:	f006 f8d6 	bl	80071f6 <memcpy>
    strcat(out_buf, hex_str);
 800104a:	193a      	adds	r2, r7, r4
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0011      	movs	r1, r2
 8001050:	0018      	movs	r0, r3
 8001052:	f006 f817 	bl	8007084 <strcat>
    strcat(out_buf, "\"\r\n");
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff f855 	bl	8000108 <strlen>
 800105e:	0003      	movs	r3, r0
 8001060:	001a      	movs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	189a      	adds	r2, r3, r2
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <format_at_send_cmd+0x68>)
 8001068:	0010      	movs	r0, r2
 800106a:	0019      	movs	r1, r3
 800106c:	2304      	movs	r3, #4
 800106e:	001a      	movs	r2, r3
 8001070:	f006 f8c1 	bl	80071f6 <memcpy>
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b00f      	add	sp, #60	@ 0x3c
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	08007df0 	.word	0x08007df0
 8001080:	08007dfc 	.word	0x08007dfc

08001084 <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting I2C scan\n");
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <scan_i2c_bus+0xd0>)
 800108c:	0018      	movs	r0, r3
 800108e:	f005 fefb 	bl	8006e88 <puts>
	
	// Reset sensor flags
	has_sensor_1 = false;
 8001092:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <scan_i2c_bus+0xd4>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 8001098:	4b30      	ldr	r3, [pc, #192]	@ (800115c <scan_i2c_bus+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 800109e:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <scan_i2c_bus+0xdc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 f95b 	bl	8002360 <HAL_GPIO_WritePin>
    uint8_t addr;
    HAL_Delay(100); // let bus settle
 80010aa:	2064      	movs	r0, #100	@ 0x64
 80010ac:	f000 fc68 	bl	8001980 <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++)
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	2203      	movs	r2, #3
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e02d      	b.n	8001114 <scan_i2c_bus+0x90>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	18db      	adds	r3, r3, r3
 80010c0:	b299      	uxth	r1, r3
 80010c2:	4828      	ldr	r0, [pc, #160]	@ (8001164 <scan_i2c_bus+0xe0>)
 80010c4:	230a      	movs	r3, #10
 80010c6:	2201      	movs	r2, #1
 80010c8:	f001 fc40 	bl	800294c <HAL_I2C_IsDeviceReady>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d11c      	bne.n	800110a <scan_i2c_bus+0x86>
        {
        	printf("DEBUG: Device found at address 0x%02X\n", addr);
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <scan_i2c_bus+0xe4>)
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f005 fe6f 	bl	8006dbc <iprintf>
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b44      	cmp	r3, #68	@ 0x44
 80010e4:	d106      	bne.n	80010f4 <scan_i2c_bus+0x70>
        		has_sensor_1 = true;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <scan_i2c_bus+0xd4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 1 detected at 0x44\n");
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <scan_i2c_bus+0xe8>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f005 feca 	bl	8006e88 <puts>
        	}
        	if (addr == 0x46) {
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b46      	cmp	r3, #70	@ 0x46
 80010fa:	d106      	bne.n	800110a <scan_i2c_bus+0x86>
        		has_sensor_2 = true;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <scan_i2c_bus+0xd8>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 2 detected at 0x46\n");
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <scan_i2c_bus+0xec>)
 8001104:	0018      	movs	r0, r3
 8001106:	f005 febf 	bl	8006e88 <puts>
    for (addr = 3; addr < 0x78; addr++)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	3201      	adds	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b77      	cmp	r3, #119	@ 0x77
 800111a:	d9cd      	bls.n	80010b8 <scan_i2c_bus+0x34>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <scan_i2c_bus+0xdc>)
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	0018      	movs	r0, r3
 8001124:	f001 f91c 	bl	8002360 <HAL_GPIO_WritePin>
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
           has_sensor_1 ? "found" : "not found",
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <scan_i2c_bus+0xd4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <scan_i2c_bus+0xb0>
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <scan_i2c_bus+0xf0>)
 8001132:	e000      	b.n	8001136 <scan_i2c_bus+0xb2>
 8001134:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <scan_i2c_bus+0xf4>)
           has_sensor_2 ? "found" : "not found");
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <scan_i2c_bus+0xd8>)
 8001138:	7812      	ldrb	r2, [r2, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 800113a:	2a00      	cmp	r2, #0
 800113c:	d001      	beq.n	8001142 <scan_i2c_bus+0xbe>
 800113e:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <scan_i2c_bus+0xf0>)
 8001140:	e000      	b.n	8001144 <scan_i2c_bus+0xc0>
 8001142:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <scan_i2c_bus+0xf4>)
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <scan_i2c_bus+0xf8>)
 8001146:	0019      	movs	r1, r3
 8001148:	f005 fe38 	bl	8006dbc <iprintf>
}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08007e00 	.word	0x08007e00
 8001158:	20000268 	.word	0x20000268
 800115c:	20000269 	.word	0x20000269
 8001160:	50000400 	.word	0x50000400
 8001164:	20000088 	.word	0x20000088
 8001168:	08007e1c 	.word	0x08007e1c
 800116c:	08007e44 	.word	0x08007e44
 8001170:	08007e68 	.word	0x08007e68
 8001174:	08007e8c 	.word	0x08007e8c
 8001178:	08007e94 	.word	0x08007e94
 800117c:	08007ea0 	.word	0x08007ea0

08001180 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting sensor initialization and reading\n");
 8001184:	4b61      	ldr	r3, [pc, #388]	@ (800130c <sensor_init_and_read+0x18c>)
 8001186:	0018      	movs	r0, r3
 8001188:	f005 fe7e 	bl	8006e88 <puts>
	if (!has_sensor_1 && !has_sensor_2) {
 800118c:	4b60      	ldr	r3, [pc, #384]	@ (8001310 <sensor_init_and_read+0x190>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2201      	movs	r2, #1
 8001192:	4053      	eors	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00d      	beq.n	80011b6 <sensor_init_and_read+0x36>
 800119a:	4b5e      	ldr	r3, [pc, #376]	@ (8001314 <sensor_init_and_read+0x194>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2201      	movs	r2, #1
 80011a0:	4053      	eors	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <sensor_init_and_read+0x36>
		printf("DEBUG: No sensors detected, returning -1\n");
 80011a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <sensor_init_and_read+0x198>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f005 fe6c 	bl	8006e88 <puts>
		return -1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	e0a6      	b.n	8001304 <sensor_init_and_read+0x184>
	}
	
	printf("DEBUG: I2C power enabled for sensor reading\n");
 80011b6:	4b59      	ldr	r3, [pc, #356]	@ (800131c <sensor_init_and_read+0x19c>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f005 fe65 	bl	8006e88 <puts>
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80011be:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <sensor_init_and_read+0x1a0>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	2120      	movs	r1, #32
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 f8cb 	bl	8002360 <HAL_GPIO_WritePin>
	error = NO_ERROR;
 80011ca:	4b56      	ldr	r3, [pc, #344]	@ (8001324 <sensor_init_and_read+0x1a4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 80011d0:	2064      	movs	r0, #100	@ 0x64
 80011d2:	f000 fbd5 	bl	8001980 <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 80011d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <sensor_init_and_read+0x190>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d03e      	beq.n	800125c <sensor_init_and_read+0xdc>
	{
		printf("DEBUG: Initializing sensor 1 (0x44)\n");
 80011de:	4b52      	ldr	r3, [pc, #328]	@ (8001328 <sensor_init_and_read+0x1a8>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f005 fe51 	bl	8006e88 <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 80011e6:	2044      	movs	r0, #68	@ 0x44
 80011e8:	f000 fa80 	bl	80016ec <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 1\n");
 80011ec:	4b4f      	ldr	r3, [pc, #316]	@ (800132c <sensor_init_and_read+0x1ac>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f005 fe4a 	bl	8006e88 <puts>
		sht4x_soft_reset();
 80011f4:	f000 faee 	bl	80017d4 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 80011f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <sensor_init_and_read+0x1b0>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fa4c 	bl	8001698 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 1 after reset\n");
 8001200:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <sensor_init_and_read+0x1b4>)
 8001202:	0018      	movs	r0, r3
 8001204:	f005 fe40 	bl	8006e88 <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 8001208:	2044      	movs	r0, #68	@ 0x44
 800120a:	f000 fa6f 	bl	80016ec <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 1\n");
 800120e:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <sensor_init_and_read+0x1b8>)
 8001210:	0018      	movs	r0, r3
 8001212:	f005 fe39 	bl	8006e88 <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001216:	4a49      	ldr	r2, [pc, #292]	@ (800133c <sensor_init_and_read+0x1bc>)
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <sensor_init_and_read+0x1c0>)
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fa75 	bl	800170c <sht4x_measure_high_precision_ticks>
 8001222:	0003      	movs	r3, r0
 8001224:	001a      	movs	r2, r3
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <sensor_init_and_read+0x1a4>)
 8001228:	801a      	strh	r2, [r3, #0]
		if (error == NO_ERROR) {
 800122a:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <sensor_init_and_read+0x1a4>)
 800122c:	2200      	movs	r2, #0
 800122e:	5e9b      	ldrsh	r3, [r3, r2]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <sensor_init_and_read+0xca>
			printf("DEBUG: Sensor 1 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_1, hum_ticks_1);
 8001234:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <sensor_init_and_read+0x1c0>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	4b40      	ldr	r3, [pc, #256]	@ (800133c <sensor_init_and_read+0x1bc>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	001a      	movs	r2, r3
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <sensor_init_and_read+0x1c4>)
 8001242:	0018      	movs	r0, r3
 8001244:	f005 fdba 	bl	8006dbc <iprintf>
 8001248:	e008      	b.n	800125c <sensor_init_and_read+0xdc>
		} else {
			printf("DEBUG: Sensor 1 measurement failed with error: %d\n", error);
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <sensor_init_and_read+0x1a4>)
 800124c:	2200      	movs	r2, #0
 800124e:	5e9b      	ldrsh	r3, [r3, r2]
 8001250:	001a      	movs	r2, r3
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <sensor_init_and_read+0x1c8>)
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f005 fdb0 	bl	8006dbc <iprintf>
		}
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <sensor_init_and_read+0x194>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d03e      	beq.n	80012e2 <sensor_init_and_read+0x162>
	{
		printf("DEBUG: Initializing sensor 2 (0x46)\n");
 8001264:	4b39      	ldr	r3, [pc, #228]	@ (800134c <sensor_init_and_read+0x1cc>)
 8001266:	0018      	movs	r0, r3
 8001268:	f005 fe0e 	bl	8006e88 <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 800126c:	2046      	movs	r0, #70	@ 0x46
 800126e:	f000 fa3d 	bl	80016ec <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 2\n");
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <sensor_init_and_read+0x1d0>)
 8001274:	0018      	movs	r0, r3
 8001276:	f005 fe07 	bl	8006e88 <puts>
		sht4x_soft_reset();
 800127a:	f000 faab 	bl	80017d4 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <sensor_init_and_read+0x1b0>)
 8001280:	0018      	movs	r0, r3
 8001282:	f000 fa09 	bl	8001698 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 2 after reset\n");
 8001286:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <sensor_init_and_read+0x1d4>)
 8001288:	0018      	movs	r0, r3
 800128a:	f005 fdfd 	bl	8006e88 <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 800128e:	2046      	movs	r0, #70	@ 0x46
 8001290:	f000 fa2c 	bl	80016ec <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 2\n");
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <sensor_init_and_read+0x1d8>)
 8001296:	0018      	movs	r0, r3
 8001298:	f005 fdf6 	bl	8006e88 <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 800129c:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <sensor_init_and_read+0x1dc>)
 800129e:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <sensor_init_and_read+0x1e0>)
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fa32 	bl	800170c <sht4x_measure_high_precision_ticks>
 80012a8:	0003      	movs	r3, r0
 80012aa:	001a      	movs	r2, r3
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <sensor_init_and_read+0x1a4>)
 80012ae:	801a      	strh	r2, [r3, #0]
		if (error == NO_ERROR) {
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <sensor_init_and_read+0x1a4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	5e9b      	ldrsh	r3, [r3, r2]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10a      	bne.n	80012d0 <sensor_init_and_read+0x150>
			printf("DEBUG: Sensor 2 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_2, hum_ticks_2);
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <sensor_init_and_read+0x1e0>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	0019      	movs	r1, r3
 80012c0:	4b26      	ldr	r3, [pc, #152]	@ (800135c <sensor_init_and_read+0x1dc>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <sensor_init_and_read+0x1e4>)
 80012c8:	0018      	movs	r0, r3
 80012ca:	f005 fd77 	bl	8006dbc <iprintf>
 80012ce:	e008      	b.n	80012e2 <sensor_init_and_read+0x162>
		} else {
			printf("DEBUG: Sensor 2 measurement failed with error: %d\n", error);
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <sensor_init_and_read+0x1a4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	5e9b      	ldrsh	r3, [r3, r2]
 80012d6:	001a      	movs	r2, r3
 80012d8:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <sensor_init_and_read+0x1e8>)
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f005 fd6d 	bl	8006dbc <iprintf>
		}
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <sensor_init_and_read+0x1a0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 f839 	bl	8002360 <HAL_GPIO_WritePin>

	if (error) return (-200);
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <sensor_init_and_read+0x1a4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	5e9b      	ldrsh	r3, [r3, r2]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <sensor_init_and_read+0x17e>
 80012f8:	23c8      	movs	r3, #200	@ 0xc8
 80012fa:	425b      	negs	r3, r3
 80012fc:	e002      	b.n	8001304 <sensor_init_and_read+0x184>
	return error;
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <sensor_init_and_read+0x1a4>)
 8001300:	2200      	movs	r2, #0
 8001302:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	08007ed8 	.word	0x08007ed8
 8001310:	20000268 	.word	0x20000268
 8001314:	20000269 	.word	0x20000269
 8001318:	08007f0c 	.word	0x08007f0c
 800131c:	08007f38 	.word	0x08007f38
 8001320:	50000400 	.word	0x50000400
 8001324:	20000272 	.word	0x20000272
 8001328:	08007f64 	.word	0x08007f64
 800132c:	08007f88 	.word	0x08007f88
 8001330:	00002710 	.word	0x00002710
 8001334:	08007fb4 	.word	0x08007fb4
 8001338:	08007fe0 	.word	0x08007fe0
 800133c:	2000026c 	.word	0x2000026c
 8001340:	2000026a 	.word	0x2000026a
 8001344:	0800800c 	.word	0x0800800c
 8001348:	08008048 	.word	0x08008048
 800134c:	0800807c 	.word	0x0800807c
 8001350:	080080a0 	.word	0x080080a0
 8001354:	080080cc 	.word	0x080080cc
 8001358:	080080f8 	.word	0x080080f8
 800135c:	20000270 	.word	0x20000270
 8001360:	2000026e 	.word	0x2000026e
 8001364:	08008124 	.word	0x08008124
 8001368:	08008160 	.word	0x08008160

0800136c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b21b      	sxth	r3, r3
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	b21b      	sxth	r3, r3
 800138a:	b29b      	uxth	r3, r3
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	000a      	movs	r2, r1
 800139e:	1cbb      	adds	r3, r7, #2
 80013a0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80013a2:	230d      	movs	r3, #13
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80013aa:	230e      	movs	r3, #14
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2200      	movs	r2, #0
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	e038      	b.n	8001426 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80013b4:	230e      	movs	r3, #14
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	7819      	ldrb	r1, [r3, #0]
 80013c0:	220d      	movs	r2, #13
 80013c2:	18bb      	adds	r3, r7, r2
 80013c4:	18ba      	adds	r2, r7, r2
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	404a      	eors	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80013cc:	230c      	movs	r3, #12
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2208      	movs	r2, #8
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e01c      	b.n	8001410 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80013d6:	210d      	movs	r1, #13
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da0a      	bge.n	80013f8 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	18db      	adds	r3, r3, r3
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	2231      	movs	r2, #49	@ 0x31
 80013ee:	4053      	eors	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e005      	b.n	8001404 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80013f8:	230d      	movs	r3, #13
 80013fa:	18fa      	adds	r2, r7, r3
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	18db      	adds	r3, r3, r3
 8001402:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001404:	220c      	movs	r2, #12
 8001406:	18bb      	adds	r3, r7, r2
 8001408:	18ba      	adds	r2, r7, r2
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	3a01      	subs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	230c      	movs	r3, #12
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1dd      	bne.n	80013d6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800141a:	220e      	movs	r2, #14
 800141c:	18bb      	adds	r3, r7, r2
 800141e:	18ba      	adds	r2, r7, r2
 8001420:	8812      	ldrh	r2, [r2, #0]
 8001422:	3201      	adds	r2, #1
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	230e      	movs	r3, #14
 8001428:	18fa      	adds	r2, r7, r3
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	8812      	ldrh	r2, [r2, #0]
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3bf      	bcc.n	80013b4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001434:	230d      	movs	r3, #13
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b004      	add	sp, #16
 8001440:	bd80      	pop	{r7, pc}

08001442 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	0008      	movs	r0, r1
 800144c:	0011      	movs	r1, r2
 800144e:	1cbb      	adds	r3, r7, #2
 8001450:	1c02      	adds	r2, r0, #0
 8001452:	801a      	strh	r2, [r3, #0]
 8001454:	1c7b      	adds	r3, r7, #1
 8001456:	1c0a      	adds	r2, r1, #0
 8001458:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800145a:	1cbb      	adds	r3, r7, #2
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff ff96 	bl	8001394 <sensirion_i2c_generate_crc>
 8001468:	0003      	movs	r3, r0
 800146a:	001a      	movs	r2, r3
 800146c:	1c7b      	adds	r3, r7, #1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4293      	cmp	r3, r2
 8001472:	d001      	beq.n	8001478 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001478:	2300      	movs	r3, #0
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}

08001482 <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	0008      	movs	r0, r1
 800148c:	0011      	movs	r1, r2
 800148e:	1cbb      	adds	r3, r7, #2
 8001490:	1c02      	adds	r2, r0, #0
 8001492:	801a      	strh	r2, [r3, #0]
 8001494:	1c7b      	adds	r3, r7, #1
 8001496:	1c0a      	adds	r2, r1, #0
 8001498:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 800149a:	1cbb      	adds	r3, r7, #2
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	1cba      	adds	r2, r7, #2
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	8011      	strh	r1, [r2, #0]
 80014a4:	001a      	movs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	189b      	adds	r3, r3, r2
 80014aa:	1c7a      	adds	r2, r7, #1
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
    return offset;
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	881b      	ldrh	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}

080014bc <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6039      	str	r1, [r7, #0]
 80014c4:	0011      	movs	r1, r2
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	1c02      	adds	r2, r0, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	1c0a      	adds	r2, r1, #0
 80014d0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f8b8 	bl	8001654 <sensirion_i2c_hal_write>
 80014e4:	0003      	movs	r3, r0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80014ee:	b5b0      	push	{r4, r5, r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	0011      	movs	r1, r2
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	1c0a      	adds	r2, r1, #0
 8001502:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	220a      	movs	r2, #10
 800150e:	18ba      	adds	r2, r7, r2
 8001510:	1c19      	adds	r1, r3, #0
 8001512:	1c0b      	adds	r3, r1, #0
 8001514:	18db      	adds	r3, r3, r3
 8001516:	185b      	adds	r3, r3, r1
 8001518:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	4013      	ands	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001528:	2304      	movs	r3, #4
 800152a:	e06c      	b.n	8001606 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800152c:	230a      	movs	r3, #10
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f868 	bl	8001610 <sensirion_i2c_hal_read>
 8001540:	0003      	movs	r3, r0
 8001542:	001a      	movs	r2, r3
 8001544:	2108      	movs	r1, #8
 8001546:	187b      	adds	r3, r7, r1
 8001548:	801a      	strh	r2, [r3, #0]
    if (error) {
 800154a:	000a      	movs	r2, r1
 800154c:	18bb      	adds	r3, r7, r2
 800154e:	2100      	movs	r1, #0
 8001550:	5e5b      	ldrsh	r3, [r3, r1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8001556:	18bb      	adds	r3, r7, r2
 8001558:	2200      	movs	r2, #0
 800155a:	5e9b      	ldrsh	r3, [r3, r2]
 800155c:	e053      	b.n	8001606 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800155e:	230e      	movs	r3, #14
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	230c      	movs	r3, #12
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
 800156e:	e041      	b.n	80015f4 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001570:	210e      	movs	r1, #14
 8001572:	187b      	adds	r3, r7, r1
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800157a:	187b      	adds	r3, r7, r1
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	3302      	adds	r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	001a      	movs	r2, r3
 8001588:	2102      	movs	r1, #2
 800158a:	f7ff ff5a 	bl	8001442 <sensirion_i2c_check_crc>
 800158e:	0003      	movs	r3, r0
 8001590:	001a      	movs	r2, r3
 8001592:	2108      	movs	r1, #8
 8001594:	187b      	adds	r3, r7, r1
 8001596:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001598:	000a      	movs	r2, r1
 800159a:	18bb      	adds	r3, r7, r2
 800159c:	2100      	movs	r1, #0
 800159e:	5e5b      	ldrsh	r3, [r3, r1]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80015a4:	18bb      	adds	r3, r7, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	5e9b      	ldrsh	r3, [r3, r2]
 80015aa:	e02c      	b.n	8001606 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80015ac:	240e      	movs	r4, #14
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	18d2      	adds	r2, r2, r3
 80015b6:	250c      	movs	r5, #12
 80015b8:	197b      	adds	r3, r7, r5
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	1979      	adds	r1, r7, r5
 80015be:	1c58      	adds	r0, r3, #1
 80015c0:	8008      	strh	r0, [r1, #0]
 80015c2:	0019      	movs	r1, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	185b      	adds	r3, r3, r1
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80015cc:	193b      	adds	r3, r7, r4
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	18d2      	adds	r2, r2, r3
 80015d6:	197b      	adds	r3, r7, r5
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	1979      	adds	r1, r7, r5
 80015dc:	1c58      	adds	r0, r3, #1
 80015de:	8008      	strh	r0, [r1, #0]
 80015e0:	0019      	movs	r1, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	185b      	adds	r3, r3, r1
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	8812      	ldrh	r2, [r2, #0]
 80015f0:	3203      	adds	r2, #3
 80015f2:	801a      	strh	r2, [r3, #0]
 80015f4:	230e      	movs	r3, #14
 80015f6:	18fa      	adds	r2, r7, r3
 80015f8:	230a      	movs	r3, #10
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3b5      	bcc.n	8001570 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001610 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af02      	add	r7, sp, #8
 8001616:	6039      	str	r1, [r7, #0]
 8001618:	0011      	movs	r1, r2
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	1c02      	adds	r2, r0, #0
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	1c0a      	adds	r2, r1, #0
 8001624:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	18db      	adds	r3, r3, r3
 800162e:	b299      	uxth	r1, r3
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4805      	ldr	r0, [pc, #20]	@ (8001650 <sensirion_i2c_hal_read+0x40>)
 800163a:	2464      	movs	r4, #100	@ 0x64
 800163c:	9400      	str	r4, [sp, #0]
 800163e:	f001 f87d 	bl	800273c <HAL_I2C_Master_Receive>
 8001642:	0003      	movs	r3, r0
 8001644:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b003      	add	sp, #12
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	20000088 	.word	0x20000088

08001654 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af02      	add	r7, sp, #8
 800165a:	6039      	str	r1, [r7, #0]
 800165c:	0011      	movs	r1, r2
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	1c02      	adds	r2, r0, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	1dbb      	adds	r3, r7, #6
 8001666:	1c0a      	adds	r2, r1, #0
 8001668:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	18db      	adds	r3, r3, r3
 8001672:	b299      	uxth	r1, r3
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <sensirion_i2c_hal_write+0x40>)
 800167e:	2464      	movs	r4, #100	@ 0x64
 8001680:	9400      	str	r4, [sp, #0]
 8001682:	f000 ff31 	bl	80024e8 <HAL_I2C_Master_Transmit>
 8001686:	0003      	movs	r3, r0
 8001688:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b003      	add	sp, #12
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	20000088 	.word	0x20000088

08001698 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	22fa      	movs	r2, #250	@ 0xfa
 80016a4:	0091      	lsls	r1, r2, #2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7fe fd40 	bl	800012c <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	22fa      	movs	r2, #250	@ 0xfa
 80016b4:	0091      	lsls	r1, r2, #2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe fdbe 	bl	8000238 <__aeabi_uidivmod>
 80016bc:	1e0b      	subs	r3, r1, #0
 80016be:	d002      	beq.n	80016c6 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 80016c6:	f000 f99b 	bl	8001a00 <HAL_GetHalVersion>
 80016ca:	0003      	movs	r3, r0
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <sensirion_i2c_hal_sleep_usec+0x50>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d802      	bhi.n	80016d8 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f950 	bl	8001980 <HAL_Delay>
}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	010100ff 	.word	0x010100ff

080016ec <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <sht4x_init+0x1c>)
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	701a      	strb	r2, [r3, #0]
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000027a 	.word	0x2000027a

0800170c <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001716:	2516      	movs	r5, #22
 8001718:	197b      	adds	r3, r7, r5
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <sht4x_measure_high_precision_ticks+0xbc>)
 8001720:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8001722:	260e      	movs	r6, #14
 8001724:	19bb      	adds	r3, r7, r6
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 800172a:	19bc      	adds	r4, r7, r6
 800172c:	19bb      	adds	r3, r7, r6
 800172e:	8819      	ldrh	r1, [r3, #0]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	22fd      	movs	r2, #253	@ 0xfd
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fea4 	bl	8001482 <sensirion_i2c_add_command8_to_buffer>
 800173a:	0003      	movs	r3, r0
 800173c:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <sht4x_measure_high_precision_ticks+0xc0>)
 8001740:	7818      	ldrb	r0, [r3, #0]
 8001742:	197c      	adds	r4, r7, r5
 8001744:	19bb      	adds	r3, r7, r6
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	0019      	movs	r1, r3
 800174c:	f7ff feb6 	bl	80014bc <sensirion_i2c_write_data>
 8001750:	0003      	movs	r3, r0
 8001752:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001754:	197b      	adds	r3, r7, r5
 8001756:	2200      	movs	r2, #0
 8001758:	5e9b      	ldrsh	r3, [r3, r2]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 800175e:	197b      	adds	r3, r7, r5
 8001760:	2200      	movs	r2, #0
 8001762:	5e9b      	ldrsh	r3, [r3, r2]
 8001764:	e02c      	b.n	80017c0 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <sht4x_measure_high_precision_ticks+0xc4>)
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ff95 	bl	8001698 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <sht4x_measure_high_precision_ticks+0xc0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2516      	movs	r5, #22
 8001774:	197c      	adds	r4, r7, r5
 8001776:	6939      	ldr	r1, [r7, #16]
 8001778:	2204      	movs	r2, #4
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff feb7 	bl	80014ee <sensirion_i2c_read_data_inplace>
 8001780:	0003      	movs	r3, r0
 8001782:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001784:	197b      	adds	r3, r7, r5
 8001786:	2200      	movs	r2, #0
 8001788:	5e9b      	ldrsh	r3, [r3, r2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 800178e:	197b      	adds	r3, r7, r5
 8001790:	2200      	movs	r2, #0
 8001792:	5e9b      	ldrsh	r3, [r3, r2]
 8001794:	e014      	b.n	80017c0 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fde7 	bl	800136c <sensirion_common_bytes_to_uint16_t>
 800179e:	0003      	movs	r3, r0
 80017a0:	001a      	movs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3302      	adds	r3, #2
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff fdde 	bl	800136c <sensirion_common_bytes_to_uint16_t>
 80017b0:	0003      	movs	r3, r0
 80017b2:	001a      	movs	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80017b8:	2316      	movs	r3, #22
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	5e9b      	ldrsh	r3, [r3, r2]
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b007      	add	sp, #28
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	20000274 	.word	0x20000274
 80017cc:	2000027a 	.word	0x2000027a
 80017d0:	00002710 	.word	0x00002710

080017d4 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80017da:	250e      	movs	r5, #14
 80017dc:	197b      	adds	r3, r7, r5
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <sht4x_soft_reset+0x6c>)
 80017e4:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80017e6:	1dbb      	adds	r3, r7, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 80017ec:	1dbc      	adds	r4, r7, #6
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	8819      	ldrh	r1, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2294      	movs	r2, #148	@ 0x94
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fe43 	bl	8001482 <sensirion_i2c_add_command8_to_buffer>
 80017fc:	0003      	movs	r3, r0
 80017fe:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001800:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <sht4x_soft_reset+0x70>)
 8001802:	7818      	ldrb	r0, [r3, #0]
 8001804:	197c      	adds	r4, r7, r5
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	0019      	movs	r1, r3
 800180e:	f7ff fe55 	bl	80014bc <sensirion_i2c_write_data>
 8001812:	0003      	movs	r3, r0
 8001814:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001816:	197b      	adds	r3, r7, r5
 8001818:	2200      	movs	r2, #0
 800181a:	5e9b      	ldrsh	r3, [r3, r2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <sht4x_soft_reset+0x54>
        return local_error;
 8001820:	197b      	adds	r3, r7, r5
 8001822:	2200      	movs	r2, #0
 8001824:	5e9b      	ldrsh	r3, [r3, r2]
 8001826:	e007      	b.n	8001838 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <sht4x_soft_reset+0x74>)
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ff34 	bl	8001698 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001830:	230e      	movs	r3, #14
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	20000274 	.word	0x20000274
 8001844:	2000027a 	.word	0x2000027a
 8001848:	00002710 	.word	0x00002710

0800184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800184c:	480d      	ldr	r0, [pc, #52]	@ (8001884 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800184e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001850:	f7ff faa4 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	@ (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800187a:	f005 fc8d 	bl	8007198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187e:	f7fe ff49 	bl	8000714 <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
   ldr   r0, =_estack
 8001884:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001890:	08008290 	.word	0x08008290
  ldr r2, =_sbss
 8001894:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001898:	200003cc 	.word	0x200003cc

0800189c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_COMP_IRQHandler>
	...

080018a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_Init+0x3c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_Init+0x3c>)
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b8:	2000      	movs	r0, #0
 80018ba:	f000 f811 	bl	80018e0 <HAL_InitTick>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d003      	beq.n	80018ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e001      	b.n	80018ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ca:	f7ff f969 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_InitTick+0x5c>)
 80018ea:	681c      	ldr	r4, [r3, #0]
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_InitTick+0x60>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	0019      	movs	r1, r3
 80018f2:	23fa      	movs	r3, #250	@ 0xfa
 80018f4:	0098      	lsls	r0, r3, #2
 80018f6:	f7fe fc19 	bl	800012c <__udivsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	0019      	movs	r1, r3
 80018fe:	0020      	movs	r0, r4
 8001900:	f7fe fc14 	bl	800012c <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f953 	bl	8001bb2 <HAL_SYSTICK_Config>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e00f      	b.n	8001934 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d80b      	bhi.n	8001932 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	2301      	movs	r3, #1
 800191e:	425b      	negs	r3, r3
 8001920:	2200      	movs	r2, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f920 	bl	8001b68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_InitTick+0x64>)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b003      	add	sp, #12
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	20000004 	.word	0x20000004
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_IncTick+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	001a      	movs	r2, r3
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_IncTick+0x20>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	18d2      	adds	r2, r2, r3
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_IncTick+0x20>)
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	2000000c 	.word	0x2000000c
 8001968:	2000027c 	.word	0x2000027c

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	@ (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	2000027c 	.word	0x2000027c

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fff0 	bl	800196c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	001a      	movs	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	189b      	adds	r3, r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	f7ff ffe0 	bl	800196c <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b004      	add	sp, #16
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_SuspendTick+0x18>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_SuspendTick+0x18>)
 80019d2:	2102      	movs	r1, #2
 80019d4:	438a      	bics	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_ResumeTick+0x18>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_ResumeTick+0x18>)
 80019ee:	2102      	movs	r1, #2
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001a04:	4b01      	ldr	r3, [pc, #4]	@ (8001a0c <HAL_GetHalVersion+0xc>)
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	010a0700 	.word	0x010a0700

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	0002      	movs	r2, r0
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a22:	d809      	bhi.n	8001a38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	001a      	movs	r2, r3
 8001a2a:	231f      	movs	r3, #31
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_EnableIRQ+0x30>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
  }
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a58:	d828      	bhi.n	8001aac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <__NVIC_SetPriority+0xd4>)
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	33c0      	adds	r3, #192	@ 0xc0
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	589b      	ldr	r3, [r3, r2]
 8001a6a:	1dfa      	adds	r2, r7, #7
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	0011      	movs	r1, r2
 8001a70:	2203      	movs	r2, #3
 8001a72:	400a      	ands	r2, r1
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	21ff      	movs	r1, #255	@ 0xff
 8001a78:	4091      	lsls	r1, r2
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	43d2      	mvns	r2, r2
 8001a7e:	401a      	ands	r2, r3
 8001a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	22ff      	movs	r2, #255	@ 0xff
 8001a88:	401a      	ands	r2, r3
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	2303      	movs	r3, #3
 8001a92:	4003      	ands	r3, r0
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a98:	481f      	ldr	r0, [pc, #124]	@ (8001b18 <__NVIC_SetPriority+0xd4>)
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	33c0      	adds	r3, #192	@ 0xc0
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001aaa:	e031      	b.n	8001b10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aac:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <__NVIC_SetPriority+0xd8>)
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	3b08      	subs	r3, #8
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3306      	adds	r3, #6
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1dfa      	adds	r2, r7, #7
 8001ac8:	7812      	ldrb	r2, [r2, #0]
 8001aca:	0011      	movs	r1, r2
 8001acc:	2203      	movs	r2, #3
 8001ace:	400a      	ands	r2, r1
 8001ad0:	00d2      	lsls	r2, r2, #3
 8001ad2:	21ff      	movs	r1, #255	@ 0xff
 8001ad4:	4091      	lsls	r1, r2
 8001ad6:	000a      	movs	r2, r1
 8001ad8:	43d2      	mvns	r2, r2
 8001ada:	401a      	ands	r2, r3
 8001adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	019b      	lsls	r3, r3, #6
 8001ae2:	22ff      	movs	r2, #255	@ 0xff
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	0018      	movs	r0, r3
 8001aec:	2303      	movs	r3, #3
 8001aee:	4003      	ands	r3, r0
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <__NVIC_SetPriority+0xd8>)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	001c      	movs	r4, r3
 8001afc:	230f      	movs	r3, #15
 8001afe:	4023      	ands	r3, r4
 8001b00:	3b08      	subs	r3, #8
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	430a      	orrs	r2, r1
 8001b06:	3306      	adds	r3, #6
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	18c3      	adds	r3, r0, r3
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	46c0      	nop			@ (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b003      	add	sp, #12
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	045b      	lsls	r3, r3, #17
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d301      	bcc.n	8001b38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b34:	2301      	movs	r3, #1
 8001b36:	e010      	b.n	8001b5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <SysTick_Config+0x44>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b40:	2301      	movs	r3, #1
 8001b42:	425b      	negs	r3, r3
 8001b44:	2103      	movs	r1, #3
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff ff7c 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <SysTick_Config+0x44>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <SysTick_Config+0x44>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	210f      	movs	r1, #15
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	1c02      	adds	r2, r0, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	0002      	movs	r2, r0
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff ff33 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff ffaf 	bl	8001b20 <SysTick_Config>
 8001bc2:	0003      	movs	r3, r0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e061      	b.n	8001ca2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a32      	ldr	r2, [pc, #200]	@ (8001cac <HAL_DMA_Init+0xe0>)
 8001be4:	4694      	mov	ip, r2
 8001be6:	4463      	add	r3, ip
 8001be8:	2114      	movs	r1, #20
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7fe fa9e 	bl	800012c <__udivsi3>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	009a      	lsls	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_DMA_Init+0xe4>)
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2225      	movs	r2, #37	@ 0x25
 8001c02:	2102      	movs	r1, #2
 8001c04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a28      	ldr	r2, [pc, #160]	@ (8001cb4 <HAL_DMA_Init+0xe8>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_DMA_Init+0xec>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	211c      	movs	r1, #28
 8001c62:	400b      	ands	r3, r1
 8001c64:	210f      	movs	r1, #15
 8001c66:	4099      	lsls	r1, r3
 8001c68:	000b      	movs	r3, r1
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_DMA_Init+0xec>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_DMA_Init+0xec>)
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	201c      	movs	r0, #28
 8001c80:	4003      	ands	r3, r0
 8001c82:	409a      	lsls	r2, r3
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_DMA_Init+0xec>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2225      	movs	r2, #37	@ 0x25
 8001c94:	2101      	movs	r1, #1
 8001c96:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2224      	movs	r2, #36	@ 0x24
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	bffdfff8 	.word	0xbffdfff8
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	ffff800f 	.word	0xffff800f
 8001cb8:	400200a8 	.word	0x400200a8

08001cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2317      	movs	r3, #23
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA_Start_IT+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e04f      	b.n	8001d80 <HAL_DMA_Start_IT+0xc4>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2224      	movs	r2, #36	@ 0x24
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2225      	movs	r2, #37	@ 0x25
 8001cec:	5c9b      	ldrb	r3, [r3, r2]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d13a      	bne.n	8001d6a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2225      	movs	r2, #37	@ 0x25
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	438a      	bics	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f974 	bl	8002006 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	210e      	movs	r1, #14
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e00f      	b.n	8001d58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	438a      	bics	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	210a      	movs	r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2224      	movs	r2, #36	@ 0x24
 8001d6e:	2100      	movs	r1, #0
 8001d70:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d72:	2317      	movs	r3, #23
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2202      	movs	r2, #2
 8001d78:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001d7a:	2317      	movs	r3, #23
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	781b      	ldrb	r3, [r3, #0]
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b006      	add	sp, #24
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2225      	movs	r2, #37	@ 0x25
 8001d9c:	5c9b      	ldrb	r3, [r3, r2]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2204      	movs	r2, #4
 8001da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2224      	movs	r2, #36	@ 0x24
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e024      	b.n	8001e00 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	210e      	movs	r1, #14
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	221c      	movs	r2, #28
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	2101      	movs	r1, #1
 8001de4:	4091      	lsls	r1, r2
 8001de6:	000a      	movs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2225      	movs	r2, #37	@ 0x25
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2224      	movs	r2, #36	@ 0x24
 8001df6:	2100      	movs	r1, #0
 8001df8:	5499      	strb	r1, [r3, r2]

    return status;
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e10:	210f      	movs	r1, #15
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2225      	movs	r2, #37	@ 0x25
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d006      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2204      	movs	r2, #4
 8001e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e02a      	b.n	8001e88 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	210e      	movs	r1, #14
 8001e3e:	438a      	bics	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	438a      	bics	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	221c      	movs	r2, #28
 8001e58:	401a      	ands	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4091      	lsls	r1, r2
 8001e62:	000a      	movs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2225      	movs	r2, #37	@ 0x25
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2224      	movs	r2, #36	@ 0x24
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	0010      	movs	r0, r2
 8001e86:	4798      	blx	r3
    }
  }
  return status;
 8001e88:	230f      	movs	r3, #15
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	221c      	movs	r2, #28
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d026      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x7a>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d022      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	221c      	movs	r2, #28
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	4091      	lsls	r1, r2
 8001ef6:	000a      	movs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d100      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x6e>
 8001f02:	e071      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	e06b      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	221c      	movs	r2, #28
 8001f16:	4013      	ands	r3, r2
 8001f18:	2202      	movs	r2, #2
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	d02d      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xea>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d029      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2220      	movs	r2, #32
 8001f34:	4013      	ands	r3, r2
 8001f36:	d10b      	bne.n	8001f50 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	210a      	movs	r1, #10
 8001f44:	438a      	bics	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2225      	movs	r2, #37	@ 0x25
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	221c      	movs	r2, #28
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4091      	lsls	r1, r2
 8001f60:	000a      	movs	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	@ 0x24
 8001f68:	2100      	movs	r1, #0
 8001f6a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d039      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	0010      	movs	r0, r2
 8001f7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f7e:	e033      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	221c      	movs	r2, #28
 8001f86:	4013      	ands	r3, r2
 8001f88:	2208      	movs	r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	d02a      	beq.n	8001fea <HAL_DMA_IRQHandler+0x154>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2208      	movs	r2, #8
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d026      	beq.n	8001fea <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	210e      	movs	r1, #14
 8001fa8:	438a      	bics	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	221c      	movs	r2, #28
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4091      	lsls	r1, r2
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2225      	movs	r2, #37	@ 0x25
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2224      	movs	r2, #36	@ 0x24
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46c0      	nop			@ (mov r8, r8)
}
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}

08002006 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	221c      	movs	r2, #28
 800201a:	401a      	ands	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2101      	movs	r1, #1
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d108      	bne.n	800204a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002048:	e007      	b.n	800205a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800207a:	e155      	b.n	8002328 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4091      	lsls	r1, r2
 8002086:	000a      	movs	r2, r1
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d100      	bne.n	8002094 <HAL_GPIO_Init+0x30>
 8002092:	e146      	b.n	8002322 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	43da      	mvns	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	0013      	movs	r3, r2
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	2201      	movs	r2, #1
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	4013      	ands	r3, r2
 8002116:	2b03      	cmp	r3, #3
 8002118:	d017      	beq.n	800214a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	43da      	mvns	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	4013      	ands	r3, r2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d123      	bne.n	800219e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	58d3      	ldr	r3, [r2, r3]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2207      	movs	r2, #7
 8002168:	4013      	ands	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	409a      	lsls	r2, r3
 8002170:	0013      	movs	r3, r2
 8002172:	43da      	mvns	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2107      	movs	r1, #7
 8002182:	400b      	ands	r3, r1
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	409a      	lsls	r2, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	401a      	ands	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	23c0      	movs	r3, #192	@ 0xc0
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	4013      	ands	r3, r2
 80021dc:	d100      	bne.n	80021e0 <HAL_GPIO_Init+0x17c>
 80021de:	e0a0      	b.n	8002322 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e0:	4b57      	ldr	r3, [pc, #348]	@ (8002340 <HAL_GPIO_Init+0x2dc>)
 80021e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e4:	4b56      	ldr	r3, [pc, #344]	@ (8002340 <HAL_GPIO_Init+0x2dc>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ec:	4a55      	ldr	r2, [pc, #340]	@ (8002344 <HAL_GPIO_Init+0x2e0>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	589b      	ldr	r3, [r3, r2]
 80021f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2203      	movs	r2, #3
 80021fe:	4013      	ands	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	409a      	lsls	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	43da      	mvns	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	23a0      	movs	r3, #160	@ 0xa0
 8002214:	05db      	lsls	r3, r3, #23
 8002216:	429a      	cmp	r2, r3
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x1f6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	@ (8002348 <HAL_GPIO_Init+0x2e4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x1f2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a49      	ldr	r2, [pc, #292]	@ (800234c <HAL_GPIO_Init+0x2e8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x1ee>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a48      	ldr	r2, [pc, #288]	@ (8002350 <HAL_GPIO_Init+0x2ec>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x1ea>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a47      	ldr	r2, [pc, #284]	@ (8002354 <HAL_GPIO_Init+0x2f0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x1e6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a46      	ldr	r2, [pc, #280]	@ (8002358 <HAL_GPIO_Init+0x2f4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x1e2>
 8002242:	2305      	movs	r3, #5
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 8002246:	2306      	movs	r3, #6
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x1f8>
 800225a:	2300      	movs	r3, #0
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	2103      	movs	r1, #3
 8002260:	400a      	ands	r2, r1
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	@ (8002344 <HAL_GPIO_Init+0x2e0>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	035b      	lsls	r3, r3, #13
 8002292:	4013      	ands	r3, r2
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800229e:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022a4:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	039b      	lsls	r3, r3, #14
 80022bc:	4013      	ands	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022c8:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43da      	mvns	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43da      	mvns	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	025b      	lsls	r3, r3, #9
 8002310:	4013      	ands	r3, r2
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800231c:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_GPIO_Init+0x2f8>)
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	40da      	lsrs	r2, r3
 8002330:	1e13      	subs	r3, r2, #0
 8002332:	d000      	beq.n	8002336 <HAL_GPIO_Init+0x2d2>
 8002334:	e6a2      	b.n	800207c <HAL_GPIO_Init+0x18>
  }
}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b006      	add	sp, #24
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	50000400 	.word	0x50000400
 800234c:	50000800 	.word	0x50000800
 8002350:	50000c00 	.word	0x50000c00
 8002354:	50001000 	.word	0x50001000
 8002358:	50001c00 	.word	0x50001c00
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	0008      	movs	r0, r1
 800236a:	0011      	movs	r1, r2
 800236c:	1cbb      	adds	r3, r7, #2
 800236e:	1c02      	adds	r2, r0, #0
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	1c7b      	adds	r3, r7, #1
 8002374:	1c0a      	adds	r2, r1, #0
 8002376:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	1c7b      	adds	r3, r7, #1
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002380:	1cbb      	adds	r3, r7, #2
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800238a:	1cbb      	adds	r3, r7, #2
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08f      	b.n	80024ce <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2241      	movs	r2, #65	@ 0x41
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fe f911 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2241      	movs	r2, #65	@ 0x41
 80023ce:	2124      	movs	r1, #36	@ 0x24
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	438a      	bics	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	493b      	ldr	r1, [pc, #236]	@ (80024d8 <HAL_I2C_Init+0x13c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4938      	ldr	r1, [pc, #224]	@ (80024dc <HAL_I2C_Init+0x140>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	0209      	lsls	r1, r1, #8
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e007      	b.n	800242a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2184      	movs	r1, #132	@ 0x84
 8002424:	0209      	lsls	r1, r1, #8
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d109      	bne.n	8002446 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2180      	movs	r1, #128	@ 0x80
 800243e:	0109      	lsls	r1, r1, #4
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	e007      	b.n	8002456 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4923      	ldr	r1, [pc, #140]	@ (80024e0 <HAL_I2C_Init+0x144>)
 8002452:	400a      	ands	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4920      	ldr	r1, [pc, #128]	@ (80024e4 <HAL_I2C_Init+0x148>)
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	491a      	ldr	r1, [pc, #104]	@ (80024dc <HAL_I2C_Init+0x140>)
 8002472:	400a      	ands	r2, r1
 8002474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	431a      	orrs	r2, r3
 8002480:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69d9      	ldr	r1, [r3, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2241      	movs	r2, #65	@ 0x41
 80024ba:	2120      	movs	r1, #32
 80024bc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2242      	movs	r2, #66	@ 0x42
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	f0ffffff 	.word	0xf0ffffff
 80024dc:	ffff7fff 	.word	0xffff7fff
 80024e0:	fffff7ff 	.word	0xfffff7ff
 80024e4:	02008000 	.word	0x02008000

080024e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	0008      	movs	r0, r1
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	0019      	movs	r1, r3
 80024f6:	230a      	movs	r3, #10
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	1c02      	adds	r2, r0, #0
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	2308      	movs	r3, #8
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	1c0a      	adds	r2, r1, #0
 8002504:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2241      	movs	r2, #65	@ 0x41
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	d000      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x2c>
 8002512:	e10a      	b.n	800272a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	@ 0x40
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Master_Transmit+0x3a>
 800251e:	2302      	movs	r3, #2
 8002520:	e104      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2240      	movs	r2, #64	@ 0x40
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800252a:	f7ff fa1f 	bl	800196c <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	0219      	lsls	r1, r3, #8
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	f000 fb22 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ef      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2241      	movs	r2, #65	@ 0x41
 8002550:	2121      	movs	r1, #33	@ 0x21
 8002552:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2242      	movs	r2, #66	@ 0x42
 8002558:	2110      	movs	r1, #16
 800255a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2208      	movs	r2, #8
 800256c:	18ba      	adds	r2, r7, r2
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	@ 0xff
 8002580:	d906      	bls.n	8002590 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	@ 0xff
 8002586:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	045b      	lsls	r3, r3, #17
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e007      	b.n	80025a0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	049b      	lsls	r3, r3, #18
 800259e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d027      	beq.n	80025f8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	697c      	ldr	r4, [r7, #20]
 80025e4:	230a      	movs	r3, #10
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	8819      	ldrh	r1, [r3, #0]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	4b51      	ldr	r3, [pc, #324]	@ (8002734 <HAL_I2C_Master_Transmit+0x24c>)
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	0023      	movs	r3, r4
 80025f2:	f000 fd41 	bl	8003078 <I2C_TransferConfig>
 80025f6:	e06f      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	697c      	ldr	r4, [r7, #20]
 8002600:	230a      	movs	r3, #10
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	8819      	ldrh	r1, [r3, #0]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_I2C_Master_Transmit+0x24c>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	0023      	movs	r3, r4
 800260e:	f000 fd33 	bl	8003078 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002612:	e061      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fb0c 	bl	8002c38 <I2C_WaitOnTXISFlagUntilTimeout>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e081      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03a      	beq.n	80026d8 <HAL_I2C_Master_Transmit+0x1f0>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d136      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800266a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	0013      	movs	r3, r2
 8002674:	2200      	movs	r2, #0
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	f000 fa86 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e053      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2bff      	cmp	r3, #255	@ 0xff
 800268c:	d911      	bls.n	80026b2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	22ff      	movs	r2, #255	@ 0xff
 8002692:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	b2da      	uxtb	r2, r3
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	045c      	lsls	r4, r3, #17
 800269e:	230a      	movs	r3, #10
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	8819      	ldrh	r1, [r3, #0]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	0023      	movs	r3, r4
 80026ac:	f000 fce4 	bl	8003078 <I2C_TransferConfig>
 80026b0:	e012      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	049c      	lsls	r4, r3, #18
 80026c6:	230a      	movs	r3, #10
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	8819      	ldrh	r1, [r3, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	0023      	movs	r3, r4
 80026d4:	f000 fcd0 	bl	8003078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d198      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 faeb 	bl	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e01a      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2220      	movs	r2, #32
 80026fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	490b      	ldr	r1, [pc, #44]	@ (8002738 <HAL_I2C_Master_Transmit+0x250>)
 800270a:	400a      	ands	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2241      	movs	r2, #65	@ 0x41
 8002712:	2120      	movs	r1, #32
 8002714:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2242      	movs	r2, #66	@ 0x42
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2240      	movs	r2, #64	@ 0x40
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
  }
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b007      	add	sp, #28
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	80002000 	.word	0x80002000
 8002738:	fe00e800 	.word	0xfe00e800

0800273c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	0008      	movs	r0, r1
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	0019      	movs	r1, r3
 800274a:	230a      	movs	r3, #10
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	1c02      	adds	r2, r0, #0
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	2308      	movs	r3, #8
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	1c0a      	adds	r2, r1, #0
 8002758:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2241      	movs	r2, #65	@ 0x41
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d000      	beq.n	8002768 <HAL_I2C_Master_Receive+0x2c>
 8002766:	e0e8      	b.n	800293a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Master_Receive+0x3a>
 8002772:	2302      	movs	r3, #2
 8002774:	e0e2      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2240      	movs	r2, #64	@ 0x40
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277e:	f7ff f8f5 	bl	800196c <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	0219      	lsls	r1, r3, #8
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2319      	movs	r3, #25
 8002792:	2201      	movs	r2, #1
 8002794:	f000 f9f8 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cd      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2241      	movs	r2, #65	@ 0x41
 80027a4:	2122      	movs	r1, #34	@ 0x22
 80027a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2242      	movs	r2, #66	@ 0x42
 80027ac:	2110      	movs	r1, #16
 80027ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2208      	movs	r2, #8
 80027c0:	18ba      	adds	r2, r7, r2
 80027c2:	8812      	ldrh	r2, [r2, #0]
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d911      	bls.n	80027fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	045c      	lsls	r4, r3, #17
 80027e6:	230a      	movs	r3, #10
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_I2C_Master_Receive+0x208>)
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0023      	movs	r3, r4
 80027f4:	f000 fc40 	bl	8003078 <I2C_TransferConfig>
 80027f8:	e076      	b.n	80028e8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	b2da      	uxtb	r2, r3
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	049c      	lsls	r4, r3, #18
 800280e:	230a      	movs	r3, #10
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	8819      	ldrh	r1, [r3, #0]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_I2C_Master_Receive+0x208>)
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	0023      	movs	r3, r4
 800281c:	f000 fc2c 	bl	8003078 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002820:	e062      	b.n	80028e8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fa8f 	bl	8002d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e082      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03a      	beq.n	80028e8 <HAL_I2C_Master_Receive+0x1ac>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d136      	bne.n	80028e8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	0013      	movs	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	2180      	movs	r1, #128	@ 0x80
 8002888:	f000 f97e 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e053      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2bff      	cmp	r3, #255	@ 0xff
 800289c:	d911      	bls.n	80028c2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	22ff      	movs	r2, #255	@ 0xff
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	045c      	lsls	r4, r3, #17
 80028ae:	230a      	movs	r3, #10
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	8819      	ldrh	r1, [r3, #0]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	0023      	movs	r3, r4
 80028bc:	f000 fbdc 	bl	8003078 <I2C_TransferConfig>
 80028c0:	e012      	b.n	80028e8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	049c      	lsls	r4, r3, #18
 80028d6:	230a      	movs	r3, #10
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	8819      	ldrh	r1, [r3, #0]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	0023      	movs	r3, r4
 80028e4:	f000 fbc8 	bl	8003078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d197      	bne.n	8002822 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f9e3 	bl	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01a      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2220      	movs	r2, #32
 800290c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	490b      	ldr	r1, [pc, #44]	@ (8002948 <HAL_I2C_Master_Receive+0x20c>)
 800291a:	400a      	ands	r2, r1
 800291c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2241      	movs	r2, #65	@ 0x41
 8002922:	2120      	movs	r1, #32
 8002924:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2242      	movs	r2, #66	@ 0x42
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2240      	movs	r2, #64	@ 0x40
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b007      	add	sp, #28
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	80002400 	.word	0x80002400
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	230a      	movs	r3, #10
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	1c0a      	adds	r2, r1, #0
 800295e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2241      	movs	r2, #65	@ 0x41
 8002968:	5c9b      	ldrb	r3, [r3, r2]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d000      	beq.n	8002972 <HAL_I2C_IsDeviceReady+0x26>
 8002970:	e0df      	b.n	8002b32 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	401a      	ands	r2, r3
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	429a      	cmp	r2, r3
 8002984:	d101      	bne.n	800298a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e0d4      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_IsDeviceReady+0x4c>
 8002994:	2302      	movs	r3, #2
 8002996:	e0cd      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2241      	movs	r2, #65	@ 0x41
 80029a4:	2124      	movs	r1, #36	@ 0x24
 80029a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_I2C_IsDeviceReady+0x7a>
 80029b6:	230a      	movs	r3, #10
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	059b      	lsls	r3, r3, #22
 80029be:	0d9b      	lsrs	r3, r3, #22
 80029c0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b3c <HAL_I2C_IsDeviceReady+0x1f0>)
 80029c2:	431a      	orrs	r2, r3
 80029c4:	e006      	b.n	80029d4 <HAL_I2C_IsDeviceReady+0x88>
 80029c6:	230a      	movs	r3, #10
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	059b      	lsls	r3, r3, #22
 80029ce:	0d9b      	lsrs	r3, r3, #22
 80029d0:	4a5b      	ldr	r2, [pc, #364]	@ (8002b40 <HAL_I2C_IsDeviceReady+0x1f4>)
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80029da:	f7fe ffc7 	bl	800196c <HAL_GetTick>
 80029de:	0003      	movs	r3, r0
 80029e0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2220      	movs	r2, #32
 80029ea:	4013      	ands	r3, r2
 80029ec:	3b20      	subs	r3, #32
 80029ee:	425a      	negs	r2, r3
 80029f0:	4153      	adcs	r3, r2
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	231f      	movs	r3, #31
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2210      	movs	r2, #16
 8002a02:	4013      	ands	r3, r2
 8002a04:	3b10      	subs	r3, #16
 8002a06:	425a      	negs	r2, r3
 8002a08:	4153      	adcs	r3, r2
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	231e      	movs	r3, #30
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a12:	e035      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	d01a      	beq.n	8002a50 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe ffa7 	bl	800196c <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <HAL_I2C_IsDeviceReady+0xe4>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2241      	movs	r2, #65	@ 0x41
 8002a34:	2120      	movs	r1, #32
 8002a36:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e071      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2220      	movs	r2, #32
 8002a58:	4013      	ands	r3, r2
 8002a5a:	3b20      	subs	r3, #32
 8002a5c:	425a      	negs	r2, r3
 8002a5e:	4153      	adcs	r3, r2
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	231f      	movs	r3, #31
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	4013      	ands	r3, r2
 8002a72:	3b10      	subs	r3, #16
 8002a74:	425a      	negs	r2, r3
 8002a76:	4153      	adcs	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	231e      	movs	r3, #30
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a80:	231f      	movs	r3, #31
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_I2C_IsDeviceReady+0x148>
 8002a8a:	231e      	movs	r3, #30
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0bf      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	0013      	movs	r3, r2
 8002aac:	2200      	movs	r2, #0
 8002aae:	2120      	movs	r1, #32
 8002ab0:	f000 f86a 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e03b      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2241      	movs	r2, #65	@ 0x41
 8002ac8:	2120      	movs	r1, #32
 8002aca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e02d      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	f000 f84f 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e020      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2210      	movs	r2, #16
 8002af8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2220      	movs	r2, #32
 8002b00:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d900      	bls.n	8002b12 <HAL_I2C_IsDeviceReady+0x1c6>
 8002b10:	e74d      	b.n	80029ae <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2241      	movs	r2, #65	@ 0x41
 8002b16:	2120      	movs	r1, #32
 8002b18:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	2220      	movs	r2, #32
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2240      	movs	r2, #64	@ 0x40
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b008      	add	sp, #32
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	02002000 	.word	0x02002000
 8002b40:	02002800 	.word	0x02002800

08002b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d103      	bne.n	8002b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	619a      	str	r2, [r3, #24]
  }
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b98:	e03a      	b.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 f971 	bl	8002e88 <I2C_IsErrorOccurred>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e040      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	d02d      	beq.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe feda 	bl	800196c <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x42>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d122      	bne.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	425a      	negs	r2, r3
 8002bda:	4153      	adcs	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	001a      	movs	r2, r3
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d113      	bne.n	8002c10 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	2220      	movs	r2, #32
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2241      	movs	r2, #65	@ 0x41
 8002bf8:	2120      	movs	r1, #32
 8002bfa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2242      	movs	r2, #66	@ 0x42
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e00f      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	425a      	negs	r2, r3
 8002c20:	4153      	adcs	r3, r2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	001a      	movs	r2, r3
 8002c26:	1dfb      	adds	r3, r7, #7
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d0b5      	beq.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c44:	e032      	b.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 f91b 	bl	8002e88 <I2C_IsErrorOccurred>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e030      	b.n	8002cbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	d025      	beq.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fe84 	bl	800196c <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11a      	bne.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d013      	beq.n	8002cac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	2220      	movs	r2, #32
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2241      	movs	r2, #65	@ 0x41
 8002c94:	2120      	movs	r1, #32
 8002c96:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2242      	movs	r2, #66	@ 0x42
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	@ 0x40
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d1c5      	bne.n	8002c46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	e02f      	b.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f8d5 	bl	8002e88 <I2C_IsErrorOccurred>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e02d      	b.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fe41 	bl	800196c <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11a      	bne.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d013      	beq.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	2220      	movs	r2, #32
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2241      	movs	r2, #65	@ 0x41
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2242      	movs	r2, #66	@ 0x42
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2240      	movs	r2, #64	@ 0x40
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d1c8      	bne.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2317      	movs	r3, #23
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d60:	e07b      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 f88d 	bl	8002e88 <I2C_IsErrorOccurred>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d003      	beq.n	8002d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002d72:	2317      	movs	r3, #23
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d140      	bne.n	8002e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002d88:	2117      	movs	r1, #23
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d13b      	bne.n	8002e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d106      	bne.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2210      	movs	r2, #16
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d123      	bne.n	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4929      	ldr	r1, [pc, #164]	@ (8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2241      	movs	r2, #65	@ 0x41
 8002de6:	2120      	movs	r1, #32
 8002de8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2242      	movs	r2, #66	@ 0x42
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2240      	movs	r2, #64	@ 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002dfa:	2317      	movs	r3, #23
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e002      	b.n	8002e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002e0a:	f7fe fdaf 	bl	800196c <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11c      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002e20:	2017      	movs	r0, #23
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d117      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d010      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2241      	movs	r2, #65	@ 0x41
 8002e48:	2120      	movs	r1, #32
 8002e4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2240      	movs	r2, #64	@ 0x40
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002e54:	183b      	adds	r3, r7, r0
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2204      	movs	r2, #4
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d005      	beq.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002e68:	2317      	movs	r3, #23
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d100      	bne.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002e72:	e776      	b.n	8002d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002e74:	2317      	movs	r3, #23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2327      	movs	r3, #39	@ 0x27
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <I2C_IsErrorOccurred+0x2e>
 8002eb4:	e079      	b.n	8002faa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ebe:	e057      	b.n	8002f70 <I2C_IsErrorOccurred+0xe8>
 8002ec0:	2227      	movs	r2, #39	@ 0x27
 8002ec2:	18bb      	adds	r3, r7, r2
 8002ec4:	18ba      	adds	r2, r7, r2
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	d04f      	beq.n	8002f70 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fe fd4c 	bl	800196c <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_IsErrorOccurred+0x5e>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d144      	bne.n	8002f70 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	01db      	lsls	r3, r3, #7
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ef4:	2013      	movs	r0, #19
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	2142      	movs	r1, #66	@ 0x42
 8002efc:	5c52      	ldrb	r2, [r2, r1]
 8002efe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d126      	bne.n	8002f62 <I2C_IsErrorOccurred+0xda>
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	01db      	lsls	r3, r3, #7
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d021      	beq.n	8002f62 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d01d      	beq.n	8002f62 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	01c9      	lsls	r1, r1, #7
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f38:	f7fe fd18 	bl	800196c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f40:	e00f      	b.n	8002f62 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f42:	f7fe fd13 	bl	800196c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b19      	cmp	r3, #25
 8002f4e:	d908      	bls.n	8002f62 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2220      	movs	r2, #32
 8002f54:	4313      	orrs	r3, r2
 8002f56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f58:	2327      	movs	r3, #39	@ 0x27
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]

              break;
 8002f60:	e006      	b.n	8002f70 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d1e8      	bne.n	8002f42 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2220      	movs	r2, #32
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d004      	beq.n	8002f88 <I2C_IsErrorOccurred+0x100>
 8002f7e:	2327      	movs	r3, #39	@ 0x27
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d09b      	beq.n	8002ec0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f88:	2327      	movs	r3, #39	@ 0x27
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2220      	movs	r2, #32
 8002f98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fa2:	2327      	movs	r3, #39	@ 0x27
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00c      	beq.n	8002fd6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2280      	movs	r2, #128	@ 0x80
 8002fca:	0052      	lsls	r2, r2, #1
 8002fcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fce:	2327      	movs	r3, #39	@ 0x27
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d00c      	beq.n	8002ffa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2280      	movs	r2, #128	@ 0x80
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ff2:	2327      	movs	r3, #39	@ 0x27
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d00c      	beq.n	800301e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2202      	movs	r2, #2
 8003008:	4313      	orrs	r3, r2
 800300a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003016:	2327      	movs	r3, #39	@ 0x27
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800301e:	2327      	movs	r3, #39	@ 0x27
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01d      	beq.n	8003064 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff fd8a 	bl	8002b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	490e      	ldr	r1, [pc, #56]	@ (8003074 <I2C_IsErrorOccurred+0x1ec>)
 800303c:	400a      	ands	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2241      	movs	r2, #65	@ 0x41
 8003050:	2120      	movs	r1, #32
 8003052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2242      	movs	r2, #66	@ 0x42
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2240      	movs	r2, #64	@ 0x40
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003064:	2327      	movs	r3, #39	@ 0x27
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b00a      	add	sp, #40	@ 0x28
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	0008      	movs	r0, r1
 8003082:	0011      	movs	r1, r2
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	240a      	movs	r4, #10
 8003088:	193b      	adds	r3, r7, r4
 800308a:	1c02      	adds	r2, r0, #0
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	2009      	movs	r0, #9
 8003090:	183b      	adds	r3, r7, r0
 8003092:	1c0a      	adds	r2, r1, #0
 8003094:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003096:	193b      	adds	r3, r7, r4
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	059b      	lsls	r3, r3, #22
 800309c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	0419      	lsls	r1, r3, #16
 80030a4:	23ff      	movs	r3, #255	@ 0xff
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	4313      	orrs	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030c2:	0d51      	lsrs	r1, r2, #21
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	00d2      	lsls	r2, r2, #3
 80030c8:	400a      	ands	r2, r1
 80030ca:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <I2C_TransferConfig+0x70>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	43d2      	mvns	r2, r2
 80030d0:	401a      	ands	r2, r3
 80030d2:	0011      	movs	r1, r2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b007      	add	sp, #28
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	03ff63ff 	.word	0x03ff63ff

080030ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2241      	movs	r2, #65	@ 0x41
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d138      	bne.n	8003174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2240      	movs	r2, #64	@ 0x40
 8003106:	5c9b      	ldrb	r3, [r3, r2]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800310c:	2302      	movs	r3, #2
 800310e:	e032      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	2101      	movs	r1, #1
 8003116:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2241      	movs	r2, #65	@ 0x41
 800311c:	2124      	movs	r1, #36	@ 0x24
 800311e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4911      	ldr	r1, [pc, #68]	@ (8003180 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800313c:	400a      	ands	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2101      	movs	r1, #1
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2241      	movs	r2, #65	@ 0x41
 8003164:	2120      	movs	r1, #32
 8003166:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	@ 0x40
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	ffffefff 	.word	0xffffefff

08003184 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2241      	movs	r2, #65	@ 0x41
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	d139      	bne.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2240      	movs	r2, #64	@ 0x40
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e033      	b.n	8003210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2240      	movs	r2, #64	@ 0x40
 80031ac:	2101      	movs	r1, #1
 80031ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2241      	movs	r2, #65	@ 0x41
 80031b4:	2124      	movs	r1, #36	@ 0x24
 80031b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	438a      	bics	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2101      	movs	r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2241      	movs	r2, #65	@ 0x41
 80031fe:	2120      	movs	r1, #32
 8003200:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	2100      	movs	r1, #0
 8003208:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b004      	add	sp, #16
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fffff0ff 	.word	0xfffff0ff

0800321c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	000a      	movs	r2, r1
 8003226:	1cfb      	adds	r3, r7, #3
 8003228:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800322e:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800323a:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <HAL_PWR_EnterSTOPMode+0xac>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_PWR_EnterSTOPMode+0x40>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003250:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003256:	491d      	ldr	r1, [pc, #116]	@ (80032cc <HAL_PWR_EnterSTOPMode+0xb0>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2203      	movs	r2, #3
 8003266:	4393      	bics	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003272:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003278:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800327e:	2104      	movs	r1, #4
 8003280:	430a      	orrs	r2, r1
 8003282:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003284:	1cfb      	adds	r3, r7, #3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800328c:	bf30      	wfi
 800328e:	e002      	b.n	8003296 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003290:	bf40      	sev
    __WFE();
 8003292:	bf20      	wfe
    __WFE();
 8003294:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800329c:	2104      	movs	r1, #4
 800329e:	438a      	bics	r2, r1
 80032a0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <HAL_PWR_EnterSTOPMode+0xa0>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80032b4:	2180      	movs	r1, #128	@ 0x80
 80032b6:	0089      	lsls	r1, r1, #2
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
  }
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b006      	add	sp, #24
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40007000 	.word	0x40007000
 80032c8:	40010000 	.word	0x40010000
 80032cc:	fffffdff 	.word	0xfffffdff
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b08a      	sub	sp, #40	@ 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f000 fbbf 	bl	8003a66 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e8:	4bc9      	ldr	r3, [pc, #804]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	220c      	movs	r2, #12
 80032ee:	4013      	ands	r3, r2
 80032f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f2:	4bc7      	ldr	r3, [pc, #796]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	025b      	lsls	r3, r3, #9
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d100      	bne.n	800330a <HAL_RCC_OscConfig+0x36>
 8003308:	e07e      	b.n	8003408 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d007      	beq.n	8003320 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d112      	bne.n	800333c <HAL_RCC_OscConfig+0x68>
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	025b      	lsls	r3, r3, #9
 800331c:	429a      	cmp	r2, r3
 800331e:	d10d      	bne.n	800333c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	4bbb      	ldr	r3, [pc, #748]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	029b      	lsls	r3, r3, #10
 8003328:	4013      	ands	r3, r2
 800332a:	d100      	bne.n	800332e <HAL_RCC_OscConfig+0x5a>
 800332c:	e06b      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d167      	bne.n	8003406 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f000 fb95 	bl	8003a66 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	025b      	lsls	r3, r3, #9
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x84>
 8003348:	4bb1      	ldr	r3, [pc, #708]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4bb0      	ldr	r3, [pc, #704]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800334e:	2180      	movs	r1, #128	@ 0x80
 8003350:	0249      	lsls	r1, r1, #9
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e027      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	23a0      	movs	r3, #160	@ 0xa0
 800335e:	02db      	lsls	r3, r3, #11
 8003360:	429a      	cmp	r2, r3
 8003362:	d10e      	bne.n	8003382 <HAL_RCC_OscConfig+0xae>
 8003364:	4baa      	ldr	r3, [pc, #680]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4ba9      	ldr	r3, [pc, #676]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	02c9      	lsls	r1, r1, #11
 800336e:	430a      	orrs	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	4ba7      	ldr	r3, [pc, #668]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4ba6      	ldr	r3, [pc, #664]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	0249      	lsls	r1, r1, #9
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e012      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 8003382:	4ba3      	ldr	r3, [pc, #652]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4ba2      	ldr	r3, [pc, #648]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003388:	49a2      	ldr	r1, [pc, #648]	@ (8003614 <HAL_RCC_OscConfig+0x340>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	4ba0      	ldr	r3, [pc, #640]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4b9c      	ldr	r3, [pc, #624]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b9b      	ldr	r3, [pc, #620]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80033a2:	499d      	ldr	r1, [pc, #628]	@ (8003618 <HAL_RCC_OscConfig+0x344>)
 80033a4:	400a      	ands	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fadc 	bl	800196c <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b8:	e009      	b.n	80033ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ba:	f7fe fad7 	bl	800196c <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	@ 0x64
 80033c6:	d902      	bls.n	80033ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f000 fb4c 	bl	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ce:	4b90      	ldr	r3, [pc, #576]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	4013      	ands	r3, r2
 80033d8:	d0ef      	beq.n	80033ba <HAL_RCC_OscConfig+0xe6>
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fac6 	bl	800196c <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e6:	f7fe fac1 	bl	800196c <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	@ 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e336      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f8:	4b85      	ldr	r3, [pc, #532]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	4013      	ands	r3, r2
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x112>
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2202      	movs	r2, #2
 800340e:	4013      	ands	r3, r2
 8003410:	d100      	bne.n	8003414 <HAL_RCC_OscConfig+0x140>
 8003412:	e099      	b.n	8003548 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	2220      	movs	r2, #32
 800341e:	4013      	ands	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003422:	4b7b      	ldr	r3, [pc, #492]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b7a      	ldr	r3, [pc, #488]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003428:	2120      	movs	r1, #32
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	2220      	movs	r2, #32
 8003432:	4393      	bics	r3, r2
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d13e      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1ec>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003448:	4b71      	ldr	r3, [pc, #452]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2204      	movs	r2, #4
 800344e:	4013      	ands	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_RCC_OscConfig+0x188>
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e304      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b6c      	ldr	r3, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <HAL_RCC_OscConfig+0x348>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	021a      	lsls	r2, r3, #8
 800346c:	4b68      	ldr	r3, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003472:	4b67      	ldr	r3, [pc, #412]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2209      	movs	r2, #9
 8003478:	4393      	bics	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800347e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003484:	f000 fc42 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003488:	0001      	movs	r1, r0
 800348a:	4b61      	ldr	r3, [pc, #388]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	220f      	movs	r2, #15
 8003492:	4013      	ands	r3, r2
 8003494:	4a62      	ldr	r2, [pc, #392]	@ (8003620 <HAL_RCC_OscConfig+0x34c>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	000a      	movs	r2, r1
 800349a:	40da      	lsrs	r2, r3
 800349c:	4b61      	ldr	r3, [pc, #388]	@ (8003624 <HAL_RCC_OscConfig+0x350>)
 800349e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034a0:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <HAL_RCC_OscConfig+0x354>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2513      	movs	r5, #19
 80034a6:	197c      	adds	r4, r7, r5
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7fe fa19 	bl	80018e0 <HAL_InitTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80034b2:	197b      	adds	r3, r7, r5
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d046      	beq.n	8003548 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80034ba:	197b      	adds	r3, r7, r5
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	e2d2      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d027      	beq.n	8003516 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034c6:	4b52      	ldr	r3, [pc, #328]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2209      	movs	r2, #9
 80034cc:	4393      	bics	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80034d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa48 	bl	800196c <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fa43 	bl	800196c <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e2b8      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f4:	4b46      	ldr	r3, [pc, #280]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	d0f1      	beq.n	80034e2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b44      	ldr	r3, [pc, #272]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a46      	ldr	r2, [pc, #280]	@ (800361c <HAL_RCC_OscConfig+0x348>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e018      	b.n	8003548 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800351c:	2101      	movs	r1, #1
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fa23 	bl	800196c <HAL_GetTick>
 8003526:	0003      	movs	r3, r0
 8003528:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe fa1e 	bl	800196c <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e293      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	d1f1      	bne.n	800352c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d100      	bne.n	8003554 <HAL_RCC_OscConfig+0x280>
 8003552:	e0a2      	b.n	800369a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d140      	bne.n	80035dc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800355a:	4b2d      	ldr	r3, [pc, #180]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4013      	ands	r3, r2
 8003564:	d005      	beq.n	8003572 <HAL_RCC_OscConfig+0x29e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e279      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003572:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4a2d      	ldr	r2, [pc, #180]	@ (800362c <HAL_RCC_OscConfig+0x358>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003586:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	0a19      	lsrs	r1, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	061a      	lsls	r2, r3, #24
 8003594:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	3301      	adds	r3, #1
 80035a2:	2280      	movs	r2, #128	@ 0x80
 80035a4:	0212      	lsls	r2, r2, #8
 80035a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	210f      	movs	r1, #15
 80035b0:	400b      	ands	r3, r1
 80035b2:	491b      	ldr	r1, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x34c>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003624 <HAL_RCC_OscConfig+0x350>)
 80035ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_RCC_OscConfig+0x354>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2513      	movs	r5, #19
 80035c2:	197c      	adds	r4, r7, r5
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fe f98b 	bl	80018e0 <HAL_InitTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80035ce:	197b      	adds	r3, r7, r5
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d061      	beq.n	800369a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80035d6:	197b      	adds	r3, r7, r5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	e244      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d040      	beq.n	8003666 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b09      	ldr	r3, [pc, #36]	@ (8003610 <HAL_RCC_OscConfig+0x33c>)
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	0049      	lsls	r1, r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fe f9bb 	bl	800196c <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035fa:	e019      	b.n	8003630 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fc:	f7fe f9b6 	bl	800196c <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d912      	bls.n	8003630 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e22b      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	40021000 	.word	0x40021000
 8003614:	fffeffff 	.word	0xfffeffff
 8003618:	fffbffff 	.word	0xfffbffff
 800361c:	ffffe0ff 	.word	0xffffe0ff
 8003620:	080081e0 	.word	0x080081e0
 8003624:	20000004 	.word	0x20000004
 8003628:	20000008 	.word	0x20000008
 800362c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003630:	4bca      	ldr	r3, [pc, #808]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d0df      	beq.n	80035fc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363c:	4bc7      	ldr	r3, [pc, #796]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4ac7      	ldr	r2, [pc, #796]	@ (8003960 <HAL_RCC_OscConfig+0x68c>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800364a:	4bc4      	ldr	r3, [pc, #784]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003650:	4bc2      	ldr	r3, [pc, #776]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	0a19      	lsrs	r1, r3, #8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	061a      	lsls	r2, r3, #24
 800365e:	4bbf      	ldr	r3, [pc, #764]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	e019      	b.n	800369a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003666:	4bbd      	ldr	r3, [pc, #756]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4bbc      	ldr	r3, [pc, #752]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800366c:	49bd      	ldr	r1, [pc, #756]	@ (8003964 <HAL_RCC_OscConfig+0x690>)
 800366e:	400a      	ands	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe f97b 	bl	800196c <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367c:	f7fe f976 	bl	800196c <HAL_GetTick>
 8003680:	0002      	movs	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1eb      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800368e:	4bb3      	ldr	r3, [pc, #716]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2208      	movs	r2, #8
 80036a0:	4013      	ands	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d019      	beq.n	80036e0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ac:	4bab      	ldr	r3, [pc, #684]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80036ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036b0:	4baa      	ldr	r3, [pc, #680]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80036b2:	2101      	movs	r1, #1
 80036b4:	430a      	orrs	r2, r1
 80036b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b8:	f7fe f958 	bl	800196c <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe f953 	bl	800196c <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1c8      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036d4:	4ba1      	ldr	r3, [pc, #644]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	2202      	movs	r2, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d0f1      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3ee>
 80036de:	e018      	b.n	8003712 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b9e      	ldr	r3, [pc, #632]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80036e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036e4:	4b9d      	ldr	r3, [pc, #628]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fe f93e 	bl	800196c <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe f939 	bl	800196c <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1ae      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003708:	4b94      	ldr	r3, [pc, #592]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800370a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370c:	2202      	movs	r2, #2
 800370e:	4013      	ands	r3, r2
 8003710:	d1f1      	bne.n	80036f6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	4013      	ands	r3, r2
 800371a:	d100      	bne.n	800371e <HAL_RCC_OscConfig+0x44a>
 800371c:	e0ae      	b.n	800387c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2023      	movs	r0, #35	@ 0x23
 8003720:	183b      	adds	r3, r7, r0
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4b8d      	ldr	r3, [pc, #564]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	055b      	lsls	r3, r3, #21
 800372e:	4013      	ands	r3, r2
 8003730:	d109      	bne.n	8003746 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b8a      	ldr	r3, [pc, #552]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003736:	4b89      	ldr	r3, [pc, #548]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	0549      	lsls	r1, r1, #21
 800373c:	430a      	orrs	r2, r1
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003740:	183b      	adds	r3, r7, r0
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0x694>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4013      	ands	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <HAL_RCC_OscConfig+0x694>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b84      	ldr	r3, [pc, #528]	@ (8003968 <HAL_RCC_OscConfig+0x694>)
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	0049      	lsls	r1, r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003760:	f7fe f904 	bl	800196c <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe f8ff 	bl	800196c <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	@ 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e174      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b7a      	ldr	r3, [pc, #488]	@ (8003968 <HAL_RCC_OscConfig+0x694>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x4d0>
 8003794:	4b71      	ldr	r3, [pc, #452]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003798:	4b70      	ldr	r3, [pc, #448]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	0049      	lsls	r1, r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80037a2:	e031      	b.n	8003808 <HAL_RCC_OscConfig+0x534>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4f2>
 80037ac:	4b6b      	ldr	r3, [pc, #428]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b0:	4b6a      	ldr	r3, [pc, #424]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037b2:	496c      	ldr	r1, [pc, #432]	@ (8003964 <HAL_RCC_OscConfig+0x690>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80037b8:	4b68      	ldr	r3, [pc, #416]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037bc:	4b67      	ldr	r3, [pc, #412]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037be:	496b      	ldr	r1, [pc, #428]	@ (800396c <HAL_RCC_OscConfig+0x698>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80037c4:	e020      	b.n	8003808 <HAL_RCC_OscConfig+0x534>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	23a0      	movs	r3, #160	@ 0xa0
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d10e      	bne.n	80037f0 <HAL_RCC_OscConfig+0x51c>
 80037d2:	4b62      	ldr	r3, [pc, #392]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037d6:	4b61      	ldr	r3, [pc, #388]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	00c9      	lsls	r1, r1, #3
 80037dc:	430a      	orrs	r2, r1
 80037de:	651a      	str	r2, [r3, #80]	@ 0x50
 80037e0:	4b5e      	ldr	r3, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037e4:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	0049      	lsls	r1, r1, #1
 80037ea:	430a      	orrs	r2, r1
 80037ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x534>
 80037f0:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037f4:	4b59      	ldr	r3, [pc, #356]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037f6:	495b      	ldr	r1, [pc, #364]	@ (8003964 <HAL_RCC_OscConfig+0x690>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80037fc:	4b57      	ldr	r3, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80037fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003800:	4b56      	ldr	r3, [pc, #344]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003802:	495a      	ldr	r1, [pc, #360]	@ (800396c <HAL_RCC_OscConfig+0x698>)
 8003804:	400a      	ands	r2, r1
 8003806:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe f8ac 	bl	800196c <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003818:	e009      	b.n	800382e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fe f8a7 	bl	800196c <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_RCC_OscConfig+0x69c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e11b      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382e:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003830:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d0ef      	beq.n	800381a <HAL_RCC_OscConfig+0x546>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7fe f896 	bl	800196c <HAL_GetTick>
 8003840:	0003      	movs	r3, r0
 8003842:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003844:	e009      	b.n	800385a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fe f891 	bl	800196c <HAL_GetTick>
 800384a:	0002      	movs	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	4a47      	ldr	r2, [pc, #284]	@ (8003970 <HAL_RCC_OscConfig+0x69c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e105      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800385a:	4b40      	ldr	r3, [pc, #256]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800385c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d1ef      	bne.n	8003846 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003866:	2323      	movs	r3, #35	@ 0x23
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b3a      	ldr	r3, [pc, #232]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003876:	493f      	ldr	r1, [pc, #252]	@ (8003974 <HAL_RCC_OscConfig+0x6a0>)
 8003878:	400a      	ands	r2, r1
 800387a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2220      	movs	r2, #32
 8003882:	4013      	ands	r3, r2
 8003884:	d049      	beq.n	800391a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d026      	beq.n	80038dc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800388e:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	4b32      	ldr	r3, [pc, #200]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003894:	2101      	movs	r1, #1
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	4b30      	ldr	r3, [pc, #192]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800389c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389e:	4b2f      	ldr	r3, [pc, #188]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80038a6:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <HAL_RCC_OscConfig+0x6a4>)
 80038a8:	6a1a      	ldr	r2, [r3, #32]
 80038aa:	4b33      	ldr	r3, [pc, #204]	@ (8003978 <HAL_RCC_OscConfig+0x6a4>)
 80038ac:	2180      	movs	r1, #128	@ 0x80
 80038ae:	0189      	lsls	r1, r1, #6
 80038b0:	430a      	orrs	r2, r1
 80038b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe f85a 	bl	800196c <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038be:	f7fe f855 	bl	800196c <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0ca      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038d0:	4b22      	ldr	r3, [pc, #136]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2202      	movs	r2, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d0f1      	beq.n	80038be <HAL_RCC_OscConfig+0x5ea>
 80038da:	e01e      	b.n	800391a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80038dc:	4b1f      	ldr	r3, [pc, #124]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	4b1e      	ldr	r3, [pc, #120]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <HAL_RCC_OscConfig+0x6a4>)
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <HAL_RCC_OscConfig+0x6a4>)
 80038ee:	4923      	ldr	r1, [pc, #140]	@ (800397c <HAL_RCC_OscConfig+0x6a8>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe f83a 	bl	800196c <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fe:	f7fe f835 	bl	800196c <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0aa      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003910:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d1f1      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d100      	bne.n	8003924 <HAL_RCC_OscConfig+0x650>
 8003922:	e09f      	b.n	8003a64 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d100      	bne.n	800392c <HAL_RCC_OscConfig+0x658>
 800392a:	e078      	b.n	8003a1e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d159      	bne.n	80039e8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <HAL_RCC_OscConfig+0x688>)
 800393a:	4911      	ldr	r1, [pc, #68]	@ (8003980 <HAL_RCC_OscConfig+0x6ac>)
 800393c:	400a      	ands	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f814 	bl	800196c <HAL_GetTick>
 8003944:	0003      	movs	r3, r0
 8003946:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe f80f 	bl	800196c <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d915      	bls.n	8003984 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e084      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
 800395c:	40021000 	.word	0x40021000
 8003960:	ffff1fff 	.word	0xffff1fff
 8003964:	fffffeff 	.word	0xfffffeff
 8003968:	40007000 	.word	0x40007000
 800396c:	fffffbff 	.word	0xfffffbff
 8003970:	00001388 	.word	0x00001388
 8003974:	efffffff 	.word	0xefffffff
 8003978:	40010000 	.word	0x40010000
 800397c:	ffffdfff 	.word	0xffffdfff
 8003980:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003984:	4b3a      	ldr	r3, [pc, #232]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	049b      	lsls	r3, r3, #18
 800398c:	4013      	ands	r3, r2
 800398e:	d1dc      	bne.n	800394a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a37      	ldr	r2, [pc, #220]	@ (8003a74 <HAL_RCC_OscConfig+0x7a0>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	431a      	orrs	r2, r3
 80039aa:	4b31      	ldr	r3, [pc, #196]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039b6:	2180      	movs	r1, #128	@ 0x80
 80039b8:	0449      	lsls	r1, r1, #17
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fd ffd5 	bl	800196c <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd ffd0 	bl	800196c <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e045      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039da:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	049b      	lsls	r3, r3, #18
 80039e2:	4013      	ands	r3, r2
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x6f4>
 80039e6:	e03d      	b.n	8003a64 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 80039ee:	4922      	ldr	r1, [pc, #136]	@ (8003a78 <HAL_RCC_OscConfig+0x7a4>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd ffba 	bl	800196c <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd ffb5 	bl	800196c <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e02a      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a10:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	049b      	lsls	r3, r3, #18
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x72a>
 8003a1c:	e022      	b.n	8003a64 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01d      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a2a:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_RCC_OscConfig+0x79c>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d10f      	bne.n	8003a60 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	23f0      	movs	r3, #240	@ 0xf0
 8003a44:	039b      	lsls	r3, r3, #14
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	23c0      	movs	r3, #192	@ 0xc0
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	401a      	ands	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b00a      	add	sp, #40	@ 0x28
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	40021000 	.word	0x40021000
 8003a74:	ff02ffff 	.word	0xff02ffff
 8003a78:	feffffff 	.word	0xfeffffff

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b5b0      	push	{r4, r5, r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e128      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b96      	ldr	r3, [pc, #600]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d91e      	bls.n	8003adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b93      	ldr	r3, [pc, #588]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	4b90      	ldr	r3, [pc, #576]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd ff5c 	bl	800196c <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab8:	e009      	b.n	8003ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aba:	f7fd ff57 	bl	800196c <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	4a8a      	ldr	r2, [pc, #552]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e109      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b87      	ldr	r3, [pc, #540]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae6:	4b83      	ldr	r3, [pc, #524]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	22f0      	movs	r2, #240	@ 0xf0
 8003aec:	4393      	bics	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d100      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
 8003b04:	e089      	b.n	8003c1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b0e:	4b79      	ldr	r3, [pc, #484]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	029b      	lsls	r3, r3, #10
 8003b16:	4013      	ands	r3, r2
 8003b18:	d120      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0e1      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b26:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	049b      	lsls	r3, r3, #18
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d114      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0d5      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2204      	movs	r2, #4
 8003b44:	4013      	ands	r3, r2
 8003b46:	d109      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0ca      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b4c:	4b69      	ldr	r3, [pc, #420]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0c2      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5c:	4b65      	ldr	r3, [pc, #404]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2203      	movs	r2, #3
 8003b62:	4393      	bics	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	4b62      	ldr	r3, [pc, #392]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fd fefc 	bl	800196c <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	e009      	b.n	8003b96 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b82:	f7fd fef3 	bl	800196c <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0a5      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b96:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d1ef      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x106>
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bae:	f7fd fedd 	bl	800196c <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e08f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d1ef      	bne.n	8003bae <HAL_RCC_ClockConfig+0x132>
 8003bce:	e024      	b.n	8003c1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d11b      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd8:	e009      	b.n	8003bee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bda:	f7fd fec7 	bl	800196c <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	4a42      	ldr	r2, [pc, #264]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e079      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d1ef      	bne.n	8003bda <HAL_RCC_ClockConfig+0x15e>
 8003bfa:	e00e      	b.n	8003c1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd feb6 	bl	800196c <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e068      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c10:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	220c      	movs	r2, #12
 8003c16:	4013      	ands	r3, r2
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1a:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d21e      	bcs.n	8003c66 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c28:	4b30      	ldr	r3, [pc, #192]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4393      	bics	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	4b2e      	ldr	r3, [pc, #184]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd fe97 	bl	800196c <HAL_GetTick>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	e009      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fd fe92 	bl	800196c <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e044      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c58:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d1ee      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <HAL_RCC_ClockConfig+0x27c>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <HAL_RCC_ClockConfig+0x280>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00da      	lsls	r2, r3, #3
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca4:	f000 f832 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003ca8:	0001      	movs	r1, r0
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_ClockConfig+0x278>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <HAL_RCC_ClockConfig+0x284>)
 8003cb6:	5cd3      	ldrb	r3, [r2, r3]
 8003cb8:	000a      	movs	r2, r1
 8003cba:	40da      	lsrs	r2, r3
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCC_ClockConfig+0x288>)
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_RCC_ClockConfig+0x28c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	250b      	movs	r5, #11
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7fd fe09 	bl	80018e0 <HAL_InitTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003cd2:	197b      	adds	r3, r7, r5
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003cda:	197b      	adds	r3, r7, r5
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	00001388 	.word	0x00001388
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	fffff8ff 	.word	0xfffff8ff
 8003cfc:	ffffc7ff 	.word	0xffffc7ff
 8003d00:	080081e0 	.word	0x080081e0
 8003d04:	20000004 	.word	0x20000004
 8003d08:	20000008 	.word	0x20000008

08003d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d12:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d013      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3e>
 8003d22:	d85c      	bhi.n	8003dde <HAL_RCC_GetSysClockFreq+0xd2>
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d002      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x22>
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x38>
 8003d2c:	e057      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d2e:	4b35      	ldr	r3, [pc, #212]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2210      	movs	r2, #16
 8003d34:	4013      	ands	r3, r2
 8003d36:	d002      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d38:	4b33      	ldr	r3, [pc, #204]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d3a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003d3c:	e05d      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003d3e:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x100>)
 8003d40:	613b      	str	r3, [r7, #16]
      break;
 8003d42:	e05a      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d46:	613b      	str	r3, [r7, #16]
      break;
 8003d48:	e057      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	220f      	movs	r2, #15
 8003d50:	4013      	ands	r3, r2
 8003d52:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
 8003d56:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	0d9b      	lsrs	r3, r3, #22
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	4013      	ands	r3, r2
 8003d60:	3301      	adds	r3, #1
 8003d62:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d64:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	000a      	movs	r2, r1
 8003d74:	0152      	lsls	r2, r2, #5
 8003d76:	1a52      	subs	r2, r2, r1
 8003d78:	0193      	lsls	r3, r2, #6
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	185b      	adds	r3, r3, r1
 8003d80:	025b      	lsls	r3, r3, #9
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fc f9d1 	bl	800012c <__udivsi3>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e023      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d90:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	4013      	ands	r3, r2
 8003d98:	d00f      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	000a      	movs	r2, r1
 8003d9e:	0152      	lsls	r2, r2, #5
 8003da0:	1a52      	subs	r2, r2, r1
 8003da2:	0193      	lsls	r3, r2, #6
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	185b      	adds	r3, r3, r1
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fc f9bc 	bl	800012c <__udivsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e00e      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	000a      	movs	r2, r1
 8003dbe:	0152      	lsls	r2, r2, #5
 8003dc0:	1a52      	subs	r2, r2, r1
 8003dc2:	0193      	lsls	r3, r2, #6
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	185b      	adds	r3, r3, r1
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7fc f9ac 	bl	800012c <__udivsi3>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
      break;
 8003ddc:	e00d      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	2207      	movs	r2, #7
 8003de6:	4013      	ands	r3, r2
 8003de8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	0212      	lsls	r2, r2, #8
 8003df2:	409a      	lsls	r2, r3
 8003df4:	0013      	movs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
      break;
 8003df8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dfa:	693b      	ldr	r3, [r7, #16]
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b006      	add	sp, #24
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	003d0900 	.word	0x003d0900
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	007a1200 	.word	0x007a1200
 8003e14:	080081f8 	.word	0x080081f8

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b02      	ldr	r3, [pc, #8]	@ (8003e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	20000004 	.word	0x20000004

08003e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	f7ff fff2 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e34:	0001      	movs	r1, r0
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	4013      	ands	r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	40d9      	lsrs	r1, r3
 8003e46:	000b      	movs	r3, r1
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	40021000 	.word	0x40021000
 8003e54:	080081f0 	.word	0x080081f0

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	0001      	movs	r1, r0
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	0adb      	lsrs	r3, r3, #11
 8003e68:	2207      	movs	r2, #7
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	40d9      	lsrs	r1, r3
 8003e72:	000b      	movs	r3, r1
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	080081f0 	.word	0x080081f0

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e8c:	2317      	movs	r3, #23
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d106      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d100      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003eaa:	e104      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eac:	4bb9      	ldr	r3, [pc, #740]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	055b      	lsls	r3, r3, #21
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d10a      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4bb6      	ldr	r3, [pc, #728]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebc:	4bb5      	ldr	r3, [pc, #724]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	0549      	lsls	r1, r1, #21
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003ec6:	2317      	movs	r3, #23
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	4bb2      	ldr	r3, [pc, #712]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eda:	4baf      	ldr	r3, [pc, #700]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4bae      	ldr	r3, [pc, #696]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	0049      	lsls	r1, r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fd40 	bl	800196c <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fd fd3b 	bl	800196c <HAL_GetTick>
 8003ef6:	0002      	movs	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	@ 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e143      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	4ba4      	ldr	r3, [pc, #656]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f10:	4ba0      	ldr	r3, [pc, #640]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	23c0      	movs	r3, #192	@ 0xc0
 8003f16:	039b      	lsls	r3, r3, #14
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	23c0      	movs	r3, #192	@ 0xc0
 8003f22:	039b      	lsls	r3, r3, #14
 8003f24:	4013      	ands	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	23c0      	movs	r3, #192	@ 0xc0
 8003f32:	039b      	lsls	r3, r3, #14
 8003f34:	4013      	ands	r3, r2
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	23c0      	movs	r3, #192	@ 0xc0
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	401a      	ands	r2, r3
 8003f46:	23c0      	movs	r3, #192	@ 0xc0
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f4e:	4b91      	ldr	r3, [pc, #580]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	401a      	ands	r2, r3
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e113      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003f64:	4b8b      	ldr	r3, [pc, #556]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f68:	23c0      	movs	r3, #192	@ 0xc0
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d049      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	23c0      	movs	r3, #192	@ 0xc0
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d004      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	23c0      	movs	r3, #192	@ 0xc0
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d034      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d02e      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fac:	4b79      	ldr	r3, [pc, #484]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb6:	4b77      	ldr	r3, [pc, #476]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fba:	4b76      	ldr	r3, [pc, #472]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	0309      	lsls	r1, r1, #12
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc4:	4b73      	ldr	r3, [pc, #460]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fc8:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fca:	4975      	ldr	r1, [pc, #468]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003fd0:	4b70      	ldr	r3, [pc, #448]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d014      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fcc4 	bl	800196c <HAL_GetTick>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe8:	e009      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd fcbf 	bl	800196c <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0c6      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ffe:	4b65      	ldr	r3, [pc, #404]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d0ef      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	4013      	ands	r3, r2
 8004014:	d01f      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	23c0      	movs	r3, #192	@ 0xc0
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	401a      	ands	r2, r3
 8004020:	23c0      	movs	r3, #192	@ 0xc0
 8004022:	029b      	lsls	r3, r3, #10
 8004024:	429a      	cmp	r2, r3
 8004026:	d10c      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004028:	4b5a      	ldr	r3, [pc, #360]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5e      	ldr	r2, [pc, #376]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800402e:	4013      	ands	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	23c0      	movs	r3, #192	@ 0xc0
 8004038:	039b      	lsls	r3, r3, #14
 800403a:	401a      	ands	r2, r3
 800403c:	4b55      	ldr	r3, [pc, #340]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	4b54      	ldr	r3, [pc, #336]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004044:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	23c0      	movs	r3, #192	@ 0xc0
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	401a      	ands	r2, r3
 8004050:	4b50      	ldr	r3, [pc, #320]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004052:	430a      	orrs	r2, r1
 8004054:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2220      	movs	r2, #32
 800405c:	4013      	ands	r3, r2
 800405e:	d01f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	23c0      	movs	r3, #192	@ 0xc0
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	401a      	ands	r2, r3
 800406a:	23c0      	movs	r3, #192	@ 0xc0
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	429a      	cmp	r2, r3
 8004070:	d10c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004072:	4b48      	ldr	r3, [pc, #288]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4c      	ldr	r2, [pc, #304]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004078:	4013      	ands	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	23c0      	movs	r3, #192	@ 0xc0
 8004082:	039b      	lsls	r3, r3, #14
 8004084:	401a      	ands	r2, r3
 8004086:	4b43      	ldr	r3, [pc, #268]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	4b41      	ldr	r3, [pc, #260]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800408e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	23c0      	movs	r3, #192	@ 0xc0
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	401a      	ands	r2, r3
 800409a:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800409c:	430a      	orrs	r2, r1
 800409e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040a0:	2317      	movs	r3, #23
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ae:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040b0:	493e      	ldr	r1, [pc, #248]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c0:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c4:	2203      	movs	r2, #3
 80040c6:	4393      	bics	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040d0:	430a      	orrs	r2, r1
 80040d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040de:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	220c      	movs	r2, #12
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	4b29      	ldr	r3, [pc, #164]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004100:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	4b22      	ldr	r3, [pc, #136]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800410c:	430a      	orrs	r2, r1
 800410e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	4013      	ands	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	4a25      	ldr	r2, [pc, #148]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004120:	4013      	ands	r3, r2
 8004122:	0019      	movs	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800412a:	430a      	orrs	r2, r1
 800412c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4013      	ands	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800413a:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	4a17      	ldr	r2, [pc, #92]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800414a:	430a      	orrs	r2, r1
 800414c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2240      	movs	r2, #64	@ 0x40
 8004154:	4013      	ands	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800415a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004168:	430a      	orrs	r2, r1
 800416a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2280      	movs	r2, #128	@ 0x80
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004186:	430a      	orrs	r2, r1
 8004188:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	40007000 	.word	0x40007000
 800419c:	fffcffff 	.word	0xfffcffff
 80041a0:	fff7ffff 	.word	0xfff7ffff
 80041a4:	00001388 	.word	0x00001388
 80041a8:	ffcfffff 	.word	0xffcfffff
 80041ac:	efffffff 	.word	0xefffffff
 80041b0:	fffff3ff 	.word	0xfffff3ff
 80041b4:	ffffcfff 	.word	0xffffcfff
 80041b8:	fbffffff 	.word	0xfbffffff
 80041bc:	fff3ffff 	.word	0xfff3ffff

080041c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041c8:	230f      	movs	r3, #15
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e088      	b.n	80042ec <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2221      	movs	r2, #33	@ 0x21
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	2100      	movs	r1, #0
 80041ec:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fc fcb5 	bl	8000b60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2221      	movs	r2, #33	@ 0x21
 80041fa:	2102      	movs	r1, #2
 80041fc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2210      	movs	r2, #16
 8004206:	4013      	ands	r3, r2
 8004208:	2b10      	cmp	r3, #16
 800420a:	d05f      	beq.n	80042cc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	22ca      	movs	r2, #202	@ 0xca
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2253      	movs	r2, #83	@ 0x53
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800421c:	250f      	movs	r5, #15
 800421e:	197c      	adds	r4, r7, r5
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f890 	bl	8004348 <RTC_EnterInitMode>
 8004228:	0003      	movs	r3, r0
 800422a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800422c:	0028      	movs	r0, r5
 800422e:	183b      	adds	r3, r7, r0
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12c      	bne.n	8004290 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	492c      	ldr	r1, [pc, #176]	@ (80042f4 <HAL_RTC_Init+0x134>)
 8004242:	400a      	ands	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6919      	ldr	r1, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004282:	183c      	adds	r4, r7, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0018      	movs	r0, r3
 8004288:	f000 f8a2 	bl	80043d0 <RTC_ExitInitMode>
 800428c:	0003      	movs	r3, r0
 800428e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d113      	bne.n	80042c2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2103      	movs	r1, #3
 80042a6:	438a      	bics	r2, r1
 80042a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ca:	e003      	b.n	80042d4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80042d4:	230f      	movs	r3, #15
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2221      	movs	r2, #33	@ 0x21
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80042e6:	230f      	movs	r3, #15
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	781b      	ldrb	r3, [r3, #0]
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b004      	add	sp, #16
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}
 80042f4:	ff8fffbf 	.word	0xff8fffbf

080042f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <HAL_RTC_WaitForSynchro+0x4c>)
 800430a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430c:	f7fd fb2e 	bl	800196c <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004314:	e00a      	b.n	800432c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004316:	f7fd fb29 	bl	800196c <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	23fa      	movs	r3, #250	@ 0xfa
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d901      	bls.n	800432c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	4013      	ands	r3, r2
 8004336:	d0ee      	beq.n	8004316 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	0001ff5f 	.word	0x0001ff5f

08004348 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	4013      	ands	r3, r2
 8004366:	d12c      	bne.n	80043c2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2180      	movs	r1, #128	@ 0x80
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004378:	f7fd faf8 	bl	800196c <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004380:	e014      	b.n	80043ac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004382:	f7fd faf3 	bl	800196c <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	200f      	movs	r0, #15
 800438e:	183b      	adds	r3, r7, r0
 8004390:	1839      	adds	r1, r7, r0
 8004392:	7809      	ldrb	r1, [r1, #0]
 8004394:	7019      	strb	r1, [r3, #0]
 8004396:	23fa      	movs	r3, #250	@ 0xfa
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	429a      	cmp	r2, r3
 800439c:	d906      	bls.n	80043ac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2221      	movs	r2, #33	@ 0x21
 80043a2:	2104      	movs	r1, #4
 80043a4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	4013      	ands	r3, r2
 80043b6:	d104      	bne.n	80043c2 <RTC_EnterInitMode+0x7a>
 80043b8:	230f      	movs	r3, #15
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d1df      	bne.n	8004382 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	240f      	movs	r4, #15
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	438a      	bics	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2220      	movs	r2, #32
 80043f8:	4013      	ands	r3, r2
 80043fa:	d10c      	bne.n	8004416 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff ff7a 	bl	80042f8 <HAL_RTC_WaitForSynchro>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d006      	beq.n	8004416 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2221      	movs	r2, #33	@ 0x21
 800440c:	2104      	movs	r1, #4
 800440e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004410:	193b      	adds	r3, r7, r4
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b005      	add	sp, #20
 8004422:	bd90      	pop	{r4, r7, pc}

08004424 <HAL_RTCEx_SetTamper_IT>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to RTC Tamper.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	5c9b      	ldrb	r3, [r3, r2]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_RTCEx_SetTamper_IT+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e0d3      	b.n	80045e8 <HAL_RTCEx_SetTamper_IT+0x1c4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	2101      	movs	r1, #1
 8004446:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2221      	movs	r2, #33	@ 0x21
 800444c:	2102      	movs	r1, #2
 800444e:	5499      	strb	r1, [r3, r2]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d106      	bne.n	8004478 <HAL_RTCEx_SetTamper_IT+0x54>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e006      	b.n	8004486 <HAL_RTCEx_SetTamper_IT+0x62>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	43da      	mvns	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the backup registers erasure enabling bits */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01e      	beq.n	80044cc <HAL_RTCEx_SetTamper_IT+0xa8>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2201      	movs	r2, #1
 8004494:	4013      	ands	r3, r2
 8004496:	d004      	beq.n	80044a2 <HAL_RTCEx_SetTamper_IT+0x7e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2280      	movs	r2, #128	@ 0x80
 800449c:	0292      	lsls	r2, r2, #10
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2208      	movs	r2, #8
 80044a8:	4013      	ands	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_RTCEx_SetTamper_IT+0x92>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	0352      	lsls	r2, r2, #13
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2220      	movs	r2, #32
 80044bc:	4013      	ands	r3, r2
 80044be:	d020      	beq.n	8004502 <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2280      	movs	r2, #128	@ 0x80
 80044c4:	0412      	lsls	r2, r2, #16
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e01a      	b.n	8004502 <HAL_RTCEx_SetTamper_IT+0xde>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	d003      	beq.n	80044de <HAL_RTCEx_SetTamper_IT+0xba>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a45      	ldr	r2, [pc, #276]	@ (80045f0 <HAL_RTCEx_SetTamper_IT+0x1cc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2208      	movs	r2, #8
 80044e4:	4013      	ands	r3, r2
 80044e6:	d003      	beq.n	80044f0 <HAL_RTCEx_SetTamper_IT+0xcc>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a42      	ldr	r2, [pc, #264]	@ (80045f4 <HAL_RTCEx_SetTamper_IT+0x1d0>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2220      	movs	r2, #32
 80044f6:	4013      	ands	r3, r2
 80044f8:	d003      	beq.n	8004502 <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a3e      	ldr	r2, [pc, #248]	@ (80045f8 <HAL_RTCEx_SetTamper_IT+0x1d4>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Configure the tamper flags masking bits */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01e      	beq.n	8004548 <HAL_RTCEx_SetTamper_IT+0x124>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	4013      	ands	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_RTCEx_SetTamper_IT+0xfa>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2280      	movs	r2, #128	@ 0x80
 8004518:	02d2      	lsls	r2, r2, #11
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	4013      	ands	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_RTCEx_SetTamper_IT+0x10e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2280      	movs	r2, #128	@ 0x80
 800452c:	0392      	lsls	r2, r2, #14
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2220      	movs	r2, #32
 8004538:	4013      	ands	r3, r2
 800453a:	d020      	beq.n	800457e <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	0452      	lsls	r2, r2, #17
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e01a      	b.n	800457e <HAL_RTCEx_SetTamper_IT+0x15a>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2201      	movs	r2, #1
 800454e:	4013      	ands	r3, r2
 8004550:	d003      	beq.n	800455a <HAL_RTCEx_SetTamper_IT+0x136>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <HAL_RTCEx_SetTamper_IT+0x1d8>)
 8004556:	4013      	ands	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2208      	movs	r2, #8
 8004560:	4013      	ands	r3, r2
 8004562:	d003      	beq.n	800456c <HAL_RTCEx_SetTamper_IT+0x148>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a26      	ldr	r2, [pc, #152]	@ (8004600 <HAL_RTCEx_SetTamper_IT+0x1dc>)
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2220      	movs	r2, #32
 8004572:	4013      	ands	r3, r2
 8004574:	d003      	beq.n	800457e <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a22      	ldr	r2, [pc, #136]	@ (8004604 <HAL_RTCEx_SetTamper_IT+0x1e0>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <HAL_RTCEx_SetTamper_IT+0x1e4>)
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK   | \
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 800458e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8004594:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 800459a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 80045a0:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Enable interrupt on selected tamper */
  tmpreg |= (uint32_t)sTamper->Interrupt;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Enable and configure the EXTI line associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b13      	ldr	r3, [pc, #76]	@ (800460c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80045c0:	2180      	movs	r1, #128	@ 0x80
 80045c2:	0309      	lsls	r1, r1, #12
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 80045c8:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	0309      	lsls	r1, r1, #12
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2221      	movs	r2, #33	@ 0x21
 80045da:	2101      	movs	r1, #1
 80045dc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b004      	add	sp, #16
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	fffdffff 	.word	0xfffdffff
 80045f4:	ffefffff 	.word	0xffefffff
 80045f8:	ff7fffff 	.word	0xff7fffff
 80045fc:	fffbffff 	.word	0xfffbffff
 8004600:	ffdfffff 	.word	0xffdfffff
 8004604:	feffffff 	.word	0xfeffffff
 8004608:	ffff007f 	.word	0xffff007f
 800460c:	40010400 	.word	0x40010400

08004610 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8004618:	4b3c      	ldr	r3, [pc, #240]	@ (800470c <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 800461a:	2280      	movs	r2, #128	@ 0x80
 800461c:	0312      	lsls	r2, r2, #12
 800461e:	615a      	str	r2, [r3, #20]

  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	4013      	ands	r3, r2
 800462c:	d014      	beq.n	8004658 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	4013      	ands	r3, r2
 800463a:	d00d      	beq.n	8004658 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f874 	bl	800472c <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit after returning from callback
         as RTC_TSTR and RTC_TSDR registers are cleared when TSF bit is reset */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	22ff      	movs	r2, #255	@ 0xff
 800464c:	401a      	ands	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	492f      	ldr	r1, [pc, #188]	@ (8004710 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 8004654:	430a      	orrs	r2, r1
 8004656:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a2d      	ldr	r2, [pc, #180]	@ (8004714 <HAL_RTCEx_TamperTimeStampIRQHandler+0x104>)
 8004660:	4013      	ands	r3, r2
 8004662:	d014      	beq.n	800468e <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	4013      	ands	r3, r2
 8004670:	d00d      	beq.n	800468e <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	22ff      	movs	r2, #255	@ 0xff
 800467a:	401a      	ands	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4925      	ldr	r1, [pc, #148]	@ (8004718 <HAL_RTCEx_TamperTimeStampIRQHandler+0x108>)
 8004682:	430a      	orrs	r2, r1
 8004684:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 f857 	bl	800473c <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	4a21      	ldr	r2, [pc, #132]	@ (800471c <HAL_RTCEx_TamperTimeStampIRQHandler+0x10c>)
 8004696:	4013      	ands	r3, r2
 8004698:	d014      	beq.n	80046c4 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	01db      	lsls	r3, r3, #7
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00d      	beq.n	80046c4 <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	22ff      	movs	r2, #255	@ 0xff
 80046b0:	401a      	ands	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	491a      	ldr	r1, [pc, #104]	@ (8004720 <HAL_RTCEx_TamperTimeStampIRQHandler+0x110>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f844 	bl	800474c <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper 3 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <HAL_RTCEx_TamperTimeStampIRQHandler+0x114>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	d014      	beq.n	80046fa <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
  {
    /* Get the pending status of the Tamper 3 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	4013      	ands	r3, r2
 80046dc:	d00d      	beq.n	80046fa <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	22ff      	movs	r2, #255	@ 0xff
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	490e      	ldr	r1, [pc, #56]	@ (8004728 <HAL_RTCEx_TamperTimeStampIRQHandler+0x118>)
 80046ee:	430a      	orrs	r2, r1
 80046f0:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 f831 	bl	800475c <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2221      	movs	r2, #33	@ 0x21
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b002      	add	sp, #8
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	40010400 	.word	0x40010400
 8004710:	fffff77f 	.word	0xfffff77f
 8004714:	00010004 	.word	0x00010004
 8004718:	ffffdf7f 	.word	0xffffdf7f
 800471c:	00080004 	.word	0x00080004
 8004720:	ffffbf7f 	.word	0xffffbf7f
 8004724:	00400004 	.word	0x00400004
 8004728:	ffff7f7f 	.word	0xffff7f7f

0800472c <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8004734:	46c0      	nop			@ (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8004744:	46c0      	nop			@ (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b002      	add	sp, #8
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004778:	4b64      	ldr	r3, [pc, #400]	@ (800490c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	22fa      	movs	r2, #250	@ 0xfa
 800477e:	01d1      	lsls	r1, r2, #7
 8004780:	0018      	movs	r0, r3
 8004782:	f7fb fcd3 	bl	800012c <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	001a      	movs	r2, r3
 800478a:	0013      	movs	r3, r2
 800478c:	015b      	lsls	r3, r3, #5
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	189b      	adds	r3, r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0ad      	b.n	8004902 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2221      	movs	r2, #33	@ 0x21
 80047b2:	2102      	movs	r1, #2
 80047b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	22ca      	movs	r2, #202	@ 0xca
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2253      	movs	r2, #83	@ 0x53
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4013      	ands	r3, r2
 80047d2:	d019      	beq.n	8004808 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	22ff      	movs	r2, #255	@ 0xff
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2221      	movs	r2, #33	@ 0x21
 80047ec:	2103      	movs	r1, #3
 80047ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	2100      	movs	r1, #0
 80047f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e082      	b.n	8004902 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2204      	movs	r2, #4
 8004804:	4013      	ands	r3, r2
 8004806:	d1e5      	bne.n	80047d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	493f      	ldr	r1, [pc, #252]	@ (8004910 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004814:	400a      	ands	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	22ff      	movs	r2, #255	@ 0xff
 8004820:	401a      	ands	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	493b      	ldr	r1, [pc, #236]	@ (8004914 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800482c:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	22fa      	movs	r2, #250	@ 0xfa
 8004832:	01d1      	lsls	r1, r2, #7
 8004834:	0018      	movs	r0, r3
 8004836:	f7fb fc79 	bl	800012c <__udivsi3>
 800483a:	0003      	movs	r3, r0
 800483c:	001a      	movs	r2, r3
 800483e:	0013      	movs	r3, r2
 8004840:	015b      	lsls	r3, r3, #5
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	189b      	adds	r3, r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3b01      	subs	r3, #1
 8004850:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10d      	bne.n	8004874 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	22ff      	movs	r2, #255	@ 0xff
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2221      	movs	r2, #33	@ 0x21
 8004864:	2103      	movs	r1, #3
 8004866:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	2100      	movs	r1, #0
 800486e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e046      	b.n	8004902 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2204      	movs	r2, #4
 800487c:	4013      	ands	r3, r2
 800487e:	d0e5      	beq.n	800484c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2107      	movs	r1, #7
 800488c:	438a      	bics	r2, r1
 800488e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80048ae:	2180      	movs	r1, #128	@ 0x80
 80048b0:	0349      	lsls	r1, r1, #13
 80048b2:	430a      	orrs	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80048b6:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	4b17      	ldr	r3, [pc, #92]	@ (8004918 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80048bc:	2180      	movs	r1, #128	@ 0x80
 80048be:	0349      	lsls	r1, r1, #13
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2180      	movs	r1, #128	@ 0x80
 80048d0:	01c9      	lsls	r1, r1, #7
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2180      	movs	r1, #128	@ 0x80
 80048e2:	00c9      	lsls	r1, r1, #3
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	22ff      	movs	r2, #255	@ 0xff
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2221      	movs	r2, #33	@ 0x21
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b006      	add	sp, #24
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	20000004 	.word	0x20000004
 8004910:	fffffbff 	.word	0xfffffbff
 8004914:	fffffb7f 	.word	0xfffffb7f
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8004932:	2302      	movs	r3, #2
 8004934:	e04e      	b.n	80049d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2221      	movs	r2, #33	@ 0x21
 8004942:	2102      	movs	r1, #2
 8004944:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	22ca      	movs	r2, #202	@ 0xca
 800494c:	625a      	str	r2, [r3, #36]	@ 0x24
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2253      	movs	r2, #83	@ 0x53
 8004954:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	491e      	ldr	r1, [pc, #120]	@ (80049dc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004962:	400a      	ands	r2, r1
 8004964:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	491b      	ldr	r1, [pc, #108]	@ (80049e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8004972:	400a      	ands	r2, r1
 8004974:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004976:	f7fc fff9 	bl	800196c <HAL_GetTick>
 800497a:	0003      	movs	r3, r0
 800497c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800497e:	e016      	b.n	80049ae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004980:	f7fc fff4 	bl	800196c <HAL_GetTick>
 8004984:	0002      	movs	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	23fa      	movs	r3, #250	@ 0xfa
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	429a      	cmp	r2, r3
 8004990:	d90d      	bls.n	80049ae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	22ff      	movs	r2, #255	@ 0xff
 8004998:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2221      	movs	r2, #33	@ 0x21
 800499e:	2103      	movs	r1, #3
 80049a0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e012      	b.n	80049d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2204      	movs	r2, #4
 80049b6:	4013      	ands	r3, r2
 80049b8:	d0e2      	beq.n	8004980 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	22ff      	movs	r2, #255	@ 0xff
 80049c0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2221      	movs	r2, #33	@ 0x21
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	2100      	movs	r1, #0
 80049d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b004      	add	sp, #16
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	fffffbff 	.word	0xfffffbff
 80049e0:	ffffbfff 	.word	0xffffbfff

080049e4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80049ec:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80049ee:	2280      	movs	r2, #128	@ 0x80
 80049f0:	0352      	lsls	r2, r2, #13
 80049f2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	4013      	ands	r3, r2
 8004a00:	d014      	beq.n	8004a2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	22ff      	movs	r2, #255	@ 0xff
 8004a18:	401a      	ands	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4908      	ldr	r1, [pc, #32]	@ (8004a40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f80c 	bl	8004a44 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2221      	movs	r2, #33	@ 0x21
 8004a30:	2101      	movs	r1, #1
 8004a32:	5499      	strb	r1, [r3, r2]
}
 8004a34:	46c0      	nop			@ (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	fffffb7f 	.word	0xfffffb7f

08004a44 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004a4c:	46c0      	nop			@ (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e044      	b.n	8004af0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2278      	movs	r2, #120	@ 0x78
 8004a72:	2100      	movs	r1, #0
 8004a74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fc f9c3 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2224      	movs	r2, #36	@ 0x24
 8004a82:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	438a      	bics	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 ffb4 	bl	8005a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fd12 	bl	80054d0 <UART_SetConfig>
 8004aac:	0003      	movs	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e01c      	b.n	8004af0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	490d      	ldr	r1, [pc, #52]	@ (8004af8 <HAL_UART_Init+0xa4>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	212a      	movs	r1, #42	@ 0x2a
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f001 f843 	bl	8005b74 <UART_CheckIdleState>
 8004aee:	0003      	movs	r3, r0
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	ffffb7ff 	.word	0xffffb7ff

08004afc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	1dbb      	adds	r3, r7, #6
 8004b08:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d000      	beq.n	8004b14 <HAL_UART_Transmit_DMA+0x18>
 8004b12:	e077      	b.n	8004c04 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_UART_Transmit_DMA+0x26>
 8004b1a:	1dbb      	adds	r3, r7, #6
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e06f      	b.n	8004c06 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d109      	bne.n	8004b46 <HAL_UART_Transmit_DMA+0x4a>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d001      	beq.n	8004b46 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e05f      	b.n	8004c06 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1dba      	adds	r2, r7, #6
 8004b50:	2150      	movs	r1, #80	@ 0x50
 8004b52:	8812      	ldrh	r2, [r2, #0]
 8004b54:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1dba      	adds	r2, r7, #6
 8004b5a:	2152      	movs	r1, #82	@ 0x52
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2284      	movs	r2, #132	@ 0x84
 8004b64:	2100      	movs	r1, #0
 8004b66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2221      	movs	r2, #33	@ 0x21
 8004b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d027      	beq.n	8004bc6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a25      	ldr	r2, [pc, #148]	@ (8004c10 <HAL_UART_Transmit_DMA+0x114>)
 8004b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <HAL_UART_Transmit_DMA+0x118>)
 8004b84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	4a23      	ldr	r2, [pc, #140]	@ (8004c18 <HAL_UART_Transmit_DMA+0x11c>)
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	2200      	movs	r2, #0
 8004b94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3328      	adds	r3, #40	@ 0x28
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	1dbb      	adds	r3, r7, #6
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f7fd f886 	bl	8001cbc <HAL_DMA_Start_IT>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2284      	movs	r2, #132	@ 0x84
 8004bb8:	2110      	movs	r1, #16
 8004bba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e01f      	b.n	8004c06 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2240      	movs	r2, #64	@ 0x40
 8004bcc:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd2:	613b      	str	r3, [r7, #16]
  return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	2301      	movs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2180      	movs	r1, #128	@ 0x80
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b008      	add	sp, #32
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	08005ff5 	.word	0x08005ff5
 8004c14:	0800608d 	.word	0x0800608d
 8004c18:	08006293 	.word	0x08006293

08004c1c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c24:	f3ef 8310 	mrs	r3, PRIMASK
 8004c28:	617b      	str	r3, [r7, #20]
  return(result);
 8004c2a:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	21c0      	movs	r1, #192	@ 0xc0
 8004c46:	438a      	bics	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2280      	movs	r2, #128	@ 0x80
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b80      	cmp	r3, #128	@ 0x80
 8004c62:	d135      	bne.n	8004cd0 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c64:	f3ef 8310 	mrs	r3, PRIMASK
 8004c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2180      	movs	r1, #128	@ 0x80
 8004c86:	438a      	bics	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f383 8810 	msr	PRIMASK, r3
}
 8004c94:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7fd f86c 	bl	8001d88 <HAL_DMA_Abort>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fd f99a 	bl	8001ff2 <HAL_DMA_GetError>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d105      	bne.n	8004cd0 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2284      	movs	r2, #132	@ 0x84
 8004cc8:	2110      	movs	r1, #16
 8004cca:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e007      	b.n	8004ce0 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2252      	movs	r2, #82	@ 0x52
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b00a      	add	sp, #40	@ 0x28
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b092      	sub	sp, #72	@ 0x48
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	623b      	str	r3, [r7, #32]
  return(result);
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	494b      	ldr	r1, [pc, #300]	@ (8004e40 <HAL_UART_AbortReceive+0x158>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d118      	bne.n	8004d8e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d60:	617b      	str	r3, [r7, #20]
  return(result);
 8004d62:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f383 8810 	msr	PRIMASK, r3
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	438a      	bics	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2240      	movs	r2, #64	@ 0x40
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b40      	cmp	r3, #64	@ 0x40
 8004d9a:	d135      	bne.n	8004e08 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004da2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da6:	2301      	movs	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f383 8810 	msr	PRIMASK, r3
}
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2140      	movs	r1, #64	@ 0x40
 8004dbe:	438a      	bics	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	2200      	movs	r2, #0
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fc ffd0 	bl	8001d88 <HAL_DMA_Abort>
 8004de8:	1e03      	subs	r3, r0, #0
 8004dea:	d00d      	beq.n	8004e08 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fd f8fe 	bl	8001ff2 <HAL_DMA_GetError>
 8004df6:	0003      	movs	r3, r0
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d105      	bne.n	8004e08 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2284      	movs	r2, #132	@ 0x84
 8004e00:	2110      	movs	r1, #16
 8004e02:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e017      	b.n	8004e38 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	225a      	movs	r2, #90	@ 0x5a
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	220f      	movs	r2, #15
 8004e16:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2108      	movs	r1, #8
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2280      	movs	r2, #128	@ 0x80
 8004e2c:	2120      	movs	r1, #32
 8004e2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b012      	add	sp, #72	@ 0x48
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	fffffedf 	.word	0xfffffedf

08004e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b0ab      	sub	sp, #172	@ 0xac
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	22a4      	movs	r2, #164	@ 0xa4
 8004e54:	18b9      	adds	r1, r7, r2
 8004e56:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	20a0      	movs	r0, #160	@ 0xa0
 8004e60:	1839      	adds	r1, r7, r0
 8004e62:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	219c      	movs	r1, #156	@ 0x9c
 8004e6c:	1879      	adds	r1, r7, r1
 8004e6e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e70:	0011      	movs	r1, r2
 8004e72:	18bb      	adds	r3, r7, r2
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a99      	ldr	r2, [pc, #612]	@ (80050dc <HAL_UART_IRQHandler+0x298>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2298      	movs	r2, #152	@ 0x98
 8004e7c:	18bc      	adds	r4, r7, r2
 8004e7e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004e80:	18bb      	adds	r3, r7, r2
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d114      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2220      	movs	r2, #32
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d100      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x62>
 8004ea4:	e2be      	b.n	8005424 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	0010      	movs	r0, r2
 8004eae:	4798      	blx	r3
      }
      return;
 8004eb0:	e2b8      	b.n	8005424 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004eb2:	2398      	movs	r3, #152	@ 0x98
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d100      	bne.n	8004ebe <HAL_UART_IRQHandler+0x7a>
 8004ebc:	e114      	b.n	80050e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ebe:	239c      	movs	r3, #156	@ 0x9c
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d106      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eca:	23a0      	movs	r3, #160	@ 0xa0
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a83      	ldr	r2, [pc, #524]	@ (80050e0 <HAL_UART_IRQHandler+0x29c>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d100      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x94>
 8004ed6:	e107      	b.n	80050e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ed8:	23a4      	movs	r3, #164	@ 0xa4
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d012      	beq.n	8004f0a <HAL_UART_IRQHandler+0xc6>
 8004ee4:	23a0      	movs	r3, #160	@ 0xa0
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	@ 0x80
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2284      	movs	r2, #132	@ 0x84
 8004efe:	589b      	ldr	r3, [r3, r2]
 8004f00:	2201      	movs	r2, #1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2184      	movs	r1, #132	@ 0x84
 8004f08:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f0a:	23a4      	movs	r3, #164	@ 0xa4
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d011      	beq.n	8004f3a <HAL_UART_IRQHandler+0xf6>
 8004f16:	239c      	movs	r3, #156	@ 0x9c
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2202      	movs	r2, #2
 8004f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2284      	movs	r2, #132	@ 0x84
 8004f2e:	589b      	ldr	r3, [r3, r2]
 8004f30:	2204      	movs	r2, #4
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2184      	movs	r1, #132	@ 0x84
 8004f38:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f3a:	23a4      	movs	r3, #164	@ 0xa4
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2204      	movs	r2, #4
 8004f42:	4013      	ands	r3, r2
 8004f44:	d011      	beq.n	8004f6a <HAL_UART_IRQHandler+0x126>
 8004f46:	239c      	movs	r3, #156	@ 0x9c
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2204      	movs	r2, #4
 8004f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2284      	movs	r2, #132	@ 0x84
 8004f5e:	589b      	ldr	r3, [r3, r2]
 8004f60:	2202      	movs	r2, #2
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2184      	movs	r1, #132	@ 0x84
 8004f68:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f6a:	23a4      	movs	r3, #164	@ 0xa4
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4013      	ands	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f76:	23a0      	movs	r3, #160	@ 0xa0
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d105      	bne.n	8004f8e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f82:	239c      	movs	r3, #156	@ 0x9c
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2208      	movs	r2, #8
 8004f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2284      	movs	r2, #132	@ 0x84
 8004f9a:	589b      	ldr	r3, [r3, r2]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2184      	movs	r1, #132	@ 0x84
 8004fa4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fa6:	23a4      	movs	r3, #164	@ 0xa4
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_UART_IRQHandler+0x198>
 8004fb4:	23a0      	movs	r3, #160	@ 0xa0
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	04db      	lsls	r3, r3, #19
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d00c      	beq.n	8004fdc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2284      	movs	r2, #132	@ 0x84
 8004fd0:	589b      	ldr	r3, [r3, r2]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2184      	movs	r1, #132	@ 0x84
 8004fda:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2284      	movs	r2, #132	@ 0x84
 8004fe0:	589b      	ldr	r3, [r3, r2]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d100      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x1a4>
 8004fe6:	e21f      	b.n	8005428 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe8:	23a4      	movs	r3, #164	@ 0xa4
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff4:	23a0      	movs	r3, #160	@ 0xa0
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d008      	beq.n	8005012 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	0010      	movs	r0, r2
 8005010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2284      	movs	r2, #132	@ 0x84
 8005016:	589b      	ldr	r3, [r3, r2]
 8005018:	2194      	movs	r1, #148	@ 0x94
 800501a:	187a      	adds	r2, r7, r1
 800501c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2240      	movs	r2, #64	@ 0x40
 8005026:	4013      	ands	r3, r2
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d004      	beq.n	8005036 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800502c:	187b      	adds	r3, r7, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2228      	movs	r2, #40	@ 0x28
 8005032:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005034:	d047      	beq.n	80050c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	0018      	movs	r0, r3
 800503a:	f000 ff77 	bl	8005f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2240      	movs	r2, #64	@ 0x40
 8005046:	4013      	ands	r3, r2
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d137      	bne.n	80050bc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504c:	f3ef 8310 	mrs	r3, PRIMASK
 8005050:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005054:	2090      	movs	r0, #144	@ 0x90
 8005056:	183a      	adds	r2, r7, r0
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	2301      	movs	r3, #1
 800505c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005060:	f383 8810 	msr	PRIMASK, r3
}
 8005064:	46c0      	nop			@ (mov r8, r8)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2140      	movs	r1, #64	@ 0x40
 8005072:	438a      	bics	r2, r1
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	183b      	adds	r3, r7, r0
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800507e:	f383 8810 	msr	PRIMASK, r3
}
 8005082:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005090:	4a14      	ldr	r2, [pc, #80]	@ (80050e4 <HAL_UART_IRQHandler+0x2a0>)
 8005092:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	0018      	movs	r0, r3
 800509a:	f7fc feb5 	bl	8001e08 <HAL_DMA_Abort_IT>
 800509e:	1e03      	subs	r3, r0, #0
 80050a0:	d01a      	beq.n	80050d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ac:	0018      	movs	r0, r3
 80050ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	e012      	b.n	80050d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 f9e5 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ba:	e00d      	b.n	80050d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 f9e0 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c4:	e008      	b.n	80050d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 f9db 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2284      	movs	r2, #132	@ 0x84
 80050d2:	2100      	movs	r1, #0
 80050d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80050d6:	e1a7      	b.n	8005428 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	46c0      	nop			@ (mov r8, r8)
    return;
 80050da:	e1a5      	b.n	8005428 <HAL_UART_IRQHandler+0x5e4>
 80050dc:	0000080f 	.word	0x0000080f
 80050e0:	04000120 	.word	0x04000120
 80050e4:	08006317 	.word	0x08006317

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d000      	beq.n	80050f2 <HAL_UART_IRQHandler+0x2ae>
 80050f0:	e159      	b.n	80053a6 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050f2:	23a4      	movs	r3, #164	@ 0xa4
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2210      	movs	r2, #16
 80050fa:	4013      	ands	r3, r2
 80050fc:	d100      	bne.n	8005100 <HAL_UART_IRQHandler+0x2bc>
 80050fe:	e152      	b.n	80053a6 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005100:	23a0      	movs	r3, #160	@ 0xa0
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2210      	movs	r2, #16
 8005108:	4013      	ands	r3, r2
 800510a:	d100      	bne.n	800510e <HAL_UART_IRQHandler+0x2ca>
 800510c:	e14b      	b.n	80053a6 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2210      	movs	r2, #16
 8005114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2240      	movs	r2, #64	@ 0x40
 800511e:	4013      	ands	r3, r2
 8005120:	2b40      	cmp	r3, #64	@ 0x40
 8005122:	d000      	beq.n	8005126 <HAL_UART_IRQHandler+0x2e2>
 8005124:	e0bf      	b.n	80052a6 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	217e      	movs	r1, #126	@ 0x7e
 8005130:	187b      	adds	r3, r7, r1
 8005132:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005134:	187b      	adds	r3, r7, r1
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d100      	bne.n	800513e <HAL_UART_IRQHandler+0x2fa>
 800513c:	e095      	b.n	800526a <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2258      	movs	r2, #88	@ 0x58
 8005142:	5a9b      	ldrh	r3, [r3, r2]
 8005144:	187a      	adds	r2, r7, r1
 8005146:	8812      	ldrh	r2, [r2, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d300      	bcc.n	800514e <HAL_UART_IRQHandler+0x30a>
 800514c:	e08d      	b.n	800526a <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	187a      	adds	r2, r7, r1
 8005152:	215a      	movs	r1, #90	@ 0x5a
 8005154:	8812      	ldrh	r2, [r2, #0]
 8005156:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2220      	movs	r2, #32
 8005162:	4013      	ands	r3, r2
 8005164:	d16f      	bne.n	8005246 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005166:	f3ef 8310 	mrs	r3, PRIMASK
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005170:	2301      	movs	r3, #1
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	49ad      	ldr	r1, [pc, #692]	@ (800543c <HAL_UART_IRQHandler+0x5f8>)
 8005188:	400a      	ands	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800518e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005198:	f3ef 8310 	mrs	r3, PRIMASK
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80051a2:	2301      	movs	r3, #1
 80051a4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a8:	f383 8810 	msr	PRIMASK, r3
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2101      	movs	r1, #1
 80051ba:	438a      	bics	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ca:	f3ef 8310 	mrs	r3, PRIMASK
 80051ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80051d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d4:	2301      	movs	r3, #1
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051da:	f383 8810 	msr	PRIMASK, r3
}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2140      	movs	r1, #64	@ 0x40
 80051ec:	438a      	bics	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051f2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2280      	movs	r2, #128	@ 0x80
 8005200:	2120      	movs	r1, #32
 8005202:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520a:	f3ef 8310 	mrs	r3, PRIMASK
 800520e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005214:	2301      	movs	r3, #1
 8005216:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521a:	f383 8810 	msr	PRIMASK, r3
}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2110      	movs	r1, #16
 800522c:	438a      	bics	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005232:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005240:	0018      	movs	r0, r3
 8005242:	f7fc fda1 	bl	8001d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2258      	movs	r2, #88	@ 0x58
 8005250:	5a9a      	ldrh	r2, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	215a      	movs	r1, #90	@ 0x5a
 8005256:	5a5b      	ldrh	r3, [r3, r1]
 8005258:	b29b      	uxth	r3, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0011      	movs	r1, r2
 8005262:	0018      	movs	r0, r3
 8005264:	f7fb fa3a 	bl	80006dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005268:	e0e0      	b.n	800542c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2258      	movs	r2, #88	@ 0x58
 800526e:	5a9b      	ldrh	r3, [r3, r2]
 8005270:	227e      	movs	r2, #126	@ 0x7e
 8005272:	18ba      	adds	r2, r7, r2
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d000      	beq.n	800527c <HAL_UART_IRQHandler+0x438>
 800527a:	e0d7      	b.n	800542c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2220      	movs	r2, #32
 8005286:	4013      	ands	r3, r2
 8005288:	2b20      	cmp	r3, #32
 800528a:	d000      	beq.n	800528e <HAL_UART_IRQHandler+0x44a>
 800528c:	e0ce      	b.n	800542c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2258      	movs	r2, #88	@ 0x58
 8005298:	5a9a      	ldrh	r2, [r3, r2]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0011      	movs	r1, r2
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fb fa1c 	bl	80006dc <HAL_UARTEx_RxEventCallback>
      return;
 80052a4:	e0c2      	b.n	800542c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2258      	movs	r2, #88	@ 0x58
 80052aa:	5a99      	ldrh	r1, [r3, r2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	225a      	movs	r2, #90	@ 0x5a
 80052b0:	5a9b      	ldrh	r3, [r3, r2]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	208e      	movs	r0, #142	@ 0x8e
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	1a8a      	subs	r2, r1, r2
 80052ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	225a      	movs	r2, #90	@ 0x5a
 80052c0:	5a9b      	ldrh	r3, [r3, r2]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d100      	bne.n	80052ca <HAL_UART_IRQHandler+0x486>
 80052c8:	e0b2      	b.n	8005430 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 80052ca:	183b      	adds	r3, r7, r0
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d100      	bne.n	80052d4 <HAL_UART_IRQHandler+0x490>
 80052d2:	e0ad      	b.n	8005430 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	2488      	movs	r4, #136	@ 0x88
 80052de:	193a      	adds	r2, r7, r4
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	2301      	movs	r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4951      	ldr	r1, [pc, #324]	@ (8005440 <HAL_UART_IRQHandler+0x5fc>)
 80052fa:	400a      	ands	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530c:	f3ef 8310 	mrs	r3, PRIMASK
 8005310:	61bb      	str	r3, [r7, #24]
  return(result);
 8005312:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	2484      	movs	r4, #132	@ 0x84
 8005316:	193a      	adds	r2, r7, r4
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	2301      	movs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	438a      	bics	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	193b      	adds	r3, r7, r4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	@ 0x80
 8005348:	2120      	movs	r1, #32
 800534a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005360:	2480      	movs	r4, #128	@ 0x80
 8005362:	193a      	adds	r2, r7, r4
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	2301      	movs	r3, #1
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2110      	movs	r1, #16
 800537e:	438a      	bics	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	193b      	adds	r3, r7, r4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005396:	183b      	adds	r3, r7, r0
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0011      	movs	r1, r2
 800539e:	0018      	movs	r0, r3
 80053a0:	f7fb f99c 	bl	80006dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a4:	e044      	b.n	8005430 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053a6:	23a4      	movs	r3, #164	@ 0xa4
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	035b      	lsls	r3, r3, #13
 80053b0:	4013      	ands	r3, r2
 80053b2:	d010      	beq.n	80053d6 <HAL_UART_IRQHandler+0x592>
 80053b4:	239c      	movs	r3, #156	@ 0x9c
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	03db      	lsls	r3, r3, #15
 80053be:	4013      	ands	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2280      	movs	r2, #128	@ 0x80
 80053c8:	0352      	lsls	r2, r2, #13
 80053ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 ffdf 	bl	8006392 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d4:	e02f      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053d6:	23a4      	movs	r3, #164	@ 0xa4
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2280      	movs	r2, #128	@ 0x80
 80053de:	4013      	ands	r3, r2
 80053e0:	d00f      	beq.n	8005402 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053e2:	23a0      	movs	r3, #160	@ 0xa0
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2280      	movs	r2, #128	@ 0x80
 80053ea:	4013      	ands	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01e      	beq.n	8005434 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	0010      	movs	r0, r2
 80053fe:	4798      	blx	r3
    }
    return;
 8005400:	e018      	b.n	8005434 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005402:	23a4      	movs	r3, #164	@ 0xa4
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2240      	movs	r2, #64	@ 0x40
 800540a:	4013      	ands	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x5f2>
 800540e:	23a0      	movs	r3, #160	@ 0xa0
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2240      	movs	r2, #64	@ 0x40
 8005416:	4013      	ands	r3, r2
 8005418:	d00d      	beq.n	8005436 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0018      	movs	r0, r3
 800541e:	f000 ff8d 	bl	800633c <UART_EndTransmit_IT>
    return;
 8005422:	e008      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005424:	46c0      	nop			@ (mov r8, r8)
 8005426:	e006      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005428:	46c0      	nop			@ (mov r8, r8)
 800542a:	e004      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
      return;
 800542c:	46c0      	nop			@ (mov r8, r8)
 800542e:	e002      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
      return;
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	e000      	b.n	8005436 <HAL_UART_IRQHandler+0x5f2>
    return;
 8005434:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005436:	46bd      	mov	sp, r7
 8005438:	b02b      	add	sp, #172	@ 0xac
 800543a:	bd90      	pop	{r4, r7, pc}
 800543c:	fffffeff 	.word	0xfffffeff
 8005440:	fffffedf 	.word	0xfffffedf

08005444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800546c:	46c0      	nop			@ (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800547c:	46c0      	nop			@ (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b002      	add	sp, #8
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2280      	movs	r2, #128	@ 0x80
 80054a6:	589b      	ldr	r3, [r3, r2]
 80054a8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b004      	add	sp, #16
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2284      	movs	r2, #132	@ 0x84
 80054c4:	589b      	ldr	r3, [r3, r2]
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b002      	add	sp, #8
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b08e      	sub	sp, #56	@ 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d8:	231a      	movs	r3, #26
 80054da:	2218      	movs	r2, #24
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4ac3      	ldr	r2, [pc, #780]	@ (8005810 <UART_SetConfig+0x340>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4abe      	ldr	r2, [pc, #760]	@ (8005814 <UART_SetConfig+0x344>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4ab8      	ldr	r2, [pc, #736]	@ (8005818 <UART_SetConfig+0x348>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005540:	4313      	orrs	r3, r2
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4ab4      	ldr	r2, [pc, #720]	@ (800581c <UART_SetConfig+0x34c>)
 800554c:	4013      	ands	r3, r2
 800554e:	0019      	movs	r1, r3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4ab0      	ldr	r2, [pc, #704]	@ (8005820 <UART_SetConfig+0x350>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d131      	bne.n	80055c8 <UART_SetConfig+0xf8>
 8005564:	4baf      	ldr	r3, [pc, #700]	@ (8005824 <UART_SetConfig+0x354>)
 8005566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005568:	2203      	movs	r2, #3
 800556a:	4013      	ands	r3, r2
 800556c:	2b03      	cmp	r3, #3
 800556e:	d01d      	beq.n	80055ac <UART_SetConfig+0xdc>
 8005570:	d823      	bhi.n	80055ba <UART_SetConfig+0xea>
 8005572:	2b02      	cmp	r3, #2
 8005574:	d00c      	beq.n	8005590 <UART_SetConfig+0xc0>
 8005576:	d820      	bhi.n	80055ba <UART_SetConfig+0xea>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <UART_SetConfig+0xb2>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00e      	beq.n	800559e <UART_SetConfig+0xce>
 8005580:	e01b      	b.n	80055ba <UART_SetConfig+0xea>
 8005582:	231b      	movs	r3, #27
 8005584:	2218      	movs	r2, #24
 8005586:	189b      	adds	r3, r3, r2
 8005588:	19db      	adds	r3, r3, r7
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e0b4      	b.n	80056fa <UART_SetConfig+0x22a>
 8005590:	231b      	movs	r3, #27
 8005592:	2218      	movs	r2, #24
 8005594:	189b      	adds	r3, r3, r2
 8005596:	19db      	adds	r3, r3, r7
 8005598:	2202      	movs	r2, #2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e0ad      	b.n	80056fa <UART_SetConfig+0x22a>
 800559e:	231b      	movs	r3, #27
 80055a0:	2218      	movs	r2, #24
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	19db      	adds	r3, r3, r7
 80055a6:	2204      	movs	r2, #4
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e0a6      	b.n	80056fa <UART_SetConfig+0x22a>
 80055ac:	231b      	movs	r3, #27
 80055ae:	2218      	movs	r2, #24
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	19db      	adds	r3, r3, r7
 80055b4:	2208      	movs	r2, #8
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e09f      	b.n	80056fa <UART_SetConfig+0x22a>
 80055ba:	231b      	movs	r3, #27
 80055bc:	2218      	movs	r2, #24
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	19db      	adds	r3, r3, r7
 80055c2:	2210      	movs	r2, #16
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e098      	b.n	80056fa <UART_SetConfig+0x22a>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a96      	ldr	r2, [pc, #600]	@ (8005828 <UART_SetConfig+0x358>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d131      	bne.n	8005636 <UART_SetConfig+0x166>
 80055d2:	4b94      	ldr	r3, [pc, #592]	@ (8005824 <UART_SetConfig+0x354>)
 80055d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d6:	220c      	movs	r2, #12
 80055d8:	4013      	ands	r3, r2
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d01d      	beq.n	800561a <UART_SetConfig+0x14a>
 80055de:	d823      	bhi.n	8005628 <UART_SetConfig+0x158>
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d00c      	beq.n	80055fe <UART_SetConfig+0x12e>
 80055e4:	d820      	bhi.n	8005628 <UART_SetConfig+0x158>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <UART_SetConfig+0x120>
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d00e      	beq.n	800560c <UART_SetConfig+0x13c>
 80055ee:	e01b      	b.n	8005628 <UART_SetConfig+0x158>
 80055f0:	231b      	movs	r3, #27
 80055f2:	2218      	movs	r2, #24
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	19db      	adds	r3, r3, r7
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e07d      	b.n	80056fa <UART_SetConfig+0x22a>
 80055fe:	231b      	movs	r3, #27
 8005600:	2218      	movs	r2, #24
 8005602:	189b      	adds	r3, r3, r2
 8005604:	19db      	adds	r3, r3, r7
 8005606:	2202      	movs	r2, #2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e076      	b.n	80056fa <UART_SetConfig+0x22a>
 800560c:	231b      	movs	r3, #27
 800560e:	2218      	movs	r2, #24
 8005610:	189b      	adds	r3, r3, r2
 8005612:	19db      	adds	r3, r3, r7
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e06f      	b.n	80056fa <UART_SetConfig+0x22a>
 800561a:	231b      	movs	r3, #27
 800561c:	2218      	movs	r2, #24
 800561e:	189b      	adds	r3, r3, r2
 8005620:	19db      	adds	r3, r3, r7
 8005622:	2208      	movs	r2, #8
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e068      	b.n	80056fa <UART_SetConfig+0x22a>
 8005628:	231b      	movs	r3, #27
 800562a:	2218      	movs	r2, #24
 800562c:	189b      	adds	r3, r3, r2
 800562e:	19db      	adds	r3, r3, r7
 8005630:	2210      	movs	r2, #16
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e061      	b.n	80056fa <UART_SetConfig+0x22a>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7c      	ldr	r2, [pc, #496]	@ (800582c <UART_SetConfig+0x35c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d106      	bne.n	800564e <UART_SetConfig+0x17e>
 8005640:	231b      	movs	r3, #27
 8005642:	2218      	movs	r2, #24
 8005644:	189b      	adds	r3, r3, r2
 8005646:	19db      	adds	r3, r3, r7
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e055      	b.n	80056fa <UART_SetConfig+0x22a>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a77      	ldr	r2, [pc, #476]	@ (8005830 <UART_SetConfig+0x360>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d106      	bne.n	8005666 <UART_SetConfig+0x196>
 8005658:	231b      	movs	r3, #27
 800565a:	2218      	movs	r2, #24
 800565c:	189b      	adds	r3, r3, r2
 800565e:	19db      	adds	r3, r3, r7
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e049      	b.n	80056fa <UART_SetConfig+0x22a>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6b      	ldr	r2, [pc, #428]	@ (8005818 <UART_SetConfig+0x348>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d13e      	bne.n	80056ee <UART_SetConfig+0x21e>
 8005670:	4b6c      	ldr	r3, [pc, #432]	@ (8005824 <UART_SetConfig+0x354>)
 8005672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005674:	23c0      	movs	r3, #192	@ 0xc0
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4013      	ands	r3, r2
 800567a:	22c0      	movs	r2, #192	@ 0xc0
 800567c:	0112      	lsls	r2, r2, #4
 800567e:	4293      	cmp	r3, r2
 8005680:	d027      	beq.n	80056d2 <UART_SetConfig+0x202>
 8005682:	22c0      	movs	r2, #192	@ 0xc0
 8005684:	0112      	lsls	r2, r2, #4
 8005686:	4293      	cmp	r3, r2
 8005688:	d82a      	bhi.n	80056e0 <UART_SetConfig+0x210>
 800568a:	2280      	movs	r2, #128	@ 0x80
 800568c:	0112      	lsls	r2, r2, #4
 800568e:	4293      	cmp	r3, r2
 8005690:	d011      	beq.n	80056b6 <UART_SetConfig+0x1e6>
 8005692:	2280      	movs	r2, #128	@ 0x80
 8005694:	0112      	lsls	r2, r2, #4
 8005696:	4293      	cmp	r3, r2
 8005698:	d822      	bhi.n	80056e0 <UART_SetConfig+0x210>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <UART_SetConfig+0x1d8>
 800569e:	2280      	movs	r2, #128	@ 0x80
 80056a0:	00d2      	lsls	r2, r2, #3
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <UART_SetConfig+0x1f4>
 80056a6:	e01b      	b.n	80056e0 <UART_SetConfig+0x210>
 80056a8:	231b      	movs	r3, #27
 80056aa:	2218      	movs	r2, #24
 80056ac:	189b      	adds	r3, r3, r2
 80056ae:	19db      	adds	r3, r3, r7
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e021      	b.n	80056fa <UART_SetConfig+0x22a>
 80056b6:	231b      	movs	r3, #27
 80056b8:	2218      	movs	r2, #24
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	19db      	adds	r3, r3, r7
 80056be:	2202      	movs	r2, #2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e01a      	b.n	80056fa <UART_SetConfig+0x22a>
 80056c4:	231b      	movs	r3, #27
 80056c6:	2218      	movs	r2, #24
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	19db      	adds	r3, r3, r7
 80056cc:	2204      	movs	r2, #4
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e013      	b.n	80056fa <UART_SetConfig+0x22a>
 80056d2:	231b      	movs	r3, #27
 80056d4:	2218      	movs	r2, #24
 80056d6:	189b      	adds	r3, r3, r2
 80056d8:	19db      	adds	r3, r3, r7
 80056da:	2208      	movs	r2, #8
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e00c      	b.n	80056fa <UART_SetConfig+0x22a>
 80056e0:	231b      	movs	r3, #27
 80056e2:	2218      	movs	r2, #24
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	19db      	adds	r3, r3, r7
 80056e8:	2210      	movs	r2, #16
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e005      	b.n	80056fa <UART_SetConfig+0x22a>
 80056ee:	231b      	movs	r3, #27
 80056f0:	2218      	movs	r2, #24
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	19db      	adds	r3, r3, r7
 80056f6:	2210      	movs	r2, #16
 80056f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a46      	ldr	r2, [pc, #280]	@ (8005818 <UART_SetConfig+0x348>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d000      	beq.n	8005706 <UART_SetConfig+0x236>
 8005704:	e09a      	b.n	800583c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005706:	231b      	movs	r3, #27
 8005708:	2218      	movs	r2, #24
 800570a:	189b      	adds	r3, r3, r2
 800570c:	19db      	adds	r3, r3, r7
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d01d      	beq.n	8005750 <UART_SetConfig+0x280>
 8005714:	dc20      	bgt.n	8005758 <UART_SetConfig+0x288>
 8005716:	2b04      	cmp	r3, #4
 8005718:	d015      	beq.n	8005746 <UART_SetConfig+0x276>
 800571a:	dc1d      	bgt.n	8005758 <UART_SetConfig+0x288>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <UART_SetConfig+0x256>
 8005720:	2b02      	cmp	r3, #2
 8005722:	d005      	beq.n	8005730 <UART_SetConfig+0x260>
 8005724:	e018      	b.n	8005758 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005726:	f7fe fb81 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 800572a:	0003      	movs	r3, r0
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800572e:	e01c      	b.n	800576a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005730:	4b3c      	ldr	r3, [pc, #240]	@ (8005824 <UART_SetConfig+0x354>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	4013      	ands	r3, r2
 8005738:	d002      	beq.n	8005740 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800573a:	4b3e      	ldr	r3, [pc, #248]	@ (8005834 <UART_SetConfig+0x364>)
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800573e:	e014      	b.n	800576a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005740:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <UART_SetConfig+0x368>)
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005744:	e011      	b.n	800576a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fe fae1 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 800574a:	0003      	movs	r3, r0
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800574e:	e00c      	b.n	800576a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005756:	e008      	b.n	800576a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800575c:	231a      	movs	r3, #26
 800575e:	2218      	movs	r2, #24
 8005760:	189b      	adds	r3, r3, r2
 8005762:	19db      	adds	r3, r3, r7
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
        break;
 8005768:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800576a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d100      	bne.n	8005772 <UART_SetConfig+0x2a2>
 8005770:	e133      	b.n	80059da <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	0013      	movs	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	189b      	adds	r3, r3, r2
 800577c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577e:	429a      	cmp	r2, r3
 8005780:	d305      	bcc.n	800578e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578a:	429a      	cmp	r2, r3
 800578c:	d906      	bls.n	800579c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800578e:	231a      	movs	r3, #26
 8005790:	2218      	movs	r2, #24
 8005792:	189b      	adds	r3, r3, r2
 8005794:	19db      	adds	r3, r3, r7
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e11e      	b.n	80059da <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	6939      	ldr	r1, [r7, #16]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	000b      	movs	r3, r1
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	0010      	movs	r0, r2
 80057ae:	0205      	lsls	r5, r0, #8
 80057b0:	431d      	orrs	r5, r3
 80057b2:	000b      	movs	r3, r1
 80057b4:	021c      	lsls	r4, r3, #8
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68b8      	ldr	r0, [r7, #8]
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	1900      	adds	r0, r0, r4
 80057c8:	4169      	adcs	r1, r5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f7fa fd34 	bl	8000244 <__aeabi_uldivmod>
 80057dc:	0002      	movs	r2, r0
 80057de:	000b      	movs	r3, r1
 80057e0:	0013      	movs	r3, r2
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e6:	23c0      	movs	r3, #192	@ 0xc0
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d309      	bcc.n	8005802 <UART_SetConfig+0x332>
 80057ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	035b      	lsls	r3, r3, #13
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d204      	bcs.n	8005802 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	e0eb      	b.n	80059da <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005802:	231a      	movs	r3, #26
 8005804:	2218      	movs	r2, #24
 8005806:	189b      	adds	r3, r3, r2
 8005808:	19db      	adds	r3, r3, r7
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e0e4      	b.n	80059da <UART_SetConfig+0x50a>
 8005810:	efff69f3 	.word	0xefff69f3
 8005814:	ffffcfff 	.word	0xffffcfff
 8005818:	40004800 	.word	0x40004800
 800581c:	fffff4ff 	.word	0xfffff4ff
 8005820:	40013800 	.word	0x40013800
 8005824:	40021000 	.word	0x40021000
 8005828:	40004400 	.word	0x40004400
 800582c:	40004c00 	.word	0x40004c00
 8005830:	40005000 	.word	0x40005000
 8005834:	003d0900 	.word	0x003d0900
 8005838:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	429a      	cmp	r2, r3
 8005846:	d000      	beq.n	800584a <UART_SetConfig+0x37a>
 8005848:	e070      	b.n	800592c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800584a:	231b      	movs	r3, #27
 800584c:	2218      	movs	r2, #24
 800584e:	189b      	adds	r3, r3, r2
 8005850:	19db      	adds	r3, r3, r7
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d822      	bhi.n	800589e <UART_SetConfig+0x3ce>
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	4b67      	ldr	r3, [pc, #412]	@ (80059f8 <UART_SetConfig+0x528>)
 800585c:	18d3      	adds	r3, r2, r3
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7fe fae3 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8005866:	0003      	movs	r3, r0
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800586a:	e021      	b.n	80058b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800586c:	f7fe faf4 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005870:	0003      	movs	r3, r0
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005874:	e01c      	b.n	80058b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005876:	4b61      	ldr	r3, [pc, #388]	@ (80059fc <UART_SetConfig+0x52c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	4013      	ands	r3, r2
 800587e:	d002      	beq.n	8005886 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005880:	4b5f      	ldr	r3, [pc, #380]	@ (8005a00 <UART_SetConfig+0x530>)
 8005882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005884:	e014      	b.n	80058b0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005886:	4b5f      	ldr	r3, [pc, #380]	@ (8005a04 <UART_SetConfig+0x534>)
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800588a:	e011      	b.n	80058b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588c:	f7fe fa3e 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8005890:	0003      	movs	r3, r0
 8005892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005894:	e00c      	b.n	80058b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800589c:	e008      	b.n	80058b0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80058a2:	231a      	movs	r3, #26
 80058a4:	2218      	movs	r2, #24
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	19db      	adds	r3, r3, r7
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
        break;
 80058ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d100      	bne.n	80058b8 <UART_SetConfig+0x3e8>
 80058b6:	e090      	b.n	80059da <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	005a      	lsls	r2, r3, #1
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	18d2      	adds	r2, r2, r3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	0019      	movs	r1, r3
 80058ca:	0010      	movs	r0, r2
 80058cc:	f7fa fc2e 	bl	800012c <__udivsi3>
 80058d0:	0003      	movs	r3, r0
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d921      	bls.n	800591e <UART_SetConfig+0x44e>
 80058da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	025b      	lsls	r3, r3, #9
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d21c      	bcs.n	800591e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	200e      	movs	r0, #14
 80058ea:	2418      	movs	r4, #24
 80058ec:	1903      	adds	r3, r0, r4
 80058ee:	19db      	adds	r3, r3, r7
 80058f0:	210f      	movs	r1, #15
 80058f2:	438a      	bics	r2, r1
 80058f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2207      	movs	r2, #7
 80058fe:	4013      	ands	r3, r2
 8005900:	b299      	uxth	r1, r3
 8005902:	1903      	adds	r3, r0, r4
 8005904:	19db      	adds	r3, r3, r7
 8005906:	1902      	adds	r2, r0, r4
 8005908:	19d2      	adds	r2, r2, r7
 800590a:	8812      	ldrh	r2, [r2, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	1902      	adds	r2, r0, r4
 8005916:	19d2      	adds	r2, r2, r7
 8005918:	8812      	ldrh	r2, [r2, #0]
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	e05d      	b.n	80059da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800591e:	231a      	movs	r3, #26
 8005920:	2218      	movs	r2, #24
 8005922:	189b      	adds	r3, r3, r2
 8005924:	19db      	adds	r3, r3, r7
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e056      	b.n	80059da <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592c:	231b      	movs	r3, #27
 800592e:	2218      	movs	r2, #24
 8005930:	189b      	adds	r3, r3, r2
 8005932:	19db      	adds	r3, r3, r7
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d822      	bhi.n	8005980 <UART_SetConfig+0x4b0>
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	4b32      	ldr	r3, [pc, #200]	@ (8005a08 <UART_SetConfig+0x538>)
 800593e:	18d3      	adds	r3, r2, r3
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe fa72 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8005948:	0003      	movs	r3, r0
 800594a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800594c:	e021      	b.n	8005992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594e:	f7fe fa83 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005952:	0003      	movs	r3, r0
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005956:	e01c      	b.n	8005992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005958:	4b28      	ldr	r3, [pc, #160]	@ (80059fc <UART_SetConfig+0x52c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2210      	movs	r2, #16
 800595e:	4013      	ands	r3, r2
 8005960:	d002      	beq.n	8005968 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005962:	4b27      	ldr	r3, [pc, #156]	@ (8005a00 <UART_SetConfig+0x530>)
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005966:	e014      	b.n	8005992 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005968:	4b26      	ldr	r3, [pc, #152]	@ (8005a04 <UART_SetConfig+0x534>)
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800596c:	e011      	b.n	8005992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596e:	f7fe f9cd 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8005972:	0003      	movs	r3, r0
 8005974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005976:	e00c      	b.n	8005992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800597e:	e008      	b.n	8005992 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005984:	231a      	movs	r3, #26
 8005986:	2218      	movs	r2, #24
 8005988:	189b      	adds	r3, r3, r2
 800598a:	19db      	adds	r3, r3, r7
 800598c:	2201      	movs	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
        break;
 8005990:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d020      	beq.n	80059da <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085a      	lsrs	r2, r3, #1
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	18d2      	adds	r2, r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	0019      	movs	r1, r3
 80059a8:	0010      	movs	r0, r2
 80059aa:	f7fa fbbf 	bl	800012c <__udivsi3>
 80059ae:	0003      	movs	r3, r0
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	2b0f      	cmp	r3, #15
 80059b6:	d90a      	bls.n	80059ce <UART_SetConfig+0x4fe>
 80059b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ba:	2380      	movs	r3, #128	@ 0x80
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	429a      	cmp	r2, r3
 80059c0:	d205      	bcs.n	80059ce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
 80059cc:	e005      	b.n	80059da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80059ce:	231a      	movs	r3, #26
 80059d0:	2218      	movs	r2, #24
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	19db      	adds	r3, r3, r7
 80059d6:	2201      	movs	r2, #1
 80059d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2200      	movs	r2, #0
 80059de:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2200      	movs	r2, #0
 80059e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059e6:	231a      	movs	r3, #26
 80059e8:	2218      	movs	r2, #24
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	19db      	adds	r3, r3, r7
 80059ee:	781b      	ldrb	r3, [r3, #0]
}
 80059f0:	0018      	movs	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b00e      	add	sp, #56	@ 0x38
 80059f6:	bdb0      	pop	{r4, r5, r7, pc}
 80059f8:	08008204 	.word	0x08008204
 80059fc:	40021000 	.word	0x40021000
 8005a00:	003d0900 	.word	0x003d0900
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	08008228 	.word	0x08008228

08005a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	2208      	movs	r2, #8
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a4a      	ldr	r2, [pc, #296]	@ (8005b50 <UART_AdvFeatureConfig+0x144>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d00b      	beq.n	8005a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4a43      	ldr	r2, [pc, #268]	@ (8005b54 <UART_AdvFeatureConfig+0x148>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d00b      	beq.n	8005a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a3b      	ldr	r2, [pc, #236]	@ (8005b58 <UART_AdvFeatureConfig+0x14c>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	2204      	movs	r2, #4
 8005a80:	4013      	ands	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4a34      	ldr	r2, [pc, #208]	@ (8005b5c <UART_AdvFeatureConfig+0x150>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	0019      	movs	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	@ (8005b60 <UART_AdvFeatureConfig+0x154>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4a25      	ldr	r2, [pc, #148]	@ (8005b64 <UART_AdvFeatureConfig+0x158>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	2240      	movs	r2, #64	@ 0x40
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d01d      	beq.n	8005b26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b68 <UART_AdvFeatureConfig+0x15c>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	0019      	movs	r1, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b06:	2380      	movs	r3, #128	@ 0x80
 8005b08:	035b      	lsls	r3, r3, #13
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d10b      	bne.n	8005b26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <UART_AdvFeatureConfig+0x160>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	2280      	movs	r2, #128	@ 0x80
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4a0e      	ldr	r2, [pc, #56]	@ (8005b70 <UART_AdvFeatureConfig+0x164>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	0019      	movs	r1, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }
}
 8005b48:	46c0      	nop			@ (mov r8, r8)
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	ffff7fff 	.word	0xffff7fff
 8005b54:	fffdffff 	.word	0xfffdffff
 8005b58:	fffeffff 	.word	0xfffeffff
 8005b5c:	fffbffff 	.word	0xfffbffff
 8005b60:	ffffefff 	.word	0xffffefff
 8005b64:	ffffdfff 	.word	0xffffdfff
 8005b68:	ffefffff 	.word	0xffefffff
 8005b6c:	ff9fffff 	.word	0xff9fffff
 8005b70:	fff7ffff 	.word	0xfff7ffff

08005b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b092      	sub	sp, #72	@ 0x48
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2284      	movs	r2, #132	@ 0x84
 8005b80:	2100      	movs	r1, #0
 8005b82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b84:	f7fb fef2 	bl	800196c <HAL_GetTick>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2208      	movs	r2, #8
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d12c      	bne.n	8005bf4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9c:	2280      	movs	r2, #128	@ 0x80
 8005b9e:	0391      	lsls	r1, r2, #14
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4a46      	ldr	r2, [pc, #280]	@ (8005cbc <UART_CheckIdleState+0x148>)
 8005ba4:	9200      	str	r2, [sp, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f000 f88c 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d021      	beq.n	8005bf4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bba:	2301      	movs	r3, #1
 8005bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2180      	movs	r1, #128	@ 0x80
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2278      	movs	r2, #120	@ 0x78
 8005bec:	2100      	movs	r1, #0
 8005bee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e05f      	b.n	8005cb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d146      	bne.n	8005c90 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	2280      	movs	r2, #128	@ 0x80
 8005c06:	03d1      	lsls	r1, r2, #15
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <UART_CheckIdleState+0x148>)
 8005c0c:	9200      	str	r2, [sp, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f000 f858 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005c14:	1e03      	subs	r3, r0, #0
 8005c16:	d03b      	beq.n	8005c90 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c18:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c22:	2301      	movs	r3, #1
 8005c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4921      	ldr	r1, [pc, #132]	@ (8005cc0 <UART_CheckIdleState+0x14c>)
 8005c3a:	400a      	ands	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c50:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c54:	2301      	movs	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	438a      	bics	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f383 8810 	msr	PRIMASK, r3
}
 8005c7a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2280      	movs	r2, #128	@ 0x80
 8005c80:	2120      	movs	r1, #32
 8005c82:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2278      	movs	r2, #120	@ 0x78
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e011      	b.n	8005cb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2280      	movs	r2, #128	@ 0x80
 8005c9a:	2120      	movs	r1, #32
 8005c9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2278      	movs	r2, #120	@ 0x78
 8005cae:	2100      	movs	r1, #0
 8005cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b010      	add	sp, #64	@ 0x40
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	01ffffff 	.word	0x01ffffff
 8005cc0:	fffffedf 	.word	0xfffffedf

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e051      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	d04e      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cdc:	f7fb fe46 	bl	800196c <HAL_GetTick>
 8005ce0:	0002      	movs	r2, r0
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e051      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d03b      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b80      	cmp	r3, #128	@ 0x80
 8005d06:	d038      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d035      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2208      	movs	r2, #8
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d111      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 f900 	bl	8005f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2284      	movs	r2, #132	@ 0x84
 8005d30:	2108      	movs	r1, #8
 8005d32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2278      	movs	r2, #120	@ 0x78
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e02c      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	2380      	movs	r3, #128	@ 0x80
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d112      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2280      	movs	r2, #128	@ 0x80
 8005d5a:	0112      	lsls	r2, r2, #4
 8005d5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 f8e3 	bl	8005f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2284      	movs	r2, #132	@ 0x84
 8005d6a:	2120      	movs	r1, #32
 8005d6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2278      	movs	r2, #120	@ 0x78
 8005d72:	2100      	movs	r1, #0
 8005d74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e00f      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	425a      	negs	r2, r3
 8005d8a:	4153      	adcs	r3, r2
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	001a      	movs	r2, r3
 8005d90:	1dfb      	adds	r3, r7, #7
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d09e      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b090      	sub	sp, #64	@ 0x40
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	1dbb      	adds	r3, r7, #6
 8005db0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1dba      	adds	r2, r7, #6
 8005dbc:	2158      	movs	r1, #88	@ 0x58
 8005dbe:	8812      	ldrh	r2, [r2, #0]
 8005dc0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2284      	movs	r2, #132	@ 0x84
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2280      	movs	r2, #128	@ 0x80
 8005dce:	2122      	movs	r1, #34	@ 0x22
 8005dd0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d028      	beq.n	8005e2c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	4a3e      	ldr	r2, [pc, #248]	@ (8005ed8 <UART_Start_Receive_DMA+0x134>)
 8005de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de6:	4a3d      	ldr	r2, [pc, #244]	@ (8005edc <UART_Start_Receive_DMA+0x138>)
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dee:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee0 <UART_Start_Receive_DMA+0x13c>)
 8005df0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3324      	adds	r3, #36	@ 0x24
 8005e04:	0019      	movs	r1, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	1dbb      	adds	r3, r7, #6
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	f7fb ff54 	bl	8001cbc <HAL_DMA_Start_IT>
 8005e14:	1e03      	subs	r3, r0, #0
 8005e16:	d009      	beq.n	8005e2c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2284      	movs	r2, #132	@ 0x84
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2280      	movs	r2, #128	@ 0x80
 8005e24:	2120      	movs	r1, #32
 8005e26:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e050      	b.n	8005ece <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d019      	beq.n	8005e68 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e34:	f3ef 8310 	mrs	r3, PRIMASK
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3e:	2301      	movs	r3, #1
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	f383 8810 	msr	PRIMASK, r3
}
 8005e48:	46c0      	nop			@ (mov r8, r8)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2180      	movs	r1, #128	@ 0x80
 8005e56:	0049      	lsls	r1, r1, #1
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	f383 8810 	msr	PRIMASK, r3
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e68:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e6e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	46c0      	nop			@ (mov r8, r8)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ea0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f383 8810 	msr	PRIMASK, r3
}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2140      	movs	r1, #64	@ 0x40
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	f383 8810 	msr	PRIMASK, r3
}
 8005eca:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b010      	add	sp, #64	@ 0x40
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	080060ad 	.word	0x080060ad
 8005edc:	08006215 	.word	0x08006215
 8005ee0:	08006293 	.word	0x08006293

08005ee4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f383 8810 	msr	PRIMASK, r3
}
 8005f00:	46c0      	nop			@ (mov r8, r8)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	21c0      	movs	r1, #192	@ 0xc0
 8005f0e:	438a      	bics	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f383 8810 	msr	PRIMASK, r3
}
 8005f1c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b006      	add	sp, #24
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08e      	sub	sp, #56	@ 0x38
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f34:	f3ef 8310 	mrs	r3, PRIMASK
 8005f38:	617b      	str	r3, [r7, #20]
  return(result);
 8005f3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f383 8810 	msr	PRIMASK, r3
}
 8005f48:	46c0      	nop			@ (mov r8, r8)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4926      	ldr	r1, [pc, #152]	@ (8005ff0 <UART_EndRxTransfer+0xc4>)
 8005f56:	400a      	ands	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f383 8810 	msr	PRIMASK, r3
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f66:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f70:	2301      	movs	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	f383 8810 	msr	PRIMASK, r3
}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2101      	movs	r1, #1
 8005f88:	438a      	bics	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	f383 8810 	msr	PRIMASK, r3
}
 8005f96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d118      	bne.n	8005fd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005faa:	2301      	movs	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f383 8810 	msr	PRIMASK, r3
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2110      	movs	r1, #16
 8005fc2:	438a      	bics	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f383 8810 	msr	PRIMASK, r3
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2280      	movs	r2, #128	@ 0x80
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b00e      	add	sp, #56	@ 0x38
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	fffffedf 	.word	0xfffffedf

08005ff4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08c      	sub	sp, #48	@ 0x30
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2220      	movs	r2, #32
 800600a:	4013      	ands	r3, r2
 800600c:	d135      	bne.n	800607a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	2252      	movs	r2, #82	@ 0x52
 8006012:	2100      	movs	r1, #0
 8006014:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006016:	f3ef 8310 	mrs	r3, PRIMASK
 800601a:	60fb      	str	r3, [r7, #12]
  return(result);
 800601c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800601e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006020:	2301      	movs	r3, #1
 8006022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f383 8810 	msr	PRIMASK, r3
}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2180      	movs	r1, #128	@ 0x80
 8006038:	438a      	bics	r2, r1
 800603a:	609a      	str	r2, [r3, #8]
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f383 8810 	msr	PRIMASK, r3
}
 8006046:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006048:	f3ef 8310 	mrs	r3, PRIMASK
 800604c:	61bb      	str	r3, [r7, #24]
  return(result);
 800604e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	2301      	movs	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f383 8810 	msr	PRIMASK, r3
}
 800605c:	46c0      	nop			@ (mov r8, r8)
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	@ 0x40
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f383 8810 	msr	PRIMASK, r3
}
 8006078:	e004      	b.n	8006084 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607c:	0018      	movs	r0, r3
 800607e:	f7ff f9e1 	bl	8005444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	46c0      	nop			@ (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b00c      	add	sp, #48	@ 0x30
 800608a:	bd80      	pop	{r7, pc}

0800608c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	0018      	movs	r0, r3
 800609e:	f7ff f9d9 	bl	8005454 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b004      	add	sp, #16
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b094      	sub	sp, #80	@ 0x50
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2220      	movs	r2, #32
 80060c2:	4013      	ands	r3, r2
 80060c4:	d16f      	bne.n	80061a6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80060c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c8:	225a      	movs	r2, #90	@ 0x5a
 80060ca:	2100      	movs	r1, #0
 80060cc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	617b      	str	r3, [r7, #20]
  return(result);
 80060d4:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d8:	2301      	movs	r3, #1
 80060da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4948      	ldr	r1, [pc, #288]	@ (8006210 <UART_DMAReceiveCplt+0x164>)
 80060f0:	400a      	ands	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f383 8810 	msr	PRIMASK, r3
}
 80060fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006100:	f3ef 8310 	mrs	r3, PRIMASK
 8006104:	623b      	str	r3, [r7, #32]
  return(result);
 8006106:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
 800610a:	2301      	movs	r3, #1
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	f383 8810 	msr	PRIMASK, r3
}
 8006114:	46c0      	nop			@ (mov r8, r8)
 8006116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2101      	movs	r1, #1
 8006122:	438a      	bics	r2, r1
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	f383 8810 	msr	PRIMASK, r3
}
 8006130:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	643b      	str	r3, [r7, #64]	@ 0x40
 800613c:	2301      	movs	r3, #1
 800613e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	f383 8810 	msr	PRIMASK, r3
}
 8006146:	46c0      	nop			@ (mov r8, r8)
 8006148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2140      	movs	r1, #64	@ 0x40
 8006154:	438a      	bics	r2, r1
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615e:	f383 8810 	msr	PRIMASK, r3
}
 8006162:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006166:	2280      	movs	r2, #128	@ 0x80
 8006168:	2120      	movs	r1, #32
 800616a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800616e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006170:	2b01      	cmp	r3, #1
 8006172:	d118      	bne.n	80061a6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006174:	f3ef 8310 	mrs	r3, PRIMASK
 8006178:	60bb      	str	r3, [r7, #8]
  return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800617e:	2301      	movs	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f383 8810 	msr	PRIMASK, r3
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2110      	movs	r1, #16
 8006196:	438a      	bics	r2, r1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f383 8810 	msr	PRIMASK, r3
}
 80061a4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a8:	2200      	movs	r2, #0
 80061aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d124      	bne.n	80061fe <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 80061b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b6:	225a      	movs	r2, #90	@ 0x5a
 80061b8:	2100      	movs	r1, #0
 80061ba:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	213a      	movs	r1, #58	@ 0x3a
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 80061c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ca:	2258      	movs	r2, #88	@ 0x58
 80061cc:	5a9b      	ldrh	r3, [r3, r2]
 80061ce:	187a      	adds	r2, r7, r1
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d204      	bcs.n	80061e0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80061d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d8:	187a      	adds	r2, r7, r1
 80061da:	215a      	movs	r1, #90	@ 0x5a
 80061dc:	8812      	ldrh	r2, [r2, #0]
 80061de:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e2:	2258      	movs	r2, #88	@ 0x58
 80061e4:	5a9a      	ldrh	r2, [r3, r2]
 80061e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e8:	215a      	movs	r1, #90	@ 0x5a
 80061ea:	5a5b      	ldrh	r3, [r3, r1]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f4:	0011      	movs	r1, r2
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7fa fa70 	bl	80006dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061fc:	e003      	b.n	8006206 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 80061fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006200:	0018      	movs	r0, r3
 8006202:	f7ff f92f 	bl	8005464 <HAL_UART_RxCpltCallback>
}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	b014      	add	sp, #80	@ 0x50
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	fffffeff 	.word	0xfffffeff

08006214 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	2b01      	cmp	r3, #1
 800622e:	d128      	bne.n	8006282 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2258      	movs	r2, #88	@ 0x58
 8006234:	5a9b      	ldrh	r3, [r3, r2]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	b299      	uxth	r1, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	225a      	movs	r2, #90	@ 0x5a
 800623e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	210a      	movs	r1, #10
 8006248:	187b      	adds	r3, r7, r1
 800624a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2258      	movs	r2, #88	@ 0x58
 8006250:	5a9b      	ldrh	r3, [r3, r2]
 8006252:	187a      	adds	r2, r7, r1
 8006254:	8812      	ldrh	r2, [r2, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d804      	bhi.n	8006264 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	187a      	adds	r2, r7, r1
 800625e:	215a      	movs	r1, #90	@ 0x5a
 8006260:	8812      	ldrh	r2, [r2, #0]
 8006262:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2258      	movs	r2, #88	@ 0x58
 8006268:	5a9a      	ldrh	r2, [r3, r2]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	215a      	movs	r1, #90	@ 0x5a
 800626e:	5a5b      	ldrh	r3, [r3, r1]
 8006270:	b29b      	uxth	r3, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0011      	movs	r1, r2
 800627a:	0018      	movs	r0, r3
 800627c:	f7fa fa2e 	bl	80006dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006280:	e003      	b.n	800628a <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	0018      	movs	r0, r3
 8006286:	f7ff f8f5 	bl	8005474 <HAL_UART_RxHalfCpltCallback>
}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2280      	movs	r2, #128	@ 0x80
 80062aa:	589b      	ldr	r3, [r3, r2]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2280      	movs	r2, #128	@ 0x80
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b80      	cmp	r3, #128	@ 0x80
 80062ba:	d10a      	bne.n	80062d2 <UART_DMAError+0x40>
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b21      	cmp	r3, #33	@ 0x21
 80062c0:	d107      	bne.n	80062d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2252      	movs	r2, #82	@ 0x52
 80062c6:	2100      	movs	r1, #0
 80062c8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f7ff fe09 	bl	8005ee4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2240      	movs	r2, #64	@ 0x40
 80062da:	4013      	ands	r3, r2
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d10a      	bne.n	80062f6 <UART_DMAError+0x64>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b22      	cmp	r3, #34	@ 0x22
 80062e4:	d107      	bne.n	80062f6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	225a      	movs	r2, #90	@ 0x5a
 80062ea:	2100      	movs	r1, #0
 80062ec:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7ff fe1b 	bl	8005f2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2284      	movs	r2, #132	@ 0x84
 80062fa:	589b      	ldr	r3, [r3, r2]
 80062fc:	2210      	movs	r2, #16
 80062fe:	431a      	orrs	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2184      	movs	r1, #132	@ 0x84
 8006304:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	0018      	movs	r0, r3
 800630a:	f7ff f8bb 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b006      	add	sp, #24
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	225a      	movs	r2, #90	@ 0x5a
 8006328:	2100      	movs	r1, #0
 800632a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	0018      	movs	r0, r3
 8006330:	f7ff f8a8 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006334:	46c0      	nop			@ (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bd80      	pop	{r7, pc}

0800633c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	60bb      	str	r3, [r7, #8]
  return(result);
 800634a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	2301      	movs	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2140      	movs	r1, #64	@ 0x40
 8006366:	438a      	bics	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f383 8810 	msr	PRIMASK, r3
}
 8006374:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	0018      	movs	r0, r3
 8006386:	f7ff f85d 	bl	8005444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b006      	add	sp, #24
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b002      	add	sp, #8
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a2:	b5b0      	push	{r4, r5, r7, lr}
 80063a4:	b08a      	sub	sp, #40	@ 0x28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	1dbb      	adds	r3, r7, #6
 80063ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2280      	movs	r2, #128	@ 0x80
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d156      	bne.n	8006468 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80063c0:	1dbb      	adds	r3, r7, #6
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e04e      	b.n	800646a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	2380      	movs	r3, #128	@ 0x80
 80063d2:	015b      	lsls	r3, r3, #5
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d109      	bne.n	80063ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2201      	movs	r2, #1
 80063e4:	4013      	ands	r3, r2
 80063e6:	d001      	beq.n	80063ec <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e03e      	b.n	800646a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063f8:	2527      	movs	r5, #39	@ 0x27
 80063fa:	197c      	adds	r4, r7, r5
 80063fc:	1dbb      	adds	r3, r7, #6
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fccd 	bl	8005da4 <UART_Start_Receive_DMA>
 800640a:	0003      	movs	r3, r0
 800640c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800640e:	197b      	adds	r3, r7, r5
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d124      	bne.n	8006460 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641a:	2b01      	cmp	r3, #1
 800641c:	d11c      	bne.n	8006458 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2210      	movs	r2, #16
 8006424:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006426:	f3ef 8310 	mrs	r3, PRIMASK
 800642a:	617b      	str	r3, [r7, #20]
  return(result);
 800642c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	2301      	movs	r3, #1
 8006432:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f383 8810 	msr	PRIMASK, r3
}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2110      	movs	r1, #16
 8006448:	430a      	orrs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	e003      	b.n	8006460 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006458:	2327      	movs	r3, #39	@ 0x27
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006460:	2327      	movs	r3, #39	@ 0x27
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	e000      	b.n	800646a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b00a      	add	sp, #40	@ 0x28
 8006470:	bdb0      	pop	{r4, r5, r7, pc}

08006472 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 fb11 	bl	8006aa8 <malloc>
 8006486:	0003      	movs	r3, r0
 8006488:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b004      	add	sp, #16
 8006492:	bd80      	pop	{r7, pc}

08006494 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <ATC_Free+0x26>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	0018      	movs	r0, r3
 80064b0:	f000 fb04 	bl	8006abc <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
  }
}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	b002      	add	sp, #8
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8a9b      	ldrh	r3, [r3, #20]
 80064d8:	001a      	movs	r2, r3
 80064da:	2100      	movs	r1, #0
 80064dc:	f000 fdca 	bl	8007074 <memset>
}
 80064e0:	46c0      	nop			@ (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b002      	add	sp, #8
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	1dbb      	adds	r3, r7, #6
 80064f4:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 80064f6:	2417      	movs	r4, #23
 80064f8:	193b      	adds	r3, r7, r4
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1dba      	adds	r2, r7, #6
 8006502:	8812      	ldrh	r2, [r2, #0]
 8006504:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	1dbb      	adds	r3, r7, #6
 800650c:	881a      	ldrh	r2, [r3, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	0019      	movs	r1, r3
 8006512:	f7fe faf3 	bl	8004afc <HAL_UART_Transmit_DMA>
 8006516:	1e03      	subs	r3, r0, #0
 8006518:	d103      	bne.n	8006522 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 800651a:	193b      	adds	r3, r7, r4
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e000      	b.n	8006524 <ATC_TxRaw+0x3c>
      break;
 8006522:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8006524:	2317      	movs	r3, #23
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	781b      	ldrb	r3, [r3, #0]
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b007      	add	sp, #28
 8006530:	bd90      	pop	{r4, r7, pc}

08006532 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	0018      	movs	r0, r3
 8006540:	f7fe ffa8 	bl	8005494 <HAL_UART_GetState>
 8006544:	0003      	movs	r3, r0
 8006546:	2b21      	cmp	r3, #33	@ 0x21
 8006548:	d007      	beq.n	800655a <ATC_TxBusy+0x28>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	0018      	movs	r0, r3
 8006550:	f7fe ffa0 	bl	8005494 <HAL_UART_GetState>
 8006554:	0003      	movs	r3, r0
 8006556:	2b23      	cmp	r3, #35	@ 0x23
 8006558:	d101      	bne.n	800655e <ATC_TxBusy+0x2c>
  {
    return true;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800655e:	2300      	movs	r3, #0
  }
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	b002      	add	sp, #8
 8006566:	bd80      	pop	{r7, pc}

08006568 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8006572:	230f      	movs	r3, #15
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 800657a:	f7fb f9f7 	bl	800196c <HAL_GetTick>
 800657e:	0003      	movs	r3, r0
 8006580:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8006582:	2001      	movs	r0, #1
 8006584:	f000 fa84 	bl	8006a90 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	0018      	movs	r0, r3
 800658e:	f7fe ff81 	bl	8005494 <HAL_UART_GetState>
 8006592:	0003      	movs	r3, r0
 8006594:	2b22      	cmp	r3, #34	@ 0x22
 8006596:	d007      	beq.n	80065a8 <ATC_TxWait+0x40>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	0018      	movs	r0, r3
 800659e:	f7fe ff79 	bl	8005494 <HAL_UART_GetState>
 80065a2:	0003      	movs	r3, r0
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d104      	bne.n	80065b2 <ATC_TxWait+0x4a>
    {
      answer = true;
 80065a8:	230f      	movs	r3, #15
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]
      break;
 80065b0:	e01c      	b.n	80065ec <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7fe ff6c 	bl	8005494 <HAL_UART_GetState>
 80065bc:	0003      	movs	r3, r0
 80065be:	2be0      	cmp	r3, #224	@ 0xe0
 80065c0:	d014      	beq.n	80065ec <ATC_TxWait+0x84>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7fe ff64 	bl	8005494 <HAL_UART_GetState>
 80065cc:	0003      	movs	r3, r0
 80065ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80065d0:	d00c      	beq.n	80065ec <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80065d2:	f7fb f9cb 	bl	800196c <HAL_GetTick>
 80065d6:	0002      	movs	r2, r0
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d8cf      	bhi.n	8006582 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7fe fb18 	bl	8004c1c <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80065ec:	230f      	movs	r3, #15
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	781b      	ldrb	r3, [r3, #0]
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b004      	add	sp, #16
 80065f8:	bd80      	pop	{r7, pc}

080065fa <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8b1b      	ldrh	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d027      	beq.n	800665a <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e01b      	b.n	8006648 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	18d3      	adds	r3, r2, r3
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0019      	movs	r1, r3
 8006622:	f000 fd3c 	bl	800709e <strstr>
 8006626:	0003      	movs	r3, r0
 8006628:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	18d3      	adds	r3, r2, r3
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	0010      	movs	r0, r2
 8006640:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d3de      	bcc.n	8006610 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	0018      	movs	r0, r3
 8006656:	f7ff ff34 	bl	80064c2 <ATC_RxFlush>
  }
}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	46bd      	mov	sp, r7
 800665e:	b004      	add	sp, #16
 8006660:	bd80      	pop	{r7, pc}

08006662 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800666c:	230f      	movs	r3, #15
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8b1b      	ldrh	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d031      	beq.n	80066e0 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800667c:	230c      	movs	r3, #12
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e025      	b.n	80066d2 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800668a:	230c      	movs	r3, #12
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	881a      	ldrh	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	320a      	adds	r2, #10
 8006694:	0092      	lsls	r2, r2, #2
 8006696:	58d3      	ldr	r3, [r2, r3]
 8006698:	0019      	movs	r1, r3
 800669a:	f000 fd00 	bl	800709e <strstr>
 800669e:	0003      	movs	r3, r0
 80066a0:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00e      	beq.n	80066c6 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 80066b4:	230c      	movs	r3, #12
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	230f      	movs	r3, #15
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	3201      	adds	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
        break;
 80066c4:	e00c      	b.n	80066e0 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80066c6:	210c      	movs	r1, #12
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	881a      	ldrh	r2, [r3, #0]
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	3201      	adds	r2, #1
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8adb      	ldrh	r3, [r3, #22]
 80066d6:	220c      	movs	r2, #12
 80066d8:	18ba      	adds	r2, r7, r2
 80066da:	8812      	ldrh	r2, [r2, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d3d2      	bcc.n	8006686 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 80066e0:	230f      	movs	r3, #15
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	781b      	ldrb	r3, [r3, #0]
}
 80066e6:	0018      	movs	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b004      	add	sp, #16
 80066ec:	bd80      	pop	{r7, pc}

080066ee <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f7fe fedc 	bl	80054b8 <HAL_UART_GetError>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d01f      	beq.n	8006744 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2201      	movs	r2, #1
 800670c:	4252      	negs	r2, r2
 800670e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0018      	movs	r0, r3
 8006716:	f7fe fae7 	bl	8004ce8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69d9      	ldr	r1, [r3, #28]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8a9b      	ldrh	r3, [r3, #20]
 8006726:	001a      	movs	r2, r3
 8006728:	f7ff fe3b 	bl	80063a2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2104      	movs	r1, #4
 8006740:	438a      	bics	r2, r1
 8006742:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	0018      	movs	r0, r3
 800674a:	f7fe fea3 	bl	8005494 <HAL_UART_GetState>
 800674e:	0003      	movs	r3, r0
 8006750:	2b22      	cmp	r3, #34	@ 0x22
 8006752:	d027      	beq.n	80067a4 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	0018      	movs	r0, r3
 800675a:	f7fe fe9b 	bl	8005494 <HAL_UART_GetState>
 800675e:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006760:	2b23      	cmp	r3, #35	@ 0x23
 8006762:	d01f      	beq.n	80067a4 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	4252      	negs	r2, r2
 800676e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	0018      	movs	r0, r3
 8006776:	f7fe fab7 	bl	8004ce8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69d9      	ldr	r1, [r3, #28]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8a9b      	ldrh	r3, [r3, #20]
 8006786:	001a      	movs	r2, r3
 8006788:	f7ff fe0b 	bl	80063a2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2104      	movs	r1, #4
 80067a0:	438a      	bics	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
  }
}
 80067a4:	46c0      	nop			@ (mov r8, r8)
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}

080067ac <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7ff ff99 	bl	80066ee <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ff1b 	bl	80065fa <ATC_CheckEvents>
}
 80067c4:	46c0      	nop			@ (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 80067cc:	b5b0      	push	{r4, r5, r7, lr}
 80067ce:	b08c      	sub	sp, #48	@ 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 80067da:	2300      	movs	r3, #0
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7ff fea6 	bl	8006532 <ATC_TxBusy>
 80067e6:	1e03      	subs	r3, r0, #0
 80067e8:	d002      	beq.n	80067f0 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80067ea:	2304      	movs	r3, #4
 80067ec:	425b      	negs	r3, r3
 80067ee:	e0e3      	b.n	80069b8 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 80067f0:	2344      	movs	r3, #68	@ 0x44
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d902      	bls.n	8006800 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 80067fa:	2305      	movs	r3, #5
 80067fc:	425b      	negs	r3, r3
 80067fe:	e0db      	b.n	80069b8 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	0018      	movs	r0, r3
 8006804:	f7ff ff73 	bl	80066ee <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8006808:	2348      	movs	r3, #72	@ 0x48
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800680e:	2300      	movs	r3, #0
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006812:	e051      	b.n	80068b8 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	617a      	str	r2, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	0018      	movs	r0, r3
 8006822:	f7f9 fc71 	bl	8000108 <strlen>
 8006826:	0003      	movs	r3, r0
 8006828:	3301      	adds	r3, #1
 800682a:	0018      	movs	r0, r3
 800682c:	f7ff fe21 	bl	8006472 <ATC_Malloc>
 8006830:	0001      	movs	r1, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006836:	320a      	adds	r2, #10
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006840:	320a      	adds	r2, #10
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	58d3      	ldr	r3, [r2, r3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11c      	bne.n	8006884 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 800684a:	2327      	movs	r3, #39	@ 0x27
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e00e      	b.n	8006872 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8006854:	2427      	movs	r4, #39	@ 0x27
 8006856:	193b      	adds	r3, r7, r4
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	330a      	adds	r3, #10
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	18d3      	adds	r3, r2, r3
 8006862:	0018      	movs	r0, r3
 8006864:	f7ff fe16 	bl	8006494 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8006868:	193b      	adds	r3, r7, r4
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	193b      	adds	r3, r7, r4
 800686e:	3201      	adds	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	2327      	movs	r3, #39	@ 0x27
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800687a:	429a      	cmp	r2, r3
 800687c:	dcea      	bgt.n	8006854 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 800687e:	2303      	movs	r3, #3
 8006880:	425b      	negs	r3, r3
 8006882:	e099      	b.n	80069b8 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006888:	320a      	adds	r2, #10
 800688a:	0092      	lsls	r2, r2, #2
 800688c:	58d3      	ldr	r3, [r2, r3]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f000 fca7 	bl	80071e6 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800689c:	320a      	adds	r2, #10
 800689e:	0092      	lsls	r2, r2, #2
 80068a0:	58d4      	ldr	r4, [r2, r3]
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7f9 fc2f 	bl	8000108 <strlen>
 80068aa:	0003      	movs	r3, r0
 80068ac:	18e3      	adds	r3, r4, r3
 80068ae:	2200      	movs	r2, #0
 80068b0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	3301      	adds	r3, #1
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b8:	2344      	movs	r3, #68	@ 0x44
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c0:	429a      	cmp	r2, r3
 80068c2:	dba7      	blt.n	8006814 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7ff fdfb 	bl	80064c2 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7f9 fc1a 	bl	8000108 <strlen>
 80068d4:	0003      	movs	r3, r0
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	0018      	movs	r0, r3
 80068de:	f7ff fe03 	bl	80064e8 <ATC_TxRaw>
 80068e2:	0003      	movs	r3, r0
 80068e4:	001a      	movs	r2, r3
 80068e6:	2301      	movs	r3, #1
 80068e8:	4053      	eors	r3, r2
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	425b      	negs	r3, r3
 80068f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80068f6:	e010      	b.n	800691a <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	0011      	movs	r1, r2
 80068fe:	0018      	movs	r0, r3
 8006900:	f7ff fe32 	bl	8006568 <ATC_TxWait>
 8006904:	0003      	movs	r3, r0
 8006906:	001a      	movs	r2, r3
 8006908:	2301      	movs	r3, #1
 800690a:	4053      	eors	r3, r2
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8006912:	2302      	movs	r3, #2
 8006914:	425b      	negs	r3, r3
 8006916:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006918:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800691a:	2444      	movs	r4, #68	@ 0x44
 800691c:	193b      	adds	r3, r7, r4
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d029      	beq.n	8006978 <ATC_SendReceive+0x1ac>
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d126      	bne.n	8006978 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 800692a:	f7fb f81f 	bl	800196c <HAL_GetTick>
 800692e:	0003      	movs	r3, r0
 8006930:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8006932:	193b      	adds	r3, r7, r4
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800693c:	e014      	b.n	8006968 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 800693e:	2001      	movs	r0, #1
 8006940:	f000 f8a6 	bl	8006a90 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8006944:	251f      	movs	r5, #31
 8006946:	197c      	adds	r4, r7, r5
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	0011      	movs	r1, r2
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff fe87 	bl	8006662 <ATC_CheckResponse>
 8006954:	0003      	movs	r3, r0
 8006956:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8006958:	197b      	adds	r3, r7, r5
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8006960:	197b      	adds	r3, r7, r5
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006966:	e007      	b.n	8006978 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8006968:	f7fb f800 	bl	800196c <HAL_GetTick>
 800696c:	0002      	movs	r2, r0
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006974:	429a      	cmp	r2, r3
 8006976:	d8e2      	bhi.n	800693e <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800697e:	2326      	movs	r3, #38	@ 0x26
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e00e      	b.n	80069a6 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8006988:	2426      	movs	r4, #38	@ 0x26
 800698a:	193b      	adds	r3, r7, r4
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	330a      	adds	r3, #10
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	18d3      	adds	r3, r2, r3
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff fd7c 	bl	8006494 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800699c:	193b      	adds	r3, r7, r4
 800699e:	781a      	ldrb	r2, [r3, #0]
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	3201      	adds	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	2326      	movs	r3, #38	@ 0x26
 80069a8:	18fa      	adds	r2, r7, r3
 80069aa:	2344      	movs	r3, #68	@ 0x44
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d3e8      	bcc.n	8006988 <ATC_SendReceive+0x1bc>
  }
  return answer;
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b00c      	add	sp, #48	@ 0x30
 80069be:	bdb0      	pop	{r4, r5, r7, pc}

080069c0 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	000a      	movs	r2, r1
 80069ca:	1cbb      	adds	r3, r7, #2
 80069cc:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80069ce:	1cbb      	adds	r3, r7, #2
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8a9b      	ldrh	r3, [r3, #20]
 80069d6:	0019      	movs	r1, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8b1b      	ldrh	r3, [r3, #24]
 80069dc:	1acb      	subs	r3, r1, r3
 80069de:	429a      	cmp	r2, r3
 80069e0:	dd06      	ble.n	80069f0 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8a99      	ldrh	r1, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8b1a      	ldrh	r2, [r3, #24]
 80069ea:	1cbb      	adds	r3, r7, #2
 80069ec:	1a8a      	subs	r2, r1, r2
 80069ee:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	8b12      	ldrh	r2, [r2, #24]
 80069f8:	1898      	adds	r0, r3, r2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69d9      	ldr	r1, [r3, #28]
 80069fe:	1cbb      	adds	r3, r7, #2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	001a      	movs	r2, r3
 8006a04:	f000 fbf7 	bl	80071f6 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8b1a      	ldrh	r2, [r3, #24]
 8006a0c:	1cbb      	adds	r3, r7, #2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	18d3      	adds	r3, r2, r3
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69d9      	ldr	r1, [r3, #28]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8a9b      	ldrh	r3, [r3, #20]
 8006a24:	001a      	movs	r2, r3
 8006a26:	f7ff fcbc 	bl	80063a2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d10c      	bne.n	8006a48 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2104      	movs	r1, #4
 8006a42:	438a      	bics	r2, r1
 8006a44:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8006a46:	e01f      	b.n	8006a88 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4252      	negs	r2, r2
 8006a52:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7fe f945 	bl	8004ce8 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69d9      	ldr	r1, [r3, #28]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8a9b      	ldrh	r3, [r3, #20]
 8006a6a:	001a      	movs	r2, r3
 8006a6c:	f7ff fc99 	bl	80063a2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2104      	movs	r1, #4
 8006a84:	438a      	bics	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]
}
 8006a88:	46c0      	nop			@ (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7fa ff70 	bl	8001980 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8006aa0:	46c0      	nop			@ (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <malloc>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4b03      	ldr	r3, [pc, #12]	@ (8006ab8 <malloc+0x10>)
 8006aac:	0001      	movs	r1, r0
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	f000 f830 	bl	8006b14 <_malloc_r>
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	46c0      	nop			@ (mov r8, r8)
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <free>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	4b03      	ldr	r3, [pc, #12]	@ (8006acc <free+0x10>)
 8006ac0:	0001      	movs	r1, r0
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f000 fba0 	bl	8007208 <_free_r>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	2000001c 	.word	0x2000001c

08006ad0 <sbrk_aligned>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8006b10 <sbrk_aligned+0x40>)
 8006ad4:	000d      	movs	r5, r1
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	0004      	movs	r4, r0
 8006ada:	2900      	cmp	r1, #0
 8006adc:	d102      	bne.n	8006ae4 <sbrk_aligned+0x14>
 8006ade:	f000 fb2f 	bl	8007140 <_sbrk_r>
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	0029      	movs	r1, r5
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f000 fb2a 	bl	8007140 <_sbrk_r>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d103      	bne.n	8006af8 <sbrk_aligned+0x28>
 8006af0:	2501      	movs	r5, #1
 8006af2:	426d      	negs	r5, r5
 8006af4:	0028      	movs	r0, r5
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	2303      	movs	r3, #3
 8006afa:	1cc5      	adds	r5, r0, #3
 8006afc:	439d      	bics	r5, r3
 8006afe:	42a8      	cmp	r0, r5
 8006b00:	d0f8      	beq.n	8006af4 <sbrk_aligned+0x24>
 8006b02:	1a29      	subs	r1, r5, r0
 8006b04:	0020      	movs	r0, r4
 8006b06:	f000 fb1b 	bl	8007140 <_sbrk_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d1f2      	bne.n	8006af4 <sbrk_aligned+0x24>
 8006b0e:	e7ef      	b.n	8006af0 <sbrk_aligned+0x20>
 8006b10:	20000280 	.word	0x20000280

08006b14 <_malloc_r>:
 8006b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b16:	2203      	movs	r2, #3
 8006b18:	1ccb      	adds	r3, r1, #3
 8006b1a:	4393      	bics	r3, r2
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	0005      	movs	r5, r0
 8006b20:	001f      	movs	r7, r3
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d234      	bcs.n	8006b90 <_malloc_r+0x7c>
 8006b26:	270c      	movs	r7, #12
 8006b28:	42b9      	cmp	r1, r7
 8006b2a:	d833      	bhi.n	8006b94 <_malloc_r+0x80>
 8006b2c:	0028      	movs	r0, r5
 8006b2e:	f000 f871 	bl	8006c14 <__malloc_lock>
 8006b32:	4e37      	ldr	r6, [pc, #220]	@ (8006c10 <_malloc_r+0xfc>)
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	001c      	movs	r4, r3
 8006b38:	2c00      	cmp	r4, #0
 8006b3a:	d12f      	bne.n	8006b9c <_malloc_r+0x88>
 8006b3c:	0039      	movs	r1, r7
 8006b3e:	0028      	movs	r0, r5
 8006b40:	f7ff ffc6 	bl	8006ad0 <sbrk_aligned>
 8006b44:	0004      	movs	r4, r0
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d15f      	bne.n	8006c0a <_malloc_r+0xf6>
 8006b4a:	6834      	ldr	r4, [r6, #0]
 8006b4c:	9400      	str	r4, [sp, #0]
 8006b4e:	9b00      	ldr	r3, [sp, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d14a      	bne.n	8006bea <_malloc_r+0xd6>
 8006b54:	2c00      	cmp	r4, #0
 8006b56:	d052      	beq.n	8006bfe <_malloc_r+0xea>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	0028      	movs	r0, r5
 8006b5c:	18e3      	adds	r3, r4, r3
 8006b5e:	9900      	ldr	r1, [sp, #0]
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	f000 faed 	bl	8007140 <_sbrk_r>
 8006b66:	9b01      	ldr	r3, [sp, #4]
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d148      	bne.n	8006bfe <_malloc_r+0xea>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	0028      	movs	r0, r5
 8006b70:	1aff      	subs	r7, r7, r3
 8006b72:	0039      	movs	r1, r7
 8006b74:	f7ff ffac 	bl	8006ad0 <sbrk_aligned>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d040      	beq.n	8006bfe <_malloc_r+0xea>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	19db      	adds	r3, r3, r7
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	6833      	ldr	r3, [r6, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	d133      	bne.n	8006bf2 <_malloc_r+0xde>
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	e019      	b.n	8006bc4 <_malloc_r+0xb0>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dac9      	bge.n	8006b28 <_malloc_r+0x14>
 8006b94:	230c      	movs	r3, #12
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b9c:	6821      	ldr	r1, [r4, #0]
 8006b9e:	1bc9      	subs	r1, r1, r7
 8006ba0:	d420      	bmi.n	8006be4 <_malloc_r+0xd0>
 8006ba2:	290b      	cmp	r1, #11
 8006ba4:	d90a      	bls.n	8006bbc <_malloc_r+0xa8>
 8006ba6:	19e2      	adds	r2, r4, r7
 8006ba8:	6027      	str	r7, [r4, #0]
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	d104      	bne.n	8006bb8 <_malloc_r+0xa4>
 8006bae:	6032      	str	r2, [r6, #0]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	6011      	str	r1, [r2, #0]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	e005      	b.n	8006bc4 <_malloc_r+0xb0>
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e7f9      	b.n	8006bb0 <_malloc_r+0x9c>
 8006bbc:	6862      	ldr	r2, [r4, #4]
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	d10e      	bne.n	8006be0 <_malloc_r+0xcc>
 8006bc2:	6032      	str	r2, [r6, #0]
 8006bc4:	0028      	movs	r0, r5
 8006bc6:	f000 f82d 	bl	8006c24 <__malloc_unlock>
 8006bca:	0020      	movs	r0, r4
 8006bcc:	2207      	movs	r2, #7
 8006bce:	300b      	adds	r0, #11
 8006bd0:	1d23      	adds	r3, r4, #4
 8006bd2:	4390      	bics	r0, r2
 8006bd4:	1ac2      	subs	r2, r0, r3
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	d0df      	beq.n	8006b9a <_malloc_r+0x86>
 8006bda:	1a1b      	subs	r3, r3, r0
 8006bdc:	50a3      	str	r3, [r4, r2]
 8006bde:	e7dc      	b.n	8006b9a <_malloc_r+0x86>
 8006be0:	605a      	str	r2, [r3, #4]
 8006be2:	e7ef      	b.n	8006bc4 <_malloc_r+0xb0>
 8006be4:	0023      	movs	r3, r4
 8006be6:	6864      	ldr	r4, [r4, #4]
 8006be8:	e7a6      	b.n	8006b38 <_malloc_r+0x24>
 8006bea:	9c00      	ldr	r4, [sp, #0]
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	e7ad      	b.n	8006b4e <_malloc_r+0x3a>
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	d1fb      	bne.n	8006bf2 <_malloc_r+0xde>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e7da      	b.n	8006bb4 <_malloc_r+0xa0>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	0028      	movs	r0, r5
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f000 f80e 	bl	8006c24 <__malloc_unlock>
 8006c08:	e7c6      	b.n	8006b98 <_malloc_r+0x84>
 8006c0a:	6007      	str	r7, [r0, #0]
 8006c0c:	e7da      	b.n	8006bc4 <_malloc_r+0xb0>
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	20000284 	.word	0x20000284

08006c14 <__malloc_lock>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4802      	ldr	r0, [pc, #8]	@ (8006c20 <__malloc_lock+0xc>)
 8006c18:	f000 fae3 	bl	80071e2 <__retarget_lock_acquire_recursive>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	200003c8 	.word	0x200003c8

08006c24 <__malloc_unlock>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4802      	ldr	r0, [pc, #8]	@ (8006c30 <__malloc_unlock+0xc>)
 8006c28:	f000 fadc 	bl	80071e4 <__retarget_lock_release_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	200003c8 	.word	0x200003c8

08006c34 <std>:
 8006c34:	2300      	movs	r3, #0
 8006c36:	b510      	push	{r4, lr}
 8006c38:	0004      	movs	r4, r0
 8006c3a:	6003      	str	r3, [r0, #0]
 8006c3c:	6043      	str	r3, [r0, #4]
 8006c3e:	6083      	str	r3, [r0, #8]
 8006c40:	8181      	strh	r1, [r0, #12]
 8006c42:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c44:	81c2      	strh	r2, [r0, #14]
 8006c46:	6103      	str	r3, [r0, #16]
 8006c48:	6143      	str	r3, [r0, #20]
 8006c4a:	6183      	str	r3, [r0, #24]
 8006c4c:	0019      	movs	r1, r3
 8006c4e:	2208      	movs	r2, #8
 8006c50:	305c      	adds	r0, #92	@ 0x5c
 8006c52:	f000 fa0f 	bl	8007074 <memset>
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <std+0x50>)
 8006c58:	6224      	str	r4, [r4, #32]
 8006c5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <std+0x54>)
 8006c5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c60:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <std+0x58>)
 8006c62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c64:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <std+0x5c>)
 8006c66:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c68:	4b0a      	ldr	r3, [pc, #40]	@ (8006c94 <std+0x60>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d005      	beq.n	8006c7a <std+0x46>
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <std+0x64>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d002      	beq.n	8006c7a <std+0x46>
 8006c74:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <std+0x68>)
 8006c76:	429c      	cmp	r4, r3
 8006c78:	d103      	bne.n	8006c82 <std+0x4e>
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	3058      	adds	r0, #88	@ 0x58
 8006c7e:	f000 faaf 	bl	80071e0 <__retarget_lock_init_recursive>
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	08006e9d 	.word	0x08006e9d
 8006c88:	08006ec5 	.word	0x08006ec5
 8006c8c:	08006efd 	.word	0x08006efd
 8006c90:	08006f29 	.word	0x08006f29
 8006c94:	20000288 	.word	0x20000288
 8006c98:	200002f0 	.word	0x200002f0
 8006c9c:	20000358 	.word	0x20000358

08006ca0 <stdio_exit_handler>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4a03      	ldr	r2, [pc, #12]	@ (8006cb0 <stdio_exit_handler+0x10>)
 8006ca4:	4903      	ldr	r1, [pc, #12]	@ (8006cb4 <stdio_exit_handler+0x14>)
 8006ca6:	4804      	ldr	r0, [pc, #16]	@ (8006cb8 <stdio_exit_handler+0x18>)
 8006ca8:	f000 f86c 	bl	8006d84 <_fwalk_sglue>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	20000010 	.word	0x20000010
 8006cb4:	08007929 	.word	0x08007929
 8006cb8:	20000020 	.word	0x20000020

08006cbc <cleanup_stdio>:
 8006cbc:	6841      	ldr	r1, [r0, #4]
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006cec <cleanup_stdio+0x30>)
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	0004      	movs	r4, r0
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	d001      	beq.n	8006ccc <cleanup_stdio+0x10>
 8006cc8:	f000 fe2e 	bl	8007928 <_fflush_r>
 8006ccc:	68a1      	ldr	r1, [r4, #8]
 8006cce:	4b08      	ldr	r3, [pc, #32]	@ (8006cf0 <cleanup_stdio+0x34>)
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d002      	beq.n	8006cda <cleanup_stdio+0x1e>
 8006cd4:	0020      	movs	r0, r4
 8006cd6:	f000 fe27 	bl	8007928 <_fflush_r>
 8006cda:	68e1      	ldr	r1, [r4, #12]
 8006cdc:	4b05      	ldr	r3, [pc, #20]	@ (8006cf4 <cleanup_stdio+0x38>)
 8006cde:	4299      	cmp	r1, r3
 8006ce0:	d002      	beq.n	8006ce8 <cleanup_stdio+0x2c>
 8006ce2:	0020      	movs	r0, r4
 8006ce4:	f000 fe20 	bl	8007928 <_fflush_r>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	20000288 	.word	0x20000288
 8006cf0:	200002f0 	.word	0x200002f0
 8006cf4:	20000358 	.word	0x20000358

08006cf8 <global_stdio_init.part.0>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <global_stdio_init.part.0+0x28>)
 8006cfc:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <global_stdio_init.part.0+0x2c>)
 8006cfe:	2104      	movs	r1, #4
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	4809      	ldr	r0, [pc, #36]	@ (8006d28 <global_stdio_init.part.0+0x30>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	f7ff ff95 	bl	8006c34 <std>
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	2109      	movs	r1, #9
 8006d0e:	4807      	ldr	r0, [pc, #28]	@ (8006d2c <global_stdio_init.part.0+0x34>)
 8006d10:	f7ff ff90 	bl	8006c34 <std>
 8006d14:	2202      	movs	r2, #2
 8006d16:	2112      	movs	r1, #18
 8006d18:	4805      	ldr	r0, [pc, #20]	@ (8006d30 <global_stdio_init.part.0+0x38>)
 8006d1a:	f7ff ff8b 	bl	8006c34 <std>
 8006d1e:	bd10      	pop	{r4, pc}
 8006d20:	200003c0 	.word	0x200003c0
 8006d24:	08006ca1 	.word	0x08006ca1
 8006d28:	20000288 	.word	0x20000288
 8006d2c:	200002f0 	.word	0x200002f0
 8006d30:	20000358 	.word	0x20000358

08006d34 <__sfp_lock_acquire>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	4802      	ldr	r0, [pc, #8]	@ (8006d40 <__sfp_lock_acquire+0xc>)
 8006d38:	f000 fa53 	bl	80071e2 <__retarget_lock_acquire_recursive>
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	200003c9 	.word	0x200003c9

08006d44 <__sfp_lock_release>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4802      	ldr	r0, [pc, #8]	@ (8006d50 <__sfp_lock_release+0xc>)
 8006d48:	f000 fa4c 	bl	80071e4 <__retarget_lock_release_recursive>
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	46c0      	nop			@ (mov r8, r8)
 8006d50:	200003c9 	.word	0x200003c9

08006d54 <__sinit>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	0004      	movs	r4, r0
 8006d58:	f7ff ffec 	bl	8006d34 <__sfp_lock_acquire>
 8006d5c:	6a23      	ldr	r3, [r4, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <__sinit+0x14>
 8006d62:	f7ff ffef 	bl	8006d44 <__sfp_lock_release>
 8006d66:	bd10      	pop	{r4, pc}
 8006d68:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <__sinit+0x28>)
 8006d6a:	6223      	str	r3, [r4, #32]
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <__sinit+0x2c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f6      	bne.n	8006d62 <__sinit+0xe>
 8006d74:	f7ff ffc0 	bl	8006cf8 <global_stdio_init.part.0>
 8006d78:	e7f3      	b.n	8006d62 <__sinit+0xe>
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	08006cbd 	.word	0x08006cbd
 8006d80:	200003c0 	.word	0x200003c0

08006d84 <_fwalk_sglue>:
 8006d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d86:	0014      	movs	r4, r2
 8006d88:	2600      	movs	r6, #0
 8006d8a:	9000      	str	r0, [sp, #0]
 8006d8c:	9101      	str	r1, [sp, #4]
 8006d8e:	68a5      	ldr	r5, [r4, #8]
 8006d90:	6867      	ldr	r7, [r4, #4]
 8006d92:	3f01      	subs	r7, #1
 8006d94:	d504      	bpl.n	8006da0 <_fwalk_sglue+0x1c>
 8006d96:	6824      	ldr	r4, [r4, #0]
 8006d98:	2c00      	cmp	r4, #0
 8006d9a:	d1f8      	bne.n	8006d8e <_fwalk_sglue+0xa>
 8006d9c:	0030      	movs	r0, r6
 8006d9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d908      	bls.n	8006db8 <_fwalk_sglue+0x34>
 8006da6:	220e      	movs	r2, #14
 8006da8:	5eab      	ldrsh	r3, [r5, r2]
 8006daa:	3301      	adds	r3, #1
 8006dac:	d004      	beq.n	8006db8 <_fwalk_sglue+0x34>
 8006dae:	0029      	movs	r1, r5
 8006db0:	9800      	ldr	r0, [sp, #0]
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	4798      	blx	r3
 8006db6:	4306      	orrs	r6, r0
 8006db8:	3568      	adds	r5, #104	@ 0x68
 8006dba:	e7ea      	b.n	8006d92 <_fwalk_sglue+0xe>

08006dbc <iprintf>:
 8006dbc:	b40f      	push	{r0, r1, r2, r3}
 8006dbe:	b507      	push	{r0, r1, r2, lr}
 8006dc0:	4905      	ldr	r1, [pc, #20]	@ (8006dd8 <iprintf+0x1c>)
 8006dc2:	ab04      	add	r3, sp, #16
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	cb04      	ldmia	r3!, {r2}
 8006dc8:	6881      	ldr	r1, [r0, #8]
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	f000 fa8e 	bl	80072ec <_vfiprintf_r>
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	b004      	add	sp, #16
 8006dd6:	4718      	bx	r3
 8006dd8:	2000001c 	.word	0x2000001c

08006ddc <_puts_r>:
 8006ddc:	6a03      	ldr	r3, [r0, #32]
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	0005      	movs	r5, r0
 8006de2:	000e      	movs	r6, r1
 8006de4:	6884      	ldr	r4, [r0, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <_puts_r+0x12>
 8006dea:	f7ff ffb3 	bl	8006d54 <__sinit>
 8006dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006df0:	07db      	lsls	r3, r3, #31
 8006df2:	d405      	bmi.n	8006e00 <_puts_r+0x24>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	059b      	lsls	r3, r3, #22
 8006df8:	d402      	bmi.n	8006e00 <_puts_r+0x24>
 8006dfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfc:	f000 f9f1 	bl	80071e2 <__retarget_lock_acquire_recursive>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	071b      	lsls	r3, r3, #28
 8006e04:	d502      	bpl.n	8006e0c <_puts_r+0x30>
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11f      	bne.n	8006e4c <_puts_r+0x70>
 8006e0c:	0021      	movs	r1, r4
 8006e0e:	0028      	movs	r0, r5
 8006e10:	f000 f8d2 	bl	8006fb8 <__swsetup_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d019      	beq.n	8006e4c <_puts_r+0x70>
 8006e18:	2501      	movs	r5, #1
 8006e1a:	426d      	negs	r5, r5
 8006e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e1e:	07db      	lsls	r3, r3, #31
 8006e20:	d405      	bmi.n	8006e2e <_puts_r+0x52>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d402      	bmi.n	8006e2e <_puts_r+0x52>
 8006e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e2a:	f000 f9db 	bl	80071e4 <__retarget_lock_release_recursive>
 8006e2e:	0028      	movs	r0, r5
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	3601      	adds	r6, #1
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da04      	bge.n	8006e44 <_puts_r+0x68>
 8006e3a:	69a2      	ldr	r2, [r4, #24]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	dc16      	bgt.n	8006e6e <_puts_r+0x92>
 8006e40:	290a      	cmp	r1, #10
 8006e42:	d014      	beq.n	8006e6e <_puts_r+0x92>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	6022      	str	r2, [r4, #0]
 8006e4a:	7019      	strb	r1, [r3, #0]
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	7831      	ldrb	r1, [r6, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d1ed      	bne.n	8006e32 <_puts_r+0x56>
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da0f      	bge.n	8006e7c <_puts_r+0xa0>
 8006e5c:	0022      	movs	r2, r4
 8006e5e:	0028      	movs	r0, r5
 8006e60:	310a      	adds	r1, #10
 8006e62:	f000 f867 	bl	8006f34 <__swbuf_r>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d0d6      	beq.n	8006e18 <_puts_r+0x3c>
 8006e6a:	250a      	movs	r5, #10
 8006e6c:	e7d6      	b.n	8006e1c <_puts_r+0x40>
 8006e6e:	0022      	movs	r2, r4
 8006e70:	0028      	movs	r0, r5
 8006e72:	f000 f85f 	bl	8006f34 <__swbuf_r>
 8006e76:	3001      	adds	r0, #1
 8006e78:	d1e8      	bne.n	8006e4c <_puts_r+0x70>
 8006e7a:	e7cd      	b.n	8006e18 <_puts_r+0x3c>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	6022      	str	r2, [r4, #0]
 8006e82:	220a      	movs	r2, #10
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e7f0      	b.n	8006e6a <_puts_r+0x8e>

08006e88 <puts>:
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4b03      	ldr	r3, [pc, #12]	@ (8006e98 <puts+0x10>)
 8006e8c:	0001      	movs	r1, r0
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	f7ff ffa4 	bl	8006ddc <_puts_r>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	2000001c 	.word	0x2000001c

08006e9c <__sread>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	000c      	movs	r4, r1
 8006ea0:	250e      	movs	r5, #14
 8006ea2:	5f49      	ldrsh	r1, [r1, r5]
 8006ea4:	f000 f938 	bl	8007118 <_read_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	db03      	blt.n	8006eb4 <__sread+0x18>
 8006eac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006eae:	181b      	adds	r3, r3, r0
 8006eb0:	6563      	str	r3, [r4, #84]	@ 0x54
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	4a02      	ldr	r2, [pc, #8]	@ (8006ec0 <__sread+0x24>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	e7f9      	b.n	8006eb2 <__sread+0x16>
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	ffffefff 	.word	0xffffefff

08006ec4 <__swrite>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	001f      	movs	r7, r3
 8006ec8:	898b      	ldrh	r3, [r1, #12]
 8006eca:	0005      	movs	r5, r0
 8006ecc:	000c      	movs	r4, r1
 8006ece:	0016      	movs	r6, r2
 8006ed0:	05db      	lsls	r3, r3, #23
 8006ed2:	d505      	bpl.n	8006ee0 <__swrite+0x1c>
 8006ed4:	230e      	movs	r3, #14
 8006ed6:	5ec9      	ldrsh	r1, [r1, r3]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2302      	movs	r3, #2
 8006edc:	f000 f908 	bl	80070f0 <_lseek_r>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	4a05      	ldr	r2, [pc, #20]	@ (8006ef8 <__swrite+0x34>)
 8006ee4:	0028      	movs	r0, r5
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	0032      	movs	r2, r6
 8006eec:	230e      	movs	r3, #14
 8006eee:	5ee1      	ldrsh	r1, [r4, r3]
 8006ef0:	003b      	movs	r3, r7
 8006ef2:	f000 f937 	bl	8007164 <_write_r>
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef8:	ffffefff 	.word	0xffffefff

08006efc <__sseek>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	000c      	movs	r4, r1
 8006f00:	250e      	movs	r5, #14
 8006f02:	5f49      	ldrsh	r1, [r1, r5]
 8006f04:	f000 f8f4 	bl	80070f0 <_lseek_r>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	1c42      	adds	r2, r0, #1
 8006f0c:	d103      	bne.n	8006f16 <__sseek+0x1a>
 8006f0e:	4a05      	ldr	r2, [pc, #20]	@ (8006f24 <__sseek+0x28>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
 8006f16:	2280      	movs	r2, #128	@ 0x80
 8006f18:	0152      	lsls	r2, r2, #5
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f20:	e7f8      	b.n	8006f14 <__sseek+0x18>
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	ffffefff 	.word	0xffffefff

08006f28 <__sclose>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	230e      	movs	r3, #14
 8006f2c:	5ec9      	ldrsh	r1, [r1, r3]
 8006f2e:	f000 f8cd 	bl	80070cc <_close_r>
 8006f32:	bd10      	pop	{r4, pc}

08006f34 <__swbuf_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	0006      	movs	r6, r0
 8006f38:	000d      	movs	r5, r1
 8006f3a:	0014      	movs	r4, r2
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d004      	beq.n	8006f4a <__swbuf_r+0x16>
 8006f40:	6a03      	ldr	r3, [r0, #32]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <__swbuf_r+0x16>
 8006f46:	f7ff ff05 	bl	8006d54 <__sinit>
 8006f4a:	69a3      	ldr	r3, [r4, #24]
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	071b      	lsls	r3, r3, #28
 8006f52:	d502      	bpl.n	8006f5a <__swbuf_r+0x26>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <__swbuf_r+0x3a>
 8006f5a:	0021      	movs	r1, r4
 8006f5c:	0030      	movs	r0, r6
 8006f5e:	f000 f82b 	bl	8006fb8 <__swsetup_r>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d003      	beq.n	8006f6e <__swbuf_r+0x3a>
 8006f66:	2501      	movs	r5, #1
 8006f68:	426d      	negs	r5, r5
 8006f6a:	0028      	movs	r0, r5
 8006f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	b2ef      	uxtb	r7, r5
 8006f74:	1ac0      	subs	r0, r0, r3
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	b2ed      	uxtb	r5, r5
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	dc05      	bgt.n	8006f8a <__swbuf_r+0x56>
 8006f7e:	0021      	movs	r1, r4
 8006f80:	0030      	movs	r0, r6
 8006f82:	f000 fcd1 	bl	8007928 <_fflush_r>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d1ed      	bne.n	8006f66 <__swbuf_r+0x32>
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	60a3      	str	r3, [r4, #8]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	701f      	strb	r7, [r3, #0]
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	4283      	cmp	r3, r0
 8006f9e:	d004      	beq.n	8006faa <__swbuf_r+0x76>
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d5e1      	bpl.n	8006f6a <__swbuf_r+0x36>
 8006fa6:	2d0a      	cmp	r5, #10
 8006fa8:	d1df      	bne.n	8006f6a <__swbuf_r+0x36>
 8006faa:	0021      	movs	r1, r4
 8006fac:	0030      	movs	r0, r6
 8006fae:	f000 fcbb 	bl	8007928 <_fflush_r>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d0d9      	beq.n	8006f6a <__swbuf_r+0x36>
 8006fb6:	e7d6      	b.n	8006f66 <__swbuf_r+0x32>

08006fb8 <__swsetup_r>:
 8006fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8007070 <__swsetup_r+0xb8>)
 8006fba:	b570      	push	{r4, r5, r6, lr}
 8006fbc:	0005      	movs	r5, r0
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	000c      	movs	r4, r1
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d004      	beq.n	8006fd0 <__swsetup_r+0x18>
 8006fc6:	6a03      	ldr	r3, [r0, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <__swsetup_r+0x18>
 8006fcc:	f7ff fec2 	bl	8006d54 <__sinit>
 8006fd0:	220c      	movs	r2, #12
 8006fd2:	5ea3      	ldrsh	r3, [r4, r2]
 8006fd4:	071a      	lsls	r2, r3, #28
 8006fd6:	d423      	bmi.n	8007020 <__swsetup_r+0x68>
 8006fd8:	06da      	lsls	r2, r3, #27
 8006fda:	d407      	bmi.n	8006fec <__swsetup_r+0x34>
 8006fdc:	2209      	movs	r2, #9
 8006fde:	602a      	str	r2, [r5, #0]
 8006fe0:	2240      	movs	r2, #64	@ 0x40
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	4240      	negs	r0, r0
 8006fea:	e03a      	b.n	8007062 <__swsetup_r+0xaa>
 8006fec:	075b      	lsls	r3, r3, #29
 8006fee:	d513      	bpl.n	8007018 <__swsetup_r+0x60>
 8006ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d008      	beq.n	8007008 <__swsetup_r+0x50>
 8006ff6:	0023      	movs	r3, r4
 8006ff8:	3344      	adds	r3, #68	@ 0x44
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	d002      	beq.n	8007004 <__swsetup_r+0x4c>
 8006ffe:	0028      	movs	r0, r5
 8007000:	f000 f902 	bl	8007208 <_free_r>
 8007004:	2300      	movs	r3, #0
 8007006:	6363      	str	r3, [r4, #52]	@ 0x34
 8007008:	2224      	movs	r2, #36	@ 0x24
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	4393      	bics	r3, r2
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	2300      	movs	r3, #0
 8007012:	6063      	str	r3, [r4, #4]
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	2308      	movs	r3, #8
 800701a:	89a2      	ldrh	r2, [r4, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	6923      	ldr	r3, [r4, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <__swsetup_r+0x86>
 8007026:	21a0      	movs	r1, #160	@ 0xa0
 8007028:	2280      	movs	r2, #128	@ 0x80
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	0089      	lsls	r1, r1, #2
 800702e:	0092      	lsls	r2, r2, #2
 8007030:	400b      	ands	r3, r1
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <__swsetup_r+0x86>
 8007036:	0021      	movs	r1, r4
 8007038:	0028      	movs	r0, r5
 800703a:	f000 fccb 	bl	80079d4 <__smakebuf_r>
 800703e:	220c      	movs	r2, #12
 8007040:	5ea3      	ldrsh	r3, [r4, r2]
 8007042:	2101      	movs	r1, #1
 8007044:	001a      	movs	r2, r3
 8007046:	400a      	ands	r2, r1
 8007048:	420b      	tst	r3, r1
 800704a:	d00b      	beq.n	8007064 <__swsetup_r+0xac>
 800704c:	2200      	movs	r2, #0
 800704e:	60a2      	str	r2, [r4, #8]
 8007050:	6962      	ldr	r2, [r4, #20]
 8007052:	4252      	negs	r2, r2
 8007054:	61a2      	str	r2, [r4, #24]
 8007056:	2000      	movs	r0, #0
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	4282      	cmp	r2, r0
 800705c:	d101      	bne.n	8007062 <__swsetup_r+0xaa>
 800705e:	061a      	lsls	r2, r3, #24
 8007060:	d4be      	bmi.n	8006fe0 <__swsetup_r+0x28>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	0799      	lsls	r1, r3, #30
 8007066:	d400      	bmi.n	800706a <__swsetup_r+0xb2>
 8007068:	6962      	ldr	r2, [r4, #20]
 800706a:	60a2      	str	r2, [r4, #8]
 800706c:	e7f3      	b.n	8007056 <__swsetup_r+0x9e>
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	2000001c 	.word	0x2000001c

08007074 <memset>:
 8007074:	0003      	movs	r3, r0
 8007076:	1882      	adds	r2, r0, r2
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	7019      	strb	r1, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <strcat>:
 8007084:	0002      	movs	r2, r0
 8007086:	b510      	push	{r4, lr}
 8007088:	7813      	ldrb	r3, [r2, #0]
 800708a:	0014      	movs	r4, r2
 800708c:	3201      	adds	r2, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1fa      	bne.n	8007088 <strcat+0x4>
 8007092:	5cca      	ldrb	r2, [r1, r3]
 8007094:	54e2      	strb	r2, [r4, r3]
 8007096:	3301      	adds	r3, #1
 8007098:	2a00      	cmp	r2, #0
 800709a:	d1fa      	bne.n	8007092 <strcat+0xe>
 800709c:	bd10      	pop	{r4, pc}

0800709e <strstr>:
 800709e:	780a      	ldrb	r2, [r1, #0]
 80070a0:	b530      	push	{r4, r5, lr}
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	d10c      	bne.n	80070c0 <strstr+0x22>
 80070a6:	bd30      	pop	{r4, r5, pc}
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d108      	bne.n	80070be <strstr+0x20>
 80070ac:	2301      	movs	r3, #1
 80070ae:	5ccc      	ldrb	r4, [r1, r3]
 80070b0:	2c00      	cmp	r4, #0
 80070b2:	d0f8      	beq.n	80070a6 <strstr+0x8>
 80070b4:	5cc5      	ldrb	r5, [r0, r3]
 80070b6:	42a5      	cmp	r5, r4
 80070b8:	d101      	bne.n	80070be <strstr+0x20>
 80070ba:	3301      	adds	r3, #1
 80070bc:	e7f7      	b.n	80070ae <strstr+0x10>
 80070be:	3001      	adds	r0, #1
 80070c0:	7803      	ldrb	r3, [r0, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <strstr+0xa>
 80070c6:	0018      	movs	r0, r3
 80070c8:	e7ed      	b.n	80070a6 <strstr+0x8>
	...

080070cc <_close_r>:
 80070cc:	2300      	movs	r3, #0
 80070ce:	b570      	push	{r4, r5, r6, lr}
 80070d0:	4d06      	ldr	r5, [pc, #24]	@ (80070ec <_close_r+0x20>)
 80070d2:	0004      	movs	r4, r0
 80070d4:	0008      	movs	r0, r1
 80070d6:	602b      	str	r3, [r5, #0]
 80070d8:	f7f9 fdfd 	bl	8000cd6 <_close>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d103      	bne.n	80070e8 <_close_r+0x1c>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d000      	beq.n	80070e8 <_close_r+0x1c>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	200003c4 	.word	0x200003c4

080070f0 <_lseek_r>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	0004      	movs	r4, r0
 80070f4:	0008      	movs	r0, r1
 80070f6:	0011      	movs	r1, r2
 80070f8:	001a      	movs	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	4d05      	ldr	r5, [pc, #20]	@ (8007114 <_lseek_r+0x24>)
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7f9 fe0a 	bl	8000d18 <_lseek>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d103      	bne.n	8007110 <_lseek_r+0x20>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d000      	beq.n	8007110 <_lseek_r+0x20>
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	bd70      	pop	{r4, r5, r6, pc}
 8007112:	46c0      	nop			@ (mov r8, r8)
 8007114:	200003c4 	.word	0x200003c4

08007118 <_read_r>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	0004      	movs	r4, r0
 800711c:	0008      	movs	r0, r1
 800711e:	0011      	movs	r1, r2
 8007120:	001a      	movs	r2, r3
 8007122:	2300      	movs	r3, #0
 8007124:	4d05      	ldr	r5, [pc, #20]	@ (800713c <_read_r+0x24>)
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7f9 fd9c 	bl	8000c64 <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d103      	bne.n	8007138 <_read_r+0x20>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d000      	beq.n	8007138 <_read_r+0x20>
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	200003c4 	.word	0x200003c4

08007140 <_sbrk_r>:
 8007140:	2300      	movs	r3, #0
 8007142:	b570      	push	{r4, r5, r6, lr}
 8007144:	4d06      	ldr	r5, [pc, #24]	@ (8007160 <_sbrk_r+0x20>)
 8007146:	0004      	movs	r4, r0
 8007148:	0008      	movs	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7f9 fdf0 	bl	8000d30 <_sbrk>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d103      	bne.n	800715c <_sbrk_r+0x1c>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d000      	beq.n	800715c <_sbrk_r+0x1c>
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	46c0      	nop			@ (mov r8, r8)
 8007160:	200003c4 	.word	0x200003c4

08007164 <_write_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	0004      	movs	r4, r0
 8007168:	0008      	movs	r0, r1
 800716a:	0011      	movs	r1, r2
 800716c:	001a      	movs	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	4d05      	ldr	r5, [pc, #20]	@ (8007188 <_write_r+0x24>)
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	f7f9 fd93 	bl	8000c9e <_write>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d103      	bne.n	8007184 <_write_r+0x20>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d000      	beq.n	8007184 <_write_r+0x20>
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	bd70      	pop	{r4, r5, r6, pc}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	200003c4 	.word	0x200003c4

0800718c <__errno>:
 800718c:	4b01      	ldr	r3, [pc, #4]	@ (8007194 <__errno+0x8>)
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	4770      	bx	lr
 8007192:	46c0      	nop			@ (mov r8, r8)
 8007194:	2000001c 	.word	0x2000001c

08007198 <__libc_init_array>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	2600      	movs	r6, #0
 800719c:	4c0c      	ldr	r4, [pc, #48]	@ (80071d0 <__libc_init_array+0x38>)
 800719e:	4d0d      	ldr	r5, [pc, #52]	@ (80071d4 <__libc_init_array+0x3c>)
 80071a0:	1b64      	subs	r4, r4, r5
 80071a2:	10a4      	asrs	r4, r4, #2
 80071a4:	42a6      	cmp	r6, r4
 80071a6:	d109      	bne.n	80071bc <__libc_init_array+0x24>
 80071a8:	2600      	movs	r6, #0
 80071aa:	f000 fc85 	bl	8007ab8 <_init>
 80071ae:	4c0a      	ldr	r4, [pc, #40]	@ (80071d8 <__libc_init_array+0x40>)
 80071b0:	4d0a      	ldr	r5, [pc, #40]	@ (80071dc <__libc_init_array+0x44>)
 80071b2:	1b64      	subs	r4, r4, r5
 80071b4:	10a4      	asrs	r4, r4, #2
 80071b6:	42a6      	cmp	r6, r4
 80071b8:	d105      	bne.n	80071c6 <__libc_init_array+0x2e>
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	00b3      	lsls	r3, r6, #2
 80071be:	58eb      	ldr	r3, [r5, r3]
 80071c0:	4798      	blx	r3
 80071c2:	3601      	adds	r6, #1
 80071c4:	e7ee      	b.n	80071a4 <__libc_init_array+0xc>
 80071c6:	00b3      	lsls	r3, r6, #2
 80071c8:	58eb      	ldr	r3, [r5, r3]
 80071ca:	4798      	blx	r3
 80071cc:	3601      	adds	r6, #1
 80071ce:	e7f2      	b.n	80071b6 <__libc_init_array+0x1e>
 80071d0:	08008288 	.word	0x08008288
 80071d4:	08008288 	.word	0x08008288
 80071d8:	0800828c 	.word	0x0800828c
 80071dc:	08008288 	.word	0x08008288

080071e0 <__retarget_lock_init_recursive>:
 80071e0:	4770      	bx	lr

080071e2 <__retarget_lock_acquire_recursive>:
 80071e2:	4770      	bx	lr

080071e4 <__retarget_lock_release_recursive>:
 80071e4:	4770      	bx	lr

080071e6 <strcpy>:
 80071e6:	0003      	movs	r3, r0
 80071e8:	780a      	ldrb	r2, [r1, #0]
 80071ea:	3101      	adds	r1, #1
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d1f9      	bne.n	80071e8 <strcpy+0x2>
 80071f4:	4770      	bx	lr

080071f6 <memcpy>:
 80071f6:	2300      	movs	r3, #0
 80071f8:	b510      	push	{r4, lr}
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d100      	bne.n	8007200 <memcpy+0xa>
 80071fe:	bd10      	pop	{r4, pc}
 8007200:	5ccc      	ldrb	r4, [r1, r3]
 8007202:	54c4      	strb	r4, [r0, r3]
 8007204:	3301      	adds	r3, #1
 8007206:	e7f8      	b.n	80071fa <memcpy+0x4>

08007208 <_free_r>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	0005      	movs	r5, r0
 800720c:	1e0c      	subs	r4, r1, #0
 800720e:	d010      	beq.n	8007232 <_free_r+0x2a>
 8007210:	3c04      	subs	r4, #4
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da00      	bge.n	800721a <_free_r+0x12>
 8007218:	18e4      	adds	r4, r4, r3
 800721a:	0028      	movs	r0, r5
 800721c:	f7ff fcfa 	bl	8006c14 <__malloc_lock>
 8007220:	4a1d      	ldr	r2, [pc, #116]	@ (8007298 <_free_r+0x90>)
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <_free_r+0x2c>
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	6014      	str	r4, [r2, #0]
 800722c:	0028      	movs	r0, r5
 800722e:	f7ff fcf9 	bl	8006c24 <__malloc_unlock>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	42a3      	cmp	r3, r4
 8007236:	d908      	bls.n	800724a <_free_r+0x42>
 8007238:	6820      	ldr	r0, [r4, #0]
 800723a:	1821      	adds	r1, r4, r0
 800723c:	428b      	cmp	r3, r1
 800723e:	d1f3      	bne.n	8007228 <_free_r+0x20>
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	1809      	adds	r1, r1, r0
 8007246:	6021      	str	r1, [r4, #0]
 8007248:	e7ee      	b.n	8007228 <_free_r+0x20>
 800724a:	001a      	movs	r2, r3
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <_free_r+0x4e>
 8007252:	42a3      	cmp	r3, r4
 8007254:	d9f9      	bls.n	800724a <_free_r+0x42>
 8007256:	6811      	ldr	r1, [r2, #0]
 8007258:	1850      	adds	r0, r2, r1
 800725a:	42a0      	cmp	r0, r4
 800725c:	d10b      	bne.n	8007276 <_free_r+0x6e>
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	1809      	adds	r1, r1, r0
 8007262:	1850      	adds	r0, r2, r1
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	4283      	cmp	r3, r0
 8007268:	d1e0      	bne.n	800722c <_free_r+0x24>
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	1841      	adds	r1, r0, r1
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	6053      	str	r3, [r2, #4]
 8007274:	e7da      	b.n	800722c <_free_r+0x24>
 8007276:	42a0      	cmp	r0, r4
 8007278:	d902      	bls.n	8007280 <_free_r+0x78>
 800727a:	230c      	movs	r3, #12
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	e7d5      	b.n	800722c <_free_r+0x24>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	1821      	adds	r1, r4, r0
 8007284:	428b      	cmp	r3, r1
 8007286:	d103      	bne.n	8007290 <_free_r+0x88>
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	1809      	adds	r1, r1, r0
 800728e:	6021      	str	r1, [r4, #0]
 8007290:	6063      	str	r3, [r4, #4]
 8007292:	6054      	str	r4, [r2, #4]
 8007294:	e7ca      	b.n	800722c <_free_r+0x24>
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	20000284 	.word	0x20000284

0800729c <__sfputc_r>:
 800729c:	6893      	ldr	r3, [r2, #8]
 800729e:	b510      	push	{r4, lr}
 80072a0:	3b01      	subs	r3, #1
 80072a2:	6093      	str	r3, [r2, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da04      	bge.n	80072b2 <__sfputc_r+0x16>
 80072a8:	6994      	ldr	r4, [r2, #24]
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	db07      	blt.n	80072be <__sfputc_r+0x22>
 80072ae:	290a      	cmp	r1, #10
 80072b0:	d005      	beq.n	80072be <__sfputc_r+0x22>
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	1c58      	adds	r0, r3, #1
 80072b6:	6010      	str	r0, [r2, #0]
 80072b8:	7019      	strb	r1, [r3, #0]
 80072ba:	0008      	movs	r0, r1
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	f7ff fe39 	bl	8006f34 <__swbuf_r>
 80072c2:	0001      	movs	r1, r0
 80072c4:	e7f9      	b.n	80072ba <__sfputc_r+0x1e>

080072c6 <__sfputs_r>:
 80072c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c8:	0006      	movs	r6, r0
 80072ca:	000f      	movs	r7, r1
 80072cc:	0014      	movs	r4, r2
 80072ce:	18d5      	adds	r5, r2, r3
 80072d0:	42ac      	cmp	r4, r5
 80072d2:	d101      	bne.n	80072d8 <__sfputs_r+0x12>
 80072d4:	2000      	movs	r0, #0
 80072d6:	e007      	b.n	80072e8 <__sfputs_r+0x22>
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	003a      	movs	r2, r7
 80072dc:	0030      	movs	r0, r6
 80072de:	f7ff ffdd 	bl	800729c <__sfputc_r>
 80072e2:	3401      	adds	r4, #1
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d1f3      	bne.n	80072d0 <__sfputs_r+0xa>
 80072e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072ec <_vfiprintf_r>:
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	b0a1      	sub	sp, #132	@ 0x84
 80072f0:	000f      	movs	r7, r1
 80072f2:	0015      	movs	r5, r2
 80072f4:	001e      	movs	r6, r3
 80072f6:	9003      	str	r0, [sp, #12]
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d004      	beq.n	8007306 <_vfiprintf_r+0x1a>
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <_vfiprintf_r+0x1a>
 8007302:	f7ff fd27 	bl	8006d54 <__sinit>
 8007306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007308:	07db      	lsls	r3, r3, #31
 800730a:	d405      	bmi.n	8007318 <_vfiprintf_r+0x2c>
 800730c:	89bb      	ldrh	r3, [r7, #12]
 800730e:	059b      	lsls	r3, r3, #22
 8007310:	d402      	bmi.n	8007318 <_vfiprintf_r+0x2c>
 8007312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007314:	f7ff ff65 	bl	80071e2 <__retarget_lock_acquire_recursive>
 8007318:	89bb      	ldrh	r3, [r7, #12]
 800731a:	071b      	lsls	r3, r3, #28
 800731c:	d502      	bpl.n	8007324 <_vfiprintf_r+0x38>
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d113      	bne.n	800734c <_vfiprintf_r+0x60>
 8007324:	0039      	movs	r1, r7
 8007326:	9803      	ldr	r0, [sp, #12]
 8007328:	f7ff fe46 	bl	8006fb8 <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d00d      	beq.n	800734c <_vfiprintf_r+0x60>
 8007330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007332:	07db      	lsls	r3, r3, #31
 8007334:	d503      	bpl.n	800733e <_vfiprintf_r+0x52>
 8007336:	2001      	movs	r0, #1
 8007338:	4240      	negs	r0, r0
 800733a:	b021      	add	sp, #132	@ 0x84
 800733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	059b      	lsls	r3, r3, #22
 8007342:	d4f8      	bmi.n	8007336 <_vfiprintf_r+0x4a>
 8007344:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007346:	f7ff ff4d 	bl	80071e4 <__retarget_lock_release_recursive>
 800734a:	e7f4      	b.n	8007336 <_vfiprintf_r+0x4a>
 800734c:	2300      	movs	r3, #0
 800734e:	ac08      	add	r4, sp, #32
 8007350:	6163      	str	r3, [r4, #20]
 8007352:	3320      	adds	r3, #32
 8007354:	7663      	strb	r3, [r4, #25]
 8007356:	3310      	adds	r3, #16
 8007358:	76a3      	strb	r3, [r4, #26]
 800735a:	9607      	str	r6, [sp, #28]
 800735c:	002e      	movs	r6, r5
 800735e:	7833      	ldrb	r3, [r6, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <_vfiprintf_r+0x7c>
 8007364:	2b25      	cmp	r3, #37	@ 0x25
 8007366:	d148      	bne.n	80073fa <_vfiprintf_r+0x10e>
 8007368:	1b73      	subs	r3, r6, r5
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	42ae      	cmp	r6, r5
 800736e:	d00b      	beq.n	8007388 <_vfiprintf_r+0x9c>
 8007370:	002a      	movs	r2, r5
 8007372:	0039      	movs	r1, r7
 8007374:	9803      	ldr	r0, [sp, #12]
 8007376:	f7ff ffa6 	bl	80072c6 <__sfputs_r>
 800737a:	3001      	adds	r0, #1
 800737c:	d100      	bne.n	8007380 <_vfiprintf_r+0x94>
 800737e:	e0ae      	b.n	80074de <_vfiprintf_r+0x1f2>
 8007380:	6963      	ldr	r3, [r4, #20]
 8007382:	9a05      	ldr	r2, [sp, #20]
 8007384:	189b      	adds	r3, r3, r2
 8007386:	6163      	str	r3, [r4, #20]
 8007388:	7833      	ldrb	r3, [r6, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d100      	bne.n	8007390 <_vfiprintf_r+0xa4>
 800738e:	e0a6      	b.n	80074de <_vfiprintf_r+0x1f2>
 8007390:	2201      	movs	r2, #1
 8007392:	2300      	movs	r3, #0
 8007394:	4252      	negs	r2, r2
 8007396:	6062      	str	r2, [r4, #4]
 8007398:	a904      	add	r1, sp, #16
 800739a:	3254      	adds	r2, #84	@ 0x54
 800739c:	1852      	adds	r2, r2, r1
 800739e:	1c75      	adds	r5, r6, #1
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	60e3      	str	r3, [r4, #12]
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	7013      	strb	r3, [r2, #0]
 80073a8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80073aa:	4b59      	ldr	r3, [pc, #356]	@ (8007510 <_vfiprintf_r+0x224>)
 80073ac:	2205      	movs	r2, #5
 80073ae:	0018      	movs	r0, r3
 80073b0:	7829      	ldrb	r1, [r5, #0]
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	f000 fb74 	bl	8007aa0 <memchr>
 80073b8:	1c6e      	adds	r6, r5, #1
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d11f      	bne.n	80073fe <_vfiprintf_r+0x112>
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	06d3      	lsls	r3, r2, #27
 80073c2:	d504      	bpl.n	80073ce <_vfiprintf_r+0xe2>
 80073c4:	2353      	movs	r3, #83	@ 0x53
 80073c6:	a904      	add	r1, sp, #16
 80073c8:	185b      	adds	r3, r3, r1
 80073ca:	2120      	movs	r1, #32
 80073cc:	7019      	strb	r1, [r3, #0]
 80073ce:	0713      	lsls	r3, r2, #28
 80073d0:	d504      	bpl.n	80073dc <_vfiprintf_r+0xf0>
 80073d2:	2353      	movs	r3, #83	@ 0x53
 80073d4:	a904      	add	r1, sp, #16
 80073d6:	185b      	adds	r3, r3, r1
 80073d8:	212b      	movs	r1, #43	@ 0x2b
 80073da:	7019      	strb	r1, [r3, #0]
 80073dc:	782b      	ldrb	r3, [r5, #0]
 80073de:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e0:	d016      	beq.n	8007410 <_vfiprintf_r+0x124>
 80073e2:	002e      	movs	r6, r5
 80073e4:	2100      	movs	r1, #0
 80073e6:	200a      	movs	r0, #10
 80073e8:	68e3      	ldr	r3, [r4, #12]
 80073ea:	7832      	ldrb	r2, [r6, #0]
 80073ec:	1c75      	adds	r5, r6, #1
 80073ee:	3a30      	subs	r2, #48	@ 0x30
 80073f0:	2a09      	cmp	r2, #9
 80073f2:	d950      	bls.n	8007496 <_vfiprintf_r+0x1aa>
 80073f4:	2900      	cmp	r1, #0
 80073f6:	d111      	bne.n	800741c <_vfiprintf_r+0x130>
 80073f8:	e017      	b.n	800742a <_vfiprintf_r+0x13e>
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7af      	b.n	800735e <_vfiprintf_r+0x72>
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	1ac0      	subs	r0, r0, r3
 8007404:	2301      	movs	r3, #1
 8007406:	4083      	lsls	r3, r0
 8007408:	4313      	orrs	r3, r2
 800740a:	0035      	movs	r5, r6
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	e7cc      	b.n	80073aa <_vfiprintf_r+0xbe>
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	1d19      	adds	r1, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	9107      	str	r1, [sp, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db01      	blt.n	8007420 <_vfiprintf_r+0x134>
 800741c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800741e:	e004      	b.n	800742a <_vfiprintf_r+0x13e>
 8007420:	425b      	negs	r3, r3
 8007422:	60e3      	str	r3, [r4, #12]
 8007424:	2302      	movs	r3, #2
 8007426:	4313      	orrs	r3, r2
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	7833      	ldrb	r3, [r6, #0]
 800742c:	2b2e      	cmp	r3, #46	@ 0x2e
 800742e:	d10c      	bne.n	800744a <_vfiprintf_r+0x15e>
 8007430:	7873      	ldrb	r3, [r6, #1]
 8007432:	2b2a      	cmp	r3, #42	@ 0x2a
 8007434:	d134      	bne.n	80074a0 <_vfiprintf_r+0x1b4>
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	3602      	adds	r6, #2
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	9207      	str	r2, [sp, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da01      	bge.n	8007448 <_vfiprintf_r+0x15c>
 8007444:	2301      	movs	r3, #1
 8007446:	425b      	negs	r3, r3
 8007448:	9309      	str	r3, [sp, #36]	@ 0x24
 800744a:	4d32      	ldr	r5, [pc, #200]	@ (8007514 <_vfiprintf_r+0x228>)
 800744c:	2203      	movs	r2, #3
 800744e:	0028      	movs	r0, r5
 8007450:	7831      	ldrb	r1, [r6, #0]
 8007452:	f000 fb25 	bl	8007aa0 <memchr>
 8007456:	2800      	cmp	r0, #0
 8007458:	d006      	beq.n	8007468 <_vfiprintf_r+0x17c>
 800745a:	2340      	movs	r3, #64	@ 0x40
 800745c:	1b40      	subs	r0, r0, r5
 800745e:	4083      	lsls	r3, r0
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	3601      	adds	r6, #1
 8007464:	4313      	orrs	r3, r2
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	7831      	ldrb	r1, [r6, #0]
 800746a:	2206      	movs	r2, #6
 800746c:	482a      	ldr	r0, [pc, #168]	@ (8007518 <_vfiprintf_r+0x22c>)
 800746e:	1c75      	adds	r5, r6, #1
 8007470:	7621      	strb	r1, [r4, #24]
 8007472:	f000 fb15 	bl	8007aa0 <memchr>
 8007476:	2800      	cmp	r0, #0
 8007478:	d040      	beq.n	80074fc <_vfiprintf_r+0x210>
 800747a:	4b28      	ldr	r3, [pc, #160]	@ (800751c <_vfiprintf_r+0x230>)
 800747c:	2b00      	cmp	r3, #0
 800747e:	d122      	bne.n	80074c6 <_vfiprintf_r+0x1da>
 8007480:	2207      	movs	r2, #7
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	3307      	adds	r3, #7
 8007486:	4393      	bics	r3, r2
 8007488:	3308      	adds	r3, #8
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	6963      	ldr	r3, [r4, #20]
 800748e:	9a04      	ldr	r2, [sp, #16]
 8007490:	189b      	adds	r3, r3, r2
 8007492:	6163      	str	r3, [r4, #20]
 8007494:	e762      	b.n	800735c <_vfiprintf_r+0x70>
 8007496:	4343      	muls	r3, r0
 8007498:	002e      	movs	r6, r5
 800749a:	2101      	movs	r1, #1
 800749c:	189b      	adds	r3, r3, r2
 800749e:	e7a4      	b.n	80073ea <_vfiprintf_r+0xfe>
 80074a0:	2300      	movs	r3, #0
 80074a2:	200a      	movs	r0, #10
 80074a4:	0019      	movs	r1, r3
 80074a6:	3601      	adds	r6, #1
 80074a8:	6063      	str	r3, [r4, #4]
 80074aa:	7832      	ldrb	r2, [r6, #0]
 80074ac:	1c75      	adds	r5, r6, #1
 80074ae:	3a30      	subs	r2, #48	@ 0x30
 80074b0:	2a09      	cmp	r2, #9
 80074b2:	d903      	bls.n	80074bc <_vfiprintf_r+0x1d0>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0c8      	beq.n	800744a <_vfiprintf_r+0x15e>
 80074b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80074ba:	e7c6      	b.n	800744a <_vfiprintf_r+0x15e>
 80074bc:	4341      	muls	r1, r0
 80074be:	002e      	movs	r6, r5
 80074c0:	2301      	movs	r3, #1
 80074c2:	1889      	adds	r1, r1, r2
 80074c4:	e7f1      	b.n	80074aa <_vfiprintf_r+0x1be>
 80074c6:	aa07      	add	r2, sp, #28
 80074c8:	9200      	str	r2, [sp, #0]
 80074ca:	0021      	movs	r1, r4
 80074cc:	003a      	movs	r2, r7
 80074ce:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <_vfiprintf_r+0x234>)
 80074d0:	9803      	ldr	r0, [sp, #12]
 80074d2:	e000      	b.n	80074d6 <_vfiprintf_r+0x1ea>
 80074d4:	bf00      	nop
 80074d6:	9004      	str	r0, [sp, #16]
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	3301      	adds	r3, #1
 80074dc:	d1d6      	bne.n	800748c <_vfiprintf_r+0x1a0>
 80074de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074e0:	07db      	lsls	r3, r3, #31
 80074e2:	d405      	bmi.n	80074f0 <_vfiprintf_r+0x204>
 80074e4:	89bb      	ldrh	r3, [r7, #12]
 80074e6:	059b      	lsls	r3, r3, #22
 80074e8:	d402      	bmi.n	80074f0 <_vfiprintf_r+0x204>
 80074ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80074ec:	f7ff fe7a 	bl	80071e4 <__retarget_lock_release_recursive>
 80074f0:	89bb      	ldrh	r3, [r7, #12]
 80074f2:	065b      	lsls	r3, r3, #25
 80074f4:	d500      	bpl.n	80074f8 <_vfiprintf_r+0x20c>
 80074f6:	e71e      	b.n	8007336 <_vfiprintf_r+0x4a>
 80074f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80074fa:	e71e      	b.n	800733a <_vfiprintf_r+0x4e>
 80074fc:	aa07      	add	r2, sp, #28
 80074fe:	9200      	str	r2, [sp, #0]
 8007500:	0021      	movs	r1, r4
 8007502:	003a      	movs	r2, r7
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <_vfiprintf_r+0x234>)
 8007506:	9803      	ldr	r0, [sp, #12]
 8007508:	f000 f87c 	bl	8007604 <_printf_i>
 800750c:	e7e3      	b.n	80074d6 <_vfiprintf_r+0x1ea>
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	0800824c 	.word	0x0800824c
 8007514:	08008252 	.word	0x08008252
 8007518:	08008256 	.word	0x08008256
 800751c:	00000000 	.word	0x00000000
 8007520:	080072c7 	.word	0x080072c7

08007524 <_printf_common>:
 8007524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007526:	0016      	movs	r6, r2
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	688a      	ldr	r2, [r1, #8]
 800752c:	690b      	ldr	r3, [r1, #16]
 800752e:	000c      	movs	r4, r1
 8007530:	9000      	str	r0, [sp, #0]
 8007532:	4293      	cmp	r3, r2
 8007534:	da00      	bge.n	8007538 <_printf_common+0x14>
 8007536:	0013      	movs	r3, r2
 8007538:	0022      	movs	r2, r4
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	3243      	adds	r2, #67	@ 0x43
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	2a00      	cmp	r2, #0
 8007542:	d001      	beq.n	8007548 <_printf_common+0x24>
 8007544:	3301      	adds	r3, #1
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	d502      	bpl.n	8007554 <_printf_common+0x30>
 800754e:	6833      	ldr	r3, [r6, #0]
 8007550:	3302      	adds	r3, #2
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	2306      	movs	r3, #6
 8007558:	0015      	movs	r5, r2
 800755a:	401d      	ands	r5, r3
 800755c:	421a      	tst	r2, r3
 800755e:	d027      	beq.n	80075b0 <_printf_common+0x8c>
 8007560:	0023      	movs	r3, r4
 8007562:	3343      	adds	r3, #67	@ 0x43
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	1e5a      	subs	r2, r3, #1
 8007568:	4193      	sbcs	r3, r2
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	0692      	lsls	r2, r2, #26
 800756e:	d430      	bmi.n	80075d2 <_printf_common+0xae>
 8007570:	0022      	movs	r2, r4
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	9800      	ldr	r0, [sp, #0]
 8007576:	9d08      	ldr	r5, [sp, #32]
 8007578:	3243      	adds	r2, #67	@ 0x43
 800757a:	47a8      	blx	r5
 800757c:	3001      	adds	r0, #1
 800757e:	d025      	beq.n	80075cc <_printf_common+0xa8>
 8007580:	2206      	movs	r2, #6
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	2500      	movs	r5, #0
 8007586:	4013      	ands	r3, r2
 8007588:	2b04      	cmp	r3, #4
 800758a:	d105      	bne.n	8007598 <_printf_common+0x74>
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	68e5      	ldr	r5, [r4, #12]
 8007590:	1aed      	subs	r5, r5, r3
 8007592:	43eb      	mvns	r3, r5
 8007594:	17db      	asrs	r3, r3, #31
 8007596:	401d      	ands	r5, r3
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	6922      	ldr	r2, [r4, #16]
 800759c:	4293      	cmp	r3, r2
 800759e:	dd01      	ble.n	80075a4 <_printf_common+0x80>
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	18ed      	adds	r5, r5, r3
 80075a4:	2600      	movs	r6, #0
 80075a6:	42b5      	cmp	r5, r6
 80075a8:	d120      	bne.n	80075ec <_printf_common+0xc8>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e010      	b.n	80075d0 <_printf_common+0xac>
 80075ae:	3501      	adds	r5, #1
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	6832      	ldr	r2, [r6, #0]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	42ab      	cmp	r3, r5
 80075b8:	ddd2      	ble.n	8007560 <_printf_common+0x3c>
 80075ba:	0022      	movs	r2, r4
 80075bc:	2301      	movs	r3, #1
 80075be:	9901      	ldr	r1, [sp, #4]
 80075c0:	9800      	ldr	r0, [sp, #0]
 80075c2:	9f08      	ldr	r7, [sp, #32]
 80075c4:	3219      	adds	r2, #25
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	d1f0      	bne.n	80075ae <_printf_common+0x8a>
 80075cc:	2001      	movs	r0, #1
 80075ce:	4240      	negs	r0, r0
 80075d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075d2:	2030      	movs	r0, #48	@ 0x30
 80075d4:	18e1      	adds	r1, r4, r3
 80075d6:	3143      	adds	r1, #67	@ 0x43
 80075d8:	7008      	strb	r0, [r1, #0]
 80075da:	0021      	movs	r1, r4
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	3145      	adds	r1, #69	@ 0x45
 80075e0:	7809      	ldrb	r1, [r1, #0]
 80075e2:	18a2      	adds	r2, r4, r2
 80075e4:	3243      	adds	r2, #67	@ 0x43
 80075e6:	3302      	adds	r3, #2
 80075e8:	7011      	strb	r1, [r2, #0]
 80075ea:	e7c1      	b.n	8007570 <_printf_common+0x4c>
 80075ec:	0022      	movs	r2, r4
 80075ee:	2301      	movs	r3, #1
 80075f0:	9901      	ldr	r1, [sp, #4]
 80075f2:	9800      	ldr	r0, [sp, #0]
 80075f4:	9f08      	ldr	r7, [sp, #32]
 80075f6:	321a      	adds	r2, #26
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0e6      	beq.n	80075cc <_printf_common+0xa8>
 80075fe:	3601      	adds	r6, #1
 8007600:	e7d1      	b.n	80075a6 <_printf_common+0x82>
	...

08007604 <_printf_i>:
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	b08b      	sub	sp, #44	@ 0x2c
 8007608:	9206      	str	r2, [sp, #24]
 800760a:	000a      	movs	r2, r1
 800760c:	3243      	adds	r2, #67	@ 0x43
 800760e:	9307      	str	r3, [sp, #28]
 8007610:	9005      	str	r0, [sp, #20]
 8007612:	9203      	str	r2, [sp, #12]
 8007614:	7e0a      	ldrb	r2, [r1, #24]
 8007616:	000c      	movs	r4, r1
 8007618:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800761a:	2a78      	cmp	r2, #120	@ 0x78
 800761c:	d809      	bhi.n	8007632 <_printf_i+0x2e>
 800761e:	2a62      	cmp	r2, #98	@ 0x62
 8007620:	d80b      	bhi.n	800763a <_printf_i+0x36>
 8007622:	2a00      	cmp	r2, #0
 8007624:	d100      	bne.n	8007628 <_printf_i+0x24>
 8007626:	e0ba      	b.n	800779e <_printf_i+0x19a>
 8007628:	497a      	ldr	r1, [pc, #488]	@ (8007814 <_printf_i+0x210>)
 800762a:	9104      	str	r1, [sp, #16]
 800762c:	2a58      	cmp	r2, #88	@ 0x58
 800762e:	d100      	bne.n	8007632 <_printf_i+0x2e>
 8007630:	e08e      	b.n	8007750 <_printf_i+0x14c>
 8007632:	0025      	movs	r5, r4
 8007634:	3542      	adds	r5, #66	@ 0x42
 8007636:	702a      	strb	r2, [r5, #0]
 8007638:	e022      	b.n	8007680 <_printf_i+0x7c>
 800763a:	0010      	movs	r0, r2
 800763c:	3863      	subs	r0, #99	@ 0x63
 800763e:	2815      	cmp	r0, #21
 8007640:	d8f7      	bhi.n	8007632 <_printf_i+0x2e>
 8007642:	f7f8 fd69 	bl	8000118 <__gnu_thumb1_case_shi>
 8007646:	0016      	.short	0x0016
 8007648:	fff6001f 	.word	0xfff6001f
 800764c:	fff6fff6 	.word	0xfff6fff6
 8007650:	001ffff6 	.word	0x001ffff6
 8007654:	fff6fff6 	.word	0xfff6fff6
 8007658:	fff6fff6 	.word	0xfff6fff6
 800765c:	0036009f 	.word	0x0036009f
 8007660:	fff6007e 	.word	0xfff6007e
 8007664:	00b0fff6 	.word	0x00b0fff6
 8007668:	0036fff6 	.word	0x0036fff6
 800766c:	fff6fff6 	.word	0xfff6fff6
 8007670:	0082      	.short	0x0082
 8007672:	0025      	movs	r5, r4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	3542      	adds	r5, #66	@ 0x42
 8007678:	1d11      	adds	r1, r2, #4
 800767a:	6019      	str	r1, [r3, #0]
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	702b      	strb	r3, [r5, #0]
 8007680:	2301      	movs	r3, #1
 8007682:	e09e      	b.n	80077c2 <_printf_i+0x1be>
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	6809      	ldr	r1, [r1, #0]
 8007688:	1d02      	adds	r2, r0, #4
 800768a:	060d      	lsls	r5, r1, #24
 800768c:	d50b      	bpl.n	80076a6 <_printf_i+0xa2>
 800768e:	6806      	ldr	r6, [r0, #0]
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	2e00      	cmp	r6, #0
 8007694:	da03      	bge.n	800769e <_printf_i+0x9a>
 8007696:	232d      	movs	r3, #45	@ 0x2d
 8007698:	9a03      	ldr	r2, [sp, #12]
 800769a:	4276      	negs	r6, r6
 800769c:	7013      	strb	r3, [r2, #0]
 800769e:	4b5d      	ldr	r3, [pc, #372]	@ (8007814 <_printf_i+0x210>)
 80076a0:	270a      	movs	r7, #10
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	e018      	b.n	80076d8 <_printf_i+0xd4>
 80076a6:	6806      	ldr	r6, [r0, #0]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	0649      	lsls	r1, r1, #25
 80076ac:	d5f1      	bpl.n	8007692 <_printf_i+0x8e>
 80076ae:	b236      	sxth	r6, r6
 80076b0:	e7ef      	b.n	8007692 <_printf_i+0x8e>
 80076b2:	6808      	ldr	r0, [r1, #0]
 80076b4:	6819      	ldr	r1, [r3, #0]
 80076b6:	c940      	ldmia	r1!, {r6}
 80076b8:	0605      	lsls	r5, r0, #24
 80076ba:	d402      	bmi.n	80076c2 <_printf_i+0xbe>
 80076bc:	0640      	lsls	r0, r0, #25
 80076be:	d500      	bpl.n	80076c2 <_printf_i+0xbe>
 80076c0:	b2b6      	uxth	r6, r6
 80076c2:	6019      	str	r1, [r3, #0]
 80076c4:	4b53      	ldr	r3, [pc, #332]	@ (8007814 <_printf_i+0x210>)
 80076c6:	270a      	movs	r7, #10
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80076cc:	d100      	bne.n	80076d0 <_printf_i+0xcc>
 80076ce:	3f02      	subs	r7, #2
 80076d0:	0023      	movs	r3, r4
 80076d2:	2200      	movs	r2, #0
 80076d4:	3343      	adds	r3, #67	@ 0x43
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	60a3      	str	r3, [r4, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	db06      	blt.n	80076ee <_printf_i+0xea>
 80076e0:	2104      	movs	r1, #4
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	9d03      	ldr	r5, [sp, #12]
 80076e6:	438a      	bics	r2, r1
 80076e8:	6022      	str	r2, [r4, #0]
 80076ea:	4333      	orrs	r3, r6
 80076ec:	d00c      	beq.n	8007708 <_printf_i+0x104>
 80076ee:	9d03      	ldr	r5, [sp, #12]
 80076f0:	0030      	movs	r0, r6
 80076f2:	0039      	movs	r1, r7
 80076f4:	f7f8 fda0 	bl	8000238 <__aeabi_uidivmod>
 80076f8:	9b04      	ldr	r3, [sp, #16]
 80076fa:	3d01      	subs	r5, #1
 80076fc:	5c5b      	ldrb	r3, [r3, r1]
 80076fe:	702b      	strb	r3, [r5, #0]
 8007700:	0033      	movs	r3, r6
 8007702:	0006      	movs	r6, r0
 8007704:	429f      	cmp	r7, r3
 8007706:	d9f3      	bls.n	80076f0 <_printf_i+0xec>
 8007708:	2f08      	cmp	r7, #8
 800770a:	d109      	bne.n	8007720 <_printf_i+0x11c>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	07db      	lsls	r3, r3, #31
 8007710:	d506      	bpl.n	8007720 <_printf_i+0x11c>
 8007712:	6862      	ldr	r2, [r4, #4]
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	429a      	cmp	r2, r3
 8007718:	dc02      	bgt.n	8007720 <_printf_i+0x11c>
 800771a:	2330      	movs	r3, #48	@ 0x30
 800771c:	3d01      	subs	r5, #1
 800771e:	702b      	strb	r3, [r5, #0]
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1b5b      	subs	r3, r3, r5
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	0021      	movs	r1, r4
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	9805      	ldr	r0, [sp, #20]
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	aa09      	add	r2, sp, #36	@ 0x24
 8007732:	f7ff fef7 	bl	8007524 <_printf_common>
 8007736:	3001      	adds	r0, #1
 8007738:	d148      	bne.n	80077cc <_printf_i+0x1c8>
 800773a:	2001      	movs	r0, #1
 800773c:	4240      	negs	r0, r0
 800773e:	b00b      	add	sp, #44	@ 0x2c
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	2220      	movs	r2, #32
 8007744:	6809      	ldr	r1, [r1, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	2278      	movs	r2, #120	@ 0x78
 800774c:	4932      	ldr	r1, [pc, #200]	@ (8007818 <_printf_i+0x214>)
 800774e:	9104      	str	r1, [sp, #16]
 8007750:	0021      	movs	r1, r4
 8007752:	3145      	adds	r1, #69	@ 0x45
 8007754:	700a      	strb	r2, [r1, #0]
 8007756:	6819      	ldr	r1, [r3, #0]
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	c940      	ldmia	r1!, {r6}
 800775c:	0610      	lsls	r0, r2, #24
 800775e:	d402      	bmi.n	8007766 <_printf_i+0x162>
 8007760:	0650      	lsls	r0, r2, #25
 8007762:	d500      	bpl.n	8007766 <_printf_i+0x162>
 8007764:	b2b6      	uxth	r6, r6
 8007766:	6019      	str	r1, [r3, #0]
 8007768:	07d3      	lsls	r3, r2, #31
 800776a:	d502      	bpl.n	8007772 <_printf_i+0x16e>
 800776c:	2320      	movs	r3, #32
 800776e:	4313      	orrs	r3, r2
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	2e00      	cmp	r6, #0
 8007774:	d001      	beq.n	800777a <_printf_i+0x176>
 8007776:	2710      	movs	r7, #16
 8007778:	e7aa      	b.n	80076d0 <_printf_i+0xcc>
 800777a:	2220      	movs	r2, #32
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	4393      	bics	r3, r2
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	e7f8      	b.n	8007776 <_printf_i+0x172>
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	680d      	ldr	r5, [r1, #0]
 8007788:	1d10      	adds	r0, r2, #4
 800778a:	6949      	ldr	r1, [r1, #20]
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	062e      	lsls	r6, r5, #24
 8007792:	d501      	bpl.n	8007798 <_printf_i+0x194>
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e002      	b.n	800779e <_printf_i+0x19a>
 8007798:	066d      	lsls	r5, r5, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0x190>
 800779c:	8019      	strh	r1, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	9d03      	ldr	r5, [sp, #12]
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	e7bf      	b.n	8007726 <_printf_i+0x122>
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	1d11      	adds	r1, r2, #4
 80077aa:	6019      	str	r1, [r3, #0]
 80077ac:	6815      	ldr	r5, [r2, #0]
 80077ae:	2100      	movs	r1, #0
 80077b0:	0028      	movs	r0, r5
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	f000 f974 	bl	8007aa0 <memchr>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d001      	beq.n	80077c0 <_printf_i+0x1bc>
 80077bc:	1b40      	subs	r0, r0, r5
 80077be:	6060      	str	r0, [r4, #4]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2300      	movs	r3, #0
 80077c6:	9a03      	ldr	r2, [sp, #12]
 80077c8:	7013      	strb	r3, [r2, #0]
 80077ca:	e7ac      	b.n	8007726 <_printf_i+0x122>
 80077cc:	002a      	movs	r2, r5
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	9906      	ldr	r1, [sp, #24]
 80077d2:	9805      	ldr	r0, [sp, #20]
 80077d4:	9d07      	ldr	r5, [sp, #28]
 80077d6:	47a8      	blx	r5
 80077d8:	3001      	adds	r0, #1
 80077da:	d0ae      	beq.n	800773a <_printf_i+0x136>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	079b      	lsls	r3, r3, #30
 80077e0:	d415      	bmi.n	800780e <_printf_i+0x20a>
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	68e0      	ldr	r0, [r4, #12]
 80077e6:	4298      	cmp	r0, r3
 80077e8:	daa9      	bge.n	800773e <_printf_i+0x13a>
 80077ea:	0018      	movs	r0, r3
 80077ec:	e7a7      	b.n	800773e <_printf_i+0x13a>
 80077ee:	0022      	movs	r2, r4
 80077f0:	2301      	movs	r3, #1
 80077f2:	9906      	ldr	r1, [sp, #24]
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	9e07      	ldr	r6, [sp, #28]
 80077f8:	3219      	adds	r2, #25
 80077fa:	47b0      	blx	r6
 80077fc:	3001      	adds	r0, #1
 80077fe:	d09c      	beq.n	800773a <_printf_i+0x136>
 8007800:	3501      	adds	r5, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	42ab      	cmp	r3, r5
 800780a:	dcf0      	bgt.n	80077ee <_printf_i+0x1ea>
 800780c:	e7e9      	b.n	80077e2 <_printf_i+0x1de>
 800780e:	2500      	movs	r5, #0
 8007810:	e7f7      	b.n	8007802 <_printf_i+0x1fe>
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	0800825d 	.word	0x0800825d
 8007818:	0800826e 	.word	0x0800826e

0800781c <__sflush_r>:
 800781c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800781e:	220c      	movs	r2, #12
 8007820:	5e8b      	ldrsh	r3, [r1, r2]
 8007822:	0005      	movs	r5, r0
 8007824:	000c      	movs	r4, r1
 8007826:	071a      	lsls	r2, r3, #28
 8007828:	d456      	bmi.n	80078d8 <__sflush_r+0xbc>
 800782a:	684a      	ldr	r2, [r1, #4]
 800782c:	2a00      	cmp	r2, #0
 800782e:	dc02      	bgt.n	8007836 <__sflush_r+0x1a>
 8007830:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007832:	2a00      	cmp	r2, #0
 8007834:	dd4e      	ble.n	80078d4 <__sflush_r+0xb8>
 8007836:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007838:	2f00      	cmp	r7, #0
 800783a:	d04b      	beq.n	80078d4 <__sflush_r+0xb8>
 800783c:	2200      	movs	r2, #0
 800783e:	2080      	movs	r0, #128	@ 0x80
 8007840:	682e      	ldr	r6, [r5, #0]
 8007842:	602a      	str	r2, [r5, #0]
 8007844:	001a      	movs	r2, r3
 8007846:	0140      	lsls	r0, r0, #5
 8007848:	6a21      	ldr	r1, [r4, #32]
 800784a:	4002      	ands	r2, r0
 800784c:	4203      	tst	r3, r0
 800784e:	d033      	beq.n	80078b8 <__sflush_r+0x9c>
 8007850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	075b      	lsls	r3, r3, #29
 8007856:	d506      	bpl.n	8007866 <__sflush_r+0x4a>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <__sflush_r+0x4a>
 8007862:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007864:	1ad2      	subs	r2, r2, r3
 8007866:	2300      	movs	r3, #0
 8007868:	0028      	movs	r0, r5
 800786a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800786c:	6a21      	ldr	r1, [r4, #32]
 800786e:	47b8      	blx	r7
 8007870:	89a2      	ldrh	r2, [r4, #12]
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d106      	bne.n	8007884 <__sflush_r+0x68>
 8007876:	6829      	ldr	r1, [r5, #0]
 8007878:	291d      	cmp	r1, #29
 800787a:	d846      	bhi.n	800790a <__sflush_r+0xee>
 800787c:	4b29      	ldr	r3, [pc, #164]	@ (8007924 <__sflush_r+0x108>)
 800787e:	40cb      	lsrs	r3, r1
 8007880:	07db      	lsls	r3, r3, #31
 8007882:	d542      	bpl.n	800790a <__sflush_r+0xee>
 8007884:	2300      	movs	r3, #0
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	04d2      	lsls	r2, r2, #19
 800788e:	d505      	bpl.n	800789c <__sflush_r+0x80>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <__sflush_r+0x7e>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d100      	bne.n	800789c <__sflush_r+0x80>
 800789a:	6560      	str	r0, [r4, #84]	@ 0x54
 800789c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800789e:	602e      	str	r6, [r5, #0]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	d017      	beq.n	80078d4 <__sflush_r+0xb8>
 80078a4:	0023      	movs	r3, r4
 80078a6:	3344      	adds	r3, #68	@ 0x44
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d002      	beq.n	80078b2 <__sflush_r+0x96>
 80078ac:	0028      	movs	r0, r5
 80078ae:	f7ff fcab 	bl	8007208 <_free_r>
 80078b2:	2300      	movs	r3, #0
 80078b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b6:	e00d      	b.n	80078d4 <__sflush_r+0xb8>
 80078b8:	2301      	movs	r3, #1
 80078ba:	0028      	movs	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	0002      	movs	r2, r0
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d1c6      	bne.n	8007852 <__sflush_r+0x36>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0c3      	beq.n	8007852 <__sflush_r+0x36>
 80078ca:	2b1d      	cmp	r3, #29
 80078cc:	d001      	beq.n	80078d2 <__sflush_r+0xb6>
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d11a      	bne.n	8007908 <__sflush_r+0xec>
 80078d2:	602e      	str	r6, [r5, #0]
 80078d4:	2000      	movs	r0, #0
 80078d6:	e01e      	b.n	8007916 <__sflush_r+0xfa>
 80078d8:	690e      	ldr	r6, [r1, #16]
 80078da:	2e00      	cmp	r6, #0
 80078dc:	d0fa      	beq.n	80078d4 <__sflush_r+0xb8>
 80078de:	680f      	ldr	r7, [r1, #0]
 80078e0:	600e      	str	r6, [r1, #0]
 80078e2:	1bba      	subs	r2, r7, r6
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	079b      	lsls	r3, r3, #30
 80078ea:	d100      	bne.n	80078ee <__sflush_r+0xd2>
 80078ec:	694a      	ldr	r2, [r1, #20]
 80078ee:	60a2      	str	r2, [r4, #8]
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	ddee      	ble.n	80078d4 <__sflush_r+0xb8>
 80078f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80078f8:	0032      	movs	r2, r6
 80078fa:	001f      	movs	r7, r3
 80078fc:	0028      	movs	r0, r5
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	47b8      	blx	r7
 8007904:	2800      	cmp	r0, #0
 8007906:	dc07      	bgt.n	8007918 <__sflush_r+0xfc>
 8007908:	89a2      	ldrh	r2, [r4, #12]
 800790a:	2340      	movs	r3, #64	@ 0x40
 800790c:	2001      	movs	r0, #1
 800790e:	4313      	orrs	r3, r2
 8007910:	b21b      	sxth	r3, r3
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	4240      	negs	r0, r0
 8007916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	1836      	adds	r6, r6, r0
 800791c:	1a1b      	subs	r3, r3, r0
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	e7e6      	b.n	80078f0 <__sflush_r+0xd4>
 8007922:	46c0      	nop			@ (mov r8, r8)
 8007924:	20400001 	.word	0x20400001

08007928 <_fflush_r>:
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	0005      	movs	r5, r0
 800792e:	000c      	movs	r4, r1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <_fflush_r+0x12>
 8007934:	2500      	movs	r5, #0
 8007936:	0028      	movs	r0, r5
 8007938:	bd70      	pop	{r4, r5, r6, pc}
 800793a:	2800      	cmp	r0, #0
 800793c:	d004      	beq.n	8007948 <_fflush_r+0x20>
 800793e:	6a03      	ldr	r3, [r0, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <_fflush_r+0x20>
 8007944:	f7ff fa06 	bl	8006d54 <__sinit>
 8007948:	220c      	movs	r2, #12
 800794a:	5ea3      	ldrsh	r3, [r4, r2]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f1      	beq.n	8007934 <_fflush_r+0xc>
 8007950:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007952:	07d2      	lsls	r2, r2, #31
 8007954:	d404      	bmi.n	8007960 <_fflush_r+0x38>
 8007956:	059b      	lsls	r3, r3, #22
 8007958:	d402      	bmi.n	8007960 <_fflush_r+0x38>
 800795a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795c:	f7ff fc41 	bl	80071e2 <__retarget_lock_acquire_recursive>
 8007960:	0028      	movs	r0, r5
 8007962:	0021      	movs	r1, r4
 8007964:	f7ff ff5a 	bl	800781c <__sflush_r>
 8007968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796a:	0005      	movs	r5, r0
 800796c:	07db      	lsls	r3, r3, #31
 800796e:	d4e2      	bmi.n	8007936 <_fflush_r+0xe>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	059b      	lsls	r3, r3, #22
 8007974:	d4df      	bmi.n	8007936 <_fflush_r+0xe>
 8007976:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007978:	f7ff fc34 	bl	80071e4 <__retarget_lock_release_recursive>
 800797c:	e7db      	b.n	8007936 <_fflush_r+0xe>
	...

08007980 <__swhatbuf_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	000e      	movs	r6, r1
 8007984:	001d      	movs	r5, r3
 8007986:	230e      	movs	r3, #14
 8007988:	5ec9      	ldrsh	r1, [r1, r3]
 800798a:	0014      	movs	r4, r2
 800798c:	b096      	sub	sp, #88	@ 0x58
 800798e:	2900      	cmp	r1, #0
 8007990:	da0c      	bge.n	80079ac <__swhatbuf_r+0x2c>
 8007992:	89b2      	ldrh	r2, [r6, #12]
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	0011      	movs	r1, r2
 8007998:	4019      	ands	r1, r3
 800799a:	421a      	tst	r2, r3
 800799c:	d114      	bne.n	80079c8 <__swhatbuf_r+0x48>
 800799e:	2380      	movs	r3, #128	@ 0x80
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	2000      	movs	r0, #0
 80079a4:	6029      	str	r1, [r5, #0]
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	b016      	add	sp, #88	@ 0x58
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	466a      	mov	r2, sp
 80079ae:	f000 f853 	bl	8007a58 <_fstat_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	dbed      	blt.n	8007992 <__swhatbuf_r+0x12>
 80079b6:	23f0      	movs	r3, #240	@ 0xf0
 80079b8:	9901      	ldr	r1, [sp, #4]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	4019      	ands	r1, r3
 80079be:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <__swhatbuf_r+0x50>)
 80079c0:	18c9      	adds	r1, r1, r3
 80079c2:	424b      	negs	r3, r1
 80079c4:	4159      	adcs	r1, r3
 80079c6:	e7ea      	b.n	800799e <__swhatbuf_r+0x1e>
 80079c8:	2100      	movs	r1, #0
 80079ca:	2340      	movs	r3, #64	@ 0x40
 80079cc:	e7e9      	b.n	80079a2 <__swhatbuf_r+0x22>
 80079ce:	46c0      	nop			@ (mov r8, r8)
 80079d0:	ffffe000 	.word	0xffffe000

080079d4 <__smakebuf_r>:
 80079d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d6:	2602      	movs	r6, #2
 80079d8:	898b      	ldrh	r3, [r1, #12]
 80079da:	0005      	movs	r5, r0
 80079dc:	000c      	movs	r4, r1
 80079de:	b085      	sub	sp, #20
 80079e0:	4233      	tst	r3, r6
 80079e2:	d007      	beq.n	80079f4 <__smakebuf_r+0x20>
 80079e4:	0023      	movs	r3, r4
 80079e6:	3347      	adds	r3, #71	@ 0x47
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	2301      	movs	r3, #1
 80079ee:	6163      	str	r3, [r4, #20]
 80079f0:	b005      	add	sp, #20
 80079f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	aa02      	add	r2, sp, #8
 80079f8:	f7ff ffc2 	bl	8007980 <__swhatbuf_r>
 80079fc:	9f02      	ldr	r7, [sp, #8]
 80079fe:	9001      	str	r0, [sp, #4]
 8007a00:	0039      	movs	r1, r7
 8007a02:	0028      	movs	r0, r5
 8007a04:	f7ff f886 	bl	8006b14 <_malloc_r>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d108      	bne.n	8007a1e <__smakebuf_r+0x4a>
 8007a0c:	220c      	movs	r2, #12
 8007a0e:	5ea3      	ldrsh	r3, [r4, r2]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d4ed      	bmi.n	80079f0 <__smakebuf_r+0x1c>
 8007a14:	2203      	movs	r2, #3
 8007a16:	4393      	bics	r3, r2
 8007a18:	431e      	orrs	r6, r3
 8007a1a:	81a6      	strh	r6, [r4, #12]
 8007a1c:	e7e2      	b.n	80079e4 <__smakebuf_r+0x10>
 8007a1e:	2380      	movs	r3, #128	@ 0x80
 8007a20:	89a2      	ldrh	r2, [r4, #12]
 8007a22:	6020      	str	r0, [r4, #0]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	6120      	str	r0, [r4, #16]
 8007a2c:	6167      	str	r7, [r4, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00c      	beq.n	8007a4c <__smakebuf_r+0x78>
 8007a32:	0028      	movs	r0, r5
 8007a34:	230e      	movs	r3, #14
 8007a36:	5ee1      	ldrsh	r1, [r4, r3]
 8007a38:	f000 f820 	bl	8007a7c <_isatty_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d005      	beq.n	8007a4c <__smakebuf_r+0x78>
 8007a40:	2303      	movs	r3, #3
 8007a42:	89a2      	ldrh	r2, [r4, #12]
 8007a44:	439a      	bics	r2, r3
 8007a46:	3b02      	subs	r3, #2
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	9a01      	ldr	r2, [sp, #4]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	e7cc      	b.n	80079f0 <__smakebuf_r+0x1c>
	...

08007a58 <_fstat_r>:
 8007a58:	2300      	movs	r3, #0
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	4d06      	ldr	r5, [pc, #24]	@ (8007a78 <_fstat_r+0x20>)
 8007a5e:	0004      	movs	r4, r0
 8007a60:	0008      	movs	r0, r1
 8007a62:	0011      	movs	r1, r2
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	f7f9 f940 	bl	8000cea <_fstat>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d103      	bne.n	8007a76 <_fstat_r+0x1e>
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d000      	beq.n	8007a76 <_fstat_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	200003c4 	.word	0x200003c4

08007a7c <_isatty_r>:
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	4d06      	ldr	r5, [pc, #24]	@ (8007a9c <_isatty_r+0x20>)
 8007a82:	0004      	movs	r4, r0
 8007a84:	0008      	movs	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7f9 f93d 	bl	8000d06 <_isatty>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d103      	bne.n	8007a98 <_isatty_r+0x1c>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d000      	beq.n	8007a98 <_isatty_r+0x1c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	200003c4 	.word	0x200003c4

08007aa0 <memchr>:
 8007aa0:	b2c9      	uxtb	r1, r1
 8007aa2:	1882      	adds	r2, r0, r2
 8007aa4:	4290      	cmp	r0, r2
 8007aa6:	d101      	bne.n	8007aac <memchr+0xc>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4770      	bx	lr
 8007aac:	7803      	ldrb	r3, [r0, #0]
 8007aae:	428b      	cmp	r3, r1
 8007ab0:	d0fb      	beq.n	8007aaa <memchr+0xa>
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	e7f6      	b.n	8007aa4 <memchr+0x4>
	...

08007ab8 <_init>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	46c0      	nop			@ (mov r8, r8)
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_fini>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr
