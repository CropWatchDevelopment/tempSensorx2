
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a24  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c00  08005c00  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c04  08005c04  00006c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000060  08005c68  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  200004f0  08005c68  000074f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117a0  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3b  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb3  00000000  00000000  0001c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a23  00000000  00000000  0001d24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014894  00000000  00000000  00033c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865fc  00000000  00000000  00048502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ceafe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000ceb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d23d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005acc 	.word	0x08005acc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005acc 	.word	0x08005acc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <MX_DMA_Init+0x48>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_DMA_Init+0x48>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <MX_DMA_Init+0x48>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200a      	movs	r0, #10
 8000480:	f000 ff9e 	bl	80013c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 ffb0 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200b      	movs	r0, #11
 8000490:	f000 ff96 	bl	80013c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000494:	200b      	movs	r0, #11
 8000496:	f000 ffa8 	bl	80013ea <HAL_NVIC_EnableIRQ>

}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b089      	sub	sp, #36	@ 0x24
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	240c      	movs	r4, #12
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f005 fa3b 	bl	8005934 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b28      	ldr	r3, [pc, #160]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c2:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ca:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ce:	2204      	movs	r2, #4
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004f4:	2102      	movs	r1, #2
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_GPIO_Init+0xb8>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004fe:	2202      	movs	r2, #2
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_GPIO_Init+0xbc>)
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fc35 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2220      	movs	r2, #32
 8000516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	23a0      	movs	r3, #160	@ 0xa0
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f001 f9c5 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2220      	movs	r2, #32
 8000538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800054c:	187b      	adds	r3, r7, r1
 800054e:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <MX_GPIO_Init+0xbc>)
 8000550:	0019      	movs	r1, r3
 8000552:	0010      	movs	r0, r2
 8000554:	f001 f9b2 	bl	80018bc <HAL_GPIO_Init>

}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b009      	add	sp, #36	@ 0x24
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	50000400 	.word	0x50000400

08000568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <MX_I2C1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_I2C1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000202;
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <MX_I2C1_Init+0x74>)
 8000574:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <MX_I2C1_Init+0x7c>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <MX_I2C1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MX_I2C1_Init+0x74>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fc07 	bl	8001db8 <HAL_I2C_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ae:	f000 fb09 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <MX_I2C1_Init+0x74>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fcd4 	bl	8001f64 <HAL_I2CEx_ConfigAnalogFilter>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fb00 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <MX_I2C1_Init+0x74>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fd17 	bl	8001ffc <HAL_I2CEx_ConfigDigitalFilter>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 faf7 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	40005400 	.word	0x40005400
 80005e4:	00000202 	.word	0x00000202

080005e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	@ 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	240c      	movs	r4, #12
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f005 f99a 	bl	8005934 <memset>
  if(i2cHandle->Instance==I2C1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <HAL_I2C_MspInit+0x7c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d128      	bne.n	800065c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <HAL_I2C_MspInit+0x80>)
 800060c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <HAL_I2C_MspInit+0x80>)
 8000610:	2102      	movs	r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_I2C_MspInit+0x80>)
 8000618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061a:	2202      	movs	r2, #2
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	22c0      	movs	r2, #192	@ 0xc0
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2212      	movs	r2, #18
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2201      	movs	r2, #1
 8000634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2203      	movs	r2, #3
 800063a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	187b      	adds	r3, r7, r1
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <HAL_I2C_MspInit+0x84>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f001 f937 	bl	80018bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_I2C_MspInit+0x80>)
 8000650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_I2C_MspInit+0x80>)
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	0389      	lsls	r1, r1, #14
 8000658:	430a      	orrs	r2, r1
 800065a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b009      	add	sp, #36	@ 0x24
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	50000400 	.word	0x50000400

08000670 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <HAL_I2C_MspDeInit+0x3c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d10f      	bne.n	80006a2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <HAL_I2C_MspDeInit+0x40>)
 8000684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_I2C_MspDeInit+0x40>)
 8000688:	490a      	ldr	r1, [pc, #40]	@ (80006b4 <HAL_I2C_MspDeInit+0x44>)
 800068a:	400a      	ands	r2, r1
 800068c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_I2C_MspDeInit+0x48>)
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fa90 	bl	8001bb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <HAL_I2C_MspDeInit+0x48>)
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fa8b 	bl	8001bb8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	ffdfffff 	.word	0xffdfffff
 80006b8:	50000400 	.word	0x50000400

080006bc <cb_WAKE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cb_WAKE(const char* str)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  __NOP();
 80006c4:	46c0      	nop			@ (mov r8, r8)
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <cb_OK>:
void cb_OK(const char* str)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  __NOP();
 80006d6:	46c0      	nop			@ (mov r8, r8)
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <cb_JOIN>:
void cb_JOIN(const char* str)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	switch (str[7]) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3307      	adds	r3, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b46      	cmp	r3, #70	@ 0x46
 80006f0:	d008      	beq.n	8000704 <cb_JOIN+0x24>
 80006f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80006f4:	d10a      	bne.n	800070c <cb_JOIN+0x2c>
		case 'O':
			joined = true;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <cb_JOIN+0x40>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
			device_state = DEVICE_COLLECT_DATA;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <cb_JOIN+0x44>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
			break;
 8000702:	e004      	b.n	800070e <cb_JOIN+0x2e>
		case 'F':
			joined = false;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <cb_JOIN+0x40>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
			break;
 800070a:	e000      	b.n	800070e <cb_JOIN+0x2e>
		default:
			__NOP();
 800070c:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_Delay(500);
 800070e:	23fa      	movs	r3, #250	@ 0xfa
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fd84 	bl	8001220 <HAL_Delay>
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000148 	.word	0x20000148
 8000724:	20000000 	.word	0x20000000

08000728 <enter_low_power_mode>:
};



void enter_low_power_mode(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af04      	add	r7, sp, #16

	ATC_SendReceive(&dbg, "Going to sleep\r\n", 1000, NULL, 3000, 1, "OK");
 800072e:	23fa      	movs	r3, #250	@ 0xfa
 8000730:	009a      	lsls	r2, r3, #2
 8000732:	491b      	ldr	r1, [pc, #108]	@ (80007a0 <enter_low_power_mode+0x78>)
 8000734:	481b      	ldr	r0, [pc, #108]	@ (80007a4 <enter_low_power_mode+0x7c>)
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <enter_low_power_mode+0x80>)
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2301      	movs	r3, #1
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <enter_low_power_mode+0x84>)
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	f004 fec1 	bl	80054ca <ATC_SendReceive>
	// De-init I2C
	HAL_I2C_DeInit(&hi2c1);
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <enter_low_power_mode+0x88>)
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fbda 	bl	8001f04 <HAL_I2C_DeInit>

//	HARDWARE_PWR_SleepOptimisation(); // WHERE DID THIS GO????

	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <enter_low_power_mode+0x8c>)
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fe7a 	bl	800344c <HAL_RTCEx_DeactivateWakeUpTimer>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <enter_low_power_mode+0x38>
	    {
	        Error_Handler();
 800075c:	f000 fa32 	bl	8000bc4 <Error_Handler>
	    }

	    /* Configure RTC wake‑up timer for 60 seconds */
	    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <enter_low_power_mode+0x8c>)
 8000762:	2204      	movs	r2, #4
 8000764:	213b      	movs	r1, #59	@ 0x3b
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fd98 	bl	800329c <HAL_RTCEx_SetWakeUpTimer_IT>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <enter_low_power_mode+0x4c>
	    {
	        Error_Handler();
 8000770:	f000 fa28 	bl	8000bc4 <Error_Handler>
	    }

	/* Configure RTC wake-up timer for 60 seconds */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <enter_low_power_mode+0x8c>)
 8000776:	2204      	movs	r2, #4
 8000778:	213b      	movs	r1, #59	@ 0x3b
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fd8e 	bl	800329c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <enter_low_power_mode+0x60>
	{
	Error_Handler();
 8000784:	f000 fa1e 	bl	8000bc4 <Error_Handler>
	}

	// Enter Stop Mode with low power regulator
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000788:	2101      	movs	r1, #1
 800078a:	2001      	movs	r0, #1
 800078c:	f001 fc82 	bl	8002094 <HAL_PWR_EnterSTOPMode>

	// When we wake up, execution continues here
	SystemClock_Config();
 8000790:	f000 f970 	bl	8000a74 <SystemClock_Config>
	exit_low_power_mode();
 8000794:	f000 f810 	bl	80007b8 <exit_low_power_mode>
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	08005af8 	.word	0x08005af8
 80007a4:	2000010c 	.word	0x2000010c
 80007a8:	08005aec 	.word	0x08005aec
 80007ac:	00000bb8 	.word	0x00000bb8
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	2000014c 	.word	0x2000014c

080007b8 <exit_low_power_mode>:

void exit_low_power_mode(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af04      	add	r7, sp, #16
    // Re-enable peripheral clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b39      	ldr	r3, [pc, #228]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ca:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007da:	4b32      	ldr	r3, [pc, #200]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007dc:	2102      	movs	r1, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e6:	2202      	movs	r2, #2
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007f2:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007f4:	2104      	movs	r1, #4
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <exit_low_power_mode+0xec>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	2204      	movs	r2, #4
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <exit_low_power_mode+0xec>)
 8000808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <exit_low_power_mode+0xec>)
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0389      	lsls	r1, r1, #14
 8000810:	430a      	orrs	r2, r1
 8000812:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000814:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <exit_low_power_mode+0xec>)
 8000816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <exit_low_power_mode+0xec>)
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	02c9      	lsls	r1, r1, #11
 800081e:	430a      	orrs	r2, r1
 8000820:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <exit_low_power_mode+0xec>)
 8000824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <exit_low_power_mode+0xec>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
 800082e:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <exit_low_power_mode+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
    
    // Reinitialize GPIOs (this will restore PB5 to its normal configuration)
    MX_GPIO_Init();
 800083a:	f7ff fe35 	bl	80004a8 <MX_GPIO_Init>
    MX_DMA_Init();                              // I did this because it is in the same order as it was generated
 800083e:	f7ff fe0d 	bl	800045c <MX_DMA_Init>
    MX_I2C1_Init();
 8000842:	f7ff fe91 	bl	8000568 <MX_I2C1_Init>
    MX_LPUART1_UART_Init();
 8000846:	f000 fabf 	bl	8000dc8 <MX_LPUART1_UART_Init>
    MX_USART1_UART_Init();
 800084a:	f000 faeb 	bl	8000e24 <MX_USART1_UART_Init>
    MX_RTC_Init();
 800084e:	f000 f9bf 	bl	8000bd0 <MX_RTC_Init>
    ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // this SHOULD make the ATC serial commands workagain
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <exit_low_power_mode+0xf0>)
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	4914      	ldr	r1, [pc, #80]	@ (80008ac <exit_low_power_mode+0xf4>)
 800085a:	4815      	ldr	r0, [pc, #84]	@ (80008b0 <exit_low_power_mode+0xf8>)
 800085c:	f004 fd36 	bl	80052cc <ATC_Init>
    ATC_Init(&dbg, &huart1, 512, "Debug");
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <exit_low_power_mode+0xfc>)
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	4914      	ldr	r1, [pc, #80]	@ (80008b8 <exit_low_power_mode+0x100>)
 8000868:	4814      	ldr	r0, [pc, #80]	@ (80008bc <exit_low_power_mode+0x104>)
 800086a:	f004 fd2f 	bl	80052cc <ATC_Init>
    ATC_SetEvents(&lora, events);               // Setup all async events again
 800086e:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <exit_low_power_mode+0x108>)
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <exit_low_power_mode+0xf8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f004 fde0 	bl	800543a <ATC_SetEvents>
    device_state = DEVICE_COLLECT_DATA;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <exit_low_power_mode+0x10c>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]


    ATC_SendReceive(&dbg, "Waking UP!\r\n", 1000, NULL, 3000, 1, "OK");
 8000880:	23fa      	movs	r3, #250	@ 0xfa
 8000882:	009a      	lsls	r2, r3, #2
 8000884:	4910      	ldr	r1, [pc, #64]	@ (80008c8 <exit_low_power_mode+0x110>)
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <exit_low_power_mode+0x104>)
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <exit_low_power_mode+0x114>)
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	2301      	movs	r3, #1
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <exit_low_power_mode+0x118>)
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	f004 fe18 	bl	80054ca <ATC_SendReceive>
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b004      	add	sp, #16
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000
 80008a8:	08005b0c 	.word	0x08005b0c
 80008ac:	20000174 	.word	0x20000174
 80008b0:	200000d0 	.word	0x200000d0
 80008b4:	08005b14 	.word	0x08005b14
 80008b8:	200001fc 	.word	0x200001fc
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	08005b6c 	.word	0x08005b6c
 80008c4:	20000000 	.word	0x20000000
 80008c8:	08005b1c 	.word	0x08005b1c
 80008cc:	08005aec 	.word	0x08005aec
 80008d0:	00000bb8 	.word	0x00000bb8

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fc31 	bl	8001140 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f8c9 	bl	8000a74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f7ff fde1 	bl	80004a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008e6:	f7ff fdb9 	bl	800045c <MX_DMA_Init>
  MX_I2C1_Init();
 80008ea:	f7ff fe3d 	bl	8000568 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80008ee:	f000 fa6b 	bl	8000dc8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80008f2:	f000 f96d 	bl	8000bd0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80008f6:	f000 fa95 	bl	8000e24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the ATC handle before using it
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN"); // Adjust buffer size as needed
 80008fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <main+0x15c>)
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	494c      	ldr	r1, [pc, #304]	@ (8000a34 <main+0x160>)
 8000902:	484d      	ldr	r0, [pc, #308]	@ (8000a38 <main+0x164>)
 8000904:	f004 fce2 	bl	80052cc <ATC_Init>
  ATC_Init(&dbg, &huart1, 512, "Debug");
 8000908:	4b4c      	ldr	r3, [pc, #304]	@ (8000a3c <main+0x168>)
 800090a:	2280      	movs	r2, #128	@ 0x80
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	494c      	ldr	r1, [pc, #304]	@ (8000a40 <main+0x16c>)
 8000910:	484c      	ldr	r0, [pc, #304]	@ (8000a44 <main+0x170>)
 8000912:	f004 fcdb 	bl	80052cc <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000916:	4a4c      	ldr	r2, [pc, #304]	@ (8000a48 <main+0x174>)
 8000918:	4b47      	ldr	r3, [pc, #284]	@ (8000a38 <main+0x164>)
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f004 fd8c 	bl	800543a <ATC_SetEvents>

  ATC_SendReceive(&dbg, "RDY\r\n", 1000, NULL, 3000, 1, "OK");
 8000922:	23fa      	movs	r3, #250	@ 0xfa
 8000924:	009a      	lsls	r2, r3, #2
 8000926:	4949      	ldr	r1, [pc, #292]	@ (8000a4c <main+0x178>)
 8000928:	4846      	ldr	r0, [pc, #280]	@ (8000a44 <main+0x170>)
 800092a:	4b49      	ldr	r3, [pc, #292]	@ (8000a50 <main+0x17c>)
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2301      	movs	r3, #1
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	4b48      	ldr	r3, [pc, #288]	@ (8000a54 <main+0x180>)
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	f004 fdc7 	bl	80054ca <ATC_SendReceive>
  HAL_Delay(10000); // This makes it easier to debug, don't remove
 800093c:	4b46      	ldr	r3, [pc, #280]	@ (8000a58 <main+0x184>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fc6e 	bl	8001220 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char* ATSEND_Result = NULL;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  uint32_t last_command_time = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]

  while(1)
  {
      ATC_Loop(&lora);
 800094c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <main+0x164>)
 800094e:	0018      	movs	r0, r3
 8000950:	f004 fdab 	bl	80054aa <ATC_Loop>
      
      switch (device_state)
 8000954:	4b41      	ldr	r3, [pc, #260]	@ (8000a5c <main+0x188>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d005      	beq.n	800096a <main+0x96>
 800095e:	dcf5      	bgt.n	800094c <main+0x78>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d032      	beq.n	80009ca <main+0xf6>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d033      	beq.n	80009d0 <main+0xfc>
 8000968:	e060      	b.n	8000a2c <main+0x158>
      {
      case LORAWAN_JOIN:
          if (HAL_GetTick() - last_command_time > 10000 && !joined)
 800096a:	f000 fc4f 	bl	800120c <HAL_GetTick>
 800096e:	0002      	movs	r2, r0
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4a38      	ldr	r2, [pc, #224]	@ (8000a58 <main+0x184>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d957      	bls.n	8000a2a <main+0x156>
 800097a:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <main+0x18c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	4053      	eors	r3, r2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d050      	beq.n	8000a2a <main+0x156>
          {
        	  // this always works
        	  ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK"); // This wakes the LoRa Module, it can be anything, so AT is best
 8000988:	003c      	movs	r4, r7
 800098a:	23fa      	movs	r3, #250	@ 0xfa
 800098c:	009a      	lsls	r2, r3, #2
 800098e:	4935      	ldr	r1, [pc, #212]	@ (8000a64 <main+0x190>)
 8000990:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <main+0x164>)
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <main+0x17c>)
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a54 <main+0x180>)
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	0023      	movs	r3, r4
 80009a0:	f004 fd93 	bl	80054ca <ATC_SendReceive>
              ATC_SendReceive(&lora, "AT+JOIN\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009a4:	003c      	movs	r4, r7
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	009a      	lsls	r2, r3, #2
 80009aa:	492f      	ldr	r1, [pc, #188]	@ (8000a68 <main+0x194>)
 80009ac:	4822      	ldr	r0, [pc, #136]	@ (8000a38 <main+0x164>)
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <main+0x17c>)
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <main+0x180>)
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	0023      	movs	r3, r4
 80009bc:	f004 fd85 	bl	80054ca <ATC_SendReceive>
              last_command_time = HAL_GetTick();
 80009c0:	f000 fc24 	bl	800120c <HAL_GetTick>
 80009c4:	0003      	movs	r3, r0
 80009c6:	607b      	str	r3, [r7, #4]
          }
	  break;
 80009c8:	e02f      	b.n	8000a2a <main+0x156>
	  case DEVICE_SLEEP:
		  enter_low_power_mode();
 80009ca:	f7ff fead 	bl	8000728 <enter_low_power_mode>
	  break;
 80009ce:	e02d      	b.n	8000a2c <main+0x158>
	  case DEVICE_COLLECT_DATA:
		  ATC_SendReceive(&dbg, "Sending data...\r\n", 1000, NULL, 3000, 1, "OK");
 80009d0:	23fa      	movs	r3, #250	@ 0xfa
 80009d2:	009a      	lsls	r2, r3, #2
 80009d4:	4925      	ldr	r1, [pc, #148]	@ (8000a6c <main+0x198>)
 80009d6:	481b      	ldr	r0, [pc, #108]	@ (8000a44 <main+0x170>)
 80009d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <main+0x17c>)
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2301      	movs	r3, #1
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <main+0x180>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	f004 fd70 	bl	80054ca <ATC_SendReceive>
		  // what sucks is when the device sleeps, I loose debugger session, so i can't get a break point here after sleep!
		  ATC_SendReceive(&lora, "AT\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 80009ea:	003c      	movs	r4, r7
 80009ec:	23fa      	movs	r3, #250	@ 0xfa
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	491c      	ldr	r1, [pc, #112]	@ (8000a64 <main+0x190>)
 80009f2:	4811      	ldr	r0, [pc, #68]	@ (8000a38 <main+0x164>)
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <main+0x17c>)
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <main+0x180>)
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	0023      	movs	r3, r4
 8000a02:	f004 fd62 	bl	80054ca <ATC_SendReceive>
		  ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 1000, &ATSEND_Result, 3000, 1, "OK");
 8000a06:	003c      	movs	r4, r7
 8000a08:	23fa      	movs	r3, #250	@ 0xfa
 8000a0a:	009a      	lsls	r2, r3, #2
 8000a0c:	4918      	ldr	r1, [pc, #96]	@ (8000a70 <main+0x19c>)
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <main+0x164>)
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <main+0x17c>)
 8000a12:	9302      	str	r3, [sp, #8]
 8000a14:	2301      	movs	r3, #1
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <main+0x180>)
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	0023      	movs	r3, r4
 8000a1e:	f004 fd54 	bl	80054ca <ATC_SendReceive>
		  device_state = DEVICE_SLEEP;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <main+0x188>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	  break;
 8000a28:	e000      	b.n	8000a2c <main+0x158>
	  break;
 8000a2a:	46c0      	nop			@ (mov r8, r8)
      ATC_Loop(&lora);
 8000a2c:	e78e      	b.n	800094c <main+0x78>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	08005b0c 	.word	0x08005b0c
 8000a34:	20000174 	.word	0x20000174
 8000a38:	200000d0 	.word	0x200000d0
 8000a3c:	08005b14 	.word	0x08005b14
 8000a40:	200001fc 	.word	0x200001fc
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	08005b6c 	.word	0x08005b6c
 8000a4c:	08005b2c 	.word	0x08005b2c
 8000a50:	08005aec 	.word	0x08005aec
 8000a54:	00000bb8 	.word	0x00000bb8
 8000a58:	00002710 	.word	0x00002710
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000148 	.word	0x20000148
 8000a64:	08005b34 	.word	0x08005b34
 8000a68:	08005b3c 	.word	0x08005b3c
 8000a6c:	08005b48 	.word	0x08005b48
 8000a70:	08005b5c 	.word	0x08005b5c

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b09f      	sub	sp, #124	@ 0x7c
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	2440      	movs	r4, #64	@ 0x40
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2338      	movs	r3, #56	@ 0x38
 8000a82:	001a      	movs	r2, r3
 8000a84:	2100      	movs	r1, #0
 8000a86:	f004 ff55 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8a:	232c      	movs	r3, #44	@ 0x2c
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2314      	movs	r3, #20
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f004 ff4d 	bl	8005934 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2328      	movs	r3, #40	@ 0x28
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f004 ff46 	bl	8005934 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <SystemClock_Config+0xe8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2c      	ldr	r2, [pc, #176]	@ (8000b60 <SystemClock_Config+0xec>)
 8000aae:	401a      	ands	r2, r3
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <SystemClock_Config+0xe8>)
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	0109      	lsls	r1, r1, #4
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000aba:	0021      	movs	r1, r4
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2218      	movs	r2, #24
 8000ac0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2201      	movs	r2, #1
 8000acc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	0212      	lsls	r2, r2, #8
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fb31 	bl	800214c <HAL_RCC_OscConfig>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aee:	f000 f869 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	212c      	movs	r1, #44	@ 0x2c
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	220f      	movs	r2, #15
 8000af8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2100      	movs	r1, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 feec 	bl	80028f4 <HAL_RCC_ClockConfig>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b20:	f000 f850 	bl	8000bc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	222d      	movs	r2, #45	@ 0x2d
 8000b28:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0292      	lsls	r2, r2, #10
 8000b42:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 f8d8 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000b50:	f000 f838 	bl	8000bc4 <Error_Handler>
  }
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b01f      	add	sp, #124	@ 0x7c
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	40007000 	.word	0x40007000
 8000b60:	ffffe7ff 	.word	0xffffe7ff

08000b64 <HAL_UARTEx_RxEventCallback>:
  __NOP();

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	000a      	movs	r2, r1
 8000b6e:	1cbb      	adds	r3, r7, #2
 8000b70:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == LPUART1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_UARTEx_RxEventCallback+0x30>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d106      	bne.n	8000b8a <HAL_UARTEx_RxEventCallback+0x26>
  {
    ATC_IdleLineCallback(&lora, Size);
 8000b7c:	1cbb      	adds	r3, r7, #2
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_UARTEx_RxEventCallback+0x34>)
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f004 fd9a 	bl	80056be <ATC_IdleLineCallback>
  }
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40004800 	.word	0x40004800
 8000b98:	200000d0 	.word	0x200000d0

08000b9c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <HAL_UART_ErrorCallback+0x24>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d104      	bne.n	8000bb8 <HAL_UART_ErrorCallback+0x1c>
  {
    // Handle UART errors
    __HAL_UART_CLEAR_FLAG(huart, 0xFFFFFFFF);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	621a      	str	r2, [r3, #32]
  }
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004800 	.word	0x40004800

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <MX_RTC_Init+0x64>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000be2:	227f      	movs	r2, #127	@ 0x7f
 8000be4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000be8:	22ff      	movs	r2, #255	@ 0xff
 8000bea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bec:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 fa16 	bl	8003038 <HAL_RTC_Init>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c10:	f7ff ffd8 	bl	8000bc4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000c14:	4908      	ldr	r1, [pc, #32]	@ (8000c38 <MX_RTC_Init+0x68>)
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_RTC_Init+0x60>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 fb3e 	bl	800329c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c24:	f7ff ffce 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	2000014c 	.word	0x2000014c
 8000c34:	40002800 	.word	0x40002800
 8000c38:	0000500b 	.word	0x0000500b

08000c3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <HAL_RTC_MspInit+0x38>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10e      	bne.n	8000c6c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_RTC_MspInit+0x3c>)
 8000c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_RTC_MspInit+0x3c>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	02c9      	lsls	r1, r1, #11
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 fbad 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 fbbf 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40002800 	.word	0x40002800
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <HAL_MspInit+0x24>)
 8000c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_MspInit+0x24>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <HAL_MspInit+0x24>)
 8000c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_MspInit+0x24>)
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	0549      	lsls	r1, r1, #21
 8000c96:	430a      	orrs	r2, r1
 8000c98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 fa8c 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <RTC_IRQHandler+0x14>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f002 fc18 	bl	8003514 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	2000014c 	.word	0x2000014c

08000cf0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fcf9 	bl	80016ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fcf5 	bl	80016ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	200002cc 	.word	0x200002cc
 8000d10:	20000284 	.word	0x20000284

08000d14 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fce7 	bl	80016ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fce3 	bl	80016ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	2000035c 	.word	0x2000035c
 8000d34:	20000314 	.word	0x20000314

08000d38 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <RNG_LPUART1_IRQHandler+0x14>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f002 fe18 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	20000174 	.word	0x20000174

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f004 fe1c 	bl	80059bc <__errno>
 8000d84:	0003      	movs	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	18d2      	adds	r2, r2, r3
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <_sbrk+0x64>)
 8000da0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b006      	add	sp, #24
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20005000 	.word	0x20005000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000170 	.word	0x20000170
 8000db8:	200004f0 	.word	0x200004f0

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000dce:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <MX_LPUART1_UART_Init+0x58>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000dd4:	22e1      	movs	r2, #225	@ 0xe1
 8000dd6:	0252      	lsls	r2, r2, #9
 8000dd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <MX_LPUART1_UART_Init+0x54>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 fbbc 	bl	8003584 <HAL_UART_Init>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f7ff fed8 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	20000174 	.word	0x20000174
 8000e20:	40004800 	.word	0x40004800

08000e24 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	@ (8000e80 <MX_USART1_UART_Init+0x5c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e30:	2296      	movs	r2, #150	@ 0x96
 8000e32:	0192      	lsls	r2, r2, #6
 8000e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 fb8b 	bl	8003584 <HAL_UART_Init>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f7ff fea7 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200001fc 	.word	0x200001fc
 8000e80:	40013800 	.word	0x40013800

08000e84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b08b      	sub	sp, #44	@ 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	2414      	movs	r4, #20
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	0018      	movs	r0, r3
 8000e92:	2314      	movs	r3, #20
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f004 fd4c 	bl	8005934 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a87      	ldr	r2, [pc, #540]	@ (80010c0 <HAL_UART_MspInit+0x23c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d000      	beq.n	8000ea8 <HAL_UART_MspInit+0x24>
 8000ea6:	e084      	b.n	8000fb2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ea8:	4b86      	ldr	r3, [pc, #536]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eac:	4b85      	ldr	r3, [pc, #532]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	02c9      	lsls	r1, r1, #11
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b83      	ldr	r3, [pc, #524]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eba:	4b82      	ldr	r3, [pc, #520]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec2:	4b80      	ldr	r3, [pc, #512]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ece:	0021      	movs	r1, r4
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2202      	movs	r2, #2
 8000eda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2206      	movs	r2, #6
 8000eec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	187a      	adds	r2, r7, r1
 8000ef0:	23a0      	movs	r3, #160	@ 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fce0 	bl	80018bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000efc:	4b72      	ldr	r3, [pc, #456]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000efe:	4a73      	ldr	r2, [pc, #460]	@ (80010cc <HAL_UART_MspInit+0x248>)
 8000f00:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000f02:	4b71      	ldr	r3, [pc, #452]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f04:	2205      	movs	r2, #5
 8000f06:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f08:	4b6f      	ldr	r3, [pc, #444]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b6c      	ldr	r3, [pc, #432]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f20:	4b69      	ldr	r3, [pc, #420]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000f26:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2c:	4b66      	ldr	r3, [pc, #408]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f32:	4b65      	ldr	r3, [pc, #404]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa75 	bl	8001424 <HAL_DMA_Init>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000f3e:	f7ff fe41 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a60      	ldr	r2, [pc, #384]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f46:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f48:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <HAL_UART_MspInit+0x244>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f4e:	4b60      	ldr	r3, [pc, #384]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f50:	4a60      	ldr	r2, [pc, #384]	@ (80010d4 <HAL_UART_MspInit+0x250>)
 8000f52:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000f54:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f56:	2205      	movs	r2, #5
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b5b      	ldr	r3, [pc, #364]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b5a      	ldr	r3, [pc, #360]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6c:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f72:	4b57      	ldr	r3, [pc, #348]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f78:	4b55      	ldr	r3, [pc, #340]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f84:	4b52      	ldr	r3, [pc, #328]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fa4c 	bl	8001424 <HAL_DMA_Init>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f90:	f7ff fe18 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4e      	ldr	r2, [pc, #312]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f98:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80010d0 <HAL_UART_MspInit+0x24c>)
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	201d      	movs	r0, #29
 8000fa6:	f000 fa0b 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 fa1d 	bl	80013ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fb0:	e082      	b.n	80010b8 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a48      	ldr	r2, [pc, #288]	@ (80010d8 <HAL_UART_MspInit+0x254>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d000      	beq.n	8000fbe <HAL_UART_MspInit+0x13a>
 8000fbc:	e07c      	b.n	80010b8 <HAL_UART_MspInit+0x234>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbe:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc2:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	01c9      	lsls	r1, r1, #7
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <HAL_UART_MspInit+0x240>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe4:	2114      	movs	r1, #20
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	22c0      	movs	r2, #192	@ 0xc0
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2204      	movs	r2, #4
 8001004:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	187a      	adds	r2, r7, r1
 8001008:	23a0      	movs	r3, #160	@ 0xa0
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f000 fc54 	bl	80018bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001014:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001016:	4a32      	ldr	r2, [pc, #200]	@ (80010e0 <HAL_UART_MspInit+0x25c>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800101a:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <HAL_UART_MspInit+0x258>)
 800101c:	2203      	movs	r2, #3
 800101e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001020:	4b2e      	ldr	r3, [pc, #184]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001026:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800102c:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <HAL_UART_MspInit+0x258>)
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_UART_MspInit+0x258>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800103e:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800104a:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <HAL_UART_MspInit+0x258>)
 800104c:	0018      	movs	r0, r3
 800104e:	f000 f9e9 	bl	8001424 <HAL_DMA_Init>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8001056:	f7ff fdb5 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <HAL_UART_MspInit+0x258>)
 800105e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_UART_MspInit+0x258>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001068:	4a1f      	ldr	r2, [pc, #124]	@ (80010e8 <HAL_UART_MspInit+0x264>)
 800106a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 800106e:	2203      	movs	r2, #3
 8001070:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001074:	2210      	movs	r2, #16
 8001076:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 f9c0 	bl	8001424 <HAL_DMA_Init>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0x228>
      Error_Handler();
 80010a8:	f7ff fd8c 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 80010b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_UART_MspInit+0x260>)
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b00b      	add	sp, #44	@ 0x2c
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40004800 	.word	0x40004800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	20000284 	.word	0x20000284
 80010cc:	40020030 	.word	0x40020030
 80010d0:	200002cc 	.word	0x200002cc
 80010d4:	4002001c 	.word	0x4002001c
 80010d8:	40013800 	.word	0x40013800
 80010dc:	20000314 	.word	0x20000314
 80010e0:	40020058 	.word	0x40020058
 80010e4:	2000035c 	.word	0x2000035c
 80010e8:	40020044 	.word	0x40020044

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff fe64 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800111a:	f004 fc55 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fbd9 	bl	80008d4 <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
   ldr   r0, =_estack
 8001124:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001130:	08005c08 	.word	0x08005c08
  ldr r2, =_sbss
 8001134:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001138:	200004f0 	.word	0x200004f0

0800113c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_COMP_IRQHandler>
	...

08001140 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_Init+0x3c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_Init+0x3c>)
 8001152:	2140      	movs	r1, #64	@ 0x40
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001158:	2000      	movs	r0, #0
 800115a:	f000 f811 	bl	8001180 <HAL_InitTick>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d003      	beq.n	800116a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e001      	b.n	800116e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116a:	f7ff fd87 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_InitTick+0x5c>)
 800118a:	681c      	ldr	r4, [r3, #0]
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_InitTick+0x60>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	0019      	movs	r1, r3
 8001192:	23fa      	movs	r3, #250	@ 0xfa
 8001194:	0098      	lsls	r0, r3, #2
 8001196:	f7fe ffbf 	bl	8000118 <__udivsi3>
 800119a:	0003      	movs	r3, r0
 800119c:	0019      	movs	r1, r3
 800119e:	0020      	movs	r0, r4
 80011a0:	f7fe ffba 	bl	8000118 <__udivsi3>
 80011a4:	0003      	movs	r3, r0
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 f92f 	bl	800140a <HAL_SYSTICK_Config>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00f      	b.n	80011d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d80b      	bhi.n	80011d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	2200      	movs	r2, #0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f8fc 	bl	80013c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_InitTick+0x64>)
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b003      	add	sp, #12
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	20000004 	.word	0x20000004
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	001a      	movs	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	18d2      	adds	r2, r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_IncTick+0x20>)
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	2000000c 	.word	0x2000000c
 8001208:	200003a4 	.word	0x200003a4

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	200003a4 	.word	0x200003a4

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001a      	movs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	189b      	adds	r3, r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	2000000c 	.word	0x2000000c

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b7f      	cmp	r3, #127	@ 0x7f
 800127a:	d809      	bhi.n	8001290 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	231f      	movs	r3, #31
 8001284:	401a      	ands	r2, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_EnableIRQ+0x30>)
 8001288:	2101      	movs	r1, #1
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
  }
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	d828      	bhi.n	8001304 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <__NVIC_SetPriority+0xd4>)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	33c0      	adds	r3, #192	@ 0xc0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	589b      	ldr	r3, [r3, r2]
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	0011      	movs	r1, r2
 80012c8:	2203      	movs	r2, #3
 80012ca:	400a      	ands	r2, r1
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	21ff      	movs	r1, #255	@ 0xff
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	401a      	ands	r2, r3
 80012d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	22ff      	movs	r2, #255	@ 0xff
 80012e0:	401a      	ands	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0018      	movs	r0, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	4003      	ands	r3, r0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	481f      	ldr	r0, [pc, #124]	@ (8001370 <__NVIC_SetPriority+0xd4>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	430a      	orrs	r2, r1
 80012fc:	33c0      	adds	r3, #192	@ 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001302:	e031      	b.n	8001368 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0019      	movs	r1, r3
 800130c:	230f      	movs	r3, #15
 800130e:	400b      	ands	r3, r1
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3306      	adds	r3, #6
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	@ 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	@ 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001c      	movs	r4, r3
 8001354:	230f      	movs	r3, #15
 8001356:	4023      	ands	r3, r4
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	430a      	orrs	r2, r1
 800135e:	3306      	adds	r3, #6
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	18c3      	adds	r3, r0, r3
 8001364:	3304      	adds	r3, #4
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	045b      	lsls	r3, r3, #17
 8001388:	429a      	cmp	r2, r3
 800138a:	d301      	bcc.n	8001390 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138c:	2301      	movs	r3, #1
 800138e:	e010      	b.n	80013b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <SysTick_Config+0x44>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	3a01      	subs	r2, #1
 8001396:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001398:	2301      	movs	r3, #1
 800139a:	425b      	negs	r3, r3
 800139c:	2103      	movs	r1, #3
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff ff7c 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x44>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x44>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	0002      	movs	r2, r0
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffaf 	bl	8001378 <SysTick_Config>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e061      	b.n	80014fa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a32      	ldr	r2, [pc, #200]	@ (8001504 <HAL_DMA_Init+0xe0>)
 800143c:	4694      	mov	ip, r2
 800143e:	4463      	add	r3, ip
 8001440:	2114      	movs	r1, #20
 8001442:	0018      	movs	r0, r3
 8001444:	f7fe fe68 	bl	8000118 <__udivsi3>
 8001448:	0003      	movs	r3, r0
 800144a:	009a      	lsls	r2, r3, #2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a2d      	ldr	r2, [pc, #180]	@ (8001508 <HAL_DMA_Init+0xe4>)
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2225      	movs	r2, #37	@ 0x25
 800145a:	2102      	movs	r1, #2
 800145c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a28      	ldr	r2, [pc, #160]	@ (800150c <HAL_DMA_Init+0xe8>)
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d018      	beq.n	80014e2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_DMA_Init+0xec>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b8:	211c      	movs	r1, #28
 80014ba:	400b      	ands	r3, r1
 80014bc:	210f      	movs	r1, #15
 80014be:	4099      	lsls	r1, r3
 80014c0:	000b      	movs	r3, r1
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_DMA_Init+0xec>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_DMA_Init+0xec>)
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	201c      	movs	r0, #28
 80014d8:	4003      	ands	r3, r0
 80014da:	409a      	lsls	r2, r3
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_DMA_Init+0xec>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2225      	movs	r2, #37	@ 0x25
 80014ec:	2101      	movs	r1, #1
 80014ee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	@ 0x24
 80014f4:	2100      	movs	r1, #0
 80014f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	bffdfff8 	.word	0xbffdfff8
 8001508:	40020000 	.word	0x40020000
 800150c:	ffff800f 	.word	0xffff800f
 8001510:	400200a8 	.word	0x400200a8

08001514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2317      	movs	r3, #23
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2224      	movs	r2, #36	@ 0x24
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_DMA_Start_IT+0x24>
 8001534:	2302      	movs	r3, #2
 8001536:	e04f      	b.n	80015d8 <HAL_DMA_Start_IT+0xc4>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2224      	movs	r2, #36	@ 0x24
 800153c:	2101      	movs	r1, #1
 800153e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2225      	movs	r2, #37	@ 0x25
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d13a      	bne.n	80015c2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2225      	movs	r2, #37	@ 0x25
 8001550:	2102      	movs	r1, #2
 8001552:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f974 	bl	800185e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	210e      	movs	r1, #14
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e00f      	b.n	80015b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2104      	movs	r1, #4
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	210a      	movs	r1, #10
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2224      	movs	r2, #36	@ 0x24
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ca:	2317      	movs	r3, #23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80015d2:	2317      	movs	r3, #23
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b006      	add	sp, #24
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2225      	movs	r2, #37	@ 0x25
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2224      	movs	r2, #36	@ 0x24
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e024      	b.n	8001658 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	210e      	movs	r1, #14
 800161a:	438a      	bics	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	221c      	movs	r2, #28
 8001634:	401a      	ands	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	4091      	lsls	r1, r2
 800163e:	000a      	movs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2225      	movs	r2, #37	@ 0x25
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2224      	movs	r2, #36	@ 0x24
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]

    return status;
 8001652:	230f      	movs	r3, #15
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001668:	210f      	movs	r1, #15
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2225      	movs	r2, #37	@ 0x25
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d006      	beq.n	800168a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e02a      	b.n	80016e0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	210e      	movs	r1, #14
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	438a      	bics	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	221c      	movs	r2, #28
 80016b0:	401a      	ands	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2101      	movs	r1, #1
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2225      	movs	r2, #37	@ 0x25
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2224      	movs	r2, #36	@ 0x24
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	0010      	movs	r0, r2
 80016de:	4798      	blx	r3
    }
  }
  return status;
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	221c      	movs	r2, #28
 800170c:	4013      	ands	r3, r2
 800170e:	2204      	movs	r2, #4
 8001710:	409a      	lsls	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	d026      	beq.n	8001768 <HAL_DMA_IRQHandler+0x7a>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d022      	beq.n	8001768 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2220      	movs	r2, #32
 800172a:	4013      	ands	r3, r2
 800172c:	d107      	bne.n	800173e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2104      	movs	r1, #4
 800173a:	438a      	bics	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	221c      	movs	r2, #28
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2104      	movs	r1, #4
 800174c:	4091      	lsls	r1, r2
 800174e:	000a      	movs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <HAL_DMA_IRQHandler+0x6e>
 800175a:	e071      	b.n	8001840 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	0010      	movs	r0, r2
 8001764:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001766:	e06b      	b.n	8001840 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	221c      	movs	r2, #28
 800176e:	4013      	ands	r3, r2
 8001770:	2202      	movs	r2, #2
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	d02d      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xea>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d029      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2220      	movs	r2, #32
 800178c:	4013      	ands	r3, r2
 800178e:	d10b      	bne.n	80017a8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	210a      	movs	r1, #10
 800179c:	438a      	bics	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2225      	movs	r2, #37	@ 0x25
 80017a4:	2101      	movs	r1, #1
 80017a6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	221c      	movs	r2, #28
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2102      	movs	r1, #2
 80017b6:	4091      	lsls	r1, r2
 80017b8:	000a      	movs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2224      	movs	r2, #36	@ 0x24
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d039      	beq.n	8001840 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	0010      	movs	r0, r2
 80017d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017d6:	e033      	b.n	8001840 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	221c      	movs	r2, #28
 80017de:	4013      	ands	r3, r2
 80017e0:	2208      	movs	r2, #8
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	d02a      	beq.n	8001842 <HAL_DMA_IRQHandler+0x154>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	d026      	beq.n	8001842 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	210e      	movs	r1, #14
 8001800:	438a      	bics	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	221c      	movs	r2, #28
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2101      	movs	r1, #1
 8001812:	4091      	lsls	r1, r2
 8001814:	000a      	movs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2225      	movs	r2, #37	@ 0x25
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2224      	movs	r2, #36	@ 0x24
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	0010      	movs	r0, r2
 800183e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46c0      	nop			@ (mov r8, r8)
}
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001870:	221c      	movs	r2, #28
 8001872:	401a      	ands	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	2101      	movs	r1, #1
 800187a:	4091      	lsls	r1, r2
 800187c:	000a      	movs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b10      	cmp	r3, #16
 800188e:	d108      	bne.n	80018a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018a0:	e007      	b.n	80018b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	60da      	str	r2, [r3, #12]
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018d2:	e155      	b.n	8001b80 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4091      	lsls	r1, r2
 80018de:	000a      	movs	r2, r1
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x30>
 80018ea:	e146      	b.n	8001b7a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d005      	beq.n	8001904 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001900:	2b02      	cmp	r3, #2
 8001902:	d130      	bne.n	8001966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193a:	2201      	movs	r2, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	2201      	movs	r2, #1
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	4013      	ands	r3, r2
 800196e:	2b03      	cmp	r3, #3
 8001970:	d017      	beq.n	80019a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	43da      	mvns	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d123      	bne.n	80019f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	58d3      	ldr	r3, [r2, r3]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2107      	movs	r1, #7
 80019da:	400b      	ands	r3, r1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	6939      	ldr	r1, [r7, #16]
 80019f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	43da      	mvns	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	401a      	ands	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	23c0      	movs	r3, #192	@ 0xc0
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	d100      	bne.n	8001a38 <HAL_GPIO_Init+0x17c>
 8001a36:	e0a0      	b.n	8001b7a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a38:	4b57      	ldr	r3, [pc, #348]	@ (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a3c:	4b56      	ldr	r3, [pc, #344]	@ (8001b98 <HAL_GPIO_Init+0x2dc>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a44:	4a55      	ldr	r2, [pc, #340]	@ (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	589b      	ldr	r3, [r3, r2]
 8001a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4013      	ands	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	43da      	mvns	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	23a0      	movs	r3, #160	@ 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x1f6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x1f2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x1ea>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a47      	ldr	r2, [pc, #284]	@ (8001bac <HAL_GPIO_Init+0x2f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x1e6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a46      	ldr	r2, [pc, #280]	@ (8001bb0 <HAL_GPIO_Init+0x2f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x1e2>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	400a      	ands	r2, r1
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4935      	ldr	r1, [pc, #212]	@ (8001b9c <HAL_GPIO_Init+0x2e0>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	4013      	ands	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b26:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	1e13      	subs	r3, r2, #0
 8001b8a:	d000      	beq.n	8001b8e <HAL_GPIO_Init+0x2d2>
 8001b8c:	e6a2      	b.n	80018d4 <HAL_GPIO_Init+0x18>
  }
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	50000400 	.word	0x50000400
 8001ba4:	50000800 	.word	0x50000800
 8001ba8:	50000c00 	.word	0x50000c00
 8001bac:	50001000 	.word	0x50001000
 8001bb0:	50001c00 	.word	0x50001c00
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001bce:	e0bc      	b.n	8001d4a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_GPIO_DeInit+0x2c>
 8001be2:	e0af      	b.n	8001d44 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001be4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d60 <HAL_GPIO_DeInit+0x1a8>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	589b      	ldr	r3, [r3, r2]
 8001bf0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	23a0      	movs	r3, #160	@ 0xa0
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d01f      	beq.n	8001c4e <HAL_GPIO_DeInit+0x96>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a54      	ldr	r2, [pc, #336]	@ (8001d64 <HAL_GPIO_DeInit+0x1ac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_DeInit+0x92>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a53      	ldr	r2, [pc, #332]	@ (8001d68 <HAL_GPIO_DeInit+0x1b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_DeInit+0x8e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	@ (8001d6c <HAL_GPIO_DeInit+0x1b4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_DeInit+0x8a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	@ (8001d70 <HAL_GPIO_DeInit+0x1b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_DeInit+0x86>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_GPIO_DeInit+0x1bc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_DeInit+0x82>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_DeInit+0x98>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	2103      	movs	r1, #3
 8001c54:	400a      	ands	r2, r1
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d132      	bne.n	8001cc6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c60:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	4b43      	ldr	r3, [pc, #268]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c6e:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43d9      	mvns	r1, r3
 8001c76:	4b40      	ldr	r3, [pc, #256]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	4b3c      	ldr	r3, [pc, #240]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43d9      	mvns	r1, r3
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_GPIO_DeInit+0x1c0>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d60 <HAL_GPIO_DeInit+0x1a8>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	589a      	ldr	r2, [r3, r2]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	4829      	ldr	r0, [pc, #164]	@ (8001d60 <HAL_GPIO_DeInit+0x1a8>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	000b      	movs	r3, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	58d3      	ldr	r3, [r2, r3]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	2107      	movs	r1, #7
 8001cea:	400a      	ands	r2, r1
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	210f      	movs	r1, #15
 8001cf0:	4091      	lsls	r1, r2
 8001cf2:	000a      	movs	r2, r1
 8001cf4:	43d1      	mvns	r1, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	08d2      	lsrs	r2, r2, #3
 8001cfa:	4019      	ands	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	0052      	lsls	r2, r2, #1
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	4091      	lsls	r1, r2
 8001d10:	000a      	movs	r2, r1
 8001d12:	43d2      	mvns	r2, r2
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4091      	lsls	r1, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	43d2      	mvns	r2, r2
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	0052      	lsls	r2, r2, #1
 8001d36:	2103      	movs	r1, #3
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	43d2      	mvns	r2, r2
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
    }
    position++;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	40da      	lsrs	r2, r3
 8001d50:	1e13      	subs	r3, r2, #0
 8001d52:	d000      	beq.n	8001d56 <HAL_GPIO_DeInit+0x19e>
 8001d54:	e73c      	b.n	8001bd0 <HAL_GPIO_DeInit+0x18>
  }
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b006      	add	sp, #24
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010000 	.word	0x40010000
 8001d64:	50000400 	.word	0x50000400
 8001d68:	50000800 	.word	0x50000800
 8001d6c:	50000c00 	.word	0x50000c00
 8001d70:	50001000 	.word	0x50001000
 8001d74:	50001c00 	.word	0x50001c00
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	0008      	movs	r0, r1
 8001d86:	0011      	movs	r1, r2
 8001d88:	1cbb      	adds	r3, r7, #2
 8001d8a:	1c02      	adds	r2, r0, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	1c7b      	adds	r3, r7, #1
 8001d90:	1c0a      	adds	r2, r1, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d94:	1c7b      	adds	r3, r7, #1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	881a      	ldrh	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08f      	b.n	8001eea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	@ 0x41
 8001dce:	5c9b      	ldrb	r3, [r3, r2]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2240      	movs	r2, #64	@ 0x40
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7fe fc01 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2241      	movs	r2, #65	@ 0x41
 8001dea:	2124      	movs	r1, #36	@ 0x24
 8001dec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	493b      	ldr	r1, [pc, #236]	@ (8001ef4 <HAL_I2C_Init+0x13c>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4938      	ldr	r1, [pc, #224]	@ (8001ef8 <HAL_I2C_Init+0x140>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d108      	bne.n	8001e36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0209      	lsls	r1, r1, #8
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e007      	b.n	8001e46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2184      	movs	r1, #132	@ 0x84
 8001e40:	0209      	lsls	r1, r1, #8
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d109      	bne.n	8001e62 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0109      	lsls	r1, r1, #4
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	e007      	b.n	8001e72 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4923      	ldr	r1, [pc, #140]	@ (8001efc <HAL_I2C_Init+0x144>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4920      	ldr	r1, [pc, #128]	@ (8001f00 <HAL_I2C_Init+0x148>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	491a      	ldr	r1, [pc, #104]	@ (8001ef8 <HAL_I2C_Init+0x140>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69d9      	ldr	r1, [r3, #28]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	@ 0x41
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2242      	movs	r2, #66	@ 0x42
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	f0ffffff 	.word	0xf0ffffff
 8001ef8:	ffff7fff 	.word	0xffff7fff
 8001efc:	fffff7ff 	.word	0xfffff7ff
 8001f00:	02008000 	.word	0x02008000

08001f04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e022      	b.n	8001f5c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2241      	movs	r2, #65	@ 0x41
 8001f1a:	2124      	movs	r1, #36	@ 0x24
 8001f1c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	438a      	bics	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe fb9d 	bl	8000670 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2241      	movs	r2, #65	@ 0x41
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2242      	movs	r2, #66	@ 0x42
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2241      	movs	r2, #65	@ 0x41
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d138      	bne.n	8001fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e032      	b.n	8001fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2241      	movs	r2, #65	@ 0x41
 8001f94:	2124      	movs	r1, #36	@ 0x24
 8001f96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4911      	ldr	r1, [pc, #68]	@ (8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2241      	movs	r2, #65	@ 0x41
 8001fdc:	2120      	movs	r1, #32
 8001fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	ffffefff 	.word	0xffffefff

08001ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2241      	movs	r2, #65	@ 0x41
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d139      	bne.n	8002086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2240      	movs	r2, #64	@ 0x40
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800201c:	2302      	movs	r3, #2
 800201e:	e033      	b.n	8002088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2241      	movs	r2, #65	@ 0x41
 800202c:	2124      	movs	r1, #36	@ 0x24
 800202e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2241      	movs	r2, #65	@ 0x41
 8002076:	2120      	movs	r1, #32
 8002078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}
 8002090:	fffff0ff 	.word	0xfffff0ff

08002094 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	000a      	movs	r2, r1
 800209e:	1cfb      	adds	r3, r7, #3
 80020a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80020a6:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_PWR_EnterSTOPMode+0xac>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_PWR_EnterSTOPMode+0x40>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80020c8:	4b1c      	ldr	r3, [pc, #112]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 80020ce:	491d      	ldr	r1, [pc, #116]	@ (8002144 <HAL_PWR_EnterSTOPMode+0xb0>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2203      	movs	r2, #3
 80020de:	4393      	bics	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_PWR_EnterSTOPMode+0xb4>)
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <HAL_PWR_EnterSTOPMode+0xb4>)
 80020f6:	2104      	movs	r1, #4
 80020f8:	430a      	orrs	r2, r1
 80020fa:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80020fc:	1cfb      	adds	r3, r7, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002104:	bf30      	wfi
 8002106:	e002      	b.n	800210e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002108:	bf40      	sev
    __WFE();
 800210a:	bf20      	wfe
    __WFE();
 800210c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002114:	2104      	movs	r1, #4
 8002116:	438a      	bics	r2, r1
 8002118:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_PWR_EnterSTOPMode+0xa0>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_PWR_EnterSTOPMode+0xa8>)
 800212c:	2180      	movs	r1, #128	@ 0x80
 800212e:	0089      	lsls	r1, r1, #2
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
  }
}
 8002134:	46c0      	nop			@ (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b006      	add	sp, #24
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40007000 	.word	0x40007000
 8002140:	40010000 	.word	0x40010000
 8002144:	fffffdff 	.word	0xfffffdff
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f000 fbbf 	bl	80028de <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002160:	4bc9      	ldr	r3, [pc, #804]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
 8002168:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216a:	4bc7      	ldr	r3, [pc, #796]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x36>
 8002180:	e07e      	b.n	8002280 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d007      	beq.n	8002198 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x68>
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	429a      	cmp	r2, r3
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4bbb      	ldr	r3, [pc, #748]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5a>
 80021a4:	e06b      	b.n	800227e <HAL_RCC_OscConfig+0x132>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d167      	bne.n	800227e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f000 fb95 	bl	80028de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x84>
 80021c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4bb0      	ldr	r3, [pc, #704]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021c6:	2180      	movs	r1, #128	@ 0x80
 80021c8:	0249      	lsls	r1, r1, #9
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e027      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	23a0      	movs	r3, #160	@ 0xa0
 80021d6:	02db      	lsls	r3, r3, #11
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10e      	bne.n	80021fa <HAL_RCC_OscConfig+0xae>
 80021dc:	4baa      	ldr	r3, [pc, #680]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4ba9      	ldr	r3, [pc, #676]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	02c9      	lsls	r1, r1, #11
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	4ba7      	ldr	r3, [pc, #668]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021f0:	2180      	movs	r1, #128	@ 0x80
 80021f2:	0249      	lsls	r1, r1, #9
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e012      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021fa:	4ba3      	ldr	r3, [pc, #652]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002200:	49a2      	ldr	r1, [pc, #648]	@ (800248c <HAL_RCC_OscConfig+0x340>)
 8002202:	400a      	ands	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	4ba0      	ldr	r3, [pc, #640]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	025b      	lsls	r3, r3, #9
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4b9c      	ldr	r3, [pc, #624]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b9b      	ldr	r3, [pc, #620]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800221a:	499d      	ldr	r1, [pc, #628]	@ (8002490 <HAL_RCC_OscConfig+0x344>)
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fff0 	bl	800120c <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002230:	e009      	b.n	8002246 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002232:	f7fe ffeb 	bl	800120c <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	@ 0x64
 800223e:	d902      	bls.n	8002246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	f000 fb4c 	bl	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002246:	4b90      	ldr	r3, [pc, #576]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	4013      	ands	r3, r2
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0xe6>
 8002252:	e015      	b.n	8002280 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ffda 	bl	800120c <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225e:	f7fe ffd5 	bl	800120c <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b64      	cmp	r3, #100	@ 0x64
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e336      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002270:	4b85      	ldr	r3, [pc, #532]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	029b      	lsls	r3, r3, #10
 8002278:	4013      	ands	r3, r2
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x112>
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2202      	movs	r2, #2
 8002286:	4013      	ands	r3, r2
 8002288:	d100      	bne.n	800228c <HAL_RCC_OscConfig+0x140>
 800228a:	e099      	b.n	80023c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	2220      	movs	r2, #32
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800229a:	4b7b      	ldr	r3, [pc, #492]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b7a      	ldr	r3, [pc, #488]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022a0:	2120      	movs	r1, #32
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	2220      	movs	r2, #32
 80022aa:	4393      	bics	r3, r2
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d13e      	bne.n	8002338 <HAL_RCC_OscConfig+0x1ec>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13b      	bne.n	8002338 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022c0:	4b71      	ldr	r3, [pc, #452]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2204      	movs	r2, #4
 80022c6:	4013      	ands	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_RCC_OscConfig+0x188>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e304      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002494 <HAL_RCC_OscConfig+0x348>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	021a      	lsls	r2, r3, #8
 80022e4:	4b68      	ldr	r3, [pc, #416]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ea:	4b67      	ldr	r3, [pc, #412]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2209      	movs	r2, #9
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b64      	ldr	r3, [pc, #400]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fc:	f000 fc42 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002300:	0001      	movs	r1, r0
 8002302:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	220f      	movs	r2, #15
 800230a:	4013      	ands	r3, r2
 800230c:	4a62      	ldr	r2, [pc, #392]	@ (8002498 <HAL_RCC_OscConfig+0x34c>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	000a      	movs	r2, r1
 8002312:	40da      	lsrs	r2, r3
 8002314:	4b61      	ldr	r3, [pc, #388]	@ (800249c <HAL_RCC_OscConfig+0x350>)
 8002316:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002318:	4b61      	ldr	r3, [pc, #388]	@ (80024a0 <HAL_RCC_OscConfig+0x354>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2513      	movs	r5, #19
 800231e:	197c      	adds	r4, r7, r5
 8002320:	0018      	movs	r0, r3
 8002322:	f7fe ff2d 	bl	8001180 <HAL_InitTick>
 8002326:	0003      	movs	r3, r0
 8002328:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800232a:	197b      	adds	r3, r7, r5
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d046      	beq.n	80023c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002332:	197b      	adds	r3, r7, r5
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	e2d2      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d027      	beq.n	800238e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800233e:	4b52      	ldr	r3, [pc, #328]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2209      	movs	r2, #9
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	4b4f      	ldr	r3, [pc, #316]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800234a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe ff5c 	bl	800120c <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe ff57 	bl	800120c <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e2b8      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800236c:	4b46      	ldr	r3, [pc, #280]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a46      	ldr	r2, [pc, #280]	@ (8002494 <HAL_RCC_OscConfig+0x348>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	e018      	b.n	80023c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b3d      	ldr	r3, [pc, #244]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002394:	2101      	movs	r1, #1
 8002396:	438a      	bics	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe ff37 	bl	800120c <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe ff32 	bl	800120c <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e293      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b6:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	d1f1      	bne.n	80023a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2210      	movs	r2, #16
 80023c6:	4013      	ands	r3, r2
 80023c8:	d100      	bne.n	80023cc <HAL_RCC_OscConfig+0x280>
 80023ca:	e0a2      	b.n	8002512 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d140      	bne.n	8002454 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x29e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e279      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ea:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a2d      	ldr	r2, [pc, #180]	@ (80024a4 <HAL_RCC_OscConfig+0x358>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fe:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	0a19      	lsrs	r1, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	061a      	lsls	r2, r3, #24
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	3301      	adds	r3, #1
 800241a:	2280      	movs	r2, #128	@ 0x80
 800241c:	0212      	lsls	r2, r2, #8
 800241e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	210f      	movs	r1, #15
 8002428:	400b      	ands	r3, r1
 800242a:	491b      	ldr	r1, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x34c>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <HAL_RCC_OscConfig+0x350>)
 8002432:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_RCC_OscConfig+0x354>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2513      	movs	r5, #19
 800243a:	197c      	adds	r4, r7, r5
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fe9f 	bl	8001180 <HAL_InitTick>
 8002442:	0003      	movs	r3, r0
 8002444:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002446:	197b      	adds	r3, r7, r5
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d061      	beq.n	8002512 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800244e:	197b      	adds	r3, r7, r5
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	e244      	b.n	80028de <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d040      	beq.n	80024de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_OscConfig+0x33c>)
 8002462:	2180      	movs	r1, #128	@ 0x80
 8002464:	0049      	lsls	r1, r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fecf 	bl	800120c <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002472:	e019      	b.n	80024a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002474:	f7fe feca 	bl	800120c <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d912      	bls.n	80024a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e22b      	b.n	80028de <HAL_RCC_OscConfig+0x792>
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	40021000 	.word	0x40021000
 800248c:	fffeffff 	.word	0xfffeffff
 8002490:	fffbffff 	.word	0xfffbffff
 8002494:	ffffe0ff 	.word	0xffffe0ff
 8002498:	08005b8c 	.word	0x08005b8c
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000008 	.word	0x20000008
 80024a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024a8:	4bca      	ldr	r3, [pc, #808]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d0df      	beq.n	8002474 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b4:	4bc7      	ldr	r3, [pc, #796]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4ac7      	ldr	r2, [pc, #796]	@ (80027d8 <HAL_RCC_OscConfig+0x68c>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c2:	4bc4      	ldr	r3, [pc, #784]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c8:	4bc2      	ldr	r3, [pc, #776]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	0a19      	lsrs	r1, r3, #8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	061a      	lsls	r2, r3, #24
 80024d6:	4bbf      	ldr	r3, [pc, #764]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	e019      	b.n	8002512 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024de:	4bbd      	ldr	r3, [pc, #756]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4bbc      	ldr	r3, [pc, #752]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80024e4:	49bd      	ldr	r1, [pc, #756]	@ (80027dc <HAL_RCC_OscConfig+0x690>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fe8f 	bl	800120c <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe8a 	bl	800120c <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1eb      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002506:	4bb3      	ldr	r3, [pc, #716]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	4013      	ands	r3, r2
 800251a:	d036      	beq.n	800258a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d019      	beq.n	8002558 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4bab      	ldr	r3, [pc, #684]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002526:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002528:	4baa      	ldr	r3, [pc, #680]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800252a:	2101      	movs	r1, #1
 800252c:	430a      	orrs	r2, r1
 800252e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fe6c 	bl	800120c <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe fe67 	bl	800120c <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1c8      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800254c:	4ba1      	ldr	r3, [pc, #644]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002550:	2202      	movs	r2, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d0f1      	beq.n	800253a <HAL_RCC_OscConfig+0x3ee>
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b9e      	ldr	r3, [pc, #632]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800255a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800255c:	4b9d      	ldr	r3, [pc, #628]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800255e:	2101      	movs	r1, #1
 8002560:	438a      	bics	r2, r1
 8002562:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe fe52 	bl	800120c <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7fe fe4d 	bl	800120c <HAL_GetTick>
 8002572:	0002      	movs	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1ae      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002580:	4b94      	ldr	r3, [pc, #592]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d1f1      	bne.n	800256e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2204      	movs	r2, #4
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x44a>
 8002594:	e0ae      	b.n	80026f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2023      	movs	r0, #35	@ 0x23
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b8d      	ldr	r3, [pc, #564]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80025a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	4013      	ands	r3, r2
 80025a8:	d109      	bne.n	80025be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b8a      	ldr	r3, [pc, #552]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80025ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ae:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x694>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b85      	ldr	r3, [pc, #532]	@ (80027e0 <HAL_RCC_OscConfig+0x694>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b84      	ldr	r3, [pc, #528]	@ (80027e0 <HAL_RCC_OscConfig+0x694>)
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fe18 	bl	800120c <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fe13 	bl	800120c <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	@ 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e174      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b7a      	ldr	r3, [pc, #488]	@ (80027e0 <HAL_RCC_OscConfig+0x694>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x4d0>
 800260c:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800260e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002610:	4b70      	ldr	r3, [pc, #448]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	0049      	lsls	r1, r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	651a      	str	r2, [r3, #80]	@ 0x50
 800261a:	e031      	b.n	8002680 <HAL_RCC_OscConfig+0x534>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x4f2>
 8002624:	4b6b      	ldr	r3, [pc, #428]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002626:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002628:	4b6a      	ldr	r3, [pc, #424]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800262a:	496c      	ldr	r1, [pc, #432]	@ (80027dc <HAL_RCC_OscConfig+0x690>)
 800262c:	400a      	ands	r2, r1
 800262e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002630:	4b68      	ldr	r3, [pc, #416]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002632:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002634:	4b67      	ldr	r3, [pc, #412]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002636:	496b      	ldr	r1, [pc, #428]	@ (80027e4 <HAL_RCC_OscConfig+0x698>)
 8002638:	400a      	ands	r2, r1
 800263a:	651a      	str	r2, [r3, #80]	@ 0x50
 800263c:	e020      	b.n	8002680 <HAL_RCC_OscConfig+0x534>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	23a0      	movs	r3, #160	@ 0xa0
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	429a      	cmp	r2, r3
 8002648:	d10e      	bne.n	8002668 <HAL_RCC_OscConfig+0x51c>
 800264a:	4b62      	ldr	r3, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800264c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800264e:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002650:	2180      	movs	r1, #128	@ 0x80
 8002652:	00c9      	lsls	r1, r1, #3
 8002654:	430a      	orrs	r2, r1
 8002656:	651a      	str	r2, [r3, #80]	@ 0x50
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800265a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800265c:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0049      	lsls	r1, r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	651a      	str	r2, [r3, #80]	@ 0x50
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x534>
 8002668:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800266a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800266c:	4b59      	ldr	r3, [pc, #356]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800266e:	495b      	ldr	r1, [pc, #364]	@ (80027dc <HAL_RCC_OscConfig+0x690>)
 8002670:	400a      	ands	r2, r1
 8002672:	651a      	str	r2, [r3, #80]	@ 0x50
 8002674:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002676:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002678:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800267a:	495a      	ldr	r1, [pc, #360]	@ (80027e4 <HAL_RCC_OscConfig+0x698>)
 800267c:	400a      	ands	r2, r1
 800267e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7fe fdc0 	bl	800120c <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fdbb 	bl	800120c <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a52      	ldr	r2, [pc, #328]	@ (80027e8 <HAL_RCC_OscConfig+0x69c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e11b      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a6:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80026a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d0ef      	beq.n	8002692 <HAL_RCC_OscConfig+0x546>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fe fdaa 	bl	800120c <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fda5 	bl	800120c <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a47      	ldr	r2, [pc, #284]	@ (80027e8 <HAL_RCC_OscConfig+0x69c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e105      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d2:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80026d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026de:	2323      	movs	r3, #35	@ 0x23
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80026ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ec:	4b39      	ldr	r3, [pc, #228]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80026ee:	493f      	ldr	r1, [pc, #252]	@ (80027ec <HAL_RCC_OscConfig+0x6a0>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2220      	movs	r2, #32
 80026fa:	4013      	ands	r3, r2
 80026fc:	d049      	beq.n	8002792 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d026      	beq.n	8002754 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002706:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <HAL_RCC_OscConfig+0x6a4>)
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	4b33      	ldr	r3, [pc, #204]	@ (80027f0 <HAL_RCC_OscConfig+0x6a4>)
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	0189      	lsls	r1, r1, #6
 8002728:	430a      	orrs	r2, r1
 800272a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fd6e 	bl	800120c <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002736:	f7fe fd69 	bl	800120c <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0ca      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002748:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2202      	movs	r2, #2
 800274e:	4013      	ands	r3, r2
 8002750:	d0f1      	beq.n	8002736 <HAL_RCC_OscConfig+0x5ea>
 8002752:	e01e      	b.n	8002792 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	4b23      	ldr	r3, [pc, #140]	@ (80027f0 <HAL_RCC_OscConfig+0x6a4>)
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_RCC_OscConfig+0x6a4>)
 8002766:	4923      	ldr	r1, [pc, #140]	@ (80027f4 <HAL_RCC_OscConfig+0x6a8>)
 8002768:	400a      	ands	r2, r1
 800276a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fd4e 	bl	800120c <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002776:	f7fe fd49 	bl	800120c <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0aa      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1f1      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d100      	bne.n	800279c <HAL_RCC_OscConfig+0x650>
 800279a:	e09f      	b.n	80028dc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d100      	bne.n	80027a4 <HAL_RCC_OscConfig+0x658>
 80027a2:	e078      	b.n	8002896 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d159      	bne.n	8002860 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_RCC_OscConfig+0x688>)
 80027b2:	4911      	ldr	r1, [pc, #68]	@ (80027f8 <HAL_RCC_OscConfig+0x6ac>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd28 	bl	800120c <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fd23 	bl	800120c <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d915      	bls.n	80027fc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e084      	b.n	80028de <HAL_RCC_OscConfig+0x792>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	ffff1fff 	.word	0xffff1fff
 80027dc:	fffffeff 	.word	0xfffffeff
 80027e0:	40007000 	.word	0x40007000
 80027e4:	fffffbff 	.word	0xfffffbff
 80027e8:	00001388 	.word	0x00001388
 80027ec:	efffffff 	.word	0xefffffff
 80027f0:	40010000 	.word	0x40010000
 80027f4:	ffffdfff 	.word	0xffffdfff
 80027f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027fc:	4b3a      	ldr	r3, [pc, #232]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	049b      	lsls	r3, r3, #18
 8002804:	4013      	ands	r3, r2
 8002806:	d1dc      	bne.n	80027c2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a37      	ldr	r2, [pc, #220]	@ (80028ec <HAL_RCC_OscConfig+0x7a0>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	431a      	orrs	r2, r3
 8002822:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	0449      	lsls	r1, r1, #17
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe fce9 	bl	800120c <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fce4 	bl	800120c <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e045      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	049b      	lsls	r3, r3, #18
 800285a:	4013      	ands	r3, r2
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x6f4>
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b21      	ldr	r3, [pc, #132]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 8002866:	4922      	ldr	r1, [pc, #136]	@ (80028f0 <HAL_RCC_OscConfig+0x7a4>)
 8002868:	400a      	ands	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fcce 	bl	800120c <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fcc9 	bl	800120c <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e02a      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002888:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	049b      	lsls	r3, r3, #18
 8002890:	4013      	ands	r3, r2
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x72a>
 8002894:	e022      	b.n	80028dc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e01d      	b.n	80028de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_RCC_OscConfig+0x79c>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	401a      	ands	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	23f0      	movs	r3, #240	@ 0xf0
 80028bc:	039b      	lsls	r3, r3, #14
 80028be:	401a      	ands	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	23c0      	movs	r3, #192	@ 0xc0
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	401a      	ands	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b00a      	add	sp, #40	@ 0x28
 80028e4:	bdb0      	pop	{r4, r5, r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000
 80028ec:	ff02ffff 	.word	0xff02ffff
 80028f0:	feffffff 	.word	0xfeffffff

080028f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e128      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b96      	ldr	r3, [pc, #600]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d91e      	bls.n	8002954 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b93      	ldr	r3, [pc, #588]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b90      	ldr	r3, [pc, #576]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002928:	f7fe fc70 	bl	800120c <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002930:	e009      	b.n	8002946 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7fe fc6b 	bl	800120c <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a8a      	ldr	r2, [pc, #552]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e109      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b87      	ldr	r3, [pc, #540]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d1ee      	bne.n	8002932 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2202      	movs	r2, #2
 800295a:	4013      	ands	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295e:	4b83      	ldr	r3, [pc, #524]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	22f0      	movs	r2, #240	@ 0xf0
 8002964:	4393      	bics	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 800296e:	430a      	orrs	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_ClockConfig+0x8a>
 800297c:	e089      	b.n	8002a92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002986:	4b79      	ldr	r3, [pc, #484]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	4013      	ands	r3, r2
 8002990:	d120      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0e1      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800299e:	4b73      	ldr	r3, [pc, #460]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	049b      	lsls	r3, r3, #18
 80029a6:	4013      	ands	r3, r2
 80029a8:	d114      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0d5      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2204      	movs	r2, #4
 80029bc:	4013      	ands	r3, r2
 80029be:	d109      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0ca      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029c4:	4b69      	ldr	r3, [pc, #420]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0c2      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d4:	4b65      	ldr	r3, [pc, #404]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2203      	movs	r2, #3
 80029da:	4393      	bics	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b62      	ldr	r3, [pc, #392]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fc10 	bl	800120c <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d111      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	e009      	b.n	8002a0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fa:	f7fe fc07 	bl	800120c <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a58      	ldr	r2, [pc, #352]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0a5      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a0e:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	220c      	movs	r2, #12
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d1ef      	bne.n	80029fa <HAL_RCC_ClockConfig+0x106>
 8002a1a:	e03a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d111      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a24:	e009      	b.n	8002a3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7fe fbf1 	bl	800120c <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	4a4d      	ldr	r2, [pc, #308]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e08f      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	220c      	movs	r2, #12
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d1ef      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x132>
 8002a46:	e024      	b.n	8002a92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d11b      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe fbdb 	bl	800120c <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a42      	ldr	r2, [pc, #264]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e079      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d1ef      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x15e>
 8002a72:	e00e      	b.n	8002a92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fbca 	bl	800120c <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e068      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a88:	4b38      	ldr	r3, [pc, #224]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d21e      	bcs.n	8002ade <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa0:	4b30      	ldr	r3, [pc, #192]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fbab 	bl	800120c <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fba6 	bl	800120c <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	4a28      	ldr	r2, [pc, #160]	@ (8002b68 <HAL_RCC_ClockConfig+0x274>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e044      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_RCC_ClockConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <HAL_RCC_ClockConfig+0x27c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2208      	movs	r2, #8
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <HAL_RCC_ClockConfig+0x280>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00da      	lsls	r2, r3, #3
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1c:	f000 f832 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b20:	0001      	movs	r1, r0
 8002b22:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <HAL_RCC_ClockConfig+0x278>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	220f      	movs	r2, #15
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <HAL_RCC_ClockConfig+0x284>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	000a      	movs	r2, r1
 8002b32:	40da      	lsrs	r2, r3
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_RCC_ClockConfig+0x288>)
 8002b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_RCC_ClockConfig+0x28c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	250b      	movs	r5, #11
 8002b3e:	197c      	adds	r4, r7, r5
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe fb1d 	bl	8001180 <HAL_InitTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b4a:	197b      	adds	r3, r7, r5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b52:	197b      	adds	r3, r7, r5
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bdb0      	pop	{r4, r5, r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	40022000 	.word	0x40022000
 8002b68:	00001388 	.word	0x00001388
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	fffff8ff 	.word	0xfffff8ff
 8002b74:	ffffc7ff 	.word	0xffffc7ff
 8002b78:	08005b8c 	.word	0x08005b8c
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	20000008 	.word	0x20000008

08002b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	220c      	movs	r2, #12
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d013      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b9a:	d85c      	bhi.n	8002c56 <HAL_RCC_GetSysClockFreq+0xd2>
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d002      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x22>
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x38>
 8002ba4:	e057      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ba6:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2210      	movs	r2, #16
 8002bac:	4013      	ands	r3, r2
 8002bae:	d002      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bb2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bb4:	e05d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bb8:	613b      	str	r3, [r7, #16]
      break;
 8002bba:	e05a      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4b32      	ldr	r3, [pc, #200]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bbe:	613b      	str	r3, [r7, #16]
      break;
 8002bc0:	e057      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	0c9b      	lsrs	r3, r3, #18
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	4013      	ands	r3, r2
 8002bca:	4a30      	ldr	r2, [pc, #192]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	0d9b      	lsrs	r3, r3, #22
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	4013      	ands	r3, r2
 8002be6:	d00f      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	000a      	movs	r2, r1
 8002bec:	0152      	lsls	r2, r2, #5
 8002bee:	1a52      	subs	r2, r2, r1
 8002bf0:	0193      	lsls	r3, r2, #6
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	185b      	adds	r3, r3, r1
 8002bf8:	025b      	lsls	r3, r3, #9
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd fa8b 	bl	8000118 <__udivsi3>
 8002c02:	0003      	movs	r3, r0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e023      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c08:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d00f      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	000a      	movs	r2, r1
 8002c16:	0152      	lsls	r2, r2, #5
 8002c18:	1a52      	subs	r2, r2, r1
 8002c1a:	0193      	lsls	r3, r2, #6
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	185b      	adds	r3, r3, r1
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fd fa76 	bl	8000118 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e00e      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	000a      	movs	r2, r1
 8002c36:	0152      	lsls	r2, r2, #5
 8002c38:	1a52      	subs	r2, r2, r1
 8002c3a:	0193      	lsls	r3, r2, #6
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	185b      	adds	r3, r3, r1
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fd fa66 	bl	8000118 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	e00d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	0b5b      	lsrs	r3, r3, #13
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	0212      	lsls	r2, r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      break;
 8002c70:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c72:	693b      	ldr	r3, [r7, #16]
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b006      	add	sp, #24
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	003d0900 	.word	0x003d0900
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200
 8002c8c:	08005ba4 	.word	0x08005ba4

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b02      	ldr	r3, [pc, #8]	@ (8002ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff2 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cac:	0001      	movs	r1, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	000b      	movs	r3, r1
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08005b9c 	.word	0x08005b9c

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	0001      	movs	r1, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	000b      	movs	r3, r1
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08005b9c 	.word	0x08005b9c

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d04:	2317      	movs	r3, #23
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4013      	ands	r3, r2
 8002d14:	d106      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	2380      	movs	r3, #128	@ 0x80
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d100      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d22:	e104      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d24:	4bb9      	ldr	r3, [pc, #740]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	055b      	lsls	r3, r3, #21
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d10a      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4bb6      	ldr	r3, [pc, #728]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d34:	4bb5      	ldr	r3, [pc, #724]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	0549      	lsls	r1, r1, #21
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002d3e:	2317      	movs	r3, #23
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4bb2      	ldr	r3, [pc, #712]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d11a      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4baf      	ldr	r3, [pc, #700]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4bae      	ldr	r3, [pc, #696]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	0049      	lsls	r1, r1, #1
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fa54 	bl	800120c <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fe fa4f 	bl	800120c <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	@ 0x64
 8002d76:	d901      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e143      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4ba4      	ldr	r3, [pc, #656]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d88:	4ba0      	ldr	r3, [pc, #640]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	23c0      	movs	r3, #192	@ 0xc0
 8002d8e:	039b      	lsls	r3, r3, #14
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	23c0      	movs	r3, #192	@ 0xc0
 8002d9a:	039b      	lsls	r3, r3, #14
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	23c0      	movs	r3, #192	@ 0xc0
 8002daa:	039b      	lsls	r3, r3, #14
 8002dac:	4013      	ands	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d013      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	23c0      	movs	r3, #192	@ 0xc0
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	23c0      	movs	r3, #192	@ 0xc0
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10a      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002dc6:	4b91      	ldr	r3, [pc, #580]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	401a      	ands	r2, r3
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e113      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002ddc:	4b8b      	ldr	r3, [pc, #556]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002de0:	23c0      	movs	r3, #192	@ 0xc0
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d049      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	23c0      	movs	r3, #192	@ 0xc0
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	4013      	ands	r3, r2
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2220      	movs	r2, #32
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	23c0      	movs	r3, #192	@ 0xc0
 8002e0e:	029b      	lsls	r3, r3, #10
 8002e10:	4013      	ands	r3, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d034      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	d02e      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e24:	4b79      	ldr	r3, [pc, #484]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e28:	4a7a      	ldr	r2, [pc, #488]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2e:	4b77      	ldr	r3, [pc, #476]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e32:	4b76      	ldr	r3, [pc, #472]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e34:	2180      	movs	r1, #128	@ 0x80
 8002e36:	0309      	lsls	r1, r1, #12
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	4b73      	ldr	r3, [pc, #460]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e40:	4b72      	ldr	r3, [pc, #456]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e42:	4975      	ldr	r1, [pc, #468]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e48:	4b70      	ldr	r3, [pc, #448]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d014      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe f9d8 	bl	800120c <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e60:	e009      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe f9d3 	bl	800120c <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0c6      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e76:	4b65      	ldr	r3, [pc, #404]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d0ef      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	23c0      	movs	r3, #192	@ 0xc0
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	401a      	ands	r2, r3
 8002e98:	23c0      	movs	r3, #192	@ 0xc0
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	23c0      	movs	r3, #192	@ 0xc0
 8002eb0:	039b      	lsls	r3, r3, #14
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	4b55      	ldr	r3, [pc, #340]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	4b54      	ldr	r3, [pc, #336]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ebc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	23c0      	movs	r3, #192	@ 0xc0
 8002ec4:	029b      	lsls	r3, r3, #10
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d01f      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	23c0      	movs	r3, #192	@ 0xc0
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	23c0      	movs	r3, #192	@ 0xc0
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002eea:	4b48      	ldr	r3, [pc, #288]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4c      	ldr	r2, [pc, #304]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	23c0      	movs	r3, #192	@ 0xc0
 8002efa:	039b      	lsls	r3, r3, #14
 8002efc:	401a      	ands	r2, r3
 8002efe:	4b43      	ldr	r3, [pc, #268]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b41      	ldr	r3, [pc, #260]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f06:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	23c0      	movs	r3, #192	@ 0xc0
 8002f0e:	029b      	lsls	r3, r3, #10
 8002f10:	401a      	ands	r2, r3
 8002f12:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f18:	2317      	movs	r3, #23
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f26:	4b39      	ldr	r3, [pc, #228]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f28:	493e      	ldr	r1, [pc, #248]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2201      	movs	r2, #1
 8002f34:	4013      	ands	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f38:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b29      	ldr	r3, [pc, #164]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f66:	430a      	orrs	r2, r1
 8002f68:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f78:	4a2b      	ldr	r2, [pc, #172]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	4b22      	ldr	r3, [pc, #136]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fb2:	4b16      	ldr	r3, [pc, #88]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb6:	4a17      	ldr	r2, [pc, #92]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2240      	movs	r2, #64	@ 0x40
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd4:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2280      	movs	r2, #128	@ 0x80
 8002fea:	4013      	ands	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	4a10      	ldr	r2, [pc, #64]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	fffcffff 	.word	0xfffcffff
 8003018:	fff7ffff 	.word	0xfff7ffff
 800301c:	00001388 	.word	0x00001388
 8003020:	ffcfffff 	.word	0xffcfffff
 8003024:	efffffff 	.word	0xefffffff
 8003028:	fffff3ff 	.word	0xfffff3ff
 800302c:	ffffcfff 	.word	0xffffcfff
 8003030:	fbffffff 	.word	0xfbffffff
 8003034:	fff3ffff 	.word	0xfff3ffff

08003038 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e088      	b.n	8003164 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2221      	movs	r2, #33	@ 0x21
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd fde7 	bl	8000c3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2221      	movs	r2, #33	@ 0x21
 8003072:	2102      	movs	r1, #2
 8003074:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2210      	movs	r2, #16
 800307e:	4013      	ands	r3, r2
 8003080:	2b10      	cmp	r3, #16
 8003082:	d05f      	beq.n	8003144 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ca      	movs	r2, #202	@ 0xca
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2253      	movs	r2, #83	@ 0x53
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003094:	250f      	movs	r5, #15
 8003096:	197c      	adds	r4, r7, r5
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f890 	bl	80031c0 <RTC_EnterInitMode>
 80030a0:	0003      	movs	r3, r0
 80030a2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80030a4:	0028      	movs	r0, r5
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d12c      	bne.n	8003108 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	492c      	ldr	r1, [pc, #176]	@ (800316c <HAL_RTC_Init+0x134>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68d2      	ldr	r2, [r2, #12]
 80030e4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030fa:	183c      	adds	r4, r7, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f8a2 	bl	8003248 <RTC_ExitInitMode>
 8003104:	0003      	movs	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003108:	230f      	movs	r3, #15
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2103      	movs	r1, #3
 800311e:	438a      	bics	r2, r1
 8003120:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	22ff      	movs	r2, #255	@ 0xff
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
 8003142:	e003      	b.n	800314c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003144:	230f      	movs	r3, #15
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800314c:	230f      	movs	r3, #15
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2221      	movs	r2, #33	@ 0x21
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800315e:	230f      	movs	r3, #15
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	781b      	ldrb	r3, [r3, #0]
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bdb0      	pop	{r4, r5, r7, pc}
 800316c:	ff8fffbf 	.word	0xff8fffbf

08003170 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0e      	ldr	r2, [pc, #56]	@ (80031bc <HAL_RTC_WaitForSynchro+0x4c>)
 8003182:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7fe f842 	bl	800120c <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800318e:	f7fe f83d 	bl	800120c <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	23fa      	movs	r3, #250	@ 0xfa
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d901      	bls.n	80031a4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e006      	b.n	80031b2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	4013      	ands	r3, r2
 80031ae:	d0ee      	beq.n	800318e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	0001ff5f 	.word	0x0001ff5f

080031c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	4013      	ands	r3, r2
 80031de:	d12c      	bne.n	800323a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2180      	movs	r1, #128	@ 0x80
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe f80c 	bl	800120c <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031f8:	e014      	b.n	8003224 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031fa:	f7fe f807 	bl	800120c <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1ad2      	subs	r2, r2, r3
 8003204:	200f      	movs	r0, #15
 8003206:	183b      	adds	r3, r7, r0
 8003208:	1839      	adds	r1, r7, r0
 800320a:	7809      	ldrb	r1, [r1, #0]
 800320c:	7019      	strb	r1, [r3, #0]
 800320e:	23fa      	movs	r3, #250	@ 0xfa
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	429a      	cmp	r2, r3
 8003214:	d906      	bls.n	8003224 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2221      	movs	r2, #33	@ 0x21
 800321a:	2104      	movs	r1, #4
 800321c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800321e:	183b      	adds	r3, r7, r0
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	4013      	ands	r3, r2
 800322e:	d104      	bne.n	800323a <RTC_EnterInitMode+0x7a>
 8003230:	230f      	movs	r3, #15
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d1df      	bne.n	80031fa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800323a:	230f      	movs	r3, #15
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}

08003248 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	240f      	movs	r4, #15
 8003252:	193b      	adds	r3, r7, r4
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	438a      	bics	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2220      	movs	r2, #32
 8003270:	4013      	ands	r3, r2
 8003272:	d10c      	bne.n	800328e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff ff7a 	bl	8003170 <HAL_RTC_WaitForSynchro>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d006      	beq.n	800328e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2221      	movs	r2, #33	@ 0x21
 8003284:	2104      	movs	r1, #4
 8003286:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003288:	193b      	adds	r3, r7, r4
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800328e:	230f      	movs	r3, #15
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	781b      	ldrb	r3, [r3, #0]
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b005      	add	sp, #20
 800329a:	bd90      	pop	{r4, r7, pc}

0800329c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032a8:	4b64      	ldr	r3, [pc, #400]	@ (800343c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	22fa      	movs	r2, #250	@ 0xfa
 80032ae:	01d1      	lsls	r1, r2, #7
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fc ff31 	bl	8000118 <__udivsi3>
 80032b6:	0003      	movs	r3, r0
 80032b8:	001a      	movs	r2, r3
 80032ba:	0013      	movs	r3, r2
 80032bc:	015b      	lsls	r3, r3, #5
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	5c9b      	ldrb	r3, [r3, r2]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0ad      	b.n	8003432 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2221      	movs	r2, #33	@ 0x21
 80032e2:	2102      	movs	r1, #2
 80032e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	22ca      	movs	r2, #202	@ 0xca
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2253      	movs	r2, #83	@ 0x53
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4013      	ands	r3, r2
 8003302:	d019      	beq.n	8003338 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3b01      	subs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	22ff      	movs	r2, #255	@ 0xff
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2221      	movs	r2, #33	@ 0x21
 800331c:	2103      	movs	r1, #3
 800331e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e082      	b.n	8003432 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2204      	movs	r2, #4
 8003334:	4013      	ands	r3, r2
 8003336:	d1e5      	bne.n	8003304 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	493f      	ldr	r1, [pc, #252]	@ (8003440 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8003344:	400a      	ands	r2, r1
 8003346:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	22ff      	movs	r2, #255	@ 0xff
 8003350:	401a      	ands	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	493b      	ldr	r1, [pc, #236]	@ (8003444 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800335c:	4b37      	ldr	r3, [pc, #220]	@ (800343c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	22fa      	movs	r2, #250	@ 0xfa
 8003362:	01d1      	lsls	r1, r2, #7
 8003364:	0018      	movs	r0, r3
 8003366:	f7fc fed7 	bl	8000118 <__udivsi3>
 800336a:	0003      	movs	r3, r0
 800336c:	001a      	movs	r2, r3
 800336e:	0013      	movs	r3, r2
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	189b      	adds	r3, r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3b01      	subs	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	22ff      	movs	r2, #255	@ 0xff
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	@ 0x21
 8003394:	2103      	movs	r1, #3
 8003396:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e046      	b.n	8003432 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2204      	movs	r2, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d0e5      	beq.n	800337c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2107      	movs	r1, #7
 80033bc:	438a      	bics	r2, r1
 80033be:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80033de:	2180      	movs	r1, #128	@ 0x80
 80033e0:	0349      	lsls	r1, r1, #13
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80033ec:	2180      	movs	r1, #128	@ 0x80
 80033ee:	0349      	lsls	r1, r1, #13
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2180      	movs	r1, #128	@ 0x80
 8003400:	01c9      	lsls	r1, r1, #7
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	00c9      	lsls	r1, r1, #3
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ff      	movs	r2, #255	@ 0xff
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2221      	movs	r2, #33	@ 0x21
 8003424:	2101      	movs	r1, #1
 8003426:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	20000004 	.word	0x20000004
 8003440:	fffffbff 	.word	0xfffffbff
 8003444:	fffffb7f 	.word	0xfffffb7f
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8003462:	2302      	movs	r3, #2
 8003464:	e04e      	b.n	8003504 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2221      	movs	r2, #33	@ 0x21
 8003472:	2102      	movs	r1, #2
 8003474:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	22ca      	movs	r2, #202	@ 0xca
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2253      	movs	r2, #83	@ 0x53
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	491e      	ldr	r1, [pc, #120]	@ (800350c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003492:	400a      	ands	r2, r1
 8003494:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	491b      	ldr	r1, [pc, #108]	@ (8003510 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a6:	f7fd feb1 	bl	800120c <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80034ae:	e016      	b.n	80034de <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034b0:	f7fd feac 	bl	800120c <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	23fa      	movs	r3, #250	@ 0xfa
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	429a      	cmp	r2, r3
 80034c0:	d90d      	bls.n	80034de <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	22ff      	movs	r2, #255	@ 0xff
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2221      	movs	r2, #33	@ 0x21
 80034ce:	2103      	movs	r1, #3
 80034d0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e012      	b.n	8003504 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2204      	movs	r2, #4
 80034e6:	4013      	ands	r3, r2
 80034e8:	d0e2      	beq.n	80034b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	@ 0xff
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2221      	movs	r2, #33	@ 0x21
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fffffbff 	.word	0xfffffbff
 8003510:	ffffbfff 	.word	0xffffbfff

08003514 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800351c:	4b13      	ldr	r3, [pc, #76]	@ (800356c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800351e:	2280      	movs	r2, #128	@ 0x80
 8003520:	0352      	lsls	r2, r2, #13
 8003522:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	01db      	lsls	r3, r3, #7
 800352e:	4013      	ands	r3, r2
 8003530:	d014      	beq.n	800355c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4013      	ands	r3, r2
 800353e:	d00d      	beq.n	800355c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	22ff      	movs	r2, #255	@ 0xff
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4908      	ldr	r1, [pc, #32]	@ (8003570 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 f80c 	bl	8003574 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2221      	movs	r2, #33	@ 0x21
 8003560:	2101      	movs	r1, #1
 8003562:	5499      	strb	r1, [r3, r2]
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010400 	.word	0x40010400
 8003570:	fffffb7f 	.word	0xfffffb7f

08003574 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e044      	b.n	8003620 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2278      	movs	r2, #120	@ 0x78
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fd fc6b 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	@ 0x24
 80035b2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 ffac 	bl	800452c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fd0a 	bl	8003ff0 <UART_SetConfig>
 80035dc:	0003      	movs	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01c      	b.n	8003620 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	490d      	ldr	r1, [pc, #52]	@ (8003628 <HAL_UART_Init+0xa4>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	212a      	movs	r1, #42	@ 0x2a
 8003602:	438a      	bics	r2, r1
 8003604:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f001 f83b 	bl	8004694 <UART_CheckIdleState>
 800361e:	0003      	movs	r3, r0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	ffffb7ff 	.word	0xffffb7ff

0800362c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	1dbb      	adds	r3, r7, #6
 8003638:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800363e:	2b20      	cmp	r3, #32
 8003640:	d000      	beq.n	8003644 <HAL_UART_Transmit_DMA+0x18>
 8003642:	e077      	b.n	8003734 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_UART_Transmit_DMA+0x26>
 800364a:	1dbb      	adds	r3, r7, #6
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	429a      	cmp	r2, r3
 8003660:	d109      	bne.n	8003676 <HAL_UART_Transmit_DMA+0x4a>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d105      	bne.n	8003676 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	d001      	beq.n	8003676 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e05f      	b.n	8003736 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1dba      	adds	r2, r7, #6
 8003680:	2150      	movs	r1, #80	@ 0x50
 8003682:	8812      	ldrh	r2, [r2, #0]
 8003684:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1dba      	adds	r2, r7, #6
 800368a:	2152      	movs	r1, #82	@ 0x52
 800368c:	8812      	ldrh	r2, [r2, #0]
 800368e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2284      	movs	r2, #132	@ 0x84
 8003694:	2100      	movs	r1, #0
 8003696:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	@ 0x21
 800369c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d027      	beq.n	80036f6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	4a25      	ldr	r2, [pc, #148]	@ (8003740 <HAL_UART_Transmit_DMA+0x114>)
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	4a24      	ldr	r2, [pc, #144]	@ (8003744 <HAL_UART_Transmit_DMA+0x118>)
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <HAL_UART_Transmit_DMA+0x11c>)
 80036bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ce:	0019      	movs	r1, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3328      	adds	r3, #40	@ 0x28
 80036d6:	001a      	movs	r2, r3
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	f7fd ff1a 	bl	8001514 <HAL_DMA_Start_IT>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2284      	movs	r2, #132	@ 0x84
 80036e8:	2110      	movs	r1, #16
 80036ea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e01f      	b.n	8003736 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	613b      	str	r3, [r7, #16]
  return(result);
 8003704:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b008      	add	sp, #32
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	08004b15 	.word	0x08004b15
 8003744:	08004bad 	.word	0x08004bad
 8003748:	08004db3 	.word	0x08004db3

0800374c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	@ 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003754:	f3ef 8310 	mrs	r3, PRIMASK
 8003758:	617b      	str	r3, [r7, #20]
  return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	21c0      	movs	r1, #192	@ 0xc0
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2280      	movs	r2, #128	@ 0x80
 800378e:	4013      	ands	r3, r2
 8003790:	2b80      	cmp	r3, #128	@ 0x80
 8003792:	d135      	bne.n	8003800 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003794:	f3ef 8310 	mrs	r3, PRIMASK
 8003798:	60bb      	str	r3, [r7, #8]
  return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	2301      	movs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	438a      	bics	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	2200      	movs	r2, #0
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fd ff00 	bl	80015e0 <HAL_DMA_Abort>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d00d      	beq.n	8003800 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fe f82e 	bl	800184a <HAL_DMA_GetError>
 80037ee:	0003      	movs	r3, r0
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d105      	bne.n	8003800 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2284      	movs	r2, #132	@ 0x84
 80037f8:	2110      	movs	r1, #16
 80037fa:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e007      	b.n	8003810 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2252      	movs	r2, #82	@ 0x52
 8003804:	2100      	movs	r1, #0
 8003806:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b00a      	add	sp, #40	@ 0x28
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b092      	sub	sp, #72	@ 0x48
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	623b      	str	r3, [r7, #32]
  return(result);
 8003826:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	2301      	movs	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	494b      	ldr	r1, [pc, #300]	@ (8003970 <HAL_UART_AbortReceive+0x158>)
 8003842:	400a      	ands	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	643b      	str	r3, [r7, #64]	@ 0x40
 800385c:	2301      	movs	r3, #1
 800385e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003888:	2b01      	cmp	r3, #1
 800388a:	d118      	bne.n	80038be <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	617b      	str	r3, [r7, #20]
  return(result);
 8003892:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2110      	movs	r1, #16
 80038ae:	438a      	bics	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2240      	movs	r2, #64	@ 0x40
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d135      	bne.n	8003938 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8310 	mrs	r3, PRIMASK
 80038d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038d2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d6:	2301      	movs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			@ (mov r8, r8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	@ 0x40
 80038ee:	438a      	bics	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	2200      	movs	r2, #0
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	0018      	movs	r0, r3
 8003914:	f7fd fe64 	bl	80015e0 <HAL_DMA_Abort>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d00d      	beq.n	8003938 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003920:	0018      	movs	r0, r3
 8003922:	f7fd ff92 	bl	800184a <HAL_DMA_GetError>
 8003926:	0003      	movs	r3, r0
 8003928:	2b20      	cmp	r3, #32
 800392a:	d105      	bne.n	8003938 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2284      	movs	r2, #132	@ 0x84
 8003930:	2110      	movs	r1, #16
 8003932:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e017      	b.n	8003968 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	225a      	movs	r2, #90	@ 0x5a
 800393c:	2100      	movs	r1, #0
 800393e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	220f      	movs	r2, #15
 8003946:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2108      	movs	r1, #8
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	2120      	movs	r1, #32
 800395e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b012      	add	sp, #72	@ 0x48
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffffedf 	.word	0xfffffedf

08003974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b0ab      	sub	sp, #172	@ 0xac
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	22a4      	movs	r2, #164	@ 0xa4
 8003984:	18b9      	adds	r1, r7, r2
 8003986:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	20a0      	movs	r0, #160	@ 0xa0
 8003990:	1839      	adds	r1, r7, r0
 8003992:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	219c      	movs	r1, #156	@ 0x9c
 800399c:	1879      	adds	r1, r7, r1
 800399e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039a0:	0011      	movs	r1, r2
 80039a2:	18bb      	adds	r3, r7, r2
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a99      	ldr	r2, [pc, #612]	@ (8003c0c <HAL_UART_IRQHandler+0x298>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	2298      	movs	r2, #152	@ 0x98
 80039ac:	18bc      	adds	r4, r7, r2
 80039ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80039b0:	18bb      	adds	r3, r7, r2
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d114      	bne.n	80039e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2220      	movs	r2, #32
 80039be:	4013      	ands	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00a      	beq.n	80039e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d100      	bne.n	80039d6 <HAL_UART_IRQHandler+0x62>
 80039d4:	e2be      	b.n	8003f54 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	0010      	movs	r0, r2
 80039de:	4798      	blx	r3
      }
      return;
 80039e0:	e2b8      	b.n	8003f54 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039e2:	2398      	movs	r3, #152	@ 0x98
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d100      	bne.n	80039ee <HAL_UART_IRQHandler+0x7a>
 80039ec:	e114      	b.n	8003c18 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039ee:	239c      	movs	r3, #156	@ 0x9c
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039fa:	23a0      	movs	r3, #160	@ 0xa0
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a83      	ldr	r2, [pc, #524]	@ (8003c10 <HAL_UART_IRQHandler+0x29c>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	d100      	bne.n	8003a08 <HAL_UART_IRQHandler+0x94>
 8003a06:	e107      	b.n	8003c18 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a08:	23a4      	movs	r3, #164	@ 0xa4
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d012      	beq.n	8003a3a <HAL_UART_IRQHandler+0xc6>
 8003a14:	23a0      	movs	r3, #160	@ 0xa0
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2284      	movs	r2, #132	@ 0x84
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	2201      	movs	r2, #1
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2184      	movs	r1, #132	@ 0x84
 8003a38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a3a:	23a4      	movs	r3, #164	@ 0xa4
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d011      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
 8003a46:	239c      	movs	r3, #156	@ 0x9c
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2202      	movs	r2, #2
 8003a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2284      	movs	r2, #132	@ 0x84
 8003a5e:	589b      	ldr	r3, [r3, r2]
 8003a60:	2204      	movs	r2, #4
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2184      	movs	r1, #132	@ 0x84
 8003a68:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a6a:	23a4      	movs	r3, #164	@ 0xa4
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2204      	movs	r2, #4
 8003a72:	4013      	ands	r3, r2
 8003a74:	d011      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
 8003a76:	239c      	movs	r3, #156	@ 0x9c
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2204      	movs	r2, #4
 8003a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2284      	movs	r2, #132	@ 0x84
 8003a8e:	589b      	ldr	r3, [r3, r2]
 8003a90:	2202      	movs	r2, #2
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2184      	movs	r1, #132	@ 0x84
 8003a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a9a:	23a4      	movs	r3, #164	@ 0xa4
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d017      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa6:	23a0      	movs	r3, #160	@ 0xa0
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2220      	movs	r2, #32
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d105      	bne.n	8003abe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ab2:	239c      	movs	r3, #156	@ 0x9c
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003abc:	d00b      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2284      	movs	r2, #132	@ 0x84
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	2208      	movs	r2, #8
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2184      	movs	r1, #132	@ 0x84
 8003ad4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ad6:	23a4      	movs	r3, #164	@ 0xa4
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_UART_IRQHandler+0x198>
 8003ae4:	23a0      	movs	r3, #160	@ 0xa0
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	04db      	lsls	r3, r3, #19
 8003aee:	4013      	ands	r3, r2
 8003af0:	d00c      	beq.n	8003b0c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2280      	movs	r2, #128	@ 0x80
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2284      	movs	r2, #132	@ 0x84
 8003b00:	589b      	ldr	r3, [r3, r2]
 8003b02:	2220      	movs	r2, #32
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2184      	movs	r1, #132	@ 0x84
 8003b0a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2284      	movs	r2, #132	@ 0x84
 8003b10:	589b      	ldr	r3, [r3, r2]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d100      	bne.n	8003b18 <HAL_UART_IRQHandler+0x1a4>
 8003b16:	e21f      	b.n	8003f58 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b18:	23a4      	movs	r3, #164	@ 0xa4
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	4013      	ands	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b24:	23a0      	movs	r3, #160	@ 0xa0
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	0010      	movs	r0, r2
 8003b40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2284      	movs	r2, #132	@ 0x84
 8003b46:	589b      	ldr	r3, [r3, r2]
 8003b48:	2194      	movs	r1, #148	@ 0x94
 8003b4a:	187a      	adds	r2, r7, r1
 8003b4c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2240      	movs	r2, #64	@ 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d004      	beq.n	8003b66 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2228      	movs	r2, #40	@ 0x28
 8003b62:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b64:	d047      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 ff6f 	bl	8004a4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d137      	bne.n	8003bec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b84:	2090      	movs	r0, #144	@ 0x90
 8003b86:	183a      	adds	r2, r7, r0
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2140      	movs	r1, #64	@ 0x40
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc0:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <HAL_UART_IRQHandler+0x2a0>)
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fd fd49 	bl	8001660 <HAL_DMA_Abort_IT>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d01a      	beq.n	8003c08 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bdc:	0018      	movs	r0, r3
 8003bde:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e012      	b.n	8003c08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc ffd9 	bl	8000b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bea:	e00d      	b.n	8003c08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7fc ffd4 	bl	8000b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e008      	b.n	8003c08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fc ffcf 	bl	8000b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2284      	movs	r2, #132	@ 0x84
 8003c02:	2100      	movs	r1, #0
 8003c04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c06:	e1a7      	b.n	8003f58 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	46c0      	nop			@ (mov r8, r8)
    return;
 8003c0a:	e1a5      	b.n	8003f58 <HAL_UART_IRQHandler+0x5e4>
 8003c0c:	0000080f 	.word	0x0000080f
 8003c10:	04000120 	.word	0x04000120
 8003c14:	08004e37 	.word	0x08004e37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d000      	beq.n	8003c22 <HAL_UART_IRQHandler+0x2ae>
 8003c20:	e159      	b.n	8003ed6 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c22:	23a4      	movs	r3, #164	@ 0xa4
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2210      	movs	r2, #16
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d100      	bne.n	8003c30 <HAL_UART_IRQHandler+0x2bc>
 8003c2e:	e152      	b.n	8003ed6 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c30:	23a0      	movs	r3, #160	@ 0xa0
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2210      	movs	r2, #16
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <HAL_UART_IRQHandler+0x2ca>
 8003c3c:	e14b      	b.n	8003ed6 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2210      	movs	r2, #16
 8003c44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2240      	movs	r2, #64	@ 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d000      	beq.n	8003c56 <HAL_UART_IRQHandler+0x2e2>
 8003c54:	e0bf      	b.n	8003dd6 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	217e      	movs	r1, #126	@ 0x7e
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d100      	bne.n	8003c6e <HAL_UART_IRQHandler+0x2fa>
 8003c6c:	e095      	b.n	8003d9a <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2258      	movs	r2, #88	@ 0x58
 8003c72:	5a9b      	ldrh	r3, [r3, r2]
 8003c74:	187a      	adds	r2, r7, r1
 8003c76:	8812      	ldrh	r2, [r2, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d300      	bcc.n	8003c7e <HAL_UART_IRQHandler+0x30a>
 8003c7c:	e08d      	b.n	8003d9a <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	187a      	adds	r2, r7, r1
 8003c82:	215a      	movs	r1, #90	@ 0x5a
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2220      	movs	r2, #32
 8003c92:	4013      	ands	r3, r2
 8003c94:	d16f      	bne.n	8003d76 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c96:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	49ad      	ldr	r1, [pc, #692]	@ (8003f6c <HAL_UART_IRQHandler+0x5f8>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2101      	movs	r1, #1
 8003cea:	438a      	bics	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d04:	2301      	movs	r3, #1
 8003d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2140      	movs	r1, #64	@ 0x40
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d22:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	2120      	movs	r1, #32
 8003d32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d44:	2301      	movs	r3, #1
 8003d46:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2110      	movs	r1, #16
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7fd fc35 	bl	80015e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2258      	movs	r2, #88	@ 0x58
 8003d80:	5a9a      	ldrh	r2, [r3, r2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	215a      	movs	r1, #90	@ 0x5a
 8003d86:	5a5b      	ldrh	r3, [r3, r1]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fc fee6 	bl	8000b64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d98:	e0e0      	b.n	8003f5c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2258      	movs	r2, #88	@ 0x58
 8003d9e:	5a9b      	ldrh	r3, [r3, r2]
 8003da0:	227e      	movs	r2, #126	@ 0x7e
 8003da2:	18ba      	adds	r2, r7, r2
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d000      	beq.n	8003dac <HAL_UART_IRQHandler+0x438>
 8003daa:	e0d7      	b.n	8003f5c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2220      	movs	r2, #32
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d000      	beq.n	8003dbe <HAL_UART_IRQHandler+0x44a>
 8003dbc:	e0ce      	b.n	8003f5c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2258      	movs	r2, #88	@ 0x58
 8003dc8:	5a9a      	ldrh	r2, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0011      	movs	r1, r2
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7fc fec8 	bl	8000b64 <HAL_UARTEx_RxEventCallback>
      return;
 8003dd4:	e0c2      	b.n	8003f5c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2258      	movs	r2, #88	@ 0x58
 8003dda:	5a99      	ldrh	r1, [r3, r2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	225a      	movs	r2, #90	@ 0x5a
 8003de0:	5a9b      	ldrh	r3, [r3, r2]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	208e      	movs	r0, #142	@ 0x8e
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	1a8a      	subs	r2, r1, r2
 8003dea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	225a      	movs	r2, #90	@ 0x5a
 8003df0:	5a9b      	ldrh	r3, [r3, r2]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d100      	bne.n	8003dfa <HAL_UART_IRQHandler+0x486>
 8003df8:	e0b2      	b.n	8003f60 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d100      	bne.n	8003e04 <HAL_UART_IRQHandler+0x490>
 8003e02:	e0ad      	b.n	8003f60 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0c:	2488      	movs	r4, #136	@ 0x88
 8003e0e:	193a      	adds	r2, r7, r4
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	2301      	movs	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4951      	ldr	r1, [pc, #324]	@ (8003f70 <HAL_UART_IRQHandler+0x5fc>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e44:	2484      	movs	r4, #132	@ 0x84
 8003e46:	193a      	adds	r2, r7, r4
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	438a      	bics	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2280      	movs	r2, #128	@ 0x80
 8003e78:	2120      	movs	r1, #32
 8003e7a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	2480      	movs	r4, #128	@ 0x80
 8003e92:	193a      	adds	r2, r7, r4
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	2301      	movs	r3, #1
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2110      	movs	r1, #16
 8003eae:	438a      	bics	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc fe48 	bl	8000b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed4:	e044      	b.n	8003f60 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ed6:	23a4      	movs	r3, #164	@ 0xa4
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	035b      	lsls	r3, r3, #13
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d010      	beq.n	8003f06 <HAL_UART_IRQHandler+0x592>
 8003ee4:	239c      	movs	r3, #156	@ 0x9c
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	03db      	lsls	r3, r3, #15
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	0352      	lsls	r2, r2, #13
 8003efa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0018      	movs	r0, r3
 8003f00:	f000 ffd7 	bl	8004eb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f04:	e02f      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f06:	23a4      	movs	r3, #164	@ 0xa4
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f12:	23a0      	movs	r3, #160	@ 0xa0
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01e      	beq.n	8003f64 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	4798      	blx	r3
    }
    return;
 8003f30:	e018      	b.n	8003f64 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f32:	23a4      	movs	r3, #164	@ 0xa4
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2240      	movs	r2, #64	@ 0x40
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
 8003f3e:	23a0      	movs	r3, #160	@ 0xa0
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2240      	movs	r2, #64	@ 0x40
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00d      	beq.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 ff85 	bl	8004e5c <UART_EndTransmit_IT>
    return;
 8003f52:	e008      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003f54:	46c0      	nop			@ (mov r8, r8)
 8003f56:	e006      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	e004      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	e002      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003f60:	46c0      	nop			@ (mov r8, r8)
 8003f62:	e000      	b.n	8003f66 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003f64:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b02b      	add	sp, #172	@ 0xac
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	fffffeff 	.word	0xfffffeff
 8003f70:	fffffedf 	.word	0xfffffedf

08003f74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f7c:	46c0      	nop			@ (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fac:	46c0      	nop			@ (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fc0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2280      	movs	r2, #128	@ 0x80
 8003fc6:	589b      	ldr	r3, [r3, r2]
 8003fc8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2284      	movs	r2, #132	@ 0x84
 8003fe4:	589b      	ldr	r3, [r3, r2]
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b002      	add	sp, #8
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	b08e      	sub	sp, #56	@ 0x38
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff8:	231a      	movs	r3, #26
 8003ffa:	2218      	movs	r2, #24
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4ac3      	ldr	r2, [pc, #780]	@ (8004330 <UART_SetConfig+0x340>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4abe      	ldr	r2, [pc, #760]	@ (8004334 <UART_SetConfig+0x344>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4ab8      	ldr	r2, [pc, #736]	@ (8004338 <UART_SetConfig+0x348>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004060:	4313      	orrs	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4ab4      	ldr	r2, [pc, #720]	@ (800433c <UART_SetConfig+0x34c>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4ab0      	ldr	r2, [pc, #704]	@ (8004340 <UART_SetConfig+0x350>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d131      	bne.n	80040e8 <UART_SetConfig+0xf8>
 8004084:	4baf      	ldr	r3, [pc, #700]	@ (8004344 <UART_SetConfig+0x354>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	2b03      	cmp	r3, #3
 800408e:	d01d      	beq.n	80040cc <UART_SetConfig+0xdc>
 8004090:	d823      	bhi.n	80040da <UART_SetConfig+0xea>
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00c      	beq.n	80040b0 <UART_SetConfig+0xc0>
 8004096:	d820      	bhi.n	80040da <UART_SetConfig+0xea>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0xb2>
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00e      	beq.n	80040be <UART_SetConfig+0xce>
 80040a0:	e01b      	b.n	80040da <UART_SetConfig+0xea>
 80040a2:	231b      	movs	r3, #27
 80040a4:	2218      	movs	r2, #24
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e0b4      	b.n	800421a <UART_SetConfig+0x22a>
 80040b0:	231b      	movs	r3, #27
 80040b2:	2218      	movs	r2, #24
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	2202      	movs	r2, #2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e0ad      	b.n	800421a <UART_SetConfig+0x22a>
 80040be:	231b      	movs	r3, #27
 80040c0:	2218      	movs	r2, #24
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	19db      	adds	r3, r3, r7
 80040c6:	2204      	movs	r2, #4
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e0a6      	b.n	800421a <UART_SetConfig+0x22a>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2218      	movs	r2, #24
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2208      	movs	r2, #8
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e09f      	b.n	800421a <UART_SetConfig+0x22a>
 80040da:	231b      	movs	r3, #27
 80040dc:	2218      	movs	r2, #24
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	19db      	adds	r3, r3, r7
 80040e2:	2210      	movs	r2, #16
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e098      	b.n	800421a <UART_SetConfig+0x22a>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a96      	ldr	r2, [pc, #600]	@ (8004348 <UART_SetConfig+0x358>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d131      	bne.n	8004156 <UART_SetConfig+0x166>
 80040f2:	4b94      	ldr	r3, [pc, #592]	@ (8004344 <UART_SetConfig+0x354>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f6:	220c      	movs	r2, #12
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d01d      	beq.n	800413a <UART_SetConfig+0x14a>
 80040fe:	d823      	bhi.n	8004148 <UART_SetConfig+0x158>
 8004100:	2b08      	cmp	r3, #8
 8004102:	d00c      	beq.n	800411e <UART_SetConfig+0x12e>
 8004104:	d820      	bhi.n	8004148 <UART_SetConfig+0x158>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x120>
 800410a:	2b04      	cmp	r3, #4
 800410c:	d00e      	beq.n	800412c <UART_SetConfig+0x13c>
 800410e:	e01b      	b.n	8004148 <UART_SetConfig+0x158>
 8004110:	231b      	movs	r3, #27
 8004112:	2218      	movs	r2, #24
 8004114:	189b      	adds	r3, r3, r2
 8004116:	19db      	adds	r3, r3, r7
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e07d      	b.n	800421a <UART_SetConfig+0x22a>
 800411e:	231b      	movs	r3, #27
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e076      	b.n	800421a <UART_SetConfig+0x22a>
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e06f      	b.n	800421a <UART_SetConfig+0x22a>
 800413a:	231b      	movs	r3, #27
 800413c:	2218      	movs	r2, #24
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2208      	movs	r2, #8
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e068      	b.n	800421a <UART_SetConfig+0x22a>
 8004148:	231b      	movs	r3, #27
 800414a:	2218      	movs	r2, #24
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2210      	movs	r2, #16
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e061      	b.n	800421a <UART_SetConfig+0x22a>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7c      	ldr	r2, [pc, #496]	@ (800434c <UART_SetConfig+0x35c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d106      	bne.n	800416e <UART_SetConfig+0x17e>
 8004160:	231b      	movs	r3, #27
 8004162:	2218      	movs	r2, #24
 8004164:	189b      	adds	r3, r3, r2
 8004166:	19db      	adds	r3, r3, r7
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e055      	b.n	800421a <UART_SetConfig+0x22a>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a77      	ldr	r2, [pc, #476]	@ (8004350 <UART_SetConfig+0x360>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d106      	bne.n	8004186 <UART_SetConfig+0x196>
 8004178:	231b      	movs	r3, #27
 800417a:	2218      	movs	r2, #24
 800417c:	189b      	adds	r3, r3, r2
 800417e:	19db      	adds	r3, r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e049      	b.n	800421a <UART_SetConfig+0x22a>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6b      	ldr	r2, [pc, #428]	@ (8004338 <UART_SetConfig+0x348>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d13e      	bne.n	800420e <UART_SetConfig+0x21e>
 8004190:	4b6c      	ldr	r3, [pc, #432]	@ (8004344 <UART_SetConfig+0x354>)
 8004192:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004194:	23c0      	movs	r3, #192	@ 0xc0
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	4013      	ands	r3, r2
 800419a:	22c0      	movs	r2, #192	@ 0xc0
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <UART_SetConfig+0x202>
 80041a2:	22c0      	movs	r2, #192	@ 0xc0
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d82a      	bhi.n	8004200 <UART_SetConfig+0x210>
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0x1e6>
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d822      	bhi.n	8004200 <UART_SetConfig+0x210>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <UART_SetConfig+0x1d8>
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	00d2      	lsls	r2, r2, #3
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <UART_SetConfig+0x1f4>
 80041c6:	e01b      	b.n	8004200 <UART_SetConfig+0x210>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e021      	b.n	800421a <UART_SetConfig+0x22a>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2202      	movs	r2, #2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e01a      	b.n	800421a <UART_SetConfig+0x22a>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2204      	movs	r2, #4
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e013      	b.n	800421a <UART_SetConfig+0x22a>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2218      	movs	r2, #24
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2208      	movs	r2, #8
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e00c      	b.n	800421a <UART_SetConfig+0x22a>
 8004200:	231b      	movs	r3, #27
 8004202:	2218      	movs	r2, #24
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2210      	movs	r2, #16
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e005      	b.n	800421a <UART_SetConfig+0x22a>
 800420e:	231b      	movs	r3, #27
 8004210:	2218      	movs	r2, #24
 8004212:	189b      	adds	r3, r3, r2
 8004214:	19db      	adds	r3, r3, r7
 8004216:	2210      	movs	r2, #16
 8004218:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a46      	ldr	r2, [pc, #280]	@ (8004338 <UART_SetConfig+0x348>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d000      	beq.n	8004226 <UART_SetConfig+0x236>
 8004224:	e09a      	b.n	800435c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004226:	231b      	movs	r3, #27
 8004228:	2218      	movs	r2, #24
 800422a:	189b      	adds	r3, r3, r2
 800422c:	19db      	adds	r3, r3, r7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d01d      	beq.n	8004270 <UART_SetConfig+0x280>
 8004234:	dc20      	bgt.n	8004278 <UART_SetConfig+0x288>
 8004236:	2b04      	cmp	r3, #4
 8004238:	d015      	beq.n	8004266 <UART_SetConfig+0x276>
 800423a:	dc1d      	bgt.n	8004278 <UART_SetConfig+0x288>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <UART_SetConfig+0x256>
 8004240:	2b02      	cmp	r3, #2
 8004242:	d005      	beq.n	8004250 <UART_SetConfig+0x260>
 8004244:	e018      	b.n	8004278 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004246:	f7fe fd2d 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 800424a:	0003      	movs	r3, r0
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800424e:	e01c      	b.n	800428a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004250:	4b3c      	ldr	r3, [pc, #240]	@ (8004344 <UART_SetConfig+0x354>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2210      	movs	r2, #16
 8004256:	4013      	ands	r3, r2
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <UART_SetConfig+0x364>)
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800425e:	e014      	b.n	800428a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004260:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <UART_SetConfig+0x368>)
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004264:	e011      	b.n	800428a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004266:	f7fe fc8d 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 800426a:	0003      	movs	r3, r0
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800426e:	e00c      	b.n	800428a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004276:	e008      	b.n	800428a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800427c:	231a      	movs	r3, #26
 800427e:	2218      	movs	r2, #24
 8004280:	189b      	adds	r3, r3, r2
 8004282:	19db      	adds	r3, r3, r7
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
        break;
 8004288:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d100      	bne.n	8004292 <UART_SetConfig+0x2a2>
 8004290:	e133      	b.n	80044fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	0013      	movs	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	189b      	adds	r3, r3, r2
 800429c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800429e:	429a      	cmp	r2, r3
 80042a0:	d305      	bcc.n	80042ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d906      	bls.n	80042bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80042ae:	231a      	movs	r3, #26
 80042b0:	2218      	movs	r2, #24
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e11e      	b.n	80044fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	000b      	movs	r3, r1
 80042ca:	0e1b      	lsrs	r3, r3, #24
 80042cc:	0010      	movs	r0, r2
 80042ce:	0205      	lsls	r5, r0, #8
 80042d0:	431d      	orrs	r5, r3
 80042d2:	000b      	movs	r3, r1
 80042d4:	021c      	lsls	r4, r3, #8
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	1900      	adds	r0, r0, r4
 80042e8:	4169      	adcs	r1, r5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f7fb ff9a 	bl	8000230 <__aeabi_uldivmod>
 80042fc:	0002      	movs	r2, r0
 80042fe:	000b      	movs	r3, r1
 8004300:	0013      	movs	r3, r2
 8004302:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004306:	23c0      	movs	r3, #192	@ 0xc0
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	429a      	cmp	r2, r3
 800430c:	d309      	bcc.n	8004322 <UART_SetConfig+0x332>
 800430e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004310:	2380      	movs	r3, #128	@ 0x80
 8004312:	035b      	lsls	r3, r3, #13
 8004314:	429a      	cmp	r2, r3
 8004316:	d204      	bcs.n	8004322 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	e0eb      	b.n	80044fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004322:	231a      	movs	r3, #26
 8004324:	2218      	movs	r2, #24
 8004326:	189b      	adds	r3, r3, r2
 8004328:	19db      	adds	r3, r3, r7
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e0e4      	b.n	80044fa <UART_SetConfig+0x50a>
 8004330:	efff69f3 	.word	0xefff69f3
 8004334:	ffffcfff 	.word	0xffffcfff
 8004338:	40004800 	.word	0x40004800
 800433c:	fffff4ff 	.word	0xfffff4ff
 8004340:	40013800 	.word	0x40013800
 8004344:	40021000 	.word	0x40021000
 8004348:	40004400 	.word	0x40004400
 800434c:	40004c00 	.word	0x40004c00
 8004350:	40005000 	.word	0x40005000
 8004354:	003d0900 	.word	0x003d0900
 8004358:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	429a      	cmp	r2, r3
 8004366:	d000      	beq.n	800436a <UART_SetConfig+0x37a>
 8004368:	e070      	b.n	800444c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800436a:	231b      	movs	r3, #27
 800436c:	2218      	movs	r2, #24
 800436e:	189b      	adds	r3, r3, r2
 8004370:	19db      	adds	r3, r3, r7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d822      	bhi.n	80043be <UART_SetConfig+0x3ce>
 8004378:	009a      	lsls	r2, r3, #2
 800437a:	4b67      	ldr	r3, [pc, #412]	@ (8004518 <UART_SetConfig+0x528>)
 800437c:	18d3      	adds	r3, r2, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004382:	f7fe fc8f 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004386:	0003      	movs	r3, r0
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800438a:	e021      	b.n	80043d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7fe fca0 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8004390:	0003      	movs	r3, r0
 8004392:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004394:	e01c      	b.n	80043d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004396:	4b61      	ldr	r3, [pc, #388]	@ (800451c <UART_SetConfig+0x52c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2210      	movs	r2, #16
 800439c:	4013      	ands	r3, r2
 800439e:	d002      	beq.n	80043a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004520 <UART_SetConfig+0x530>)
 80043a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043a4:	e014      	b.n	80043d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80043a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004524 <UART_SetConfig+0x534>)
 80043a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043aa:	e011      	b.n	80043d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ac:	f7fe fbea 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 80043b0:	0003      	movs	r3, r0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043b4:	e00c      	b.n	80043d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043bc:	e008      	b.n	80043d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80043c2:	231a      	movs	r3, #26
 80043c4:	2218      	movs	r2, #24
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
        break;
 80043ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d100      	bne.n	80043d8 <UART_SetConfig+0x3e8>
 80043d6:	e090      	b.n	80044fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	005a      	lsls	r2, r3, #1
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	18d2      	adds	r2, r2, r3
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0019      	movs	r1, r3
 80043ea:	0010      	movs	r0, r2
 80043ec:	f7fb fe94 	bl	8000118 <__udivsi3>
 80043f0:	0003      	movs	r3, r0
 80043f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d921      	bls.n	800443e <UART_SetConfig+0x44e>
 80043fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	025b      	lsls	r3, r3, #9
 8004400:	429a      	cmp	r2, r3
 8004402:	d21c      	bcs.n	800443e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	b29a      	uxth	r2, r3
 8004408:	200e      	movs	r0, #14
 800440a:	2418      	movs	r4, #24
 800440c:	1903      	adds	r3, r0, r4
 800440e:	19db      	adds	r3, r3, r7
 8004410:	210f      	movs	r1, #15
 8004412:	438a      	bics	r2, r1
 8004414:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	2207      	movs	r2, #7
 800441e:	4013      	ands	r3, r2
 8004420:	b299      	uxth	r1, r3
 8004422:	1903      	adds	r3, r0, r4
 8004424:	19db      	adds	r3, r3, r7
 8004426:	1902      	adds	r2, r0, r4
 8004428:	19d2      	adds	r2, r2, r7
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1902      	adds	r2, r0, r4
 8004436:	19d2      	adds	r2, r2, r7
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e05d      	b.n	80044fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800443e:	231a      	movs	r3, #26
 8004440:	2218      	movs	r2, #24
 8004442:	189b      	adds	r3, r3, r2
 8004444:	19db      	adds	r3, r3, r7
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e056      	b.n	80044fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800444c:	231b      	movs	r3, #27
 800444e:	2218      	movs	r2, #24
 8004450:	189b      	adds	r3, r3, r2
 8004452:	19db      	adds	r3, r3, r7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b08      	cmp	r3, #8
 8004458:	d822      	bhi.n	80044a0 <UART_SetConfig+0x4b0>
 800445a:	009a      	lsls	r2, r3, #2
 800445c:	4b32      	ldr	r3, [pc, #200]	@ (8004528 <UART_SetConfig+0x538>)
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7fe fc1e 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004468:	0003      	movs	r3, r0
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800446c:	e021      	b.n	80044b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446e:	f7fe fc2f 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8004472:	0003      	movs	r3, r0
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004476:	e01c      	b.n	80044b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004478:	4b28      	ldr	r3, [pc, #160]	@ (800451c <UART_SetConfig+0x52c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2210      	movs	r2, #16
 800447e:	4013      	ands	r3, r2
 8004480:	d002      	beq.n	8004488 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004482:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <UART_SetConfig+0x530>)
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004486:	e014      	b.n	80044b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004488:	4b26      	ldr	r3, [pc, #152]	@ (8004524 <UART_SetConfig+0x534>)
 800448a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800448c:	e011      	b.n	80044b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe fb79 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004492:	0003      	movs	r3, r0
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004496:	e00c      	b.n	80044b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800449e:	e008      	b.n	80044b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80044a4:	231a      	movs	r3, #26
 80044a6:	2218      	movs	r2, #24
 80044a8:	189b      	adds	r3, r3, r2
 80044aa:	19db      	adds	r3, r3, r7
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
        break;
 80044b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	085a      	lsrs	r2, r3, #1
 80044be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c0:	18d2      	adds	r2, r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	0019      	movs	r1, r3
 80044c8:	0010      	movs	r0, r2
 80044ca:	f7fb fe25 	bl	8000118 <__udivsi3>
 80044ce:	0003      	movs	r3, r0
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d4:	2b0f      	cmp	r3, #15
 80044d6:	d90a      	bls.n	80044ee <UART_SetConfig+0x4fe>
 80044d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	025b      	lsls	r3, r3, #9
 80044de:	429a      	cmp	r2, r3
 80044e0:	d205      	bcs.n	80044ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e005      	b.n	80044fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80044ee:	231a      	movs	r3, #26
 80044f0:	2218      	movs	r2, #24
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2200      	movs	r2, #0
 80044fe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2200      	movs	r2, #0
 8004504:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004506:	231a      	movs	r3, #26
 8004508:	2218      	movs	r2, #24
 800450a:	189b      	adds	r3, r3, r2
 800450c:	19db      	adds	r3, r3, r7
 800450e:	781b      	ldrb	r3, [r3, #0]
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b00e      	add	sp, #56	@ 0x38
 8004516:	bdb0      	pop	{r4, r5, r7, pc}
 8004518:	08005bb0 	.word	0x08005bb0
 800451c:	40021000 	.word	0x40021000
 8004520:	003d0900 	.word	0x003d0900
 8004524:	00f42400 	.word	0x00f42400
 8004528:	08005bd4 	.word	0x08005bd4

0800452c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	2208      	movs	r2, #8
 800453a:	4013      	ands	r3, r2
 800453c:	d00b      	beq.n	8004556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <UART_AdvFeatureConfig+0x144>)
 8004546:	4013      	ands	r3, r2
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d00b      	beq.n	8004578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a43      	ldr	r2, [pc, #268]	@ (8004674 <UART_AdvFeatureConfig+0x148>)
 8004568:	4013      	ands	r3, r2
 800456a:	0019      	movs	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	2202      	movs	r2, #2
 800457e:	4013      	ands	r3, r2
 8004580:	d00b      	beq.n	800459a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4a3b      	ldr	r2, [pc, #236]	@ (8004678 <UART_AdvFeatureConfig+0x14c>)
 800458a:	4013      	ands	r3, r2
 800458c:	0019      	movs	r1, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	2204      	movs	r2, #4
 80045a0:	4013      	ands	r3, r2
 80045a2:	d00b      	beq.n	80045bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4a34      	ldr	r2, [pc, #208]	@ (800467c <UART_AdvFeatureConfig+0x150>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	2210      	movs	r2, #16
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00b      	beq.n	80045de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <UART_AdvFeatureConfig+0x154>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2220      	movs	r2, #32
 80045e4:	4013      	ands	r3, r2
 80045e6:	d00b      	beq.n	8004600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4a25      	ldr	r2, [pc, #148]	@ (8004684 <UART_AdvFeatureConfig+0x158>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	2240      	movs	r2, #64	@ 0x40
 8004606:	4013      	ands	r3, r2
 8004608:	d01d      	beq.n	8004646 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a1d      	ldr	r2, [pc, #116]	@ (8004688 <UART_AdvFeatureConfig+0x15c>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	035b      	lsls	r3, r3, #13
 800462a:	429a      	cmp	r2, r3
 800462c:	d10b      	bne.n	8004646 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a15      	ldr	r2, [pc, #84]	@ (800468c <UART_AdvFeatureConfig+0x160>)
 8004636:	4013      	ands	r3, r2
 8004638:	0019      	movs	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	2280      	movs	r2, #128	@ 0x80
 800464c:	4013      	ands	r3, r2
 800464e:	d00b      	beq.n	8004668 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4a0e      	ldr	r2, [pc, #56]	@ (8004690 <UART_AdvFeatureConfig+0x164>)
 8004658:	4013      	ands	r3, r2
 800465a:	0019      	movs	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	ffff7fff 	.word	0xffff7fff
 8004674:	fffdffff 	.word	0xfffdffff
 8004678:	fffeffff 	.word	0xfffeffff
 800467c:	fffbffff 	.word	0xfffbffff
 8004680:	ffffefff 	.word	0xffffefff
 8004684:	ffffdfff 	.word	0xffffdfff
 8004688:	ffefffff 	.word	0xffefffff
 800468c:	ff9fffff 	.word	0xff9fffff
 8004690:	fff7ffff 	.word	0xfff7ffff

08004694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b092      	sub	sp, #72	@ 0x48
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2284      	movs	r2, #132	@ 0x84
 80046a0:	2100      	movs	r1, #0
 80046a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a4:	f7fc fdb2 	bl	800120c <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2208      	movs	r2, #8
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d12c      	bne.n	8004714 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046bc:	2280      	movs	r2, #128	@ 0x80
 80046be:	0391      	lsls	r1, r2, #14
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4a46      	ldr	r2, [pc, #280]	@ (80047dc <UART_CheckIdleState+0x148>)
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f000 f88c 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d021      	beq.n	8004714 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046da:	2301      	movs	r3, #1
 80046dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			@ (mov r8, r8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2180      	movs	r1, #128	@ 0x80
 80046f2:	438a      	bics	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2278      	movs	r2, #120	@ 0x78
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e05f      	b.n	80047d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2204      	movs	r2, #4
 800471c:	4013      	ands	r3, r2
 800471e:	2b04      	cmp	r3, #4
 8004720:	d146      	bne.n	80047b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004724:	2280      	movs	r2, #128	@ 0x80
 8004726:	03d1      	lsls	r1, r2, #15
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <UART_CheckIdleState+0x148>)
 800472c:	9200      	str	r2, [sp, #0]
 800472e:	2200      	movs	r2, #0
 8004730:	f000 f858 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d03b      	beq.n	80047b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004738:	f3ef 8310 	mrs	r3, PRIMASK
 800473c:	60fb      	str	r3, [r7, #12]
  return(result);
 800473e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
 8004742:	2301      	movs	r3, #1
 8004744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			@ (mov r8, r8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4921      	ldr	r1, [pc, #132]	@ (80047e0 <UART_CheckIdleState+0x14c>)
 800475a:	400a      	ands	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476a:	f3ef 8310 	mrs	r3, PRIMASK
 800476e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004770:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30
 8004774:	2301      	movs	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2101      	movs	r1, #1
 800478c:	438a      	bics	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	2120      	movs	r1, #32
 80047a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2278      	movs	r2, #120	@ 0x78
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e011      	b.n	80047d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2280      	movs	r2, #128	@ 0x80
 80047ba:	2120      	movs	r1, #32
 80047bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2278      	movs	r2, #120	@ 0x78
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b010      	add	sp, #64	@ 0x40
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	01ffffff 	.word	0x01ffffff
 80047e0:	fffffedf 	.word	0xfffffedf

080047e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	1dfb      	adds	r3, r7, #7
 80047f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	e051      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3301      	adds	r3, #1
 80047fa:	d04e      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fc:	f7fc fd06 	bl	800120c <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <UART_WaitOnFlagUntilTimeout+0x2e>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e051      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2204      	movs	r2, #4
 800481e:	4013      	ands	r3, r2
 8004820:	d03b      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b80      	cmp	r3, #128	@ 0x80
 8004826:	d038      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	d035      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2208      	movs	r2, #8
 8004836:	4013      	ands	r3, r2
 8004838:	2b08      	cmp	r3, #8
 800483a:	d111      	bne.n	8004860 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 f900 	bl	8004a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2284      	movs	r2, #132	@ 0x84
 8004850:	2108      	movs	r1, #8
 8004852:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2278      	movs	r2, #120	@ 0x78
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e02c      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	2380      	movs	r3, #128	@ 0x80
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	401a      	ands	r2, r3
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	429a      	cmp	r2, r3
 8004872:	d112      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2280      	movs	r2, #128	@ 0x80
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f8e3 	bl	8004a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2284      	movs	r2, #132	@ 0x84
 800488a:	2120      	movs	r1, #32
 800488c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2278      	movs	r2, #120	@ 0x78
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00f      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	425a      	negs	r2, r3
 80048aa:	4153      	adcs	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	001a      	movs	r2, r3
 80048b0:	1dfb      	adds	r3, r7, #7
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d09e      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b090      	sub	sp, #64	@ 0x40
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	1dbb      	adds	r3, r7, #6
 80048d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1dba      	adds	r2, r7, #6
 80048dc:	2158      	movs	r1, #88	@ 0x58
 80048de:	8812      	ldrh	r2, [r2, #0]
 80048e0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2284      	movs	r2, #132	@ 0x84
 80048e6:	2100      	movs	r1, #0
 80048e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2280      	movs	r2, #128	@ 0x80
 80048ee:	2122      	movs	r1, #34	@ 0x22
 80048f0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fe:	4a3e      	ldr	r2, [pc, #248]	@ (80049f8 <UART_Start_Receive_DMA+0x134>)
 8004900:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	4a3d      	ldr	r2, [pc, #244]	@ (80049fc <UART_Start_Receive_DMA+0x138>)
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a00 <UART_Start_Receive_DMA+0x13c>)
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004916:	2200      	movs	r2, #0
 8004918:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3324      	adds	r3, #36	@ 0x24
 8004924:	0019      	movs	r1, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	001a      	movs	r2, r3
 800492c:	1dbb      	adds	r3, r7, #6
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	f7fc fdf0 	bl	8001514 <HAL_DMA_Start_IT>
 8004934:	1e03      	subs	r3, r0, #0
 8004936:	d009      	beq.n	800494c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2284      	movs	r2, #132	@ 0x84
 800493c:	2110      	movs	r1, #16
 800493e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2280      	movs	r2, #128	@ 0x80
 8004944:	2120      	movs	r1, #32
 8004946:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e050      	b.n	80049ee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d019      	beq.n	8004988 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495e:	2301      	movs	r3, #1
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	0049      	lsls	r1, r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004988:	f3ef 8310 	mrs	r3, PRIMASK
 800498c:	613b      	str	r3, [r7, #16]
  return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2101      	movs	r1, #1
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f383 8810 	msr	PRIMASK, r3
}
 80049b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	61fb      	str	r3, [r7, #28]
  return(result);
 80049c0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	2301      	movs	r3, #1
 80049c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2140      	movs	r1, #64	@ 0x40
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b010      	add	sp, #64	@ 0x40
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	08004bcd 	.word	0x08004bcd
 80049fc:	08004d35 	.word	0x08004d35
 8004a00:	08004db3 	.word	0x08004db3

08004a04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	2301      	movs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	21c0      	movs	r1, #192	@ 0xc0
 8004a2e:	438a      	bics	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f383 8810 	msr	PRIMASK, r3
}
 8004a3c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b006      	add	sp, #24
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	@ 0x38
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	617b      	str	r3, [r7, #20]
  return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			@ (mov r8, r8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4926      	ldr	r1, [pc, #152]	@ (8004b10 <UART_EndRxTransfer+0xc4>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a90:	2301      	movs	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d118      	bne.n	8004af2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aca:	2301      	movs	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			@ (mov r8, r8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	438a      	bics	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2280      	movs	r2, #128	@ 0x80
 8004af6:	2120      	movs	r1, #32
 8004af8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b00e      	add	sp, #56	@ 0x38
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	fffffedf 	.word	0xfffffedf

08004b14 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08c      	sub	sp, #48	@ 0x30
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d135      	bne.n	8004b9a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b30:	2252      	movs	r2, #82	@ 0x52
 8004b32:	2100      	movs	r1, #0
 8004b34:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b40:	2301      	movs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	438a      	bics	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f383 8810 	msr	PRIMASK, r3
}
 8004b66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b68:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b6e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2140      	movs	r1, #64	@ 0x40
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	e004      	b.n	8004ba4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff f9e9 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46c0      	nop			@ (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b00c      	add	sp, #48	@ 0x30
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7ff f9e1 	bl	8003f84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b094      	sub	sp, #80	@ 0x50
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2220      	movs	r2, #32
 8004be2:	4013      	ands	r3, r2
 8004be4:	d16f      	bne.n	8004cc6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be8:	225a      	movs	r2, #90	@ 0x5a
 8004bea:	2100      	movs	r1, #0
 8004bec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf4:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4948      	ldr	r1, [pc, #288]	@ (8004d30 <UART_DMAReceiveCplt+0x164>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c20:	f3ef 8310 	mrs	r3, PRIMASK
 8004c24:	623b      	str	r3, [r7, #32]
  return(result);
 8004c26:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	f383 8810 	msr	PRIMASK, r3
}
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	438a      	bics	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f383 8810 	msr	PRIMASK, r3
}
 8004c50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c52:	f3ef 8310 	mrs	r3, PRIMASK
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2140      	movs	r1, #64	@ 0x40
 8004c74:	438a      	bics	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c86:	2280      	movs	r2, #128	@ 0x80
 8004c88:	2120      	movs	r1, #32
 8004c8a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d118      	bne.n	8004cc6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c94:	f3ef 8310 	mrs	r3, PRIMASK
 8004c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			@ (mov r8, r8)
 8004caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2110      	movs	r1, #16
 8004cb6:	438a      	bics	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc8:	2200      	movs	r2, #0
 8004cca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d124      	bne.n	8004d1e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd6:	225a      	movs	r2, #90	@ 0x5a
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	213a      	movs	r1, #58	@ 0x3a
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cea:	2258      	movs	r2, #88	@ 0x58
 8004cec:	5a9b      	ldrh	r3, [r3, r2]
 8004cee:	187a      	adds	r2, r7, r1
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d204      	bcs.n	8004d00 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf8:	187a      	adds	r2, r7, r1
 8004cfa:	215a      	movs	r1, #90	@ 0x5a
 8004cfc:	8812      	ldrh	r2, [r2, #0]
 8004cfe:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d02:	2258      	movs	r2, #88	@ 0x58
 8004d04:	5a9a      	ldrh	r2, [r3, r2]
 8004d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d08:	215a      	movs	r1, #90	@ 0x5a
 8004d0a:	5a5b      	ldrh	r3, [r3, r1]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7fb ff24 	bl	8000b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d1c:	e003      	b.n	8004d26 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d20:	0018      	movs	r0, r3
 8004d22:	f7ff f937 	bl	8003f94 <HAL_UART_RxCpltCallback>
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b014      	add	sp, #80	@ 0x50
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	fffffeff 	.word	0xfffffeff

08004d34 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d128      	bne.n	8004da2 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2258      	movs	r2, #88	@ 0x58
 8004d54:	5a9b      	ldrh	r3, [r3, r2]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	225a      	movs	r2, #90	@ 0x5a
 8004d5e:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	210a      	movs	r1, #10
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2258      	movs	r2, #88	@ 0x58
 8004d70:	5a9b      	ldrh	r3, [r3, r2]
 8004d72:	187a      	adds	r2, r7, r1
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d804      	bhi.n	8004d84 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	187a      	adds	r2, r7, r1
 8004d7e:	215a      	movs	r1, #90	@ 0x5a
 8004d80:	8812      	ldrh	r2, [r2, #0]
 8004d82:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2258      	movs	r2, #88	@ 0x58
 8004d88:	5a9a      	ldrh	r2, [r3, r2]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	215a      	movs	r1, #90	@ 0x5a
 8004d8e:	5a5b      	ldrh	r3, [r3, r1]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fb fee2 	bl	8000b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004da0:	e003      	b.n	8004daa <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff f8fd 	bl	8003fa4 <HAL_UART_RxHalfCpltCallback>
}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2280      	movs	r2, #128	@ 0x80
 8004dca:	589b      	ldr	r3, [r3, r2]
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2280      	movs	r2, #128	@ 0x80
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b80      	cmp	r3, #128	@ 0x80
 8004dda:	d10a      	bne.n	8004df2 <UART_DMAError+0x40>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b21      	cmp	r3, #33	@ 0x21
 8004de0:	d107      	bne.n	8004df2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2252      	movs	r2, #82	@ 0x52
 8004de6:	2100      	movs	r1, #0
 8004de8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fe09 	bl	8004a04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	d10a      	bne.n	8004e16 <UART_DMAError+0x64>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b22      	cmp	r3, #34	@ 0x22
 8004e04:	d107      	bne.n	8004e16 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	225a      	movs	r2, #90	@ 0x5a
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff fe1b 	bl	8004a4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2284      	movs	r2, #132	@ 0x84
 8004e1a:	589b      	ldr	r3, [r3, r2]
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2184      	movs	r1, #132	@ 0x84
 8004e24:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7fb feb7 	bl	8000b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b006      	add	sp, #24
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	225a      	movs	r2, #90	@ 0x5a
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fb fea4 	bl	8000b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b004      	add	sp, #16
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			@ (mov r8, r8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2140      	movs	r1, #64	@ 0x40
 8004e86:	438a      	bics	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f383 8810 	msr	PRIMASK, r3
}
 8004e94:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7ff f865 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b006      	add	sp, #24
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec2:	b5b0      	push	{r4, r5, r7, lr}
 8004ec4:	b08a      	sub	sp, #40	@ 0x28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2280      	movs	r2, #128	@ 0x80
 8004ed4:	589b      	ldr	r3, [r3, r2]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d156      	bne.n	8004f88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ee0:	1dbb      	adds	r3, r7, #6
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e04e      	b.n	8004f8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	015b      	lsls	r3, r3, #5
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d109      	bne.n	8004f0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d105      	bne.n	8004f0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2201      	movs	r2, #1
 8004f04:	4013      	ands	r3, r2
 8004f06:	d001      	beq.n	8004f0c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e03e      	b.n	8004f8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004f18:	2527      	movs	r5, #39	@ 0x27
 8004f1a:	197c      	adds	r4, r7, r5
 8004f1c:	1dbb      	adds	r3, r7, #6
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff fccd 	bl	80048c4 <UART_Start_Receive_DMA>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004f2e:	197b      	adds	r3, r7, r5
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d124      	bne.n	8004f80 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d11c      	bne.n	8004f78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2210      	movs	r2, #16
 8004f44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f46:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4a:	617b      	str	r3, [r7, #20]
  return(result);
 8004f4c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	2301      	movs	r3, #1
 8004f52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2110      	movs	r1, #16
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	e003      	b.n	8004f80 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f78:	2327      	movs	r3, #39	@ 0x27
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004f80:	2327      	movs	r3, #39	@ 0x27
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	e000      	b.n	8004f8a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b00a      	add	sp, #40	@ 0x28
 8004f90:	bdb0      	pop	{r4, r5, r7, pc}

08004f92 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 fc01 	bl	80057a8 <malloc>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <ATC_Free+0x26>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fbf4 	bl	80057bc <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
  }
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8a9b      	ldrh	r3, [r3, #20]
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f000 fc9a 	bl	8005934 <memset>
}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	1dbb      	adds	r3, r7, #6
 8005014:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005016:	2417      	movs	r4, #23
 8005018:	193b      	adds	r3, r7, r4
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1dba      	adds	r2, r7, #6
 8005022:	8812      	ldrh	r2, [r2, #0]
 8005024:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0019      	movs	r1, r3
 8005032:	f7fe fafb 	bl	800362c <HAL_UART_Transmit_DMA>
 8005036:	1e03      	subs	r3, r0, #0
 8005038:	d103      	bne.n	8005042 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 800503a:	193b      	adds	r3, r7, r4
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	e000      	b.n	8005044 <ATC_TxRaw+0x3c>
      break;
 8005042:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b007      	add	sp, #28
 8005050:	bd90      	pop	{r4, r7, pc}

08005052 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	0018      	movs	r0, r3
 8005060:	f7fe ffa8 	bl	8003fb4 <HAL_UART_GetState>
 8005064:	0003      	movs	r3, r0
 8005066:	2b21      	cmp	r3, #33	@ 0x21
 8005068:	d007      	beq.n	800507a <ATC_TxBusy+0x28>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0018      	movs	r0, r3
 8005070:	f7fe ffa0 	bl	8003fb4 <HAL_UART_GetState>
 8005074:	0003      	movs	r3, r0
 8005076:	2b23      	cmp	r3, #35	@ 0x23
 8005078:	d101      	bne.n	800507e <ATC_TxBusy+0x2c>
  {
    return true;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800507e:	2300      	movs	r3, #0
  }
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b002      	add	sp, #8
 8005086:	bd80      	pop	{r7, pc}

08005088 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8005092:	230f      	movs	r3, #15
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 800509a:	f7fc f8b7 	bl	800120c <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f000 fb73 	bl	800578e <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7fe ff81 	bl	8003fb4 <HAL_UART_GetState>
 80050b2:	0003      	movs	r3, r0
 80050b4:	2b22      	cmp	r3, #34	@ 0x22
 80050b6:	d007      	beq.n	80050c8 <ATC_TxWait+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fe ff79 	bl	8003fb4 <HAL_UART_GetState>
 80050c2:	0003      	movs	r3, r0
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d104      	bne.n	80050d2 <ATC_TxWait+0x4a>
    {
      answer = true;
 80050c8:	230f      	movs	r3, #15
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
      break;
 80050d0:	e01c      	b.n	800510c <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0018      	movs	r0, r3
 80050d8:	f7fe ff6c 	bl	8003fb4 <HAL_UART_GetState>
 80050dc:	0003      	movs	r3, r0
 80050de:	2be0      	cmp	r3, #224	@ 0xe0
 80050e0:	d014      	beq.n	800510c <ATC_TxWait+0x84>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7fe ff64 	bl	8003fb4 <HAL_UART_GetState>
 80050ec:	0003      	movs	r3, r0
 80050ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80050f0:	d00c      	beq.n	800510c <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80050f2:	f7fc f88b 	bl	800120c <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d8cf      	bhi.n	80050a2 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	0018      	movs	r0, r3
 8005108:	f7fe fb20 	bl	800374c <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800510c:	230f      	movs	r3, #15
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	781b      	ldrb	r3, [r3, #0]
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}

0800511a <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8b1b      	ldrh	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d027      	beq.n	800517a <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e01b      	b.n	8005168 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0019      	movs	r1, r3
 8005142:	f000 fc13 	bl	800596c <strstr>
 8005146:	0003      	movs	r3, r0
 8005148:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	0010      	movs	r0, r2
 8005160:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	429a      	cmp	r2, r3
 8005170:	d3de      	bcc.n	8005130 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff ff34 	bl	8004fe2 <ATC_RxFlush>
  }
}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}

08005182 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8b1b      	ldrh	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d031      	beq.n	8005200 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800519c:	230c      	movs	r3, #12
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	e025      	b.n	80051f2 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80051aa:	230c      	movs	r3, #12
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	320a      	adds	r2, #10
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	58d3      	ldr	r3, [r2, r3]
 80051b8:	0019      	movs	r1, r3
 80051ba:	f000 fbd7 	bl	800596c <strstr>
 80051be:	0003      	movs	r3, r0
 80051c0:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 80051d4:	230c      	movs	r3, #12
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	230f      	movs	r3, #15
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	3201      	adds	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
        break;
 80051e4:	e00c      	b.n	8005200 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80051e6:	210c      	movs	r1, #12
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	881a      	ldrh	r2, [r3, #0]
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	3201      	adds	r2, #1
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8adb      	ldrh	r3, [r3, #22]
 80051f6:	220c      	movs	r2, #12
 80051f8:	18ba      	adds	r2, r7, r2
 80051fa:	8812      	ldrh	r2, [r2, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d3d2      	bcc.n	80051a6 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8005200:	230f      	movs	r3, #15
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	781b      	ldrb	r3, [r3, #0]
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}

0800520e <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	0018      	movs	r0, r3
 800521c:	f7fe fedc 	bl	8003fd8 <HAL_UART_GetError>
 8005220:	1e03      	subs	r3, r0, #0
 8005222:	d01f      	beq.n	8005264 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4252      	negs	r2, r2
 800522e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	0018      	movs	r0, r3
 8005236:	f7fe faef 	bl	8003818 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69d9      	ldr	r1, [r3, #28]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8a9b      	ldrh	r3, [r3, #20]
 8005246:	001a      	movs	r2, r3
 8005248:	f7ff fe3b 	bl	8004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2104      	movs	r1, #4
 8005260:	438a      	bics	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0018      	movs	r0, r3
 800526a:	f7fe fea3 	bl	8003fb4 <HAL_UART_GetState>
 800526e:	0003      	movs	r3, r0
 8005270:	2b22      	cmp	r3, #34	@ 0x22
 8005272:	d027      	beq.n	80052c4 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	0018      	movs	r0, r3
 800527a:	f7fe fe9b 	bl	8003fb4 <HAL_UART_GetState>
 800527e:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8005280:	2b23      	cmp	r3, #35	@ 0x23
 8005282:	d01f      	beq.n	80052c4 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2201      	movs	r2, #1
 800528c:	4252      	negs	r2, r2
 800528e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0018      	movs	r0, r3
 8005296:	f7fe fabf 	bl	8003818 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69d9      	ldr	r1, [r3, #28]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8a9b      	ldrh	r3, [r3, #20]
 80052a6:	001a      	movs	r2, r3
 80052a8:	f7ff fe0b 	bl	8004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2104      	movs	r1, #4
 80052c0:	438a      	bics	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
  }
}
 80052c4:	46c0      	nop			@ (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b002      	add	sp, #8
 80052ca:	bd80      	pop	{r7, pc}

080052cc <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	1dbb      	adds	r3, r7, #6
 80052da:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 80052dc:	2317      	movs	r3, #23
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d100      	bne.n	80052ec <ATC_Init+0x20>
 80052ea:	e07f      	b.n	80053ec <ATC_Init+0x120>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d100      	bne.n	80052f4 <ATC_Init+0x28>
 80052f2:	e07b      	b.n	80053ec <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	223c      	movs	r2, #60	@ 0x3c
 80052f8:	2100      	movs	r1, #0
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 fb1a 	bl	8005934 <memset>
    if (pName != NULL)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3304      	adds	r3, #4
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	2207      	movs	r2, #7
 800530e:	0018      	movs	r0, r3
 8005310:	f000 fb18 	bl	8005944 <strncpy>
    }
    hAtc->hUart = hUart;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800531a:	1dbb      	adds	r3, r7, #6
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	0018      	movs	r0, r3
 8005320:	f7ff fe37 	bl	8004f92 <ATC_Malloc>
 8005324:	0002      	movs	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d055      	beq.n	80053de <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	69d8      	ldr	r0, [r3, #28]
 8005336:	1dbb      	adds	r3, r7, #6
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	001a      	movs	r2, r3
 800533c:	2100      	movs	r1, #0
 800533e:	f000 faf9 	bl	8005934 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	f7ff fe23 	bl	8004f92 <ATC_Malloc>
 800534c:	0002      	movs	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d043      	beq.n	80053e2 <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a18      	ldr	r0, [r3, #32]
 800535e:	1dbb      	adds	r3, r7, #6
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	001a      	movs	r2, r3
 8005364:	2100      	movs	r1, #0
 8005366:	f000 fae5 	bl	8005934 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800536a:	1dbb      	adds	r3, r7, #6
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff fe0f 	bl	8004f92 <ATC_Malloc>
 8005374:	0002      	movs	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d031      	beq.n	80053e6 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005386:	1dbb      	adds	r3, r7, #6
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	001a      	movs	r2, r3
 800538c:	2100      	movs	r1, #0
 800538e:	f000 fad1 	bl	8005934 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1dba      	adds	r2, r7, #6
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4252      	negs	r2, r2
 80053a4:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	69d9      	ldr	r1, [r3, #28]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8a9b      	ldrh	r3, [r3, #20]
 80053b2:	001a      	movs	r2, r3
 80053b4:	f7ff fd85 	bl	8004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d116      	bne.n	80053ea <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2104      	movs	r1, #4
 80053d0:	438a      	bics	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
    answer = true;
 80053d4:	2317      	movs	r3, #23
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e006      	b.n	80053ec <ATC_Init+0x120>
      break;
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	e004      	b.n	80053ec <ATC_Init+0x120>
      break;
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	e002      	b.n	80053ec <ATC_Init+0x120>
      break;
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	e000      	b.n	80053ec <ATC_Init+0x120>
      break;
 80053ea:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 80053ec:	2317      	movs	r3, #23
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4053      	eors	r3, r2
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	331c      	adds	r3, #28
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fdd3 	bl	8004fb4 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3324      	adds	r3, #36	@ 0x24
 800541a:	0018      	movs	r0, r3
 800541c:	f7ff fdca 	bl	8004fb4 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	223c      	movs	r2, #60	@ 0x3c
 8005424:	2100      	movs	r1, #0
 8005426:	0018      	movs	r0, r3
 8005428:	f000 fa84 	bl	8005934 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800542c:	2317      	movs	r3, #23
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	781b      	ldrb	r3, [r3, #0]
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b006      	add	sp, #24
 8005438:	bd80      	pop	{r7, pc}

0800543a <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8005444:	230f      	movs	r3, #15
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01f      	beq.n	8005496 <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 800545c:	e002      	b.n	8005464 <ATC_SetEvents+0x2a>
    {
      ev++;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3301      	adds	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <ATC_SetEvents+0x46>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	18d3      	adds	r3, r2, r3
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ee      	bne.n	800545e <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	611a      	str	r2, [r3, #16]
    answer = true;
 800548c:	230f      	movs	r3, #15
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e002      	b.n	800549c <ATC_SetEvents+0x62>
      break;
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	e000      	b.n	800549c <ATC_SetEvents+0x62>
      break;
 800549a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 800549c:	230f      	movs	r3, #15
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	781b      	ldrb	r3, [r3, #0]
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b004      	add	sp, #16
 80054a8:	bd80      	pop	{r7, pc}

080054aa <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff feaa 	bl	800520e <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff fe2c 	bl	800511a <ATC_CheckEvents>
}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}

080054ca <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 80054ca:	b5b0      	push	{r4, r5, r7, lr}
 80054cc:	b08c      	sub	sp, #48	@ 0x30
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 80054d8:	2300      	movs	r3, #0
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0018      	movs	r0, r3
 80054e0:	f7ff fdb7 	bl	8005052 <ATC_TxBusy>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d002      	beq.n	80054ee <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 80054e8:	2304      	movs	r3, #4
 80054ea:	425b      	negs	r3, r3
 80054ec:	e0e3      	b.n	80056b6 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 80054ee:	2344      	movs	r3, #68	@ 0x44
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d902      	bls.n	80054fe <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 80054f8:	2305      	movs	r3, #5
 80054fa:	425b      	negs	r3, r3
 80054fc:	e0db      	b.n	80056b6 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	0018      	movs	r0, r3
 8005502:	f7ff fe84 	bl	800520e <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8005506:	2348      	movs	r3, #72	@ 0x48
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800550c:	2300      	movs	r3, #0
 800550e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005510:	e051      	b.n	80055b6 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	617a      	str	r2, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	0018      	movs	r0, r3
 8005520:	f7fa fdf2 	bl	8000108 <strlen>
 8005524:	0003      	movs	r3, r0
 8005526:	3301      	adds	r3, #1
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fd32 	bl	8004f92 <ATC_Malloc>
 800552e:	0001      	movs	r1, r0
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005534:	320a      	adds	r2, #10
 8005536:	0092      	lsls	r2, r2, #2
 8005538:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553e:	320a      	adds	r2, #10
 8005540:	0092      	lsls	r2, r2, #2
 8005542:	58d3      	ldr	r3, [r2, r3]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11c      	bne.n	8005582 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8005548:	2327      	movs	r3, #39	@ 0x27
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e00e      	b.n	8005570 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8005552:	2427      	movs	r4, #39	@ 0x27
 8005554:	193b      	adds	r3, r7, r4
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	330a      	adds	r3, #10
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	0018      	movs	r0, r3
 8005562:	f7ff fd27 	bl	8004fb4 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8005566:	193b      	adds	r3, r7, r4
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	193b      	adds	r3, r7, r4
 800556c:	3201      	adds	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	2327      	movs	r3, #39	@ 0x27
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005578:	429a      	cmp	r2, r3
 800557a:	dcea      	bgt.n	8005552 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 800557c:	2303      	movs	r3, #3
 800557e:	425b      	negs	r3, r3
 8005580:	e099      	b.n	80056b6 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005586:	320a      	adds	r2, #10
 8005588:	0092      	lsls	r2, r2, #2
 800558a:	58d3      	ldr	r3, [r2, r3]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	0011      	movs	r1, r2
 8005590:	0018      	movs	r0, r3
 8005592:	f000 fa3f 	bl	8005a14 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800559a:	320a      	adds	r2, #10
 800559c:	0092      	lsls	r2, r2, #2
 800559e:	58d4      	ldr	r4, [r2, r3]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7fa fdb0 	bl	8000108 <strlen>
 80055a8:	0003      	movs	r3, r0
 80055aa:	18e3      	adds	r3, r4, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	3301      	adds	r3, #1
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b6:	2344      	movs	r3, #68	@ 0x44
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055be:	429a      	cmp	r2, r3
 80055c0:	dba7      	blt.n	8005512 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff fd0c 	bl	8004fe2 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7fa fd9b 	bl	8000108 <strlen>
 80055d2:	0003      	movs	r3, r0
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	0018      	movs	r0, r3
 80055dc:	f7ff fd14 	bl	8005008 <ATC_TxRaw>
 80055e0:	0003      	movs	r3, r0
 80055e2:	001a      	movs	r2, r3
 80055e4:	2301      	movs	r3, #1
 80055e6:	4053      	eors	r3, r2
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	425b      	negs	r3, r3
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80055f4:	e010      	b.n	8005618 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	0011      	movs	r1, r2
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7ff fd43 	bl	8005088 <ATC_TxWait>
 8005602:	0003      	movs	r3, r0
 8005604:	001a      	movs	r2, r3
 8005606:	2301      	movs	r3, #1
 8005608:	4053      	eors	r3, r2
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8005610:	2302      	movs	r3, #2
 8005612:	425b      	negs	r3, r3
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005616:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8005618:	2444      	movs	r4, #68	@ 0x44
 800561a:	193b      	adds	r3, r7, r4
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d029      	beq.n	8005676 <ATC_SendReceive+0x1ac>
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d126      	bne.n	8005676 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8005628:	f7fb fdf0 	bl	800120c <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8005630:	193b      	adds	r3, r7, r4
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800563a:	e014      	b.n	8005666 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 800563c:	2001      	movs	r0, #1
 800563e:	f000 f8a6 	bl	800578e <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8005642:	251f      	movs	r5, #31
 8005644:	197c      	adds	r4, r7, r5
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff fd98 	bl	8005182 <ATC_CheckResponse>
 8005652:	0003      	movs	r3, r0
 8005654:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8005656:	197b      	adds	r3, r7, r5
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 800565e:	197b      	adds	r3, r7, r5
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005664:	e007      	b.n	8005676 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8005666:	f7fb fdd1 	bl	800120c <HAL_GetTick>
 800566a:	0002      	movs	r2, r0
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005672:	429a      	cmp	r2, r3
 8005674:	d8e2      	bhi.n	800563c <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800567c:	2326      	movs	r3, #38	@ 0x26
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e00e      	b.n	80056a4 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8005686:	2426      	movs	r4, #38	@ 0x26
 8005688:	193b      	adds	r3, r7, r4
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	330a      	adds	r3, #10
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	18d3      	adds	r3, r2, r3
 8005694:	0018      	movs	r0, r3
 8005696:	f7ff fc8d 	bl	8004fb4 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800569a:	193b      	adds	r3, r7, r4
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	193b      	adds	r3, r7, r4
 80056a0:	3201      	adds	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	2326      	movs	r3, #38	@ 0x26
 80056a6:	18fa      	adds	r2, r7, r3
 80056a8:	2344      	movs	r3, #68	@ 0x44
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d3e8      	bcc.n	8005686 <ATC_SendReceive+0x1bc>
  }
  return answer;
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b00c      	add	sp, #48	@ 0x30
 80056bc:	bdb0      	pop	{r4, r5, r7, pc}

080056be <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	000a      	movs	r2, r1
 80056c8:	1cbb      	adds	r3, r7, #2
 80056ca:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80056cc:	1cbb      	adds	r3, r7, #2
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8a9b      	ldrh	r3, [r3, #20]
 80056d4:	0019      	movs	r1, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8b1b      	ldrh	r3, [r3, #24]
 80056da:	1acb      	subs	r3, r1, r3
 80056dc:	429a      	cmp	r2, r3
 80056de:	dd06      	ble.n	80056ee <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8a99      	ldrh	r1, [r3, #20]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8b1a      	ldrh	r2, [r3, #24]
 80056e8:	1cbb      	adds	r3, r7, #2
 80056ea:	1a8a      	subs	r2, r1, r2
 80056ec:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	8b12      	ldrh	r2, [r2, #24]
 80056f6:	1898      	adds	r0, r3, r2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	1cbb      	adds	r3, r7, #2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	001a      	movs	r2, r3
 8005702:	f000 f98f 	bl	8005a24 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	8b1a      	ldrh	r2, [r3, #24]
 800570a:	1cbb      	adds	r3, r7, #2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	18d3      	adds	r3, r2, r3
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69d9      	ldr	r1, [r3, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8a9b      	ldrh	r3, [r3, #20]
 8005722:	001a      	movs	r2, r3
 8005724:	f7ff fbcd 	bl	8004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d10c      	bne.n	8005746 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2104      	movs	r1, #4
 8005740:	438a      	bics	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8005744:	e01f      	b.n	8005786 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2201      	movs	r2, #1
 800574e:	4252      	negs	r2, r2
 8005750:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	f7fe f85e 	bl	8003818 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8a9b      	ldrh	r3, [r3, #20]
 8005768:	001a      	movs	r2, r3
 800576a:	f7ff fbaa 	bl	8004ec2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2104      	movs	r1, #4
 8005782:	438a      	bics	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}

0800578e <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0018      	movs	r0, r3
 800579a:	f7fb fd41 	bl	8001220 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <malloc>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <malloc+0x10>)
 80057ac:	0001      	movs	r1, r0
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f000 f830 	bl	8005814 <_malloc_r>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	20000010 	.word	0x20000010

080057bc <free>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4b03      	ldr	r3, [pc, #12]	@ (80057cc <free+0x10>)
 80057c0:	0001      	movs	r1, r0
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	f000 f938 	bl	8005a38 <_free_r>
 80057c8:	bd10      	pop	{r4, pc}
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	20000010 	.word	0x20000010

080057d0 <sbrk_aligned>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005810 <sbrk_aligned+0x40>)
 80057d4:	000d      	movs	r5, r1
 80057d6:	6831      	ldr	r1, [r6, #0]
 80057d8:	0004      	movs	r4, r0
 80057da:	2900      	cmp	r1, #0
 80057dc:	d102      	bne.n	80057e4 <sbrk_aligned+0x14>
 80057de:	f000 f8db 	bl	8005998 <_sbrk_r>
 80057e2:	6030      	str	r0, [r6, #0]
 80057e4:	0029      	movs	r1, r5
 80057e6:	0020      	movs	r0, r4
 80057e8:	f000 f8d6 	bl	8005998 <_sbrk_r>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d103      	bne.n	80057f8 <sbrk_aligned+0x28>
 80057f0:	2501      	movs	r5, #1
 80057f2:	426d      	negs	r5, r5
 80057f4:	0028      	movs	r0, r5
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	2303      	movs	r3, #3
 80057fa:	1cc5      	adds	r5, r0, #3
 80057fc:	439d      	bics	r5, r3
 80057fe:	42a8      	cmp	r0, r5
 8005800:	d0f8      	beq.n	80057f4 <sbrk_aligned+0x24>
 8005802:	1a29      	subs	r1, r5, r0
 8005804:	0020      	movs	r0, r4
 8005806:	f000 f8c7 	bl	8005998 <_sbrk_r>
 800580a:	3001      	adds	r0, #1
 800580c:	d1f2      	bne.n	80057f4 <sbrk_aligned+0x24>
 800580e:	e7ef      	b.n	80057f0 <sbrk_aligned+0x20>
 8005810:	200003a8 	.word	0x200003a8

08005814 <_malloc_r>:
 8005814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005816:	2203      	movs	r2, #3
 8005818:	1ccb      	adds	r3, r1, #3
 800581a:	4393      	bics	r3, r2
 800581c:	3308      	adds	r3, #8
 800581e:	0005      	movs	r5, r0
 8005820:	001f      	movs	r7, r3
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d234      	bcs.n	8005890 <_malloc_r+0x7c>
 8005826:	270c      	movs	r7, #12
 8005828:	42b9      	cmp	r1, r7
 800582a:	d833      	bhi.n	8005894 <_malloc_r+0x80>
 800582c:	0028      	movs	r0, r5
 800582e:	f000 f871 	bl	8005914 <__malloc_lock>
 8005832:	4e37      	ldr	r6, [pc, #220]	@ (8005910 <_malloc_r+0xfc>)
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	001c      	movs	r4, r3
 8005838:	2c00      	cmp	r4, #0
 800583a:	d12f      	bne.n	800589c <_malloc_r+0x88>
 800583c:	0039      	movs	r1, r7
 800583e:	0028      	movs	r0, r5
 8005840:	f7ff ffc6 	bl	80057d0 <sbrk_aligned>
 8005844:	0004      	movs	r4, r0
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	d15f      	bne.n	800590a <_malloc_r+0xf6>
 800584a:	6834      	ldr	r4, [r6, #0]
 800584c:	9400      	str	r4, [sp, #0]
 800584e:	9b00      	ldr	r3, [sp, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d14a      	bne.n	80058ea <_malloc_r+0xd6>
 8005854:	2c00      	cmp	r4, #0
 8005856:	d052      	beq.n	80058fe <_malloc_r+0xea>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	0028      	movs	r0, r5
 800585c:	18e3      	adds	r3, r4, r3
 800585e:	9900      	ldr	r1, [sp, #0]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	f000 f899 	bl	8005998 <_sbrk_r>
 8005866:	9b01      	ldr	r3, [sp, #4]
 8005868:	4283      	cmp	r3, r0
 800586a:	d148      	bne.n	80058fe <_malloc_r+0xea>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	0028      	movs	r0, r5
 8005870:	1aff      	subs	r7, r7, r3
 8005872:	0039      	movs	r1, r7
 8005874:	f7ff ffac 	bl	80057d0 <sbrk_aligned>
 8005878:	3001      	adds	r0, #1
 800587a:	d040      	beq.n	80058fe <_malloc_r+0xea>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	19db      	adds	r3, r3, r7
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	2a00      	cmp	r2, #0
 8005888:	d133      	bne.n	80058f2 <_malloc_r+0xde>
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	e019      	b.n	80058c4 <_malloc_r+0xb0>
 8005890:	2b00      	cmp	r3, #0
 8005892:	dac9      	bge.n	8005828 <_malloc_r+0x14>
 8005894:	230c      	movs	r3, #12
 8005896:	602b      	str	r3, [r5, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800589c:	6821      	ldr	r1, [r4, #0]
 800589e:	1bc9      	subs	r1, r1, r7
 80058a0:	d420      	bmi.n	80058e4 <_malloc_r+0xd0>
 80058a2:	290b      	cmp	r1, #11
 80058a4:	d90a      	bls.n	80058bc <_malloc_r+0xa8>
 80058a6:	19e2      	adds	r2, r4, r7
 80058a8:	6027      	str	r7, [r4, #0]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	d104      	bne.n	80058b8 <_malloc_r+0xa4>
 80058ae:	6032      	str	r2, [r6, #0]
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	6011      	str	r1, [r2, #0]
 80058b4:	6053      	str	r3, [r2, #4]
 80058b6:	e005      	b.n	80058c4 <_malloc_r+0xb0>
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e7f9      	b.n	80058b0 <_malloc_r+0x9c>
 80058bc:	6862      	ldr	r2, [r4, #4]
 80058be:	42a3      	cmp	r3, r4
 80058c0:	d10e      	bne.n	80058e0 <_malloc_r+0xcc>
 80058c2:	6032      	str	r2, [r6, #0]
 80058c4:	0028      	movs	r0, r5
 80058c6:	f000 f82d 	bl	8005924 <__malloc_unlock>
 80058ca:	0020      	movs	r0, r4
 80058cc:	2207      	movs	r2, #7
 80058ce:	300b      	adds	r0, #11
 80058d0:	1d23      	adds	r3, r4, #4
 80058d2:	4390      	bics	r0, r2
 80058d4:	1ac2      	subs	r2, r0, r3
 80058d6:	4298      	cmp	r0, r3
 80058d8:	d0df      	beq.n	800589a <_malloc_r+0x86>
 80058da:	1a1b      	subs	r3, r3, r0
 80058dc:	50a3      	str	r3, [r4, r2]
 80058de:	e7dc      	b.n	800589a <_malloc_r+0x86>
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e7ef      	b.n	80058c4 <_malloc_r+0xb0>
 80058e4:	0023      	movs	r3, r4
 80058e6:	6864      	ldr	r4, [r4, #4]
 80058e8:	e7a6      	b.n	8005838 <_malloc_r+0x24>
 80058ea:	9c00      	ldr	r4, [sp, #0]
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	e7ad      	b.n	800584e <_malloc_r+0x3a>
 80058f2:	001a      	movs	r2, r3
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d1fb      	bne.n	80058f2 <_malloc_r+0xde>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e7da      	b.n	80058b4 <_malloc_r+0xa0>
 80058fe:	230c      	movs	r3, #12
 8005900:	0028      	movs	r0, r5
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	f000 f80e 	bl	8005924 <__malloc_unlock>
 8005908:	e7c6      	b.n	8005898 <_malloc_r+0x84>
 800590a:	6007      	str	r7, [r0, #0]
 800590c:	e7da      	b.n	80058c4 <_malloc_r+0xb0>
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	200003ac 	.word	0x200003ac

08005914 <__malloc_lock>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4802      	ldr	r0, [pc, #8]	@ (8005920 <__malloc_lock+0xc>)
 8005918:	f000 f87a 	bl	8005a10 <__retarget_lock_acquire_recursive>
 800591c:	bd10      	pop	{r4, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	200004ec 	.word	0x200004ec

08005924 <__malloc_unlock>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4802      	ldr	r0, [pc, #8]	@ (8005930 <__malloc_unlock+0xc>)
 8005928:	f000 f873 	bl	8005a12 <__retarget_lock_release_recursive>
 800592c:	bd10      	pop	{r4, pc}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	200004ec 	.word	0x200004ec

08005934 <memset>:
 8005934:	0003      	movs	r3, r0
 8005936:	1882      	adds	r2, r0, r2
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	7019      	strb	r1, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <strncpy>:
 8005944:	0003      	movs	r3, r0
 8005946:	b530      	push	{r4, r5, lr}
 8005948:	001d      	movs	r5, r3
 800594a:	2a00      	cmp	r2, #0
 800594c:	d006      	beq.n	800595c <strncpy+0x18>
 800594e:	780c      	ldrb	r4, [r1, #0]
 8005950:	3a01      	subs	r2, #1
 8005952:	3301      	adds	r3, #1
 8005954:	702c      	strb	r4, [r5, #0]
 8005956:	3101      	adds	r1, #1
 8005958:	2c00      	cmp	r4, #0
 800595a:	d1f5      	bne.n	8005948 <strncpy+0x4>
 800595c:	2100      	movs	r1, #0
 800595e:	189a      	adds	r2, r3, r2
 8005960:	4293      	cmp	r3, r2
 8005962:	d100      	bne.n	8005966 <strncpy+0x22>
 8005964:	bd30      	pop	{r4, r5, pc}
 8005966:	7019      	strb	r1, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	e7f9      	b.n	8005960 <strncpy+0x1c>

0800596c <strstr>:
 800596c:	780a      	ldrb	r2, [r1, #0]
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	2a00      	cmp	r2, #0
 8005972:	d10c      	bne.n	800598e <strstr+0x22>
 8005974:	bd30      	pop	{r4, r5, pc}
 8005976:	429a      	cmp	r2, r3
 8005978:	d108      	bne.n	800598c <strstr+0x20>
 800597a:	2301      	movs	r3, #1
 800597c:	5ccc      	ldrb	r4, [r1, r3]
 800597e:	2c00      	cmp	r4, #0
 8005980:	d0f8      	beq.n	8005974 <strstr+0x8>
 8005982:	5cc5      	ldrb	r5, [r0, r3]
 8005984:	42a5      	cmp	r5, r4
 8005986:	d101      	bne.n	800598c <strstr+0x20>
 8005988:	3301      	adds	r3, #1
 800598a:	e7f7      	b.n	800597c <strstr+0x10>
 800598c:	3001      	adds	r0, #1
 800598e:	7803      	ldrb	r3, [r0, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <strstr+0xa>
 8005994:	0018      	movs	r0, r3
 8005996:	e7ed      	b.n	8005974 <strstr+0x8>

08005998 <_sbrk_r>:
 8005998:	2300      	movs	r3, #0
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	4d06      	ldr	r5, [pc, #24]	@ (80059b8 <_sbrk_r+0x20>)
 800599e:	0004      	movs	r4, r0
 80059a0:	0008      	movs	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb f9d4 	bl	8000d50 <_sbrk>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d103      	bne.n	80059b4 <_sbrk_r+0x1c>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d000      	beq.n	80059b4 <_sbrk_r+0x1c>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	200004e8 	.word	0x200004e8

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	@ (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	20000010 	.word	0x20000010

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	2600      	movs	r6, #0
 80059cc:	4c0c      	ldr	r4, [pc, #48]	@ (8005a00 <__libc_init_array+0x38>)
 80059ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005a04 <__libc_init_array+0x3c>)
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	2600      	movs	r6, #0
 80059da:	f000 f877 	bl	8005acc <_init>
 80059de:	4c0a      	ldr	r4, [pc, #40]	@ (8005a08 <__libc_init_array+0x40>)
 80059e0:	4d0a      	ldr	r5, [pc, #40]	@ (8005a0c <__libc_init_array+0x44>)
 80059e2:	1b64      	subs	r4, r4, r5
 80059e4:	10a4      	asrs	r4, r4, #2
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	00b3      	lsls	r3, r6, #2
 80059ee:	58eb      	ldr	r3, [r5, r3]
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	00b3      	lsls	r3, r6, #2
 80059f8:	58eb      	ldr	r3, [r5, r3]
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08005c00 	.word	0x08005c00
 8005a04:	08005c00 	.word	0x08005c00
 8005a08:	08005c04 	.word	0x08005c04
 8005a0c:	08005c00 	.word	0x08005c00

08005a10 <__retarget_lock_acquire_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <__retarget_lock_release_recursive>:
 8005a12:	4770      	bx	lr

08005a14 <strcpy>:
 8005a14:	0003      	movs	r3, r0
 8005a16:	780a      	ldrb	r2, [r1, #0]
 8005a18:	3101      	adds	r1, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d1f9      	bne.n	8005a16 <strcpy+0x2>
 8005a22:	4770      	bx	lr

08005a24 <memcpy>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d100      	bne.n	8005a2e <memcpy+0xa>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	5ccc      	ldrb	r4, [r1, r3]
 8005a30:	54c4      	strb	r4, [r0, r3]
 8005a32:	3301      	adds	r3, #1
 8005a34:	e7f8      	b.n	8005a28 <memcpy+0x4>
	...

08005a38 <_free_r>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	0005      	movs	r5, r0
 8005a3c:	1e0c      	subs	r4, r1, #0
 8005a3e:	d010      	beq.n	8005a62 <_free_r+0x2a>
 8005a40:	3c04      	subs	r4, #4
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da00      	bge.n	8005a4a <_free_r+0x12>
 8005a48:	18e4      	adds	r4, r4, r3
 8005a4a:	0028      	movs	r0, r5
 8005a4c:	f7ff ff62 	bl	8005914 <__malloc_lock>
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <_free_r+0x90>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <_free_r+0x2c>
 8005a58:	6063      	str	r3, [r4, #4]
 8005a5a:	6014      	str	r4, [r2, #0]
 8005a5c:	0028      	movs	r0, r5
 8005a5e:	f7ff ff61 	bl	8005924 <__malloc_unlock>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d908      	bls.n	8005a7a <_free_r+0x42>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	d1f3      	bne.n	8005a58 <_free_r+0x20>
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	1809      	adds	r1, r1, r0
 8005a76:	6021      	str	r1, [r4, #0]
 8005a78:	e7ee      	b.n	8005a58 <_free_r+0x20>
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <_free_r+0x4e>
 8005a82:	42a3      	cmp	r3, r4
 8005a84:	d9f9      	bls.n	8005a7a <_free_r+0x42>
 8005a86:	6811      	ldr	r1, [r2, #0]
 8005a88:	1850      	adds	r0, r2, r1
 8005a8a:	42a0      	cmp	r0, r4
 8005a8c:	d10b      	bne.n	8005aa6 <_free_r+0x6e>
 8005a8e:	6820      	ldr	r0, [r4, #0]
 8005a90:	1809      	adds	r1, r1, r0
 8005a92:	1850      	adds	r0, r2, r1
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	4283      	cmp	r3, r0
 8005a98:	d1e0      	bne.n	8005a5c <_free_r+0x24>
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	1841      	adds	r1, r0, r1
 8005aa0:	6011      	str	r1, [r2, #0]
 8005aa2:	6053      	str	r3, [r2, #4]
 8005aa4:	e7da      	b.n	8005a5c <_free_r+0x24>
 8005aa6:	42a0      	cmp	r0, r4
 8005aa8:	d902      	bls.n	8005ab0 <_free_r+0x78>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	e7d5      	b.n	8005a5c <_free_r+0x24>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	1821      	adds	r1, r4, r0
 8005ab4:	428b      	cmp	r3, r1
 8005ab6:	d103      	bne.n	8005ac0 <_free_r+0x88>
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	1809      	adds	r1, r1, r0
 8005abe:	6021      	str	r1, [r4, #0]
 8005ac0:	6063      	str	r3, [r4, #4]
 8005ac2:	6054      	str	r4, [r2, #4]
 8005ac4:	e7ca      	b.n	8005a5c <_free_r+0x24>
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	200003ac 	.word	0x200003ac

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
