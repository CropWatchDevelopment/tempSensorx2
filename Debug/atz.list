
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08006998  08006998  00007998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f58  08006f58  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f60  08006f60  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f64  08006f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006f68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  08006fd0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20000388  08006fd0  00008388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe09  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd9  00000000  00000000  00017e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  0001b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bda  00000000  00000000  0001c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012633  00000000  00000000  00032e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f13  00000000  00000000  00045436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  000c738c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006980 	.word	0x08006980

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006980 	.word	0x08006980

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 f9f6 	bl	8001884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fa08 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08b      	sub	sp, #44	@ 0x2c
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	2414      	movs	r4, #20
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f005 fb81 	bl	8005bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b37      	ldr	r3, [pc, #220]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b36      	ldr	r3, [pc, #216]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b34      	ldr	r3, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b30      	ldr	r3, [pc, #192]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b2e      	ldr	r3, [pc, #184]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000510:	2102      	movs	r1, #2
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2202      	movs	r2, #2
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fda7 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0192      	lsls	r2, r2, #6
 8000534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2284      	movs	r2, #132	@ 0x84
 800053a:	0392      	lsls	r2, r2, #14
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000544:	193b      	adds	r3, r7, r4
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <MX_GPIO_Init+0xfc>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f001 fc18 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2220      	movs	r2, #32
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	193a      	adds	r2, r7, r4
 8000564:	23a0      	movs	r3, #160	@ 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fc08 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000570:	0021      	movs	r1, r4
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2220      	movs	r2, #32
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fbf5 	bl	8001d80 <HAL_GPIO_Init>

}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00b      	add	sp, #44	@ 0x2c
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000
 80005a4:	50000400 	.word	0x50000400
 80005a8:	50000800 	.word	0x50000800

080005ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000628 <MX_I2C1_Init+0x7c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b8:	22c1      	movs	r2, #193	@ 0xc1
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fd64 	bl	80020b8 <HAL_I2C_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f9c6 	bl	8000984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fe01 	bl	8002204 <HAL_I2CEx_ConfigAnalogFilter>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000606:	f000 f9bd 	bl	8000984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_I2C1_Init+0x78>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fe44 	bl	800229c <HAL_I2CEx_ConfigDigitalFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 f9b4 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	20000084 	.word	0x20000084
 8000628:	40005400 	.word	0x40005400

0800062c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	@ 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	240c      	movs	r4, #12
 8000636:	193b      	adds	r3, r7, r4
 8000638:	0018      	movs	r0, r3
 800063a:	2314      	movs	r3, #20
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f005 fac0 	bl	8005bc4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <HAL_I2C_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d128      	bne.n	80006a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000654:	2102      	movs	r1, #2
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	2202      	movs	r2, #2
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	22c0      	movs	r2, #192	@ 0xc0
 800066c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2212      	movs	r2, #18
 8000672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2203      	movs	r2, #3
 800067e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	187b      	adds	r3, r7, r1
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_I2C_MspInit+0x84>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f001 fb77 	bl	8001d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0389      	lsls	r1, r1, #14
 800069c:	430a      	orrs	r2, r1
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b009      	add	sp, #36	@ 0x24
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	50000400 	.word	0x50000400

080006b4 <cbWAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = LORAWAN_NOT_JOINED;

void cbWAKE(const char* str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	loraWAKE = 1;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <cbWAKE+0x18>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000114 	.word	0x20000114

080006d0 <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <cb_NOT_JOINED+0x18>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	20000118 	.word	0x20000118

080006ec <cb_JOIN_SUCCESS>:
void cb_JOIN_SUCCESS(const char* str)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <cb_JOIN_SUCCESS+0x18>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	20000118 	.word	0x20000118

08000708 <cb_DATA_SENT>:
//void cbError(const char* str)
//{
//	lorawan_state = LORAWAN_MODULE_ERROR;
//}
void cb_DATA_SENT(const char* str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_DATA_RECEIVED;
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <cb_DATA_SENT+0x18>)
 8000712:	2203      	movs	r2, #3
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000118 	.word	0x20000118

08000724 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_DATA_RESPONSE;
 800072c:	4b03      	ldr	r3, [pc, #12]	@ (800073c <cb_DATA_RESPONSE+0x18>)
 800072e:	2204      	movs	r2, #4
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	20000118 	.word	0x20000118

08000740 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	000a      	movs	r2, r1
 800074a:	1cbb      	adds	r3, r7, #2
 800074c:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_UARTEx_RxEventCallback+0x30>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_UARTEx_RxEventCallback+0x34>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f004 fe02 	bl	800536a <ATC_IdleLineCallback>
	}
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	40004800 	.word	0x40004800
 8000774:	200000d8 	.word	0x200000d8

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	@ 0x30
 800077c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 ff41 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f891 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f7ff fe91 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 800078a:	f7ff fe71 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800078e:	f7ff ff0d 	bl	80005ac <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000792:	f000 f9f1 	bl	8000b78 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000796:	4b36      	ldr	r3, [pc, #216]	@ (8000870 <main+0xf8>)
 8000798:	2280      	movs	r2, #128	@ 0x80
 800079a:	0092      	lsls	r2, r2, #2
 800079c:	4935      	ldr	r1, [pc, #212]	@ (8000874 <main+0xfc>)
 800079e:	4836      	ldr	r0, [pc, #216]	@ (8000878 <main+0x100>)
 80007a0:	f004 fbea 	bl	8004f78 <ATC_Init>
  ATC_SetEvents(&lora, events);
 80007a4:	4a35      	ldr	r2, [pc, #212]	@ (800087c <main+0x104>)
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <main+0x100>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f004 fc9b 	bl	80050e6 <ATC_SetEvents>
//  scan_i2c_bus(); // Check what devices exist
//  sensirion_i2c_hal_init();
  // Use the global lora variable, not a local one
  const char *dev_eui = "0025CA00000055EE"; // Replace with your DevEUI
 80007b0:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <main+0x108>)
 80007b2:	61fb      	str	r3, [r7, #28]
  const char *app_eui = "0025CA00000055EE"; // Replace with your AppEUI
 80007b4:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <main+0x108>)
 80007b6:	61bb      	str	r3, [r7, #24]
  const char *app_key = "0025CA00000000000000000000000000"; // Replace with your AppKey
 80007b8:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <main+0x10c>)
 80007ba:	617b      	str	r3, [r7, #20]

  if (lorawan_configure(&lora, dev_eui, app_eui, app_key)) {
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	69ba      	ldr	r2, [r7, #24]
 80007c0:	69f9      	ldr	r1, [r7, #28]
 80007c2:	482d      	ldr	r0, [pc, #180]	@ (8000878 <main+0x100>)
 80007c4:	f000 faac 	bl	8000d20 <lorawan_configure>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d004      	beq.n	80007d6 <main+0x5e>
      printf("LoRaWAN configuration successful\n");
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <main+0x110>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f005 f8cc 	bl	800596c <puts>
 80007d4:	e003      	b.n	80007de <main+0x66>
  } else {
      printf("LoRaWAN configuration failed\n");
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <main+0x114>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f005 f8c7 	bl	800596c <puts>
  }

  char *verLine = NULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  int ret = ATC_SendReceive(&lora,
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	492a      	ldr	r1, [pc, #168]	@ (8000890 <main+0x118>)
 80007e6:	4824      	ldr	r0, [pc, #144]	@ (8000878 <main+0x100>)
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <main+0x11c>)
 80007ea:	9303      	str	r3, [sp, #12]
 80007ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <main+0x120>)
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2302      	movs	r3, #2
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	23c8      	movs	r3, #200	@ 0xc8
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	0013      	movs	r3, r2
 80007fa:	2264      	movs	r2, #100	@ 0x64
 80007fc:	f004 fcbb 	bl	8005176 <ATC_SendReceive>
 8000800:	0003      	movs	r3, r0
 8000802:	613b      	str	r3, [r7, #16]
      /*Items=*/2,       // we’re passing two patterns
      "\n",              // pattern[0]: the newline before "127..."
      "OK"               // pattern[1]: the final OK
  );

  if (ret == 1 && verLine) {
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d118      	bne.n	800083c <main+0xc4>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d015      	beq.n	800083c <main+0xc4>
      // ret==1 means we matched pattern[0], i.e. the newline
      // skip that newline:
      char *v = verLine + 1;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
      // strip trailing CR if present
      char *cr = strchr(v, '\r');
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	210d      	movs	r1, #13
 800081a:	0018      	movs	r0, r3
 800081c:	f005 f9da 	bl	8005bd4 <strchr>
 8000820:	0003      	movs	r3, r0
 8000822:	60bb      	str	r3, [r7, #8]
      if (cr) *cr = '\0';
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <main+0xb8>
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
      printf("Firmware version: %s\n", v);
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <main+0x124>)
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f005 f832 	bl	80058a0 <iprintf>
      // we matched "OK" first (unlikely), you could still parse lora.pReadBuff
  }
  else {
      // handle timeout / error
  }
  __NOP();
 800083c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE END 2 */
  char *connection_result = NULL;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
  ATC_SendReceive(&lora,
 8000842:	003a      	movs	r2, r7
 8000844:	4916      	ldr	r1, [pc, #88]	@ (80008a0 <main+0x128>)
 8000846:	480c      	ldr	r0, [pc, #48]	@ (8000878 <main+0x100>)
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <main+0x11c>)
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	23fa      	movs	r3, #250	@ 0xfa
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	0013      	movs	r3, r2
 8000858:	2264      	movs	r2, #100	@ 0x64
 800085a:	f004 fc8c 	bl	8005176 <ATC_SendReceive>
  						  100,
  						  &connection_result,
  						  500,
  						  1,
  						  "OK");
  		  lorawan_state = LORAWAN_JOINING;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <main+0x12c>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <main+0x100>)
 8000866:	0018      	movs	r0, r3
 8000868:	f004 fc75 	bl	8005156 <ATC_Loop>
 800086c:	e7fa      	b.n	8000864 <main+0xec>
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	080069cc 	.word	0x080069cc
 8000874:	20000120 	.word	0x20000120
 8000878:	200000d8 	.word	0x200000d8
 800087c:	08006d90 	.word	0x08006d90
 8000880:	080069d4 	.word	0x080069d4
 8000884:	080069e8 	.word	0x080069e8
 8000888:	08006a0c 	.word	0x08006a0c
 800088c:	08006a30 	.word	0x08006a30
 8000890:	08006a50 	.word	0x08006a50
 8000894:	08006a58 	.word	0x08006a58
 8000898:	08006a5c 	.word	0x08006a5c
 800089c:	08006a60 	.word	0x08006a60
 80008a0:	08006a78 	.word	0x08006a78
 80008a4:	20000118 	.word	0x20000118

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b09f      	sub	sp, #124	@ 0x7c
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	2440      	movs	r4, #64	@ 0x40
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2338      	movs	r3, #56	@ 0x38
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f005 f983 	bl	8005bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008be:	232c      	movs	r3, #44	@ 0x2c
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f005 f97b 	bl	8005bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2328      	movs	r3, #40	@ 0x28
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f005 f974 	bl	8005bc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	4b27      	ldr	r3, [pc, #156]	@ (800097c <SystemClock_Config+0xd4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a27      	ldr	r2, [pc, #156]	@ (8000980 <SystemClock_Config+0xd8>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <SystemClock_Config+0xd4>)
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	0109      	lsls	r1, r1, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2210      	movs	r2, #16
 80008f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2201      	movs	r2, #1
 80008fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	22a0      	movs	r2, #160	@ 0xa0
 8000906:	0212      	lsls	r2, r2, #8
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	187b      	adds	r3, r7, r1
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fd0e 	bl	8002334 <HAL_RCC_OscConfig>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800091c:	f000 f832 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	212c      	movs	r1, #44	@ 0x2c
 8000922:	187b      	adds	r3, r7, r1
 8000924:	220f      	movs	r2, #15
 8000926:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2100      	movs	r1, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f002 f8c9 	bl	8002adc <HAL_RCC_ClockConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800094e:	f000 f819 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	220c      	movs	r2, #12
 8000956:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fabc 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000970:	f000 f808 	bl	8000984 <Error_Handler>
  }
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b01f      	add	sp, #124	@ 0x7c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40007000 	.word	0x40007000
 8000980:	ffffe7ff 	.word	0xffffe7ff

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <HAL_MspInit+0x24>)
 8000996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x24>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <HAL_MspInit+0x24>)
 80009a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_MspInit+0x24>)
 80009a6:	2180      	movs	r1, #128	@ 0x80
 80009a8:	0549      	lsls	r1, r1, #21
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 80009c4:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <HardFault_Handler+0x10>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f004 ffd0 	bl	800596c <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0xc>
 80009d0:	08006a84 	.word	0x08006a84

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 fe5e 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 f8d7 	bl	8001bb2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 f8d3 	bl	8001bb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	200001f0 	.word	0x200001f0
 8000a18:	200001a8 	.word	0x200001a8

08000a1c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <RNG_LPUART1_IRQHandler+0x14>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fdf4 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	20000120 	.word	0x20000120

08000a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a46:	e000      	b.n	8000a4a <_read+0x16>
 8000a48:	bf00      	nop
 8000a4a:	0001      	movs	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
  }

  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b006      	add	sp, #24
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	e000      	b.n	8000a8e <_write+0x20>
 8000a8c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
  }
  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	425b      	negs	r3, r3
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	0192      	lsls	r2, r2, #6
 8000aca:	605a      	str	r2, [r3, #4]
  return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f005 f8e8 	bl	8005d04 <__errno>
 8000b34:	0003      	movs	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	18d2      	adds	r2, r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <_sbrk+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b006      	add	sp, #24
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20005000 	.word	0x20005000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	2000011c 	.word	0x2000011c
 8000b68:	20000388 	.word	0x20000388

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <MX_LPUART1_UART_Init+0x58>)
 8000b80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b84:	22e1      	movs	r2, #225	@ 0xe1
 8000b86:	0252      	lsls	r2, r2, #9
 8000b88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <MX_LPUART1_UART_Init+0x54>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fb32 	bl	8003220 <HAL_UART_Init>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000bc0:	f7ff fee0 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	240c      	movs	r4, #12
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f004 ffec 	bl	8005bc4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a45      	ldr	r2, [pc, #276]	@ (8000d08 <HAL_UART_MspInit+0x134>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d000      	beq.n	8000bf8 <HAL_UART_MspInit+0x24>
 8000bf6:	e083      	b.n	8000d00 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf8:	4b44      	ldr	r3, [pc, #272]	@ (8000d0c <HAL_UART_MspInit+0x138>)
 8000bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bfc:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <HAL_UART_MspInit+0x138>)
 8000bfe:	2180      	movs	r1, #128	@ 0x80
 8000c00:	02c9      	lsls	r1, r1, #11
 8000c02:	430a      	orrs	r2, r1
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <HAL_UART_MspInit+0x138>)
 8000c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c0a:	4b40      	ldr	r3, [pc, #256]	@ (8000d0c <HAL_UART_MspInit+0x138>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c12:	4b3e      	ldr	r3, [pc, #248]	@ (8000d0c <HAL_UART_MspInit+0x138>)
 8000c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1e:	0021      	movs	r1, r4
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2203      	movs	r2, #3
 8000c36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	187a      	adds	r2, r7, r1
 8000c40:	23a0      	movs	r3, #160	@ 0xa0
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 f89a 	bl	8001d80 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c4e:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <HAL_UART_MspInit+0x140>)
 8000c50:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c54:	2205      	movs	r2, #5
 8000c56:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c66:	2280      	movs	r2, #128	@ 0x80
 8000c68:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c70:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fe2f 	bl	80018e8 <HAL_DMA_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000c8e:	f7ff fe79 	bl	8000984 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c96:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_UART_MspInit+0x13c>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_UART_MspInit+0x148>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fe06 	bl	80018e8 <HAL_DMA_Init>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000ce0:	f7ff fe50 	bl	8000984 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000ce8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_UART_MspInit+0x144>)
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201d      	movs	r0, #29
 8000cf6:	f000 fdc5 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000cfa:	201d      	movs	r0, #29
 8000cfc:	f000 fdd7 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b009      	add	sp, #36	@ 0x24
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	200001a8 	.word	0x200001a8
 8000d14:	40020030 	.word	0x40020030
 8000d18:	200001f0 	.word	0x200001f0
 8000d1c:	4002001c 	.word	0x4002001c

08000d20 <lorawan_configure>:
 * @param dev_eui Device EUI (16 hex characters).
 * @param app_eui Application EUI (16 hex characters).
 * @param app_key Application key (32 hex characters).
 * @return true if configuration and join are successful, false otherwise.
 */
bool lorawan_configure(ATC_HandleTypeDef *lora, const char *dev_eui, const char *app_eui, const char *app_key) {
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
    LoRaWAN_Error_t err;

    factor_reset(lora);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fbe7 	bl	8001504 <factor_reset>

    printf("DEBUG: lorawan_configure called with lora handle: %p\n", (void*)lora);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4b74      	ldr	r3, [pc, #464]	@ (8000f0c <lorawan_configure+0x1ec>)
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f004 fdaf 	bl	80058a0 <iprintf>
    if (lora == NULL) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <lorawan_configure+0x34>
        printf("ERROR: lora handle is NULL!\n");
 8000d48:	4b71      	ldr	r3, [pc, #452]	@ (8000f10 <lorawan_configure+0x1f0>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f004 fe0e 	bl	800596c <puts>
        return false;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e0d7      	b.n	8000f04 <lorawan_configure+0x1e4>
    }
    if (lora->hUart == NULL) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d105      	bne.n	8000d68 <lorawan_configure+0x48>
        printf("ERROR: lora->hUart is NULL!\n");
 8000d5c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f14 <lorawan_configure+0x1f4>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f004 fe04 	bl	800596c <puts>
        return false;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e0cd      	b.n	8000f04 <lorawan_configure+0x1e4>
    }
    printf("DEBUG: lora->hUart = %p, Name = %s\n", (void*)lora->hUart, lora->Name);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1d1a      	adds	r2, r3, #4
 8000d70:	4b69      	ldr	r3, [pc, #420]	@ (8000f18 <lorawan_configure+0x1f8>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f004 fd94 	bl	80058a0 <iprintf>

    // Validate input parameters
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 f8db 	bl	8000f38 <validate_hex_string>
 8000d82:	0003      	movs	r3, r0
 8000d84:	001a      	movs	r2, r3
 8000d86:	2301      	movs	r3, #1
 8000d88:	4053      	eors	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d117      	bne.n	8000dc0 <lorawan_configure+0xa0>
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2110      	movs	r1, #16
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f8cf 	bl	8000f38 <validate_hex_string>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4053      	eors	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10b      	bne.n	8000dc0 <lorawan_configure+0xa0>
        !validate_hex_string(app_key, APP_KEY_LENGTH)) {
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2120      	movs	r1, #32
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 f8c3 	bl	8000f38 <validate_hex_string>
 8000db2:	0003      	movs	r3, r0
 8000db4:	001a      	movs	r2, r3
 8000db6:	2301      	movs	r3, #1
 8000db8:	4053      	eors	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <lorawan_configure+0xac>
        printf("Invalid EUI or AppKey format\n");
 8000dc0:	4b56      	ldr	r3, [pc, #344]	@ (8000f1c <lorawan_configure+0x1fc>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f004 fdd2 	bl	800596c <puts>
        return false;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e09b      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Configure DevEUI, AppEUI, and AppKey
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000dcc:	2517      	movs	r5, #23
 8000dce:	197c      	adds	r4, r7, r5
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f8f6 	bl	8000fc8 <set_dev_eui>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	7023      	strb	r3, [r4, #0]
 8000de0:	197b      	adds	r3, r7, r5
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d119      	bne.n	8000e1c <lorawan_configure+0xfc>
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000de8:	197c      	adds	r4, r7, r5
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 f953 	bl	800109c <set_app_eui>
 8000df6:	0003      	movs	r3, r0
 8000df8:	7023      	strb	r3, [r4, #0]
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <lorawan_configure+0xfc>
        (err = set_app_key(lora, app_key)) != LORAWAN_OK) {
 8000e02:	197c      	adds	r4, r7, r5
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 f96e 	bl	80010ec <set_app_key>
 8000e10:	0003      	movs	r3, r0
 8000e12:	7023      	strb	r3, [r4, #0]
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000e14:	197b      	adds	r3, r7, r5
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d009      	beq.n	8000e30 <lorawan_configure+0x110>
        printf("Error setting EUIs or AppKey: %d\n", err);
 8000e1c:	2317      	movs	r3, #23
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <lorawan_configure+0x200>)
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f004 fd3a 	bl	80058a0 <iprintf>
        return false;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e069      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Configure region and sub-band
    if ((err = configure_region_and_channel(lora)) != LORAWAN_OK) {
 8000e30:	2517      	movs	r5, #23
 8000e32:	197c      	adds	r4, r7, r5
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 f980 	bl	800113c <configure_region_and_channel>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	7023      	strb	r3, [r4, #0]
 8000e40:	197b      	adds	r3, r7, r5
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <lorawan_configure+0x13a>
        printf("Error configuring region/channel: %d\n", err);
 8000e48:	197b      	adds	r3, r7, r5
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <lorawan_configure+0x204>)
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f004 fd25 	bl	80058a0 <iprintf>
        return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e054      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Check and set frequency
    if ((err = check_and_set_frequency(lora)) != LORAWAN_OK) {
 8000e5a:	2517      	movs	r5, #23
 8000e5c:	197c      	adds	r4, r7, r5
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 f993 	bl	800118c <check_and_set_frequency>
 8000e66:	0003      	movs	r3, r0
 8000e68:	7023      	strb	r3, [r4, #0]
 8000e6a:	197b      	adds	r3, r7, r5
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d008      	beq.n	8000e84 <lorawan_configure+0x164>
        printf("Error checking/setting frequency: %d\n", err);
 8000e72:	197b      	adds	r3, r7, r5
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <lorawan_configure+0x208>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f004 fd10 	bl	80058a0 <iprintf>
        return false;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e03f      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Configure LoRaWAN parameters (ADR, OTAA, Class, DR, TX Power)
    if ((err = configure_lorawan_params(lora)) != LORAWAN_OK) {
 8000e84:	2517      	movs	r5, #23
 8000e86:	197c      	adds	r4, r7, r5
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f9e2 	bl	8001254 <configure_lorawan_params>
 8000e90:	0003      	movs	r3, r0
 8000e92:	7023      	strb	r3, [r4, #0]
 8000e94:	197b      	adds	r3, r7, r5
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <lorawan_configure+0x18e>
        printf("Error configuring LoRaWAN parameters: %d\n", err);
 8000e9c:	197b      	adds	r3, r7, r5
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <lorawan_configure+0x20c>)
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f004 fcfb 	bl	80058a0 <iprintf>
        return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e02a      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Save settings and reset
    if ((err = save_and_reset(lora)) != LORAWAN_OK) {
 8000eae:	2517      	movs	r5, #23
 8000eb0:	197c      	adds	r4, r7, r5
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fb45 	bl	8001544 <save_and_reset>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	7023      	strb	r3, [r4, #0]
 8000ebe:	197b      	adds	r3, r7, r5
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d008      	beq.n	8000ed8 <lorawan_configure+0x1b8>
        printf("Error saving/resetting: %d\n", err);
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <lorawan_configure+0x210>)
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f004 fce6 	bl	80058a0 <iprintf>
        return false;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e015      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    // Attempt to join the network
    if ((err = join_network(lora)) != LORAWAN_OK) {
 8000ed8:	2517      	movs	r5, #23
 8000eda:	197c      	adds	r4, r7, r5
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fad8 	bl	8001494 <join_network>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
 8000ee8:	197b      	adds	r3, r7, r5
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <lorawan_configure+0x1e2>
        printf("Error joining network: %d\n", err);
 8000ef0:	197b      	adds	r3, r7, r5
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <lorawan_configure+0x214>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f004 fcd1 	bl	80058a0 <iprintf>
        return false;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <lorawan_configure+0x1e4>
    }

    return true;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b006      	add	sp, #24
 8000f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0c:	08006a9c 	.word	0x08006a9c
 8000f10:	08006ad4 	.word	0x08006ad4
 8000f14:	08006af0 	.word	0x08006af0
 8000f18:	08006b0c 	.word	0x08006b0c
 8000f1c:	08006b30 	.word	0x08006b30
 8000f20:	08006b50 	.word	0x08006b50
 8000f24:	08006b74 	.word	0x08006b74
 8000f28:	08006b9c 	.word	0x08006b9c
 8000f2c:	08006bc4 	.word	0x08006bc4
 8000f30:	08006bf0 	.word	0x08006bf0
 8000f34:	08006c0c 	.word	0x08006c0c

08000f38 <validate_hex_string>:
 * @brief Validates that a string is hexadecimal and of the expected length.
 * @param str The string to validate.
 * @param expected_len The expected length of the string.
 * @return true if the string is valid hexadecimal and matches the length, false otherwise.
 */
static bool validate_hex_string(const char *str, size_t expected_len) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if (str == NULL || strlen(str) != expected_len) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <validate_hex_string+0x20>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff f8dc 	bl	8000108 <strlen>
 8000f50:	0002      	movs	r2, r0
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d001      	beq.n	8000f5c <validate_hex_string+0x24>
        return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e030      	b.n	8000fbe <validate_hex_string+0x86>
    }
    for (size_t i = 0; i < expected_len; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e028      	b.n	8000fb4 <validate_hex_string+0x7c>
        if (!((str[i] >= '0' && str[i] <= '9') ||
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f6c:	d905      	bls.n	8000f7a <validate_hex_string+0x42>
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	18d3      	adds	r3, r2, r3
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b39      	cmp	r3, #57	@ 0x39
 8000f78:	d919      	bls.n	8000fae <validate_hex_string+0x76>
              (str[i] >= 'A' && str[i] <= 'F') ||
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	18d3      	adds	r3, r2, r3
 8000f80:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 8000f82:	2b40      	cmp	r3, #64	@ 0x40
 8000f84:	d905      	bls.n	8000f92 <validate_hex_string+0x5a>
              (str[i] >= 'A' && str[i] <= 'F') ||
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b46      	cmp	r3, #70	@ 0x46
 8000f90:	d90d      	bls.n	8000fae <validate_hex_string+0x76>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	18d3      	adds	r3, r2, r3
 8000f98:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 8000f9a:	2b60      	cmp	r3, #96	@ 0x60
 8000f9c:	d905      	bls.n	8000faa <validate_hex_string+0x72>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	18d3      	adds	r3, r2, r3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b66      	cmp	r3, #102	@ 0x66
 8000fa8:	d901      	bls.n	8000fae <validate_hex_string+0x76>
            return false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e007      	b.n	8000fbe <validate_hex_string+0x86>
    for (size_t i = 0; i < expected_len; i++) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3d2      	bcc.n	8000f62 <validate_hex_string+0x2a>
        }
    }
    return true;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <set_dev_eui>:
 * @brief Sets the Device EUI (DevEUI) if not already set or invalid.
 * @param lora Pointer to the ATC handle for communication.
 * @param dev_eui Device EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_DEV_EUI or LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_dev_eui(ATC_HandleTypeDef *lora, const char *dev_eui) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b0d9      	sub	sp, #356	@ 0x164
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_dev_eui called\n");
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <set_dev_eui+0xb8>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f004 fcc9 	bl	800596c <puts>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000fda:	234c      	movs	r3, #76	@ 0x4c
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
    printf("DEBUG: About to call ATC_SendReceive for DevEUI query\n");
 8000fe0:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <set_dev_eui+0xbc>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f004 fcc2 	bl	800596c <puts>
    int resp = ATC_SendReceive(lora, "ATS 501?\r\n", 100, &response_ptr, 200, 1, "OK");
 8000fe8:	2348      	movs	r3, #72	@ 0x48
 8000fea:	18fa      	adds	r2, r7, r3
 8000fec:	4926      	ldr	r1, [pc, #152]	@ (8001088 <set_dev_eui+0xc0>)
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <set_dev_eui+0xc4>)
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	23c8      	movs	r3, #200	@ 0xc8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	2264      	movs	r2, #100	@ 0x64
 8001000:	f004 f8b9 	bl	8005176 <ATC_SendReceive>
 8001004:	0003      	movs	r3, r0
 8001006:	24a6      	movs	r4, #166	@ 0xa6
 8001008:	0064      	lsls	r4, r4, #1
 800100a:	193a      	adds	r2, r7, r4
 800100c:	6013      	str	r3, [r2, #0]
    printf("DEBUG: ATC_SendReceive returned %d\n", resp);
 800100e:	193b      	adds	r3, r7, r4
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <set_dev_eui+0xc8>)
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f004 fc42 	bl	80058a0 <iprintf>
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	da01      	bge.n	8001028 <set_dev_eui+0x60>
 8001024:	2305      	movs	r3, #5
 8001026:	e027      	b.n	8001078 <set_dev_eui+0xb0>

    if (strstr(response, "0000000000000000") != NULL) {
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <set_dev_eui+0xcc>)
 800102a:	234c      	movs	r3, #76	@ 0x4c
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f004 fdf1 	bl	8005c18 <strstr>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d01d      	beq.n	8001076 <set_dev_eui+0xae>
        char command[64];
        snprintf(command, sizeof(command), "ATS 501=\"%s\"\r\n", dev_eui);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <set_dev_eui+0xd0>)
 800103e:	2408      	movs	r4, #8
 8001040:	1938      	adds	r0, r7, r4
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	f004 fc9c 	bl	8005980 <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001048:	1939      	adds	r1, r7, r4
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <set_dev_eui+0xc4>)
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	23c8      	movs	r3, #200	@ 0xc8
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2264      	movs	r2, #100	@ 0x64
 800105c:	f004 f88b 	bl	8005176 <ATC_SendReceive>
 8001060:	0003      	movs	r3, r0
 8001062:	22a6      	movs	r2, #166	@ 0xa6
 8001064:	0052      	lsls	r2, r2, #1
 8001066:	18b9      	adds	r1, r7, r2
 8001068:	600b      	str	r3, [r1, #0]
        if (resp < 0) return LORAWAN_ERR_DEV_EUI;
 800106a:	18bb      	adds	r3, r7, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	da01      	bge.n	8001076 <set_dev_eui+0xae>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <set_dev_eui+0xb0>
    }
    return LORAWAN_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b055      	add	sp, #340	@ 0x154
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	08006c28 	.word	0x08006c28
 8001084:	08006c44 	.word	0x08006c44
 8001088:	08006c7c 	.word	0x08006c7c
 800108c:	08006c88 	.word	0x08006c88
 8001090:	08006c8c 	.word	0x08006c8c
 8001094:	08006cb0 	.word	0x08006cb0
 8001098:	08006cc4 	.word	0x08006cc4

0800109c <set_app_eui>:
 * @brief Sets the Application EUI (AppEUI/JoinEUI).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_eui Application EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_EUI on failure.
 */
static LoRaWAN_Error_t set_app_eui(ATC_HandleTypeDef *lora, const char *app_eui) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b099      	sub	sp, #100	@ 0x64
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    char command[64];
    snprintf(command, sizeof(command), "ATS 502=\"%s\"\r\n", app_eui);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <set_app_eui+0x48>)
 80010aa:	240c      	movs	r4, #12
 80010ac:	1938      	adds	r0, r7, r4
 80010ae:	2140      	movs	r1, #64	@ 0x40
 80010b0:	f004 fc66 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80010b4:	1939      	adds	r1, r7, r4
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <set_app_eui+0x4c>)
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	23c8      	movs	r3, #200	@ 0xc8
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	2264      	movs	r2, #100	@ 0x64
 80010c8:	f004 f855 	bl	8005176 <ATC_SendReceive>
 80010cc:	0003      	movs	r3, r0
 80010ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return (resp < 0) ? LORAWAN_ERR_APP_EUI : LORAWAN_OK;
 80010d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010d2:	179b      	asrs	r3, r3, #30
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b015      	add	sp, #84	@ 0x54
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	08006cd4 	.word	0x08006cd4
 80010e8:	08006c88 	.word	0x08006c88

080010ec <set_app_key>:
 * @brief Sets the Application Key (AppKey).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_key Application key (32 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_KEY on failure.
 */
static LoRaWAN_Error_t set_app_key(ATC_HandleTypeDef *lora, const char *app_key) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b0a1      	sub	sp, #132	@ 0x84
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
    char command[96];
    snprintf(command, sizeof(command), "ATS 500=\"%s\"\r\n", app_key);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <set_app_key+0x48>)
 80010fa:	240c      	movs	r4, #12
 80010fc:	1938      	adds	r0, r7, r4
 80010fe:	2160      	movs	r1, #96	@ 0x60
 8001100:	f004 fc3e 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001104:	1939      	adds	r1, r7, r4
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <set_app_key+0x4c>)
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	23c8      	movs	r3, #200	@ 0xc8
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2264      	movs	r2, #100	@ 0x64
 8001118:	f004 f82d 	bl	8005176 <ATC_SendReceive>
 800111c:	0003      	movs	r3, r0
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return (resp < 0) ? LORAWAN_ERR_APP_KEY : LORAWAN_OK;
 8001120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001122:	2b00      	cmp	r3, #0
 8001124:	da01      	bge.n	800112a <set_app_key+0x3e>
 8001126:	2303      	movs	r3, #3
 8001128:	e000      	b.n	800112c <set_app_key+0x40>
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b01d      	add	sp, #116	@ 0x74
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	08006ce4 	.word	0x08006ce4
 8001138:	08006c88 	.word	0x08006c88

0800113c <configure_region_and_channel>:
/**
 * @brief Configures the region and sub-band for Japan (AS923-1) with TTN.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t configure_region_and_channel(ATC_HandleTypeDef *lora) {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b091      	sub	sp, #68	@ 0x44
 8001140:	af04      	add	r7, sp, #16
 8001142:	6078      	str	r0, [r7, #4]
    char command[32];
    int resp;

    // Set region to AS923-1 (Japan)
    snprintf(command, sizeof(command), "ATS 611=%d\r\n", JAPAN_REGION);
 8001144:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <configure_region_and_channel+0x48>)
 8001146:	240c      	movs	r4, #12
 8001148:	1938      	adds	r0, r7, r4
 800114a:	2309      	movs	r3, #9
 800114c:	2120      	movs	r1, #32
 800114e:	f004 fc17 	bl	8005980 <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001152:	1939      	adds	r1, r7, r4
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <configure_region_and_channel+0x4c>)
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	23c8      	movs	r3, #200	@ 0xc8
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	2264      	movs	r2, #100	@ 0x64
 8001166:	f004 f806 	bl	8005176 <ATC_SendReceive>
 800116a:	0003      	movs	r3, r0
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 800116e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	da01      	bge.n	8001178 <configure_region_and_channel+0x3c>
 8001174:	2305      	movs	r3, #5
 8001176:	e000      	b.n	800117a <configure_region_and_channel+0x3e>
    // Set sub-band channel for TTN
//    snprintf(command, sizeof(command), "ATS 606=%d\r\n", TTN_SUBBAND_CHANNEL);
//    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;

    return LORAWAN_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b00d      	add	sp, #52	@ 0x34
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	08006cf4 	.word	0x08006cf4
 8001188:	08006c88 	.word	0x08006c88

0800118c <check_and_set_frequency>:
/**
 * @brief Checks and sets the frequency to ensure compliance with AS923-1 (923.2–923.4 MHz).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND or LORAWAN_ERR_FREQ_CHECK on failure.
 */
static LoRaWAN_Error_t check_and_set_frequency(ATC_HandleTypeDef *lora) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0d3      	sub	sp, #332	@ 0x14c
 8001190:	af04      	add	r7, sp, #16
 8001192:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001194:	2330      	movs	r3, #48	@ 0x30
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int resp = ATC_SendReceive(lora, "ATS 605?\r\n", 100, &response_ptr, 200, 1, "OK");
 800119a:	232c      	movs	r3, #44	@ 0x2c
 800119c:	18fa      	adds	r2, r7, r3
 800119e:	4927      	ldr	r1, [pc, #156]	@ (800123c <check_and_set_frequency+0xb0>)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <check_and_set_frequency+0xb4>)
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	23c8      	movs	r3, #200	@ 0xc8
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	0013      	movs	r3, r2
 80011b0:	2264      	movs	r2, #100	@ 0x64
 80011b2:	f003 ffe0 	bl	8005176 <ATC_SendReceive>
 80011b6:	0003      	movs	r3, r0
 80011b8:	229a      	movs	r2, #154	@ 0x9a
 80011ba:	0052      	lsls	r2, r2, #1
 80011bc:	18b9      	adds	r1, r7, r2
 80011be:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 80011c0:	18bb      	adds	r3, r7, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da01      	bge.n	80011cc <check_and_set_frequency+0x40>
 80011c8:	2305      	movs	r3, #5
 80011ca:	e032      	b.n	8001232 <check_and_set_frequency+0xa6>

    // Parse frequency (assuming response contains numeric Hz value)
    unsigned long freq = atol(response);
 80011cc:	2330      	movs	r3, #48	@ 0x30
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	0018      	movs	r0, r3
 80011d2:	f004 f93e 	bl	8005452 <atol>
 80011d6:	0003      	movs	r3, r0
 80011d8:	2198      	movs	r1, #152	@ 0x98
 80011da:	0049      	lsls	r1, r1, #1
 80011dc:	187a      	adds	r2, r7, r1
 80011de:	6013      	str	r3, [r2, #0]
    if (freq < AS923_1_FREQ_MIN || freq > AS923_1_FREQ_MAX) {
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <check_and_set_frequency+0xb8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d904      	bls.n	80011f4 <check_and_set_frequency+0x68>
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <check_and_set_frequency+0xbc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d91d      	bls.n	8001230 <check_and_set_frequency+0xa4>
        char command[32];
        snprintf(command, sizeof(command), "ATS 605=%u\r\n", DEFAULT_FREQ);
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <check_and_set_frequency+0xc0>)
 80011f6:	4a16      	ldr	r2, [pc, #88]	@ (8001250 <check_and_set_frequency+0xc4>)
 80011f8:	240c      	movs	r4, #12
 80011fa:	1938      	adds	r0, r7, r4
 80011fc:	2120      	movs	r1, #32
 80011fe:	f004 fbbf 	bl	8005980 <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001202:	1939      	adds	r1, r7, r4
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <check_and_set_frequency+0xb4>)
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2301      	movs	r3, #1
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	23c8      	movs	r3, #200	@ 0xc8
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2300      	movs	r3, #0
 8001214:	2264      	movs	r2, #100	@ 0x64
 8001216:	f003 ffae 	bl	8005176 <ATC_SendReceive>
 800121a:	0003      	movs	r3, r0
 800121c:	229a      	movs	r2, #154	@ 0x9a
 800121e:	0052      	lsls	r2, r2, #1
 8001220:	18b9      	adds	r1, r7, r2
 8001222:	600b      	str	r3, [r1, #0]
        if (resp < 0) return LORAWAN_ERR_FREQ_CHECK;
 8001224:	18bb      	adds	r3, r7, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da01      	bge.n	8001230 <check_and_set_frequency+0xa4>
 800122c:	2304      	movs	r3, #4
 800122e:	e000      	b.n	8001232 <check_and_set_frequency+0xa6>
    }
    return LORAWAN_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b04f      	add	sp, #316	@ 0x13c
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	08006d04 	.word	0x08006d04
 8001240:	08006c88 	.word	0x08006c88
 8001244:	3706e9ff 	.word	0x3706e9ff
 8001248:	3709f740 	.word	0x3709f740
 800124c:	3706ea00 	.word	0x3706ea00
 8001250:	08006d10 	.word	0x08006d10

08001254 <configure_lorawan_params>:
/**
 * @brief Configures LoRaWAN parameters (ADR, OTAA, Class, Data Rate, TX Power).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, or an error code from a failed sub-function.
 */
static LoRaWAN_Error_t configure_lorawan_params(ATC_HandleTypeDef *lora) {
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    LoRaWAN_Error_t err;

    // Disable ADR
    if ((err = set_adr(lora, false)) != LORAWAN_OK) return err;
 800125c:	250f      	movs	r5, #15
 800125e:	197c      	adds	r4, r7, r5
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2100      	movs	r1, #0
 8001264:	0018      	movs	r0, r3
 8001266:	f000 f84d 	bl	8001304 <set_adr>
 800126a:	0003      	movs	r3, r0
 800126c:	7023      	strb	r3, [r4, #0]
 800126e:	197b      	adds	r3, r7, r5
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <configure_lorawan_params+0x28>
 8001276:	197b      	adds	r3, r7, r5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	e03f      	b.n	80012fc <configure_lorawan_params+0xa8>

    // Enable OTAA
    if ((err = set_otaa(lora, true)) != LORAWAN_OK) return err;
 800127c:	250f      	movs	r5, #15
 800127e:	197c      	adds	r4, r7, r5
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2101      	movs	r1, #1
 8001284:	0018      	movs	r0, r3
 8001286:	f000 f869 	bl	800135c <set_otaa>
 800128a:	0003      	movs	r3, r0
 800128c:	7023      	strb	r3, [r4, #0]
 800128e:	197b      	adds	r3, r7, r5
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <configure_lorawan_params+0x48>
 8001296:	197b      	adds	r3, r7, r5
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	e02f      	b.n	80012fc <configure_lorawan_params+0xa8>

    // Set Class A
    if ((err = set_class_a(lora)) != LORAWAN_OK) return err;
 800129c:	250f      	movs	r5, #15
 800129e:	197c      	adds	r4, r7, r5
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 f886 	bl	80013b4 <set_class_a>
 80012a8:	0003      	movs	r3, r0
 80012aa:	7023      	strb	r3, [r4, #0]
 80012ac:	197b      	adds	r3, r7, r5
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <configure_lorawan_params+0x66>
 80012b4:	197b      	adds	r3, r7, r5
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	e020      	b.n	80012fc <configure_lorawan_params+0xa8>

    // Set static data rate (DR0)
    if ((err = set_data_rate(lora, DATA_RATE)) != LORAWAN_OK) return err;
 80012ba:	250f      	movs	r5, #15
 80012bc:	197c      	adds	r4, r7, r5
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2100      	movs	r1, #0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f896 	bl	80013f4 <set_data_rate>
 80012c8:	0003      	movs	r3, r0
 80012ca:	7023      	strb	r3, [r4, #0]
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <configure_lorawan_params+0x86>
 80012d4:	197b      	adds	r3, r7, r5
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	e010      	b.n	80012fc <configure_lorawan_params+0xa8>

    // Set TX power (11 dBm for Japan compliance)
    if ((err = set_tx_power(lora, TX_POWER)) != LORAWAN_OK) return err;
 80012da:	250f      	movs	r5, #15
 80012dc:	197c      	adds	r4, r7, r5
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	210b      	movs	r1, #11
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8ae 	bl	8001444 <set_tx_power>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
 80012ec:	197b      	adds	r3, r7, r5
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <configure_lorawan_params+0xa6>
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	e000      	b.n	80012fc <configure_lorawan_params+0xa8>

    return LORAWAN_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bdb0      	pop	{r4, r5, r7, pc}

08001304 <set_adr>:
 * @brief Disables or enables Adaptive Data Rate (ADR).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable ADR, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_adr(ATC_HandleTypeDef *lora, bool enable) {
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b091      	sub	sp, #68	@ 0x44
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	000a      	movs	r2, r1
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "ATS 600=%d\r\n", enable ? 1 : 0);
 8001312:	1cfb      	adds	r3, r7, #3
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <set_adr+0x50>)
 8001318:	240c      	movs	r4, #12
 800131a:	1938      	adds	r0, r7, r4
 800131c:	2120      	movs	r1, #32
 800131e:	f004 fb2f 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001322:	1939      	adds	r1, r7, r4
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <set_adr+0x54>)
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	23c8      	movs	r3, #200	@ 0xc8
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2264      	movs	r2, #100	@ 0x64
 8001336:	f003 ff1e 	bl	8005176 <ATC_SendReceive>
 800133a:	0003      	movs	r3, r0
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	da01      	bge.n	8001348 <set_adr+0x44>
 8001344:	2305      	movs	r3, #5
 8001346:	e000      	b.n	800134a <set_adr+0x46>
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b00d      	add	sp, #52	@ 0x34
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	08006d20 	.word	0x08006d20
 8001358:	08006c88 	.word	0x08006c88

0800135c <set_otaa>:
 * @brief Enables or disables Over-The-Air Activation (OTAA).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable OTAA, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_otaa(ATC_HandleTypeDef *lora, bool enable) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b091      	sub	sp, #68	@ 0x44
 8001360:	af04      	add	r7, sp, #16
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	000a      	movs	r2, r1
 8001366:	1cfb      	adds	r3, r7, #3
 8001368:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "ATS 602=%d\r\n", enable ? 1 : 0);
 800136a:	1cfb      	adds	r3, r7, #3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <set_otaa+0x50>)
 8001370:	240c      	movs	r4, #12
 8001372:	1938      	adds	r0, r7, r4
 8001374:	2120      	movs	r1, #32
 8001376:	f004 fb03 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800137a:	1939      	adds	r1, r7, r4
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <set_otaa+0x54>)
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	23c8      	movs	r3, #200	@ 0xc8
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	2264      	movs	r2, #100	@ 0x64
 800138e:	f003 fef2 	bl	8005176 <ATC_SendReceive>
 8001392:	0003      	movs	r3, r0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001398:	2b00      	cmp	r3, #0
 800139a:	da01      	bge.n	80013a0 <set_otaa+0x44>
 800139c:	2305      	movs	r3, #5
 800139e:	e000      	b.n	80013a2 <set_otaa+0x46>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b00d      	add	sp, #52	@ 0x34
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	08006d30 	.word	0x08006d30
 80013b0:	08006c88 	.word	0x08006c88

080013b4 <set_class_a>:
/**
 * @brief Sets the LoRaWAN device to Class A.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_class_a(ATC_HandleTypeDef *lora) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "ATS 603=0\r\n", 100, NULL, 200, 1, "OK");
 80013bc:	490b      	ldr	r1, [pc, #44]	@ (80013ec <set_class_a+0x38>)
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <set_class_a+0x3c>)
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	23c8      	movs	r3, #200	@ 0xc8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	2264      	movs	r2, #100	@ 0x64
 80013d0:	f003 fed1 	bl	8005176 <ATC_SendReceive>
 80013d4:	0003      	movs	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da01      	bge.n	80013e2 <set_class_a+0x2e>
 80013de:	2305      	movs	r3, #5
 80013e0:	e000      	b.n	80013e4 <set_class_a+0x30>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	08006d40 	.word	0x08006d40
 80013f0:	08006c88 	.word	0x08006c88

080013f4 <set_data_rate>:
 * @brief Sets the static data rate for LoRaWAN communication.
 * @param lora Pointer to the ATC handle for communication.
 * @param dr Data rate to set (e.g., 0 for DR0).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_data_rate(ATC_HandleTypeDef *lora, int dr) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b091      	sub	sp, #68	@ 0x44
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "ATS 713=%d\r\n", dr);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <set_data_rate+0x48>)
 8001402:	240c      	movs	r4, #12
 8001404:	1938      	adds	r0, r7, r4
 8001406:	2120      	movs	r1, #32
 8001408:	f004 faba 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800140c:	1939      	adds	r1, r7, r4
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <set_data_rate+0x4c>)
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	23c8      	movs	r3, #200	@ 0xc8
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	2264      	movs	r2, #100	@ 0x64
 8001420:	f003 fea9 	bl	8005176 <ATC_SendReceive>
 8001424:	0003      	movs	r3, r0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142a:	2b00      	cmp	r3, #0
 800142c:	da01      	bge.n	8001432 <set_data_rate+0x3e>
 800142e:	2305      	movs	r3, #5
 8001430:	e000      	b.n	8001434 <set_data_rate+0x40>
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b00d      	add	sp, #52	@ 0x34
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	08006d4c 	.word	0x08006d4c
 8001440:	08006c88 	.word	0x08006c88

08001444 <set_tx_power>:
 * @brief Sets the TX power for LoRaWAN transmission.
 * @param lora Pointer to the ATC handle for communication.
 * @param power TX power in dBm (e.g., 11 for Japan compliance).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_tx_power(ATC_HandleTypeDef *lora, int power) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b091      	sub	sp, #68	@ 0x44
 8001448:	af04      	add	r7, sp, #16
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "ATS 714=%d\r\n", power);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <set_tx_power+0x48>)
 8001452:	240c      	movs	r4, #12
 8001454:	1938      	adds	r0, r7, r4
 8001456:	2120      	movs	r1, #32
 8001458:	f004 fa92 	bl	8005980 <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800145c:	1939      	adds	r1, r7, r4
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <set_tx_power+0x4c>)
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	23c8      	movs	r3, #200	@ 0xc8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2264      	movs	r2, #100	@ 0x64
 8001470:	f003 fe81 	bl	8005176 <ATC_SendReceive>
 8001474:	0003      	movs	r3, r0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	da01      	bge.n	8001482 <set_tx_power+0x3e>
 800147e:	2305      	movs	r3, #5
 8001480:	e000      	b.n	8001484 <set_tx_power+0x40>
 8001482:	2300      	movs	r3, #0
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b00d      	add	sp, #52	@ 0x34
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	08006d5c 	.word	0x08006d5c
 8001490:	08006c88 	.word	0x08006c88

08001494 <join_network>:
/**
 * @brief Initiates the LoRaWAN network join process using OTAA.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on successful join, LORAWAN_ERR_JOIN or LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b0c8      	sub	sp, #288	@ 0x120
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 800149c:	230c      	movs	r3, #12
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 80014a2:	2308      	movs	r3, #8
 80014a4:	18fa      	adds	r2, r7, r3
 80014a6:	4913      	ldr	r1, [pc, #76]	@ (80014f4 <join_network+0x60>)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <join_network+0x64>)
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2301      	movs	r3, #1
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <join_network+0x68>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	0013      	movs	r3, r2
 80014b8:	2264      	movs	r2, #100	@ 0x64
 80014ba:	f003 fe5c 	bl	8005176 <ATC_SendReceive>
 80014be:	0003      	movs	r3, r0
 80014c0:	2286      	movs	r2, #134	@ 0x86
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	18b9      	adds	r1, r7, r2
 80014c6:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 80014c8:	18bb      	adds	r3, r7, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da01      	bge.n	80014d4 <join_network+0x40>
 80014d0:	2305      	movs	r3, #5
 80014d2:	e00b      	b.n	80014ec <join_network+0x58>

    // Check for join success (expecting a response like "+JOIN: Joined" or similar)
    if (strstr(response, "Joined") == NULL) {
 80014d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <join_network+0x6c>)
 80014d6:	230c      	movs	r3, #12
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f004 fb9b 	bl	8005c18 <strstr>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d101      	bne.n	80014ea <join_network+0x56>
        return LORAWAN_ERR_JOIN;
 80014e6:	2307      	movs	r3, #7
 80014e8:	e000      	b.n	80014ec <join_network+0x58>
    }

    return LORAWAN_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b044      	add	sp, #272	@ 0x110
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	08006d6c 	.word	0x08006d6c
 80014f8:	08006c88 	.word	0x08006c88
 80014fc:	00002710 	.word	0x00002710
 8001500:	08006d78 	.word	0x08006d78

08001504 <factor_reset>:
/**
 * @brief Sets all writable parameters to default values and clears the trusted device bond database then performs a warm reset.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success AFTER the reboot, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t factor_reset(ATC_HandleTypeDef *lora) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	@ 0x40
 8001508:	af04      	add	r7, sp, #16
 800150a:	6078      	str	r0, [r7, #4]
    char command[32];
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800150c:	230c      	movs	r3, #12
 800150e:	18f9      	adds	r1, r7, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <factor_reset+0x3c>)
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2301      	movs	r3, #1
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	23c8      	movs	r3, #200	@ 0xc8
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2264      	movs	r2, #100	@ 0x64
 8001522:	f003 fe28 	bl	8005176 <ATC_SendReceive>
 8001526:	0003      	movs	r3, r0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 800152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	da01      	bge.n	8001534 <factor_reset+0x30>
 8001530:	2305      	movs	r3, #5
 8001532:	e000      	b.n	8001536 <factor_reset+0x32>
 8001534:	2300      	movs	r3, #0
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b00c      	add	sp, #48	@ 0x30
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	08006c88 	.word	0x08006c88

08001544 <save_and_reset>:
/**
 * @brief Saves settings to non-volatile memory and performs a warm reset.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_SAVE_RESET on failure.
 */
static LoRaWAN_Error_t save_and_reset(ATC_HandleTypeDef *lora) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af04      	add	r7, sp, #16
 800154a:	6078      	str	r0, [r7, #4]
    int resp;

    // Save settings to non-volatile memory
    resp = ATC_SendReceive(lora, "AT&W\r\n", 100, NULL, 200, 1, "OK");
 800154c:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <save_and_reset+0x60>)
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <save_and_reset+0x64>)
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2301      	movs	r3, #1
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	23c8      	movs	r3, #200	@ 0xc8
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2300      	movs	r3, #0
 800155e:	2264      	movs	r2, #100	@ 0x64
 8001560:	f003 fe09 	bl	8005176 <ATC_SendReceive>
 8001564:	0003      	movs	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da01      	bge.n	8001572 <save_and_reset+0x2e>
 800156e:	2306      	movs	r3, #6
 8001570:	e013      	b.n	800159a <save_and_reset+0x56>

    // Perform warm reset
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
 8001572:	490e      	ldr	r1, [pc, #56]	@ (80015ac <save_and_reset+0x68>)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <save_and_reset+0x64>)
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	2301      	movs	r3, #1
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	23c8      	movs	r3, #200	@ 0xc8
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	2264      	movs	r2, #100	@ 0x64
 8001586:	f003 fdf6 	bl	8005176 <ATC_SendReceive>
 800158a:	0003      	movs	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da01      	bge.n	8001598 <save_and_reset+0x54>
 8001594:	2306      	movs	r3, #6
 8001596:	e000      	b.n	800159a <save_and_reset+0x56>

    return LORAWAN_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	08006d80 	.word	0x08006d80
 80015a8:	08006c88 	.word	0x08006c88
 80015ac:	08006d88 	.word	0x08006d88

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015b0:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b4:	f7ff fada 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <LoopForever+0x6>)
  ldr r1, =_edata
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <LoopForever+0xe>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d0:	4c0a      	ldr	r4, [pc, #40]	@ (80015fc <LoopForever+0x16>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80015de:	f004 fb97 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff f8c9 	bl	8000778 <main>

080015e6 <LoopForever>:

LoopForever:
    b LoopForever
 80015e6:	e7fe      	b.n	80015e6 <LoopForever>
   ldr   r0, =_estack
 80015e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015f4:	08006f68 	.word	0x08006f68
  ldr r2, =_sbss
 80015f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015fc:	20000388 	.word	0x20000388

08001600 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_COMP_IRQHandler>
	...

08001604 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_Init+0x3c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Init+0x3c>)
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161c:	2000      	movs	r0, #0
 800161e:	f000 f811 	bl	8001644 <HAL_InitTick>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d003      	beq.n	800162e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e001      	b.n	8001632 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162e:	f7ff f9af 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_InitTick+0x5c>)
 800164e:	681c      	ldr	r4, [r3, #0]
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	0019      	movs	r1, r3
 8001656:	23fa      	movs	r3, #250	@ 0xfa
 8001658:	0098      	lsls	r0, r3, #2
 800165a:	f7fe fd67 	bl	800012c <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	0019      	movs	r1, r3
 8001662:	0020      	movs	r0, r4
 8001664:	f7fe fd62 	bl	800012c <__udivsi3>
 8001668:	0003      	movs	r3, r0
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f92f 	bl	80018ce <HAL_SYSTICK_Config>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e00f      	b.n	8001698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d80b      	bhi.n	8001696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	425b      	negs	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f8fc 	bl	8001884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_InitTick+0x64>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b003      	add	sp, #12
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	18d2      	adds	r2, r2, r3
 80016bc:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <HAL_IncTick+0x20>)
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000238 	.word	0x20000238

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	@ (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	20000238 	.word	0x20000238

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	001a      	movs	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	189b      	adds	r3, r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	f7ff ffe0 	bl	80016d0 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	20000008 	.word	0x20000008

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	0002      	movs	r2, r0
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b7f      	cmp	r3, #127	@ 0x7f
 800173e:	d809      	bhi.n	8001754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	231f      	movs	r3, #31
 8001748:	401a      	ands	r2, r3
 800174a:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_EnableIRQ+0x30>)
 800174c:	2101      	movs	r1, #1
 800174e:	4091      	lsls	r1, r2
 8001750:	000a      	movs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
  }
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	0002      	movs	r2, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b7f      	cmp	r3, #127	@ 0x7f
 8001774:	d828      	bhi.n	80017c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001776:	4a2f      	ldr	r2, [pc, #188]	@ (8001834 <__NVIC_SetPriority+0xd4>)
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	33c0      	adds	r3, #192	@ 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	589b      	ldr	r3, [r3, r2]
 8001786:	1dfa      	adds	r2, r7, #7
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	0011      	movs	r1, r2
 800178c:	2203      	movs	r2, #3
 800178e:	400a      	ands	r2, r1
 8001790:	00d2      	lsls	r2, r2, #3
 8001792:	21ff      	movs	r1, #255	@ 0xff
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	43d2      	mvns	r2, r2
 800179a:	401a      	ands	r2, r3
 800179c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	22ff      	movs	r2, #255	@ 0xff
 80017a4:	401a      	ands	r2, r3
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	2303      	movs	r3, #3
 80017ae:	4003      	ands	r3, r0
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b4:	481f      	ldr	r0, [pc, #124]	@ (8001834 <__NVIC_SetPriority+0xd4>)
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	430a      	orrs	r2, r1
 80017c0:	33c0      	adds	r3, #192	@ 0xc0
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017c6:	e031      	b.n	800182c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <__NVIC_SetPriority+0xd8>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0019      	movs	r1, r3
 80017d0:	230f      	movs	r3, #15
 80017d2:	400b      	ands	r3, r1
 80017d4:	3b08      	subs	r3, #8
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3306      	adds	r3, #6
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	3304      	adds	r3, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1dfa      	adds	r2, r7, #7
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	0011      	movs	r1, r2
 80017e8:	2203      	movs	r2, #3
 80017ea:	400a      	ands	r2, r1
 80017ec:	00d2      	lsls	r2, r2, #3
 80017ee:	21ff      	movs	r1, #255	@ 0xff
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	43d2      	mvns	r2, r2
 80017f6:	401a      	ands	r2, r3
 80017f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	22ff      	movs	r2, #255	@ 0xff
 8001800:	401a      	ands	r2, r3
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0018      	movs	r0, r3
 8001808:	2303      	movs	r3, #3
 800180a:	4003      	ands	r3, r0
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001810:	4809      	ldr	r0, [pc, #36]	@ (8001838 <__NVIC_SetPriority+0xd8>)
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	001c      	movs	r4, r3
 8001818:	230f      	movs	r3, #15
 800181a:	4023      	ands	r3, r4
 800181c:	3b08      	subs	r3, #8
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	430a      	orrs	r2, r1
 8001822:	3306      	adds	r3, #6
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	18c3      	adds	r3, r0, r3
 8001828:	3304      	adds	r3, #4
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b003      	add	sp, #12
 8001832:	bd90      	pop	{r4, r7, pc}
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1e5a      	subs	r2, r3, #1
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	045b      	lsls	r3, r3, #17
 800184c:	429a      	cmp	r2, r3
 800184e:	d301      	bcc.n	8001854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001850:	2301      	movs	r3, #1
 8001852:	e010      	b.n	8001876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <SysTick_Config+0x44>)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	3a01      	subs	r2, #1
 800185a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185c:	2301      	movs	r3, #1
 800185e:	425b      	negs	r3, r3
 8001860:	2103      	movs	r1, #3
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff ff7c 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <SysTick_Config+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SysTick_Config+0x44>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	210f      	movs	r1, #15
 8001890:	187b      	adds	r3, r7, r1
 8001892:	1c02      	adds	r2, r0, #0
 8001894:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	187b      	adds	r3, r7, r1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b25b      	sxtb	r3, r3
 800189e:	0011      	movs	r1, r2
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	0002      	movs	r2, r0
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff33 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ffaf 	bl	800183c <SysTick_Config>
 80018de:	0003      	movs	r3, r0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e061      	b.n	80019be <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <HAL_DMA_Init+0xe0>)
 8001900:	4694      	mov	ip, r2
 8001902:	4463      	add	r3, ip
 8001904:	2114      	movs	r1, #20
 8001906:	0018      	movs	r0, r3
 8001908:	f7fe fc10 	bl	800012c <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	009a      	lsls	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a2d      	ldr	r2, [pc, #180]	@ (80019cc <HAL_DMA_Init+0xe4>)
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2225      	movs	r2, #37	@ 0x25
 800191e:	2102      	movs	r1, #2
 8001920:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <HAL_DMA_Init+0xe8>)
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	01db      	lsls	r3, r3, #7
 8001970:	429a      	cmp	r2, r3
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <HAL_DMA_Init+0xec>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	211c      	movs	r1, #28
 800197e:	400b      	ands	r3, r1
 8001980:	210f      	movs	r1, #15
 8001982:	4099      	lsls	r1, r3
 8001984:	000b      	movs	r3, r1
 8001986:	43d9      	mvns	r1, r3
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_DMA_Init+0xec>)
 800198a:	400a      	ands	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_DMA_Init+0xec>)
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	201c      	movs	r0, #28
 800199c:	4003      	ands	r3, r0
 800199e:	409a      	lsls	r2, r3
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_DMA_Init+0xec>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2225      	movs	r2, #37	@ 0x25
 80019b0:	2101      	movs	r1, #1
 80019b2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	bffdfff8 	.word	0xbffdfff8
 80019cc:	40020000 	.word	0x40020000
 80019d0:	ffff800f 	.word	0xffff800f
 80019d4:	400200a8 	.word	0x400200a8

080019d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e6:	2317      	movs	r3, #23
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2224      	movs	r2, #36	@ 0x24
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_DMA_Start_IT+0x24>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e04f      	b.n	8001a9c <HAL_DMA_Start_IT+0xc4>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2224      	movs	r2, #36	@ 0x24
 8001a00:	2101      	movs	r1, #1
 8001a02:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2225      	movs	r2, #37	@ 0x25
 8001a08:	5c9b      	ldrb	r3, [r3, r2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d13a      	bne.n	8001a86 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2225      	movs	r2, #37	@ 0x25
 8001a14:	2102      	movs	r1, #2
 8001a16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f974 	bl	8001d22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e00f      	b.n	8001a74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	210a      	movs	r1, #10
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2224      	movs	r2, #36	@ 0x24
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b006      	add	sp, #24
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	230f      	movs	r3, #15
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2225      	movs	r2, #37	@ 0x25
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e024      	b.n	8001b1c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	210e      	movs	r1, #14
 8001ade:	438a      	bics	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	221c      	movs	r2, #28
 8001af8:	401a      	ands	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	2101      	movs	r1, #1
 8001b00:	4091      	lsls	r1, r2
 8001b02:	000a      	movs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2225      	movs	r2, #37	@ 0x25
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2224      	movs	r2, #36	@ 0x24
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]

    return status;
 8001b16:	230f      	movs	r3, #15
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2225      	movs	r2, #37	@ 0x25
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d006      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2204      	movs	r2, #4
 8001b44:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e02a      	b.n	8001ba4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	210e      	movs	r1, #14
 8001b5a:	438a      	bics	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	221c      	movs	r2, #28
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4091      	lsls	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2225      	movs	r2, #37	@ 0x25
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2224      	movs	r2, #36	@ 0x24
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	4798      	blx	r3
    }
  }
  return status;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b004      	add	sp, #16
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	221c      	movs	r2, #28
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d026      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x7a>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2204      	movs	r2, #4
 8001be2:	4013      	ands	r3, r2
 8001be4:	d022      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2220      	movs	r2, #32
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d107      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	438a      	bics	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	221c      	movs	r2, #28
 8001c08:	401a      	ands	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4091      	lsls	r1, r2
 8001c12:	000a      	movs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d100      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x6e>
 8001c1e:	e071      	b.n	8001d04 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	0010      	movs	r0, r2
 8001c28:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001c2a:	e06b      	b.n	8001d04 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	221c      	movs	r2, #28
 8001c32:	4013      	ands	r3, r2
 8001c34:	2202      	movs	r2, #2
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d02d      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xea>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d029      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	4013      	ands	r3, r2
 8001c52:	d10b      	bne.n	8001c6c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	210a      	movs	r1, #10
 8001c60:	438a      	bics	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2225      	movs	r2, #37	@ 0x25
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	221c      	movs	r2, #28
 8001c72:	401a      	ands	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4091      	lsls	r1, r2
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	@ 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d039      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	0010      	movs	r0, r2
 8001c98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c9a:	e033      	b.n	8001d04 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	221c      	movs	r2, #28
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	d02a      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x154>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d026      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	210e      	movs	r1, #14
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	221c      	movs	r2, #28
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4091      	lsls	r1, r2
 8001cd8:	000a      	movs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2225      	movs	r2, #37	@ 0x25
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	@ 0x24
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	0010      	movs	r0, r2
 8001d02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46c0      	nop			@ (mov r8, r8)
}
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	221c      	movs	r2, #28
 8001d36:	401a      	ands	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4091      	lsls	r1, r2
 8001d40:	000a      	movs	r2, r1
 8001d42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d108      	bne.n	8001d66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d64:	e007      	b.n	8001d76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	60da      	str	r2, [r3, #12]
}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d96:	e155      	b.n	8002044 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4091      	lsls	r1, r2
 8001da2:	000a      	movs	r2, r1
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d100      	bne.n	8001db0 <HAL_GPIO_Init+0x30>
 8001dae:	e146      	b.n	800203e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	2201      	movs	r2, #1
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d017      	beq.n	8001e66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	43da      	mvns	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d123      	bne.n	8001eba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	58d3      	ldr	r3, [r2, r3]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	23c0      	movs	r3, #192	@ 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d100      	bne.n	8001efc <HAL_GPIO_Init+0x17c>
 8001efa:	e0a0      	b.n	800203e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efc:	4b57      	ldr	r3, [pc, #348]	@ (800205c <HAL_GPIO_Init+0x2dc>)
 8001efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f00:	4b56      	ldr	r3, [pc, #344]	@ (800205c <HAL_GPIO_Init+0x2dc>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f08:	4a55      	ldr	r2, [pc, #340]	@ (8002060 <HAL_GPIO_Init+0x2e0>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	589b      	ldr	r3, [r3, r2]
 8001f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	409a      	lsls	r2, r3
 8001f22:	0013      	movs	r3, r2
 8001f24:	43da      	mvns	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	23a0      	movs	r3, #160	@ 0xa0
 8001f30:	05db      	lsls	r3, r3, #23
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x1f6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	@ (8002064 <HAL_GPIO_Init+0x2e4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x1f2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a49      	ldr	r2, [pc, #292]	@ (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a48      	ldr	r2, [pc, #288]	@ (800206c <HAL_GPIO_Init+0x2ec>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x1ea>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x1e6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <HAL_GPIO_Init+0x2f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e00a      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f76:	2300      	movs	r3, #0
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	@ (8002060 <HAL_GPIO_Init+0x2e0>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	035b      	lsls	r3, r3, #13
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	039b      	lsls	r3, r3, #14
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	4013      	ands	r3, r2
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43da      	mvns	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	4013      	ands	r3, r2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_GPIO_Init+0x2f8>)
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	40da      	lsrs	r2, r3
 800204c:	1e13      	subs	r3, r2, #0
 800204e:	d000      	beq.n	8002052 <HAL_GPIO_Init+0x2d2>
 8002050:	e6a2      	b.n	8001d98 <HAL_GPIO_Init+0x18>
  }
}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b006      	add	sp, #24
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40010000 	.word	0x40010000
 8002064:	50000400 	.word	0x50000400
 8002068:	50000800 	.word	0x50000800
 800206c:	50000c00 	.word	0x50000c00
 8002070:	50001000 	.word	0x50001000
 8002074:	50001c00 	.word	0x50001c00
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	0008      	movs	r0, r1
 8002086:	0011      	movs	r1, r2
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	1c02      	adds	r2, r0, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	1c7b      	adds	r3, r7, #1
 8002090:	1c0a      	adds	r2, r1, #0
 8002092:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	1c7b      	adds	r3, r7, #1
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209c:	1cbb      	adds	r3, r7, #2
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80020a6:	1cbb      	adds	r3, r7, #2
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08f      	b.n	80021ea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2241      	movs	r2, #65	@ 0x41
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7fe faa3 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2241      	movs	r2, #65	@ 0x41
 80020ea:	2124      	movs	r1, #36	@ 0x24
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	438a      	bics	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	493b      	ldr	r1, [pc, #236]	@ (80021f4 <HAL_I2C_Init+0x13c>)
 8002108:	400a      	ands	r2, r1
 800210a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4938      	ldr	r1, [pc, #224]	@ (80021f8 <HAL_I2C_Init+0x140>)
 8002118:	400a      	ands	r2, r1
 800211a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2180      	movs	r1, #128	@ 0x80
 800212e:	0209      	lsls	r1, r1, #8
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e007      	b.n	8002146 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2184      	movs	r1, #132	@ 0x84
 8002140:	0209      	lsls	r1, r1, #8
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d109      	bne.n	8002162 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0109      	lsls	r1, r1, #4
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	e007      	b.n	8002172 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4923      	ldr	r1, [pc, #140]	@ (80021fc <HAL_I2C_Init+0x144>)
 800216e:	400a      	ands	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4920      	ldr	r1, [pc, #128]	@ (8002200 <HAL_I2C_Init+0x148>)
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	491a      	ldr	r1, [pc, #104]	@ (80021f8 <HAL_I2C_Init+0x140>)
 800218e:	400a      	ands	r2, r1
 8002190:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	431a      	orrs	r2, r3
 800219c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69d9      	ldr	r1, [r3, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2241      	movs	r2, #65	@ 0x41
 80021d6:	2120      	movs	r1, #32
 80021d8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2242      	movs	r2, #66	@ 0x42
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	f0ffffff 	.word	0xf0ffffff
 80021f8:	ffff7fff 	.word	0xffff7fff
 80021fc:	fffff7ff 	.word	0xfffff7ff
 8002200:	02008000 	.word	0x02008000

08002204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2241      	movs	r2, #65	@ 0x41
 8002212:	5c9b      	ldrb	r3, [r3, r2]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	d138      	bne.n	800228c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2240      	movs	r2, #64	@ 0x40
 800221e:	5c9b      	ldrb	r3, [r3, r2]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002224:	2302      	movs	r3, #2
 8002226:	e032      	b.n	800228e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2240      	movs	r2, #64	@ 0x40
 800222c:	2101      	movs	r1, #1
 800222e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2241      	movs	r2, #65	@ 0x41
 8002234:	2124      	movs	r1, #36	@ 0x24
 8002236:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	438a      	bics	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4911      	ldr	r1, [pc, #68]	@ (8002298 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002254:	400a      	ands	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2241      	movs	r2, #65	@ 0x41
 800227c:	2120      	movs	r1, #32
 800227e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2240      	movs	r2, #64	@ 0x40
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	ffffefff 	.word	0xffffefff

0800229c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2241      	movs	r2, #65	@ 0x41
 80022aa:	5c9b      	ldrb	r3, [r3, r2]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d139      	bne.n	8002326 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2240      	movs	r2, #64	@ 0x40
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022bc:	2302      	movs	r3, #2
 80022be:	e033      	b.n	8002328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2241      	movs	r2, #65	@ 0x41
 80022cc:	2124      	movs	r1, #36	@ 0x24
 80022ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2241      	movs	r2, #65	@ 0x41
 8002316:	2120      	movs	r1, #32
 8002318:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2240      	movs	r2, #64	@ 0x40
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	fffff0ff 	.word	0xfffff0ff

08002334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b5b0      	push	{r4, r5, r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 fbbf 	bl	8002ac6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002348:	4bc9      	ldr	r3, [pc, #804]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	220c      	movs	r2, #12
 800234e:	4013      	ands	r3, r2
 8002350:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002352:	4bc7      	ldr	r3, [pc, #796]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d100      	bne.n	800236a <HAL_RCC_OscConfig+0x36>
 8002368:	e07e      	b.n	8002468 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d007      	beq.n	8002380 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d112      	bne.n	800239c <HAL_RCC_OscConfig+0x68>
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	429a      	cmp	r2, r3
 800237e:	d10d      	bne.n	800239c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4bbb      	ldr	r3, [pc, #748]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d100      	bne.n	800238e <HAL_RCC_OscConfig+0x5a>
 800238c:	e06b      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d167      	bne.n	8002466 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f000 fb95 	bl	8002ac6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	025b      	lsls	r3, r3, #9
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x84>
 80023a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	0249      	lsls	r1, r1, #9
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e027      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	23a0      	movs	r3, #160	@ 0xa0
 80023be:	02db      	lsls	r3, r3, #11
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d10e      	bne.n	80023e2 <HAL_RCC_OscConfig+0xae>
 80023c4:	4baa      	ldr	r3, [pc, #680]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4ba9      	ldr	r3, [pc, #676]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	02c9      	lsls	r1, r1, #11
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e012      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023e2:	4ba3      	ldr	r3, [pc, #652]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023e8:	49a2      	ldr	r1, [pc, #648]	@ (8002674 <HAL_RCC_OscConfig+0x340>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	025b      	lsls	r3, r3, #9
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b9b      	ldr	r3, [pc, #620]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002402:	499d      	ldr	r1, [pc, #628]	@ (8002678 <HAL_RCC_OscConfig+0x344>)
 8002404:	400a      	ands	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f95e 	bl	80016d0 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241a:	f7ff f959 	bl	80016d0 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	@ 0x64
 8002426:	d902      	bls.n	800242e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	f000 fb4c 	bl	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	4b90      	ldr	r3, [pc, #576]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	4013      	ands	r3, r2
 8002438:	d0ef      	beq.n	800241a <HAL_RCC_OscConfig+0xe6>
 800243a:	e015      	b.n	8002468 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff f948 	bl	80016d0 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002446:	f7ff f943 	bl	80016d0 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	@ 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e336      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002458:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	4013      	ands	r3, r2
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x112>
 8002464:	e000      	b.n	8002468 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002466:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_RCC_OscConfig+0x140>
 8002472:	e099      	b.n	80025a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	2220      	movs	r2, #32
 800247e:	4013      	ands	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002482:	4b7b      	ldr	r3, [pc, #492]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b7a      	ldr	r3, [pc, #488]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002488:	2120      	movs	r1, #32
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	2220      	movs	r2, #32
 8002492:	4393      	bics	r3, r2
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d13e      	bne.n	8002520 <HAL_RCC_OscConfig+0x1ec>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d13b      	bne.n	8002520 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80024a8:	4b71      	ldr	r3, [pc, #452]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2204      	movs	r2, #4
 80024ae:	4013      	ands	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_RCC_OscConfig+0x188>
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e304      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	@ (800267c <HAL_RCC_OscConfig+0x348>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	021a      	lsls	r2, r3, #8
 80024cc:	4b68      	ldr	r3, [pc, #416]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2209      	movs	r2, #9
 80024d8:	4393      	bics	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e4:	f000 fc42 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 80024e8:	0001      	movs	r1, r0
 80024ea:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	220f      	movs	r2, #15
 80024f2:	4013      	ands	r3, r2
 80024f4:	4a62      	ldr	r2, [pc, #392]	@ (8002680 <HAL_RCC_OscConfig+0x34c>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	000a      	movs	r2, r1
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	4b61      	ldr	r3, [pc, #388]	@ (8002684 <HAL_RCC_OscConfig+0x350>)
 80024fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002500:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <HAL_RCC_OscConfig+0x354>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2513      	movs	r5, #19
 8002506:	197c      	adds	r4, r7, r5
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff f89b 	bl	8001644 <HAL_InitTick>
 800250e:	0003      	movs	r3, r0
 8002510:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002512:	197b      	adds	r3, r7, r5
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d046      	beq.n	80025a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800251a:	197b      	adds	r3, r7, r5
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	e2d2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d027      	beq.n	8002576 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002526:	4b52      	ldr	r3, [pc, #328]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2209      	movs	r2, #9
 800252c:	4393      	bics	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	4b4f      	ldr	r3, [pc, #316]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f8ca 	bl	80016d0 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff f8c5 	bl	80016d0 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e2b8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	4b46      	ldr	r3, [pc, #280]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d0f1      	beq.n	8002542 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a46      	ldr	r2, [pc, #280]	@ (800267c <HAL_RCC_OscConfig+0x348>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	e018      	b.n	80025a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b3d      	ldr	r3, [pc, #244]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 800257c:	2101      	movs	r1, #1
 800257e:	438a      	bics	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff f8a5 	bl	80016d0 <HAL_GetTick>
 8002586:	0003      	movs	r3, r0
 8002588:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff f8a0 	bl	80016d0 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e293      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2204      	movs	r2, #4
 80025a4:	4013      	ands	r3, r2
 80025a6:	d1f1      	bne.n	800258c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	4013      	ands	r3, r2
 80025b0:	d100      	bne.n	80025b4 <HAL_RCC_OscConfig+0x280>
 80025b2:	e0a2      	b.n	80026fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d140      	bne.n	800263c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x29e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e279      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <HAL_RCC_OscConfig+0x358>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e0:	4b23      	ldr	r3, [pc, #140]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e6:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	0a19      	lsrs	r1, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	061a      	lsls	r2, r3, #24
 80025f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	3301      	adds	r3, #1
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0212      	lsls	r2, r2, #8
 8002606:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	210f      	movs	r1, #15
 8002610:	400b      	ands	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x34c>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002618:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_RCC_OscConfig+0x350>)
 800261a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800261c:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCC_OscConfig+0x354>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2513      	movs	r5, #19
 8002622:	197c      	adds	r4, r7, r5
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff f80d 	bl	8001644 <HAL_InitTick>
 800262a:	0003      	movs	r3, r0
 800262c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800262e:	197b      	adds	r3, r7, r5
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d061      	beq.n	80026fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002636:	197b      	adds	r3, r7, r5
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	e244      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d040      	beq.n	80026c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_OscConfig+0x33c>)
 800264a:	2180      	movs	r1, #128	@ 0x80
 800264c:	0049      	lsls	r1, r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff f83d 	bl	80016d0 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800265a:	e019      	b.n	8002690 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265c:	f7ff f838 	bl	80016d0 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d912      	bls.n	8002690 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e22b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	40021000 	.word	0x40021000
 8002674:	fffeffff 	.word	0xfffeffff
 8002678:	fffbffff 	.word	0xfffbffff
 800267c:	ffffe0ff 	.word	0xffffe0ff
 8002680:	08006db8 	.word	0x08006db8
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004
 800268c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002690:	4bca      	ldr	r3, [pc, #808]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4013      	ands	r3, r2
 800269a:	d0df      	beq.n	800265c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4bc7      	ldr	r3, [pc, #796]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4ac7      	ldr	r2, [pc, #796]	@ (80029c0 <HAL_RCC_OscConfig+0x68c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026aa:	4bc4      	ldr	r3, [pc, #784]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	4bc2      	ldr	r3, [pc, #776]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	0a19      	lsrs	r1, r3, #8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	061a      	lsls	r2, r3, #24
 80026be:	4bbf      	ldr	r3, [pc, #764]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	e019      	b.n	80026fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026c6:	4bbd      	ldr	r3, [pc, #756]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4bbc      	ldr	r3, [pc, #752]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026cc:	49bd      	ldr	r1, [pc, #756]	@ (80029c4 <HAL_RCC_OscConfig+0x690>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fffd 	bl	80016d0 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7fe fff8 	bl	80016d0 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1eb      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ee:	4bb3      	ldr	r3, [pc, #716]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2208      	movs	r2, #8
 8002700:	4013      	ands	r3, r2
 8002702:	d036      	beq.n	8002772 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d019      	beq.n	8002740 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270c:	4bab      	ldr	r3, [pc, #684]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800270e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002710:	4baa      	ldr	r3, [pc, #680]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002712:	2101      	movs	r1, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7fe ffda 	bl	80016d0 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002722:	f7fe ffd5 	bl	80016d0 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1c8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002734:	4ba1      	ldr	r3, [pc, #644]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	2202      	movs	r2, #2
 800273a:	4013      	ands	r3, r2
 800273c:	d0f1      	beq.n	8002722 <HAL_RCC_OscConfig+0x3ee>
 800273e:	e018      	b.n	8002772 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b9e      	ldr	r3, [pc, #632]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002744:	4b9d      	ldr	r3, [pc, #628]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002746:	2101      	movs	r1, #1
 8002748:	438a      	bics	r2, r1
 800274a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe ffc0 	bl	80016d0 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe ffbb 	bl	80016d0 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1ae      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002768:	4b94      	ldr	r3, [pc, #592]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800276a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d1f1      	bne.n	8002756 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2204      	movs	r2, #4
 8002778:	4013      	ands	r3, r2
 800277a:	d100      	bne.n	800277e <HAL_RCC_OscConfig+0x44a>
 800277c:	e0ae      	b.n	80028dc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2023      	movs	r0, #35	@ 0x23
 8002780:	183b      	adds	r3, r7, r0
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8d      	ldr	r3, [pc, #564]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	4013      	ands	r3, r2
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b8a      	ldr	r3, [pc, #552]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002796:	4b89      	ldr	r3, [pc, #548]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	0549      	lsls	r1, r1, #21
 800279c:	430a      	orrs	r2, r1
 800279e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80027a0:	183b      	adds	r3, r7, r0
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x694>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	d11a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b85      	ldr	r3, [pc, #532]	@ (80029c8 <HAL_RCC_OscConfig+0x694>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b84      	ldr	r3, [pc, #528]	@ (80029c8 <HAL_RCC_OscConfig+0x694>)
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	0049      	lsls	r1, r1, #1
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7fe ff86 	bl	80016d0 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fe ff81 	bl	80016d0 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	@ 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e174      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b7a      	ldr	r3, [pc, #488]	@ (80029c8 <HAL_RCC_OscConfig+0x694>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4d0>
 80027f4:	4b71      	ldr	r3, [pc, #452]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80027f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027f8:	4b70      	ldr	r3, [pc, #448]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	0049      	lsls	r1, r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	651a      	str	r2, [r3, #80]	@ 0x50
 8002802:	e031      	b.n	8002868 <HAL_RCC_OscConfig+0x534>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x4f2>
 800280c:	4b6b      	ldr	r3, [pc, #428]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800280e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002810:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002812:	496c      	ldr	r1, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x690>)
 8002814:	400a      	ands	r2, r1
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50
 8002818:	4b68      	ldr	r3, [pc, #416]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800281a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800281c:	4b67      	ldr	r3, [pc, #412]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800281e:	496b      	ldr	r1, [pc, #428]	@ (80029cc <HAL_RCC_OscConfig+0x698>)
 8002820:	400a      	ands	r2, r1
 8002822:	651a      	str	r2, [r3, #80]	@ 0x50
 8002824:	e020      	b.n	8002868 <HAL_RCC_OscConfig+0x534>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	23a0      	movs	r3, #160	@ 0xa0
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	429a      	cmp	r2, r3
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0x51c>
 8002832:	4b62      	ldr	r3, [pc, #392]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002836:	4b61      	ldr	r3, [pc, #388]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002838:	2180      	movs	r1, #128	@ 0x80
 800283a:	00c9      	lsls	r1, r1, #3
 800283c:	430a      	orrs	r2, r1
 800283e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002840:	4b5e      	ldr	r3, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002844:	4b5d      	ldr	r3, [pc, #372]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	0049      	lsls	r1, r1, #1
 800284a:	430a      	orrs	r2, r1
 800284c:	651a      	str	r2, [r3, #80]	@ 0x50
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0x534>
 8002850:	4b5a      	ldr	r3, [pc, #360]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002852:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002856:	495b      	ldr	r1, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x690>)
 8002858:	400a      	ands	r2, r1
 800285a:	651a      	str	r2, [r3, #80]	@ 0x50
 800285c:	4b57      	ldr	r3, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800285e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002860:	4b56      	ldr	r3, [pc, #344]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002862:	495a      	ldr	r1, [pc, #360]	@ (80029cc <HAL_RCC_OscConfig+0x698>)
 8002864:	400a      	ands	r2, r1
 8002866:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe ff2e 	bl	80016d0 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002878:	e009      	b.n	800288e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe ff29 	bl	80016d0 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_RCC_OscConfig+0x69c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e11b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800288e:	4b4b      	ldr	r3, [pc, #300]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d0ef      	beq.n	800287a <HAL_RCC_OscConfig+0x546>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fe ff18 	bl	80016d0 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a4:	e009      	b.n	80028ba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe ff13 	bl	80016d0 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	4a47      	ldr	r2, [pc, #284]	@ (80029d0 <HAL_RCC_OscConfig+0x69c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e105      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ba:	4b40      	ldr	r3, [pc, #256]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c6:	2323      	movs	r3, #35	@ 0x23
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b3a      	ldr	r3, [pc, #232]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028d6:	493f      	ldr	r1, [pc, #252]	@ (80029d4 <HAL_RCC_OscConfig+0x6a0>)
 80028d8:	400a      	ands	r2, r1
 80028da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2220      	movs	r2, #32
 80028e2:	4013      	ands	r3, r2
 80028e4:	d049      	beq.n	800297a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d026      	beq.n	800293c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028ee:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	4b32      	ldr	r3, [pc, #200]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	4b30      	ldr	r3, [pc, #192]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 80028fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fe:	4b2f      	ldr	r3, [pc, #188]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
 8002906:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x6a4>)
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	4b33      	ldr	r3, [pc, #204]	@ (80029d8 <HAL_RCC_OscConfig+0x6a4>)
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	0189      	lsls	r1, r1, #6
 8002910:	430a      	orrs	r2, r1
 8002912:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe fedc 	bl	80016d0 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291e:	f7fe fed7 	bl	80016d0 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0ca      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2202      	movs	r2, #2
 8002936:	4013      	ands	r3, r2
 8002938:	d0f1      	beq.n	800291e <HAL_RCC_OscConfig+0x5ea>
 800293a:	e01e      	b.n	800297a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800293c:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002942:	2101      	movs	r1, #1
 8002944:	438a      	bics	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCC_OscConfig+0x6a4>)
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <HAL_RCC_OscConfig+0x6a4>)
 800294e:	4923      	ldr	r1, [pc, #140]	@ (80029dc <HAL_RCC_OscConfig+0x6a8>)
 8002950:	400a      	ands	r2, r1
 8002952:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe febc 	bl	80016d0 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fe feb7 	bl	80016d0 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0aa      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2202      	movs	r2, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d1f1      	bne.n	800295e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d100      	bne.n	8002984 <HAL_RCC_OscConfig+0x650>
 8002982:	e09f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d100      	bne.n	800298c <HAL_RCC_OscConfig+0x658>
 800298a:	e078      	b.n	8002a7e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d159      	bne.n	8002a48 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_RCC_OscConfig+0x688>)
 800299a:	4911      	ldr	r1, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x6ac>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fe96 	bl	80016d0 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fe91 	bl	80016d0 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d915      	bls.n	80029e4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e084      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	ffff1fff 	.word	0xffff1fff
 80029c4:	fffffeff 	.word	0xfffffeff
 80029c8:	40007000 	.word	0x40007000
 80029cc:	fffffbff 	.word	0xfffffbff
 80029d0:	00001388 	.word	0x00001388
 80029d4:	efffffff 	.word	0xefffffff
 80029d8:	40010000 	.word	0x40010000
 80029dc:	ffffdfff 	.word	0xffffdfff
 80029e0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029e4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	049b      	lsls	r3, r3, #18
 80029ec:	4013      	ands	r3, r2
 80029ee:	d1dc      	bne.n	80029aa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f0:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <HAL_RCC_OscConfig+0x7a0>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a16:	2180      	movs	r1, #128	@ 0x80
 8002a18:	0449      	lsls	r1, r1, #17
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fe57 	bl	80016d0 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fe52 	bl	80016d0 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e045      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	049b      	lsls	r3, r3, #18
 8002a42:	4013      	ands	r3, r2
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x6f4>
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a4e:	4922      	ldr	r1, [pc, #136]	@ (8002ad8 <HAL_RCC_OscConfig+0x7a4>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fe3c 	bl	80016d0 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fe37 	bl	80016d0 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e02a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a70:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	049b      	lsls	r3, r3, #18
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x72a>
 8002a7c:	e022      	b.n	8002ac4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_OscConfig+0x79c>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	025b      	lsls	r3, r3, #9
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	23f0      	movs	r3, #240	@ 0xf0
 8002aa4:	039b      	lsls	r3, r3, #14
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	23c0      	movs	r3, #192	@ 0xc0
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b00a      	add	sp, #40	@ 0x28
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	ff02ffff 	.word	0xff02ffff
 8002ad8:	feffffff 	.word	0xfeffffff

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e128      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b96      	ldr	r3, [pc, #600]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d91e      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b93      	ldr	r3, [pc, #588]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	4b90      	ldr	r3, [pc, #576]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fdde 	bl	80016d0 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b18:	e009      	b.n	8002b2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1a:	f7fe fdd9 	bl	80016d0 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	4a8a      	ldr	r2, [pc, #552]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e109      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b87      	ldr	r3, [pc, #540]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b46:	4b83      	ldr	r3, [pc, #524]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	22f0      	movs	r2, #240	@ 0xf0
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b7f      	ldr	r3, [pc, #508]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002b56:	430a      	orrs	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d100      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
 8002b64:	e089      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6e:	4b79      	ldr	r3, [pc, #484]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	4013      	ands	r3, r2
 8002b78:	d120      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e1      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b86:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	049b      	lsls	r3, r3, #18
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d114      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0d5      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0ca      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bac:	4b69      	ldr	r3, [pc, #420]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0c2      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbc:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4b62      	ldr	r3, [pc, #392]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fd7e 	bl	80016d0 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be0:	e009      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7fe fd75 	bl	80016d0 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0a5      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf6:	4b57      	ldr	r3, [pc, #348]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d1ef      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x106>
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7fe fd5f 	bl	80016d0 <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a4d      	ldr	r2, [pc, #308]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e08f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c22:	4b4c      	ldr	r3, [pc, #304]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	220c      	movs	r2, #12
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d1ef      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x132>
 8002c2e:	e024      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d11b      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3a:	f7fe fd49 	bl	80016d0 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	4a42      	ldr	r2, [pc, #264]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e079      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	220c      	movs	r2, #12
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d1ef      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x15e>
 8002c5a:	e00e      	b.n	8002c7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fd38 	bl	80016d0 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	4a3a      	ldr	r2, [pc, #232]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e068      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c70:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	220c      	movs	r2, #12
 8002c76:	4013      	ands	r3, r2
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d21e      	bcs.n	8002cc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe fd19 	bl	80016d0 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	e009      	b.n	8002cb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fd14 	bl	80016d0 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_RCC_ClockConfig+0x274>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e044      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <HAL_RCC_ClockConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a20      	ldr	r2, [pc, #128]	@ (8002d58 <HAL_RCC_ClockConfig+0x27c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	4013      	ands	r3, r2
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d5c <HAL_RCC_ClockConfig+0x280>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00da      	lsls	r2, r3, #3
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d04:	f000 f832 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d08:	0001      	movs	r1, r0
 8002d0a:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_RCC_ClockConfig+0x278>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	220f      	movs	r2, #15
 8002d12:	4013      	ands	r3, r2
 8002d14:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <HAL_RCC_ClockConfig+0x284>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	000a      	movs	r2, r1
 8002d1a:	40da      	lsrs	r2, r3
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_ClockConfig+0x288>)
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <HAL_RCC_ClockConfig+0x28c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	250b      	movs	r5, #11
 8002d26:	197c      	adds	r4, r7, r5
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe fc8b 	bl	8001644 <HAL_InitTick>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d32:	197b      	adds	r3, r7, r5
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	00001388 	.word	0x00001388
 8002d54:	40021000 	.word	0x40021000
 8002d58:	fffff8ff 	.word	0xfffff8ff
 8002d5c:	ffffc7ff 	.word	0xffffc7ff
 8002d60:	08006db8 	.word	0x08006db8
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000004 	.word	0x20000004

08002d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d72:	4b3c      	ldr	r3, [pc, #240]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d013      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3e>
 8002d82:	d85c      	bhi.n	8002e3e <HAL_RCC_GetSysClockFreq+0xd2>
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d002      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x22>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x38>
 8002d8c:	e057      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d8e:	4b35      	ldr	r3, [pc, #212]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	4013      	ands	r3, r2
 8002d96:	d002      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d9a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002d9c:	e05d      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002d9e:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x100>)
 8002da0:	613b      	str	r3, [r7, #16]
      break;
 8002da2:	e05a      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4b32      	ldr	r3, [pc, #200]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002da6:	613b      	str	r3, [r7, #16]
      break;
 8002da8:	e057      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	0c9b      	lsrs	r3, r3, #18
 8002dae:	220f      	movs	r2, #15
 8002db0:	4013      	ands	r3, r2
 8002db2:	4a30      	ldr	r2, [pc, #192]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0d9b      	lsrs	r3, r3, #22
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc4:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	025b      	lsls	r3, r3, #9
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00f      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	000a      	movs	r2, r1
 8002dd4:	0152      	lsls	r2, r2, #5
 8002dd6:	1a52      	subs	r2, r2, r1
 8002dd8:	0193      	lsls	r3, r2, #6
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	185b      	adds	r3, r3, r1
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fd f9a1 	bl	800012c <__udivsi3>
 8002dea:	0003      	movs	r3, r0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e023      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002df0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00f      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	0152      	lsls	r2, r2, #5
 8002e00:	1a52      	subs	r2, r2, r1
 8002e02:	0193      	lsls	r3, r2, #6
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	185b      	adds	r3, r3, r1
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fd f98c 	bl	800012c <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	000a      	movs	r2, r1
 8002e1e:	0152      	lsls	r2, r2, #5
 8002e20:	1a52      	subs	r2, r2, r1
 8002e22:	0193      	lsls	r3, r2, #6
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	185b      	adds	r3, r3, r1
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f97c 	bl	800012c <__udivsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	e00d      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	2207      	movs	r2, #7
 8002e46:	4013      	ands	r3, r2
 8002e48:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	2280      	movs	r2, #128	@ 0x80
 8002e50:	0212      	lsls	r2, r2, #8
 8002e52:	409a      	lsls	r2, r3
 8002e54:	0013      	movs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
      break;
 8002e58:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e5a:	693b      	ldr	r3, [r7, #16]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	003d0900 	.word	0x003d0900
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	007a1200 	.word	0x007a1200
 8002e74:	08006dd0 	.word	0x08006dd0

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	@ (8002e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff2 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e94:	0001      	movs	r1, r0
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	40d9      	lsrs	r1, r3
 8002ea6:	000b      	movs	r3, r1
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	08006dc8 	.word	0x08006dc8

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	0001      	movs	r1, r0
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0adb      	lsrs	r3, r3, #11
 8002ec8:	2207      	movs	r2, #7
 8002eca:	4013      	ands	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	40d9      	lsrs	r1, r3
 8002ed2:	000b      	movs	r3, r1
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08006dc8 	.word	0x08006dc8

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002eec:	2317      	movs	r3, #23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	4013      	ands	r3, r2
 8002efc:	d106      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	d100      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002f0a:	e104      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0c:	4bb9      	ldr	r3, [pc, #740]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	055b      	lsls	r3, r3, #21
 8002f14:	4013      	ands	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f18:	4bb6      	ldr	r3, [pc, #728]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f1c:	4bb5      	ldr	r3, [pc, #724]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f1e:	2180      	movs	r1, #128	@ 0x80
 8002f20:	0549      	lsls	r1, r1, #21
 8002f22:	430a      	orrs	r2, r1
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002f26:	2317      	movs	r3, #23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4bb2      	ldr	r3, [pc, #712]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4baf      	ldr	r3, [pc, #700]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4bae      	ldr	r3, [pc, #696]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	0049      	lsls	r1, r1, #1
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f48:	f7fe fbc2 	bl	80016d0 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fbbd 	bl	80016d0 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e143      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4ba4      	ldr	r3, [pc, #656]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f70:	4ba0      	ldr	r3, [pc, #640]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	23c0      	movs	r3, #192	@ 0xc0
 8002f76:	039b      	lsls	r3, r3, #14
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	23c0      	movs	r3, #192	@ 0xc0
 8002f82:	039b      	lsls	r3, r3, #14
 8002f84:	4013      	ands	r3, r2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	23c0      	movs	r3, #192	@ 0xc0
 8002f92:	039b      	lsls	r3, r3, #14
 8002f94:	4013      	ands	r3, r2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	23c0      	movs	r3, #192	@ 0xc0
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	23c0      	movs	r3, #192	@ 0xc0
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fae:	4b91      	ldr	r3, [pc, #580]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e113      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002fc4:	4b8b      	ldr	r3, [pc, #556]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fc8:	23c0      	movs	r3, #192	@ 0xc0
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d049      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	23c0      	movs	r3, #192	@ 0xc0
 8002fdc:	029b      	lsls	r3, r3, #10
 8002fde:	4013      	ands	r3, r2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d004      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2220      	movs	r2, #32
 8002fec:	4013      	ands	r3, r2
 8002fee:	d10d      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	23c0      	movs	r3, #192	@ 0xc0
 8002ff6:	029b      	lsls	r3, r3, #10
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d034      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	4013      	ands	r3, r2
 800300a:	d02e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800300c:	4b79      	ldr	r3, [pc, #484]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800300e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003010:	4a7a      	ldr	r2, [pc, #488]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	4b77      	ldr	r3, [pc, #476]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800301a:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800301c:	2180      	movs	r1, #128	@ 0x80
 800301e:	0309      	lsls	r1, r1, #12
 8003020:	430a      	orrs	r2, r1
 8003022:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003024:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003028:	4b72      	ldr	r3, [pc, #456]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800302a:	4975      	ldr	r1, [pc, #468]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800302c:	400a      	ands	r2, r1
 800302e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003030:	4b70      	ldr	r3, [pc, #448]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d014      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fb46 	bl	80016d0 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003048:	e009      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fb41 	bl	80016d0 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4a6b      	ldr	r2, [pc, #428]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0c6      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800305e:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d0ef      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	@ 0x80
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	4013      	ands	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	23c0      	movs	r3, #192	@ 0xc0
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	401a      	ands	r2, r3
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	429a      	cmp	r2, r3
 8003086:	d10c      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003088:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5e      	ldr	r2, [pc, #376]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	23c0      	movs	r3, #192	@ 0xc0
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	401a      	ands	r2, r3
 800309c:	4b55      	ldr	r3, [pc, #340]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	23c0      	movs	r3, #192	@ 0xc0
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	401a      	ands	r2, r3
 80030b0:	4b50      	ldr	r3, [pc, #320]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	4013      	ands	r3, r2
 80030be:	d01f      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	23c0      	movs	r3, #192	@ 0xc0
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	401a      	ands	r2, r3
 80030ca:	23c0      	movs	r3, #192	@ 0xc0
 80030cc:	029b      	lsls	r3, r3, #10
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d10c      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x208>
 80030d2:	4b48      	ldr	r3, [pc, #288]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	23c0      	movs	r3, #192	@ 0xc0
 80030e2:	039b      	lsls	r3, r3, #14
 80030e4:	401a      	ands	r2, r3
 80030e6:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030ee:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	23c0      	movs	r3, #192	@ 0xc0
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	401a      	ands	r2, r3
 80030fa:	4b3e      	ldr	r3, [pc, #248]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003100:	2317      	movs	r3, #23
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003110:	493e      	ldr	r1, [pc, #248]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003112:	400a      	ands	r2, r1
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003120:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003124:	2203      	movs	r2, #3
 8003126:	4393      	bics	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003130:	430a      	orrs	r2, r1
 8003132:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800313e:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	220c      	movs	r2, #12
 8003144:	4393      	bics	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800314e:	430a      	orrs	r2, r1
 8003150:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	4a2b      	ldr	r2, [pc, #172]	@ (8003210 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800316c:	430a      	orrs	r2, r1
 800316e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	4013      	ands	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	4a25      	ldr	r2, [pc, #148]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800318a:	430a      	orrs	r2, r1
 800318c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319a:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	4013      	ands	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b8:	4b0e      	ldr	r3, [pc, #56]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2280      	movs	r2, #128	@ 0x80
 80031d2:	4013      	ands	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031d6:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4a10      	ldr	r2, [pc, #64]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b006      	add	sp, #24
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
 80031fc:	fffcffff 	.word	0xfffcffff
 8003200:	fff7ffff 	.word	0xfff7ffff
 8003204:	00001388 	.word	0x00001388
 8003208:	ffcfffff 	.word	0xffcfffff
 800320c:	efffffff 	.word	0xefffffff
 8003210:	fffff3ff 	.word	0xfffff3ff
 8003214:	ffffcfff 	.word	0xffffcfff
 8003218:	fbffffff 	.word	0xfbffffff
 800321c:	fff3ffff 	.word	0xfff3ffff

08003220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e044      	b.n	80032bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2278      	movs	r2, #120	@ 0x78
 800323e:	2100      	movs	r1, #0
 8003240:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f7fd fcc5 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2224      	movs	r2, #36	@ 0x24
 800324e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 ffb4 	bl	80041d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fd12 	bl	8003c9c <UART_SetConfig>
 8003278:	0003      	movs	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e01c      	b.n	80032bc <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	490d      	ldr	r1, [pc, #52]	@ (80032c4 <HAL_UART_Init+0xa4>)
 800328e:	400a      	ands	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	212a      	movs	r1, #42	@ 0x2a
 800329e:	438a      	bics	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f001 f843 	bl	8004340 <UART_CheckIdleState>
 80032ba:	0003      	movs	r3, r0
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	ffffb7ff 	.word	0xffffb7ff

080032c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	1dbb      	adds	r3, r7, #6
 80032d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d000      	beq.n	80032e0 <HAL_UART_Transmit_DMA+0x18>
 80032de:	e077      	b.n	80033d0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_UART_Transmit_DMA+0x26>
 80032e6:	1dbb      	adds	r3, r7, #6
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d109      	bne.n	8003312 <HAL_UART_Transmit_DMA+0x4a>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d001      	beq.n	8003312 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e05f      	b.n	80033d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1dba      	adds	r2, r7, #6
 800331c:	2150      	movs	r1, #80	@ 0x50
 800331e:	8812      	ldrh	r2, [r2, #0]
 8003320:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1dba      	adds	r2, r7, #6
 8003326:	2152      	movs	r1, #82	@ 0x52
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2284      	movs	r2, #132	@ 0x84
 8003330:	2100      	movs	r1, #0
 8003332:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2221      	movs	r2, #33	@ 0x21
 8003338:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	2b00      	cmp	r3, #0
 8003340:	d027      	beq.n	8003392 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <HAL_UART_Transmit_DMA+0x114>)
 8003348:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	4a24      	ldr	r2, [pc, #144]	@ (80033e0 <HAL_UART_Transmit_DMA+0x118>)
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <HAL_UART_Transmit_DMA+0x11c>)
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	2200      	movs	r2, #0
 8003360:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	0019      	movs	r1, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3328      	adds	r3, #40	@ 0x28
 8003372:	001a      	movs	r2, r3
 8003374:	1dbb      	adds	r3, r7, #6
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f7fe fb2e 	bl	80019d8 <HAL_DMA_Start_IT>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d008      	beq.n	8003392 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2284      	movs	r2, #132	@ 0x84
 8003384:	2110      	movs	r1, #16
 8003386:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e01f      	b.n	80033d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339a:	f3ef 8310 	mrs	r3, PRIMASK
 800339e:	613b      	str	r3, [r7, #16]
  return(result);
 80033a0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b008      	add	sp, #32
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	080047c1 	.word	0x080047c1
 80033e0:	08004859 	.word	0x08004859
 80033e4:	08004a5f 	.word	0x08004a5f

080033e8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	617b      	str	r3, [r7, #20]
  return(result);
 80033f6:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	21c0      	movs	r1, #192	@ 0xc0
 8003412:	438a      	bics	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	4013      	ands	r3, r2
 800342c:	2b80      	cmp	r3, #128	@ 0x80
 800342e:	d135      	bne.n	800349c <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003430:	f3ef 8310 	mrs	r3, PRIMASK
 8003434:	60bb      	str	r3, [r7, #8]
  return(result);
 8003436:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	2301      	movs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2180      	movs	r1, #128	@ 0x80
 8003452:	438a      	bics	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f383 8810 	msr	PRIMASK, r3
}
 8003460:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	2b00      	cmp	r3, #0
 8003468:	d018      	beq.n	800349c <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	2200      	movs	r2, #0
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	0018      	movs	r0, r3
 8003478:	f7fe fb14 	bl	8001aa4 <HAL_DMA_Abort>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d00d      	beq.n	800349c <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	0018      	movs	r0, r3
 8003486:	f7fe fc42 	bl	8001d0e <HAL_DMA_GetError>
 800348a:	0003      	movs	r3, r0
 800348c:	2b20      	cmp	r3, #32
 800348e:	d105      	bne.n	800349c <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2284      	movs	r2, #132	@ 0x84
 8003494:	2110      	movs	r1, #16
 8003496:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e007      	b.n	80034ac <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2252      	movs	r2, #82	@ 0x52
 80034a0:	2100      	movs	r1, #0
 80034a2:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b00a      	add	sp, #40	@ 0x28
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b092      	sub	sp, #72	@ 0x48
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034bc:	f3ef 8310 	mrs	r3, PRIMASK
 80034c0:	623b      	str	r3, [r7, #32]
  return(result);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	494b      	ldr	r1, [pc, #300]	@ (800360c <HAL_UART_AbortReceive+0x158>)
 80034de:	400a      	ands	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80034f8:	2301      	movs	r3, #1
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003516:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003524:	2b01      	cmp	r3, #1
 8003526:	d118      	bne.n	800355a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	617b      	str	r3, [r7, #20]
  return(result);
 800352e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003532:	2301      	movs	r3, #1
 8003534:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2110      	movs	r1, #16
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2240      	movs	r2, #64	@ 0x40
 8003562:	4013      	ands	r3, r2
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d135      	bne.n	80035d4 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003568:	f3ef 8310 	mrs	r3, PRIMASK
 800356c:	60bb      	str	r3, [r7, #8]
  return(result);
 800356e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003572:	2301      	movs	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	@ 0x40
 800358a:	438a      	bics	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f383 8810 	msr	PRIMASK, r3
}
 8003598:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	2200      	movs	r2, #0
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fe fa78 	bl	8001aa4 <HAL_DMA_Abort>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d00d      	beq.n	80035d4 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fe fba6 	bl	8001d0e <HAL_DMA_GetError>
 80035c2:	0003      	movs	r3, r0
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d105      	bne.n	80035d4 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2284      	movs	r2, #132	@ 0x84
 80035cc:	2110      	movs	r1, #16
 80035ce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e017      	b.n	8003604 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	225a      	movs	r2, #90	@ 0x5a
 80035d8:	2100      	movs	r1, #0
 80035da:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	220f      	movs	r2, #15
 80035e2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2108      	movs	r1, #8
 80035f0:	430a      	orrs	r2, r1
 80035f2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	@ 0x80
 80035f8:	2120      	movs	r1, #32
 80035fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b012      	add	sp, #72	@ 0x48
 800360a:	bd80      	pop	{r7, pc}
 800360c:	fffffedf 	.word	0xfffffedf

08003610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b0ab      	sub	sp, #172	@ 0xac
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	22a4      	movs	r2, #164	@ 0xa4
 8003620:	18b9      	adds	r1, r7, r2
 8003622:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	20a0      	movs	r0, #160	@ 0xa0
 800362c:	1839      	adds	r1, r7, r0
 800362e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	219c      	movs	r1, #156	@ 0x9c
 8003638:	1879      	adds	r1, r7, r1
 800363a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800363c:	0011      	movs	r1, r2
 800363e:	18bb      	adds	r3, r7, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a99      	ldr	r2, [pc, #612]	@ (80038a8 <HAL_UART_IRQHandler+0x298>)
 8003644:	4013      	ands	r3, r2
 8003646:	2298      	movs	r2, #152	@ 0x98
 8003648:	18bc      	adds	r4, r7, r2
 800364a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800364c:	18bb      	adds	r3, r7, r2
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d114      	bne.n	800367e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003654:	187b      	adds	r3, r7, r1
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	4013      	ands	r3, r2
 800365c:	d00f      	beq.n	800367e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800365e:	183b      	adds	r3, r7, r0
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	4013      	ands	r3, r2
 8003666:	d00a      	beq.n	800367e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800366c:	2b00      	cmp	r3, #0
 800366e:	d100      	bne.n	8003672 <HAL_UART_IRQHandler+0x62>
 8003670:	e2be      	b.n	8003bf0 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	0010      	movs	r0, r2
 800367a:	4798      	blx	r3
      }
      return;
 800367c:	e2b8      	b.n	8003bf0 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800367e:	2398      	movs	r3, #152	@ 0x98
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d100      	bne.n	800368a <HAL_UART_IRQHandler+0x7a>
 8003688:	e114      	b.n	80038b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800368a:	239c      	movs	r3, #156	@ 0x9c
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	d106      	bne.n	80036a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003696:	23a0      	movs	r3, #160	@ 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a83      	ldr	r2, [pc, #524]	@ (80038ac <HAL_UART_IRQHandler+0x29c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	d100      	bne.n	80036a4 <HAL_UART_IRQHandler+0x94>
 80036a2:	e107      	b.n	80038b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036a4:	23a4      	movs	r3, #164	@ 0xa4
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	d012      	beq.n	80036d6 <HAL_UART_IRQHandler+0xc6>
 80036b0:	23a0      	movs	r3, #160	@ 0xa0
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2284      	movs	r2, #132	@ 0x84
 80036ca:	589b      	ldr	r3, [r3, r2]
 80036cc:	2201      	movs	r2, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2184      	movs	r1, #132	@ 0x84
 80036d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d6:	23a4      	movs	r3, #164	@ 0xa4
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d011      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
 80036e2:	239c      	movs	r3, #156	@ 0x9c
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2202      	movs	r2, #2
 80036f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2284      	movs	r2, #132	@ 0x84
 80036fa:	589b      	ldr	r3, [r3, r2]
 80036fc:	2204      	movs	r2, #4
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2184      	movs	r1, #132	@ 0x84
 8003704:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003706:	23a4      	movs	r3, #164	@ 0xa4
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	d011      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
 8003712:	239c      	movs	r3, #156	@ 0x9c
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d00b      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2204      	movs	r2, #4
 8003724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2284      	movs	r2, #132	@ 0x84
 800372a:	589b      	ldr	r3, [r3, r2]
 800372c:	2202      	movs	r2, #2
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2184      	movs	r1, #132	@ 0x84
 8003734:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003736:	23a4      	movs	r3, #164	@ 0xa4
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	4013      	ands	r3, r2
 8003740:	d017      	beq.n	8003772 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003742:	23a0      	movs	r3, #160	@ 0xa0
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2220      	movs	r2, #32
 800374a:	4013      	ands	r3, r2
 800374c:	d105      	bne.n	800375a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800374e:	239c      	movs	r3, #156	@ 0x9c
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003758:	d00b      	beq.n	8003772 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2208      	movs	r2, #8
 8003760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2284      	movs	r2, #132	@ 0x84
 8003766:	589b      	ldr	r3, [r3, r2]
 8003768:	2208      	movs	r2, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2184      	movs	r1, #132	@ 0x84
 8003770:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003772:	23a4      	movs	r3, #164	@ 0xa4
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_UART_IRQHandler+0x198>
 8003780:	23a0      	movs	r3, #160	@ 0xa0
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	04db      	lsls	r3, r3, #19
 800378a:	4013      	ands	r3, r2
 800378c:	d00c      	beq.n	80037a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2284      	movs	r2, #132	@ 0x84
 800379c:	589b      	ldr	r3, [r3, r2]
 800379e:	2220      	movs	r2, #32
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2184      	movs	r1, #132	@ 0x84
 80037a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2284      	movs	r2, #132	@ 0x84
 80037ac:	589b      	ldr	r3, [r3, r2]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d100      	bne.n	80037b4 <HAL_UART_IRQHandler+0x1a4>
 80037b2:	e21f      	b.n	8003bf4 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037b4:	23a4      	movs	r3, #164	@ 0xa4
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2220      	movs	r2, #32
 80037bc:	4013      	ands	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037c0:	23a0      	movs	r3, #160	@ 0xa0
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	4013      	ands	r3, r2
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	0010      	movs	r0, r2
 80037dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2284      	movs	r2, #132	@ 0x84
 80037e2:	589b      	ldr	r3, [r3, r2]
 80037e4:	2194      	movs	r1, #148	@ 0x94
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2240      	movs	r2, #64	@ 0x40
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b40      	cmp	r3, #64	@ 0x40
 80037f6:	d004      	beq.n	8003802 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2228      	movs	r2, #40	@ 0x28
 80037fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003800:	d047      	beq.n	8003892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 ff77 	bl	80046f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2240      	movs	r2, #64	@ 0x40
 8003812:	4013      	ands	r3, r2
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d137      	bne.n	8003888 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800381e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003820:	2090      	movs	r0, #144	@ 0x90
 8003822:	183a      	adds	r2, r7, r0
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	2301      	movs	r3, #1
 8003828:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2140      	movs	r1, #64	@ 0x40
 800383e:	438a      	bics	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	183b      	adds	r3, r7, r0
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <HAL_UART_IRQHandler+0x2a0>)
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	0018      	movs	r0, r3
 8003866:	f7fe f95d 	bl	8001b24 <HAL_DMA_Abort_IT>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d01a      	beq.n	80038a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003878:	0018      	movs	r0, r3
 800387a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	e012      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f9e5 	bl	8003c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	e00d      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f9e0 	bl	8003c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e008      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f9db 	bl	8003c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	2100      	movs	r1, #0
 80038a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038a2:	e1a7      	b.n	8003bf4 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80038a6:	e1a5      	b.n	8003bf4 <HAL_UART_IRQHandler+0x5e4>
 80038a8:	0000080f 	.word	0x0000080f
 80038ac:	04000120 	.word	0x04000120
 80038b0:	08004ae3 	.word	0x08004ae3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d000      	beq.n	80038be <HAL_UART_IRQHandler+0x2ae>
 80038bc:	e159      	b.n	8003b72 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038be:	23a4      	movs	r3, #164	@ 0xa4
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_UART_IRQHandler+0x2bc>
 80038ca:	e152      	b.n	8003b72 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038cc:	23a0      	movs	r3, #160	@ 0xa0
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	4013      	ands	r3, r2
 80038d6:	d100      	bne.n	80038da <HAL_UART_IRQHandler+0x2ca>
 80038d8:	e14b      	b.n	8003b72 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2240      	movs	r2, #64	@ 0x40
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d000      	beq.n	80038f2 <HAL_UART_IRQHandler+0x2e2>
 80038f0:	e0bf      	b.n	8003a72 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	217e      	movs	r1, #126	@ 0x7e
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003900:	187b      	adds	r3, r7, r1
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <HAL_UART_IRQHandler+0x2fa>
 8003908:	e095      	b.n	8003a36 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2258      	movs	r2, #88	@ 0x58
 800390e:	5a9b      	ldrh	r3, [r3, r2]
 8003910:	187a      	adds	r2, r7, r1
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d300      	bcc.n	800391a <HAL_UART_IRQHandler+0x30a>
 8003918:	e08d      	b.n	8003a36 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	187a      	adds	r2, r7, r1
 800391e:	215a      	movs	r1, #90	@ 0x5a
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2220      	movs	r2, #32
 800392e:	4013      	ands	r3, r2
 8003930:	d16f      	bne.n	8003a12 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003932:	f3ef 8310 	mrs	r3, PRIMASK
 8003936:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800393c:	2301      	movs	r3, #1
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	49ad      	ldr	r1, [pc, #692]	@ (8003c08 <HAL_UART_IRQHandler+0x5f8>)
 8003954:	400a      	ands	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	677b      	str	r3, [r7, #116]	@ 0x74
 800396e:	2301      	movs	r3, #1
 8003970:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	438a      	bics	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800398c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003996:	f3ef 8310 	mrs	r3, PRIMASK
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800399c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	673b      	str	r3, [r7, #112]	@ 0x70
 80039a0:	2301      	movs	r3, #1
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2140      	movs	r1, #64	@ 0x40
 80039b8:	438a      	bics	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039be:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	2120      	movs	r1, #32
 80039ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d6:	f3ef 8310 	mrs	r3, PRIMASK
 80039da:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80039dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039e0:	2301      	movs	r3, #1
 80039e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2110      	movs	r1, #16
 80039f8:	438a      	bics	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7fe f849 	bl	8001aa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2258      	movs	r2, #88	@ 0x58
 8003a1c:	5a9a      	ldrh	r2, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	215a      	movs	r1, #90	@ 0x5a
 8003a22:	5a5b      	ldrh	r3, [r3, r1]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f7fc fe86 	bl	8000740 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a34:	e0e0      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2258      	movs	r2, #88	@ 0x58
 8003a3a:	5a9b      	ldrh	r3, [r3, r2]
 8003a3c:	227e      	movs	r2, #126	@ 0x7e
 8003a3e:	18ba      	adds	r2, r7, r2
 8003a40:	8812      	ldrh	r2, [r2, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d000      	beq.n	8003a48 <HAL_UART_IRQHandler+0x438>
 8003a46:	e0d7      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2220      	movs	r2, #32
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d000      	beq.n	8003a5a <HAL_UART_IRQHandler+0x44a>
 8003a58:	e0ce      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2258      	movs	r2, #88	@ 0x58
 8003a64:	5a9a      	ldrh	r2, [r3, r2]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0011      	movs	r1, r2
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fc fe68 	bl	8000740 <HAL_UARTEx_RxEventCallback>
      return;
 8003a70:	e0c2      	b.n	8003bf8 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2258      	movs	r2, #88	@ 0x58
 8003a76:	5a99      	ldrh	r1, [r3, r2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	225a      	movs	r2, #90	@ 0x5a
 8003a7c:	5a9b      	ldrh	r3, [r3, r2]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	208e      	movs	r0, #142	@ 0x8e
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	1a8a      	subs	r2, r1, r2
 8003a86:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	225a      	movs	r2, #90	@ 0x5a
 8003a8c:	5a9b      	ldrh	r3, [r3, r2]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <HAL_UART_IRQHandler+0x486>
 8003a94:	e0b2      	b.n	8003bfc <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d100      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x490>
 8003a9e:	e0ad      	b.n	8003bfc <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	2488      	movs	r4, #136	@ 0x88
 8003aaa:	193a      	adds	r2, r7, r4
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	2301      	movs	r3, #1
 8003ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4951      	ldr	r1, [pc, #324]	@ (8003c0c <HAL_UART_IRQHandler+0x5fc>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ade:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	2484      	movs	r4, #132	@ 0x84
 8003ae2:	193a      	adds	r2, r7, r4
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	438a      	bics	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2280      	movs	r2, #128	@ 0x80
 8003b14:	2120      	movs	r1, #32
 8003b16:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2c:	2480      	movs	r4, #128	@ 0x80
 8003b2e:	193a      	adds	r2, r7, r4
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	2301      	movs	r3, #1
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2110      	movs	r1, #16
 8003b4a:	438a      	bics	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fc fde8 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b70:	e044      	b.n	8003bfc <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b72:	23a4      	movs	r3, #164	@ 0xa4
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	035b      	lsls	r3, r3, #13
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d010      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x592>
 8003b80:	239c      	movs	r3, #156	@ 0x9c
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	03db      	lsls	r3, r3, #15
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	0352      	lsls	r2, r2, #13
 8003b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 ffdf 	bl	8004b5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ba0:	e02f      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ba2:	23a4      	movs	r3, #164	@ 0xa4
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00f      	beq.n	8003bce <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bae:	23a0      	movs	r3, #160	@ 0xa0
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2280      	movs	r2, #128	@ 0x80
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01e      	beq.n	8003c00 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	0010      	movs	r0, r2
 8003bca:	4798      	blx	r3
    }
    return;
 8003bcc:	e018      	b.n	8003c00 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bce:	23a4      	movs	r3, #164	@ 0xa4
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2240      	movs	r2, #64	@ 0x40
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
 8003bda:	23a0      	movs	r3, #160	@ 0xa0
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2240      	movs	r2, #64	@ 0x40
 8003be2:	4013      	ands	r3, r2
 8003be4:	d00d      	beq.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 ff8d 	bl	8004b08 <UART_EndTransmit_IT>
    return;
 8003bee:	e008      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	e006      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	e004      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	e002      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003c00:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b02b      	add	sp, #172	@ 0xac
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	fffffeff 	.word	0xfffffeff
 8003c0c:	fffffedf 	.word	0xfffffedf

08003c10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c28:	46c0      	nop			@ (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2280      	movs	r2, #128	@ 0x80
 8003c72:	589b      	ldr	r3, [r3, r2]
 8003c74:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	@ 0x84
 8003c90:	589b      	ldr	r3, [r3, r2]
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b002      	add	sp, #8
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b08e      	sub	sp, #56	@ 0x38
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca4:	231a      	movs	r3, #26
 8003ca6:	2218      	movs	r2, #24
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	19db      	adds	r3, r3, r7
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4ac3      	ldr	r2, [pc, #780]	@ (8003fdc <UART_SetConfig+0x340>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4abe      	ldr	r2, [pc, #760]	@ (8003fe0 <UART_SetConfig+0x344>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4ab8      	ldr	r2, [pc, #736]	@ (8003fe4 <UART_SetConfig+0x348>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4ab4      	ldr	r2, [pc, #720]	@ (8003fe8 <UART_SetConfig+0x34c>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4ab0      	ldr	r2, [pc, #704]	@ (8003fec <UART_SetConfig+0x350>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d131      	bne.n	8003d94 <UART_SetConfig+0xf8>
 8003d30:	4baf      	ldr	r3, [pc, #700]	@ (8003ff0 <UART_SetConfig+0x354>)
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	2203      	movs	r2, #3
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d01d      	beq.n	8003d78 <UART_SetConfig+0xdc>
 8003d3c:	d823      	bhi.n	8003d86 <UART_SetConfig+0xea>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d00c      	beq.n	8003d5c <UART_SetConfig+0xc0>
 8003d42:	d820      	bhi.n	8003d86 <UART_SetConfig+0xea>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <UART_SetConfig+0xb2>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d00e      	beq.n	8003d6a <UART_SetConfig+0xce>
 8003d4c:	e01b      	b.n	8003d86 <UART_SetConfig+0xea>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	2218      	movs	r2, #24
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e0b4      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003d5c:	231b      	movs	r3, #27
 8003d5e:	2218      	movs	r2, #24
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	19db      	adds	r3, r3, r7
 8003d64:	2202      	movs	r2, #2
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e0ad      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003d6a:	231b      	movs	r3, #27
 8003d6c:	2218      	movs	r2, #24
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	19db      	adds	r3, r3, r7
 8003d72:	2204      	movs	r2, #4
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e0a6      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003d78:	231b      	movs	r3, #27
 8003d7a:	2218      	movs	r2, #24
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	2208      	movs	r2, #8
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e09f      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003d86:	231b      	movs	r3, #27
 8003d88:	2218      	movs	r2, #24
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	19db      	adds	r3, r3, r7
 8003d8e:	2210      	movs	r2, #16
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e098      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a96      	ldr	r2, [pc, #600]	@ (8003ff4 <UART_SetConfig+0x358>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d131      	bne.n	8003e02 <UART_SetConfig+0x166>
 8003d9e:	4b94      	ldr	r3, [pc, #592]	@ (8003ff0 <UART_SetConfig+0x354>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	220c      	movs	r2, #12
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d01d      	beq.n	8003de6 <UART_SetConfig+0x14a>
 8003daa:	d823      	bhi.n	8003df4 <UART_SetConfig+0x158>
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d00c      	beq.n	8003dca <UART_SetConfig+0x12e>
 8003db0:	d820      	bhi.n	8003df4 <UART_SetConfig+0x158>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <UART_SetConfig+0x120>
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d00e      	beq.n	8003dd8 <UART_SetConfig+0x13c>
 8003dba:	e01b      	b.n	8003df4 <UART_SetConfig+0x158>
 8003dbc:	231b      	movs	r3, #27
 8003dbe:	2218      	movs	r2, #24
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	19db      	adds	r3, r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e07d      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003dca:	231b      	movs	r3, #27
 8003dcc:	2218      	movs	r2, #24
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	19db      	adds	r3, r3, r7
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e076      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003dd8:	231b      	movs	r3, #27
 8003dda:	2218      	movs	r2, #24
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	2204      	movs	r2, #4
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e06f      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003de6:	231b      	movs	r3, #27
 8003de8:	2218      	movs	r2, #24
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	19db      	adds	r3, r3, r7
 8003dee:	2208      	movs	r2, #8
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e068      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003df4:	231b      	movs	r3, #27
 8003df6:	2218      	movs	r2, #24
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	19db      	adds	r3, r3, r7
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e061      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff8 <UART_SetConfig+0x35c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d106      	bne.n	8003e1a <UART_SetConfig+0x17e>
 8003e0c:	231b      	movs	r3, #27
 8003e0e:	2218      	movs	r2, #24
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	19db      	adds	r3, r3, r7
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e055      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a77      	ldr	r2, [pc, #476]	@ (8003ffc <UART_SetConfig+0x360>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d106      	bne.n	8003e32 <UART_SetConfig+0x196>
 8003e24:	231b      	movs	r3, #27
 8003e26:	2218      	movs	r2, #24
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	19db      	adds	r3, r3, r7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e049      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe4 <UART_SetConfig+0x348>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d13e      	bne.n	8003eba <UART_SetConfig+0x21e>
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <UART_SetConfig+0x354>)
 8003e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e40:	23c0      	movs	r3, #192	@ 0xc0
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	4013      	ands	r3, r2
 8003e46:	22c0      	movs	r2, #192	@ 0xc0
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d027      	beq.n	8003e9e <UART_SetConfig+0x202>
 8003e4e:	22c0      	movs	r2, #192	@ 0xc0
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d82a      	bhi.n	8003eac <UART_SetConfig+0x210>
 8003e56:	2280      	movs	r2, #128	@ 0x80
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d011      	beq.n	8003e82 <UART_SetConfig+0x1e6>
 8003e5e:	2280      	movs	r2, #128	@ 0x80
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d822      	bhi.n	8003eac <UART_SetConfig+0x210>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <UART_SetConfig+0x1d8>
 8003e6a:	2280      	movs	r2, #128	@ 0x80
 8003e6c:	00d2      	lsls	r2, r2, #3
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00e      	beq.n	8003e90 <UART_SetConfig+0x1f4>
 8003e72:	e01b      	b.n	8003eac <UART_SetConfig+0x210>
 8003e74:	231b      	movs	r3, #27
 8003e76:	2218      	movs	r2, #24
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e021      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e82:	231b      	movs	r3, #27
 8003e84:	2218      	movs	r2, #24
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	19db      	adds	r3, r3, r7
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e01a      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e90:	231b      	movs	r3, #27
 8003e92:	2218      	movs	r2, #24
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	2204      	movs	r2, #4
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e013      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003e9e:	231b      	movs	r3, #27
 8003ea0:	2218      	movs	r2, #24
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e00c      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003eac:	231b      	movs	r3, #27
 8003eae:	2218      	movs	r2, #24
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x22a>
 8003eba:	231b      	movs	r3, #27
 8003ebc:	2218      	movs	r2, #24
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a46      	ldr	r2, [pc, #280]	@ (8003fe4 <UART_SetConfig+0x348>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d000      	beq.n	8003ed2 <UART_SetConfig+0x236>
 8003ed0:	e09a      	b.n	8004008 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed2:	231b      	movs	r3, #27
 8003ed4:	2218      	movs	r2, #24
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d01d      	beq.n	8003f1c <UART_SetConfig+0x280>
 8003ee0:	dc20      	bgt.n	8003f24 <UART_SetConfig+0x288>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d015      	beq.n	8003f12 <UART_SetConfig+0x276>
 8003ee6:	dc1d      	bgt.n	8003f24 <UART_SetConfig+0x288>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <UART_SetConfig+0x256>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d005      	beq.n	8003efc <UART_SetConfig+0x260>
 8003ef0:	e018      	b.n	8003f24 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef2:	f7fe ffcb 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003efa:	e01c      	b.n	8003f36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003efc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ff0 <UART_SetConfig+0x354>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	4013      	ands	r3, r2
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f06:	4b3e      	ldr	r3, [pc, #248]	@ (8004000 <UART_SetConfig+0x364>)
 8003f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f0a:	e014      	b.n	8003f36 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004004 <UART_SetConfig+0x368>)
 8003f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f10:	e011      	b.n	8003f36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe ff2b 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f1a:	e00c      	b.n	8003f36 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1c:	2380      	movs	r3, #128	@ 0x80
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f22:	e008      	b.n	8003f36 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f28:	231a      	movs	r3, #26
 8003f2a:	2218      	movs	r2, #24
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
        break;
 8003f34:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d100      	bne.n	8003f3e <UART_SetConfig+0x2a2>
 8003f3c:	e133      	b.n	80041a6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	0013      	movs	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d305      	bcc.n	8003f5a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d906      	bls.n	8003f68 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003f5a:	231a      	movs	r3, #26
 8003f5c:	2218      	movs	r2, #24
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e11e      	b.n	80041a6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	6939      	ldr	r1, [r7, #16]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	000b      	movs	r3, r1
 8003f76:	0e1b      	lsrs	r3, r3, #24
 8003f78:	0010      	movs	r0, r2
 8003f7a:	0205      	lsls	r5, r0, #8
 8003f7c:	431d      	orrs	r5, r3
 8003f7e:	000b      	movs	r3, r1
 8003f80:	021c      	lsls	r4, r3, #8
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	1900      	adds	r0, r0, r4
 8003f94:	4169      	adcs	r1, r5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f7fc f94e 	bl	8000244 <__aeabi_uldivmod>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	000b      	movs	r3, r1
 8003fac:	0013      	movs	r3, r2
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fb2:	23c0      	movs	r3, #192	@ 0xc0
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d309      	bcc.n	8003fce <UART_SetConfig+0x332>
 8003fba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fbc:	2380      	movs	r3, #128	@ 0x80
 8003fbe:	035b      	lsls	r3, r3, #13
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d204      	bcs.n	8003fce <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e0eb      	b.n	80041a6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003fce:	231a      	movs	r3, #26
 8003fd0:	2218      	movs	r2, #24
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e0e4      	b.n	80041a6 <UART_SetConfig+0x50a>
 8003fdc:	efff69f3 	.word	0xefff69f3
 8003fe0:	ffffcfff 	.word	0xffffcfff
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	fffff4ff 	.word	0xfffff4ff
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004c00 	.word	0x40004c00
 8003ffc:	40005000 	.word	0x40005000
 8004000:	003d0900 	.word	0x003d0900
 8004004:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	429a      	cmp	r2, r3
 8004012:	d000      	beq.n	8004016 <UART_SetConfig+0x37a>
 8004014:	e070      	b.n	80040f8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004016:	231b      	movs	r3, #27
 8004018:	2218      	movs	r2, #24
 800401a:	189b      	adds	r3, r3, r2
 800401c:	19db      	adds	r3, r3, r7
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d822      	bhi.n	800406a <UART_SetConfig+0x3ce>
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	4b67      	ldr	r3, [pc, #412]	@ (80041c4 <UART_SetConfig+0x528>)
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7fe ff2d 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8004032:	0003      	movs	r3, r0
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004036:	e021      	b.n	800407c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7fe ff3e 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 800403c:	0003      	movs	r3, r0
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004040:	e01c      	b.n	800407c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004042:	4b61      	ldr	r3, [pc, #388]	@ (80041c8 <UART_SetConfig+0x52c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2210      	movs	r2, #16
 8004048:	4013      	ands	r3, r2
 800404a:	d002      	beq.n	8004052 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800404c:	4b5f      	ldr	r3, [pc, #380]	@ (80041cc <UART_SetConfig+0x530>)
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004050:	e014      	b.n	800407c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004052:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <UART_SetConfig+0x534>)
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004056:	e011      	b.n	800407c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004058:	f7fe fe88 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 800405c:	0003      	movs	r3, r0
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004060:	e00c      	b.n	800407c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004068:	e008      	b.n	800407c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800406e:	231a      	movs	r3, #26
 8004070:	2218      	movs	r2, #24
 8004072:	189b      	adds	r3, r3, r2
 8004074:	19db      	adds	r3, r3, r7
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
        break;
 800407a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d100      	bne.n	8004084 <UART_SetConfig+0x3e8>
 8004082:	e090      	b.n	80041a6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	005a      	lsls	r2, r3, #1
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	18d2      	adds	r2, r2, r3
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0019      	movs	r1, r3
 8004096:	0010      	movs	r0, r2
 8004098:	f7fc f848 	bl	800012c <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d921      	bls.n	80040ea <UART_SetConfig+0x44e>
 80040a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	025b      	lsls	r3, r3, #9
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d21c      	bcs.n	80040ea <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	200e      	movs	r0, #14
 80040b6:	2418      	movs	r4, #24
 80040b8:	1903      	adds	r3, r0, r4
 80040ba:	19db      	adds	r3, r3, r7
 80040bc:	210f      	movs	r1, #15
 80040be:	438a      	bics	r2, r1
 80040c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2207      	movs	r2, #7
 80040ca:	4013      	ands	r3, r2
 80040cc:	b299      	uxth	r1, r3
 80040ce:	1903      	adds	r3, r0, r4
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	1902      	adds	r2, r0, r4
 80040d4:	19d2      	adds	r2, r2, r7
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1902      	adds	r2, r0, r4
 80040e2:	19d2      	adds	r2, r2, r7
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	e05d      	b.n	80041a6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80040ea:	231a      	movs	r3, #26
 80040ec:	2218      	movs	r2, #24
 80040ee:	189b      	adds	r3, r3, r2
 80040f0:	19db      	adds	r3, r3, r7
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e056      	b.n	80041a6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f8:	231b      	movs	r3, #27
 80040fa:	2218      	movs	r2, #24
 80040fc:	189b      	adds	r3, r3, r2
 80040fe:	19db      	adds	r3, r3, r7
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d822      	bhi.n	800414c <UART_SetConfig+0x4b0>
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	4b32      	ldr	r3, [pc, #200]	@ (80041d4 <UART_SetConfig+0x538>)
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe febc 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8004114:	0003      	movs	r3, r0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004118:	e021      	b.n	800415e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800411a:	f7fe fecd 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 800411e:	0003      	movs	r3, r0
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004122:	e01c      	b.n	800415e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004124:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <UART_SetConfig+0x52c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800412e:	4b27      	ldr	r3, [pc, #156]	@ (80041cc <UART_SetConfig+0x530>)
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004132:	e014      	b.n	800415e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004134:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <UART_SetConfig+0x534>)
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004138:	e011      	b.n	800415e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413a:	f7fe fe17 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 800413e:	0003      	movs	r3, r0
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004142:	e00c      	b.n	800415e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004144:	2380      	movs	r3, #128	@ 0x80
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800414a:	e008      	b.n	800415e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004150:	231a      	movs	r3, #26
 8004152:	2218      	movs	r2, #24
 8004154:	189b      	adds	r3, r3, r2
 8004156:	19db      	adds	r3, r3, r7
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
        break;
 800415c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	085a      	lsrs	r2, r3, #1
 800416a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416c:	18d2      	adds	r2, r2, r3
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	0019      	movs	r1, r3
 8004174:	0010      	movs	r0, r2
 8004176:	f7fb ffd9 	bl	800012c <__udivsi3>
 800417a:	0003      	movs	r3, r0
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d90a      	bls.n	800419a <UART_SetConfig+0x4fe>
 8004184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004186:	2380      	movs	r3, #128	@ 0x80
 8004188:	025b      	lsls	r3, r3, #9
 800418a:	429a      	cmp	r2, r3
 800418c:	d205      	bcs.n	800419a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004190:	b29a      	uxth	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	e005      	b.n	80041a6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800419a:	231a      	movs	r3, #26
 800419c:	2218      	movs	r2, #24
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2200      	movs	r2, #0
 80041aa:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2200      	movs	r2, #0
 80041b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041b2:	231a      	movs	r3, #26
 80041b4:	2218      	movs	r2, #24
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	19db      	adds	r3, r3, r7
 80041ba:	781b      	ldrb	r3, [r3, #0]
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b00e      	add	sp, #56	@ 0x38
 80041c2:	bdb0      	pop	{r4, r5, r7, pc}
 80041c4:	08006ddc 	.word	0x08006ddc
 80041c8:	40021000 	.word	0x40021000
 80041cc:	003d0900 	.word	0x003d0900
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	08006e00 	.word	0x08006e00

080041d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	2208      	movs	r2, #8
 80041e6:	4013      	ands	r3, r2
 80041e8:	d00b      	beq.n	8004202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <UART_AdvFeatureConfig+0x144>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	2201      	movs	r2, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d00b      	beq.n	8004224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a43      	ldr	r2, [pc, #268]	@ (8004320 <UART_AdvFeatureConfig+0x148>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d00b      	beq.n	8004246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <UART_AdvFeatureConfig+0x14c>)
 8004236:	4013      	ands	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
 800424e:	d00b      	beq.n	8004268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a34      	ldr	r2, [pc, #208]	@ (8004328 <UART_AdvFeatureConfig+0x150>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	2210      	movs	r2, #16
 800426e:	4013      	ands	r3, r2
 8004270:	d00b      	beq.n	800428a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <UART_AdvFeatureConfig+0x154>)
 800427a:	4013      	ands	r3, r2
 800427c:	0019      	movs	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
 8004292:	d00b      	beq.n	80042ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4a25      	ldr	r2, [pc, #148]	@ (8004330 <UART_AdvFeatureConfig+0x158>)
 800429c:	4013      	ands	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	2240      	movs	r2, #64	@ 0x40
 80042b2:	4013      	ands	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004334 <UART_AdvFeatureConfig+0x15c>)
 80042be:	4013      	ands	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	035b      	lsls	r3, r3, #13
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d10b      	bne.n	80042f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a15      	ldr	r2, [pc, #84]	@ (8004338 <UART_AdvFeatureConfig+0x160>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	2280      	movs	r2, #128	@ 0x80
 80042f8:	4013      	ands	r3, r2
 80042fa:	d00b      	beq.n	8004314 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a0e      	ldr	r2, [pc, #56]	@ (800433c <UART_AdvFeatureConfig+0x164>)
 8004304:	4013      	ands	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}
 800431c:	ffff7fff 	.word	0xffff7fff
 8004320:	fffdffff 	.word	0xfffdffff
 8004324:	fffeffff 	.word	0xfffeffff
 8004328:	fffbffff 	.word	0xfffbffff
 800432c:	ffffefff 	.word	0xffffefff
 8004330:	ffffdfff 	.word	0xffffdfff
 8004334:	ffefffff 	.word	0xffefffff
 8004338:	ff9fffff 	.word	0xff9fffff
 800433c:	fff7ffff 	.word	0xfff7ffff

08004340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b092      	sub	sp, #72	@ 0x48
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2284      	movs	r2, #132	@ 0x84
 800434c:	2100      	movs	r1, #0
 800434e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004350:	f7fd f9be 	bl	80016d0 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2208      	movs	r2, #8
 8004360:	4013      	ands	r3, r2
 8004362:	2b08      	cmp	r3, #8
 8004364:	d12c      	bne.n	80043c0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	2280      	movs	r2, #128	@ 0x80
 800436a:	0391      	lsls	r1, r2, #14
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4a46      	ldr	r2, [pc, #280]	@ (8004488 <UART_CheckIdleState+0x148>)
 8004370:	9200      	str	r2, [sp, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	f000 f88c 	bl	8004490 <UART_WaitOnFlagUntilTimeout>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d021      	beq.n	80043c0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437c:	f3ef 8310 	mrs	r3, PRIMASK
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004386:	2301      	movs	r3, #1
 8004388:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	438a      	bics	r2, r1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2278      	movs	r2, #120	@ 0x78
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e05f      	b.n	8004480 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2204      	movs	r2, #4
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d146      	bne.n	800445c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	2280      	movs	r2, #128	@ 0x80
 80043d2:	03d1      	lsls	r1, r2, #15
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <UART_CheckIdleState+0x148>)
 80043d8:	9200      	str	r2, [sp, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	f000 f858 	bl	8004490 <UART_WaitOnFlagUntilTimeout>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d03b      	beq.n	800445c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e4:	f3ef 8310 	mrs	r3, PRIMASK
 80043e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ee:	2301      	movs	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			@ (mov r8, r8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4921      	ldr	r1, [pc, #132]	@ (800448c <UART_CheckIdleState+0x14c>)
 8004406:	400a      	ands	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004416:	f3ef 8310 	mrs	r3, PRIMASK
 800441a:	61bb      	str	r3, [r7, #24]
  return(result);
 800441c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004420:	2301      	movs	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2101      	movs	r1, #1
 8004438:	438a      	bics	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	2120      	movs	r1, #32
 800444e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2278      	movs	r2, #120	@ 0x78
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e011      	b.n	8004480 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2280      	movs	r2, #128	@ 0x80
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2278      	movs	r2, #120	@ 0x78
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b010      	add	sp, #64	@ 0x40
 8004486:	bd80      	pop	{r7, pc}
 8004488:	01ffffff 	.word	0x01ffffff
 800448c:	fffffedf 	.word	0xfffffedf

08004490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a0:	e051      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3301      	adds	r3, #1
 80044a6:	d04e      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fd f912 	bl	80016d0 <HAL_GetTick>
 80044ac:	0002      	movs	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e051      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	d03b      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b80      	cmp	r3, #128	@ 0x80
 80044d2:	d038      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	d035      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2208      	movs	r2, #8
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d111      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f900 	bl	80046f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2284      	movs	r2, #132	@ 0x84
 80044fc:	2108      	movs	r1, #8
 80044fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2278      	movs	r2, #120	@ 0x78
 8004504:	2100      	movs	r1, #0
 8004506:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e02c      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	401a      	ands	r2, r3
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	429a      	cmp	r2, r3
 800451e:	d112      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2280      	movs	r2, #128	@ 0x80
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f8e3 	bl	80046f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2284      	movs	r2, #132	@ 0x84
 8004536:	2120      	movs	r1, #32
 8004538:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2278      	movs	r2, #120	@ 0x78
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00f      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	425a      	negs	r2, r3
 8004556:	4153      	adcs	r3, r2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	001a      	movs	r2, r3
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d09e      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b090      	sub	sp, #64	@ 0x40
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	1dbb      	adds	r3, r7, #6
 800457c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1dba      	adds	r2, r7, #6
 8004588:	2158      	movs	r1, #88	@ 0x58
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2284      	movs	r2, #132	@ 0x84
 8004592:	2100      	movs	r1, #0
 8004594:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2280      	movs	r2, #128	@ 0x80
 800459a:	2122      	movs	r1, #34	@ 0x22
 800459c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d028      	beq.n	80045f8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	4a3e      	ldr	r2, [pc, #248]	@ (80046a4 <UART_Start_Receive_DMA+0x134>)
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	4a3d      	ldr	r2, [pc, #244]	@ (80046a8 <UART_Start_Receive_DMA+0x138>)
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ba:	4a3c      	ldr	r2, [pc, #240]	@ (80046ac <UART_Start_Receive_DMA+0x13c>)
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c2:	2200      	movs	r2, #0
 80045c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3324      	adds	r3, #36	@ 0x24
 80045d0:	0019      	movs	r1, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	001a      	movs	r2, r3
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f7fd f9fc 	bl	80019d8 <HAL_DMA_Start_IT>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d009      	beq.n	80045f8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2284      	movs	r2, #132	@ 0x84
 80045e8:	2110      	movs	r1, #16
 80045ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2280      	movs	r2, #128	@ 0x80
 80045f0:	2120      	movs	r1, #32
 80045f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e050      	b.n	800469a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d019      	beq.n	8004634 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004600:	f3ef 8310 	mrs	r3, PRIMASK
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800460a:	2301      	movs	r3, #1
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	0049      	lsls	r1, r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	613b      	str	r3, [r7, #16]
  return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800463e:	2301      	movs	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004666:	f3ef 8310 	mrs	r3, PRIMASK
 800466a:	61fb      	str	r3, [r7, #28]
  return(result);
 800466c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004670:	2301      	movs	r3, #1
 8004672:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2140      	movs	r1, #64	@ 0x40
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b010      	add	sp, #64	@ 0x40
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	08004879 	.word	0x08004879
 80046a8:	080049e1 	.word	0x080049e1
 80046ac:	08004a5f 	.word	0x08004a5f

080046b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b8:	f3ef 8310 	mrs	r3, PRIMASK
 80046bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	2301      	movs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			@ (mov r8, r8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	21c0      	movs	r1, #192	@ 0xc0
 80046da:	438a      	bics	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b006      	add	sp, #24
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	@ 0x38
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004700:	f3ef 8310 	mrs	r3, PRIMASK
 8004704:	617b      	str	r3, [r7, #20]
  return(result);
 8004706:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
 800470a:	2301      	movs	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			@ (mov r8, r8)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4926      	ldr	r1, [pc, #152]	@ (80047bc <UART_EndRxTransfer+0xc4>)
 8004722:	400a      	ands	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f383 8810 	msr	PRIMASK, r3
}
 8004730:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004732:	f3ef 8310 	mrs	r3, PRIMASK
 8004736:	623b      	str	r3, [r7, #32]
  return(result);
 8004738:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
 800473c:	2301      	movs	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	438a      	bics	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004768:	2b01      	cmp	r3, #1
 800476a:	d118      	bne.n	800479e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
 8004770:	60bb      	str	r3, [r7, #8]
  return(result);
 8004772:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004776:	2301      	movs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f383 8810 	msr	PRIMASK, r3
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2110      	movs	r1, #16
 800478e:	438a      	bics	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2280      	movs	r2, #128	@ 0x80
 80047a2:	2120      	movs	r1, #32
 80047a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b00e      	add	sp, #56	@ 0x38
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	fffffedf 	.word	0xfffffedf

080047c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	@ 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2220      	movs	r2, #32
 80047d6:	4013      	ands	r3, r2
 80047d8:	d135      	bne.n	8004846 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2252      	movs	r2, #82	@ 0x52
 80047de:	2100      	movs	r1, #0
 80047e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ec:	2301      	movs	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2180      	movs	r1, #128	@ 0x80
 8004804:	438a      	bics	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	61bb      	str	r3, [r7, #24]
  return(result);
 800481a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
 800481e:	2301      	movs	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	@ 0x40
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	e004      	b.n	8004850 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004848:	0018      	movs	r0, r3
 800484a:	f7ff f9e1 	bl	8003c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b00c      	add	sp, #48	@ 0x30
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff f9d9 	bl	8003c20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b004      	add	sp, #16
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b094      	sub	sp, #80	@ 0x50
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2220      	movs	r2, #32
 800488e:	4013      	ands	r3, r2
 8004890:	d16f      	bne.n	8004972 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004894:	225a      	movs	r2, #90	@ 0x5a
 8004896:	2100      	movs	r1, #0
 8004898:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489a:	f3ef 8310 	mrs	r3, PRIMASK
 800489e:	617b      	str	r3, [r7, #20]
  return(result);
 80048a0:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a4:	2301      	movs	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f383 8810 	msr	PRIMASK, r3
}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4948      	ldr	r1, [pc, #288]	@ (80049dc <UART_DMAReceiveCplt+0x164>)
 80048bc:	400a      	ands	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048cc:	f3ef 8310 	mrs	r3, PRIMASK
 80048d0:	623b      	str	r3, [r7, #32]
  return(result);
 80048d2:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d6:	2301      	movs	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2101      	movs	r1, #1
 80048ee:	438a      	bics	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	f383 8810 	msr	PRIMASK, r3
}
 80048fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004906:	643b      	str	r3, [r7, #64]	@ 0x40
 8004908:	2301      	movs	r3, #1
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	f383 8810 	msr	PRIMASK, r3
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2140      	movs	r1, #64	@ 0x40
 8004920:	438a      	bics	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	f383 8810 	msr	PRIMASK, r3
}
 800492e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	2120      	movs	r1, #32
 8004936:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800493a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493c:	2b01      	cmp	r3, #1
 800493e:	d118      	bne.n	8004972 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	60bb      	str	r3, [r7, #8]
  return(result);
 8004946:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800494a:	2301      	movs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2110      	movs	r1, #16
 8004962:	438a      	bics	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	2200      	movs	r2, #0
 8004976:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497c:	2b01      	cmp	r3, #1
 800497e:	d124      	bne.n	80049ca <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	225a      	movs	r2, #90	@ 0x5a
 8004984:	2100      	movs	r1, #0
 8004986:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	213a      	movs	r1, #58	@ 0x3a
 8004990:	187b      	adds	r3, r7, r1
 8004992:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004996:	2258      	movs	r2, #88	@ 0x58
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	187a      	adds	r2, r7, r1
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d204      	bcs.n	80049ac <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80049a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a4:	187a      	adds	r2, r7, r1
 80049a6:	215a      	movs	r1, #90	@ 0x5a
 80049a8:	8812      	ldrh	r2, [r2, #0]
 80049aa:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ae:	2258      	movs	r2, #88	@ 0x58
 80049b0:	5a9a      	ldrh	r2, [r3, r2]
 80049b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b4:	215a      	movs	r1, #90	@ 0x5a
 80049b6:	5a5b      	ldrh	r3, [r3, r1]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c0:	0011      	movs	r1, r2
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7fb febc 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c8:	e003      	b.n	80049d2 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 80049ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff f92f 	bl	8003c30 <HAL_UART_RxCpltCallback>
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b014      	add	sp, #80	@ 0x50
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	fffffeff 	.word	0xfffffeff

080049e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d128      	bne.n	8004a4e <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2258      	movs	r2, #88	@ 0x58
 8004a00:	5a9b      	ldrh	r3, [r3, r2]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	b299      	uxth	r1, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	225a      	movs	r2, #90	@ 0x5a
 8004a0a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	210a      	movs	r1, #10
 8004a14:	187b      	adds	r3, r7, r1
 8004a16:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2258      	movs	r2, #88	@ 0x58
 8004a1c:	5a9b      	ldrh	r3, [r3, r2]
 8004a1e:	187a      	adds	r2, r7, r1
 8004a20:	8812      	ldrh	r2, [r2, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d804      	bhi.n	8004a30 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	187a      	adds	r2, r7, r1
 8004a2a:	215a      	movs	r1, #90	@ 0x5a
 8004a2c:	8812      	ldrh	r2, [r2, #0]
 8004a2e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2258      	movs	r2, #88	@ 0x58
 8004a34:	5a9a      	ldrh	r2, [r3, r2]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	215a      	movs	r1, #90	@ 0x5a
 8004a3a:	5a5b      	ldrh	r3, [r3, r1]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fb fe7a 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a4c:	e003      	b.n	8004a56 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7ff f8f5 	bl	8003c40 <HAL_UART_RxHalfCpltCallback>
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b004      	add	sp, #16
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2280      	movs	r2, #128	@ 0x80
 8004a76:	589b      	ldr	r3, [r3, r2]
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2280      	movs	r2, #128	@ 0x80
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d10a      	bne.n	8004a9e <UART_DMAError+0x40>
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b21      	cmp	r3, #33	@ 0x21
 8004a8c:	d107      	bne.n	8004a9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2252      	movs	r2, #82	@ 0x52
 8004a92:	2100      	movs	r1, #0
 8004a94:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff fe09 	bl	80046b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2240      	movs	r2, #64	@ 0x40
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	d10a      	bne.n	8004ac2 <UART_DMAError+0x64>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b22      	cmp	r3, #34	@ 0x22
 8004ab0:	d107      	bne.n	8004ac2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	225a      	movs	r2, #90	@ 0x5a
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff fe1b 	bl	80046f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2284      	movs	r2, #132	@ 0x84
 8004ac6:	589b      	ldr	r3, [r3, r2]
 8004ac8:	2210      	movs	r2, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2184      	movs	r1, #132	@ 0x84
 8004ad0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff f8bb 	bl	8003c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b006      	add	sp, #24
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	225a      	movs	r2, #90	@ 0x5a
 8004af4:	2100      	movs	r1, #0
 8004af6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff f8a8 	bl	8003c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b004      	add	sp, #16
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b10:	f3ef 8310 	mrs	r3, PRIMASK
 8004b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b16:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f383 8810 	msr	PRIMASK, r3
}
 8004b24:	46c0      	nop			@ (mov r8, r8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2140      	movs	r1, #64	@ 0x40
 8004b32:	438a      	bics	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8810 	msr	PRIMASK, r3
}
 8004b40:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7ff f85d 	bl	8003c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b006      	add	sp, #24
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b6e:	b5b0      	push	{r4, r5, r7, lr}
 8004b70:	b08a      	sub	sp, #40	@ 0x28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2280      	movs	r2, #128	@ 0x80
 8004b80:	589b      	ldr	r3, [r3, r2]
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d156      	bne.n	8004c34 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b8c:	1dbb      	adds	r3, r7, #6
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04e      	b.n	8004c36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	015b      	lsls	r3, r3, #5
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d109      	bne.n	8004bb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d001      	beq.n	8004bb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e03e      	b.n	8004c36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bc4:	2527      	movs	r5, #39	@ 0x27
 8004bc6:	197c      	adds	r4, r7, r5
 8004bc8:	1dbb      	adds	r3, r7, #6
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff fccd 	bl	8004570 <UART_Start_Receive_DMA>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004bda:	197b      	adds	r3, r7, r5
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d124      	bne.n	8004c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11c      	bne.n	8004c24 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf6:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf8:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2110      	movs	r1, #16
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	e003      	b.n	8004c2c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c24:	2327      	movs	r3, #39	@ 0x27
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004c2c:	2327      	movs	r3, #39	@ 0x27
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	e000      	b.n	8004c36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b00a      	add	sp, #40	@ 0x28
 8004c3c:	bdb0      	pop	{r4, r5, r7, pc}

08004c3e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fc07 	bl	8005460 <malloc>
 8004c52:	0003      	movs	r3, r0
 8004c54:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <ATC_Free+0x26>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 fbfa 	bl	8005474 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
  }
}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b002      	add	sp, #8
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8a9b      	ldrh	r3, [r3, #20]
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f000 ff8c 	bl	8005bc4 <memset>
}
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	1dbb      	adds	r3, r7, #6
 8004cc0:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004cc2:	2417      	movs	r4, #23
 8004cc4:	193b      	adds	r3, r7, r4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1dba      	adds	r2, r7, #6
 8004cce:	8812      	ldrh	r2, [r2, #0]
 8004cd0:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	1dbb      	adds	r3, r7, #6
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0019      	movs	r1, r3
 8004cde:	f7fe faf3 	bl	80032c8 <HAL_UART_Transmit_DMA>
 8004ce2:	1e03      	subs	r3, r0, #0
 8004ce4:	d103      	bne.n	8004cee <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e000      	b.n	8004cf0 <ATC_TxRaw+0x3c>
      break;
 8004cee:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8004cf0:	2317      	movs	r3, #23
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	781b      	ldrb	r3, [r3, #0]
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b007      	add	sp, #28
 8004cfc:	bd90      	pop	{r4, r7, pc}

08004cfe <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7fe ffa8 	bl	8003c60 <HAL_UART_GetState>
 8004d10:	0003      	movs	r3, r0
 8004d12:	2b21      	cmp	r3, #33	@ 0x21
 8004d14:	d007      	beq.n	8004d26 <ATC_TxBusy+0x28>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7fe ffa0 	bl	8003c60 <HAL_UART_GetState>
 8004d20:	0003      	movs	r3, r0
 8004d22:	2b23      	cmp	r3, #35	@ 0x23
 8004d24:	d101      	bne.n	8004d2a <ATC_TxBusy+0x2c>
  {
    return true;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8004d2a:	2300      	movs	r3, #0
  }
}
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8004d3e:	230f      	movs	r3, #15
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8004d46:	f7fc fcc3 	bl	80016d0 <HAL_GetTick>
 8004d4a:	0003      	movs	r3, r0
 8004d4c:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f000 fb73 	bl	800543a <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7fe ff81 	bl	8003c60 <HAL_UART_GetState>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	2b22      	cmp	r3, #34	@ 0x22
 8004d62:	d007      	beq.n	8004d74 <ATC_TxWait+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7fe ff79 	bl	8003c60 <HAL_UART_GetState>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d104      	bne.n	8004d7e <ATC_TxWait+0x4a>
    {
      answer = true;
 8004d74:	230f      	movs	r3, #15
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
      break;
 8004d7c:	e01c      	b.n	8004db8 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7fe ff6c 	bl	8003c60 <HAL_UART_GetState>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	2be0      	cmp	r3, #224	@ 0xe0
 8004d8c:	d014      	beq.n	8004db8 <ATC_TxWait+0x84>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7fe ff64 	bl	8003c60 <HAL_UART_GetState>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d9c:	d00c      	beq.n	8004db8 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8004d9e:	f7fc fc97 	bl	80016d0 <HAL_GetTick>
 8004da2:	0002      	movs	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d8cf      	bhi.n	8004d4e <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fe fb18 	bl	80033e8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8004db8:	230f      	movs	r3, #15
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b004      	add	sp, #16
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8b1b      	ldrh	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d027      	beq.n	8004e26 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e01b      	b.n	8004e14 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	18d3      	adds	r3, r2, r3
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	0019      	movs	r1, r3
 8004dee:	f000 ff13 	bl	8005c18 <strstr>
 8004df2:	0003      	movs	r3, r0
 8004df4:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	18d3      	adds	r3, r2, r3
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	0010      	movs	r0, r2
 8004e0c:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3de      	bcc.n	8004ddc <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff ff34 	bl	8004c8e <ATC_RxFlush>
  }
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8004e38:	230f      	movs	r3, #15
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8b1b      	ldrh	r3, [r3, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d031      	beq.n	8004eac <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8004e48:	230c      	movs	r3, #12
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e025      	b.n	8004e9e <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004e56:	230c      	movs	r3, #12
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	320a      	adds	r2, #10
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	58d3      	ldr	r3, [r2, r3]
 8004e64:	0019      	movs	r1, r3
 8004e66:	f000 fed7 	bl	8005c18 <strstr>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8004e80:	230c      	movs	r3, #12
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	230f      	movs	r3, #15
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
        break;
 8004e90:	e00c      	b.n	8004eac <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8004e92:	210c      	movs	r1, #12
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8adb      	ldrh	r3, [r3, #22]
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	18ba      	adds	r2, r7, r2
 8004ea6:	8812      	ldrh	r2, [r2, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3d2      	bcc.n	8004e52 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8004eac:	230f      	movs	r3, #15
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b004      	add	sp, #16
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7fe fedc 	bl	8003c84 <HAL_UART_GetError>
 8004ecc:	1e03      	subs	r3, r0, #0
 8004ece:	d01f      	beq.n	8004f10 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4252      	negs	r2, r2
 8004eda:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fe fae7 	bl	80034b4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69d9      	ldr	r1, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8a9b      	ldrh	r3, [r3, #20]
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	f7ff fe3b 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7fe fea3 	bl	8003c60 <HAL_UART_GetState>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	2b22      	cmp	r3, #34	@ 0x22
 8004f1e:	d027      	beq.n	8004f70 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fe fe9b 	bl	8003c60 <HAL_UART_GetState>
 8004f2a:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8004f2c:	2b23      	cmp	r3, #35	@ 0x23
 8004f2e:	d01f      	beq.n	8004f70 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4252      	negs	r2, r2
 8004f3a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7fe fab7 	bl	80034b4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69d9      	ldr	r1, [r3, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8a9b      	ldrh	r3, [r3, #20]
 8004f52:	001a      	movs	r2, r3
 8004f54:	f7ff fe0b 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
  }
}
 8004f70:	46c0      	nop			@ (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	1dbb      	adds	r3, r7, #6
 8004f86:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8004f88:	2317      	movs	r3, #23
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d100      	bne.n	8004f98 <ATC_Init+0x20>
 8004f96:	e07f      	b.n	8005098 <ATC_Init+0x120>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d100      	bne.n	8004fa0 <ATC_Init+0x28>
 8004f9e:	e07b      	b.n	8005098 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	223c      	movs	r2, #60	@ 0x3c
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fe0c 	bl	8005bc4 <memset>
    if (pName != NULL)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	2207      	movs	r2, #7
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 fe18 	bl	8005bf0 <strncpy>
    }
    hAtc->hUart = hUart;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8004fc6:	1dbb      	adds	r3, r7, #6
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff fe37 	bl	8004c3e <ATC_Malloc>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d055      	beq.n	800508a <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	69d8      	ldr	r0, [r3, #28]
 8004fe2:	1dbb      	adds	r3, r7, #6
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f000 fdeb 	bl	8005bc4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8004fee:	1dbb      	adds	r3, r7, #6
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f7ff fe23 	bl	8004c3e <ATC_Malloc>
 8004ff8:	0002      	movs	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d043      	beq.n	800508e <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a18      	ldr	r0, [r3, #32]
 800500a:	1dbb      	adds	r3, r7, #6
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	001a      	movs	r2, r3
 8005010:	2100      	movs	r1, #0
 8005012:	f000 fdd7 	bl	8005bc4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8005016:	1dbb      	adds	r3, r7, #6
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff fe0f 	bl	8004c3e <ATC_Malloc>
 8005020:	0002      	movs	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d031      	beq.n	8005092 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	001a      	movs	r2, r3
 8005038:	2100      	movs	r1, #0
 800503a:	f000 fdc3 	bl	8005bc4 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1dba      	adds	r2, r7, #6
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2201      	movs	r2, #1
 800504e:	4252      	negs	r2, r2
 8005050:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	69d9      	ldr	r1, [r3, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8a9b      	ldrh	r3, [r3, #20]
 800505e:	001a      	movs	r2, r3
 8005060:	f7ff fd85 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d116      	bne.n	8005096 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2104      	movs	r1, #4
 800507c:	438a      	bics	r2, r1
 800507e:	601a      	str	r2, [r3, #0]
    answer = true;
 8005080:	2317      	movs	r3, #23
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e006      	b.n	8005098 <ATC_Init+0x120>
      break;
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	e004      	b.n	8005098 <ATC_Init+0x120>
      break;
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	e002      	b.n	8005098 <ATC_Init+0x120>
      break;
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	e000      	b.n	8005098 <ATC_Init+0x120>
      break;
 8005096:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8005098:	2317      	movs	r3, #23
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	4053      	eors	r3, r2
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d017      	beq.n	80050d8 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	331c      	adds	r3, #28
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff fdd3 	bl	8004c60 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3324      	adds	r3, #36	@ 0x24
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7ff fdca 	bl	8004c60 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	223c      	movs	r2, #60	@ 0x3c
 80050d0:	2100      	movs	r1, #0
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fd76 	bl	8005bc4 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 80050d8:	2317      	movs	r3, #23
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	781b      	ldrb	r3, [r3, #0]
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80050f0:	230f      	movs	r3, #15
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01f      	beq.n	8005142 <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01e      	beq.n	8005146 <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005108:	e002      	b.n	8005110 <ATC_SetEvents+0x2a>
    {
      ev++;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	18d3      	adds	r3, r2, r3
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <ATC_SetEvents+0x46>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	611a      	str	r2, [r3, #16]
    answer = true;
 8005138:	230f      	movs	r3, #15
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e002      	b.n	8005148 <ATC_SetEvents+0x62>
      break;
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	e000      	b.n	8005148 <ATC_SetEvents+0x62>
      break;
 8005146:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005148:	230f      	movs	r3, #15
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	781b      	ldrb	r3, [r3, #0]
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b004      	add	sp, #16
 8005154:	bd80      	pop	{r7, pc}

08005156 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff feaa 	bl	8004eba <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff fe2c 	bl	8004dc6 <ATC_CheckEvents>
}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b002      	add	sp, #8
 8005174:	bd80      	pop	{r7, pc}

08005176 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8005176:	b5b0      	push	{r4, r5, r7, lr}
 8005178:	b08c      	sub	sp, #48	@ 0x30
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8005184:	2300      	movs	r3, #0
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0018      	movs	r0, r3
 800518c:	f7ff fdb7 	bl	8004cfe <ATC_TxBusy>
 8005190:	1e03      	subs	r3, r0, #0
 8005192:	d002      	beq.n	800519a <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8005194:	2304      	movs	r3, #4
 8005196:	425b      	negs	r3, r3
 8005198:	e0e3      	b.n	8005362 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 800519a:	2344      	movs	r3, #68	@ 0x44
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d902      	bls.n	80051aa <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 80051a4:	2305      	movs	r3, #5
 80051a6:	425b      	negs	r3, r3
 80051a8:	e0db      	b.n	8005362 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7ff fe84 	bl	8004eba <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80051b2:	2348      	movs	r3, #72	@ 0x48
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051bc:	e051      	b.n	8005262 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	617a      	str	r2, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7fa ff9c 	bl	8000108 <strlen>
 80051d0:	0003      	movs	r3, r0
 80051d2:	3301      	adds	r3, #1
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fd32 	bl	8004c3e <ATC_Malloc>
 80051da:	0001      	movs	r1, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e0:	320a      	adds	r2, #10
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ea:	320a      	adds	r2, #10
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	58d3      	ldr	r3, [r2, r3]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11c      	bne.n	800522e <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 80051f4:	2327      	movs	r3, #39	@ 0x27
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e00e      	b.n	800521c <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80051fe:	2427      	movs	r4, #39	@ 0x27
 8005200:	193b      	adds	r3, r7, r4
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	330a      	adds	r3, #10
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff fd27 	bl	8004c60 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8005212:	193b      	adds	r3, r7, r4
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	193b      	adds	r3, r7, r4
 8005218:	3201      	adds	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	2327      	movs	r3, #39	@ 0x27
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005224:	429a      	cmp	r2, r3
 8005226:	dcea      	bgt.n	80051fe <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8005228:	2303      	movs	r3, #3
 800522a:	425b      	negs	r3, r3
 800522c:	e099      	b.n	8005362 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005232:	320a      	adds	r2, #10
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	58d3      	ldr	r3, [r2, r3]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fd8e 	bl	8005d5e <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005246:	320a      	adds	r2, #10
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	58d4      	ldr	r4, [r2, r3]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	0018      	movs	r0, r3
 8005250:	f7fa ff5a 	bl	8000108 <strlen>
 8005254:	0003      	movs	r3, r0
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	3301      	adds	r3, #1
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	2344      	movs	r3, #68	@ 0x44
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	429a      	cmp	r2, r3
 800526c:	dba7      	blt.n	80051be <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	0018      	movs	r0, r3
 8005272:	f7ff fd0c 	bl	8004c8e <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0018      	movs	r0, r3
 800527a:	f7fa ff45 	bl	8000108 <strlen>
 800527e:	0003      	movs	r3, r0
 8005280:	b29a      	uxth	r2, r3
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	0018      	movs	r0, r3
 8005288:	f7ff fd14 	bl	8004cb4 <ATC_TxRaw>
 800528c:	0003      	movs	r3, r0
 800528e:	001a      	movs	r2, r3
 8005290:	2301      	movs	r3, #1
 8005292:	4053      	eors	r3, r2
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	425b      	negs	r3, r3
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80052a0:	e010      	b.n	80052c4 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	0011      	movs	r1, r2
 80052a8:	0018      	movs	r0, r3
 80052aa:	f7ff fd43 	bl	8004d34 <ATC_TxWait>
 80052ae:	0003      	movs	r3, r0
 80052b0:	001a      	movs	r2, r3
 80052b2:	2301      	movs	r3, #1
 80052b4:	4053      	eors	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80052bc:	2302      	movs	r3, #2
 80052be:	425b      	negs	r3, r3
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80052c2:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80052c4:	2444      	movs	r4, #68	@ 0x44
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d029      	beq.n	8005322 <ATC_SendReceive+0x1ac>
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d126      	bne.n	8005322 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 80052d4:	f7fc f9fc 	bl	80016d0 <HAL_GetTick>
 80052d8:	0003      	movs	r3, r0
 80052da:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80052e6:	e014      	b.n	8005312 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f000 f8a6 	bl	800543a <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80052ee:	251f      	movs	r5, #31
 80052f0:	197c      	adds	r4, r7, r5
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7ff fd98 	bl	8004e2e <ATC_CheckResponse>
 80052fe:	0003      	movs	r3, r0
 8005300:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8005302:	197b      	adds	r3, r7, r5
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 800530a:	197b      	adds	r3, r7, r5
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005310:	e007      	b.n	8005322 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8005312:	f7fc f9dd 	bl	80016d0 <HAL_GetTick>
 8005316:	0002      	movs	r2, r0
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800531e:	429a      	cmp	r2, r3
 8005320:	d8e2      	bhi.n	80052e8 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8005328:	2326      	movs	r3, #38	@ 0x26
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e00e      	b.n	8005350 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8005332:	2426      	movs	r4, #38	@ 0x26
 8005334:	193b      	adds	r3, r7, r4
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	330a      	adds	r3, #10
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	0018      	movs	r0, r3
 8005342:	f7ff fc8d 	bl	8004c60 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8005346:	193b      	adds	r3, r7, r4
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	193b      	adds	r3, r7, r4
 800534c:	3201      	adds	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	2326      	movs	r3, #38	@ 0x26
 8005352:	18fa      	adds	r2, r7, r3
 8005354:	2344      	movs	r3, #68	@ 0x44
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3e8      	bcc.n	8005332 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8005360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b00c      	add	sp, #48	@ 0x30
 8005368:	bdb0      	pop	{r4, r5, r7, pc}

0800536a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	000a      	movs	r2, r1
 8005374:	1cbb      	adds	r3, r7, #2
 8005376:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005378:	1cbb      	adds	r3, r7, #2
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8a9b      	ldrh	r3, [r3, #20]
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8b1b      	ldrh	r3, [r3, #24]
 8005386:	1acb      	subs	r3, r1, r3
 8005388:	429a      	cmp	r2, r3
 800538a:	dd06      	ble.n	800539a <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8a99      	ldrh	r1, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8b1a      	ldrh	r2, [r3, #24]
 8005394:	1cbb      	adds	r3, r7, #2
 8005396:	1a8a      	subs	r2, r1, r2
 8005398:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	8b12      	ldrh	r2, [r2, #24]
 80053a2:	1898      	adds	r0, r3, r2
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69d9      	ldr	r1, [r3, #28]
 80053a8:	1cbb      	adds	r3, r7, #2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	001a      	movs	r2, r3
 80053ae:	f000 fcde 	bl	8005d6e <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8b1a      	ldrh	r2, [r3, #24]
 80053b6:	1cbb      	adds	r3, r7, #2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69d9      	ldr	r1, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8a9b      	ldrh	r3, [r3, #20]
 80053ce:	001a      	movs	r2, r3
 80053d0:	f7ff fbcd 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
 80053d4:	1e03      	subs	r3, r0, #0
 80053d6:	d10c      	bne.n	80053f2 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2104      	movs	r1, #4
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80053f0:	e01f      	b.n	8005432 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2201      	movs	r2, #1
 80053fa:	4252      	negs	r2, r2
 80053fc:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0018      	movs	r0, r3
 8005404:	f7fe f856 	bl	80034b4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8a9b      	ldrh	r3, [r3, #20]
 8005414:	001a      	movs	r2, r3
 8005416:	f7ff fbaa 	bl	8004b6e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2104      	movs	r1, #4
 800542e:	438a      	bics	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b002      	add	sp, #8
 8005438:	bd80      	pop	{r7, pc}

0800543a <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0018      	movs	r0, r3
 8005446:	f7fc f94d 	bl	80016e4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}

08005452 <atol>:
 8005452:	b510      	push	{r4, lr}
 8005454:	220a      	movs	r2, #10
 8005456:	2100      	movs	r1, #0
 8005458:	f000 f952 	bl	8005700 <strtol>
 800545c:	bd10      	pop	{r4, pc}
	...

08005460 <malloc>:
 8005460:	b510      	push	{r4, lr}
 8005462:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <malloc+0x10>)
 8005464:	0001      	movs	r1, r0
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	f000 f830 	bl	80054cc <_malloc_r>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	20000018 	.word	0x20000018

08005474 <free>:
 8005474:	b510      	push	{r4, lr}
 8005476:	4b03      	ldr	r3, [pc, #12]	@ (8005484 <free+0x10>)
 8005478:	0001      	movs	r1, r0
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	f000 fc80 	bl	8005d80 <_free_r>
 8005480:	bd10      	pop	{r4, pc}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	20000018 	.word	0x20000018

08005488 <sbrk_aligned>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4e0f      	ldr	r6, [pc, #60]	@ (80054c8 <sbrk_aligned+0x40>)
 800548c:	000d      	movs	r5, r1
 800548e:	6831      	ldr	r1, [r6, #0]
 8005490:	0004      	movs	r4, r0
 8005492:	2900      	cmp	r1, #0
 8005494:	d102      	bne.n	800549c <sbrk_aligned+0x14>
 8005496:	f000 fc0f 	bl	8005cb8 <_sbrk_r>
 800549a:	6030      	str	r0, [r6, #0]
 800549c:	0029      	movs	r1, r5
 800549e:	0020      	movs	r0, r4
 80054a0:	f000 fc0a 	bl	8005cb8 <_sbrk_r>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d103      	bne.n	80054b0 <sbrk_aligned+0x28>
 80054a8:	2501      	movs	r5, #1
 80054aa:	426d      	negs	r5, r5
 80054ac:	0028      	movs	r0, r5
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	2303      	movs	r3, #3
 80054b2:	1cc5      	adds	r5, r0, #3
 80054b4:	439d      	bics	r5, r3
 80054b6:	42a8      	cmp	r0, r5
 80054b8:	d0f8      	beq.n	80054ac <sbrk_aligned+0x24>
 80054ba:	1a29      	subs	r1, r5, r0
 80054bc:	0020      	movs	r0, r4
 80054be:	f000 fbfb 	bl	8005cb8 <_sbrk_r>
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1f2      	bne.n	80054ac <sbrk_aligned+0x24>
 80054c6:	e7ef      	b.n	80054a8 <sbrk_aligned+0x20>
 80054c8:	2000023c 	.word	0x2000023c

080054cc <_malloc_r>:
 80054cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ce:	2203      	movs	r2, #3
 80054d0:	1ccb      	adds	r3, r1, #3
 80054d2:	4393      	bics	r3, r2
 80054d4:	3308      	adds	r3, #8
 80054d6:	0005      	movs	r5, r0
 80054d8:	001f      	movs	r7, r3
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d234      	bcs.n	8005548 <_malloc_r+0x7c>
 80054de:	270c      	movs	r7, #12
 80054e0:	42b9      	cmp	r1, r7
 80054e2:	d833      	bhi.n	800554c <_malloc_r+0x80>
 80054e4:	0028      	movs	r0, r5
 80054e6:	f000 f871 	bl	80055cc <__malloc_lock>
 80054ea:	4e37      	ldr	r6, [pc, #220]	@ (80055c8 <_malloc_r+0xfc>)
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	001c      	movs	r4, r3
 80054f0:	2c00      	cmp	r4, #0
 80054f2:	d12f      	bne.n	8005554 <_malloc_r+0x88>
 80054f4:	0039      	movs	r1, r7
 80054f6:	0028      	movs	r0, r5
 80054f8:	f7ff ffc6 	bl	8005488 <sbrk_aligned>
 80054fc:	0004      	movs	r4, r0
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d15f      	bne.n	80055c2 <_malloc_r+0xf6>
 8005502:	6834      	ldr	r4, [r6, #0]
 8005504:	9400      	str	r4, [sp, #0]
 8005506:	9b00      	ldr	r3, [sp, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d14a      	bne.n	80055a2 <_malloc_r+0xd6>
 800550c:	2c00      	cmp	r4, #0
 800550e:	d052      	beq.n	80055b6 <_malloc_r+0xea>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	0028      	movs	r0, r5
 8005514:	18e3      	adds	r3, r4, r3
 8005516:	9900      	ldr	r1, [sp, #0]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f000 fbcd 	bl	8005cb8 <_sbrk_r>
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	4283      	cmp	r3, r0
 8005522:	d148      	bne.n	80055b6 <_malloc_r+0xea>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	0028      	movs	r0, r5
 8005528:	1aff      	subs	r7, r7, r3
 800552a:	0039      	movs	r1, r7
 800552c:	f7ff ffac 	bl	8005488 <sbrk_aligned>
 8005530:	3001      	adds	r0, #1
 8005532:	d040      	beq.n	80055b6 <_malloc_r+0xea>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	19db      	adds	r3, r3, r7
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	2a00      	cmp	r2, #0
 8005540:	d133      	bne.n	80055aa <_malloc_r+0xde>
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	e019      	b.n	800557c <_malloc_r+0xb0>
 8005548:	2b00      	cmp	r3, #0
 800554a:	dac9      	bge.n	80054e0 <_malloc_r+0x14>
 800554c:	230c      	movs	r3, #12
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	2000      	movs	r0, #0
 8005552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005554:	6821      	ldr	r1, [r4, #0]
 8005556:	1bc9      	subs	r1, r1, r7
 8005558:	d420      	bmi.n	800559c <_malloc_r+0xd0>
 800555a:	290b      	cmp	r1, #11
 800555c:	d90a      	bls.n	8005574 <_malloc_r+0xa8>
 800555e:	19e2      	adds	r2, r4, r7
 8005560:	6027      	str	r7, [r4, #0]
 8005562:	42a3      	cmp	r3, r4
 8005564:	d104      	bne.n	8005570 <_malloc_r+0xa4>
 8005566:	6032      	str	r2, [r6, #0]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	6011      	str	r1, [r2, #0]
 800556c:	6053      	str	r3, [r2, #4]
 800556e:	e005      	b.n	800557c <_malloc_r+0xb0>
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	e7f9      	b.n	8005568 <_malloc_r+0x9c>
 8005574:	6862      	ldr	r2, [r4, #4]
 8005576:	42a3      	cmp	r3, r4
 8005578:	d10e      	bne.n	8005598 <_malloc_r+0xcc>
 800557a:	6032      	str	r2, [r6, #0]
 800557c:	0028      	movs	r0, r5
 800557e:	f000 f82d 	bl	80055dc <__malloc_unlock>
 8005582:	0020      	movs	r0, r4
 8005584:	2207      	movs	r2, #7
 8005586:	300b      	adds	r0, #11
 8005588:	1d23      	adds	r3, r4, #4
 800558a:	4390      	bics	r0, r2
 800558c:	1ac2      	subs	r2, r0, r3
 800558e:	4298      	cmp	r0, r3
 8005590:	d0df      	beq.n	8005552 <_malloc_r+0x86>
 8005592:	1a1b      	subs	r3, r3, r0
 8005594:	50a3      	str	r3, [r4, r2]
 8005596:	e7dc      	b.n	8005552 <_malloc_r+0x86>
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	e7ef      	b.n	800557c <_malloc_r+0xb0>
 800559c:	0023      	movs	r3, r4
 800559e:	6864      	ldr	r4, [r4, #4]
 80055a0:	e7a6      	b.n	80054f0 <_malloc_r+0x24>
 80055a2:	9c00      	ldr	r4, [sp, #0]
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	e7ad      	b.n	8005506 <_malloc_r+0x3a>
 80055aa:	001a      	movs	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	d1fb      	bne.n	80055aa <_malloc_r+0xde>
 80055b2:	2300      	movs	r3, #0
 80055b4:	e7da      	b.n	800556c <_malloc_r+0xa0>
 80055b6:	230c      	movs	r3, #12
 80055b8:	0028      	movs	r0, r5
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f000 f80e 	bl	80055dc <__malloc_unlock>
 80055c0:	e7c6      	b.n	8005550 <_malloc_r+0x84>
 80055c2:	6007      	str	r7, [r0, #0]
 80055c4:	e7da      	b.n	800557c <_malloc_r+0xb0>
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	20000240 	.word	0x20000240

080055cc <__malloc_lock>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4802      	ldr	r0, [pc, #8]	@ (80055d8 <__malloc_lock+0xc>)
 80055d0:	f000 fbc3 	bl	8005d5a <__retarget_lock_acquire_recursive>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	20000384 	.word	0x20000384

080055dc <__malloc_unlock>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	4802      	ldr	r0, [pc, #8]	@ (80055e8 <__malloc_unlock+0xc>)
 80055e0:	f000 fbbc 	bl	8005d5c <__retarget_lock_release_recursive>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	20000384 	.word	0x20000384

080055ec <_strtol_l.isra.0>:
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ee:	b085      	sub	sp, #20
 80055f0:	0017      	movs	r7, r2
 80055f2:	001e      	movs	r6, r3
 80055f4:	9003      	str	r0, [sp, #12]
 80055f6:	9101      	str	r1, [sp, #4]
 80055f8:	2b24      	cmp	r3, #36	@ 0x24
 80055fa:	d823      	bhi.n	8005644 <_strtol_l.isra.0+0x58>
 80055fc:	000c      	movs	r4, r1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d020      	beq.n	8005644 <_strtol_l.isra.0+0x58>
 8005602:	4b3d      	ldr	r3, [pc, #244]	@ (80056f8 <_strtol_l.isra.0+0x10c>)
 8005604:	2208      	movs	r2, #8
 8005606:	469c      	mov	ip, r3
 8005608:	0023      	movs	r3, r4
 800560a:	4661      	mov	r1, ip
 800560c:	781d      	ldrb	r5, [r3, #0]
 800560e:	3401      	adds	r4, #1
 8005610:	5d48      	ldrb	r0, [r1, r5]
 8005612:	0001      	movs	r1, r0
 8005614:	4011      	ands	r1, r2
 8005616:	4210      	tst	r0, r2
 8005618:	d1f6      	bne.n	8005608 <_strtol_l.isra.0+0x1c>
 800561a:	2d2d      	cmp	r5, #45	@ 0x2d
 800561c:	d119      	bne.n	8005652 <_strtol_l.isra.0+0x66>
 800561e:	7825      	ldrb	r5, [r4, #0]
 8005620:	1c9c      	adds	r4, r3, #2
 8005622:	2301      	movs	r3, #1
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2210      	movs	r2, #16
 8005628:	0033      	movs	r3, r6
 800562a:	4393      	bics	r3, r2
 800562c:	d11d      	bne.n	800566a <_strtol_l.isra.0+0x7e>
 800562e:	2d30      	cmp	r5, #48	@ 0x30
 8005630:	d115      	bne.n	800565e <_strtol_l.isra.0+0x72>
 8005632:	2120      	movs	r1, #32
 8005634:	7823      	ldrb	r3, [r4, #0]
 8005636:	438b      	bics	r3, r1
 8005638:	2b58      	cmp	r3, #88	@ 0x58
 800563a:	d110      	bne.n	800565e <_strtol_l.isra.0+0x72>
 800563c:	7865      	ldrb	r5, [r4, #1]
 800563e:	3402      	adds	r4, #2
 8005640:	2610      	movs	r6, #16
 8005642:	e012      	b.n	800566a <_strtol_l.isra.0+0x7e>
 8005644:	f000 fb5e 	bl	8005d04 <__errno>
 8005648:	2316      	movs	r3, #22
 800564a:	6003      	str	r3, [r0, #0]
 800564c:	2000      	movs	r0, #0
 800564e:	b005      	add	sp, #20
 8005650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005652:	9100      	str	r1, [sp, #0]
 8005654:	2d2b      	cmp	r5, #43	@ 0x2b
 8005656:	d1e6      	bne.n	8005626 <_strtol_l.isra.0+0x3a>
 8005658:	7825      	ldrb	r5, [r4, #0]
 800565a:	1c9c      	adds	r4, r3, #2
 800565c:	e7e3      	b.n	8005626 <_strtol_l.isra.0+0x3a>
 800565e:	2e00      	cmp	r6, #0
 8005660:	d1ee      	bne.n	8005640 <_strtol_l.isra.0+0x54>
 8005662:	360a      	adds	r6, #10
 8005664:	2d30      	cmp	r5, #48	@ 0x30
 8005666:	d100      	bne.n	800566a <_strtol_l.isra.0+0x7e>
 8005668:	3e02      	subs	r6, #2
 800566a:	4a24      	ldr	r2, [pc, #144]	@ (80056fc <_strtol_l.isra.0+0x110>)
 800566c:	9b00      	ldr	r3, [sp, #0]
 800566e:	4694      	mov	ip, r2
 8005670:	4463      	add	r3, ip
 8005672:	0031      	movs	r1, r6
 8005674:	0018      	movs	r0, r3
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	f7fa fdde 	bl	8000238 <__aeabi_uidivmod>
 800567c:	2200      	movs	r2, #0
 800567e:	4684      	mov	ip, r0
 8005680:	0010      	movs	r0, r2
 8005682:	002b      	movs	r3, r5
 8005684:	3b30      	subs	r3, #48	@ 0x30
 8005686:	2b09      	cmp	r3, #9
 8005688:	d811      	bhi.n	80056ae <_strtol_l.isra.0+0xc2>
 800568a:	001d      	movs	r5, r3
 800568c:	42ae      	cmp	r6, r5
 800568e:	dd1d      	ble.n	80056cc <_strtol_l.isra.0+0xe0>
 8005690:	1c53      	adds	r3, r2, #1
 8005692:	d009      	beq.n	80056a8 <_strtol_l.isra.0+0xbc>
 8005694:	2201      	movs	r2, #1
 8005696:	4252      	negs	r2, r2
 8005698:	4584      	cmp	ip, r0
 800569a:	d305      	bcc.n	80056a8 <_strtol_l.isra.0+0xbc>
 800569c:	d101      	bne.n	80056a2 <_strtol_l.isra.0+0xb6>
 800569e:	42a9      	cmp	r1, r5
 80056a0:	db11      	blt.n	80056c6 <_strtol_l.isra.0+0xda>
 80056a2:	2201      	movs	r2, #1
 80056a4:	4370      	muls	r0, r6
 80056a6:	1828      	adds	r0, r5, r0
 80056a8:	7825      	ldrb	r5, [r4, #0]
 80056aa:	3401      	adds	r4, #1
 80056ac:	e7e9      	b.n	8005682 <_strtol_l.isra.0+0x96>
 80056ae:	002b      	movs	r3, r5
 80056b0:	3b41      	subs	r3, #65	@ 0x41
 80056b2:	2b19      	cmp	r3, #25
 80056b4:	d801      	bhi.n	80056ba <_strtol_l.isra.0+0xce>
 80056b6:	3d37      	subs	r5, #55	@ 0x37
 80056b8:	e7e8      	b.n	800568c <_strtol_l.isra.0+0xa0>
 80056ba:	002b      	movs	r3, r5
 80056bc:	3b61      	subs	r3, #97	@ 0x61
 80056be:	2b19      	cmp	r3, #25
 80056c0:	d804      	bhi.n	80056cc <_strtol_l.isra.0+0xe0>
 80056c2:	3d57      	subs	r5, #87	@ 0x57
 80056c4:	e7e2      	b.n	800568c <_strtol_l.isra.0+0xa0>
 80056c6:	2201      	movs	r2, #1
 80056c8:	4252      	negs	r2, r2
 80056ca:	e7ed      	b.n	80056a8 <_strtol_l.isra.0+0xbc>
 80056cc:	1c53      	adds	r3, r2, #1
 80056ce:	d108      	bne.n	80056e2 <_strtol_l.isra.0+0xf6>
 80056d0:	2322      	movs	r3, #34	@ 0x22
 80056d2:	9a03      	ldr	r2, [sp, #12]
 80056d4:	9802      	ldr	r0, [sp, #8]
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	2f00      	cmp	r7, #0
 80056da:	d0b8      	beq.n	800564e <_strtol_l.isra.0+0x62>
 80056dc:	1e63      	subs	r3, r4, #1
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	e007      	b.n	80056f2 <_strtol_l.isra.0+0x106>
 80056e2:	9b00      	ldr	r3, [sp, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d000      	beq.n	80056ea <_strtol_l.isra.0+0xfe>
 80056e8:	4240      	negs	r0, r0
 80056ea:	2f00      	cmp	r7, #0
 80056ec:	d0af      	beq.n	800564e <_strtol_l.isra.0+0x62>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d1f4      	bne.n	80056dc <_strtol_l.isra.0+0xf0>
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	e7aa      	b.n	800564e <_strtol_l.isra.0+0x62>
 80056f8:	08006e25 	.word	0x08006e25
 80056fc:	7fffffff 	.word	0x7fffffff

08005700 <strtol>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4c04      	ldr	r4, [pc, #16]	@ (8005714 <strtol+0x14>)
 8005704:	0013      	movs	r3, r2
 8005706:	000a      	movs	r2, r1
 8005708:	0001      	movs	r1, r0
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	f7ff ff6e 	bl	80055ec <_strtol_l.isra.0>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	20000018 	.word	0x20000018

08005718 <std>:
 8005718:	2300      	movs	r3, #0
 800571a:	b510      	push	{r4, lr}
 800571c:	0004      	movs	r4, r0
 800571e:	6003      	str	r3, [r0, #0]
 8005720:	6043      	str	r3, [r0, #4]
 8005722:	6083      	str	r3, [r0, #8]
 8005724:	8181      	strh	r1, [r0, #12]
 8005726:	6643      	str	r3, [r0, #100]	@ 0x64
 8005728:	81c2      	strh	r2, [r0, #14]
 800572a:	6103      	str	r3, [r0, #16]
 800572c:	6143      	str	r3, [r0, #20]
 800572e:	6183      	str	r3, [r0, #24]
 8005730:	0019      	movs	r1, r3
 8005732:	2208      	movs	r2, #8
 8005734:	305c      	adds	r0, #92	@ 0x5c
 8005736:	f000 fa45 	bl	8005bc4 <memset>
 800573a:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <std+0x50>)
 800573c:	6224      	str	r4, [r4, #32]
 800573e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <std+0x54>)
 8005742:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005744:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <std+0x58>)
 8005746:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <std+0x5c>)
 800574a:	6323      	str	r3, [r4, #48]	@ 0x30
 800574c:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <std+0x60>)
 800574e:	429c      	cmp	r4, r3
 8005750:	d005      	beq.n	800575e <std+0x46>
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <std+0x64>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d002      	beq.n	800575e <std+0x46>
 8005758:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <std+0x68>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d103      	bne.n	8005766 <std+0x4e>
 800575e:	0020      	movs	r0, r4
 8005760:	3058      	adds	r0, #88	@ 0x58
 8005762:	f000 faf9 	bl	8005d58 <__retarget_lock_init_recursive>
 8005766:	bd10      	pop	{r4, pc}
 8005768:	080059ed 	.word	0x080059ed
 800576c:	08005a15 	.word	0x08005a15
 8005770:	08005a4d 	.word	0x08005a4d
 8005774:	08005a79 	.word	0x08005a79
 8005778:	20000244 	.word	0x20000244
 800577c:	200002ac 	.word	0x200002ac
 8005780:	20000314 	.word	0x20000314

08005784 <stdio_exit_handler>:
 8005784:	b510      	push	{r4, lr}
 8005786:	4a03      	ldr	r2, [pc, #12]	@ (8005794 <stdio_exit_handler+0x10>)
 8005788:	4903      	ldr	r1, [pc, #12]	@ (8005798 <stdio_exit_handler+0x14>)
 800578a:	4804      	ldr	r0, [pc, #16]	@ (800579c <stdio_exit_handler+0x18>)
 800578c:	f000 f86c 	bl	8005868 <_fwalk_sglue>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	46c0      	nop			@ (mov r8, r8)
 8005794:	2000000c 	.word	0x2000000c
 8005798:	0800675d 	.word	0x0800675d
 800579c:	2000001c 	.word	0x2000001c

080057a0 <cleanup_stdio>:
 80057a0:	6841      	ldr	r1, [r0, #4]
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <cleanup_stdio+0x30>)
 80057a4:	b510      	push	{r4, lr}
 80057a6:	0004      	movs	r4, r0
 80057a8:	4299      	cmp	r1, r3
 80057aa:	d001      	beq.n	80057b0 <cleanup_stdio+0x10>
 80057ac:	f000 ffd6 	bl	800675c <_fflush_r>
 80057b0:	68a1      	ldr	r1, [r4, #8]
 80057b2:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <cleanup_stdio+0x34>)
 80057b4:	4299      	cmp	r1, r3
 80057b6:	d002      	beq.n	80057be <cleanup_stdio+0x1e>
 80057b8:	0020      	movs	r0, r4
 80057ba:	f000 ffcf 	bl	800675c <_fflush_r>
 80057be:	68e1      	ldr	r1, [r4, #12]
 80057c0:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <cleanup_stdio+0x38>)
 80057c2:	4299      	cmp	r1, r3
 80057c4:	d002      	beq.n	80057cc <cleanup_stdio+0x2c>
 80057c6:	0020      	movs	r0, r4
 80057c8:	f000 ffc8 	bl	800675c <_fflush_r>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	20000244 	.word	0x20000244
 80057d4:	200002ac 	.word	0x200002ac
 80057d8:	20000314 	.word	0x20000314

080057dc <global_stdio_init.part.0>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <global_stdio_init.part.0+0x28>)
 80057e0:	4a09      	ldr	r2, [pc, #36]	@ (8005808 <global_stdio_init.part.0+0x2c>)
 80057e2:	2104      	movs	r1, #4
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	4809      	ldr	r0, [pc, #36]	@ (800580c <global_stdio_init.part.0+0x30>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f7ff ff95 	bl	8005718 <std>
 80057ee:	2201      	movs	r2, #1
 80057f0:	2109      	movs	r1, #9
 80057f2:	4807      	ldr	r0, [pc, #28]	@ (8005810 <global_stdio_init.part.0+0x34>)
 80057f4:	f7ff ff90 	bl	8005718 <std>
 80057f8:	2202      	movs	r2, #2
 80057fa:	2112      	movs	r1, #18
 80057fc:	4805      	ldr	r0, [pc, #20]	@ (8005814 <global_stdio_init.part.0+0x38>)
 80057fe:	f7ff ff8b 	bl	8005718 <std>
 8005802:	bd10      	pop	{r4, pc}
 8005804:	2000037c 	.word	0x2000037c
 8005808:	08005785 	.word	0x08005785
 800580c:	20000244 	.word	0x20000244
 8005810:	200002ac 	.word	0x200002ac
 8005814:	20000314 	.word	0x20000314

08005818 <__sfp_lock_acquire>:
 8005818:	b510      	push	{r4, lr}
 800581a:	4802      	ldr	r0, [pc, #8]	@ (8005824 <__sfp_lock_acquire+0xc>)
 800581c:	f000 fa9d 	bl	8005d5a <__retarget_lock_acquire_recursive>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	20000385 	.word	0x20000385

08005828 <__sfp_lock_release>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4802      	ldr	r0, [pc, #8]	@ (8005834 <__sfp_lock_release+0xc>)
 800582c:	f000 fa96 	bl	8005d5c <__retarget_lock_release_recursive>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	20000385 	.word	0x20000385

08005838 <__sinit>:
 8005838:	b510      	push	{r4, lr}
 800583a:	0004      	movs	r4, r0
 800583c:	f7ff ffec 	bl	8005818 <__sfp_lock_acquire>
 8005840:	6a23      	ldr	r3, [r4, #32]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <__sinit+0x14>
 8005846:	f7ff ffef 	bl	8005828 <__sfp_lock_release>
 800584a:	bd10      	pop	{r4, pc}
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <__sinit+0x28>)
 800584e:	6223      	str	r3, [r4, #32]
 8005850:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <__sinit+0x2c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f6      	bne.n	8005846 <__sinit+0xe>
 8005858:	f7ff ffc0 	bl	80057dc <global_stdio_init.part.0>
 800585c:	e7f3      	b.n	8005846 <__sinit+0xe>
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	080057a1 	.word	0x080057a1
 8005864:	2000037c 	.word	0x2000037c

08005868 <_fwalk_sglue>:
 8005868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586a:	0014      	movs	r4, r2
 800586c:	2600      	movs	r6, #0
 800586e:	9000      	str	r0, [sp, #0]
 8005870:	9101      	str	r1, [sp, #4]
 8005872:	68a5      	ldr	r5, [r4, #8]
 8005874:	6867      	ldr	r7, [r4, #4]
 8005876:	3f01      	subs	r7, #1
 8005878:	d504      	bpl.n	8005884 <_fwalk_sglue+0x1c>
 800587a:	6824      	ldr	r4, [r4, #0]
 800587c:	2c00      	cmp	r4, #0
 800587e:	d1f8      	bne.n	8005872 <_fwalk_sglue+0xa>
 8005880:	0030      	movs	r0, r6
 8005882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005884:	89ab      	ldrh	r3, [r5, #12]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d908      	bls.n	800589c <_fwalk_sglue+0x34>
 800588a:	220e      	movs	r2, #14
 800588c:	5eab      	ldrsh	r3, [r5, r2]
 800588e:	3301      	adds	r3, #1
 8005890:	d004      	beq.n	800589c <_fwalk_sglue+0x34>
 8005892:	0029      	movs	r1, r5
 8005894:	9800      	ldr	r0, [sp, #0]
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	4798      	blx	r3
 800589a:	4306      	orrs	r6, r0
 800589c:	3568      	adds	r5, #104	@ 0x68
 800589e:	e7ea      	b.n	8005876 <_fwalk_sglue+0xe>

080058a0 <iprintf>:
 80058a0:	b40f      	push	{r0, r1, r2, r3}
 80058a2:	b507      	push	{r0, r1, r2, lr}
 80058a4:	4905      	ldr	r1, [pc, #20]	@ (80058bc <iprintf+0x1c>)
 80058a6:	ab04      	add	r3, sp, #16
 80058a8:	6808      	ldr	r0, [r1, #0]
 80058aa:	cb04      	ldmia	r3!, {r2}
 80058ac:	6881      	ldr	r1, [r0, #8]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	f000 fc36 	bl	8006120 <_vfiprintf_r>
 80058b4:	b003      	add	sp, #12
 80058b6:	bc08      	pop	{r3}
 80058b8:	b004      	add	sp, #16
 80058ba:	4718      	bx	r3
 80058bc:	20000018 	.word	0x20000018

080058c0 <_puts_r>:
 80058c0:	6a03      	ldr	r3, [r0, #32]
 80058c2:	b570      	push	{r4, r5, r6, lr}
 80058c4:	0005      	movs	r5, r0
 80058c6:	000e      	movs	r6, r1
 80058c8:	6884      	ldr	r4, [r0, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <_puts_r+0x12>
 80058ce:	f7ff ffb3 	bl	8005838 <__sinit>
 80058d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058d4:	07db      	lsls	r3, r3, #31
 80058d6:	d405      	bmi.n	80058e4 <_puts_r+0x24>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	059b      	lsls	r3, r3, #22
 80058dc:	d402      	bmi.n	80058e4 <_puts_r+0x24>
 80058de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058e0:	f000 fa3b 	bl	8005d5a <__retarget_lock_acquire_recursive>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	071b      	lsls	r3, r3, #28
 80058e8:	d502      	bpl.n	80058f0 <_puts_r+0x30>
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11f      	bne.n	8005930 <_puts_r+0x70>
 80058f0:	0021      	movs	r1, r4
 80058f2:	0028      	movs	r0, r5
 80058f4:	f000 f908 	bl	8005b08 <__swsetup_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d019      	beq.n	8005930 <_puts_r+0x70>
 80058fc:	2501      	movs	r5, #1
 80058fe:	426d      	negs	r5, r5
 8005900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005902:	07db      	lsls	r3, r3, #31
 8005904:	d405      	bmi.n	8005912 <_puts_r+0x52>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	d402      	bmi.n	8005912 <_puts_r+0x52>
 800590c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590e:	f000 fa25 	bl	8005d5c <__retarget_lock_release_recursive>
 8005912:	0028      	movs	r0, r5
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	3601      	adds	r6, #1
 8005918:	60a3      	str	r3, [r4, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	da04      	bge.n	8005928 <_puts_r+0x68>
 800591e:	69a2      	ldr	r2, [r4, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	dc16      	bgt.n	8005952 <_puts_r+0x92>
 8005924:	290a      	cmp	r1, #10
 8005926:	d014      	beq.n	8005952 <_puts_r+0x92>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	7019      	strb	r1, [r3, #0]
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	7831      	ldrb	r1, [r6, #0]
 8005934:	3b01      	subs	r3, #1
 8005936:	2900      	cmp	r1, #0
 8005938:	d1ed      	bne.n	8005916 <_puts_r+0x56>
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da0f      	bge.n	8005960 <_puts_r+0xa0>
 8005940:	0022      	movs	r2, r4
 8005942:	0028      	movs	r0, r5
 8005944:	310a      	adds	r1, #10
 8005946:	f000 f89d 	bl	8005a84 <__swbuf_r>
 800594a:	3001      	adds	r0, #1
 800594c:	d0d6      	beq.n	80058fc <_puts_r+0x3c>
 800594e:	250a      	movs	r5, #10
 8005950:	e7d6      	b.n	8005900 <_puts_r+0x40>
 8005952:	0022      	movs	r2, r4
 8005954:	0028      	movs	r0, r5
 8005956:	f000 f895 	bl	8005a84 <__swbuf_r>
 800595a:	3001      	adds	r0, #1
 800595c:	d1e8      	bne.n	8005930 <_puts_r+0x70>
 800595e:	e7cd      	b.n	80058fc <_puts_r+0x3c>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	220a      	movs	r2, #10
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e7f0      	b.n	800594e <_puts_r+0x8e>

0800596c <puts>:
 800596c:	b510      	push	{r4, lr}
 800596e:	4b03      	ldr	r3, [pc, #12]	@ (800597c <puts+0x10>)
 8005970:	0001      	movs	r1, r0
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	f7ff ffa4 	bl	80058c0 <_puts_r>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	20000018 	.word	0x20000018

08005980 <sniprintf>:
 8005980:	b40c      	push	{r2, r3}
 8005982:	b530      	push	{r4, r5, lr}
 8005984:	4b18      	ldr	r3, [pc, #96]	@ (80059e8 <sniprintf+0x68>)
 8005986:	000c      	movs	r4, r1
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	b09d      	sub	sp, #116	@ 0x74
 800598c:	2900      	cmp	r1, #0
 800598e:	da08      	bge.n	80059a2 <sniprintf+0x22>
 8005990:	238b      	movs	r3, #139	@ 0x8b
 8005992:	2001      	movs	r0, #1
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	4240      	negs	r0, r0
 8005998:	b01d      	add	sp, #116	@ 0x74
 800599a:	bc30      	pop	{r4, r5}
 800599c:	bc08      	pop	{r3}
 800599e:	b002      	add	sp, #8
 80059a0:	4718      	bx	r3
 80059a2:	2382      	movs	r3, #130	@ 0x82
 80059a4:	466a      	mov	r2, sp
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	8293      	strh	r3, [r2, #20]
 80059aa:	2300      	movs	r3, #0
 80059ac:	9002      	str	r0, [sp, #8]
 80059ae:	931b      	str	r3, [sp, #108]	@ 0x6c
 80059b0:	9006      	str	r0, [sp, #24]
 80059b2:	4299      	cmp	r1, r3
 80059b4:	d000      	beq.n	80059b8 <sniprintf+0x38>
 80059b6:	1e4b      	subs	r3, r1, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9307      	str	r3, [sp, #28]
 80059bc:	2301      	movs	r3, #1
 80059be:	466a      	mov	r2, sp
 80059c0:	425b      	negs	r3, r3
 80059c2:	82d3      	strh	r3, [r2, #22]
 80059c4:	0028      	movs	r0, r5
 80059c6:	ab21      	add	r3, sp, #132	@ 0x84
 80059c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059ca:	a902      	add	r1, sp, #8
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	f000 fa81 	bl	8005ed4 <_svfiprintf_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	da01      	bge.n	80059da <sniprintf+0x5a>
 80059d6:	238b      	movs	r3, #139	@ 0x8b
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	2c00      	cmp	r4, #0
 80059dc:	d0dc      	beq.n	8005998 <sniprintf+0x18>
 80059de:	2200      	movs	r2, #0
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e7d8      	b.n	8005998 <sniprintf+0x18>
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	20000018 	.word	0x20000018

080059ec <__sread>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	000c      	movs	r4, r1
 80059f0:	250e      	movs	r5, #14
 80059f2:	5f49      	ldrsh	r1, [r1, r5]
 80059f4:	f000 f94c 	bl	8005c90 <_read_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db03      	blt.n	8005a04 <__sread+0x18>
 80059fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059fe:	181b      	adds	r3, r3, r0
 8005a00:	6563      	str	r3, [r4, #84]	@ 0x54
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	4a02      	ldr	r2, [pc, #8]	@ (8005a10 <__sread+0x24>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	e7f9      	b.n	8005a02 <__sread+0x16>
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	ffffefff 	.word	0xffffefff

08005a14 <__swrite>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	001f      	movs	r7, r3
 8005a18:	898b      	ldrh	r3, [r1, #12]
 8005a1a:	0005      	movs	r5, r0
 8005a1c:	000c      	movs	r4, r1
 8005a1e:	0016      	movs	r6, r2
 8005a20:	05db      	lsls	r3, r3, #23
 8005a22:	d505      	bpl.n	8005a30 <__swrite+0x1c>
 8005a24:	230e      	movs	r3, #14
 8005a26:	5ec9      	ldrsh	r1, [r1, r3]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	f000 f91c 	bl	8005c68 <_lseek_r>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	4a05      	ldr	r2, [pc, #20]	@ (8005a48 <__swrite+0x34>)
 8005a34:	0028      	movs	r0, r5
 8005a36:	4013      	ands	r3, r2
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	0032      	movs	r2, r6
 8005a3c:	230e      	movs	r3, #14
 8005a3e:	5ee1      	ldrsh	r1, [r4, r3]
 8005a40:	003b      	movs	r3, r7
 8005a42:	f000 f94b 	bl	8005cdc <_write_r>
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	ffffefff 	.word	0xffffefff

08005a4c <__sseek>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	000c      	movs	r4, r1
 8005a50:	250e      	movs	r5, #14
 8005a52:	5f49      	ldrsh	r1, [r1, r5]
 8005a54:	f000 f908 	bl	8005c68 <_lseek_r>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	d103      	bne.n	8005a66 <__sseek+0x1a>
 8005a5e:	4a05      	ldr	r2, [pc, #20]	@ (8005a74 <__sseek+0x28>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	2280      	movs	r2, #128	@ 0x80
 8005a68:	0152      	lsls	r2, r2, #5
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a70:	e7f8      	b.n	8005a64 <__sseek+0x18>
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	ffffefff 	.word	0xffffefff

08005a78 <__sclose>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	230e      	movs	r3, #14
 8005a7c:	5ec9      	ldrsh	r1, [r1, r3]
 8005a7e:	f000 f8e1 	bl	8005c44 <_close_r>
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <__swbuf_r>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	0006      	movs	r6, r0
 8005a88:	000d      	movs	r5, r1
 8005a8a:	0014      	movs	r4, r2
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x16>
 8005a90:	6a03      	ldr	r3, [r0, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <__swbuf_r+0x16>
 8005a96:	f7ff fecf 	bl	8005838 <__sinit>
 8005a9a:	69a3      	ldr	r3, [r4, #24]
 8005a9c:	60a3      	str	r3, [r4, #8]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	071b      	lsls	r3, r3, #28
 8005aa2:	d502      	bpl.n	8005aaa <__swbuf_r+0x26>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <__swbuf_r+0x3a>
 8005aaa:	0021      	movs	r1, r4
 8005aac:	0030      	movs	r0, r6
 8005aae:	f000 f82b 	bl	8005b08 <__swsetup_r>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d003      	beq.n	8005abe <__swbuf_r+0x3a>
 8005ab6:	2501      	movs	r5, #1
 8005ab8:	426d      	negs	r5, r5
 8005aba:	0028      	movs	r0, r5
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	b2ef      	uxtb	r7, r5
 8005ac4:	1ac0      	subs	r0, r0, r3
 8005ac6:	6963      	ldr	r3, [r4, #20]
 8005ac8:	b2ed      	uxtb	r5, r5
 8005aca:	4283      	cmp	r3, r0
 8005acc:	dc05      	bgt.n	8005ada <__swbuf_r+0x56>
 8005ace:	0021      	movs	r1, r4
 8005ad0:	0030      	movs	r0, r6
 8005ad2:	f000 fe43 	bl	800675c <_fflush_r>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d1ed      	bne.n	8005ab6 <__swbuf_r+0x32>
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	3001      	adds	r0, #1
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	701f      	strb	r7, [r3, #0]
 8005aea:	6963      	ldr	r3, [r4, #20]
 8005aec:	4283      	cmp	r3, r0
 8005aee:	d004      	beq.n	8005afa <__swbuf_r+0x76>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	07db      	lsls	r3, r3, #31
 8005af4:	d5e1      	bpl.n	8005aba <__swbuf_r+0x36>
 8005af6:	2d0a      	cmp	r5, #10
 8005af8:	d1df      	bne.n	8005aba <__swbuf_r+0x36>
 8005afa:	0021      	movs	r1, r4
 8005afc:	0030      	movs	r0, r6
 8005afe:	f000 fe2d 	bl	800675c <_fflush_r>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d0d9      	beq.n	8005aba <__swbuf_r+0x36>
 8005b06:	e7d6      	b.n	8005ab6 <__swbuf_r+0x32>

08005b08 <__swsetup_r>:
 8005b08:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc0 <__swsetup_r+0xb8>)
 8005b0a:	b570      	push	{r4, r5, r6, lr}
 8005b0c:	0005      	movs	r5, r0
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	000c      	movs	r4, r1
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d004      	beq.n	8005b20 <__swsetup_r+0x18>
 8005b16:	6a03      	ldr	r3, [r0, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <__swsetup_r+0x18>
 8005b1c:	f7ff fe8c 	bl	8005838 <__sinit>
 8005b20:	220c      	movs	r2, #12
 8005b22:	5ea3      	ldrsh	r3, [r4, r2]
 8005b24:	071a      	lsls	r2, r3, #28
 8005b26:	d423      	bmi.n	8005b70 <__swsetup_r+0x68>
 8005b28:	06da      	lsls	r2, r3, #27
 8005b2a:	d407      	bmi.n	8005b3c <__swsetup_r+0x34>
 8005b2c:	2209      	movs	r2, #9
 8005b2e:	602a      	str	r2, [r5, #0]
 8005b30:	2240      	movs	r2, #64	@ 0x40
 8005b32:	2001      	movs	r0, #1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	4240      	negs	r0, r0
 8005b3a:	e03a      	b.n	8005bb2 <__swsetup_r+0xaa>
 8005b3c:	075b      	lsls	r3, r3, #29
 8005b3e:	d513      	bpl.n	8005b68 <__swsetup_r+0x60>
 8005b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d008      	beq.n	8005b58 <__swsetup_r+0x50>
 8005b46:	0023      	movs	r3, r4
 8005b48:	3344      	adds	r3, #68	@ 0x44
 8005b4a:	4299      	cmp	r1, r3
 8005b4c:	d002      	beq.n	8005b54 <__swsetup_r+0x4c>
 8005b4e:	0028      	movs	r0, r5
 8005b50:	f000 f916 	bl	8005d80 <_free_r>
 8005b54:	2300      	movs	r3, #0
 8005b56:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b58:	2224      	movs	r2, #36	@ 0x24
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	4393      	bics	r3, r2
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	2300      	movs	r3, #0
 8005b62:	6063      	str	r3, [r4, #4]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	2308      	movs	r3, #8
 8005b6a:	89a2      	ldrh	r2, [r4, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <__swsetup_r+0x86>
 8005b76:	21a0      	movs	r1, #160	@ 0xa0
 8005b78:	2280      	movs	r2, #128	@ 0x80
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	0089      	lsls	r1, r1, #2
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	400b      	ands	r3, r1
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <__swsetup_r+0x86>
 8005b86:	0021      	movs	r1, r4
 8005b88:	0028      	movs	r0, r5
 8005b8a:	f000 fe3d 	bl	8006808 <__smakebuf_r>
 8005b8e:	220c      	movs	r2, #12
 8005b90:	5ea3      	ldrsh	r3, [r4, r2]
 8005b92:	2101      	movs	r1, #1
 8005b94:	001a      	movs	r2, r3
 8005b96:	400a      	ands	r2, r1
 8005b98:	420b      	tst	r3, r1
 8005b9a:	d00b      	beq.n	8005bb4 <__swsetup_r+0xac>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	60a2      	str	r2, [r4, #8]
 8005ba0:	6962      	ldr	r2, [r4, #20]
 8005ba2:	4252      	negs	r2, r2
 8005ba4:	61a2      	str	r2, [r4, #24]
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	6922      	ldr	r2, [r4, #16]
 8005baa:	4282      	cmp	r2, r0
 8005bac:	d101      	bne.n	8005bb2 <__swsetup_r+0xaa>
 8005bae:	061a      	lsls	r2, r3, #24
 8005bb0:	d4be      	bmi.n	8005b30 <__swsetup_r+0x28>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	0799      	lsls	r1, r3, #30
 8005bb6:	d400      	bmi.n	8005bba <__swsetup_r+0xb2>
 8005bb8:	6962      	ldr	r2, [r4, #20]
 8005bba:	60a2      	str	r2, [r4, #8]
 8005bbc:	e7f3      	b.n	8005ba6 <__swsetup_r+0x9e>
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	20000018 	.word	0x20000018

08005bc4 <memset>:
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	1882      	adds	r2, r0, r2
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d100      	bne.n	8005bce <memset+0xa>
 8005bcc:	4770      	bx	lr
 8005bce:	7019      	strb	r1, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e7f9      	b.n	8005bc8 <memset+0x4>

08005bd4 <strchr>:
 8005bd4:	b2c9      	uxtb	r1, r1
 8005bd6:	7803      	ldrb	r3, [r0, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <strchr+0x12>
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	d100      	bne.n	8005be2 <strchr+0xe>
 8005be0:	4770      	bx	lr
 8005be2:	3001      	adds	r0, #1
 8005be4:	e7f7      	b.n	8005bd6 <strchr+0x2>
 8005be6:	424b      	negs	r3, r1
 8005be8:	4159      	adcs	r1, r3
 8005bea:	4249      	negs	r1, r1
 8005bec:	4008      	ands	r0, r1
 8005bee:	e7f7      	b.n	8005be0 <strchr+0xc>

08005bf0 <strncpy>:
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	b530      	push	{r4, r5, lr}
 8005bf4:	001d      	movs	r5, r3
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	d006      	beq.n	8005c08 <strncpy+0x18>
 8005bfa:	780c      	ldrb	r4, [r1, #0]
 8005bfc:	3a01      	subs	r2, #1
 8005bfe:	3301      	adds	r3, #1
 8005c00:	702c      	strb	r4, [r5, #0]
 8005c02:	3101      	adds	r1, #1
 8005c04:	2c00      	cmp	r4, #0
 8005c06:	d1f5      	bne.n	8005bf4 <strncpy+0x4>
 8005c08:	2100      	movs	r1, #0
 8005c0a:	189a      	adds	r2, r3, r2
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <strncpy+0x22>
 8005c10:	bd30      	pop	{r4, r5, pc}
 8005c12:	7019      	strb	r1, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	e7f9      	b.n	8005c0c <strncpy+0x1c>

08005c18 <strstr>:
 8005c18:	780a      	ldrb	r2, [r1, #0]
 8005c1a:	b530      	push	{r4, r5, lr}
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d10c      	bne.n	8005c3a <strstr+0x22>
 8005c20:	bd30      	pop	{r4, r5, pc}
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d108      	bne.n	8005c38 <strstr+0x20>
 8005c26:	2301      	movs	r3, #1
 8005c28:	5ccc      	ldrb	r4, [r1, r3]
 8005c2a:	2c00      	cmp	r4, #0
 8005c2c:	d0f8      	beq.n	8005c20 <strstr+0x8>
 8005c2e:	5cc5      	ldrb	r5, [r0, r3]
 8005c30:	42a5      	cmp	r5, r4
 8005c32:	d101      	bne.n	8005c38 <strstr+0x20>
 8005c34:	3301      	adds	r3, #1
 8005c36:	e7f7      	b.n	8005c28 <strstr+0x10>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	7803      	ldrb	r3, [r0, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f0      	bne.n	8005c22 <strstr+0xa>
 8005c40:	0018      	movs	r0, r3
 8005c42:	e7ed      	b.n	8005c20 <strstr+0x8>

08005c44 <_close_r>:
 8005c44:	2300      	movs	r3, #0
 8005c46:	b570      	push	{r4, r5, r6, lr}
 8005c48:	4d06      	ldr	r5, [pc, #24]	@ (8005c64 <_close_r+0x20>)
 8005c4a:	0004      	movs	r4, r0
 8005c4c:	0008      	movs	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fa ff29 	bl	8000aa6 <_close>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d103      	bne.n	8005c60 <_close_r+0x1c>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d000      	beq.n	8005c60 <_close_r+0x1c>
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	20000380 	.word	0x20000380

08005c68 <_lseek_r>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	0004      	movs	r4, r0
 8005c6c:	0008      	movs	r0, r1
 8005c6e:	0011      	movs	r1, r2
 8005c70:	001a      	movs	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	4d05      	ldr	r5, [pc, #20]	@ (8005c8c <_lseek_r+0x24>)
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fa ff36 	bl	8000ae8 <_lseek>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d103      	bne.n	8005c88 <_lseek_r+0x20>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d000      	beq.n	8005c88 <_lseek_r+0x20>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	20000380 	.word	0x20000380

08005c90 <_read_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	0004      	movs	r4, r0
 8005c94:	0008      	movs	r0, r1
 8005c96:	0011      	movs	r1, r2
 8005c98:	001a      	movs	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4d05      	ldr	r5, [pc, #20]	@ (8005cb4 <_read_r+0x24>)
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fa fec8 	bl	8000a34 <_read>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d103      	bne.n	8005cb0 <_read_r+0x20>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d000      	beq.n	8005cb0 <_read_r+0x20>
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	20000380 	.word	0x20000380

08005cb8 <_sbrk_r>:
 8005cb8:	2300      	movs	r3, #0
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_sbrk_r+0x20>)
 8005cbe:	0004      	movs	r4, r0
 8005cc0:	0008      	movs	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fa ff1c 	bl	8000b00 <_sbrk>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d103      	bne.n	8005cd4 <_sbrk_r+0x1c>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d000      	beq.n	8005cd4 <_sbrk_r+0x1c>
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	20000380 	.word	0x20000380

08005cdc <_write_r>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	0004      	movs	r4, r0
 8005ce0:	0008      	movs	r0, r1
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4d05      	ldr	r5, [pc, #20]	@ (8005d00 <_write_r+0x24>)
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fa febf 	bl	8000a6e <_write>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d103      	bne.n	8005cfc <_write_r+0x20>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d000      	beq.n	8005cfc <_write_r+0x20>
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	20000380 	.word	0x20000380

08005d04 <__errno>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	@ (8005d0c <__errno+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	20000018 	.word	0x20000018

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	2600      	movs	r6, #0
 8005d14:	4c0c      	ldr	r4, [pc, #48]	@ (8005d48 <__libc_init_array+0x38>)
 8005d16:	4d0d      	ldr	r5, [pc, #52]	@ (8005d4c <__libc_init_array+0x3c>)
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	2600      	movs	r6, #0
 8005d22:	f000 fe2d 	bl	8006980 <_init>
 8005d26:	4c0a      	ldr	r4, [pc, #40]	@ (8005d50 <__libc_init_array+0x40>)
 8005d28:	4d0a      	ldr	r5, [pc, #40]	@ (8005d54 <__libc_init_array+0x44>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	00b3      	lsls	r3, r6, #2
 8005d36:	58eb      	ldr	r3, [r5, r3]
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	00b3      	lsls	r3, r6, #2
 8005d40:	58eb      	ldr	r3, [r5, r3]
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	08006f60 	.word	0x08006f60
 8005d4c:	08006f60 	.word	0x08006f60
 8005d50:	08006f64 	.word	0x08006f64
 8005d54:	08006f60 	.word	0x08006f60

08005d58 <__retarget_lock_init_recursive>:
 8005d58:	4770      	bx	lr

08005d5a <__retarget_lock_acquire_recursive>:
 8005d5a:	4770      	bx	lr

08005d5c <__retarget_lock_release_recursive>:
 8005d5c:	4770      	bx	lr

08005d5e <strcpy>:
 8005d5e:	0003      	movs	r3, r0
 8005d60:	780a      	ldrb	r2, [r1, #0]
 8005d62:	3101      	adds	r1, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	d1f9      	bne.n	8005d60 <strcpy+0x2>
 8005d6c:	4770      	bx	lr

08005d6e <memcpy>:
 8005d6e:	2300      	movs	r3, #0
 8005d70:	b510      	push	{r4, lr}
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d100      	bne.n	8005d78 <memcpy+0xa>
 8005d76:	bd10      	pop	{r4, pc}
 8005d78:	5ccc      	ldrb	r4, [r1, r3]
 8005d7a:	54c4      	strb	r4, [r0, r3]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	e7f8      	b.n	8005d72 <memcpy+0x4>

08005d80 <_free_r>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	0005      	movs	r5, r0
 8005d84:	1e0c      	subs	r4, r1, #0
 8005d86:	d010      	beq.n	8005daa <_free_r+0x2a>
 8005d88:	3c04      	subs	r4, #4
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	da00      	bge.n	8005d92 <_free_r+0x12>
 8005d90:	18e4      	adds	r4, r4, r3
 8005d92:	0028      	movs	r0, r5
 8005d94:	f7ff fc1a 	bl	80055cc <__malloc_lock>
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <_free_r+0x90>)
 8005d9a:	6813      	ldr	r3, [r2, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <_free_r+0x2c>
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	6014      	str	r4, [r2, #0]
 8005da4:	0028      	movs	r0, r5
 8005da6:	f7ff fc19 	bl	80055dc <__malloc_unlock>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d908      	bls.n	8005dc2 <_free_r+0x42>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	1821      	adds	r1, r4, r0
 8005db4:	428b      	cmp	r3, r1
 8005db6:	d1f3      	bne.n	8005da0 <_free_r+0x20>
 8005db8:	6819      	ldr	r1, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	1809      	adds	r1, r1, r0
 8005dbe:	6021      	str	r1, [r4, #0]
 8005dc0:	e7ee      	b.n	8005da0 <_free_r+0x20>
 8005dc2:	001a      	movs	r2, r3
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <_free_r+0x4e>
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d9f9      	bls.n	8005dc2 <_free_r+0x42>
 8005dce:	6811      	ldr	r1, [r2, #0]
 8005dd0:	1850      	adds	r0, r2, r1
 8005dd2:	42a0      	cmp	r0, r4
 8005dd4:	d10b      	bne.n	8005dee <_free_r+0x6e>
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	1809      	adds	r1, r1, r0
 8005dda:	1850      	adds	r0, r2, r1
 8005ddc:	6011      	str	r1, [r2, #0]
 8005dde:	4283      	cmp	r3, r0
 8005de0:	d1e0      	bne.n	8005da4 <_free_r+0x24>
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	1841      	adds	r1, r0, r1
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	6053      	str	r3, [r2, #4]
 8005dec:	e7da      	b.n	8005da4 <_free_r+0x24>
 8005dee:	42a0      	cmp	r0, r4
 8005df0:	d902      	bls.n	8005df8 <_free_r+0x78>
 8005df2:	230c      	movs	r3, #12
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	e7d5      	b.n	8005da4 <_free_r+0x24>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	1821      	adds	r1, r4, r0
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	d103      	bne.n	8005e08 <_free_r+0x88>
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	1809      	adds	r1, r1, r0
 8005e06:	6021      	str	r1, [r4, #0]
 8005e08:	6063      	str	r3, [r4, #4]
 8005e0a:	6054      	str	r4, [r2, #4]
 8005e0c:	e7ca      	b.n	8005da4 <_free_r+0x24>
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	20000240 	.word	0x20000240

08005e14 <__ssputs_r>:
 8005e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e16:	688e      	ldr	r6, [r1, #8]
 8005e18:	b085      	sub	sp, #20
 8005e1a:	001f      	movs	r7, r3
 8005e1c:	000c      	movs	r4, r1
 8005e1e:	680b      	ldr	r3, [r1, #0]
 8005e20:	9002      	str	r0, [sp, #8]
 8005e22:	9203      	str	r2, [sp, #12]
 8005e24:	42be      	cmp	r6, r7
 8005e26:	d830      	bhi.n	8005e8a <__ssputs_r+0x76>
 8005e28:	210c      	movs	r1, #12
 8005e2a:	5e62      	ldrsh	r2, [r4, r1]
 8005e2c:	2190      	movs	r1, #144	@ 0x90
 8005e2e:	00c9      	lsls	r1, r1, #3
 8005e30:	420a      	tst	r2, r1
 8005e32:	d028      	beq.n	8005e86 <__ssputs_r+0x72>
 8005e34:	2003      	movs	r0, #3
 8005e36:	6921      	ldr	r1, [r4, #16]
 8005e38:	1a5b      	subs	r3, r3, r1
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	6963      	ldr	r3, [r4, #20]
 8005e3e:	4343      	muls	r3, r0
 8005e40:	9801      	ldr	r0, [sp, #4]
 8005e42:	0fdd      	lsrs	r5, r3, #31
 8005e44:	18ed      	adds	r5, r5, r3
 8005e46:	1c7b      	adds	r3, r7, #1
 8005e48:	181b      	adds	r3, r3, r0
 8005e4a:	106d      	asrs	r5, r5, #1
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	d900      	bls.n	8005e52 <__ssputs_r+0x3e>
 8005e50:	001d      	movs	r5, r3
 8005e52:	0552      	lsls	r2, r2, #21
 8005e54:	d528      	bpl.n	8005ea8 <__ssputs_r+0x94>
 8005e56:	0029      	movs	r1, r5
 8005e58:	9802      	ldr	r0, [sp, #8]
 8005e5a:	f7ff fb37 	bl	80054cc <_malloc_r>
 8005e5e:	1e06      	subs	r6, r0, #0
 8005e60:	d02c      	beq.n	8005ebc <__ssputs_r+0xa8>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	6921      	ldr	r1, [r4, #16]
 8005e66:	f7ff ff82 	bl	8005d6e <memcpy>
 8005e6a:	89a2      	ldrh	r2, [r4, #12]
 8005e6c:	4b18      	ldr	r3, [pc, #96]	@ (8005ed0 <__ssputs_r+0xbc>)
 8005e6e:	401a      	ands	r2, r3
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	4313      	orrs	r3, r2
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	6126      	str	r6, [r4, #16]
 8005e7a:	18f6      	adds	r6, r6, r3
 8005e7c:	6026      	str	r6, [r4, #0]
 8005e7e:	003e      	movs	r6, r7
 8005e80:	6165      	str	r5, [r4, #20]
 8005e82:	1aed      	subs	r5, r5, r3
 8005e84:	60a5      	str	r5, [r4, #8]
 8005e86:	42be      	cmp	r6, r7
 8005e88:	d900      	bls.n	8005e8c <__ssputs_r+0x78>
 8005e8a:	003e      	movs	r6, r7
 8005e8c:	0032      	movs	r2, r6
 8005e8e:	9903      	ldr	r1, [sp, #12]
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	f000 fcfa 	bl	800688a <memmove>
 8005e96:	2000      	movs	r0, #0
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	1b9b      	subs	r3, r3, r6
 8005e9c:	60a3      	str	r3, [r4, #8]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	199b      	adds	r3, r3, r6
 8005ea2:	6023      	str	r3, [r4, #0]
 8005ea4:	b005      	add	sp, #20
 8005ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea8:	002a      	movs	r2, r5
 8005eaa:	9802      	ldr	r0, [sp, #8]
 8005eac:	f000 fd2f 	bl	800690e <_realloc_r>
 8005eb0:	1e06      	subs	r6, r0, #0
 8005eb2:	d1e0      	bne.n	8005e76 <__ssputs_r+0x62>
 8005eb4:	6921      	ldr	r1, [r4, #16]
 8005eb6:	9802      	ldr	r0, [sp, #8]
 8005eb8:	f7ff ff62 	bl	8005d80 <_free_r>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	9a02      	ldr	r2, [sp, #8]
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	89a2      	ldrh	r2, [r4, #12]
 8005ec8:	3334      	adds	r3, #52	@ 0x34
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	e7e9      	b.n	8005ea4 <__ssputs_r+0x90>
 8005ed0:	fffffb7f 	.word	0xfffffb7f

08005ed4 <_svfiprintf_r>:
 8005ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed6:	b0a1      	sub	sp, #132	@ 0x84
 8005ed8:	9003      	str	r0, [sp, #12]
 8005eda:	001d      	movs	r5, r3
 8005edc:	898b      	ldrh	r3, [r1, #12]
 8005ede:	000f      	movs	r7, r1
 8005ee0:	0016      	movs	r6, r2
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	d511      	bpl.n	8005f0a <_svfiprintf_r+0x36>
 8005ee6:	690b      	ldr	r3, [r1, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10e      	bne.n	8005f0a <_svfiprintf_r+0x36>
 8005eec:	2140      	movs	r1, #64	@ 0x40
 8005eee:	f7ff faed 	bl	80054cc <_malloc_r>
 8005ef2:	6038      	str	r0, [r7, #0]
 8005ef4:	6138      	str	r0, [r7, #16]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d105      	bne.n	8005f06 <_svfiprintf_r+0x32>
 8005efa:	230c      	movs	r3, #12
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	2001      	movs	r0, #1
 8005f02:	4240      	negs	r0, r0
 8005f04:	e0cf      	b.n	80060a6 <_svfiprintf_r+0x1d2>
 8005f06:	2340      	movs	r3, #64	@ 0x40
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	ac08      	add	r4, sp, #32
 8005f0e:	6163      	str	r3, [r4, #20]
 8005f10:	3320      	adds	r3, #32
 8005f12:	7663      	strb	r3, [r4, #25]
 8005f14:	3310      	adds	r3, #16
 8005f16:	76a3      	strb	r3, [r4, #26]
 8005f18:	9507      	str	r5, [sp, #28]
 8005f1a:	0035      	movs	r5, r6
 8005f1c:	782b      	ldrb	r3, [r5, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <_svfiprintf_r+0x52>
 8005f22:	2b25      	cmp	r3, #37	@ 0x25
 8005f24:	d148      	bne.n	8005fb8 <_svfiprintf_r+0xe4>
 8005f26:	1bab      	subs	r3, r5, r6
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	42b5      	cmp	r5, r6
 8005f2c:	d00b      	beq.n	8005f46 <_svfiprintf_r+0x72>
 8005f2e:	0032      	movs	r2, r6
 8005f30:	0039      	movs	r1, r7
 8005f32:	9803      	ldr	r0, [sp, #12]
 8005f34:	f7ff ff6e 	bl	8005e14 <__ssputs_r>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d100      	bne.n	8005f3e <_svfiprintf_r+0x6a>
 8005f3c:	e0ae      	b.n	800609c <_svfiprintf_r+0x1c8>
 8005f3e:	6963      	ldr	r3, [r4, #20]
 8005f40:	9a05      	ldr	r2, [sp, #20]
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	782b      	ldrb	r3, [r5, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d100      	bne.n	8005f4e <_svfiprintf_r+0x7a>
 8005f4c:	e0a6      	b.n	800609c <_svfiprintf_r+0x1c8>
 8005f4e:	2201      	movs	r2, #1
 8005f50:	2300      	movs	r3, #0
 8005f52:	4252      	negs	r2, r2
 8005f54:	6062      	str	r2, [r4, #4]
 8005f56:	a904      	add	r1, sp, #16
 8005f58:	3254      	adds	r2, #84	@ 0x54
 8005f5a:	1852      	adds	r2, r2, r1
 8005f5c:	1c6e      	adds	r6, r5, #1
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	60e3      	str	r3, [r4, #12]
 8005f62:	60a3      	str	r3, [r4, #8]
 8005f64:	7013      	strb	r3, [r2, #0]
 8005f66:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005f68:	4b54      	ldr	r3, [pc, #336]	@ (80060bc <_svfiprintf_r+0x1e8>)
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	7831      	ldrb	r1, [r6, #0]
 8005f70:	9305      	str	r3, [sp, #20]
 8005f72:	f000 fcc1 	bl	80068f8 <memchr>
 8005f76:	1c75      	adds	r5, r6, #1
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d11f      	bne.n	8005fbc <_svfiprintf_r+0xe8>
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	06d3      	lsls	r3, r2, #27
 8005f80:	d504      	bpl.n	8005f8c <_svfiprintf_r+0xb8>
 8005f82:	2353      	movs	r3, #83	@ 0x53
 8005f84:	a904      	add	r1, sp, #16
 8005f86:	185b      	adds	r3, r3, r1
 8005f88:	2120      	movs	r1, #32
 8005f8a:	7019      	strb	r1, [r3, #0]
 8005f8c:	0713      	lsls	r3, r2, #28
 8005f8e:	d504      	bpl.n	8005f9a <_svfiprintf_r+0xc6>
 8005f90:	2353      	movs	r3, #83	@ 0x53
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	185b      	adds	r3, r3, r1
 8005f96:	212b      	movs	r1, #43	@ 0x2b
 8005f98:	7019      	strb	r1, [r3, #0]
 8005f9a:	7833      	ldrb	r3, [r6, #0]
 8005f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9e:	d016      	beq.n	8005fce <_svfiprintf_r+0xfa>
 8005fa0:	0035      	movs	r5, r6
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	200a      	movs	r0, #10
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	782a      	ldrb	r2, [r5, #0]
 8005faa:	1c6e      	adds	r6, r5, #1
 8005fac:	3a30      	subs	r2, #48	@ 0x30
 8005fae:	2a09      	cmp	r2, #9
 8005fb0:	d950      	bls.n	8006054 <_svfiprintf_r+0x180>
 8005fb2:	2900      	cmp	r1, #0
 8005fb4:	d111      	bne.n	8005fda <_svfiprintf_r+0x106>
 8005fb6:	e017      	b.n	8005fe8 <_svfiprintf_r+0x114>
 8005fb8:	3501      	adds	r5, #1
 8005fba:	e7af      	b.n	8005f1c <_svfiprintf_r+0x48>
 8005fbc:	9b05      	ldr	r3, [sp, #20]
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	1ac0      	subs	r0, r0, r3
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4083      	lsls	r3, r0
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	002e      	movs	r6, r5
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	e7cc      	b.n	8005f68 <_svfiprintf_r+0x94>
 8005fce:	9b07      	ldr	r3, [sp, #28]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	9107      	str	r1, [sp, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	db01      	blt.n	8005fde <_svfiprintf_r+0x10a>
 8005fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fdc:	e004      	b.n	8005fe8 <_svfiprintf_r+0x114>
 8005fde:	425b      	negs	r3, r3
 8005fe0:	60e3      	str	r3, [r4, #12]
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	782b      	ldrb	r3, [r5, #0]
 8005fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fec:	d10c      	bne.n	8006008 <_svfiprintf_r+0x134>
 8005fee:	786b      	ldrb	r3, [r5, #1]
 8005ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff2:	d134      	bne.n	800605e <_svfiprintf_r+0x18a>
 8005ff4:	9b07      	ldr	r3, [sp, #28]
 8005ff6:	3502      	adds	r5, #2
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	9207      	str	r2, [sp, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da01      	bge.n	8006006 <_svfiprintf_r+0x132>
 8006002:	2301      	movs	r3, #1
 8006004:	425b      	negs	r3, r3
 8006006:	9309      	str	r3, [sp, #36]	@ 0x24
 8006008:	4e2d      	ldr	r6, [pc, #180]	@ (80060c0 <_svfiprintf_r+0x1ec>)
 800600a:	2203      	movs	r2, #3
 800600c:	0030      	movs	r0, r6
 800600e:	7829      	ldrb	r1, [r5, #0]
 8006010:	f000 fc72 	bl	80068f8 <memchr>
 8006014:	2800      	cmp	r0, #0
 8006016:	d006      	beq.n	8006026 <_svfiprintf_r+0x152>
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	1b80      	subs	r0, r0, r6
 800601c:	4083      	lsls	r3, r0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	3501      	adds	r5, #1
 8006022:	4313      	orrs	r3, r2
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	7829      	ldrb	r1, [r5, #0]
 8006028:	2206      	movs	r2, #6
 800602a:	4826      	ldr	r0, [pc, #152]	@ (80060c4 <_svfiprintf_r+0x1f0>)
 800602c:	1c6e      	adds	r6, r5, #1
 800602e:	7621      	strb	r1, [r4, #24]
 8006030:	f000 fc62 	bl	80068f8 <memchr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d038      	beq.n	80060aa <_svfiprintf_r+0x1d6>
 8006038:	4b23      	ldr	r3, [pc, #140]	@ (80060c8 <_svfiprintf_r+0x1f4>)
 800603a:	2b00      	cmp	r3, #0
 800603c:	d122      	bne.n	8006084 <_svfiprintf_r+0x1b0>
 800603e:	2207      	movs	r2, #7
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	3307      	adds	r3, #7
 8006044:	4393      	bics	r3, r2
 8006046:	3308      	adds	r3, #8
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	9a04      	ldr	r2, [sp, #16]
 800604e:	189b      	adds	r3, r3, r2
 8006050:	6163      	str	r3, [r4, #20]
 8006052:	e762      	b.n	8005f1a <_svfiprintf_r+0x46>
 8006054:	4343      	muls	r3, r0
 8006056:	0035      	movs	r5, r6
 8006058:	2101      	movs	r1, #1
 800605a:	189b      	adds	r3, r3, r2
 800605c:	e7a4      	b.n	8005fa8 <_svfiprintf_r+0xd4>
 800605e:	2300      	movs	r3, #0
 8006060:	200a      	movs	r0, #10
 8006062:	0019      	movs	r1, r3
 8006064:	3501      	adds	r5, #1
 8006066:	6063      	str	r3, [r4, #4]
 8006068:	782a      	ldrb	r2, [r5, #0]
 800606a:	1c6e      	adds	r6, r5, #1
 800606c:	3a30      	subs	r2, #48	@ 0x30
 800606e:	2a09      	cmp	r2, #9
 8006070:	d903      	bls.n	800607a <_svfiprintf_r+0x1a6>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0c8      	beq.n	8006008 <_svfiprintf_r+0x134>
 8006076:	9109      	str	r1, [sp, #36]	@ 0x24
 8006078:	e7c6      	b.n	8006008 <_svfiprintf_r+0x134>
 800607a:	4341      	muls	r1, r0
 800607c:	0035      	movs	r5, r6
 800607e:	2301      	movs	r3, #1
 8006080:	1889      	adds	r1, r1, r2
 8006082:	e7f1      	b.n	8006068 <_svfiprintf_r+0x194>
 8006084:	aa07      	add	r2, sp, #28
 8006086:	9200      	str	r2, [sp, #0]
 8006088:	0021      	movs	r1, r4
 800608a:	003a      	movs	r2, r7
 800608c:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <_svfiprintf_r+0x1f8>)
 800608e:	9803      	ldr	r0, [sp, #12]
 8006090:	e000      	b.n	8006094 <_svfiprintf_r+0x1c0>
 8006092:	bf00      	nop
 8006094:	9004      	str	r0, [sp, #16]
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	d1d6      	bne.n	800604a <_svfiprintf_r+0x176>
 800609c:	89bb      	ldrh	r3, [r7, #12]
 800609e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80060a0:	065b      	lsls	r3, r3, #25
 80060a2:	d500      	bpl.n	80060a6 <_svfiprintf_r+0x1d2>
 80060a4:	e72c      	b.n	8005f00 <_svfiprintf_r+0x2c>
 80060a6:	b021      	add	sp, #132	@ 0x84
 80060a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060aa:	aa07      	add	r2, sp, #28
 80060ac:	9200      	str	r2, [sp, #0]
 80060ae:	0021      	movs	r1, r4
 80060b0:	003a      	movs	r2, r7
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <_svfiprintf_r+0x1f8>)
 80060b4:	9803      	ldr	r0, [sp, #12]
 80060b6:	f000 f9bf 	bl	8006438 <_printf_i>
 80060ba:	e7eb      	b.n	8006094 <_svfiprintf_r+0x1c0>
 80060bc:	08006f25 	.word	0x08006f25
 80060c0:	08006f2b 	.word	0x08006f2b
 80060c4:	08006f2f 	.word	0x08006f2f
 80060c8:	00000000 	.word	0x00000000
 80060cc:	08005e15 	.word	0x08005e15

080060d0 <__sfputc_r>:
 80060d0:	6893      	ldr	r3, [r2, #8]
 80060d2:	b510      	push	{r4, lr}
 80060d4:	3b01      	subs	r3, #1
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da04      	bge.n	80060e6 <__sfputc_r+0x16>
 80060dc:	6994      	ldr	r4, [r2, #24]
 80060de:	42a3      	cmp	r3, r4
 80060e0:	db07      	blt.n	80060f2 <__sfputc_r+0x22>
 80060e2:	290a      	cmp	r1, #10
 80060e4:	d005      	beq.n	80060f2 <__sfputc_r+0x22>
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	1c58      	adds	r0, r3, #1
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	7019      	strb	r1, [r3, #0]
 80060ee:	0008      	movs	r0, r1
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	f7ff fcc7 	bl	8005a84 <__swbuf_r>
 80060f6:	0001      	movs	r1, r0
 80060f8:	e7f9      	b.n	80060ee <__sfputc_r+0x1e>

080060fa <__sfputs_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	0006      	movs	r6, r0
 80060fe:	000f      	movs	r7, r1
 8006100:	0014      	movs	r4, r2
 8006102:	18d5      	adds	r5, r2, r3
 8006104:	42ac      	cmp	r4, r5
 8006106:	d101      	bne.n	800610c <__sfputs_r+0x12>
 8006108:	2000      	movs	r0, #0
 800610a:	e007      	b.n	800611c <__sfputs_r+0x22>
 800610c:	7821      	ldrb	r1, [r4, #0]
 800610e:	003a      	movs	r2, r7
 8006110:	0030      	movs	r0, r6
 8006112:	f7ff ffdd 	bl	80060d0 <__sfputc_r>
 8006116:	3401      	adds	r4, #1
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d1f3      	bne.n	8006104 <__sfputs_r+0xa>
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006120 <_vfiprintf_r>:
 8006120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006122:	b0a1      	sub	sp, #132	@ 0x84
 8006124:	000f      	movs	r7, r1
 8006126:	0015      	movs	r5, r2
 8006128:	001e      	movs	r6, r3
 800612a:	9003      	str	r0, [sp, #12]
 800612c:	2800      	cmp	r0, #0
 800612e:	d004      	beq.n	800613a <_vfiprintf_r+0x1a>
 8006130:	6a03      	ldr	r3, [r0, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <_vfiprintf_r+0x1a>
 8006136:	f7ff fb7f 	bl	8005838 <__sinit>
 800613a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800613c:	07db      	lsls	r3, r3, #31
 800613e:	d405      	bmi.n	800614c <_vfiprintf_r+0x2c>
 8006140:	89bb      	ldrh	r3, [r7, #12]
 8006142:	059b      	lsls	r3, r3, #22
 8006144:	d402      	bmi.n	800614c <_vfiprintf_r+0x2c>
 8006146:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006148:	f7ff fe07 	bl	8005d5a <__retarget_lock_acquire_recursive>
 800614c:	89bb      	ldrh	r3, [r7, #12]
 800614e:	071b      	lsls	r3, r3, #28
 8006150:	d502      	bpl.n	8006158 <_vfiprintf_r+0x38>
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d113      	bne.n	8006180 <_vfiprintf_r+0x60>
 8006158:	0039      	movs	r1, r7
 800615a:	9803      	ldr	r0, [sp, #12]
 800615c:	f7ff fcd4 	bl	8005b08 <__swsetup_r>
 8006160:	2800      	cmp	r0, #0
 8006162:	d00d      	beq.n	8006180 <_vfiprintf_r+0x60>
 8006164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006166:	07db      	lsls	r3, r3, #31
 8006168:	d503      	bpl.n	8006172 <_vfiprintf_r+0x52>
 800616a:	2001      	movs	r0, #1
 800616c:	4240      	negs	r0, r0
 800616e:	b021      	add	sp, #132	@ 0x84
 8006170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006172:	89bb      	ldrh	r3, [r7, #12]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	d4f8      	bmi.n	800616a <_vfiprintf_r+0x4a>
 8006178:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800617a:	f7ff fdef 	bl	8005d5c <__retarget_lock_release_recursive>
 800617e:	e7f4      	b.n	800616a <_vfiprintf_r+0x4a>
 8006180:	2300      	movs	r3, #0
 8006182:	ac08      	add	r4, sp, #32
 8006184:	6163      	str	r3, [r4, #20]
 8006186:	3320      	adds	r3, #32
 8006188:	7663      	strb	r3, [r4, #25]
 800618a:	3310      	adds	r3, #16
 800618c:	76a3      	strb	r3, [r4, #26]
 800618e:	9607      	str	r6, [sp, #28]
 8006190:	002e      	movs	r6, r5
 8006192:	7833      	ldrb	r3, [r6, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <_vfiprintf_r+0x7c>
 8006198:	2b25      	cmp	r3, #37	@ 0x25
 800619a:	d148      	bne.n	800622e <_vfiprintf_r+0x10e>
 800619c:	1b73      	subs	r3, r6, r5
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	42ae      	cmp	r6, r5
 80061a2:	d00b      	beq.n	80061bc <_vfiprintf_r+0x9c>
 80061a4:	002a      	movs	r2, r5
 80061a6:	0039      	movs	r1, r7
 80061a8:	9803      	ldr	r0, [sp, #12]
 80061aa:	f7ff ffa6 	bl	80060fa <__sfputs_r>
 80061ae:	3001      	adds	r0, #1
 80061b0:	d100      	bne.n	80061b4 <_vfiprintf_r+0x94>
 80061b2:	e0ae      	b.n	8006312 <_vfiprintf_r+0x1f2>
 80061b4:	6963      	ldr	r3, [r4, #20]
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	6163      	str	r3, [r4, #20]
 80061bc:	7833      	ldrb	r3, [r6, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d100      	bne.n	80061c4 <_vfiprintf_r+0xa4>
 80061c2:	e0a6      	b.n	8006312 <_vfiprintf_r+0x1f2>
 80061c4:	2201      	movs	r2, #1
 80061c6:	2300      	movs	r3, #0
 80061c8:	4252      	negs	r2, r2
 80061ca:	6062      	str	r2, [r4, #4]
 80061cc:	a904      	add	r1, sp, #16
 80061ce:	3254      	adds	r2, #84	@ 0x54
 80061d0:	1852      	adds	r2, r2, r1
 80061d2:	1c75      	adds	r5, r6, #1
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	60e3      	str	r3, [r4, #12]
 80061d8:	60a3      	str	r3, [r4, #8]
 80061da:	7013      	strb	r3, [r2, #0]
 80061dc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80061de:	4b59      	ldr	r3, [pc, #356]	@ (8006344 <_vfiprintf_r+0x224>)
 80061e0:	2205      	movs	r2, #5
 80061e2:	0018      	movs	r0, r3
 80061e4:	7829      	ldrb	r1, [r5, #0]
 80061e6:	9305      	str	r3, [sp, #20]
 80061e8:	f000 fb86 	bl	80068f8 <memchr>
 80061ec:	1c6e      	adds	r6, r5, #1
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d11f      	bne.n	8006232 <_vfiprintf_r+0x112>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	06d3      	lsls	r3, r2, #27
 80061f6:	d504      	bpl.n	8006202 <_vfiprintf_r+0xe2>
 80061f8:	2353      	movs	r3, #83	@ 0x53
 80061fa:	a904      	add	r1, sp, #16
 80061fc:	185b      	adds	r3, r3, r1
 80061fe:	2120      	movs	r1, #32
 8006200:	7019      	strb	r1, [r3, #0]
 8006202:	0713      	lsls	r3, r2, #28
 8006204:	d504      	bpl.n	8006210 <_vfiprintf_r+0xf0>
 8006206:	2353      	movs	r3, #83	@ 0x53
 8006208:	a904      	add	r1, sp, #16
 800620a:	185b      	adds	r3, r3, r1
 800620c:	212b      	movs	r1, #43	@ 0x2b
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	782b      	ldrb	r3, [r5, #0]
 8006212:	2b2a      	cmp	r3, #42	@ 0x2a
 8006214:	d016      	beq.n	8006244 <_vfiprintf_r+0x124>
 8006216:	002e      	movs	r6, r5
 8006218:	2100      	movs	r1, #0
 800621a:	200a      	movs	r0, #10
 800621c:	68e3      	ldr	r3, [r4, #12]
 800621e:	7832      	ldrb	r2, [r6, #0]
 8006220:	1c75      	adds	r5, r6, #1
 8006222:	3a30      	subs	r2, #48	@ 0x30
 8006224:	2a09      	cmp	r2, #9
 8006226:	d950      	bls.n	80062ca <_vfiprintf_r+0x1aa>
 8006228:	2900      	cmp	r1, #0
 800622a:	d111      	bne.n	8006250 <_vfiprintf_r+0x130>
 800622c:	e017      	b.n	800625e <_vfiprintf_r+0x13e>
 800622e:	3601      	adds	r6, #1
 8006230:	e7af      	b.n	8006192 <_vfiprintf_r+0x72>
 8006232:	9b05      	ldr	r3, [sp, #20]
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	1ac0      	subs	r0, r0, r3
 8006238:	2301      	movs	r3, #1
 800623a:	4083      	lsls	r3, r0
 800623c:	4313      	orrs	r3, r2
 800623e:	0035      	movs	r5, r6
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	e7cc      	b.n	80061de <_vfiprintf_r+0xbe>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	1d19      	adds	r1, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	9107      	str	r1, [sp, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	db01      	blt.n	8006254 <_vfiprintf_r+0x134>
 8006250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006252:	e004      	b.n	800625e <_vfiprintf_r+0x13e>
 8006254:	425b      	negs	r3, r3
 8006256:	60e3      	str	r3, [r4, #12]
 8006258:	2302      	movs	r3, #2
 800625a:	4313      	orrs	r3, r2
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	7833      	ldrb	r3, [r6, #0]
 8006260:	2b2e      	cmp	r3, #46	@ 0x2e
 8006262:	d10c      	bne.n	800627e <_vfiprintf_r+0x15e>
 8006264:	7873      	ldrb	r3, [r6, #1]
 8006266:	2b2a      	cmp	r3, #42	@ 0x2a
 8006268:	d134      	bne.n	80062d4 <_vfiprintf_r+0x1b4>
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	3602      	adds	r6, #2
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	9207      	str	r2, [sp, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	da01      	bge.n	800627c <_vfiprintf_r+0x15c>
 8006278:	2301      	movs	r3, #1
 800627a:	425b      	negs	r3, r3
 800627c:	9309      	str	r3, [sp, #36]	@ 0x24
 800627e:	4d32      	ldr	r5, [pc, #200]	@ (8006348 <_vfiprintf_r+0x228>)
 8006280:	2203      	movs	r2, #3
 8006282:	0028      	movs	r0, r5
 8006284:	7831      	ldrb	r1, [r6, #0]
 8006286:	f000 fb37 	bl	80068f8 <memchr>
 800628a:	2800      	cmp	r0, #0
 800628c:	d006      	beq.n	800629c <_vfiprintf_r+0x17c>
 800628e:	2340      	movs	r3, #64	@ 0x40
 8006290:	1b40      	subs	r0, r0, r5
 8006292:	4083      	lsls	r3, r0
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	3601      	adds	r6, #1
 8006298:	4313      	orrs	r3, r2
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	7831      	ldrb	r1, [r6, #0]
 800629e:	2206      	movs	r2, #6
 80062a0:	482a      	ldr	r0, [pc, #168]	@ (800634c <_vfiprintf_r+0x22c>)
 80062a2:	1c75      	adds	r5, r6, #1
 80062a4:	7621      	strb	r1, [r4, #24]
 80062a6:	f000 fb27 	bl	80068f8 <memchr>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d040      	beq.n	8006330 <_vfiprintf_r+0x210>
 80062ae:	4b28      	ldr	r3, [pc, #160]	@ (8006350 <_vfiprintf_r+0x230>)
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d122      	bne.n	80062fa <_vfiprintf_r+0x1da>
 80062b4:	2207      	movs	r2, #7
 80062b6:	9b07      	ldr	r3, [sp, #28]
 80062b8:	3307      	adds	r3, #7
 80062ba:	4393      	bics	r3, r2
 80062bc:	3308      	adds	r3, #8
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	6963      	ldr	r3, [r4, #20]
 80062c2:	9a04      	ldr	r2, [sp, #16]
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	e762      	b.n	8006190 <_vfiprintf_r+0x70>
 80062ca:	4343      	muls	r3, r0
 80062cc:	002e      	movs	r6, r5
 80062ce:	2101      	movs	r1, #1
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	e7a4      	b.n	800621e <_vfiprintf_r+0xfe>
 80062d4:	2300      	movs	r3, #0
 80062d6:	200a      	movs	r0, #10
 80062d8:	0019      	movs	r1, r3
 80062da:	3601      	adds	r6, #1
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	7832      	ldrb	r2, [r6, #0]
 80062e0:	1c75      	adds	r5, r6, #1
 80062e2:	3a30      	subs	r2, #48	@ 0x30
 80062e4:	2a09      	cmp	r2, #9
 80062e6:	d903      	bls.n	80062f0 <_vfiprintf_r+0x1d0>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0c8      	beq.n	800627e <_vfiprintf_r+0x15e>
 80062ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80062ee:	e7c6      	b.n	800627e <_vfiprintf_r+0x15e>
 80062f0:	4341      	muls	r1, r0
 80062f2:	002e      	movs	r6, r5
 80062f4:	2301      	movs	r3, #1
 80062f6:	1889      	adds	r1, r1, r2
 80062f8:	e7f1      	b.n	80062de <_vfiprintf_r+0x1be>
 80062fa:	aa07      	add	r2, sp, #28
 80062fc:	9200      	str	r2, [sp, #0]
 80062fe:	0021      	movs	r1, r4
 8006300:	003a      	movs	r2, r7
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <_vfiprintf_r+0x234>)
 8006304:	9803      	ldr	r0, [sp, #12]
 8006306:	e000      	b.n	800630a <_vfiprintf_r+0x1ea>
 8006308:	bf00      	nop
 800630a:	9004      	str	r0, [sp, #16]
 800630c:	9b04      	ldr	r3, [sp, #16]
 800630e:	3301      	adds	r3, #1
 8006310:	d1d6      	bne.n	80062c0 <_vfiprintf_r+0x1a0>
 8006312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d405      	bmi.n	8006324 <_vfiprintf_r+0x204>
 8006318:	89bb      	ldrh	r3, [r7, #12]
 800631a:	059b      	lsls	r3, r3, #22
 800631c:	d402      	bmi.n	8006324 <_vfiprintf_r+0x204>
 800631e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006320:	f7ff fd1c 	bl	8005d5c <__retarget_lock_release_recursive>
 8006324:	89bb      	ldrh	r3, [r7, #12]
 8006326:	065b      	lsls	r3, r3, #25
 8006328:	d500      	bpl.n	800632c <_vfiprintf_r+0x20c>
 800632a:	e71e      	b.n	800616a <_vfiprintf_r+0x4a>
 800632c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800632e:	e71e      	b.n	800616e <_vfiprintf_r+0x4e>
 8006330:	aa07      	add	r2, sp, #28
 8006332:	9200      	str	r2, [sp, #0]
 8006334:	0021      	movs	r1, r4
 8006336:	003a      	movs	r2, r7
 8006338:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <_vfiprintf_r+0x234>)
 800633a:	9803      	ldr	r0, [sp, #12]
 800633c:	f000 f87c 	bl	8006438 <_printf_i>
 8006340:	e7e3      	b.n	800630a <_vfiprintf_r+0x1ea>
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	08006f25 	.word	0x08006f25
 8006348:	08006f2b 	.word	0x08006f2b
 800634c:	08006f2f 	.word	0x08006f2f
 8006350:	00000000 	.word	0x00000000
 8006354:	080060fb 	.word	0x080060fb

08006358 <_printf_common>:
 8006358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800635a:	0016      	movs	r6, r2
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	688a      	ldr	r2, [r1, #8]
 8006360:	690b      	ldr	r3, [r1, #16]
 8006362:	000c      	movs	r4, r1
 8006364:	9000      	str	r0, [sp, #0]
 8006366:	4293      	cmp	r3, r2
 8006368:	da00      	bge.n	800636c <_printf_common+0x14>
 800636a:	0013      	movs	r3, r2
 800636c:	0022      	movs	r2, r4
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	3243      	adds	r2, #67	@ 0x43
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	2a00      	cmp	r2, #0
 8006376:	d001      	beq.n	800637c <_printf_common+0x24>
 8006378:	3301      	adds	r3, #1
 800637a:	6033      	str	r3, [r6, #0]
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	069b      	lsls	r3, r3, #26
 8006380:	d502      	bpl.n	8006388 <_printf_common+0x30>
 8006382:	6833      	ldr	r3, [r6, #0]
 8006384:	3302      	adds	r3, #2
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	2306      	movs	r3, #6
 800638c:	0015      	movs	r5, r2
 800638e:	401d      	ands	r5, r3
 8006390:	421a      	tst	r2, r3
 8006392:	d027      	beq.n	80063e4 <_printf_common+0x8c>
 8006394:	0023      	movs	r3, r4
 8006396:	3343      	adds	r3, #67	@ 0x43
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	1e5a      	subs	r2, r3, #1
 800639c:	4193      	sbcs	r3, r2
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d430      	bmi.n	8006406 <_printf_common+0xae>
 80063a4:	0022      	movs	r2, r4
 80063a6:	9901      	ldr	r1, [sp, #4]
 80063a8:	9800      	ldr	r0, [sp, #0]
 80063aa:	9d08      	ldr	r5, [sp, #32]
 80063ac:	3243      	adds	r2, #67	@ 0x43
 80063ae:	47a8      	blx	r5
 80063b0:	3001      	adds	r0, #1
 80063b2:	d025      	beq.n	8006400 <_printf_common+0xa8>
 80063b4:	2206      	movs	r2, #6
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	2500      	movs	r5, #0
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d105      	bne.n	80063cc <_printf_common+0x74>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	68e5      	ldr	r5, [r4, #12]
 80063c4:	1aed      	subs	r5, r5, r3
 80063c6:	43eb      	mvns	r3, r5
 80063c8:	17db      	asrs	r3, r3, #31
 80063ca:	401d      	ands	r5, r3
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	dd01      	ble.n	80063d8 <_printf_common+0x80>
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	18ed      	adds	r5, r5, r3
 80063d8:	2600      	movs	r6, #0
 80063da:	42b5      	cmp	r5, r6
 80063dc:	d120      	bne.n	8006420 <_printf_common+0xc8>
 80063de:	2000      	movs	r0, #0
 80063e0:	e010      	b.n	8006404 <_printf_common+0xac>
 80063e2:	3501      	adds	r5, #1
 80063e4:	68e3      	ldr	r3, [r4, #12]
 80063e6:	6832      	ldr	r2, [r6, #0]
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	42ab      	cmp	r3, r5
 80063ec:	ddd2      	ble.n	8006394 <_printf_common+0x3c>
 80063ee:	0022      	movs	r2, r4
 80063f0:	2301      	movs	r3, #1
 80063f2:	9901      	ldr	r1, [sp, #4]
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	9f08      	ldr	r7, [sp, #32]
 80063f8:	3219      	adds	r2, #25
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	d1f0      	bne.n	80063e2 <_printf_common+0x8a>
 8006400:	2001      	movs	r0, #1
 8006402:	4240      	negs	r0, r0
 8006404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006406:	2030      	movs	r0, #48	@ 0x30
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	3143      	adds	r1, #67	@ 0x43
 800640c:	7008      	strb	r0, [r1, #0]
 800640e:	0021      	movs	r1, r4
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	3145      	adds	r1, #69	@ 0x45
 8006414:	7809      	ldrb	r1, [r1, #0]
 8006416:	18a2      	adds	r2, r4, r2
 8006418:	3243      	adds	r2, #67	@ 0x43
 800641a:	3302      	adds	r3, #2
 800641c:	7011      	strb	r1, [r2, #0]
 800641e:	e7c1      	b.n	80063a4 <_printf_common+0x4c>
 8006420:	0022      	movs	r2, r4
 8006422:	2301      	movs	r3, #1
 8006424:	9901      	ldr	r1, [sp, #4]
 8006426:	9800      	ldr	r0, [sp, #0]
 8006428:	9f08      	ldr	r7, [sp, #32]
 800642a:	321a      	adds	r2, #26
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xa8>
 8006432:	3601      	adds	r6, #1
 8006434:	e7d1      	b.n	80063da <_printf_common+0x82>
	...

08006438 <_printf_i>:
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	b08b      	sub	sp, #44	@ 0x2c
 800643c:	9206      	str	r2, [sp, #24]
 800643e:	000a      	movs	r2, r1
 8006440:	3243      	adds	r2, #67	@ 0x43
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	9005      	str	r0, [sp, #20]
 8006446:	9203      	str	r2, [sp, #12]
 8006448:	7e0a      	ldrb	r2, [r1, #24]
 800644a:	000c      	movs	r4, r1
 800644c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800644e:	2a78      	cmp	r2, #120	@ 0x78
 8006450:	d809      	bhi.n	8006466 <_printf_i+0x2e>
 8006452:	2a62      	cmp	r2, #98	@ 0x62
 8006454:	d80b      	bhi.n	800646e <_printf_i+0x36>
 8006456:	2a00      	cmp	r2, #0
 8006458:	d100      	bne.n	800645c <_printf_i+0x24>
 800645a:	e0ba      	b.n	80065d2 <_printf_i+0x19a>
 800645c:	497a      	ldr	r1, [pc, #488]	@ (8006648 <_printf_i+0x210>)
 800645e:	9104      	str	r1, [sp, #16]
 8006460:	2a58      	cmp	r2, #88	@ 0x58
 8006462:	d100      	bne.n	8006466 <_printf_i+0x2e>
 8006464:	e08e      	b.n	8006584 <_printf_i+0x14c>
 8006466:	0025      	movs	r5, r4
 8006468:	3542      	adds	r5, #66	@ 0x42
 800646a:	702a      	strb	r2, [r5, #0]
 800646c:	e022      	b.n	80064b4 <_printf_i+0x7c>
 800646e:	0010      	movs	r0, r2
 8006470:	3863      	subs	r0, #99	@ 0x63
 8006472:	2815      	cmp	r0, #21
 8006474:	d8f7      	bhi.n	8006466 <_printf_i+0x2e>
 8006476:	f7f9 fe4f 	bl	8000118 <__gnu_thumb1_case_shi>
 800647a:	0016      	.short	0x0016
 800647c:	fff6001f 	.word	0xfff6001f
 8006480:	fff6fff6 	.word	0xfff6fff6
 8006484:	001ffff6 	.word	0x001ffff6
 8006488:	fff6fff6 	.word	0xfff6fff6
 800648c:	fff6fff6 	.word	0xfff6fff6
 8006490:	0036009f 	.word	0x0036009f
 8006494:	fff6007e 	.word	0xfff6007e
 8006498:	00b0fff6 	.word	0x00b0fff6
 800649c:	0036fff6 	.word	0x0036fff6
 80064a0:	fff6fff6 	.word	0xfff6fff6
 80064a4:	0082      	.short	0x0082
 80064a6:	0025      	movs	r5, r4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	3542      	adds	r5, #66	@ 0x42
 80064ac:	1d11      	adds	r1, r2, #4
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	702b      	strb	r3, [r5, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	e09e      	b.n	80065f6 <_printf_i+0x1be>
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	6809      	ldr	r1, [r1, #0]
 80064bc:	1d02      	adds	r2, r0, #4
 80064be:	060d      	lsls	r5, r1, #24
 80064c0:	d50b      	bpl.n	80064da <_printf_i+0xa2>
 80064c2:	6806      	ldr	r6, [r0, #0]
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	da03      	bge.n	80064d2 <_printf_i+0x9a>
 80064ca:	232d      	movs	r3, #45	@ 0x2d
 80064cc:	9a03      	ldr	r2, [sp, #12]
 80064ce:	4276      	negs	r6, r6
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006648 <_printf_i+0x210>)
 80064d4:	270a      	movs	r7, #10
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	e018      	b.n	800650c <_printf_i+0xd4>
 80064da:	6806      	ldr	r6, [r0, #0]
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	0649      	lsls	r1, r1, #25
 80064e0:	d5f1      	bpl.n	80064c6 <_printf_i+0x8e>
 80064e2:	b236      	sxth	r6, r6
 80064e4:	e7ef      	b.n	80064c6 <_printf_i+0x8e>
 80064e6:	6808      	ldr	r0, [r1, #0]
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	c940      	ldmia	r1!, {r6}
 80064ec:	0605      	lsls	r5, r0, #24
 80064ee:	d402      	bmi.n	80064f6 <_printf_i+0xbe>
 80064f0:	0640      	lsls	r0, r0, #25
 80064f2:	d500      	bpl.n	80064f6 <_printf_i+0xbe>
 80064f4:	b2b6      	uxth	r6, r6
 80064f6:	6019      	str	r1, [r3, #0]
 80064f8:	4b53      	ldr	r3, [pc, #332]	@ (8006648 <_printf_i+0x210>)
 80064fa:	270a      	movs	r7, #10
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	2a6f      	cmp	r2, #111	@ 0x6f
 8006500:	d100      	bne.n	8006504 <_printf_i+0xcc>
 8006502:	3f02      	subs	r7, #2
 8006504:	0023      	movs	r3, r4
 8006506:	2200      	movs	r2, #0
 8006508:	3343      	adds	r3, #67	@ 0x43
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	db06      	blt.n	8006522 <_printf_i+0xea>
 8006514:	2104      	movs	r1, #4
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	9d03      	ldr	r5, [sp, #12]
 800651a:	438a      	bics	r2, r1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	4333      	orrs	r3, r6
 8006520:	d00c      	beq.n	800653c <_printf_i+0x104>
 8006522:	9d03      	ldr	r5, [sp, #12]
 8006524:	0030      	movs	r0, r6
 8006526:	0039      	movs	r1, r7
 8006528:	f7f9 fe86 	bl	8000238 <__aeabi_uidivmod>
 800652c:	9b04      	ldr	r3, [sp, #16]
 800652e:	3d01      	subs	r5, #1
 8006530:	5c5b      	ldrb	r3, [r3, r1]
 8006532:	702b      	strb	r3, [r5, #0]
 8006534:	0033      	movs	r3, r6
 8006536:	0006      	movs	r6, r0
 8006538:	429f      	cmp	r7, r3
 800653a:	d9f3      	bls.n	8006524 <_printf_i+0xec>
 800653c:	2f08      	cmp	r7, #8
 800653e:	d109      	bne.n	8006554 <_printf_i+0x11c>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	07db      	lsls	r3, r3, #31
 8006544:	d506      	bpl.n	8006554 <_printf_i+0x11c>
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	dc02      	bgt.n	8006554 <_printf_i+0x11c>
 800654e:	2330      	movs	r3, #48	@ 0x30
 8006550:	3d01      	subs	r5, #1
 8006552:	702b      	strb	r3, [r5, #0]
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1b5b      	subs	r3, r3, r5
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	0021      	movs	r1, r4
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	9805      	ldr	r0, [sp, #20]
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	aa09      	add	r2, sp, #36	@ 0x24
 8006566:	f7ff fef7 	bl	8006358 <_printf_common>
 800656a:	3001      	adds	r0, #1
 800656c:	d148      	bne.n	8006600 <_printf_i+0x1c8>
 800656e:	2001      	movs	r0, #1
 8006570:	4240      	negs	r0, r0
 8006572:	b00b      	add	sp, #44	@ 0x2c
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006576:	2220      	movs	r2, #32
 8006578:	6809      	ldr	r1, [r1, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	2278      	movs	r2, #120	@ 0x78
 8006580:	4932      	ldr	r1, [pc, #200]	@ (800664c <_printf_i+0x214>)
 8006582:	9104      	str	r1, [sp, #16]
 8006584:	0021      	movs	r1, r4
 8006586:	3145      	adds	r1, #69	@ 0x45
 8006588:	700a      	strb	r2, [r1, #0]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	6822      	ldr	r2, [r4, #0]
 800658e:	c940      	ldmia	r1!, {r6}
 8006590:	0610      	lsls	r0, r2, #24
 8006592:	d402      	bmi.n	800659a <_printf_i+0x162>
 8006594:	0650      	lsls	r0, r2, #25
 8006596:	d500      	bpl.n	800659a <_printf_i+0x162>
 8006598:	b2b6      	uxth	r6, r6
 800659a:	6019      	str	r1, [r3, #0]
 800659c:	07d3      	lsls	r3, r2, #31
 800659e:	d502      	bpl.n	80065a6 <_printf_i+0x16e>
 80065a0:	2320      	movs	r3, #32
 80065a2:	4313      	orrs	r3, r2
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	d001      	beq.n	80065ae <_printf_i+0x176>
 80065aa:	2710      	movs	r7, #16
 80065ac:	e7aa      	b.n	8006504 <_printf_i+0xcc>
 80065ae:	2220      	movs	r2, #32
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	4393      	bics	r3, r2
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	e7f8      	b.n	80065aa <_printf_i+0x172>
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	680d      	ldr	r5, [r1, #0]
 80065bc:	1d10      	adds	r0, r2, #4
 80065be:	6949      	ldr	r1, [r1, #20]
 80065c0:	6018      	str	r0, [r3, #0]
 80065c2:	6813      	ldr	r3, [r2, #0]
 80065c4:	062e      	lsls	r6, r5, #24
 80065c6:	d501      	bpl.n	80065cc <_printf_i+0x194>
 80065c8:	6019      	str	r1, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <_printf_i+0x19a>
 80065cc:	066d      	lsls	r5, r5, #25
 80065ce:	d5fb      	bpl.n	80065c8 <_printf_i+0x190>
 80065d0:	8019      	strh	r1, [r3, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9d03      	ldr	r5, [sp, #12]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	e7bf      	b.n	800655a <_printf_i+0x122>
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	1d11      	adds	r1, r2, #4
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	6815      	ldr	r5, [r2, #0]
 80065e2:	2100      	movs	r1, #0
 80065e4:	0028      	movs	r0, r5
 80065e6:	6862      	ldr	r2, [r4, #4]
 80065e8:	f000 f986 	bl	80068f8 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d001      	beq.n	80065f4 <_printf_i+0x1bc>
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	6060      	str	r0, [r4, #4]
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	2300      	movs	r3, #0
 80065fa:	9a03      	ldr	r2, [sp, #12]
 80065fc:	7013      	strb	r3, [r2, #0]
 80065fe:	e7ac      	b.n	800655a <_printf_i+0x122>
 8006600:	002a      	movs	r2, r5
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	9906      	ldr	r1, [sp, #24]
 8006606:	9805      	ldr	r0, [sp, #20]
 8006608:	9d07      	ldr	r5, [sp, #28]
 800660a:	47a8      	blx	r5
 800660c:	3001      	adds	r0, #1
 800660e:	d0ae      	beq.n	800656e <_printf_i+0x136>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	079b      	lsls	r3, r3, #30
 8006614:	d415      	bmi.n	8006642 <_printf_i+0x20a>
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	68e0      	ldr	r0, [r4, #12]
 800661a:	4298      	cmp	r0, r3
 800661c:	daa9      	bge.n	8006572 <_printf_i+0x13a>
 800661e:	0018      	movs	r0, r3
 8006620:	e7a7      	b.n	8006572 <_printf_i+0x13a>
 8006622:	0022      	movs	r2, r4
 8006624:	2301      	movs	r3, #1
 8006626:	9906      	ldr	r1, [sp, #24]
 8006628:	9805      	ldr	r0, [sp, #20]
 800662a:	9e07      	ldr	r6, [sp, #28]
 800662c:	3219      	adds	r2, #25
 800662e:	47b0      	blx	r6
 8006630:	3001      	adds	r0, #1
 8006632:	d09c      	beq.n	800656e <_printf_i+0x136>
 8006634:	3501      	adds	r5, #1
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	42ab      	cmp	r3, r5
 800663e:	dcf0      	bgt.n	8006622 <_printf_i+0x1ea>
 8006640:	e7e9      	b.n	8006616 <_printf_i+0x1de>
 8006642:	2500      	movs	r5, #0
 8006644:	e7f7      	b.n	8006636 <_printf_i+0x1fe>
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	08006f36 	.word	0x08006f36
 800664c:	08006f47 	.word	0x08006f47

08006650 <__sflush_r>:
 8006650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006652:	220c      	movs	r2, #12
 8006654:	5e8b      	ldrsh	r3, [r1, r2]
 8006656:	0005      	movs	r5, r0
 8006658:	000c      	movs	r4, r1
 800665a:	071a      	lsls	r2, r3, #28
 800665c:	d456      	bmi.n	800670c <__sflush_r+0xbc>
 800665e:	684a      	ldr	r2, [r1, #4]
 8006660:	2a00      	cmp	r2, #0
 8006662:	dc02      	bgt.n	800666a <__sflush_r+0x1a>
 8006664:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006666:	2a00      	cmp	r2, #0
 8006668:	dd4e      	ble.n	8006708 <__sflush_r+0xb8>
 800666a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800666c:	2f00      	cmp	r7, #0
 800666e:	d04b      	beq.n	8006708 <__sflush_r+0xb8>
 8006670:	2200      	movs	r2, #0
 8006672:	2080      	movs	r0, #128	@ 0x80
 8006674:	682e      	ldr	r6, [r5, #0]
 8006676:	602a      	str	r2, [r5, #0]
 8006678:	001a      	movs	r2, r3
 800667a:	0140      	lsls	r0, r0, #5
 800667c:	6a21      	ldr	r1, [r4, #32]
 800667e:	4002      	ands	r2, r0
 8006680:	4203      	tst	r3, r0
 8006682:	d033      	beq.n	80066ec <__sflush_r+0x9c>
 8006684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	075b      	lsls	r3, r3, #29
 800668a:	d506      	bpl.n	800669a <__sflush_r+0x4a>
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <__sflush_r+0x4a>
 8006696:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	2300      	movs	r3, #0
 800669c:	0028      	movs	r0, r5
 800669e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80066a0:	6a21      	ldr	r1, [r4, #32]
 80066a2:	47b8      	blx	r7
 80066a4:	89a2      	ldrh	r2, [r4, #12]
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	d106      	bne.n	80066b8 <__sflush_r+0x68>
 80066aa:	6829      	ldr	r1, [r5, #0]
 80066ac:	291d      	cmp	r1, #29
 80066ae:	d846      	bhi.n	800673e <__sflush_r+0xee>
 80066b0:	4b29      	ldr	r3, [pc, #164]	@ (8006758 <__sflush_r+0x108>)
 80066b2:	40cb      	lsrs	r3, r1
 80066b4:	07db      	lsls	r3, r3, #31
 80066b6:	d542      	bpl.n	800673e <__sflush_r+0xee>
 80066b8:	2300      	movs	r3, #0
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	04d2      	lsls	r2, r2, #19
 80066c2:	d505      	bpl.n	80066d0 <__sflush_r+0x80>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <__sflush_r+0x7e>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d100      	bne.n	80066d0 <__sflush_r+0x80>
 80066ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d2:	602e      	str	r6, [r5, #0]
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d017      	beq.n	8006708 <__sflush_r+0xb8>
 80066d8:	0023      	movs	r3, r4
 80066da:	3344      	adds	r3, #68	@ 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__sflush_r+0x96>
 80066e0:	0028      	movs	r0, r5
 80066e2:	f7ff fb4d 	bl	8005d80 <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ea:	e00d      	b.n	8006708 <__sflush_r+0xb8>
 80066ec:	2301      	movs	r3, #1
 80066ee:	0028      	movs	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	0002      	movs	r2, r0
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d1c6      	bne.n	8006686 <__sflush_r+0x36>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0c3      	beq.n	8006686 <__sflush_r+0x36>
 80066fe:	2b1d      	cmp	r3, #29
 8006700:	d001      	beq.n	8006706 <__sflush_r+0xb6>
 8006702:	2b16      	cmp	r3, #22
 8006704:	d11a      	bne.n	800673c <__sflush_r+0xec>
 8006706:	602e      	str	r6, [r5, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e01e      	b.n	800674a <__sflush_r+0xfa>
 800670c:	690e      	ldr	r6, [r1, #16]
 800670e:	2e00      	cmp	r6, #0
 8006710:	d0fa      	beq.n	8006708 <__sflush_r+0xb8>
 8006712:	680f      	ldr	r7, [r1, #0]
 8006714:	600e      	str	r6, [r1, #0]
 8006716:	1bba      	subs	r2, r7, r6
 8006718:	9201      	str	r2, [sp, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	079b      	lsls	r3, r3, #30
 800671e:	d100      	bne.n	8006722 <__sflush_r+0xd2>
 8006720:	694a      	ldr	r2, [r1, #20]
 8006722:	60a2      	str	r2, [r4, #8]
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	ddee      	ble.n	8006708 <__sflush_r+0xb8>
 800672a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800672c:	0032      	movs	r2, r6
 800672e:	001f      	movs	r7, r3
 8006730:	0028      	movs	r0, r5
 8006732:	9b01      	ldr	r3, [sp, #4]
 8006734:	6a21      	ldr	r1, [r4, #32]
 8006736:	47b8      	blx	r7
 8006738:	2800      	cmp	r0, #0
 800673a:	dc07      	bgt.n	800674c <__sflush_r+0xfc>
 800673c:	89a2      	ldrh	r2, [r4, #12]
 800673e:	2340      	movs	r3, #64	@ 0x40
 8006740:	2001      	movs	r0, #1
 8006742:	4313      	orrs	r3, r2
 8006744:	b21b      	sxth	r3, r3
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	4240      	negs	r0, r0
 800674a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	1836      	adds	r6, r6, r0
 8006750:	1a1b      	subs	r3, r3, r0
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	e7e6      	b.n	8006724 <__sflush_r+0xd4>
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	20400001 	.word	0x20400001

0800675c <_fflush_r>:
 800675c:	690b      	ldr	r3, [r1, #16]
 800675e:	b570      	push	{r4, r5, r6, lr}
 8006760:	0005      	movs	r5, r0
 8006762:	000c      	movs	r4, r1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <_fflush_r+0x12>
 8006768:	2500      	movs	r5, #0
 800676a:	0028      	movs	r0, r5
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	2800      	cmp	r0, #0
 8006770:	d004      	beq.n	800677c <_fflush_r+0x20>
 8006772:	6a03      	ldr	r3, [r0, #32]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <_fflush_r+0x20>
 8006778:	f7ff f85e 	bl	8005838 <__sinit>
 800677c:	220c      	movs	r2, #12
 800677e:	5ea3      	ldrsh	r3, [r4, r2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f1      	beq.n	8006768 <_fflush_r+0xc>
 8006784:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006786:	07d2      	lsls	r2, r2, #31
 8006788:	d404      	bmi.n	8006794 <_fflush_r+0x38>
 800678a:	059b      	lsls	r3, r3, #22
 800678c:	d402      	bmi.n	8006794 <_fflush_r+0x38>
 800678e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006790:	f7ff fae3 	bl	8005d5a <__retarget_lock_acquire_recursive>
 8006794:	0028      	movs	r0, r5
 8006796:	0021      	movs	r1, r4
 8006798:	f7ff ff5a 	bl	8006650 <__sflush_r>
 800679c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800679e:	0005      	movs	r5, r0
 80067a0:	07db      	lsls	r3, r3, #31
 80067a2:	d4e2      	bmi.n	800676a <_fflush_r+0xe>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	059b      	lsls	r3, r3, #22
 80067a8:	d4df      	bmi.n	800676a <_fflush_r+0xe>
 80067aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ac:	f7ff fad6 	bl	8005d5c <__retarget_lock_release_recursive>
 80067b0:	e7db      	b.n	800676a <_fflush_r+0xe>
	...

080067b4 <__swhatbuf_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	000e      	movs	r6, r1
 80067b8:	001d      	movs	r5, r3
 80067ba:	230e      	movs	r3, #14
 80067bc:	5ec9      	ldrsh	r1, [r1, r3]
 80067be:	0014      	movs	r4, r2
 80067c0:	b096      	sub	sp, #88	@ 0x58
 80067c2:	2900      	cmp	r1, #0
 80067c4:	da0c      	bge.n	80067e0 <__swhatbuf_r+0x2c>
 80067c6:	89b2      	ldrh	r2, [r6, #12]
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	0011      	movs	r1, r2
 80067cc:	4019      	ands	r1, r3
 80067ce:	421a      	tst	r2, r3
 80067d0:	d114      	bne.n	80067fc <__swhatbuf_r+0x48>
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	2000      	movs	r0, #0
 80067d8:	6029      	str	r1, [r5, #0]
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	b016      	add	sp, #88	@ 0x58
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	466a      	mov	r2, sp
 80067e2:	f000 f865 	bl	80068b0 <_fstat_r>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	dbed      	blt.n	80067c6 <__swhatbuf_r+0x12>
 80067ea:	23f0      	movs	r3, #240	@ 0xf0
 80067ec:	9901      	ldr	r1, [sp, #4]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	4019      	ands	r1, r3
 80067f2:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <__swhatbuf_r+0x50>)
 80067f4:	18c9      	adds	r1, r1, r3
 80067f6:	424b      	negs	r3, r1
 80067f8:	4159      	adcs	r1, r3
 80067fa:	e7ea      	b.n	80067d2 <__swhatbuf_r+0x1e>
 80067fc:	2100      	movs	r1, #0
 80067fe:	2340      	movs	r3, #64	@ 0x40
 8006800:	e7e9      	b.n	80067d6 <__swhatbuf_r+0x22>
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	ffffe000 	.word	0xffffe000

08006808 <__smakebuf_r>:
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	2602      	movs	r6, #2
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	0005      	movs	r5, r0
 8006810:	000c      	movs	r4, r1
 8006812:	b085      	sub	sp, #20
 8006814:	4233      	tst	r3, r6
 8006816:	d007      	beq.n	8006828 <__smakebuf_r+0x20>
 8006818:	0023      	movs	r3, r4
 800681a:	3347      	adds	r3, #71	@ 0x47
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2301      	movs	r3, #1
 8006822:	6163      	str	r3, [r4, #20]
 8006824:	b005      	add	sp, #20
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006828:	ab03      	add	r3, sp, #12
 800682a:	aa02      	add	r2, sp, #8
 800682c:	f7ff ffc2 	bl	80067b4 <__swhatbuf_r>
 8006830:	9f02      	ldr	r7, [sp, #8]
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	0039      	movs	r1, r7
 8006836:	0028      	movs	r0, r5
 8006838:	f7fe fe48 	bl	80054cc <_malloc_r>
 800683c:	2800      	cmp	r0, #0
 800683e:	d108      	bne.n	8006852 <__smakebuf_r+0x4a>
 8006840:	220c      	movs	r2, #12
 8006842:	5ea3      	ldrsh	r3, [r4, r2]
 8006844:	059a      	lsls	r2, r3, #22
 8006846:	d4ed      	bmi.n	8006824 <__smakebuf_r+0x1c>
 8006848:	2203      	movs	r2, #3
 800684a:	4393      	bics	r3, r2
 800684c:	431e      	orrs	r6, r3
 800684e:	81a6      	strh	r6, [r4, #12]
 8006850:	e7e2      	b.n	8006818 <__smakebuf_r+0x10>
 8006852:	2380      	movs	r3, #128	@ 0x80
 8006854:	89a2      	ldrh	r2, [r4, #12]
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	4313      	orrs	r3, r2
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	6120      	str	r0, [r4, #16]
 8006860:	6167      	str	r7, [r4, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00c      	beq.n	8006880 <__smakebuf_r+0x78>
 8006866:	0028      	movs	r0, r5
 8006868:	230e      	movs	r3, #14
 800686a:	5ee1      	ldrsh	r1, [r4, r3]
 800686c:	f000 f832 	bl	80068d4 <_isatty_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	d005      	beq.n	8006880 <__smakebuf_r+0x78>
 8006874:	2303      	movs	r3, #3
 8006876:	89a2      	ldrh	r2, [r4, #12]
 8006878:	439a      	bics	r2, r3
 800687a:	3b02      	subs	r3, #2
 800687c:	4313      	orrs	r3, r2
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	9a01      	ldr	r2, [sp, #4]
 8006884:	4313      	orrs	r3, r2
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	e7cc      	b.n	8006824 <__smakebuf_r+0x1c>

0800688a <memmove>:
 800688a:	b510      	push	{r4, lr}
 800688c:	4288      	cmp	r0, r1
 800688e:	d902      	bls.n	8006896 <memmove+0xc>
 8006890:	188b      	adds	r3, r1, r2
 8006892:	4298      	cmp	r0, r3
 8006894:	d308      	bcc.n	80068a8 <memmove+0x1e>
 8006896:	2300      	movs	r3, #0
 8006898:	429a      	cmp	r2, r3
 800689a:	d007      	beq.n	80068ac <memmove+0x22>
 800689c:	5ccc      	ldrb	r4, [r1, r3]
 800689e:	54c4      	strb	r4, [r0, r3]
 80068a0:	3301      	adds	r3, #1
 80068a2:	e7f9      	b.n	8006898 <memmove+0xe>
 80068a4:	5c8b      	ldrb	r3, [r1, r2]
 80068a6:	5483      	strb	r3, [r0, r2]
 80068a8:	3a01      	subs	r2, #1
 80068aa:	d2fb      	bcs.n	80068a4 <memmove+0x1a>
 80068ac:	bd10      	pop	{r4, pc}
	...

080068b0 <_fstat_r>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b570      	push	{r4, r5, r6, lr}
 80068b4:	4d06      	ldr	r5, [pc, #24]	@ (80068d0 <_fstat_r+0x20>)
 80068b6:	0004      	movs	r4, r0
 80068b8:	0008      	movs	r0, r1
 80068ba:	0011      	movs	r1, r2
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	f7fa f8fc 	bl	8000aba <_fstat>
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	d103      	bne.n	80068ce <_fstat_r+0x1e>
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d000      	beq.n	80068ce <_fstat_r+0x1e>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	20000380 	.word	0x20000380

080068d4 <_isatty_r>:
 80068d4:	2300      	movs	r3, #0
 80068d6:	b570      	push	{r4, r5, r6, lr}
 80068d8:	4d06      	ldr	r5, [pc, #24]	@ (80068f4 <_isatty_r+0x20>)
 80068da:	0004      	movs	r4, r0
 80068dc:	0008      	movs	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fa f8f9 	bl	8000ad6 <_isatty>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d103      	bne.n	80068f0 <_isatty_r+0x1c>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d000      	beq.n	80068f0 <_isatty_r+0x1c>
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	20000380 	.word	0x20000380

080068f8 <memchr>:
 80068f8:	b2c9      	uxtb	r1, r1
 80068fa:	1882      	adds	r2, r0, r2
 80068fc:	4290      	cmp	r0, r2
 80068fe:	d101      	bne.n	8006904 <memchr+0xc>
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr
 8006904:	7803      	ldrb	r3, [r0, #0]
 8006906:	428b      	cmp	r3, r1
 8006908:	d0fb      	beq.n	8006902 <memchr+0xa>
 800690a:	3001      	adds	r0, #1
 800690c:	e7f6      	b.n	80068fc <memchr+0x4>

0800690e <_realloc_r>:
 800690e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006910:	0006      	movs	r6, r0
 8006912:	000c      	movs	r4, r1
 8006914:	0015      	movs	r5, r2
 8006916:	2900      	cmp	r1, #0
 8006918:	d105      	bne.n	8006926 <_realloc_r+0x18>
 800691a:	0011      	movs	r1, r2
 800691c:	f7fe fdd6 	bl	80054cc <_malloc_r>
 8006920:	0004      	movs	r4, r0
 8006922:	0020      	movs	r0, r4
 8006924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006926:	2a00      	cmp	r2, #0
 8006928:	d103      	bne.n	8006932 <_realloc_r+0x24>
 800692a:	f7ff fa29 	bl	8005d80 <_free_r>
 800692e:	002c      	movs	r4, r5
 8006930:	e7f7      	b.n	8006922 <_realloc_r+0x14>
 8006932:	f000 f81c 	bl	800696e <_malloc_usable_size_r>
 8006936:	0007      	movs	r7, r0
 8006938:	4285      	cmp	r5, r0
 800693a:	d802      	bhi.n	8006942 <_realloc_r+0x34>
 800693c:	0843      	lsrs	r3, r0, #1
 800693e:	42ab      	cmp	r3, r5
 8006940:	d3ef      	bcc.n	8006922 <_realloc_r+0x14>
 8006942:	0029      	movs	r1, r5
 8006944:	0030      	movs	r0, r6
 8006946:	f7fe fdc1 	bl	80054cc <_malloc_r>
 800694a:	9001      	str	r0, [sp, #4]
 800694c:	2800      	cmp	r0, #0
 800694e:	d101      	bne.n	8006954 <_realloc_r+0x46>
 8006950:	9c01      	ldr	r4, [sp, #4]
 8006952:	e7e6      	b.n	8006922 <_realloc_r+0x14>
 8006954:	002a      	movs	r2, r5
 8006956:	42bd      	cmp	r5, r7
 8006958:	d900      	bls.n	800695c <_realloc_r+0x4e>
 800695a:	003a      	movs	r2, r7
 800695c:	0021      	movs	r1, r4
 800695e:	9801      	ldr	r0, [sp, #4]
 8006960:	f7ff fa05 	bl	8005d6e <memcpy>
 8006964:	0021      	movs	r1, r4
 8006966:	0030      	movs	r0, r6
 8006968:	f7ff fa0a 	bl	8005d80 <_free_r>
 800696c:	e7f0      	b.n	8006950 <_realloc_r+0x42>

0800696e <_malloc_usable_size_r>:
 800696e:	1f0b      	subs	r3, r1, #4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	1f18      	subs	r0, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	da01      	bge.n	800697c <_malloc_usable_size_r+0xe>
 8006978:	580b      	ldr	r3, [r1, r0]
 800697a:	18c0      	adds	r0, r0, r3
 800697c:	4770      	bx	lr
	...

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
