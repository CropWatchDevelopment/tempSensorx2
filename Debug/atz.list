
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080078cc  080078cc  000088cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c94  08007c94  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c9c  08007c9c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ca0  08007ca0  00008ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007ca4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000060  08007d04  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200003bc  08007d04  000093bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001467b  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e2  00000000  00000000  0001d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000210e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dba  00000000  00000000  00023062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018226  00000000  00000000  0003ae1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874de  00000000  00000000  00053042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004344  00000000  00000000  000da564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000de8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078b4 	.word	0x080078b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080078b4 	.word	0x080078b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fd84 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fd96 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f006 fe03 	bl	80070c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b27      	ldr	r3, [pc, #156]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <MX_GPIO_Init+0xb8>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2202      	movs	r2, #2
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_GPIO_Init+0xbc>)
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	0018      	movs	r0, r3
 8000512:	f002 f941 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2220      	movs	r2, #32
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	193a      	adds	r2, r7, r4
 800052a:	23a0      	movs	r3, #160	@ 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 ffb3 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2220      	movs	r2, #32
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000550:	187b      	adds	r3, r7, r1
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <MX_GPIO_Init+0xbc>)
 8000554:	0019      	movs	r1, r3
 8000556:	0010      	movs	r0, r2
 8000558:	f001 ffa0 	bl	800249c <HAL_GPIO_Init>

}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b009      	add	sp, #36	@ 0x24
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	50000400 	.word	0x50000400

0800056c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000570:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <MX_I2C1_Init+0x7c>)
 8000574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000578:	22c1      	movs	r2, #193	@ 0xc1
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000584:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000586:	2201      	movs	r2, #1
 8000588:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <MX_I2C1_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_I2C1_Init+0x78>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_I2C1_Init+0x78>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 f912 	bl	80027d4 <HAL_I2C_Init>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005b4:	f000 fae4 	bl	8000b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 ffb1 	bl	8003524 <HAL_I2CEx_ConfigAnalogFilter>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005c6:	f000 fadb 	bl	8000b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_I2C1_Init+0x78>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 fff4 	bl	80035bc <HAL_I2CEx_ConfigDigitalFilter>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005d8:	f000 fad2 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	40005400 	.word	0x40005400

080005ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b089      	sub	sp, #36	@ 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	240c      	movs	r4, #12
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f006 fd62 	bl	80070c8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <HAL_I2C_MspInit+0x7c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d128      	bne.n	8000660 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000614:	2102      	movs	r1, #2
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <HAL_I2C_MspInit+0x80>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	2202      	movs	r2, #2
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	22c0      	movs	r2, #192	@ 0xc0
 800062c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2212      	movs	r2, #18
 8000632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2203      	movs	r2, #3
 800063e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	187b      	adds	r3, r7, r1
 8000648:	4a09      	ldr	r2, [pc, #36]	@ (8000670 <HAL_I2C_MspInit+0x84>)
 800064a:	0019      	movs	r1, r3
 800064c:	0010      	movs	r0, r2
 800064e:	f001 ff25 	bl	800249c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_I2C_MspInit+0x80>)
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	0389      	lsls	r1, r1, #14
 800065c:	430a      	orrs	r2, r1
 800065e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b009      	add	sp, #36	@ 0x24
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40005400 	.word	0x40005400
 800066c:	40021000 	.word	0x40021000
 8000670:	50000400 	.word	0x50000400

08000674 <cb_WAKE>:
// --- Add for STOP mode sleep management ---
volatile uint8_t sleep_cycles = 0;
volatile uint8_t sleep_wakeup_flag = 0;

void cb_WAKE(const char* str)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <cb_WAKE+0x18>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	2000010c 	.word	0x2000010c

08000690 <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <cb_JOIN_SUCCESS+0x18>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	20000000 	.word	0x20000000

080006ac <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <cb_NOT_JOINED+0x18>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000000 	.word	0x20000000

080006c8 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_Delay(5000);
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <cb_DATA_RESPONSE+0x30>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fb70 	bl	8001db8 <HAL_Delay>
  // Check if this is a TX confirmation
  if (strstr(str, "TX:") != NULL) {
 80006d8:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <cb_DATA_RESPONSE+0x34>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f006 fd07 	bl	80070f2 <strstr>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d002      	beq.n	80006ee <cb_DATA_RESPONSE+0x26>
    lorawan_state = ENTER_SLEEP_MODE;
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <cb_DATA_RESPONSE+0x38>)
 80006ea:	2205      	movs	r2, #5
 80006ec:	701a      	strb	r2, [r3, #0]
  }
  // You can parse downlink data here if needed
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	00001388 	.word	0x00001388
 80006fc:	080078cc 	.word	0x080078cc
 8000700:	20000000 	.word	0x20000000

08000704 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	000a      	movs	r2, r1
 800070e:	1cbb      	adds	r3, r7, #2
 8000710:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_UARTEx_RxEventCallback+0x30>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 800071c:	1cbb      	adds	r3, r7, #2
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_UARTEx_RxEventCallback+0x34>)
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f006 fb5f 	bl	8006de8 <ATC_IdleLineCallback>
	}
}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	40004800 	.word	0x40004800
 8000738:	200000d0 	.word	0x200000d0

0800073c <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief RTC Wake-up Timer Event Callback
 * This function is called when the RTC wake-up timer expires
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    // Set flag to indicate wakeup
    sleep_wakeup_flag = 1;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
    if (sleep_cycles > 0) sleep_cycles--;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <HAL_RTCEx_WakeUpTimerEventCallback+0x26>
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b01      	subs	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8000760:	701a      	strb	r2, [r3, #0]
}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	2000011a 	.word	0x2000011a
 8000770:	20000119 	.word	0x20000119

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b09c      	sub	sp, #112	@ 0x70
 8000778:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 faad 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f989 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f7ff fe93 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000786:	f7ff fe73 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800078a:	f7ff feef 	bl	800056c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800078e:	f000 fb1d 	bl	8000dcc <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000792:	f000 f9fb 	bl	8000b8c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Initialize ATC LoRa handle
  lora.hUart = &hlpuart1;
 8000796:	4ba2      	ldr	r3, [pc, #648]	@ (8000a20 <main+0x2ac>)
 8000798:	4aa2      	ldr	r2, [pc, #648]	@ (8000a24 <main+0x2b0>)
 800079a:	601a      	str	r2, [r3, #0]
  lora.psEvents = (ATC_EventTypeDef*)events;
 800079c:	4ba0      	ldr	r3, [pc, #640]	@ (8000a20 <main+0x2ac>)
 800079e:	4aa2      	ldr	r2, [pc, #648]	@ (8000a28 <main+0x2b4>)
 80007a0:	60da      	str	r2, [r3, #12]
  lora.Events = sizeof(events) / sizeof(events[0]);
 80007a2:	4b9f      	ldr	r3, [pc, #636]	@ (8000a20 <main+0x2ac>)
 80007a4:	2206      	movs	r2, #6
 80007a6:	611a      	str	r2, [r3, #16]
  lora.Size = 256;  // Buffer size
 80007a8:	4b9d      	ldr	r3, [pc, #628]	@ (8000a20 <main+0x2ac>)
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	829a      	strh	r2, [r3, #20]
  lora.pRxBuff = malloc(lora.Size);
 80007b0:	4b9b      	ldr	r3, [pc, #620]	@ (8000a20 <main+0x2ac>)
 80007b2:	8a9b      	ldrh	r3, [r3, #20]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f006 fb8b 	bl	8006ed0 <malloc>
 80007ba:	0003      	movs	r3, r0
 80007bc:	001a      	movs	r2, r3
 80007be:	4b98      	ldr	r3, [pc, #608]	@ (8000a20 <main+0x2ac>)
 80007c0:	61da      	str	r2, [r3, #28]
  lora.pReadBuff = malloc(lora.Size);
 80007c2:	4b97      	ldr	r3, [pc, #604]	@ (8000a20 <main+0x2ac>)
 80007c4:	8a9b      	ldrh	r3, [r3, #20]
 80007c6:	0018      	movs	r0, r3
 80007c8:	f006 fb82 	bl	8006ed0 <malloc>
 80007cc:	0003      	movs	r3, r0
 80007ce:	001a      	movs	r2, r3
 80007d0:	4b93      	ldr	r3, [pc, #588]	@ (8000a20 <main+0x2ac>)
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  lora.RxIndex = 0;
 80007d4:	4b92      	ldr	r3, [pc, #584]	@ (8000a20 <main+0x2ac>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	831a      	strh	r2, [r3, #24]
  lora.RespCount = 0;
 80007da:	4b91      	ldr	r3, [pc, #580]	@ (8000a20 <main+0x2ac>)
 80007dc:	2200      	movs	r2, #0
 80007de:	82da      	strh	r2, [r3, #22]
  
  // Initialize response pointers to NULL
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80007e4:	e008      	b.n	80007f8 <main+0x84>
    lora.ppResp[i] = NULL;
 80007e6:	4b8e      	ldr	r3, [pc, #568]	@ (8000a20 <main+0x2ac>)
 80007e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007ea:	320a      	adds	r2, #10
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	2100      	movs	r1, #0
 80007f0:	50d1      	str	r1, [r2, r3]
  for(int i = 0; i < 16; i++) {  // ATC_RESP_MAX is typically 16
 80007f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007f4:	3301      	adds	r3, #1
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80007f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	ddf3      	ble.n	80007e6 <main+0x72>
  }

	//CONFIGURE LORAWAN STUFF:
	lorawan_configure(
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <main+0x2b8>)
 8000800:	4a8b      	ldr	r2, [pc, #556]	@ (8000a30 <main+0x2bc>)
 8000802:	498b      	ldr	r1, [pc, #556]	@ (8000a30 <main+0x2bc>)
 8000804:	4886      	ldr	r0, [pc, #536]	@ (8000a20 <main+0x2ac>)
 8000806:	f000 fbb5 	bl	8000f74 <lorawan_configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 800080a:	4b85      	ldr	r3, [pc, #532]	@ (8000a20 <main+0x2ac>)
 800080c:	0018      	movs	r0, r3
 800080e:	f006 f9e1 	bl	8006bd4 <ATC_Loop>
	  switch (lorawan_state) {
 8000812:	4b88      	ldr	r3, [pc, #544]	@ (8000a34 <main+0x2c0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b07      	cmp	r3, #7
 800081a:	d8f6      	bhi.n	800080a <main+0x96>
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <main+0x2c4>)
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 8000826:	2549      	movs	r5, #73	@ 0x49
 8000828:	197c      	adds	r4, r7, r5
 800082a:	4b7d      	ldr	r3, [pc, #500]	@ (8000a20 <main+0x2ac>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fded 	bl	800140c <join_network>
 8000832:	0003      	movs	r3, r0
 8000834:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 8000836:	197b      	adds	r3, r7, r5
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d000      	beq.n	8000840 <main+0xcc>
 800083e:	e0eb      	b.n	8000a18 <main+0x2a4>
				lorawan_state = LORAWAN_JOINING;
 8000840:	4b7c      	ldr	r3, [pc, #496]	@ (8000a34 <main+0x2c0>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
			} else {
				// Could implement retry logic here
			}
		}
		break;
 8000846:	e0e7      	b.n	8000a18 <main+0x2a4>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 8000848:	4b7c      	ldr	r3, [pc, #496]	@ (8000a3c <main+0x2c8>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]

		  char* CONNECTION_STATUS = NULL;
 800084e:	2300      	movs	r3, #0
 8000850:	647b      	str	r3, [r7, #68]	@ 0x44
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 8000852:	2344      	movs	r3, #68	@ 0x44
 8000854:	18fa      	adds	r2, r7, r3
 8000856:	497a      	ldr	r1, [pc, #488]	@ (8000a40 <main+0x2cc>)
 8000858:	4871      	ldr	r0, [pc, #452]	@ (8000a20 <main+0x2ac>)
 800085a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a44 <main+0x2d0>)
 800085c:	9303      	str	r3, [sp, #12]
 800085e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a48 <main+0x2d4>)
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	2302      	movs	r3, #2
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	23fa      	movs	r3, #250	@ 0xfa
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	0013      	movs	r3, r2
 800086e:	22c8      	movs	r2, #200	@ 0xc8
 8000870:	f006 f9c0 	bl	8006bf4 <ATC_SendReceive>
 8000874:	0002      	movs	r2, r0
 8000876:	4b75      	ldr	r3, [pc, #468]	@ (8000a4c <main+0x2d8>)
 8000878:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 800087a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <main+0x114>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000880:	4b6c      	ldr	r3, [pc, #432]	@ (8000a34 <main+0x2c0>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
			  break;
 8000886:	e0ca      	b.n	8000a1e <main+0x2aa>
		  }

		  // Create AT command with sensor data
		  char at_command[64];
		  uint16_t sensor_val = temp_ticks_2; // Use sensor data
 8000888:	214a      	movs	r1, #74	@ 0x4a
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a70      	ldr	r2, [pc, #448]	@ (8000a50 <main+0x2dc>)
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 8000892:	187b      	adds	r3, r7, r1
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	003a      	movs	r2, r7
 8000898:	2104      	movs	r1, #4
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fe86 	bl	80015ac <format_at_send_cmd>

		  char* ATSEND_Result = NULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK\r", "ERROR");
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	18fa      	adds	r2, r7, r3
 80008a8:	0039      	movs	r1, r7
 80008aa:	485d      	ldr	r0, [pc, #372]	@ (8000a20 <main+0x2ac>)
 80008ac:	4b69      	ldr	r3, [pc, #420]	@ (8000a54 <main+0x2e0>)
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	4b69      	ldr	r3, [pc, #420]	@ (8000a58 <main+0x2e4>)
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	2302      	movs	r3, #2
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	23fa      	movs	r3, #250	@ 0xfa
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	0013      	movs	r3, r2
 80008c0:	22c8      	movs	r2, #200	@ 0xc8
 80008c2:	f006 f997 	bl	8006bf4 <ATC_SendReceive>
 80008c6:	0002      	movs	r2, r0
 80008c8:	4b60      	ldr	r3, [pc, #384]	@ (8000a4c <main+0x2d8>)
 80008ca:	601a      	str	r2, [r3, #0]
		  if (resp == 1) {
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x2d8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d103      	bne.n	80008dc <main+0x168>
			  lorawan_state = LORAWAN_DATA_SENDING;
 80008d4:	4b57      	ldr	r3, [pc, #348]	@ (8000a34 <main+0x2c0>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	701a      	strb	r2, [r3, #0]
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 80008da:	e0a0      	b.n	8000a1e <main+0x2aa>
			  lorawan_state = LORAWAN_NOT_JOINED;
 80008dc:	4b55      	ldr	r3, [pc, #340]	@ (8000a34 <main+0x2c0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	  break;
 80008e2:	e09c      	b.n	8000a1e <main+0x2aa>
	  case LORAWAN_DATA_SENDING:
			// Start timer when entering this state
			if (data_sending_start_time == 0) {
 80008e4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a5c <main+0x2e8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <main+0x182>
				data_sending_start_time = HAL_GetTick();
 80008ec:	f001 fa5a 	bl	8001da4 <HAL_GetTick>
 80008f0:	0002      	movs	r2, r0
 80008f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a5c <main+0x2e8>)
 80008f4:	601a      	str	r2, [r3, #0]
			}

			// Check if 10 seconds have passed
			if ((HAL_GetTick() - data_sending_start_time) >= 10000) {
 80008f6:	f001 fa55 	bl	8001da4 <HAL_GetTick>
 80008fa:	0002      	movs	r2, r0
 80008fc:	4b57      	ldr	r3, [pc, #348]	@ (8000a5c <main+0x2e8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	4a57      	ldr	r2, [pc, #348]	@ (8000a60 <main+0x2ec>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d800      	bhi.n	800090a <main+0x196>
 8000908:	e088      	b.n	8000a1c <main+0x2a8>
				data_sending_start_time = 0; // Reset timer
 800090a:	4b54      	ldr	r3, [pc, #336]	@ (8000a5c <main+0x2e8>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
				lorawan_state = ENTER_SLEEP_MODE;  // Go directly to sleep, not DEVICE_SLEEP
 8000910:	4b48      	ldr	r3, [pc, #288]	@ (8000a34 <main+0x2c0>)
 8000912:	2205      	movs	r2, #5
 8000914:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000916:	e081      	b.n	8000a1c <main+0x2a8>
	  case LORAWAN_DATA_RECEIVED:
		  // Handle received downlink data (this is only for actual downlink messages)
		  lorawan_state = ENTER_SLEEP_MODE;
 8000918:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <main+0x2c0>)
 800091a:	2205      	movs	r2, #5
 800091c:	701a      	strb	r2, [r3, #0]
		  break;
 800091e:	e07e      	b.n	8000a1e <main+0x2aa>
	  case ENTER_SLEEP_MODE:
		  ATC_SendReceive(&lora, "ATI 42\r\n", 200, &CONNECTION_STATUS, 2000, 5, "0", "1", "2", "3", "OK");
 8000920:	2444      	movs	r4, #68	@ 0x44
 8000922:	193a      	adds	r2, r7, r4
 8000924:	494f      	ldr	r1, [pc, #316]	@ (8000a64 <main+0x2f0>)
 8000926:	483e      	ldr	r0, [pc, #248]	@ (8000a20 <main+0x2ac>)
 8000928:	4b4f      	ldr	r3, [pc, #316]	@ (8000a68 <main+0x2f4>)
 800092a:	9306      	str	r3, [sp, #24]
 800092c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <main+0x2f8>)
 800092e:	9305      	str	r3, [sp, #20]
 8000930:	4b4f      	ldr	r3, [pc, #316]	@ (8000a70 <main+0x2fc>)
 8000932:	9304      	str	r3, [sp, #16]
 8000934:	4b43      	ldr	r3, [pc, #268]	@ (8000a44 <main+0x2d0>)
 8000936:	9303      	str	r3, [sp, #12]
 8000938:	4b4e      	ldr	r3, [pc, #312]	@ (8000a74 <main+0x300>)
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2305      	movs	r3, #5
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	23fa      	movs	r3, #250	@ 0xfa
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	0013      	movs	r3, r2
 8000948:	22c8      	movs	r2, #200	@ 0xc8
 800094a:	f006 f953 	bl	8006bf4 <ATC_SendReceive>
		  ATC_SendReceive(&lora, "AT+SLEEP\r\n", 200, &CONNECTION_STATUS, 2000, 1, "OK");
 800094e:	193a      	adds	r2, r7, r4
 8000950:	4949      	ldr	r1, [pc, #292]	@ (8000a78 <main+0x304>)
 8000952:	4833      	ldr	r0, [pc, #204]	@ (8000a20 <main+0x2ac>)
 8000954:	4b44      	ldr	r3, [pc, #272]	@ (8000a68 <main+0x2f4>)
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2301      	movs	r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	23fa      	movs	r3, #250	@ 0xfa
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	0013      	movs	r3, r2
 8000964:	22c8      	movs	r2, #200	@ 0xc8
 8000966:	f006 f945 	bl	8006bf4 <ATC_SendReceive>
		  ATC_SendReceive(&lora, "AT+SLEEP\r\n", 200, &CONNECTION_STATUS, 2000, 1, "OK");
 800096a:	193a      	adds	r2, r7, r4
 800096c:	4942      	ldr	r1, [pc, #264]	@ (8000a78 <main+0x304>)
 800096e:	482c      	ldr	r0, [pc, #176]	@ (8000a20 <main+0x2ac>)
 8000970:	4b3d      	ldr	r3, [pc, #244]	@ (8000a68 <main+0x2f4>)
 8000972:	9302      	str	r3, [sp, #8]
 8000974:	2301      	movs	r3, #1
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	23fa      	movs	r3, #250	@ 0xfa
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	0013      	movs	r3, r2
 8000980:	22c8      	movs	r2, #200	@ 0xc8
 8000982:	f006 f937 	bl	8006bf4 <ATC_SendReceive>
		  HAL_SuspendTick();
 8000986:	f001 fa3b 	bl	8001e00 <HAL_SuspendTick>
		  if (sleep_cycles == 0) {
 800098a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a7c <main+0x308>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <main+0x226>
			  sleep_cycles = 8; // 8 x 16s = ~128s
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <main+0x308>)
 8000996:	2208      	movs	r2, #8
 8000998:	701a      	strb	r2, [r3, #0]
		  }
		  sleep_wakeup_flag = 0;
 800099a:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <main+0x30c>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80009a0:	4938      	ldr	r1, [pc, #224]	@ (8000a84 <main+0x310>)
 80009a2:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <main+0x314>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f004 f8fc 	bl	8004ba4 <HAL_RTCEx_SetWakeUpTimer_IT>
		  while (sleep_cycles > 0) {
 80009ac:	e00f      	b.n	80009ce <main+0x25a>
			  sleep_wakeup_flag = 0;
 80009ae:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <main+0x30c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
			  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80009b4:	2101      	movs	r1, #1
 80009b6:	2001      	movs	r0, #1
 80009b8:	f002 fe4c 	bl	8003654 <HAL_PWR_EnterSTOPMode>
			  SystemClock_Config();
 80009bc:	f000 f86a 	bl	8000a94 <SystemClock_Config>
			  while (!sleep_wakeup_flag) { __WFI(); }
 80009c0:	e000      	b.n	80009c4 <main+0x250>
 80009c2:	bf30      	wfi
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <main+0x30c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f9      	beq.n	80009c2 <main+0x24e>
		  while (sleep_cycles > 0) {
 80009ce:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <main+0x308>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1ea      	bne.n	80009ae <main+0x23a>
		  }
		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <main+0x314>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f004 f9ba 	bl	8004d54 <HAL_RTCEx_DeactivateWakeUpTimer>
		  HAL_ResumeTick();
 80009e0:	f001 fa1c 	bl	8001e1c <HAL_ResumeTick>
		  lorawan_state = DEVICE_SLEEP;
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <main+0x2c0>)
 80009e6:	2206      	movs	r2, #6
 80009e8:	701a      	strb	r2, [r3, #0]
		  break;
 80009ea:	e018      	b.n	8000a1e <main+0x2aa>
	  case DEVICE_SLEEP:
		  lorawan_state = COLLECT_DATA;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <main+0x2c0>)
 80009ee:	2207      	movs	r2, #7
 80009f0:	701a      	strb	r2, [r3, #0]
	  break;
 80009f2:	e014      	b.n	8000a1e <main+0x2aa>
	  case COLLECT_DATA:
		  // Scan for sensors and read data
		  scan_i2c_bus();
 80009f4:	f000 fe10 	bl	8001618 <scan_i2c_bus>
		  if (has_sensor_1 || has_sensor_2) {
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <main+0x318>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <main+0x294>
 8000a00:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <main+0x31c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <main+0x298>
			  sensor_init_and_read();
 8000a08:	f000 fe52 	bl	80016b0 <sensor_init_and_read>
		  }
		  lorawan_state = LORAWAN_JOINED;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <main+0x2c0>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	701a      	strb	r2, [r3, #0]
		  break;
 8000a12:	e004      	b.n	8000a1e <main+0x2aa>
		break;
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e6f8      	b.n	800080a <main+0x96>
		break;
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	e6f6      	b.n	800080a <main+0x96>
		break;
 8000a1c:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000a1e:	e6f4      	b.n	800080a <main+0x96>
 8000a20:	200000d0 	.word	0x200000d0
 8000a24:	20000144 	.word	0x20000144
 8000a28:	08007ba4 	.word	0x08007ba4
 8000a2c:	08007914 	.word	0x08007914
 8000a30:	08007938 	.word	0x08007938
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08007bd4 	.word	0x08007bd4
 8000a3c:	20000118 	.word	0x20000118
 8000a40:	0800794c 	.word	0x0800794c
 8000a44:	08007958 	.word	0x08007958
 8000a48:	0800795c 	.word	0x0800795c
 8000a4c:	20000110 	.word	0x20000110
 8000a50:	20000262 	.word	0x20000262
 8000a54:	08007960 	.word	0x08007960
 8000a58:	08007968 	.word	0x08007968
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	0000270f 	.word	0x0000270f
 8000a64:	0800796c 	.word	0x0800796c
 8000a68:	08007978 	.word	0x08007978
 8000a6c:	0800797c 	.word	0x0800797c
 8000a70:	08007980 	.word	0x08007980
 8000a74:	08007984 	.word	0x08007984
 8000a78:	08007988 	.word	0x08007988
 8000a7c:	20000119 	.word	0x20000119
 8000a80:	2000011a 	.word	0x2000011a
 8000a84:	00002710 	.word	0x00002710
 8000a88:	2000011c 	.word	0x2000011c
 8000a8c:	2000025c 	.word	0x2000025c
 8000a90:	2000025d 	.word	0x2000025d

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b09f      	sub	sp, #124	@ 0x7c
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	2440      	movs	r4, #64	@ 0x40
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2338      	movs	r3, #56	@ 0x38
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f006 fb0f 	bl	80070c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aaa:	232c      	movs	r3, #44	@ 0x2c
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2314      	movs	r3, #20
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f006 fb07 	bl	80070c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2328      	movs	r3, #40	@ 0x28
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f006 fb00 	bl	80070c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <SystemClock_Config+0xe4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b7c <SystemClock_Config+0xe8>)
 8000ace:	401a      	ands	r2, r3
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <SystemClock_Config+0xe4>)
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	0109      	lsls	r1, r1, #4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000ada:	0021      	movs	r1, r4
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2218      	movs	r2, #24
 8000ae0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2201      	movs	r2, #1
 8000aec:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	22a0      	movs	r2, #160	@ 0xa0
 8000af8:	0212      	lsls	r2, r2, #8
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 fe01 	bl	800370c <HAL_RCC_OscConfig>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b0e:	f000 f837 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	212c      	movs	r1, #44	@ 0x2c
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	220f      	movs	r2, #15
 8000b18:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2100      	movs	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f003 f9bc 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b40:	f000 f81e 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	222c      	movs	r2, #44	@ 0x2c
 8000b48:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	0292      	lsls	r2, r2, #10
 8000b5c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	0018      	movs	r0, r3
 8000b62:	f003 fbab 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b6a:	f000 f809 	bl	8000b80 <Error_Handler>
  }
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b01f      	add	sp, #124	@ 0x7c
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40007000 	.word	0x40007000
 8000b7c:	ffffe7ff 	.word	0xffffe7ff

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8000b92:	003b      	movs	r3, r7
 8000b94:	0018      	movs	r0, r3
 8000b96:	2328      	movs	r3, #40	@ 0x28
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f006 fa94 	bl	80070c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c54 <MX_RTC_Init+0xc8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bae:	227f      	movs	r2, #127	@ 0x7f
 8000bb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bb4:	22ff      	movs	r2, #255	@ 0xff
 8000bb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f003 fd10 	bl	80045f8 <HAL_RTC_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000bdc:	f7ff ffd0 	bl	8000b80 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000be0:	491d      	ldr	r1, [pc, #116]	@ (8000c58 <MX_RTC_Init+0xcc>)
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f003 ffdc 	bl	8004ba4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000bf0:	f7ff ffc6 	bl	8000b80 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0252      	lsls	r2, r2, #9
 8000c00:	605a      	str	r2, [r3, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000c02:	003b      	movs	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000c14:	003b      	movs	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000c20:	003b      	movs	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2280      	movs	r2, #128	@ 0x80
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 8000c32:	003a      	movs	r2, r7
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_RTC_Init+0xc4>)
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 fe0f 	bl	800485c <HAL_RTCEx_SetTamper_IT>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8000c42:	f7ff ff9d 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b00a      	add	sp, #40	@ 0x28
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	2000011c 	.word	0x2000011c
 8000c54:	40002800 	.word	0x40002800
 8000c58:	0000500b 	.word	0x0000500b

08000c5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_RTC_MspInit+0x38>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10e      	bne.n	8000c8c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_RTC_MspInit+0x3c>)
 8000c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_RTC_MspInit+0x3c>)
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	02c9      	lsls	r1, r1, #11
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2002      	movs	r0, #2
 8000c82:	f001 f98d 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c86:	2002      	movs	r0, #2
 8000c88:	f001 f99f 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40002800 	.word	0x40002800
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <HAL_MspInit+0x24>)
 8000ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_MspInit+0x24>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <HAL_MspInit+0x24>)
 8000cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_MspInit+0x24>)
 8000cb2:	2180      	movs	r1, #128	@ 0x80
 8000cb4:	0549      	lsls	r1, r1, #21
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f001 f848 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <RTC_IRQHandler+0x1c>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f004 f88c 	bl	8004e1c <HAL_RTCEx_WakeUpTimerIRQHandler>
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <RTC_IRQHandler+0x1c>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f003 fe9e 	bl	8004a48 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	2000011c 	.word	0x2000011c

08000d18 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fad5 	bl	80022ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fad1 	bl	80022ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000214 	.word	0x20000214
 8000d38:	200001cc 	.word	0x200001cc

08000d3c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <RNG_LPUART1_IRQHandler+0x14>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f004 fa92 	bl	800526c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	20000144 	.word	0x20000144

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f006 f9de 	bl	8007144 <__errno>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	425b      	negs	r3, r3
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	18d2      	adds	r2, r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b006      	add	sp, #24
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20005000 	.word	0x20005000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000140 	.word	0x20000140
 8000dbc:	200003c0 	.word	0x200003c0

08000dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000dd2:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <MX_LPUART1_UART_Init+0x58>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000dd8:	22e1      	movs	r2, #225	@ 0xe1
 8000dda:	0252      	lsls	r2, r2, #9
 8000ddc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <MX_LPUART1_UART_Init+0x54>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f004 f836 	bl	8004e7c <HAL_UART_Init>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e14:	f7ff feb4 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	20000144 	.word	0x20000144
 8000e24:	40004800 	.word	0x40004800

08000e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	240c      	movs	r4, #12
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f006 f944 	bl	80070c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a45      	ldr	r2, [pc, #276]	@ (8000f5c <HAL_UART_MspInit+0x134>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d000      	beq.n	8000e4c <HAL_UART_MspInit+0x24>
 8000e4a:	e083      	b.n	8000f54 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e4c:	4b44      	ldr	r3, [pc, #272]	@ (8000f60 <HAL_UART_MspInit+0x138>)
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e50:	4b43      	ldr	r3, [pc, #268]	@ (8000f60 <HAL_UART_MspInit+0x138>)
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	02c9      	lsls	r1, r1, #11
 8000e56:	430a      	orrs	r2, r1
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b41      	ldr	r3, [pc, #260]	@ (8000f60 <HAL_UART_MspInit+0x138>)
 8000e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e5e:	4b40      	ldr	r3, [pc, #256]	@ (8000f60 <HAL_UART_MspInit+0x138>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e66:	4b3e      	ldr	r3, [pc, #248]	@ (8000f60 <HAL_UART_MspInit+0x138>)
 8000e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e72:	0021      	movs	r1, r4
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2206      	movs	r2, #6
 8000e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	187a      	adds	r2, r7, r1
 8000e94:	23a0      	movs	r3, #160	@ 0xa0
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f001 fafe 	bl	800249c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ea2:	4a31      	ldr	r2, [pc, #196]	@ (8000f68 <HAL_UART_MspInit+0x140>)
 8000ea4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec4:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000eca:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed0:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000ed6:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f893 	bl	8002004 <HAL_DMA_Init>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ee2:	f7ff fe4d 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000eea:	675a      	str	r2, [r3, #116]	@ 0x74
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_UART_MspInit+0x13c>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_UART_MspInit+0x148>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f22:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 f86a 	bl	8002004 <HAL_DMA_Init>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f34:	f7ff fe24 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_UART_MspInit+0x144>)
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	201d      	movs	r0, #29
 8000f4a:	f001 f829 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000f4e:	201d      	movs	r0, #29
 8000f50:	f001 f83b 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b009      	add	sp, #36	@ 0x24
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40004800 	.word	0x40004800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	200001cc 	.word	0x200001cc
 8000f68:	40020030 	.word	0x40020030
 8000f6c:	20000214 	.word	0x20000214
 8000f70:	4002001c 	.word	0x4002001c

08000f74 <lorawan_configure>:
static LoRaWAN_Error_t set_tx_power(ATC_HandleTypeDef *lora, int power);
static LoRaWAN_Error_t factor_reset(ATC_HandleTypeDef *lora);
static LoRaWAN_Error_t configure_sleep_mode(ATC_HandleTypeDef *lora);
static LoRaWAN_Error_t simple_at(ATC_HandleTypeDef *lora);

bool lorawan_configure(ATC_HandleTypeDef *lora, const char *dev_eui, const char *app_eui, const char *app_key) {
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
    LoRaWAN_Error_t err;

    simple_at(lora);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f879 	bl	800107c <simple_at>
    simple_at(lora);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 f875 	bl	800107c <simple_at>

    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000f92:	2517      	movs	r5, #23
 8000f94:	197c      	adds	r4, r7, r5
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 f8ab 	bl	80010f8 <set_dev_eui>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	7023      	strb	r3, [r4, #0]
 8000fa6:	197b      	adds	r3, r7, r5
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d119      	bne.n	8000fe2 <lorawan_configure+0x6e>
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000fae:	197c      	adds	r4, r7, r5
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f8e2 	bl	8001180 <set_app_eui>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	7023      	strb	r3, [r4, #0]
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10c      	bne.n	8000fe2 <lorawan_configure+0x6e>
        (err = set_app_key(lora, app_key)) != LORAWAN_OK) {
 8000fc8:	197c      	adds	r4, r7, r5
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 f919 	bl	8001208 <set_app_key>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	7023      	strb	r3, [r4, #0]
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <lorawan_configure+0x72>
        return false;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e046      	b.n	8001074 <lorawan_configure+0x100>
    }

    if ((err = set_class_a(lora)) != LORAWAN_OK) {
 8000fe6:	2517      	movs	r5, #23
 8000fe8:	197c      	adds	r4, r7, r5
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 f9d5 	bl	800139c <set_class_a>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	7023      	strb	r3, [r4, #0]
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <lorawan_configure+0x8e>
    	return false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e038      	b.n	8001074 <lorawan_configure+0x100>
    }

    if ((err = configure_region_and_channel(lora)) != LORAWAN_OK) {
 8001002:	2517      	movs	r5, #23
 8001004:	197c      	adds	r4, r7, r5
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	0018      	movs	r0, r3
 800100a:	f000 f941 	bl	8001290 <configure_region_and_channel>
 800100e:	0003      	movs	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
 8001012:	197b      	adds	r3, r7, r5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <lorawan_configure+0xaa>
        return false;
 800101a:	2300      	movs	r3, #0
 800101c:	e02a      	b.n	8001074 <lorawan_configure+0x100>
    }

    if ((err = check_and_set_frequency(lora)) != LORAWAN_OK) {
 800101e:	2517      	movs	r5, #23
 8001020:	197c      	adds	r4, r7, r5
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 f975 	bl	8001314 <check_and_set_frequency>
 800102a:	0003      	movs	r3, r0
 800102c:	7023      	strb	r3, [r4, #0]
 800102e:	197b      	adds	r3, r7, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <lorawan_configure+0xc6>
        return false;
 8001036:	2300      	movs	r3, #0
 8001038:	e01c      	b.n	8001074 <lorawan_configure+0x100>
    }

    if ((err = configure_sleep_mode(lora)) != LORAWAN_OK) {
 800103a:	2517      	movs	r5, #23
 800103c:	197c      	adds	r4, r7, r5
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fa0f 	bl	8001464 <configure_sleep_mode>
 8001046:	0003      	movs	r3, r0
 8001048:	7023      	strb	r3, [r4, #0]
 800104a:	197b      	adds	r3, r7, r5
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <lorawan_configure+0xe2>
            return false;
 8001052:	2300      	movs	r3, #0
 8001054:	e00e      	b.n	8001074 <lorawan_configure+0x100>
        }

    if ((err = save_and_reset(lora)) != LORAWAN_OK) {
 8001056:	2517      	movs	r5, #23
 8001058:	197c      	adds	r4, r7, r5
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	0018      	movs	r0, r3
 800105e:	f000 fa37 	bl	80014d0 <save_and_reset>
 8001062:	0003      	movs	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
 8001066:	197b      	adds	r3, r7, r5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <lorawan_configure+0xfe>
        return false;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <lorawan_configure+0x100>
    }

    return true;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bdb0      	pop	{r4, r5, r7, pc}

0800107c <simple_at>:

static LoRaWAN_Error_t simple_at(ATC_HandleTypeDef *lora) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af04      	add	r7, sp, #16
 8001082:	6078      	str	r0, [r7, #4]
	char *resp_str = NULL;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT", 100, &resp_str, 2000, 2, "WAKE", "OK");
 8001088:	2308      	movs	r3, #8
 800108a:	18fa      	adds	r2, r7, r3
 800108c:	4916      	ldr	r1, [pc, #88]	@ (80010e8 <simple_at+0x6c>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <simple_at+0x70>)
 8001092:	9303      	str	r3, [sp, #12]
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <simple_at+0x74>)
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2302      	movs	r3, #2
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	23fa      	movs	r3, #250	@ 0xfa
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	0013      	movs	r3, r2
 80010a4:	2264      	movs	r2, #100	@ 0x64
 80010a6:	f005 fda5 	bl	8006bf4 <ATC_SendReceive>
 80010aa:	0003      	movs	r3, r0
 80010ac:	60fb      	str	r3, [r7, #12]
    if (resp < 0) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da0e      	bge.n	80010d2 <simple_at+0x56>
        resp = ATC_SendReceive(lora, "AT+RESET\r\n", 100, NULL, 2000, 1, "OK");
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <simple_at+0x78>)
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <simple_at+0x70>)
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	23fa      	movs	r3, #250	@ 0xfa
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2264      	movs	r2, #100	@ 0x64
 80010ca:	f005 fd93 	bl	8006bf4 <ATC_SendReceive>
 80010ce:	0003      	movs	r3, r0
 80010d0:	60fb      	str	r3, [r7, #12]
    }
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da01      	bge.n	80010dc <simple_at+0x60>
 80010d8:	2305      	movs	r3, #5
 80010da:	e000      	b.n	80010de <simple_at+0x62>
 80010dc:	2300      	movs	r3, #0
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	08007994 	.word	0x08007994
 80010ec:	08007998 	.word	0x08007998
 80010f0:	0800799c 	.word	0x0800799c
 80010f4:	080079a4 	.word	0x080079a4

080010f8 <set_dev_eui>:

static LoRaWAN_Error_t set_dev_eui(ATC_HandleTypeDef *lora, const char *dev_eui) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b099      	sub	sp, #100	@ 0x64
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    char  command[64];
    char *resp_str = NULL;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT%%S 501?\r\n", 100, &resp_str, 200, 2,
 8001106:	2308      	movs	r3, #8
 8001108:	18fa      	adds	r2, r7, r3
 800110a:	4919      	ldr	r1, [pc, #100]	@ (8001170 <set_dev_eui+0x78>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <set_dev_eui+0x7c>)
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <set_dev_eui+0x80>)
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2302      	movs	r3, #2
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	23c8      	movs	r3, #200	@ 0xc8
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	0013      	movs	r3, r2
 8001120:	2264      	movs	r2, #100	@ 0x64
 8001122:	f005 fd67 	bl	8006bf4 <ATC_SendReceive>
 8001126:	0003      	movs	r3, r0
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                 "0000000000000000", "OK");
    if (resp == 2) return LORAWAN_OK;
 800112a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800112c:	2b02      	cmp	r3, #2
 800112e:	d101      	bne.n	8001134 <set_dev_eui+0x3c>
 8001130:	2300      	movs	r3, #0
 8001132:	e018      	b.n	8001166 <set_dev_eui+0x6e>
    if (resp != 1) return LORAWAN_ERR_DEV_EUI;
 8001134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <set_dev_eui+0x46>
 800113a:	2301      	movs	r3, #1
 800113c:	e013      	b.n	8001166 <set_dev_eui+0x6e>
    snprintf(command, sizeof(command), "AT%%S 501=\"%s\"\r\n", dev_eui);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <set_dev_eui+0x84>)
 8001142:	240c      	movs	r4, #12
 8001144:	1938      	adds	r0, r7, r4
 8001146:	2140      	movs	r1, #64	@ 0x40
 8001148:	f005 ff88 	bl	800705c <sniprintf>
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800114c:	1939      	adds	r1, r7, r4
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <set_dev_eui+0x7c>)
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	23c8      	movs	r3, #200	@ 0xc8
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	f005 fd48 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b015      	add	sp, #84	@ 0x54
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	080079b0 	.word	0x080079b0
 8001174:	08007998 	.word	0x08007998
 8001178:	080079c0 	.word	0x080079c0
 800117c:	080079d4 	.word	0x080079d4

08001180 <set_app_eui>:

static LoRaWAN_Error_t set_app_eui(ATC_HandleTypeDef *lora, const char *app_eui) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b099      	sub	sp, #100	@ 0x64
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    char command[64];
    char *resp_str = NULL;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT%%S 502?\r\n", 100, &resp_str, 200, 2,
 800118e:	2308      	movs	r3, #8
 8001190:	18fa      	adds	r2, r7, r3
 8001192:	4919      	ldr	r1, [pc, #100]	@ (80011f8 <set_app_eui+0x78>)
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <set_app_eui+0x7c>)
 8001198:	9303      	str	r3, [sp, #12]
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <set_app_eui+0x80>)
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2302      	movs	r3, #2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	23c8      	movs	r3, #200	@ 0xc8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	0013      	movs	r3, r2
 80011a8:	2264      	movs	r2, #100	@ 0x64
 80011aa:	f005 fd23 	bl	8006bf4 <ATC_SendReceive>
 80011ae:	0003      	movs	r3, r0
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                               "0000000000000000", "OK");
    if (resp == 2) return LORAWAN_OK;
 80011b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d101      	bne.n	80011bc <set_app_eui+0x3c>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e018      	b.n	80011ee <set_app_eui+0x6e>
    if (resp != 1) return LORAWAN_ERR_APP_EUI;
 80011bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <set_app_eui+0x46>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e013      	b.n	80011ee <set_app_eui+0x6e>
    snprintf(command, sizeof(command), "AT%%S 502=\"%s\"\r\n", app_eui);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <set_app_eui+0x84>)
 80011ca:	240c      	movs	r4, #12
 80011cc:	1938      	adds	r0, r7, r4
 80011ce:	2140      	movs	r1, #64	@ 0x40
 80011d0:	f005 ff44 	bl	800705c <sniprintf>
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80011d4:	1939      	adds	r1, r7, r4
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <set_app_eui+0x7c>)
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	23c8      	movs	r3, #200	@ 0xc8
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	2264      	movs	r2, #100	@ 0x64
 80011e8:	f005 fd04 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	0018      	movs	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b015      	add	sp, #84	@ 0x54
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	080079e8 	.word	0x080079e8
 80011fc:	08007998 	.word	0x08007998
 8001200:	080079c0 	.word	0x080079c0
 8001204:	080079f8 	.word	0x080079f8

08001208 <set_app_key>:

static LoRaWAN_Error_t set_app_key(ATC_HandleTypeDef *lora, const char *app_key) {
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b0a1      	sub	sp, #132	@ 0x84
 800120c:	af04      	add	r7, sp, #16
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
    char  command[96];
    char *resp_str = NULL;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT%%S 500?\r\n", 100, &resp_str, 200, 2,
 8001216:	2308      	movs	r3, #8
 8001218:	18fa      	adds	r2, r7, r3
 800121a:	4919      	ldr	r1, [pc, #100]	@ (8001280 <set_app_key+0x78>)
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <set_app_key+0x7c>)
 8001220:	9303      	str	r3, [sp, #12]
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <set_app_key+0x80>)
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2302      	movs	r3, #2
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	23c8      	movs	r3, #200	@ 0xc8
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	0013      	movs	r3, r2
 8001230:	2264      	movs	r2, #100	@ 0x64
 8001232:	f005 fcdf 	bl	8006bf4 <ATC_SendReceive>
 8001236:	0003      	movs	r3, r0
 8001238:	66fb      	str	r3, [r7, #108]	@ 0x6c
                                 "00000000000000000000000000000000", "OK");
    if (resp == 2) return LORAWAN_OK;
 800123a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800123c:	2b02      	cmp	r3, #2
 800123e:	d101      	bne.n	8001244 <set_app_key+0x3c>
 8001240:	2300      	movs	r3, #0
 8001242:	e018      	b.n	8001276 <set_app_key+0x6e>
    if (resp != 1) return LORAWAN_ERR_APP_KEY;
 8001244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <set_app_key+0x46>
 800124a:	2303      	movs	r3, #3
 800124c:	e013      	b.n	8001276 <set_app_key+0x6e>
    snprintf(command, sizeof(command), "AT%%S 500=\"%s\"\r\n", app_key);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <set_app_key+0x84>)
 8001252:	240c      	movs	r4, #12
 8001254:	1938      	adds	r0, r7, r4
 8001256:	2160      	movs	r1, #96	@ 0x60
 8001258:	f005 ff00 	bl	800705c <sniprintf>
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800125c:	1939      	adds	r1, r7, r4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <set_app_key+0x7c>)
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2301      	movs	r3, #1
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	23c8      	movs	r3, #200	@ 0xc8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	2264      	movs	r2, #100	@ 0x64
 8001270:	f005 fcc0 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b01d      	add	sp, #116	@ 0x74
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	08007a0c 	.word	0x08007a0c
 8001284:	08007998 	.word	0x08007998
 8001288:	08007a1c 	.word	0x08007a1c
 800128c:	08007a40 	.word	0x08007a40

08001290 <configure_region_and_channel>:

static LoRaWAN_Error_t configure_region_and_channel(ATC_HandleTypeDef *lora) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b091      	sub	sp, #68	@ 0x44
 8001294:	af04      	add	r7, sp, #16
 8001296:	6078      	str	r0, [r7, #4]
    char  command[32];
    char *resp_str = NULL;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT%%S 611?\r\n", 100, &resp_str, 200, 2,
 800129c:	2308      	movs	r3, #8
 800129e:	18fa      	adds	r2, r7, r3
 80012a0:	4918      	ldr	r1, [pc, #96]	@ (8001304 <configure_region_and_channel+0x74>)
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <configure_region_and_channel+0x78>)
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <configure_region_and_channel+0x7c>)
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2302      	movs	r3, #2
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	23c8      	movs	r3, #200	@ 0xc8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	0013      	movs	r3, r2
 80012b6:	2264      	movs	r2, #100	@ 0x64
 80012b8:	f005 fc9c 	bl	8006bf4 <ATC_SendReceive>
 80012bc:	0003      	movs	r3, r0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                 "9", "OK");
    if (resp == 2) return LORAWAN_OK;
 80012c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d101      	bne.n	80012ca <configure_region_and_channel+0x3a>
 80012c6:	2300      	movs	r3, #0
 80012c8:	e018      	b.n	80012fc <configure_region_and_channel+0x6c>
    if (resp != 1) return LORAWAN_ERR_AT_COMMAND;
 80012ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d001      	beq.n	80012d4 <configure_region_and_channel+0x44>
 80012d0:	2305      	movs	r3, #5
 80012d2:	e013      	b.n	80012fc <configure_region_and_channel+0x6c>
    snprintf(command, sizeof(command), "AT%%S 611=%d\r\n", JAPAN_REGION);
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <configure_region_and_channel+0x80>)
 80012d6:	240c      	movs	r4, #12
 80012d8:	1938      	adds	r0, r7, r4
 80012da:	2309      	movs	r3, #9
 80012dc:	2120      	movs	r1, #32
 80012de:	f005 febd 	bl	800705c <sniprintf>
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80012e2:	1939      	adds	r1, r7, r4
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <configure_region_and_channel+0x78>)
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	23c8      	movs	r3, #200	@ 0xc8
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	2264      	movs	r2, #100	@ 0x64
 80012f6:	f005 fc7d 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b00d      	add	sp, #52	@ 0x34
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	08007a54 	.word	0x08007a54
 8001308:	08007998 	.word	0x08007998
 800130c:	08007a64 	.word	0x08007a64
 8001310:	08007a68 	.word	0x08007a68

08001314 <check_and_set_frequency>:

static LoRaWAN_Error_t check_and_set_frequency(ATC_HandleTypeDef *lora) {
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b091      	sub	sp, #68	@ 0x44
 8001318:	af04      	add	r7, sp, #16
 800131a:	6078      	str	r0, [r7, #4]
    char  command[32];
    char *resp_str = NULL;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT%%S 605?\r\n", 100, &resp_str, 200, 2,
 8001320:	2308      	movs	r3, #8
 8001322:	18fa      	adds	r2, r7, r3
 8001324:	4918      	ldr	r1, [pc, #96]	@ (8001388 <check_and_set_frequency+0x74>)
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <check_and_set_frequency+0x78>)
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <check_and_set_frequency+0x7c>)
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2302      	movs	r3, #2
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	23c8      	movs	r3, #200	@ 0xc8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	0013      	movs	r3, r2
 800133a:	2264      	movs	r2, #100	@ 0x64
 800133c:	f005 fc5a 	bl	8006bf4 <ATC_SendReceive>
 8001340:	0003      	movs	r3, r0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                 "923200000", "OK");
    if (resp == 2) return LORAWAN_OK;
 8001344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001346:	2b02      	cmp	r3, #2
 8001348:	d101      	bne.n	800134e <check_and_set_frequency+0x3a>
 800134a:	2300      	movs	r3, #0
 800134c:	e018      	b.n	8001380 <check_and_set_frequency+0x6c>
    if (resp != 1) return LORAWAN_ERR_AT_COMMAND;
 800134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001350:	2b01      	cmp	r3, #1
 8001352:	d001      	beq.n	8001358 <check_and_set_frequency+0x44>
 8001354:	2305      	movs	r3, #5
 8001356:	e013      	b.n	8001380 <check_and_set_frequency+0x6c>
    snprintf(command, sizeof(command), "AT%%S 605=%u\r\n", DEFAULT_FREQ);
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <check_and_set_frequency+0x80>)
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <check_and_set_frequency+0x84>)
 800135c:	240c      	movs	r4, #12
 800135e:	1938      	adds	r0, r7, r4
 8001360:	2120      	movs	r1, #32
 8001362:	f005 fe7b 	bl	800705c <sniprintf>
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001366:	1939      	adds	r1, r7, r4
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <check_and_set_frequency+0x78>)
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	23c8      	movs	r3, #200	@ 0xc8
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	2264      	movs	r2, #100	@ 0x64
 800137a:	f005 fc3b 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b00d      	add	sp, #52	@ 0x34
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	08007a78 	.word	0x08007a78
 800138c:	08007998 	.word	0x08007998
 8001390:	08007a88 	.word	0x08007a88
 8001394:	3706ea00 	.word	0x3706ea00
 8001398:	08007a94 	.word	0x08007a94

0800139c <set_class_a>:
    if (resp != 1) return LORAWAN_ERR_AT_COMMAND;
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
    return LORAWAN_OK;
}

static LoRaWAN_Error_t set_class_a(ATC_HandleTypeDef *lora) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "AT%%S 603?\r\n", 100, NULL, 200, 2, "0", "OK");
 80013a4:	4915      	ldr	r1, [pc, #84]	@ (80013fc <set_class_a+0x60>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <set_class_a+0x64>)
 80013aa:	9303      	str	r3, [sp, #12]
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <set_class_a+0x68>)
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2302      	movs	r3, #2
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	@ 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	2264      	movs	r2, #100	@ 0x64
 80013bc:	f005 fc1a 	bl	8006bf4 <ATC_SendReceive>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
    if (resp == 2) return LORAWAN_OK;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d101      	bne.n	80013ce <set_class_a+0x32>
 80013ca:	2300      	movs	r3, #0
 80013cc:	e011      	b.n	80013f2 <set_class_a+0x56>
    if (resp != 1) return LORAWAN_ERR_AT_COMMAND;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d001      	beq.n	80013d8 <set_class_a+0x3c>
 80013d4:	2305      	movs	r3, #5
 80013d6:	e00c      	b.n	80013f2 <set_class_a+0x56>
    ATC_SendReceive(lora, "AT%%S 603=0\r\n", 100, NULL, 200, 1, "OK");
 80013d8:	490b      	ldr	r1, [pc, #44]	@ (8001408 <set_class_a+0x6c>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <set_class_a+0x64>)
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2301      	movs	r3, #1
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	23c8      	movs	r3, #200	@ 0xc8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2264      	movs	r2, #100	@ 0x64
 80013ec:	f005 fc02 	bl	8006bf4 <ATC_SendReceive>
    return LORAWAN_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	08007ae8 	.word	0x08007ae8
 8001400:	08007998 	.word	0x08007998
 8001404:	08007ab8 	.word	0x08007ab8
 8001408:	08007af8 	.word	0x08007af8

0800140c <join_network>:
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
    ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
    return LORAWAN_OK;
}

LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b0c8      	sub	sp, #288	@ 0x120
 8001410:	af04      	add	r7, sp, #16
 8001412:	6078      	str	r0, [r7, #4]
    char  response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001414:	230c      	movs	r3, #12
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	60bb      	str	r3, [r7, #8]
    int   resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 800141a:	2308      	movs	r3, #8
 800141c:	18fa      	adds	r2, r7, r3
 800141e:	490e      	ldr	r1, [pc, #56]	@ (8001458 <join_network+0x4c>)
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <join_network+0x50>)
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2301      	movs	r3, #1
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <join_network+0x54>)
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	0013      	movs	r3, r2
 8001430:	2264      	movs	r2, #100	@ 0x64
 8001432:	f005 fbdf 	bl	8006bf4 <ATC_SendReceive>
 8001436:	0003      	movs	r3, r0
 8001438:	2286      	movs	r2, #134	@ 0x86
 800143a:	0052      	lsls	r2, r2, #1
 800143c:	18b9      	adds	r1, r7, r2
 800143e:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001440:	18bb      	adds	r3, r7, r2
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da01      	bge.n	800144c <join_network+0x40>
 8001448:	2305      	movs	r3, #5
 800144a:	e000      	b.n	800144e <join_network+0x42>
    return LORAWAN_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b044      	add	sp, #272	@ 0x110
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	08007b4c 	.word	0x08007b4c
 800145c:	08007998 	.word	0x08007998
 8001460:	00002710 	.word	0x00002710

08001464 <configure_sleep_mode>:
        resp = ATC_SendReceive(lora, "AT+RESET\r\n", 100, NULL, 2000, 1, "OK");
    }
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
}

static LoRaWAN_Error_t configure_sleep_mode(ATC_HandleTypeDef *lora) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af04      	add	r7, sp, #16
 800146a:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "ATS 213=60000", 100, NULL, 2000, 1, "OK");
 800146c:	4915      	ldr	r1, [pc, #84]	@ (80014c4 <configure_sleep_mode+0x60>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <configure_sleep_mode+0x64>)
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	23fa      	movs	r3, #250	@ 0xfa
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2264      	movs	r2, #100	@ 0x64
 8001482:	f005 fbb7 	bl	8006bf4 <ATC_SendReceive>
 8001486:	0003      	movs	r3, r0
 8001488:	60fb      	str	r3, [r7, #12]
    if (resp < 0) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da0e      	bge.n	80014ae <configure_sleep_mode+0x4a>
        resp = ATC_SendReceive(lora, "AT+RESET\r\n", 100, NULL, 2000, 1, "OK");
 8001490:	490e      	ldr	r1, [pc, #56]	@ (80014cc <configure_sleep_mode+0x68>)
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <configure_sleep_mode+0x64>)
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2301      	movs	r3, #1
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	23fa      	movs	r3, #250	@ 0xfa
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2264      	movs	r2, #100	@ 0x64
 80014a6:	f005 fba5 	bl	8006bf4 <ATC_SendReceive>
 80014aa:	0003      	movs	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
    }
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da01      	bge.n	80014b8 <configure_sleep_mode+0x54>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e000      	b.n	80014ba <configure_sleep_mode+0x56>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	08007b60 	.word	0x08007b60
 80014c8:	08007998 	.word	0x08007998
 80014cc:	080079a4 	.word	0x080079a4

080014d0 <save_and_reset>:

static LoRaWAN_Error_t save_and_reset(ATC_HandleTypeDef *lora) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "AT&W\r\n", 100, NULL, 200, 1, "OK");
 80014d8:	4915      	ldr	r1, [pc, #84]	@ (8001530 <save_and_reset+0x60>)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <save_and_reset+0x64>)
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	23c8      	movs	r3, #200	@ 0xc8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	2264      	movs	r2, #100	@ 0x64
 80014ec:	f005 fb82 	bl	8006bf4 <ATC_SendReceive>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da01      	bge.n	80014fe <save_and_reset+0x2e>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e013      	b.n	8001526 <save_and_reset+0x56>
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
 80014fe:	490e      	ldr	r1, [pc, #56]	@ (8001538 <save_and_reset+0x68>)
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <save_and_reset+0x64>)
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2301      	movs	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	23c8      	movs	r3, #200	@ 0xc8
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2264      	movs	r2, #100	@ 0x64
 8001512:	f005 fb6f 	bl	8006bf4 <ATC_SendReceive>
 8001516:	0003      	movs	r3, r0
 8001518:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da01      	bge.n	8001524 <save_and_reset+0x54>
 8001520:	2306      	movs	r3, #6
 8001522:	e000      	b.n	8001526 <save_and_reset+0x56>
    return LORAWAN_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b004      	add	sp, #16
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	08007b70 	.word	0x08007b70
 8001534:	08007998 	.word	0x08007998
 8001538:	08007b78 	.word	0x08007b78

0800153c <to_hex_str>:

void to_hex_str(uint32_t value, uint8_t width, char *output) {
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	250b      	movs	r5, #11
 8001548:	197b      	adds	r3, r7, r5
 800154a:	1c0a      	adds	r2, r1, #0
 800154c:	701a      	strb	r2, [r3, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 800154e:	2310      	movs	r3, #16
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <to_hex_str+0x6c>)
 8001554:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001556:	c313      	stmia	r3!, {r0, r1, r4}
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	6019      	str	r1, [r3, #0]
 800155c:	7912      	ldrb	r2, [r2, #4]
 800155e:	711a      	strb	r2, [r3, #4]
    for (int i = width - 1; i >= 0; --i) {
 8001560:	197b      	adds	r3, r7, r5
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
 8001568:	e00f      	b.n	800158a <to_hex_str+0x4e>
        output[i] = hex_chars[value & 0xF];
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	220f      	movs	r2, #15
 800156e:	401a      	ands	r2, r3
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	18cb      	adds	r3, r1, r3
 8001576:	2110      	movs	r1, #16
 8001578:	1879      	adds	r1, r7, r1
 800157a:	5c8a      	ldrb	r2, [r1, r2]
 800157c:	701a      	strb	r2, [r3, #0]
        value >>= 4;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
    for (int i = width - 1; i >= 0; --i) {
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	3b01      	subs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	2b00      	cmp	r3, #0
 800158e:	daec      	bge.n	800156a <to_hex_str+0x2e>
    }
    output[width] = '\0';
 8001590:	230b      	movs	r3, #11
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	18d3      	adds	r3, r2, r3
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b00a      	add	sp, #40	@ 0x28
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	08007b80 	.word	0x08007b80

080015ac <format_at_send_cmd>:

void format_at_send_cmd(uint32_t data, uint8_t hex_digits, char *out_buf) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08f      	sub	sp, #60	@ 0x3c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	200b      	movs	r0, #11
 80015b8:	183b      	adds	r3, r7, r0
 80015ba:	1c0a      	adds	r2, r1, #0
 80015bc:	701a      	strb	r2, [r3, #0]
    char hex_str[33];
    to_hex_str(data, hex_digits, hex_str);
 80015be:	2414      	movs	r4, #20
 80015c0:	193a      	adds	r2, r7, r4
 80015c2:	183b      	adds	r3, r7, r0
 80015c4:	7819      	ldrb	r1, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ffb7 	bl	800153c <to_hex_str>
    strcpy(out_buf, "AT+SEND \"");
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <format_at_send_cmd+0x64>)
 80015d2:	0010      	movs	r0, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	230a      	movs	r3, #10
 80015d8:	001a      	movs	r2, r3
 80015da:	f005 fde7 	bl	80071ac <memcpy>
    strcat(out_buf, hex_str);
 80015de:	193a      	adds	r2, r7, r4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f005 fd77 	bl	80070d8 <strcat>
    strcat(out_buf, "\"\r\n");
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7fe fd8b 	bl	8000108 <strlen>
 80015f2:	0003      	movs	r3, r0
 80015f4:	001a      	movs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	189a      	adds	r2, r3, r2
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <format_at_send_cmd+0x68>)
 80015fc:	0010      	movs	r0, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	2304      	movs	r3, #4
 8001602:	001a      	movs	r2, r3
 8001604:	f005 fdd2 	bl	80071ac <memcpy>
}
 8001608:	46c0      	nop			@ (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b00f      	add	sp, #60	@ 0x3c
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	08007b94 	.word	0x08007b94
 8001614:	08007ba0 	.word	0x08007ba0

08001618 <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	// Reset sensor flags
	has_sensor_1 = false;
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <scan_i2c_bus+0x88>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <scan_i2c_bus+0x8c>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <scan_i2c_bus+0x90>)
 800162c:	2201      	movs	r2, #1
 800162e:	2120      	movs	r1, #32
 8001630:	0018      	movs	r0, r3
 8001632:	f001 f8b1 	bl	8002798 <HAL_GPIO_WritePin>
    uint8_t addr;
    HAL_Delay(100); // let bus settle
 8001636:	2064      	movs	r0, #100	@ 0x64
 8001638:	f000 fbbe 	bl	8001db8 <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++)
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	2203      	movs	r2, #3
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e01e      	b.n	8001682 <scan_i2c_bus+0x6a>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	18db      	adds	r3, r3, r3
 800164c:	b299      	uxth	r1, r3
 800164e:	4817      	ldr	r0, [pc, #92]	@ (80016ac <scan_i2c_bus+0x94>)
 8001650:	230a      	movs	r3, #10
 8001652:	2201      	movs	r2, #1
 8001654:	f001 fb96 	bl	8002d84 <HAL_I2C_IsDeviceReady>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d10d      	bne.n	8001678 <scan_i2c_bus+0x60>
        {
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b44      	cmp	r3, #68	@ 0x44
 8001662:	d102      	bne.n	800166a <scan_i2c_bus+0x52>
        		has_sensor_1 = true;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <scan_i2c_bus+0x88>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
        	}
        	if (addr == 0x46) {
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b46      	cmp	r3, #70	@ 0x46
 8001670:	d102      	bne.n	8001678 <scan_i2c_bus+0x60>
        		has_sensor_2 = true;
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <scan_i2c_bus+0x8c>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    for (addr = 3; addr < 0x78; addr++)
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	3201      	adds	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b77      	cmp	r3, #119	@ 0x77
 8001688:	d9dc      	bls.n	8001644 <scan_i2c_bus+0x2c>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <scan_i2c_bus+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	2120      	movs	r1, #32
 8001690:	0018      	movs	r0, r3
 8001692:	f001 f881 	bl	8002798 <HAL_GPIO_WritePin>
}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	2000025c 	.word	0x2000025c
 80016a4:	2000025d 	.word	0x2000025d
 80016a8:	50000400 	.word	0x50000400
 80016ac:	2000007c 	.word	0x2000007c

080016b0 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	if (!has_sensor_1 && !has_sensor_2) {
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <sensor_init_and_read+0xd0>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4053      	eors	r3, r2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <sensor_init_and_read+0x26>
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <sensor_init_and_read+0xd4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4053      	eors	r3, r2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <sensor_init_and_read+0x26>
		return -1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	425b      	negs	r3, r3
 80016d4:	e050      	b.n	8001778 <sensor_init_and_read+0xc8>
	}
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <sensor_init_and_read+0xd8>)
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	0018      	movs	r0, r3
 80016de:	f001 f85b 	bl	8002798 <HAL_GPIO_WritePin>
	error = NO_ERROR;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <sensor_init_and_read+0xdc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 80016e8:	2064      	movs	r0, #100	@ 0x64
 80016ea:	f000 fb65 	bl	8001db8 <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <sensor_init_and_read+0xd0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <sensor_init_and_read+0x72>
	{
		sht4x_init(SHT43_I2C_ADDR_44);
 80016f6:	2044      	movs	r0, #68	@ 0x44
 80016f8:	f000 fa14 	bl	8001b24 <sht4x_init>
		sht4x_soft_reset();
 80016fc:	f000 fa86 	bl	8001c0c <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <sensor_init_and_read+0xe0>)
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f9e4 	bl	8001ad0 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT43_I2C_ADDR_44);
 8001708:	2044      	movs	r0, #68	@ 0x44
 800170a:	f000 fa0b 	bl	8001b24 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <sensor_init_and_read+0xe4>)
 8001710:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <sensor_init_and_read+0xe8>)
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f000 fa15 	bl	8001b44 <sht4x_measure_high_precision_ticks>
 800171a:	0003      	movs	r3, r0
 800171c:	001a      	movs	r2, r3
 800171e:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <sensor_init_and_read+0xdc>)
 8001720:	801a      	strh	r2, [r3, #0]
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <sensor_init_and_read+0xd4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <sensor_init_and_read+0xa6>
	{
		sht4x_init(SHT40_I2C_ADDR_46);
 800172a:	2046      	movs	r0, #70	@ 0x46
 800172c:	f000 f9fa 	bl	8001b24 <sht4x_init>
		sht4x_soft_reset();
 8001730:	f000 fa6c 	bl	8001c0c <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <sensor_init_and_read+0xe0>)
 8001736:	0018      	movs	r0, r3
 8001738:	f000 f9ca 	bl	8001ad0 <sensirion_i2c_hal_sleep_usec>
		sht4x_init(SHT40_I2C_ADDR_46);
 800173c:	2046      	movs	r0, #70	@ 0x46
 800173e:	f000 f9f1 	bl	8001b24 <sht4x_init>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001742:	4a16      	ldr	r2, [pc, #88]	@ (800179c <sensor_init_and_read+0xec>)
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <sensor_init_and_read+0xf0>)
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f9fb 	bl	8001b44 <sht4x_measure_high_precision_ticks>
 800174e:	0003      	movs	r3, r0
 8001750:	001a      	movs	r2, r3
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <sensor_init_and_read+0xdc>)
 8001754:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <sensor_init_and_read+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	2120      	movs	r1, #32
 800175c:	0018      	movs	r0, r3
 800175e:	f001 f81b 	bl	8002798 <HAL_GPIO_WritePin>

	if (error) return (-200);
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <sensor_init_and_read+0xdc>)
 8001764:	2200      	movs	r2, #0
 8001766:	5e9b      	ldrsh	r3, [r3, r2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <sensor_init_and_read+0xc2>
 800176c:	23c8      	movs	r3, #200	@ 0xc8
 800176e:	425b      	negs	r3, r3
 8001770:	e002      	b.n	8001778 <sensor_init_and_read+0xc8>
	return error;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <sensor_init_and_read+0xdc>)
 8001774:	2200      	movs	r2, #0
 8001776:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	2000025c 	.word	0x2000025c
 8001784:	2000025d 	.word	0x2000025d
 8001788:	50000400 	.word	0x50000400
 800178c:	20000266 	.word	0x20000266
 8001790:	00002710 	.word	0x00002710
 8001794:	20000260 	.word	0x20000260
 8001798:	2000025e 	.word	0x2000025e
 800179c:	20000264 	.word	0x20000264
 80017a0:	20000262 	.word	0x20000262

080017a4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	b29b      	uxth	r3, r3
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	000a      	movs	r2, r1
 80017d6:	1cbb      	adds	r3, r7, #2
 80017d8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80017da:	230d      	movs	r3, #13
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	22ff      	movs	r2, #255	@ 0xff
 80017e0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80017e2:	230e      	movs	r3, #14
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	e038      	b.n	800185e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80017ec:	230e      	movs	r3, #14
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	7819      	ldrb	r1, [r3, #0]
 80017f8:	220d      	movs	r2, #13
 80017fa:	18bb      	adds	r3, r7, r2
 80017fc:	18ba      	adds	r2, r7, r2
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	404a      	eors	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001804:	230c      	movs	r3, #12
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2208      	movs	r2, #8
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e01c      	b.n	8001848 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800180e:	210d      	movs	r1, #13
 8001810:	187b      	adds	r3, r7, r1
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	da0a      	bge.n	8001830 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	18db      	adds	r3, r3, r3
 8001822:	b25b      	sxtb	r3, r3
 8001824:	2231      	movs	r2, #49	@ 0x31
 8001826:	4053      	eors	r3, r2
 8001828:	b25a      	sxtb	r2, r3
 800182a:	187b      	adds	r3, r7, r1
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e005      	b.n	800183c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001830:	230d      	movs	r3, #13
 8001832:	18fa      	adds	r2, r7, r3
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	18db      	adds	r3, r3, r3
 800183a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800183c:	220c      	movs	r2, #12
 800183e:	18bb      	adds	r3, r7, r2
 8001840:	18ba      	adds	r2, r7, r2
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	3a01      	subs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	230c      	movs	r3, #12
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1dd      	bne.n	800180e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001852:	220e      	movs	r2, #14
 8001854:	18bb      	adds	r3, r7, r2
 8001856:	18ba      	adds	r2, r7, r2
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	3201      	adds	r2, #1
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	230e      	movs	r3, #14
 8001860:	18fa      	adds	r2, r7, r3
 8001862:	1cbb      	adds	r3, r7, #2
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3bf      	bcc.n	80017ec <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800186c:	230d      	movs	r3, #13
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}

0800187a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	0008      	movs	r0, r1
 8001884:	0011      	movs	r1, r2
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	1c02      	adds	r2, r0, #0
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	1c7b      	adds	r3, r7, #1
 800188e:	1c0a      	adds	r2, r1, #0
 8001890:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001892:	1cbb      	adds	r3, r7, #2
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff96 	bl	80017cc <sensirion_i2c_generate_crc>
 80018a0:	0003      	movs	r3, r0
 80018a2:	001a      	movs	r2, r3
 80018a4:	1c7b      	adds	r3, r7, #1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d001      	beq.n	80018b0 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}

080018ba <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	0008      	movs	r0, r1
 80018c4:	0011      	movs	r1, r2
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	1c02      	adds	r2, r0, #0
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	1c7b      	adds	r3, r7, #1
 80018ce:	1c0a      	adds	r2, r1, #0
 80018d0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	1cba      	adds	r2, r7, #2
 80018d8:	1c59      	adds	r1, r3, #1
 80018da:	8011      	strh	r1, [r2, #0]
 80018dc:	001a      	movs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	1c7a      	adds	r2, r7, #1
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	701a      	strb	r2, [r3, #0]
    return offset;
 80018e8:	1cbb      	adds	r3, r7, #2
 80018ea:	881b      	ldrh	r3, [r3, #0]
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6039      	str	r1, [r7, #0]
 80018fc:	0011      	movs	r1, r2
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	1c02      	adds	r2, r0, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	1c0a      	adds	r2, r1, #0
 8001908:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f8b8 	bl	8001a8c <sensirion_i2c_hal_write>
 800191c:	0003      	movs	r3, r0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}

08001926 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001926:	b5b0      	push	{r4, r5, r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	0011      	movs	r1, r2
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	1c02      	adds	r2, r0, #0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	1c0a      	adds	r2, r1, #0
 800193a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	220a      	movs	r2, #10
 8001946:	18ba      	adds	r2, r7, r2
 8001948:	1c19      	adds	r1, r3, #0
 800194a:	1c0b      	adds	r3, r1, #0
 800194c:	18db      	adds	r3, r3, r3
 800194e:	185b      	adds	r3, r3, r1
 8001950:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001960:	2304      	movs	r3, #4
 8001962:	e06c      	b.n	8001a3e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f868 	bl	8001a48 <sensirion_i2c_hal_read>
 8001978:	0003      	movs	r3, r0
 800197a:	001a      	movs	r2, r3
 800197c:	2108      	movs	r1, #8
 800197e:	187b      	adds	r3, r7, r1
 8001980:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001982:	000a      	movs	r2, r1
 8001984:	18bb      	adds	r3, r7, r2
 8001986:	2100      	movs	r1, #0
 8001988:	5e5b      	ldrsh	r3, [r3, r1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800198e:	18bb      	adds	r3, r7, r2
 8001990:	2200      	movs	r2, #0
 8001992:	5e9b      	ldrsh	r3, [r3, r2]
 8001994:	e053      	b.n	8001a3e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001996:	230e      	movs	r3, #14
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	230c      	movs	r3, #12
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	e041      	b.n	8001a2c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80019a8:	210e      	movs	r1, #14
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	3302      	adds	r3, #2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	001a      	movs	r2, r3
 80019c0:	2102      	movs	r1, #2
 80019c2:	f7ff ff5a 	bl	800187a <sensirion_i2c_check_crc>
 80019c6:	0003      	movs	r3, r0
 80019c8:	001a      	movs	r2, r3
 80019ca:	2108      	movs	r1, #8
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	801a      	strh	r2, [r3, #0]
        if (error) {
 80019d0:	000a      	movs	r2, r1
 80019d2:	18bb      	adds	r3, r7, r2
 80019d4:	2100      	movs	r1, #0
 80019d6:	5e5b      	ldrsh	r3, [r3, r1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80019dc:	18bb      	adds	r3, r7, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	5e9b      	ldrsh	r3, [r3, r2]
 80019e2:	e02c      	b.n	8001a3e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80019e4:	240e      	movs	r4, #14
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	18d2      	adds	r2, r2, r3
 80019ee:	250c      	movs	r5, #12
 80019f0:	197b      	adds	r3, r7, r5
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	1979      	adds	r1, r7, r5
 80019f6:	1c58      	adds	r0, r3, #1
 80019f8:	8008      	strh	r0, [r1, #0]
 80019fa:	0019      	movs	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	185b      	adds	r3, r3, r1
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	18d2      	adds	r2, r2, r3
 8001a0e:	197b      	adds	r3, r7, r5
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	1979      	adds	r1, r7, r5
 8001a14:	1c58      	adds	r0, r3, #1
 8001a16:	8008      	strh	r0, [r1, #0]
 8001a18:	0019      	movs	r1, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	185b      	adds	r3, r3, r1
 8001a1e:	7812      	ldrb	r2, [r2, #0]
 8001a20:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	193a      	adds	r2, r7, r4
 8001a26:	8812      	ldrh	r2, [r2, #0]
 8001a28:	3203      	adds	r2, #3
 8001a2a:	801a      	strh	r2, [r3, #0]
 8001a2c:	230e      	movs	r3, #14
 8001a2e:	18fa      	adds	r2, r7, r3
 8001a30:	230a      	movs	r3, #10
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	8812      	ldrh	r2, [r2, #0]
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3b5      	bcc.n	80019a8 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a48 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	6039      	str	r1, [r7, #0]
 8001a50:	0011      	movs	r1, r2
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	1c02      	adds	r2, r0, #0
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	1c0a      	adds	r2, r1, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	18db      	adds	r3, r3, r3
 8001a66:	b299      	uxth	r1, r3
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <sensirion_i2c_hal_read+0x40>)
 8001a72:	2464      	movs	r4, #100	@ 0x64
 8001a74:	9400      	str	r4, [sp, #0]
 8001a76:	f001 f87d 	bl	8002b74 <HAL_I2C_Master_Receive>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b003      	add	sp, #12
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	2000007c 	.word	0x2000007c

08001a8c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	6039      	str	r1, [r7, #0]
 8001a94:	0011      	movs	r1, r2
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	1c02      	adds	r2, r0, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	1c0a      	adds	r2, r1, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	18db      	adds	r3, r3, r3
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <sensirion_i2c_hal_write+0x40>)
 8001ab6:	2464      	movs	r4, #100	@ 0x64
 8001ab8:	9400      	str	r4, [sp, #0]
 8001aba:	f000 ff31 	bl	8002920 <HAL_I2C_Master_Transmit>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b003      	add	sp, #12
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	2000007c 	.word	0x2000007c

08001ad0 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	22fa      	movs	r2, #250	@ 0xfa
 8001adc:	0091      	lsls	r1, r2, #2
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7fe fb24 	bl	800012c <__udivsi3>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	22fa      	movs	r2, #250	@ 0xfa
 8001aec:	0091      	lsls	r1, r2, #2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fba2 	bl	8000238 <__aeabi_uidivmod>
 8001af4:	1e0b      	subs	r3, r1, #0
 8001af6:	d002      	beq.n	8001afe <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8001afe:	f000 f99b 	bl	8001e38 <HAL_GetHalVersion>
 8001b02:	0003      	movs	r3, r0
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <sensirion_i2c_hal_sleep_usec+0x50>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d802      	bhi.n	8001b10 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f950 	bl	8001db8 <HAL_Delay>
}
 8001b18:	46c0      	nop			@ (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b004      	add	sp, #16
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	010100ff 	.word	0x010100ff

08001b24 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <sht4x_init+0x1c>)
 8001b32:	1dfa      	adds	r2, r7, #7
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000026e 	.word	0x2000026e

08001b44 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001b4e:	2516      	movs	r5, #22
 8001b50:	197b      	adds	r3, r7, r5
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <sht4x_measure_high_precision_ticks+0xbc>)
 8001b58:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8001b5a:	260e      	movs	r6, #14
 8001b5c:	19bb      	adds	r3, r7, r6
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001b62:	19bc      	adds	r4, r7, r6
 8001b64:	19bb      	adds	r3, r7, r6
 8001b66:	8819      	ldrh	r1, [r3, #0]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	22fd      	movs	r2, #253	@ 0xfd
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fea4 	bl	80018ba <sensirion_i2c_add_command8_to_buffer>
 8001b72:	0003      	movs	r3, r0
 8001b74:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <sht4x_measure_high_precision_ticks+0xc0>)
 8001b78:	7818      	ldrb	r0, [r3, #0]
 8001b7a:	197c      	adds	r4, r7, r5
 8001b7c:	19bb      	adds	r3, r7, r6
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	0019      	movs	r1, r3
 8001b84:	f7ff feb6 	bl	80018f4 <sensirion_i2c_write_data>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001b8c:	197b      	adds	r3, r7, r5
 8001b8e:	2200      	movs	r2, #0
 8001b90:	5e9b      	ldrsh	r3, [r3, r2]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8001b96:	197b      	adds	r3, r7, r5
 8001b98:	2200      	movs	r2, #0
 8001b9a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b9c:	e02c      	b.n	8001bf8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <sht4x_measure_high_precision_ticks+0xc4>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff ff95 	bl	8001ad0 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <sht4x_measure_high_precision_ticks+0xc0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2516      	movs	r5, #22
 8001bac:	197c      	adds	r4, r7, r5
 8001bae:	6939      	ldr	r1, [r7, #16]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff feb7 	bl	8001926 <sensirion_i2c_read_data_inplace>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001bbc:	197b      	adds	r3, r7, r5
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	5e9b      	ldrsh	r3, [r3, r2]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8001bc6:	197b      	adds	r3, r7, r5
 8001bc8:	2200      	movs	r2, #0
 8001bca:	5e9b      	ldrsh	r3, [r3, r2]
 8001bcc:	e014      	b.n	8001bf8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff fde7 	bl	80017a4 <sensirion_common_bytes_to_uint16_t>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	001a      	movs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3302      	adds	r3, #2
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff fdde 	bl	80017a4 <sensirion_common_bytes_to_uint16_t>
 8001be8:	0003      	movs	r3, r0
 8001bea:	001a      	movs	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001bf0:	2316      	movs	r3, #22
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b007      	add	sp, #28
 8001bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c00:	20000268 	.word	0x20000268
 8001c04:	2000026e 	.word	0x2000026e
 8001c08:	00002710 	.word	0x00002710

08001c0c <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001c12:	250e      	movs	r5, #14
 8001c14:	197b      	adds	r3, r7, r5
 8001c16:	2200      	movs	r2, #0
 8001c18:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <sht4x_soft_reset+0x6c>)
 8001c1c:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001c24:	1dbc      	adds	r4, r7, #6
 8001c26:	1dbb      	adds	r3, r7, #6
 8001c28:	8819      	ldrh	r1, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2294      	movs	r2, #148	@ 0x94
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fe43 	bl	80018ba <sensirion_i2c_add_command8_to_buffer>
 8001c34:	0003      	movs	r3, r0
 8001c36:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001c38:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <sht4x_soft_reset+0x70>)
 8001c3a:	7818      	ldrb	r0, [r3, #0]
 8001c3c:	197c      	adds	r4, r7, r5
 8001c3e:	1dbb      	adds	r3, r7, #6
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0019      	movs	r1, r3
 8001c46:	f7ff fe55 	bl	80018f4 <sensirion_i2c_write_data>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	2200      	movs	r2, #0
 8001c52:	5e9b      	ldrsh	r3, [r3, r2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <sht4x_soft_reset+0x54>
        return local_error;
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c5e:	e007      	b.n	8001c70 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <sht4x_soft_reset+0x74>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff ff34 	bl	8001ad0 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001c68:	230e      	movs	r3, #14
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b004      	add	sp, #16
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	20000268 	.word	0x20000268
 8001c7c:	2000026e 	.word	0x2000026e
 8001c80:	00002710 	.word	0x00002710

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c84:	480d      	ldr	r0, [pc, #52]	@ (8001cbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c88:	f7ff f89a 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	@ (8001cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <LoopForever+0xe>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd0 <LoopForever+0x16>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f005 fa4d 	bl	8007150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7fe fd5d 	bl	8000774 <main>

08001cba <LoopForever>:

LoopForever:
    b LoopForever
 8001cba:	e7fe      	b.n	8001cba <LoopForever>
   ldr   r0, =_estack
 8001cbc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001cc8:	08007ca4 	.word	0x08007ca4
  ldr r2, =_sbss
 8001ccc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001cd0:	200003bc 	.word	0x200003bc

08001cd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_COMP_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_Init+0x3c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_Init+0x3c>)
 8001cea:	2140      	movs	r1, #64	@ 0x40
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 f811 	bl	8001d18 <HAL_InitTick>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e001      	b.n	8001d06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d02:	f7fe ffcb 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <HAL_InitTick+0x5c>)
 8001d22:	681c      	ldr	r4, [r3, #0]
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_InitTick+0x60>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	0019      	movs	r1, r3
 8001d2a:	23fa      	movs	r3, #250	@ 0xfa
 8001d2c:	0098      	lsls	r0, r3, #2
 8001d2e:	f7fe f9fd 	bl	800012c <__udivsi3>
 8001d32:	0003      	movs	r3, r0
 8001d34:	0019      	movs	r1, r3
 8001d36:	0020      	movs	r0, r4
 8001d38:	f7fe f9f8 	bl	800012c <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f953 	bl	8001fea <HAL_SYSTICK_Config>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00f      	b.n	8001d6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d80b      	bhi.n	8001d6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	2301      	movs	r3, #1
 8001d56:	425b      	negs	r3, r3
 8001d58:	2200      	movs	r2, #0
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f920 	bl	8001fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_InitTick+0x64>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b003      	add	sp, #12
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	20000004 	.word	0x20000004
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	20000008 	.word	0x20000008

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_IncTick+0x1c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	001a      	movs	r2, r3
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_IncTick+0x20>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	18d2      	adds	r2, r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_IncTick+0x20>)
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	20000270 	.word	0x20000270

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <HAL_GetTick+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	20000270 	.word	0x20000270

08001db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	d005      	beq.n	8001dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_Delay+0x44>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	f7ff ffe0 	bl	8001da4 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8f7      	bhi.n	8001de0 <HAL_Delay+0x28>
  {
  }
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_SuspendTick+0x18>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_SuspendTick+0x18>)
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <HAL_ResumeTick+0x18>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_ResumeTick+0x18>)
 8001e26:	2102      	movs	r1, #2
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001e3c:	4b01      	ldr	r3, [pc, #4]	@ (8001e44 <HAL_GetHalVersion+0xc>)
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	010a0700 	.word	0x010a0700

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0002      	movs	r2, r0
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e5a:	d809      	bhi.n	8001e70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	231f      	movs	r3, #31
 8001e64:	401a      	ands	r2, r3
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__NVIC_EnableIRQ+0x30>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4091      	lsls	r1, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
  }
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e90:	d828      	bhi.n	8001ee4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e92:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <__NVIC_SetPriority+0xd4>)
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	33c0      	adds	r3, #192	@ 0xc0
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	589b      	ldr	r3, [r3, r2]
 8001ea2:	1dfa      	adds	r2, r7, #7
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	0011      	movs	r1, r2
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	400a      	ands	r2, r1
 8001eac:	00d2      	lsls	r2, r2, #3
 8001eae:	21ff      	movs	r1, #255	@ 0xff
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	43d2      	mvns	r2, r2
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	22ff      	movs	r2, #255	@ 0xff
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	2303      	movs	r3, #3
 8001eca:	4003      	ands	r3, r0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed0:	481f      	ldr	r0, [pc, #124]	@ (8001f50 <__NVIC_SetPriority+0xd4>)
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	430a      	orrs	r2, r1
 8001edc:	33c0      	adds	r3, #192	@ 0xc0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ee2:	e031      	b.n	8001f48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f54 <__NVIC_SetPriority+0xd8>)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	0019      	movs	r1, r3
 8001eec:	230f      	movs	r3, #15
 8001eee:	400b      	ands	r3, r1
 8001ef0:	3b08      	subs	r3, #8
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	3304      	adds	r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	@ 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	@ 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <__NVIC_SetPriority+0xd8>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	001c      	movs	r4, r3
 8001f34:	230f      	movs	r3, #15
 8001f36:	4023      	ands	r3, r4
 8001f38:	3b08      	subs	r3, #8
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	3306      	adds	r3, #6
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	18c3      	adds	r3, r0, r3
 8001f44:	3304      	adds	r3, #4
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	46c0      	nop			@ (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	045b      	lsls	r3, r3, #17
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d301      	bcc.n	8001f70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e010      	b.n	8001f92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <SysTick_Config+0x44>)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	3a01      	subs	r2, #1
 8001f76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f78:	2301      	movs	r3, #1
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff ff7c 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <SysTick_Config+0x44>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <SysTick_Config+0x44>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	210f      	movs	r1, #15
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	1c02      	adds	r2, r0, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b25b      	sxtb	r3, r3
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ff33 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff ffaf 	bl	8001f58 <SysTick_Config>
 8001ffa:	0003      	movs	r3, r0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e061      	b.n	80020da <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a32      	ldr	r2, [pc, #200]	@ (80020e4 <HAL_DMA_Init+0xe0>)
 800201c:	4694      	mov	ip, r2
 800201e:	4463      	add	r3, ip
 8002020:	2114      	movs	r1, #20
 8002022:	0018      	movs	r0, r3
 8002024:	f7fe f882 	bl	800012c <__udivsi3>
 8002028:	0003      	movs	r3, r0
 800202a:	009a      	lsls	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_DMA_Init+0xe4>)
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2225      	movs	r2, #37	@ 0x25
 800203a:	2102      	movs	r1, #2
 800203c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a28      	ldr	r2, [pc, #160]	@ (80020ec <HAL_DMA_Init+0xe8>)
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	01db      	lsls	r3, r3, #7
 800208c:	429a      	cmp	r2, r3
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002090:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <HAL_DMA_Init+0xec>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	211c      	movs	r1, #28
 800209a:	400b      	ands	r3, r1
 800209c:	210f      	movs	r1, #15
 800209e:	4099      	lsls	r1, r3
 80020a0:	000b      	movs	r3, r1
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_DMA_Init+0xec>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020aa:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_DMA_Init+0xec>)
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	201c      	movs	r0, #28
 80020b8:	4003      	ands	r3, r0
 80020ba:	409a      	lsls	r2, r3
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_DMA_Init+0xec>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2225      	movs	r2, #37	@ 0x25
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	bffdfff8 	.word	0xbffdfff8
 80020e8:	40020000 	.word	0x40020000
 80020ec:	ffff800f 	.word	0xffff800f
 80020f0:	400200a8 	.word	0x400200a8

080020f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2317      	movs	r3, #23
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2224      	movs	r2, #36	@ 0x24
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_DMA_Start_IT+0x24>
 8002114:	2302      	movs	r3, #2
 8002116:	e04f      	b.n	80021b8 <HAL_DMA_Start_IT+0xc4>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2224      	movs	r2, #36	@ 0x24
 800211c:	2101      	movs	r1, #1
 800211e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2225      	movs	r2, #37	@ 0x25
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d13a      	bne.n	80021a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2225      	movs	r2, #37	@ 0x25
 8002130:	2102      	movs	r1, #2
 8002132:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f974 	bl	800243e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	210e      	movs	r1, #14
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e00f      	b.n	8002190 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2104      	movs	r1, #4
 800217c:	438a      	bics	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	210a      	movs	r1, #10
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2224      	movs	r2, #36	@ 0x24
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80021aa:	2317      	movs	r3, #23
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	781b      	ldrb	r3, [r3, #0]
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b006      	add	sp, #24
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2225      	movs	r2, #37	@ 0x25
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d008      	beq.n	80021ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2224      	movs	r2, #36	@ 0x24
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e024      	b.n	8002238 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	210e      	movs	r1, #14
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	438a      	bics	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	221c      	movs	r2, #28
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2101      	movs	r1, #1
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2225      	movs	r2, #37	@ 0x25
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2224      	movs	r2, #36	@ 0x24
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]

    return status;
 8002232:	230f      	movs	r3, #15
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	210f      	movs	r1, #15
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2225      	movs	r2, #37	@ 0x25
 8002254:	5c9b      	ldrb	r3, [r3, r2]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d006      	beq.n	800226a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e02a      	b.n	80022c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	210e      	movs	r1, #14
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	438a      	bics	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	221c      	movs	r2, #28
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	2101      	movs	r1, #1
 8002298:	4091      	lsls	r1, r2
 800229a:	000a      	movs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2225      	movs	r2, #37	@ 0x25
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2224      	movs	r2, #36	@ 0x24
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	0010      	movs	r0, r2
 80022be:	4798      	blx	r3
    }
  }
  return status;
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	221c      	movs	r2, #28
 80022ec:	4013      	ands	r3, r2
 80022ee:	2204      	movs	r2, #4
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	d026      	beq.n	8002348 <HAL_DMA_IRQHandler+0x7a>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2220      	movs	r2, #32
 800230a:	4013      	ands	r3, r2
 800230c:	d107      	bne.n	800231e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2104      	movs	r1, #4
 800231a:	438a      	bics	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	221c      	movs	r2, #28
 8002324:	401a      	ands	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	2104      	movs	r1, #4
 800232c:	4091      	lsls	r1, r2
 800232e:	000a      	movs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	2b00      	cmp	r3, #0
 8002338:	d100      	bne.n	800233c <HAL_DMA_IRQHandler+0x6e>
 800233a:	e071      	b.n	8002420 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	0010      	movs	r0, r2
 8002344:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002346:	e06b      	b.n	8002420 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	221c      	movs	r2, #28
 800234e:	4013      	ands	r3, r2
 8002350:	2202      	movs	r2, #2
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	d02d      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xea>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d029      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2220      	movs	r2, #32
 800236c:	4013      	ands	r3, r2
 800236e:	d10b      	bne.n	8002388 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	210a      	movs	r1, #10
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2225      	movs	r2, #37	@ 0x25
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	221c      	movs	r2, #28
 800238e:	401a      	ands	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	2102      	movs	r1, #2
 8002396:	4091      	lsls	r1, r2
 8002398:	000a      	movs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d039      	beq.n	8002420 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	0010      	movs	r0, r2
 80023b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023b6:	e033      	b.n	8002420 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	221c      	movs	r2, #28
 80023be:	4013      	ands	r3, r2
 80023c0:	2208      	movs	r2, #8
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	d02a      	beq.n	8002422 <HAL_DMA_IRQHandler+0x154>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2208      	movs	r2, #8
 80023d0:	4013      	ands	r3, r2
 80023d2:	d026      	beq.n	8002422 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	210e      	movs	r1, #14
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	221c      	movs	r2, #28
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	2101      	movs	r1, #1
 80023f2:	4091      	lsls	r1, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2225      	movs	r2, #37	@ 0x25
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2224      	movs	r2, #36	@ 0x24
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	0010      	movs	r0, r2
 800241e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002420:	46c0      	nop			@ (mov r8, r8)
 8002422:	46c0      	nop			@ (mov r8, r8)
}
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b002      	add	sp, #8
 800243c:	bd80      	pop	{r7, pc}

0800243e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002450:	221c      	movs	r2, #28
 8002452:	401a      	ands	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	2101      	movs	r1, #1
 800245a:	4091      	lsls	r1, r2
 800245c:	000a      	movs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b10      	cmp	r3, #16
 800246e:	d108      	bne.n	8002482 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002480:	e007      	b.n	8002492 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	60da      	str	r2, [r3, #12]
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b2:	e155      	b.n	8002760 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4091      	lsls	r1, r2
 80024be:	000a      	movs	r2, r1
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d100      	bne.n	80024cc <HAL_GPIO_Init+0x30>
 80024ca:	e146      	b.n	800275a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d005      	beq.n	80024e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d130      	bne.n	8002546 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	409a      	lsls	r2, r3
 80024f2:	0013      	movs	r3, r2
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	409a      	lsls	r2, r3
 8002506:	0013      	movs	r3, r2
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251a:	2201      	movs	r2, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	43da      	mvns	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	2201      	movs	r2, #1
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	4013      	ands	r3, r2
 800254e:	2b03      	cmp	r3, #3
 8002550:	d017      	beq.n	8002582 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	43da      	mvns	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	4013      	ands	r3, r2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d123      	bne.n	80025d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	58d3      	ldr	r3, [r2, r3]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2207      	movs	r2, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2107      	movs	r1, #7
 80025ba:	400b      	ands	r3, r1
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	401a      	ands	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	23c0      	movs	r3, #192	@ 0xc0
 8002610:	029b      	lsls	r3, r3, #10
 8002612:	4013      	ands	r3, r2
 8002614:	d100      	bne.n	8002618 <HAL_GPIO_Init+0x17c>
 8002616:	e0a0      	b.n	800275a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <HAL_GPIO_Init+0x2dc>)
 800261a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261c:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <HAL_GPIO_Init+0x2dc>)
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002624:	4a55      	ldr	r2, [pc, #340]	@ (800277c <HAL_GPIO_Init+0x2e0>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	589b      	ldr	r3, [r3, r2]
 8002630:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2203      	movs	r2, #3
 8002636:	4013      	ands	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	409a      	lsls	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	43da      	mvns	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	23a0      	movs	r3, #160	@ 0xa0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	429a      	cmp	r2, r3
 8002650:	d01f      	beq.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4a      	ldr	r2, [pc, #296]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x1f2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x1ee>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	@ (8002788 <HAL_GPIO_Init+0x2ec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x1ea>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a47      	ldr	r2, [pc, #284]	@ (800278c <HAL_GPIO_Init+0x2f0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x1e6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a46      	ldr	r2, [pc, #280]	@ (8002790 <HAL_GPIO_Init+0x2f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x1e2>
 800267a:	2305      	movs	r3, #5
 800267c:	e00a      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 800267e:	2306      	movs	r3, #6
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 8002682:	2304      	movs	r3, #4
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x1f8>
 8002692:	2300      	movs	r3, #0
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2103      	movs	r1, #3
 8002698:	400a      	ands	r2, r1
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	@ (800277c <HAL_GPIO_Init+0x2e0>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	035b      	lsls	r3, r3, #13
 80026ca:	4013      	ands	r3, r2
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	039b      	lsls	r3, r3, #14
 80026f4:	4013      	ands	r3, r2
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	4013      	ands	r3, r2
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43da      	mvns	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	4013      	ands	r3, r2
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	40da      	lsrs	r2, r3
 8002768:	1e13      	subs	r3, r2, #0
 800276a:	d000      	beq.n	800276e <HAL_GPIO_Init+0x2d2>
 800276c:	e6a2      	b.n	80024b4 <HAL_GPIO_Init+0x18>
  }
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b006      	add	sp, #24
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	50000400 	.word	0x50000400
 8002784:	50000800 	.word	0x50000800
 8002788:	50000c00 	.word	0x50000c00
 800278c:	50001000 	.word	0x50001000
 8002790:	50001c00 	.word	0x50001c00
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	0008      	movs	r0, r1
 80027a2:	0011      	movs	r1, r2
 80027a4:	1cbb      	adds	r3, r7, #2
 80027a6:	1c02      	adds	r2, r0, #0
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	1c7b      	adds	r3, r7, #1
 80027ac:	1c0a      	adds	r2, r1, #0
 80027ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b0:	1c7b      	adds	r3, r7, #1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b8:	1cbb      	adds	r3, r7, #2
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80027c2:	1cbb      	adds	r3, r7, #2
 80027c4:	881a      	ldrh	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e08f      	b.n	8002906 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2241      	movs	r2, #65	@ 0x41
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fef5 	bl	80005ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2241      	movs	r2, #65	@ 0x41
 8002806:	2124      	movs	r1, #36	@ 0x24
 8002808:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	493b      	ldr	r1, [pc, #236]	@ (8002910 <HAL_I2C_Init+0x13c>)
 8002824:	400a      	ands	r2, r1
 8002826:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4938      	ldr	r1, [pc, #224]	@ (8002914 <HAL_I2C_Init+0x140>)
 8002834:	400a      	ands	r2, r1
 8002836:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d108      	bne.n	8002852 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	0209      	lsls	r1, r1, #8
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e007      	b.n	8002862 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2184      	movs	r1, #132	@ 0x84
 800285c:	0209      	lsls	r1, r1, #8
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d109      	bne.n	800287e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	0109      	lsls	r1, r1, #4
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	e007      	b.n	800288e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4923      	ldr	r1, [pc, #140]	@ (8002918 <HAL_I2C_Init+0x144>)
 800288a:	400a      	ands	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4920      	ldr	r1, [pc, #128]	@ (800291c <HAL_I2C_Init+0x148>)
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	491a      	ldr	r1, [pc, #104]	@ (8002914 <HAL_I2C_Init+0x140>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2241      	movs	r2, #65	@ 0x41
 80028f2:	2120      	movs	r1, #32
 80028f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2242      	movs	r2, #66	@ 0x42
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	f0ffffff 	.word	0xf0ffffff
 8002914:	ffff7fff 	.word	0xffff7fff
 8002918:	fffff7ff 	.word	0xfffff7ff
 800291c:	02008000 	.word	0x02008000

08002920 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	0008      	movs	r0, r1
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	0019      	movs	r1, r3
 800292e:	230a      	movs	r3, #10
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	1c02      	adds	r2, r0, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	2308      	movs	r3, #8
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	1c0a      	adds	r2, r1, #0
 800293c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2241      	movs	r2, #65	@ 0x41
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	d000      	beq.n	800294c <HAL_I2C_Master_Transmit+0x2c>
 800294a:	e10a      	b.n	8002b62 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_I2C_Master_Transmit+0x3a>
 8002956:	2302      	movs	r3, #2
 8002958:	e104      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002962:	f7ff fa1f 	bl	8001da4 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	0219      	lsls	r1, r3, #8
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2319      	movs	r3, #25
 8002976:	2201      	movs	r2, #1
 8002978:	f000 fb22 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0ef      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2241      	movs	r2, #65	@ 0x41
 8002988:	2121      	movs	r1, #33	@ 0x21
 800298a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2242      	movs	r2, #66	@ 0x42
 8002990:	2110      	movs	r1, #16
 8002992:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2208      	movs	r2, #8
 80029a4:	18ba      	adds	r2, r7, r2
 80029a6:	8812      	ldrh	r2, [r2, #0]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d906      	bls.n	80029c8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	@ 0xff
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	045b      	lsls	r3, r3, #17
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e007      	b.n	80029d8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	049b      	lsls	r3, r3, #18
 80029d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d027      	beq.n	8002a30 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	697c      	ldr	r4, [r7, #20]
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	8819      	ldrh	r1, [r3, #0]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	4b51      	ldr	r3, [pc, #324]	@ (8002b6c <HAL_I2C_Master_Transmit+0x24c>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	0023      	movs	r3, r4
 8002a2a:	f000 fd41 	bl	80034b0 <I2C_TransferConfig>
 8002a2e:	e06f      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	697c      	ldr	r4, [r7, #20]
 8002a38:	230a      	movs	r3, #10
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	8819      	ldrh	r1, [r3, #0]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_I2C_Master_Transmit+0x24c>)
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	0023      	movs	r3, r4
 8002a46:	f000 fd33 	bl	80034b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a4a:	e061      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 fb0c 	bl	8003070 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e081      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03a      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x1f0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d136      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	0013      	movs	r3, r2
 8002aac:	2200      	movs	r2, #0
 8002aae:	2180      	movs	r1, #128	@ 0x80
 8002ab0:	f000 fa86 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e053      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	@ 0xff
 8002ac4:	d911      	bls.n	8002aea <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	@ 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	045c      	lsls	r4, r3, #17
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	8819      	ldrh	r1, [r3, #0]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	0023      	movs	r3, r4
 8002ae4:	f000 fce4 	bl	80034b0 <I2C_TransferConfig>
 8002ae8:	e012      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	049c      	lsls	r4, r3, #18
 8002afe:	230a      	movs	r3, #10
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	8819      	ldrh	r1, [r3, #0]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0023      	movs	r3, r4
 8002b0c:	f000 fcd0 	bl	80034b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d198      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 faeb 	bl	80030fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e01a      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2220      	movs	r2, #32
 8002b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	490b      	ldr	r1, [pc, #44]	@ (8002b70 <HAL_I2C_Master_Transmit+0x250>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2241      	movs	r2, #65	@ 0x41
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2242      	movs	r2, #66	@ 0x42
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2240      	movs	r2, #64	@ 0x40
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
  }
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b007      	add	sp, #28
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	80002000 	.word	0x80002000
 8002b70:	fe00e800 	.word	0xfe00e800

08002b74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	0019      	movs	r1, r3
 8002b82:	230a      	movs	r3, #10
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	1c02      	adds	r2, r0, #0
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	1c0a      	adds	r2, r1, #0
 8002b90:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2241      	movs	r2, #65	@ 0x41
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d000      	beq.n	8002ba0 <HAL_I2C_Master_Receive+0x2c>
 8002b9e:	e0e8      	b.n	8002d72 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2240      	movs	r2, #64	@ 0x40
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Master_Receive+0x3a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0e2      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2240      	movs	r2, #64	@ 0x40
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb6:	f7ff f8f5 	bl	8001da4 <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	0219      	lsls	r1, r3, #8
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f000 f9f8 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cd      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2241      	movs	r2, #65	@ 0x41
 8002bdc:	2122      	movs	r1, #34	@ 0x22
 8002bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2242      	movs	r2, #66	@ 0x42
 8002be4:	2110      	movs	r1, #16
 8002be6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	18ba      	adds	r2, r7, r2
 8002bfa:	8812      	ldrh	r2, [r2, #0]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d911      	bls.n	8002c32 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	045c      	lsls	r4, r3, #17
 8002c1e:	230a      	movs	r3, #10
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	8819      	ldrh	r1, [r3, #0]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	4b55      	ldr	r3, [pc, #340]	@ (8002d7c <HAL_I2C_Master_Receive+0x208>)
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	0023      	movs	r3, r4
 8002c2c:	f000 fc40 	bl	80034b0 <I2C_TransferConfig>
 8002c30:	e076      	b.n	8002d20 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	049c      	lsls	r4, r3, #18
 8002c46:	230a      	movs	r3, #10
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	8819      	ldrh	r1, [r3, #0]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d7c <HAL_I2C_Master_Receive+0x208>)
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	0023      	movs	r3, r4
 8002c54:	f000 fc2c 	bl	80034b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c58:	e062      	b.n	8002d20 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fa8f 	bl	8003184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e082      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d03a      	beq.n	8002d20 <HAL_I2C_Master_Receive+0x1ac>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d136      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	0013      	movs	r3, r2
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	f000 f97e 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e053      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2bff      	cmp	r3, #255	@ 0xff
 8002cd4:	d911      	bls.n	8002cfa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	22ff      	movs	r2, #255	@ 0xff
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	045c      	lsls	r4, r3, #17
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	8819      	ldrh	r1, [r3, #0]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	0023      	movs	r3, r4
 8002cf4:	f000 fbdc 	bl	80034b0 <I2C_TransferConfig>
 8002cf8:	e012      	b.n	8002d20 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	049c      	lsls	r4, r3, #18
 8002d0e:	230a      	movs	r3, #10
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	8819      	ldrh	r1, [r3, #0]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	0023      	movs	r3, r4
 8002d1c:	f000 fbc8 	bl	80034b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d197      	bne.n	8002c5a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f9e3 	bl	80030fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01a      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2220      	movs	r2, #32
 8002d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	490b      	ldr	r1, [pc, #44]	@ (8002d80 <HAL_I2C_Master_Receive+0x20c>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2241      	movs	r2, #65	@ 0x41
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2242      	movs	r2, #66	@ 0x42
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2240      	movs	r2, #64	@ 0x40
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b007      	add	sp, #28
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	80002400 	.word	0x80002400
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	230a      	movs	r3, #10
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	1c0a      	adds	r2, r1, #0
 8002d96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2241      	movs	r2, #65	@ 0x41
 8002da0:	5c9b      	ldrb	r3, [r3, r2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d000      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x26>
 8002da8:	e0df      	b.n	8002f6a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	401a      	ands	r2, r3
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0d4      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2240      	movs	r2, #64	@ 0x40
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2C_IsDeviceReady+0x4c>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0cd      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2240      	movs	r2, #64	@ 0x40
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2241      	movs	r2, #65	@ 0x41
 8002ddc:	2124      	movs	r1, #36	@ 0x24
 8002dde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_IsDeviceReady+0x7a>
 8002dee:	230a      	movs	r3, #10
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	059b      	lsls	r3, r3, #22
 8002df6:	0d9b      	lsrs	r3, r3, #22
 8002df8:	4a5e      	ldr	r2, [pc, #376]	@ (8002f74 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	e006      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x88>
 8002dfe:	230a      	movs	r3, #10
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	059b      	lsls	r3, r3, #22
 8002e06:	0d9b      	lsrs	r3, r3, #22
 8002e08:	4a5b      	ldr	r2, [pc, #364]	@ (8002f78 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe ffc7 	bl	8001da4 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2220      	movs	r2, #32
 8002e22:	4013      	ands	r3, r2
 8002e24:	3b20      	subs	r3, #32
 8002e26:	425a      	negs	r2, r3
 8002e28:	4153      	adcs	r3, r2
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	231f      	movs	r3, #31
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	3b10      	subs	r3, #16
 8002e3e:	425a      	negs	r2, r3
 8002e40:	4153      	adcs	r3, r2
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	231e      	movs	r3, #30
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e4a:	e035      	b.n	8002eb8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	d01a      	beq.n	8002e88 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7fe ffa7 	bl	8001da4 <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <HAL_I2C_IsDeviceReady+0xe4>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10f      	bne.n	8002e88 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2241      	movs	r2, #65	@ 0x41
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	2220      	movs	r2, #32
 8002e76:	431a      	orrs	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	@ 0x40
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e071      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	4013      	ands	r3, r2
 8002e92:	3b20      	subs	r3, #32
 8002e94:	425a      	negs	r2, r3
 8002e96:	4153      	adcs	r3, r2
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	231f      	movs	r3, #31
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	3b10      	subs	r3, #16
 8002eac:	425a      	negs	r2, r3
 8002eae:	4153      	adcs	r3, r2
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	231e      	movs	r3, #30
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <HAL_I2C_IsDeviceReady+0x148>
 8002ec2:	231e      	movs	r3, #30
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0bf      	beq.n	8002e4c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d01a      	beq.n	8002f10 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	0013      	movs	r3, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	f000 f86a 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e03b      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2241      	movs	r2, #65	@ 0x41
 8002f00:	2120      	movs	r1, #32
 8002f02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2240      	movs	r2, #64	@ 0x40
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e02d      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	0013      	movs	r3, r2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	f000 f84f 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e020      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d900      	bls.n	8002f4a <HAL_I2C_IsDeviceReady+0x1c6>
 8002f48:	e74d      	b.n	8002de6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2241      	movs	r2, #65	@ 0x41
 8002f4e:	2120      	movs	r1, #32
 8002f50:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	2220      	movs	r2, #32
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2240      	movs	r2, #64	@ 0x40
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b008      	add	sp, #32
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	02002000 	.word	0x02002000
 8002f78:	02002800 	.word	0x02002800

08002f7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d007      	beq.n	8002fb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	619a      	str	r2, [r3, #24]
  }
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd0:	e03a      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f971 	bl	80032c0 <I2C_IsErrorOccurred>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e040      	b.n	8003068 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	d02d      	beq.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fec:	f7fe feda 	bl	8001da4 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d122      	bne.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	425a      	negs	r2, r3
 8003012:	4153      	adcs	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	001a      	movs	r2, r3
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d113      	bne.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	2220      	movs	r2, #32
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2241      	movs	r2, #65	@ 0x41
 8003030:	2120      	movs	r1, #32
 8003032:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2242      	movs	r2, #66	@ 0x42
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	@ 0x40
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e00f      	b.n	8003068 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	425a      	negs	r2, r3
 8003058:	4153      	adcs	r3, r2
 800305a:	b2db      	uxtb	r3, r3
 800305c:	001a      	movs	r2, r3
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d0b5      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800307c:	e032      	b.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f91b 	bl	80032c0 <I2C_IsErrorOccurred>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e030      	b.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	d025      	beq.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7fe fe84 	bl	8001da4 <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11a      	bne.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d013      	beq.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	2220      	movs	r2, #32
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2241      	movs	r2, #65	@ 0x41
 80030cc:	2120      	movs	r1, #32
 80030ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2242      	movs	r2, #66	@ 0x42
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2240      	movs	r2, #64	@ 0x40
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e007      	b.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2202      	movs	r2, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d1c5      	bne.n	800307e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b004      	add	sp, #16
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003108:	e02f      	b.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 f8d5 	bl	80032c0 <I2C_IsErrorOccurred>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e02d      	b.n	800317a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fe41 	bl	8001da4 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11a      	bne.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2220      	movs	r2, #32
 800313c:	4013      	ands	r3, r2
 800313e:	2b20      	cmp	r3, #32
 8003140:	d013      	beq.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	2220      	movs	r2, #32
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2241      	movs	r2, #65	@ 0x41
 8003152:	2120      	movs	r1, #32
 8003154:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2242      	movs	r2, #66	@ 0x42
 800315a:	2100      	movs	r1, #0
 800315c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2240      	movs	r2, #64	@ 0x40
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e007      	b.n	800317a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2220      	movs	r2, #32
 8003172:	4013      	ands	r3, r2
 8003174:	2b20      	cmp	r3, #32
 8003176:	d1c8      	bne.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2317      	movs	r3, #23
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003198:	e07b      	b.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f88d 	bl	80032c0 <I2C_IsErrorOccurred>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d003      	beq.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80031aa:	2317      	movs	r3, #23
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d140      	bne.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80031c0:	2117      	movs	r1, #23
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d13b      	bne.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d106      	bne.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2210      	movs	r2, #16
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d123      	bne.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2204      	movs	r2, #4
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2220      	movs	r2, #32
 8003208:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4929      	ldr	r1, [pc, #164]	@ (80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003216:	400a      	ands	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2241      	movs	r2, #65	@ 0x41
 800321e:	2120      	movs	r1, #32
 8003220:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2242      	movs	r2, #66	@ 0x42
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2240      	movs	r2, #64	@ 0x40
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003232:	2317      	movs	r3, #23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e002      	b.n	8003242 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003242:	f7fe fdaf 	bl	8001da4 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11c      	bne.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003258:	2017      	movs	r0, #23
 800325a:	183b      	adds	r3, r7, r0
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d117      	bne.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	2b04      	cmp	r3, #4
 800326e:	d010      	beq.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	2220      	movs	r2, #32
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2241      	movs	r2, #65	@ 0x41
 8003280:	2120      	movs	r1, #32
 8003282:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	@ 0x40
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800328c:	183b      	adds	r3, r7, r0
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2204      	movs	r2, #4
 800329a:	4013      	ands	r3, r2
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80032a0:	2317      	movs	r3, #23
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d100      	bne.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80032aa:	e776      	b.n	800319a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80032ac:	2317      	movs	r3, #23
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	781b      	ldrb	r3, [r3, #0]
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b006      	add	sp, #24
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	fe00e800 	.word	0xfe00e800

080032c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2327      	movs	r3, #39	@ 0x27
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2210      	movs	r2, #16
 80032e8:	4013      	ands	r3, r2
 80032ea:	d100      	bne.n	80032ee <I2C_IsErrorOccurred+0x2e>
 80032ec:	e079      	b.n	80033e2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032f6:	e057      	b.n	80033a8 <I2C_IsErrorOccurred+0xe8>
 80032f8:	2227      	movs	r2, #39	@ 0x27
 80032fa:	18bb      	adds	r3, r7, r2
 80032fc:	18ba      	adds	r2, r7, r2
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3301      	adds	r3, #1
 8003306:	d04f      	beq.n	80033a8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003308:	f7fe fd4c 	bl	8001da4 <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <I2C_IsErrorOccurred+0x5e>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d144      	bne.n	80033a8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	01db      	lsls	r3, r3, #7
 8003328:	4013      	ands	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800332c:	2013      	movs	r0, #19
 800332e:	183b      	adds	r3, r7, r0
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	2142      	movs	r1, #66	@ 0x42
 8003334:	5c52      	ldrb	r2, [r2, r1]
 8003336:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	401a      	ands	r2, r3
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	429a      	cmp	r2, r3
 800334a:	d126      	bne.n	800339a <I2C_IsErrorOccurred+0xda>
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	429a      	cmp	r2, r3
 8003354:	d021      	beq.n	800339a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003356:	183b      	adds	r3, r7, r0
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d01d      	beq.n	800339a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2180      	movs	r1, #128	@ 0x80
 800336a:	01c9      	lsls	r1, r1, #7
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003370:	f7fe fd18 	bl	8001da4 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003378:	e00f      	b.n	800339a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800337a:	f7fe fd13 	bl	8001da4 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b19      	cmp	r3, #25
 8003386:	d908      	bls.n	800339a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	2220      	movs	r2, #32
 800338c:	4313      	orrs	r3, r2
 800338e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003390:	2327      	movs	r3, #39	@ 0x27
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]

              break;
 8003398:	e006      	b.n	80033a8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2220      	movs	r2, #32
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d1e8      	bne.n	800337a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2220      	movs	r2, #32
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d004      	beq.n	80033c0 <I2C_IsErrorOccurred+0x100>
 80033b6:	2327      	movs	r3, #39	@ 0x27
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d09b      	beq.n	80032f8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033c0:	2327      	movs	r3, #39	@ 0x27
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2204      	movs	r2, #4
 80033d6:	4313      	orrs	r3, r2
 80033d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033da:	2327      	movs	r3, #39	@ 0x27
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d00c      	beq.n	800340e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2280      	movs	r2, #128	@ 0x80
 8003402:	0052      	lsls	r2, r2, #1
 8003404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003406:	2327      	movs	r3, #39	@ 0x27
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4013      	ands	r3, r2
 8003416:	d00c      	beq.n	8003432 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2208      	movs	r2, #8
 800341c:	4313      	orrs	r3, r2
 800341e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	00d2      	lsls	r2, r2, #3
 8003428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800342a:	2327      	movs	r3, #39	@ 0x27
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d00c      	beq.n	8003456 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2202      	movs	r2, #2
 8003440:	4313      	orrs	r3, r2
 8003442:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2280      	movs	r2, #128	@ 0x80
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344e:	2327      	movs	r3, #39	@ 0x27
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003456:	2327      	movs	r3, #39	@ 0x27
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01d      	beq.n	800349c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff fd8a 	bl	8002f7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	490e      	ldr	r1, [pc, #56]	@ (80034ac <I2C_IsErrorOccurred+0x1ec>)
 8003474:	400a      	ands	r2, r1
 8003476:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2241      	movs	r2, #65	@ 0x41
 8003488:	2120      	movs	r1, #32
 800348a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2242      	movs	r2, #66	@ 0x42
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800349c:	2327      	movs	r3, #39	@ 0x27
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	781b      	ldrb	r3, [r3, #0]
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b00a      	add	sp, #40	@ 0x28
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	fe00e800 	.word	0xfe00e800

080034b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	0008      	movs	r0, r1
 80034ba:	0011      	movs	r1, r2
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	240a      	movs	r4, #10
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	1c02      	adds	r2, r0, #0
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	2009      	movs	r0, #9
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	1c0a      	adds	r2, r1, #0
 80034cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	059b      	lsls	r3, r3, #22
 80034d4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d6:	183b      	adds	r3, r7, r0
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	0419      	lsls	r1, r3, #16
 80034dc:	23ff      	movs	r3, #255	@ 0xff
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	4313      	orrs	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034fa:	0d51      	lsrs	r1, r2, #21
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	00d2      	lsls	r2, r2, #3
 8003500:	400a      	ands	r2, r1
 8003502:	4907      	ldr	r1, [pc, #28]	@ (8003520 <I2C_TransferConfig+0x70>)
 8003504:	430a      	orrs	r2, r1
 8003506:	43d2      	mvns	r2, r2
 8003508:	401a      	ands	r2, r3
 800350a:	0011      	movs	r1, r2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b007      	add	sp, #28
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	03ff63ff 	.word	0x03ff63ff

08003524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2241      	movs	r2, #65	@ 0x41
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	d138      	bne.n	80035ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2240      	movs	r2, #64	@ 0x40
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003544:	2302      	movs	r3, #2
 8003546:	e032      	b.n	80035ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	2101      	movs	r1, #1
 800354e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2241      	movs	r2, #65	@ 0x41
 8003554:	2124      	movs	r1, #36	@ 0x24
 8003556:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2101      	movs	r1, #1
 8003564:	438a      	bics	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4911      	ldr	r1, [pc, #68]	@ (80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003574:	400a      	ands	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2241      	movs	r2, #65	@ 0x41
 800359c:	2120      	movs	r1, #32
 800359e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	2100      	movs	r1, #0
 80035a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	ffffefff 	.word	0xffffefff

080035bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2241      	movs	r2, #65	@ 0x41
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d139      	bne.n	8003646 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	5c9b      	ldrb	r3, [r3, r2]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035dc:	2302      	movs	r3, #2
 80035de:	e033      	b.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	2101      	movs	r1, #1
 80035e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2241      	movs	r2, #65	@ 0x41
 80035ec:	2124      	movs	r1, #36	@ 0x24
 80035ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2101      	movs	r1, #1
 800362e:	430a      	orrs	r2, r1
 8003630:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2241      	movs	r2, #65	@ 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2240      	movs	r2, #64	@ 0x40
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}
 8003650:	fffff0ff 	.word	0xfffff0ff

08003654 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	000a      	movs	r2, r1
 800365e:	1cfb      	adds	r3, r7, #3
 8003660:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003672:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <HAL_PWR_EnterSTOPMode+0xac>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_PWR_EnterSTOPMode+0x40>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003688:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 800368e:	491d      	ldr	r1, [pc, #116]	@ (8003704 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003690:	400a      	ands	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2203      	movs	r2, #3
 800369e:	4393      	bics	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80036aa:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80036b0:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_PWR_EnterSTOPMode+0xb4>)
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	4b14      	ldr	r3, [pc, #80]	@ (8003708 <HAL_PWR_EnterSTOPMode+0xb4>)
 80036b6:	2104      	movs	r1, #4
 80036b8:	430a      	orrs	r2, r1
 80036ba:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80036bc:	1cfb      	adds	r3, r7, #3
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80036c4:	bf30      	wfi
 80036c6:	e002      	b.n	80036ce <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80036c8:	bf40      	sev
    __WFE();
 80036ca:	bf20      	wfe
    __WFE();
 80036cc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80036ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <HAL_PWR_EnterSTOPMode+0xb4>)
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <HAL_PWR_EnterSTOPMode+0xb4>)
 80036d4:	2104      	movs	r1, #4
 80036d6:	438a      	bics	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HAL_PWR_EnterSTOPMode+0xa0>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80036e6:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <HAL_PWR_EnterSTOPMode+0xa8>)
 80036ec:	2180      	movs	r1, #128	@ 0x80
 80036ee:	0089      	lsls	r1, r1, #2
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
  }
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40007000 	.word	0x40007000
 8003700:	40010000 	.word	0x40010000
 8003704:	fffffdff 	.word	0xfffffdff
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b08a      	sub	sp, #40	@ 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f000 fbbf 	bl	8003e9e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003720:	4bc9      	ldr	r3, [pc, #804]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	220c      	movs	r2, #12
 8003726:	4013      	ands	r3, r2
 8003728:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372a:	4bc7      	ldr	r3, [pc, #796]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	025b      	lsls	r3, r3, #9
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d100      	bne.n	8003742 <HAL_RCC_OscConfig+0x36>
 8003740:	e07e      	b.n	8003840 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d007      	beq.n	8003758 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x68>
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	429a      	cmp	r2, r3
 8003756:	d10d      	bne.n	8003774 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4bbb      	ldr	r3, [pc, #748]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	029b      	lsls	r3, r3, #10
 8003760:	4013      	ands	r3, r2
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x5a>
 8003764:	e06b      	b.n	800383e <HAL_RCC_OscConfig+0x132>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d167      	bne.n	800383e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 fb95 	bl	8003e9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	025b      	lsls	r3, r3, #9
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x84>
 8003780:	4bb1      	ldr	r3, [pc, #708]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4bb0      	ldr	r3, [pc, #704]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	0249      	lsls	r1, r1, #9
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e027      	b.n	80037e0 <HAL_RCC_OscConfig+0xd4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	23a0      	movs	r3, #160	@ 0xa0
 8003796:	02db      	lsls	r3, r3, #11
 8003798:	429a      	cmp	r2, r3
 800379a:	d10e      	bne.n	80037ba <HAL_RCC_OscConfig+0xae>
 800379c:	4baa      	ldr	r3, [pc, #680]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4ba9      	ldr	r3, [pc, #676]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037a2:	2180      	movs	r1, #128	@ 0x80
 80037a4:	02c9      	lsls	r1, r1, #11
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	4ba7      	ldr	r3, [pc, #668]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4ba6      	ldr	r3, [pc, #664]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037b0:	2180      	movs	r1, #128	@ 0x80
 80037b2:	0249      	lsls	r1, r1, #9
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e012      	b.n	80037e0 <HAL_RCC_OscConfig+0xd4>
 80037ba:	4ba3      	ldr	r3, [pc, #652]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4ba2      	ldr	r3, [pc, #648]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037c0:	49a2      	ldr	r1, [pc, #648]	@ (8003a4c <HAL_RCC_OscConfig+0x340>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	4ba0      	ldr	r3, [pc, #640]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	025b      	lsls	r3, r3, #9
 80037ce:	4013      	ands	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b9b      	ldr	r3, [pc, #620]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80037da:	499d      	ldr	r1, [pc, #628]	@ (8003a50 <HAL_RCC_OscConfig+0x344>)
 80037dc:	400a      	ands	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d015      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fadc 	bl	8001da4 <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037f0:	e009      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f2:	f7fe fad7 	bl	8001da4 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	@ 0x64
 80037fe:	d902      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	f000 fb4c 	bl	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003806:	4b90      	ldr	r3, [pc, #576]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	029b      	lsls	r3, r3, #10
 800380e:	4013      	ands	r3, r2
 8003810:	d0ef      	beq.n	80037f2 <HAL_RCC_OscConfig+0xe6>
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fac6 	bl	8001da4 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381e:	f7fe fac1 	bl	8001da4 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	@ 0x64
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e336      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003830:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	4013      	ands	r3, r2
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x112>
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	4013      	ands	r3, r2
 8003848:	d100      	bne.n	800384c <HAL_RCC_OscConfig+0x140>
 800384a:	e099      	b.n	8003980 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2220      	movs	r2, #32
 8003856:	4013      	ands	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800385a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003860:	2120      	movs	r1, #32
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	2220      	movs	r2, #32
 800386a:	4393      	bics	r3, r2
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d13e      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1ec>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13b      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003880:	4b71      	ldr	r3, [pc, #452]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2204      	movs	r2, #4
 8003886:	4013      	ands	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_RCC_OscConfig+0x188>
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e304      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	4b6c      	ldr	r3, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a6e      	ldr	r2, [pc, #440]	@ (8003a54 <HAL_RCC_OscConfig+0x348>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	4b68      	ldr	r3, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038aa:	4b67      	ldr	r3, [pc, #412]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2209      	movs	r2, #9
 80038b0:	4393      	bics	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	4b64      	ldr	r3, [pc, #400]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038bc:	f000 fc42 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80038c0:	0001      	movs	r1, r0
 80038c2:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	220f      	movs	r2, #15
 80038ca:	4013      	ands	r3, r2
 80038cc:	4a62      	ldr	r2, [pc, #392]	@ (8003a58 <HAL_RCC_OscConfig+0x34c>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	000a      	movs	r2, r1
 80038d2:	40da      	lsrs	r2, r3
 80038d4:	4b61      	ldr	r3, [pc, #388]	@ (8003a5c <HAL_RCC_OscConfig+0x350>)
 80038d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80038d8:	4b61      	ldr	r3, [pc, #388]	@ (8003a60 <HAL_RCC_OscConfig+0x354>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2513      	movs	r5, #19
 80038de:	197c      	adds	r4, r7, r5
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fe fa19 	bl	8001d18 <HAL_InitTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80038ea:	197b      	adds	r3, r7, r5
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d046      	beq.n	8003980 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80038f2:	197b      	adds	r3, r7, r5
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	e2d2      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d027      	beq.n	800394e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80038fe:	4b52      	ldr	r3, [pc, #328]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2209      	movs	r2, #9
 8003904:	4393      	bics	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	4b4f      	ldr	r3, [pc, #316]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800390a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fa48 	bl	8001da4 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fa43 	bl	8001da4 <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e2b8      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800392c:	4b46      	ldr	r3, [pc, #280]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2204      	movs	r2, #4
 8003932:	4013      	ands	r3, r2
 8003934:	d0f1      	beq.n	800391a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a46      	ldr	r2, [pc, #280]	@ (8003a54 <HAL_RCC_OscConfig+0x348>)
 800393c:	4013      	ands	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	e018      	b.n	8003980 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b3d      	ldr	r3, [pc, #244]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003954:	2101      	movs	r1, #1
 8003956:	438a      	bics	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fa23 	bl	8001da4 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003964:	f7fe fa1e 	bl	8001da4 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e293      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003976:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2204      	movs	r2, #4
 800397c:	4013      	ands	r3, r2
 800397e:	d1f1      	bne.n	8003964 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d100      	bne.n	800398c <HAL_RCC_OscConfig+0x280>
 800398a:	e0a2      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d140      	bne.n	8003a14 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003992:	4b2d      	ldr	r3, [pc, #180]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x29e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e279      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039aa:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003a64 <HAL_RCC_OscConfig+0x358>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039b8:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	0a19      	lsrs	r1, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	061a      	lsls	r2, r3, #24
 80039cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	3301      	adds	r3, #1
 80039da:	2280      	movs	r2, #128	@ 0x80
 80039dc:	0212      	lsls	r2, r2, #8
 80039de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	210f      	movs	r1, #15
 80039e8:	400b      	ands	r3, r1
 80039ea:	491b      	ldr	r1, [pc, #108]	@ (8003a58 <HAL_RCC_OscConfig+0x34c>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80039f0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <HAL_RCC_OscConfig+0x350>)
 80039f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <HAL_RCC_OscConfig+0x354>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2513      	movs	r5, #19
 80039fa:	197c      	adds	r4, r7, r5
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fe f98b 	bl	8001d18 <HAL_InitTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003a06:	197b      	adds	r3, r7, r5
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d061      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003a0e:	197b      	adds	r3, r7, r5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	e244      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d040      	beq.n	8003a9e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003a22:	2180      	movs	r1, #128	@ 0x80
 8003a24:	0049      	lsls	r1, r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f9bb 	bl	8001da4 <HAL_GetTick>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a32:	e019      	b.n	8003a68 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a34:	f7fe f9b6 	bl	8001da4 <HAL_GetTick>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d912      	bls.n	8003a68 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e22b      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	fffeffff 	.word	0xfffeffff
 8003a50:	fffbffff 	.word	0xfffbffff
 8003a54:	ffffe0ff 	.word	0xffffe0ff
 8003a58:	08007bf4 	.word	0x08007bf4
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	20000008 	.word	0x20000008
 8003a64:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a68:	4bca      	ldr	r3, [pc, #808]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	d0df      	beq.n	8003a34 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4bc7      	ldr	r3, [pc, #796]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4ac7      	ldr	r2, [pc, #796]	@ (8003d98 <HAL_RCC_OscConfig+0x68c>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a82:	4bc4      	ldr	r3, [pc, #784]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a88:	4bc2      	ldr	r3, [pc, #776]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	0a19      	lsrs	r1, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	061a      	lsls	r2, r3, #24
 8003a96:	4bbf      	ldr	r3, [pc, #764]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	e019      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a9e:	4bbd      	ldr	r3, [pc, #756]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4bbc      	ldr	r3, [pc, #752]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003aa4:	49bd      	ldr	r1, [pc, #756]	@ (8003d9c <HAL_RCC_OscConfig+0x690>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe f97b 	bl	8001da4 <HAL_GetTick>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab4:	f7fe f976 	bl	8001da4 <HAL_GetTick>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1eb      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ac6:	4bb3      	ldr	r3, [pc, #716]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d036      	beq.n	8003b4a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae4:	4bab      	ldr	r3, [pc, #684]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ae8:	4baa      	ldr	r3, [pc, #680]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003aea:	2101      	movs	r1, #1
 8003aec:	430a      	orrs	r2, r1
 8003aee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe f958 	bl	8001da4 <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe f953 	bl	8001da4 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1c8      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0c:	4ba1      	ldr	r3, [pc, #644]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	2202      	movs	r2, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d0f1      	beq.n	8003afa <HAL_RCC_OscConfig+0x3ee>
 8003b16:	e018      	b.n	8003b4a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b9e      	ldr	r3, [pc, #632]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	438a      	bics	r2, r1
 8003b22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe f93e 	bl	8001da4 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe f939 	bl	8001da4 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1ae      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b40:	4b94      	ldr	r3, [pc, #592]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	2202      	movs	r2, #2
 8003b46:	4013      	ands	r3, r2
 8003b48:	d1f1      	bne.n	8003b2e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	4013      	ands	r3, r2
 8003b52:	d100      	bne.n	8003b56 <HAL_RCC_OscConfig+0x44a>
 8003b54:	e0ae      	b.n	8003cb4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2023      	movs	r0, #35	@ 0x23
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	4013      	ands	r3, r2
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	4b89      	ldr	r3, [pc, #548]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	0549      	lsls	r1, r1, #21
 8003b74:	430a      	orrs	r2, r1
 8003b76:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b88      	ldr	r3, [pc, #544]	@ (8003da0 <HAL_RCC_OscConfig+0x694>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b85      	ldr	r3, [pc, #532]	@ (8003da0 <HAL_RCC_OscConfig+0x694>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b84      	ldr	r3, [pc, #528]	@ (8003da0 <HAL_RCC_OscConfig+0x694>)
 8003b90:	2180      	movs	r1, #128	@ 0x80
 8003b92:	0049      	lsls	r1, r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b98:	f7fe f904 	bl	8001da4 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe f8ff 	bl	8001da4 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	@ 0x64
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e174      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	@ (8003da0 <HAL_RCC_OscConfig+0x694>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	2380      	movs	r3, #128	@ 0x80
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4d0>
 8003bcc:	4b71      	ldr	r3, [pc, #452]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bd0:	4b70      	ldr	r3, [pc, #448]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003bd2:	2180      	movs	r1, #128	@ 0x80
 8003bd4:	0049      	lsls	r1, r1, #1
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bda:	e031      	b.n	8003c40 <HAL_RCC_OscConfig+0x534>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x4f2>
 8003be4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003be8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003bea:	496c      	ldr	r1, [pc, #432]	@ (8003d9c <HAL_RCC_OscConfig+0x690>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bf0:	4b68      	ldr	r3, [pc, #416]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003bf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bf4:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003bf6:	496b      	ldr	r1, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x698>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bfc:	e020      	b.n	8003c40 <HAL_RCC_OscConfig+0x534>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	23a0      	movs	r3, #160	@ 0xa0
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d10e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x51c>
 8003c0a:	4b62      	ldr	r3, [pc, #392]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c0e:	4b61      	ldr	r3, [pc, #388]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c10:	2180      	movs	r1, #128	@ 0x80
 8003c12:	00c9      	lsls	r1, r1, #3
 8003c14:	430a      	orrs	r2, r1
 8003c16:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c18:	4b5e      	ldr	r3, [pc, #376]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c1e:	2180      	movs	r1, #128	@ 0x80
 8003c20:	0049      	lsls	r1, r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x534>
 8003c28:	4b5a      	ldr	r3, [pc, #360]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c2c:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c2e:	495b      	ldr	r1, [pc, #364]	@ (8003d9c <HAL_RCC_OscConfig+0x690>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c34:	4b57      	ldr	r3, [pc, #348]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c38:	4b56      	ldr	r3, [pc, #344]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c3a:	495a      	ldr	r1, [pc, #360]	@ (8003da4 <HAL_RCC_OscConfig+0x698>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fe f8ac 	bl	8001da4 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c50:	e009      	b.n	8003c66 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fe f8a7 	bl	8001da4 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_RCC_OscConfig+0x69c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e11b      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c66:	4b4b      	ldr	r3, [pc, #300]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c6a:	2380      	movs	r3, #128	@ 0x80
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d0ef      	beq.n	8003c52 <HAL_RCC_OscConfig+0x546>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe f896 	bl	8001da4 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe f891 	bl	8001da4 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	4a47      	ldr	r2, [pc, #284]	@ (8003da8 <HAL_RCC_OscConfig+0x69c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e105      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c92:	4b40      	ldr	r3, [pc, #256]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d1ef      	bne.n	8003c7e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9e:	2323      	movs	r3, #35	@ 0x23
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cac:	4b39      	ldr	r3, [pc, #228]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003cae:	493f      	ldr	r1, [pc, #252]	@ (8003dac <HAL_RCC_OscConfig+0x6a0>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d049      	beq.n	8003d52 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d026      	beq.n	8003d14 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003cc6:	4b33      	ldr	r3, [pc, #204]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b32      	ldr	r3, [pc, #200]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003ccc:	2101      	movs	r1, #1
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	4b30      	ldr	r3, [pc, #192]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cde:	4b34      	ldr	r3, [pc, #208]	@ (8003db0 <HAL_RCC_OscConfig+0x6a4>)
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	4b33      	ldr	r3, [pc, #204]	@ (8003db0 <HAL_RCC_OscConfig+0x6a4>)
 8003ce4:	2180      	movs	r1, #128	@ 0x80
 8003ce6:	0189      	lsls	r1, r1, #6
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fe f85a 	bl	8001da4 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf6:	f7fe f855 	bl	8001da4 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0ca      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d08:	4b22      	ldr	r3, [pc, #136]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d0f1      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x5ea>
 8003d12:	e01e      	b.n	8003d52 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003d14:	4b1f      	ldr	r3, [pc, #124]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	4b23      	ldr	r3, [pc, #140]	@ (8003db0 <HAL_RCC_OscConfig+0x6a4>)
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	4b22      	ldr	r3, [pc, #136]	@ (8003db0 <HAL_RCC_OscConfig+0x6a4>)
 8003d26:	4923      	ldr	r1, [pc, #140]	@ (8003db4 <HAL_RCC_OscConfig+0x6a8>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe f83a 	bl	8001da4 <HAL_GetTick>
 8003d30:	0003      	movs	r3, r0
 8003d32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d36:	f7fe f835 	bl	8001da4 <HAL_GetTick>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0aa      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d48:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d1f1      	bne.n	8003d36 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d100      	bne.n	8003d5c <HAL_RCC_OscConfig+0x650>
 8003d5a:	e09f      	b.n	8003e9c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d100      	bne.n	8003d64 <HAL_RCC_OscConfig+0x658>
 8003d62:	e078      	b.n	8003e56 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d159      	bne.n	8003e20 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <HAL_RCC_OscConfig+0x688>)
 8003d72:	4911      	ldr	r1, [pc, #68]	@ (8003db8 <HAL_RCC_OscConfig+0x6ac>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f814 	bl	8001da4 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe f80f 	bl	8001da4 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d915      	bls.n	8003dbc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e084      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	ffff1fff 	.word	0xffff1fff
 8003d9c:	fffffeff 	.word	0xfffffeff
 8003da0:	40007000 	.word	0x40007000
 8003da4:	fffffbff 	.word	0xfffffbff
 8003da8:	00001388 	.word	0x00001388
 8003dac:	efffffff 	.word	0xefffffff
 8003db0:	40010000 	.word	0x40010000
 8003db4:	ffffdfff 	.word	0xffffdfff
 8003db8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	049b      	lsls	r3, r3, #18
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d1dc      	bne.n	8003d82 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a37      	ldr	r2, [pc, #220]	@ (8003eac <HAL_RCC_OscConfig+0x7a0>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de0:	431a      	orrs	r2, r3
 8003de2:	4b31      	ldr	r3, [pc, #196]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003dee:	2180      	movs	r1, #128	@ 0x80
 8003df0:	0449      	lsls	r1, r1, #17
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd ffd5 	bl	8001da4 <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd ffd0 	bl	8001da4 <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e045      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e12:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	049b      	lsls	r3, r3, #18
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x6f4>
 8003e1e:	e03d      	b.n	8003e9c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003e26:	4922      	ldr	r1, [pc, #136]	@ (8003eb0 <HAL_RCC_OscConfig+0x7a4>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fd ffba 	bl	8001da4 <HAL_GetTick>
 8003e30:	0003      	movs	r3, r0
 8003e32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd ffb5 	bl	8001da4 <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e02a      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e48:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	049b      	lsls	r3, r3, #18
 8003e50:	4013      	ands	r3, r2
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x72a>
 8003e54:	e022      	b.n	8003e9c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e01d      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e62:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <HAL_RCC_OscConfig+0x79c>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	401a      	ands	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d10f      	bne.n	8003e98 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	23f0      	movs	r3, #240	@ 0xf0
 8003e7c:	039b      	lsls	r3, r3, #14
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	23c0      	movs	r3, #192	@ 0xc0
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b00a      	add	sp, #40	@ 0x28
 8003ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	ff02ffff 	.word	0xff02ffff
 8003eb0:	feffffff 	.word	0xfeffffff

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e128      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b96      	ldr	r3, [pc, #600]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d91e      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b93      	ldr	r3, [pc, #588]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	4393      	bics	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	4b90      	ldr	r3, [pc, #576]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ee8:	f7fd ff5c 	bl	8001da4 <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef0:	e009      	b.n	8003f06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef2:	f7fd ff57 	bl	8001da4 <HAL_GetTick>
 8003ef6:	0002      	movs	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	4a8a      	ldr	r2, [pc, #552]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e109      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b87      	ldr	r3, [pc, #540]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1e:	4b83      	ldr	r3, [pc, #524]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	22f0      	movs	r2, #240	@ 0xf0
 8003f24:	4393      	bics	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x8a>
 8003f3c:	e089      	b.n	8004052 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f46:	4b79      	ldr	r3, [pc, #484]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d120      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0e1      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5e:	4b73      	ldr	r3, [pc, #460]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	049b      	lsls	r3, r3, #18
 8003f66:	4013      	ands	r3, r2
 8003f68:	d114      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0d5      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d106      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f76:	4b6d      	ldr	r3, [pc, #436]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0ca      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f84:	4b69      	ldr	r3, [pc, #420]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0c2      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f94:	4b65      	ldr	r3, [pc, #404]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4b62      	ldr	r3, [pc, #392]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fd fefc 	bl	8001da4 <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d111      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb8:	e009      	b.n	8003fce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fba:	f7fd fef3 	bl	8001da4 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0a5      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fce:	4b57      	ldr	r3, [pc, #348]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d1ef      	bne.n	8003fba <HAL_RCC_ClockConfig+0x106>
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe4:	e009      	b.n	8003ffa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe6:	f7fd fedd 	bl	8001da4 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e08f      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	220c      	movs	r2, #12
 8004000:	4013      	ands	r3, r2
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d1ef      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0x132>
 8004006:	e024      	b.n	8004052 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d11b      	bne.n	8004048 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004010:	e009      	b.n	8004026 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004012:	f7fd fec7 	bl	8001da4 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	4a42      	ldr	r2, [pc, #264]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e079      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004026:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	220c      	movs	r2, #12
 800402c:	4013      	ands	r3, r2
 800402e:	2b04      	cmp	r3, #4
 8004030:	d1ef      	bne.n	8004012 <HAL_RCC_ClockConfig+0x15e>
 8004032:	e00e      	b.n	8004052 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd feb6 	bl	8001da4 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	4a3a      	ldr	r2, [pc, #232]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e068      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004048:	4b38      	ldr	r3, [pc, #224]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	220c      	movs	r2, #12
 800404e:	4013      	ands	r3, r2
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004052:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d21e      	bcs.n	800409e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004060:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	4393      	bics	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004072:	f7fd fe97 	bl	8001da4 <HAL_GetTick>
 8004076:	0003      	movs	r3, r0
 8004078:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	e009      	b.n	8004090 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fd fe92 	bl	8001da4 <HAL_GetTick>
 8004080:	0002      	movs	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	4a28      	ldr	r2, [pc, #160]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e044      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004090:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d1ee      	bne.n	800407c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2204      	movs	r2, #4
 80040a4:	4013      	ands	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b20      	ldr	r3, [pc, #128]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_RCC_ClockConfig+0x27c>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2208      	movs	r2, #8
 80040c2:	4013      	ands	r3, r2
 80040c4:	d00a      	beq.n	80040dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c6:	4b19      	ldr	r3, [pc, #100]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <HAL_RCC_ClockConfig+0x280>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	00da      	lsls	r2, r3, #3
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040dc:	f000 f832 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80040e0:	0001      	movs	r1, r0
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCC_ClockConfig+0x278>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	220f      	movs	r2, #15
 80040ea:	4013      	ands	r3, r2
 80040ec:	4a12      	ldr	r2, [pc, #72]	@ (8004138 <HAL_RCC_ClockConfig+0x284>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	000a      	movs	r2, r1
 80040f2:	40da      	lsrs	r2, r3
 80040f4:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_RCC_ClockConfig+0x288>)
 80040f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_ClockConfig+0x28c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	250b      	movs	r5, #11
 80040fe:	197c      	adds	r4, r7, r5
 8004100:	0018      	movs	r0, r3
 8004102:	f7fd fe09 	bl	8001d18 <HAL_InitTick>
 8004106:	0003      	movs	r3, r0
 8004108:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800410a:	197b      	adds	r3, r7, r5
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004112:	197b      	adds	r3, r7, r5
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	e000      	b.n	800411a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bdb0      	pop	{r4, r5, r7, pc}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	40022000 	.word	0x40022000
 8004128:	00001388 	.word	0x00001388
 800412c:	40021000 	.word	0x40021000
 8004130:	fffff8ff 	.word	0xfffff8ff
 8004134:	ffffc7ff 	.word	0xffffc7ff
 8004138:	08007bf4 	.word	0x08007bf4
 800413c:	20000004 	.word	0x20000004
 8004140:	20000008 	.word	0x20000008

08004144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800414a:	4b3c      	ldr	r3, [pc, #240]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	220c      	movs	r2, #12
 8004154:	4013      	ands	r3, r2
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d013      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3e>
 800415a:	d85c      	bhi.n	8004216 <HAL_RCC_GetSysClockFreq+0xd2>
 800415c:	2b04      	cmp	r3, #4
 800415e:	d002      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x22>
 8004160:	2b08      	cmp	r3, #8
 8004162:	d00b      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x38>
 8004164:	e057      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004166:	4b35      	ldr	r3, [pc, #212]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2210      	movs	r2, #16
 800416c:	4013      	ands	r3, r2
 800416e:	d002      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004170:	4b33      	ldr	r3, [pc, #204]	@ (8004240 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004172:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004174:	e05d      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004176:	4b33      	ldr	r3, [pc, #204]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x100>)
 8004178:	613b      	str	r3, [r7, #16]
      break;
 800417a:	e05a      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417c:	4b32      	ldr	r3, [pc, #200]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x104>)
 800417e:	613b      	str	r3, [r7, #16]
      break;
 8004180:	e057      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	220f      	movs	r2, #15
 8004188:	4013      	ands	r3, r2
 800418a:	4a30      	ldr	r2, [pc, #192]	@ (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	0d9b      	lsrs	r3, r3, #22
 8004194:	2203      	movs	r2, #3
 8004196:	4013      	ands	r3, r2
 8004198:	3301      	adds	r3, #1
 800419a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419c:	4b27      	ldr	r3, [pc, #156]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	025b      	lsls	r3, r3, #9
 80041a4:	4013      	ands	r3, r2
 80041a6:	d00f      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	000a      	movs	r2, r1
 80041ac:	0152      	lsls	r2, r2, #5
 80041ae:	1a52      	subs	r2, r2, r1
 80041b0:	0193      	lsls	r3, r2, #6
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	185b      	adds	r3, r3, r1
 80041b8:	025b      	lsls	r3, r3, #9
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fb ffb5 	bl	800012c <__udivsi3>
 80041c2:	0003      	movs	r3, r0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e023      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80041c8:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	000a      	movs	r2, r1
 80041d6:	0152      	lsls	r2, r2, #5
 80041d8:	1a52      	subs	r2, r2, r1
 80041da:	0193      	lsls	r3, r2, #6
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	185b      	adds	r3, r3, r1
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fb ffa0 	bl	800012c <__udivsi3>
 80041ec:	0003      	movs	r3, r0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e00e      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	000a      	movs	r2, r1
 80041f6:	0152      	lsls	r2, r2, #5
 80041f8:	1a52      	subs	r2, r2, r1
 80041fa:	0193      	lsls	r3, r2, #6
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	185b      	adds	r3, r3, r1
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	0018      	movs	r0, r3
 8004208:	f7fb ff90 	bl	800012c <__udivsi3>
 800420c:	0003      	movs	r3, r0
 800420e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	613b      	str	r3, [r7, #16]
      break;
 8004214:	e00d      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0b5b      	lsrs	r3, r3, #13
 800421c:	2207      	movs	r2, #7
 800421e:	4013      	ands	r3, r2
 8004220:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	0212      	lsls	r2, r2, #8
 800422a:	409a      	lsls	r2, r3
 800422c:	0013      	movs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004232:	693b      	ldr	r3, [r7, #16]
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b006      	add	sp, #24
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	003d0900 	.word	0x003d0900
 8004244:	00f42400 	.word	0x00f42400
 8004248:	007a1200 	.word	0x007a1200
 800424c:	08007c0c 	.word	0x08007c0c

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b02      	ldr	r3, [pc, #8]	@ (8004260 <HAL_RCC_GetHCLKFreq+0x10>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	20000004 	.word	0x20000004

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004268:	f7ff fff2 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800426c:	0001      	movs	r1, r0
 800426e:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	2207      	movs	r2, #7
 8004276:	4013      	ands	r3, r2
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x28>)
 800427a:	5cd3      	ldrb	r3, [r2, r3]
 800427c:	40d9      	lsrs	r1, r3
 800427e:	000b      	movs	r3, r1
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	40021000 	.word	0x40021000
 800428c:	08007c04 	.word	0x08007c04

08004290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004294:	f7ff ffdc 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004298:	0001      	movs	r1, r0
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	0adb      	lsrs	r3, r3, #11
 80042a0:	2207      	movs	r2, #7
 80042a2:	4013      	ands	r3, r2
 80042a4:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
 80042a8:	40d9      	lsrs	r1, r3
 80042aa:	000b      	movs	r3, r1
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08007c04 	.word	0x08007c04

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80042c4:	2317      	movs	r3, #23
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	4013      	ands	r3, r2
 80042d4:	d106      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	@ 0x80
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4013      	ands	r3, r2
 80042e0:	d100      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80042e2:	e104      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e4:	4bb9      	ldr	r3, [pc, #740]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	055b      	lsls	r3, r3, #21
 80042ec:	4013      	ands	r3, r2
 80042ee:	d10a      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4bb6      	ldr	r3, [pc, #728]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042f4:	4bb5      	ldr	r3, [pc, #724]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	0549      	lsls	r1, r1, #21
 80042fa:	430a      	orrs	r2, r1
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80042fe:	2317      	movs	r3, #23
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4bb2      	ldr	r3, [pc, #712]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4013      	ands	r3, r2
 8004310:	d11a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4baf      	ldr	r3, [pc, #700]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4bae      	ldr	r3, [pc, #696]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	0049      	lsls	r1, r1, #1
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004320:	f7fd fd40 	bl	8001da4 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fd fd3b 	bl	8001da4 <HAL_GetTick>
 800432e:	0002      	movs	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	@ 0x64
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e143      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	4ba4      	ldr	r3, [pc, #656]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d0f0      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004348:	4ba0      	ldr	r3, [pc, #640]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	23c0      	movs	r3, #192	@ 0xc0
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	23c0      	movs	r3, #192	@ 0xc0
 800435a:	039b      	lsls	r3, r3, #14
 800435c:	4013      	ands	r3, r2
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	23c0      	movs	r3, #192	@ 0xc0
 800436a:	039b      	lsls	r3, r3, #14
 800436c:	4013      	ands	r3, r2
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d013      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	23c0      	movs	r3, #192	@ 0xc0
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	401a      	ands	r2, r3
 800437e:	23c0      	movs	r3, #192	@ 0xc0
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	429a      	cmp	r2, r3
 8004384:	d10a      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004386:	4b91      	ldr	r3, [pc, #580]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	401a      	ands	r2, r3
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	429a      	cmp	r2, r3
 8004396:	d101      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e113      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800439c:	4b8b      	ldr	r3, [pc, #556]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800439e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043a0:	23c0      	movs	r3, #192	@ 0xc0
 80043a2:	029b      	lsls	r3, r3, #10
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d049      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	23c0      	movs	r3, #192	@ 0xc0
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2220      	movs	r2, #32
 80043c4:	4013      	ands	r3, r2
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	23c0      	movs	r3, #192	@ 0xc0
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	4013      	ands	r3, r2
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d034      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	@ 0x80
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4013      	ands	r3, r2
 80043e2:	d02e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80043e4:	4b79      	ldr	r3, [pc, #484]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e8:	4a7a      	ldr	r2, [pc, #488]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ee:	4b77      	ldr	r3, [pc, #476]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043f2:	4b76      	ldr	r3, [pc, #472]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043f4:	2180      	movs	r1, #128	@ 0x80
 80043f6:	0309      	lsls	r1, r1, #12
 80043f8:	430a      	orrs	r2, r1
 80043fa:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fc:	4b73      	ldr	r3, [pc, #460]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004400:	4b72      	ldr	r3, [pc, #456]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004402:	4975      	ldr	r1, [pc, #468]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004404:	400a      	ands	r2, r1
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004408:	4b70      	ldr	r3, [pc, #448]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d014      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fcc4 	bl	8001da4 <HAL_GetTick>
 800441c:	0003      	movs	r3, r0
 800441e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004420:	e009      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd fcbf 	bl	8001da4 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	4a6b      	ldr	r2, [pc, #428]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0c6      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004436:	4b65      	ldr	r3, [pc, #404]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4013      	ands	r3, r2
 8004440:	d0ef      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4013      	ands	r3, r2
 800444c:	d01f      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	23c0      	movs	r3, #192	@ 0xc0
 8004454:	029b      	lsls	r3, r3, #10
 8004456:	401a      	ands	r2, r3
 8004458:	23c0      	movs	r3, #192	@ 0xc0
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	429a      	cmp	r2, r3
 800445e:	d10c      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004460:	4b5a      	ldr	r3, [pc, #360]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5e      	ldr	r2, [pc, #376]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	23c0      	movs	r3, #192	@ 0xc0
 8004470:	039b      	lsls	r3, r3, #14
 8004472:	401a      	ands	r2, r3
 8004474:	4b55      	ldr	r3, [pc, #340]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	4b54      	ldr	r3, [pc, #336]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800447c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	23c0      	movs	r3, #192	@ 0xc0
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	401a      	ands	r2, r3
 8004488:	4b50      	ldr	r3, [pc, #320]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800448a:	430a      	orrs	r2, r1
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2220      	movs	r2, #32
 8004494:	4013      	ands	r3, r2
 8004496:	d01f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	23c0      	movs	r3, #192	@ 0xc0
 800449e:	029b      	lsls	r3, r3, #10
 80044a0:	401a      	ands	r2, r3
 80044a2:	23c0      	movs	r3, #192	@ 0xc0
 80044a4:	029b      	lsls	r3, r3, #10
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80044aa:	4b48      	ldr	r3, [pc, #288]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4c      	ldr	r2, [pc, #304]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	23c0      	movs	r3, #192	@ 0xc0
 80044ba:	039b      	lsls	r3, r3, #14
 80044bc:	401a      	ands	r2, r3
 80044be:	4b43      	ldr	r3, [pc, #268]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4b41      	ldr	r3, [pc, #260]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044c6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	23c0      	movs	r3, #192	@ 0xc0
 80044ce:	029b      	lsls	r3, r3, #10
 80044d0:	401a      	ands	r2, r3
 80044d2:	4b3e      	ldr	r3, [pc, #248]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044d4:	430a      	orrs	r2, r1
 80044d6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044d8:	2317      	movs	r3, #23
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e2:	4b3a      	ldr	r3, [pc, #232]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e6:	4b39      	ldr	r3, [pc, #228]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044e8:	493e      	ldr	r1, [pc, #248]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80044ea:	400a      	ands	r2, r1
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4013      	ands	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f8:	4b34      	ldr	r3, [pc, #208]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80044fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fc:	2203      	movs	r2, #3
 80044fe:	4393      	bics	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	4b31      	ldr	r3, [pc, #196]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004508:	430a      	orrs	r2, r1
 800450a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004516:	4b2d      	ldr	r3, [pc, #180]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451a:	220c      	movs	r2, #12
 800451c:	4393      	bics	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004526:	430a      	orrs	r2, r1
 8004528:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2204      	movs	r2, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004534:	4b25      	ldr	r3, [pc, #148]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	4a2b      	ldr	r2, [pc, #172]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004544:	430a      	orrs	r2, r1
 8004546:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	4013      	ands	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	4a25      	ldr	r2, [pc, #148]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004562:	430a      	orrs	r2, r1
 8004564:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004572:	4b16      	ldr	r3, [pc, #88]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004582:	430a      	orrs	r2, r1
 8004584:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2240      	movs	r2, #64	@ 0x40
 800458c:	4013      	ands	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	4a16      	ldr	r2, [pc, #88]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800459e:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2280      	movs	r2, #128	@ 0x80
 80045aa:	4013      	ands	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80045ae:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b2:	4a10      	ldr	r2, [pc, #64]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	4b03      	ldr	r3, [pc, #12]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b006      	add	sp, #24
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
 80045d4:	fffcffff 	.word	0xfffcffff
 80045d8:	fff7ffff 	.word	0xfff7ffff
 80045dc:	00001388 	.word	0x00001388
 80045e0:	ffcfffff 	.word	0xffcfffff
 80045e4:	efffffff 	.word	0xefffffff
 80045e8:	fffff3ff 	.word	0xfffff3ff
 80045ec:	ffffcfff 	.word	0xffffcfff
 80045f0:	fbffffff 	.word	0xfbffffff
 80045f4:	fff3ffff 	.word	0xfff3ffff

080045f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004600:	230f      	movs	r3, #15
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e088      	b.n	8004724 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	5c9b      	ldrb	r3, [r3, r2]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f7fc fb17 	bl	8000c5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2221      	movs	r2, #33	@ 0x21
 8004632:	2102      	movs	r1, #2
 8004634:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2210      	movs	r2, #16
 800463e:	4013      	ands	r3, r2
 8004640:	2b10      	cmp	r3, #16
 8004642:	d05f      	beq.n	8004704 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	22ca      	movs	r2, #202	@ 0xca
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2253      	movs	r2, #83	@ 0x53
 8004652:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004654:	250f      	movs	r5, #15
 8004656:	197c      	adds	r4, r7, r5
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f000 f890 	bl	8004780 <RTC_EnterInitMode>
 8004660:	0003      	movs	r3, r0
 8004662:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004664:	0028      	movs	r0, r5
 8004666:	183b      	adds	r3, r7, r0
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d12c      	bne.n	80046c8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	492c      	ldr	r1, [pc, #176]	@ (800472c <HAL_RTC_Init+0x134>)
 800467a:	400a      	ands	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68d2      	ldr	r2, [r2, #12]
 80046a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6919      	ldr	r1, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80046ba:	183c      	adds	r4, r7, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f8a2 	bl	8004808 <RTC_ExitInitMode>
 80046c4:	0003      	movs	r3, r0
 80046c6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80046c8:	230f      	movs	r3, #15
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d113      	bne.n	80046fa <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2103      	movs	r1, #3
 80046de:	438a      	bics	r2, r1
 80046e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24
 8004702:	e003      	b.n	800470c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004704:	230f      	movs	r3, #15
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800470c:	230f      	movs	r3, #15
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2221      	movs	r2, #33	@ 0x21
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800471e:	230f      	movs	r3, #15
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bdb0      	pop	{r4, r5, r7, pc}
 800472c:	ff8fffbf 	.word	0xff8fffbf

08004730 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0e      	ldr	r2, [pc, #56]	@ (800477c <HAL_RTC_WaitForSynchro+0x4c>)
 8004742:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004744:	f7fd fb2e 	bl	8001da4 <HAL_GetTick>
 8004748:	0003      	movs	r3, r0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800474c:	e00a      	b.n	8004764 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800474e:	f7fd fb29 	bl	8001da4 <HAL_GetTick>
 8004752:	0002      	movs	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	23fa      	movs	r3, #250	@ 0xfa
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	429a      	cmp	r2, r3
 800475e:	d901      	bls.n	8004764 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	4013      	ands	r3, r2
 800476e:	d0ee      	beq.n	800474e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			@ (mov r8, r8)
 800477c:	0001ff5f 	.word	0x0001ff5f

08004780 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	230f      	movs	r3, #15
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2240      	movs	r2, #64	@ 0x40
 800479c:	4013      	ands	r3, r2
 800479e:	d12c      	bne.n	80047fa <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2180      	movs	r1, #128	@ 0x80
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b0:	f7fd faf8 	bl	8001da4 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047b8:	e014      	b.n	80047e4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ba:	f7fd faf3 	bl	8001da4 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	200f      	movs	r0, #15
 80047c6:	183b      	adds	r3, r7, r0
 80047c8:	1839      	adds	r1, r7, r0
 80047ca:	7809      	ldrb	r1, [r1, #0]
 80047cc:	7019      	strb	r1, [r3, #0]
 80047ce:	23fa      	movs	r3, #250	@ 0xfa
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d906      	bls.n	80047e4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2221      	movs	r2, #33	@ 0x21
 80047da:	2104      	movs	r1, #4
 80047dc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2240      	movs	r2, #64	@ 0x40
 80047ec:	4013      	ands	r3, r2
 80047ee:	d104      	bne.n	80047fa <RTC_EnterInitMode+0x7a>
 80047f0:	230f      	movs	r3, #15
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d1df      	bne.n	80047ba <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80047fa:	230f      	movs	r3, #15
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	781b      	ldrb	r3, [r3, #0]
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b004      	add	sp, #16
 8004806:	bd80      	pop	{r7, pc}

08004808 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	240f      	movs	r4, #15
 8004812:	193b      	adds	r3, r7, r4
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2180      	movs	r1, #128	@ 0x80
 8004824:	438a      	bics	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2220      	movs	r2, #32
 8004830:	4013      	ands	r3, r2
 8004832:	d10c      	bne.n	800484e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff ff7a 	bl	8004730 <HAL_RTC_WaitForSynchro>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d006      	beq.n	800484e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2221      	movs	r2, #33	@ 0x21
 8004844:	2104      	movs	r1, #4
 8004846:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004848:	193b      	adds	r3, r7, r4
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800484e:	230f      	movs	r3, #15
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	781b      	ldrb	r3, [r3, #0]
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b005      	add	sp, #20
 800485a:	bd90      	pop	{r4, r7, pc}

0800485c <HAL_RTCEx_SetTamper_IT>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to RTC Tamper.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_RTCEx_SetTamper_IT+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e0d3      	b.n	8004a20 <HAL_RTCEx_SetTamper_IT+0x1c4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	2101      	movs	r1, #1
 800487e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2221      	movs	r2, #33	@ 0x21
 8004884:	2102      	movs	r1, #2
 8004886:	5499      	strb	r1, [r3, r2]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d106      	bne.n	80048b0 <HAL_RTCEx_SetTamper_IT+0x54>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e006      	b.n	80048be <HAL_RTCEx_SetTamper_IT+0x62>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the backup registers erasure enabling bits */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01e      	beq.n	8004904 <HAL_RTCEx_SetTamper_IT+0xa8>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_RTCEx_SetTamper_IT+0x7e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	0292      	lsls	r2, r2, #10
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2208      	movs	r2, #8
 80048e0:	4013      	ands	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_RTCEx_SetTamper_IT+0x92>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	0352      	lsls	r2, r2, #13
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4013      	ands	r3, r2
 80048f6:	d020      	beq.n	800493a <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2280      	movs	r2, #128	@ 0x80
 80048fc:	0412      	lsls	r2, r2, #16
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e01a      	b.n	800493a <HAL_RTCEx_SetTamper_IT+0xde>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	4013      	ands	r3, r2
 800490c:	d003      	beq.n	8004916 <HAL_RTCEx_SetTamper_IT+0xba>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a45      	ldr	r2, [pc, #276]	@ (8004a28 <HAL_RTCEx_SetTamper_IT+0x1cc>)
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2208      	movs	r2, #8
 800491c:	4013      	ands	r3, r2
 800491e:	d003      	beq.n	8004928 <HAL_RTCEx_SetTamper_IT+0xcc>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <HAL_RTCEx_SetTamper_IT+0x1d0>)
 8004924:	4013      	ands	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d003      	beq.n	800493a <HAL_RTCEx_SetTamper_IT+0xde>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <HAL_RTCEx_SetTamper_IT+0x1d4>)
 8004936:	4013      	ands	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Configure the tamper flags masking bits */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01e      	beq.n	8004980 <HAL_RTCEx_SetTamper_IT+0x124>
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	4013      	ands	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_RTCEx_SetTamper_IT+0xfa>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2280      	movs	r2, #128	@ 0x80
 8004950:	02d2      	lsls	r2, r2, #11
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2208      	movs	r2, #8
 800495c:	4013      	ands	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_RTCEx_SetTamper_IT+0x10e>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2280      	movs	r2, #128	@ 0x80
 8004964:	0392      	lsls	r2, r2, #14
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	4013      	ands	r3, r2
 8004972:	d020      	beq.n	80049b6 <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2280      	movs	r2, #128	@ 0x80
 8004978:	0452      	lsls	r2, r2, #17
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e01a      	b.n	80049b6 <HAL_RTCEx_SetTamper_IT+0x15a>
#endif /* RTC_TAMPER3_SUPPORT */
  }
  else
  {
#if defined(RTC_TAMPER1_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2201      	movs	r2, #1
 8004986:	4013      	ands	r3, r2
 8004988:	d003      	beq.n	8004992 <HAL_RTCEx_SetTamper_IT+0x136>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a29      	ldr	r2, [pc, #164]	@ (8004a34 <HAL_RTCEx_SetTamper_IT+0x1d8>)
 800498e:	4013      	ands	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2208      	movs	r2, #8
 8004998:	4013      	ands	r3, r2
 800499a:	d003      	beq.n	80049a4 <HAL_RTCEx_SetTamper_IT+0x148>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <HAL_RTCEx_SetTamper_IT+0x1dc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	d003      	beq.n	80049b6 <HAL_RTCEx_SetTamper_IT+0x15a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <HAL_RTCEx_SetTamper_IT+0x1e0>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <HAL_RTCEx_SetTamper_IT+0x1e4>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK   | \
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80049c6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 80049cc:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 80049d2:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 80049d8:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Enable interrupt on selected tamper */
  tmpreg |= (uint32_t)sTamper->Interrupt;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Enable and configure the EXTI line associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 80049f2:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <HAL_RTCEx_SetTamper_IT+0x1e8>)
 80049f8:	2180      	movs	r1, #128	@ 0x80
 80049fa:	0309      	lsls	r1, r1, #12
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8004a00:	4b10      	ldr	r3, [pc, #64]	@ (8004a44 <HAL_RTCEx_SetTamper_IT+0x1e8>)
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <HAL_RTCEx_SetTamper_IT+0x1e8>)
 8004a06:	2180      	movs	r1, #128	@ 0x80
 8004a08:	0309      	lsls	r1, r1, #12
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2221      	movs	r2, #33	@ 0x21
 8004a12:	2101      	movs	r1, #1
 8004a14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b004      	add	sp, #16
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	fffdffff 	.word	0xfffdffff
 8004a2c:	ffefffff 	.word	0xffefffff
 8004a30:	ff7fffff 	.word	0xff7fffff
 8004a34:	fffbffff 	.word	0xfffbffff
 8004a38:	ffdfffff 	.word	0xffdfffff
 8004a3c:	feffffff 	.word	0xfeffffff
 8004a40:	ffff007f 	.word	0xffff007f
 8004a44:	40010400 	.word	0x40010400

08004a48 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Timestamp and Tamper interrupts */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8004a50:	4b3c      	ldr	r3, [pc, #240]	@ (8004b44 <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	0312      	lsls	r2, r2, #12
 8004a56:	615a      	str	r2, [r3, #20]

  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4013      	ands	r3, r2
 8004a64:	d014      	beq.n	8004a90 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	2380      	movs	r3, #128	@ 0x80
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	4013      	ands	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <HAL_RTCEx_TamperTimeStampIRQHandler+0x48>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f874 	bl	8004b64 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit after returning from callback
         as RTC_TSTR and RTC_TSDR registers are cleared when TSF bit is reset */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	22ff      	movs	r2, #255	@ 0xff
 8004a84:	401a      	ands	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	492f      	ldr	r1, [pc, #188]	@ (8004b48 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	4a2d      	ldr	r2, [pc, #180]	@ (8004b4c <HAL_RTCEx_TamperTimeStampIRQHandler+0x104>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d014      	beq.n	8004ac6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x7e>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	22ff      	movs	r2, #255	@ 0xff
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4925      	ldr	r1, [pc, #148]	@ (8004b50 <HAL_RTCEx_TamperTimeStampIRQHandler+0x108>)
 8004aba:	430a      	orrs	r2, r1
 8004abc:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f857 	bl	8004b74 <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	4a21      	ldr	r2, [pc, #132]	@ (8004b54 <HAL_RTCEx_TamperTimeStampIRQHandler+0x10c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d014      	beq.n	8004afc <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	01db      	lsls	r3, r3, #7
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00d      	beq.n	8004afc <HAL_RTCEx_TamperTimeStampIRQHandler+0xb4>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	22ff      	movs	r2, #255	@ 0xff
 8004ae8:	401a      	ands	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	491a      	ldr	r1, [pc, #104]	@ (8004b58 <HAL_RTCEx_TamperTimeStampIRQHandler+0x110>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f844 	bl	8004b84 <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper 3 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <HAL_RTCEx_TamperTimeStampIRQHandler+0x114>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	d014      	beq.n	8004b32 <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
  {
    /* Get the pending status of the Tamper 3 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	4013      	ands	r3, r2
 8004b14:	d00d      	beq.n	8004b32 <HAL_RTCEx_TamperTimeStampIRQHandler+0xea>
    {
      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	22ff      	movs	r2, #255	@ 0xff
 8004b1e:	401a      	ands	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_RTCEx_TamperTimeStampIRQHandler+0x118>)
 8004b26:	430a      	orrs	r2, r1
 8004b28:	60da      	str	r2, [r3, #12]

      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 f831 	bl	8004b94 <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2221      	movs	r2, #33	@ 0x21
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]
}
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	40010400 	.word	0x40010400
 8004b48:	fffff77f 	.word	0xfffff77f
 8004b4c:	00010004 	.word	0x00010004
 8004b50:	ffffdf7f 	.word	0xffffdf7f
 8004b54:	00080004 	.word	0x00080004
 8004b58:	ffffbf7f 	.word	0xffffbf7f
 8004b5c:	00400004 	.word	0x00400004
 8004b60:	ffff7f7f 	.word	0xffff7f7f

08004b64 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004bb0:	4b64      	ldr	r3, [pc, #400]	@ (8004d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	22fa      	movs	r2, #250	@ 0xfa
 8004bb6:	01d1      	lsls	r1, r2, #7
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fb fab7 	bl	800012c <__udivsi3>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	015b      	lsls	r3, r3, #5
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	5c9b      	ldrb	r3, [r3, r2]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0ad      	b.n	8004d3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	2102      	movs	r1, #2
 8004bec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	22ca      	movs	r2, #202	@ 0xca
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2253      	movs	r2, #83	@ 0x53
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d019      	beq.n	8004c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	22ff      	movs	r2, #255	@ 0xff
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	@ 0x21
 8004c24:	2103      	movs	r1, #3
 8004c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e082      	b.n	8004d3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d1e5      	bne.n	8004c0c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	493f      	ldr	r1, [pc, #252]	@ (8004d48 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	22ff      	movs	r2, #255	@ 0xff
 8004c58:	401a      	ands	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	493b      	ldr	r1, [pc, #236]	@ (8004d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004c64:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	22fa      	movs	r2, #250	@ 0xfa
 8004c6a:	01d1      	lsls	r1, r2, #7
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fb fa5d 	bl	800012c <__udivsi3>
 8004c72:	0003      	movs	r3, r0
 8004c74:	001a      	movs	r2, r3
 8004c76:	0013      	movs	r3, r2
 8004c78:	015b      	lsls	r3, r3, #5
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	22ff      	movs	r2, #255	@ 0xff
 8004c96:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2221      	movs	r2, #33	@ 0x21
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e046      	b.n	8004d3a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d0e5      	beq.n	8004c84 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2107      	movs	r1, #7
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6899      	ldr	r1, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004ce6:	2180      	movs	r1, #128	@ 0x80
 8004ce8:	0349      	lsls	r1, r1, #13
 8004cea:	430a      	orrs	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004cee:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	0349      	lsls	r1, r1, #13
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2180      	movs	r1, #128	@ 0x80
 8004d08:	01c9      	lsls	r1, r1, #7
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	00c9      	lsls	r1, r1, #3
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	22ff      	movs	r2, #255	@ 0xff
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	@ 0x21
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b006      	add	sp, #24
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	20000004 	.word	0x20000004
 8004d48:	fffffbff 	.word	0xfffffbff
 8004d4c:	fffffb7f 	.word	0xfffffb7f
 8004d50:	40010400 	.word	0x40010400

08004d54 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e04e      	b.n	8004e0c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2221      	movs	r2, #33	@ 0x21
 8004d7a:	2102      	movs	r1, #2
 8004d7c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	22ca      	movs	r2, #202	@ 0xca
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2253      	movs	r2, #83	@ 0x53
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	491e      	ldr	r1, [pc, #120]	@ (8004e14 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	491b      	ldr	r1, [pc, #108]	@ (8004e18 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dae:	f7fc fff9 	bl	8001da4 <HAL_GetTick>
 8004db2:	0003      	movs	r3, r0
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004db6:	e016      	b.n	8004de6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004db8:	f7fc fff4 	bl	8001da4 <HAL_GetTick>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	23fa      	movs	r3, #250	@ 0xfa
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d90d      	bls.n	8004de6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	22ff      	movs	r2, #255	@ 0xff
 8004dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2221      	movs	r2, #33	@ 0x21
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	2100      	movs	r1, #0
 8004de0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e012      	b.n	8004e0c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2204      	movs	r2, #4
 8004dee:	4013      	ands	r3, r2
 8004df0:	d0e2      	beq.n	8004db8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	22ff      	movs	r2, #255	@ 0xff
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2221      	movs	r2, #33	@ 0x21
 8004dfe:	2101      	movs	r1, #1
 8004e00:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	2100      	movs	r1, #0
 8004e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fffffbff 	.word	0xfffffbff
 8004e18:	ffffbfff 	.word	0xffffbfff

08004e1c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	0352      	lsls	r2, r2, #13
 8004e2a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	2380      	movs	r3, #128	@ 0x80
 8004e34:	01db      	lsls	r3, r3, #7
 8004e36:	4013      	ands	r3, r2
 8004e38:	d014      	beq.n	8004e64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	2380      	movs	r3, #128	@ 0x80
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4013      	ands	r3, r2
 8004e46:	d00d      	beq.n	8004e64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	22ff      	movs	r2, #255	@ 0xff
 8004e50:	401a      	ands	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4908      	ldr	r1, [pc, #32]	@ (8004e78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fb fc6c 	bl	800073c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2221      	movs	r2, #33	@ 0x21
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]
}
 8004e6c:	46c0      	nop			@ (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010400 	.word	0x40010400
 8004e78:	fffffb7f 	.word	0xfffffb7f

08004e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e044      	b.n	8004f18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2278      	movs	r2, #120	@ 0x78
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fb ffc1 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	@ 0x24
 8004eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	438a      	bics	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 ffb4 	bl	8005e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fd12 	bl	80058f8 <UART_SetConfig>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e01c      	b.n	8004f18 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	490d      	ldr	r1, [pc, #52]	@ (8004f20 <HAL_UART_Init+0xa4>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	212a      	movs	r1, #42	@ 0x2a
 8004efa:	438a      	bics	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f001 f843 	bl	8005f9c <UART_CheckIdleState>
 8004f16:	0003      	movs	r3, r0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	ffffb7ff 	.word	0xffffb7ff

08004f24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d000      	beq.n	8004f3c <HAL_UART_Transmit_DMA+0x18>
 8004f3a:	e077      	b.n	800502c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_Transmit_DMA+0x26>
 8004f42:	1dbb      	adds	r3, r7, #6
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d109      	bne.n	8004f6e <HAL_UART_Transmit_DMA+0x4a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4013      	ands	r3, r2
 8004f68:	d001      	beq.n	8004f6e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e05f      	b.n	800502e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1dba      	adds	r2, r7, #6
 8004f78:	2150      	movs	r1, #80	@ 0x50
 8004f7a:	8812      	ldrh	r2, [r2, #0]
 8004f7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1dba      	adds	r2, r7, #6
 8004f82:	2152      	movs	r1, #82	@ 0x52
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2284      	movs	r2, #132	@ 0x84
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	@ 0x21
 8004f94:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d027      	beq.n	8004fee <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a25      	ldr	r2, [pc, #148]	@ (8005038 <HAL_UART_Transmit_DMA+0x114>)
 8004fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a24      	ldr	r2, [pc, #144]	@ (800503c <HAL_UART_Transmit_DMA+0x118>)
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	4a23      	ldr	r2, [pc, #140]	@ (8005040 <HAL_UART_Transmit_DMA+0x11c>)
 8004fb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	2200      	movs	r2, #0
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3328      	adds	r3, #40	@ 0x28
 8004fce:	001a      	movs	r2, r3
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	f7fd f88e 	bl	80020f4 <HAL_DMA_Start_IT>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2284      	movs	r2, #132	@ 0x84
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e01f      	b.n	800502e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2240      	movs	r2, #64	@ 0x40
 8004ff4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffa:	613b      	str	r3, [r7, #16]
  return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2180      	movs	r1, #128	@ 0x80
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f383 8810 	msr	PRIMASK, r3
}
 8005026:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b008      	add	sp, #32
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	0800641d 	.word	0x0800641d
 800503c:	080064b5 	.word	0x080064b5
 8005040:	080066bb 	.word	0x080066bb

08005044 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	@ 0x28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504c:	f3ef 8310 	mrs	r3, PRIMASK
 8005050:	617b      	str	r3, [r7, #20]
  return(result);
 8005052:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	46c0      	nop			@ (mov r8, r8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	21c0      	movs	r1, #192	@ 0xc0
 800506e:	438a      	bics	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	4013      	ands	r3, r2
 8005088:	2b80      	cmp	r3, #128	@ 0x80
 800508a:	d135      	bne.n	80050f8 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508c:	f3ef 8310 	mrs	r3, PRIMASK
 8005090:	60bb      	str	r3, [r7, #8]
  return(result);
 8005092:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	2301      	movs	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f383 8810 	msr	PRIMASK, r3
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2180      	movs	r1, #128	@ 0x80
 80050ae:	438a      	bics	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	2200      	movs	r2, #0
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fd f874 	bl	80021c0 <HAL_DMA_Abort>
 80050d8:	1e03      	subs	r3, r0, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fd f9a2 	bl	800242a <HAL_DMA_GetError>
 80050e6:	0003      	movs	r3, r0
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d105      	bne.n	80050f8 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2284      	movs	r2, #132	@ 0x84
 80050f0:	2110      	movs	r1, #16
 80050f2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e007      	b.n	8005108 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2252      	movs	r2, #82	@ 0x52
 80050fc:	2100      	movs	r1, #0
 80050fe:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b00a      	add	sp, #40	@ 0x28
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b092      	sub	sp, #72	@ 0x48
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	623b      	str	r3, [r7, #32]
  return(result);
 800511e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
 8005122:	2301      	movs	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	494b      	ldr	r1, [pc, #300]	@ (8005268 <HAL_UART_AbortReceive+0x158>)
 800513a:	400a      	ands	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	643b      	str	r3, [r7, #64]	@ 0x40
 8005154:	2301      	movs	r3, #1
 8005156:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2101      	movs	r1, #1
 800516c:	438a      	bics	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	2b01      	cmp	r3, #1
 8005182:	d118      	bne.n	80051b6 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	617b      	str	r3, [r7, #20]
  return(result);
 800518a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800518e:	2301      	movs	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2110      	movs	r1, #16
 80051a6:	438a      	bics	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2240      	movs	r2, #64	@ 0x40
 80051be:	4013      	ands	r3, r2
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d135      	bne.n	8005230 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ca:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ce:	2301      	movs	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2140      	movs	r1, #64	@ 0x40
 80051e6:	438a      	bics	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005202:	2200      	movs	r2, #0
 8005204:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520a:	0018      	movs	r0, r3
 800520c:	f7fc ffd8 	bl	80021c0 <HAL_DMA_Abort>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d00d      	beq.n	8005230 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005218:	0018      	movs	r0, r3
 800521a:	f7fd f906 	bl	800242a <HAL_DMA_GetError>
 800521e:	0003      	movs	r3, r0
 8005220:	2b20      	cmp	r3, #32
 8005222:	d105      	bne.n	8005230 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2284      	movs	r2, #132	@ 0x84
 8005228:	2110      	movs	r1, #16
 800522a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e017      	b.n	8005260 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	225a      	movs	r2, #90	@ 0x5a
 8005234:	2100      	movs	r1, #0
 8005236:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	220f      	movs	r2, #15
 800523e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2108      	movs	r1, #8
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2280      	movs	r2, #128	@ 0x80
 8005254:	2120      	movs	r1, #32
 8005256:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b012      	add	sp, #72	@ 0x48
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fffffedf 	.word	0xfffffedf

0800526c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b0ab      	sub	sp, #172	@ 0xac
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	22a4      	movs	r2, #164	@ 0xa4
 800527c:	18b9      	adds	r1, r7, r2
 800527e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	20a0      	movs	r0, #160	@ 0xa0
 8005288:	1839      	adds	r1, r7, r0
 800528a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	219c      	movs	r1, #156	@ 0x9c
 8005294:	1879      	adds	r1, r7, r1
 8005296:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005298:	0011      	movs	r1, r2
 800529a:	18bb      	adds	r3, r7, r2
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a99      	ldr	r2, [pc, #612]	@ (8005504 <HAL_UART_IRQHandler+0x298>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	2298      	movs	r2, #152	@ 0x98
 80052a4:	18bc      	adds	r4, r7, r2
 80052a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80052a8:	18bb      	adds	r3, r7, r2
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d114      	bne.n	80052da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	4013      	ands	r3, r2
 80052b8:	d00f      	beq.n	80052da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ba:	183b      	adds	r3, r7, r0
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2220      	movs	r2, #32
 80052c0:	4013      	ands	r3, r2
 80052c2:	d00a      	beq.n	80052da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d100      	bne.n	80052ce <HAL_UART_IRQHandler+0x62>
 80052cc:	e2be      	b.n	800584c <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	0010      	movs	r0, r2
 80052d6:	4798      	blx	r3
      }
      return;
 80052d8:	e2b8      	b.n	800584c <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052da:	2398      	movs	r3, #152	@ 0x98
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d100      	bne.n	80052e6 <HAL_UART_IRQHandler+0x7a>
 80052e4:	e114      	b.n	8005510 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052e6:	239c      	movs	r3, #156	@ 0x9c
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	4013      	ands	r3, r2
 80052f0:	d106      	bne.n	8005300 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052f2:	23a0      	movs	r3, #160	@ 0xa0
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a83      	ldr	r2, [pc, #524]	@ (8005508 <HAL_UART_IRQHandler+0x29c>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	d100      	bne.n	8005300 <HAL_UART_IRQHandler+0x94>
 80052fe:	e107      	b.n	8005510 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005300:	23a4      	movs	r3, #164	@ 0xa4
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d012      	beq.n	8005332 <HAL_UART_IRQHandler+0xc6>
 800530c:	23a0      	movs	r3, #160	@ 0xa0
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4013      	ands	r3, r2
 8005318:	d00b      	beq.n	8005332 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2284      	movs	r2, #132	@ 0x84
 8005326:	589b      	ldr	r3, [r3, r2]
 8005328:	2201      	movs	r2, #1
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2184      	movs	r1, #132	@ 0x84
 8005330:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005332:	23a4      	movs	r3, #164	@ 0xa4
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d011      	beq.n	8005362 <HAL_UART_IRQHandler+0xf6>
 800533e:	239c      	movs	r3, #156	@ 0x9c
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	4013      	ands	r3, r2
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2202      	movs	r2, #2
 8005350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2284      	movs	r2, #132	@ 0x84
 8005356:	589b      	ldr	r3, [r3, r2]
 8005358:	2204      	movs	r2, #4
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2184      	movs	r1, #132	@ 0x84
 8005360:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005362:	23a4      	movs	r3, #164	@ 0xa4
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d011      	beq.n	8005392 <HAL_UART_IRQHandler+0x126>
 800536e:	239c      	movs	r3, #156	@ 0x9c
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	4013      	ands	r3, r2
 8005378:	d00b      	beq.n	8005392 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2204      	movs	r2, #4
 8005380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2284      	movs	r2, #132	@ 0x84
 8005386:	589b      	ldr	r3, [r3, r2]
 8005388:	2202      	movs	r2, #2
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2184      	movs	r1, #132	@ 0x84
 8005390:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005392:	23a4      	movs	r3, #164	@ 0xa4
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	4013      	ands	r3, r2
 800539c:	d017      	beq.n	80053ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800539e:	23a0      	movs	r3, #160	@ 0xa0
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2220      	movs	r2, #32
 80053a6:	4013      	ands	r3, r2
 80053a8:	d105      	bne.n	80053b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053aa:	239c      	movs	r3, #156	@ 0x9c
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2201      	movs	r2, #1
 80053b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2208      	movs	r2, #8
 80053bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2284      	movs	r2, #132	@ 0x84
 80053c2:	589b      	ldr	r3, [r3, r2]
 80053c4:	2208      	movs	r2, #8
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2184      	movs	r1, #132	@ 0x84
 80053cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053ce:	23a4      	movs	r3, #164	@ 0xa4
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	4013      	ands	r3, r2
 80053da:	d013      	beq.n	8005404 <HAL_UART_IRQHandler+0x198>
 80053dc:	23a0      	movs	r3, #160	@ 0xa0
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	04db      	lsls	r3, r3, #19
 80053e6:	4013      	ands	r3, r2
 80053e8:	d00c      	beq.n	8005404 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2280      	movs	r2, #128	@ 0x80
 80053f0:	0112      	lsls	r2, r2, #4
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2284      	movs	r2, #132	@ 0x84
 80053f8:	589b      	ldr	r3, [r3, r2]
 80053fa:	2220      	movs	r2, #32
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2184      	movs	r1, #132	@ 0x84
 8005402:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2284      	movs	r2, #132	@ 0x84
 8005408:	589b      	ldr	r3, [r3, r2]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d100      	bne.n	8005410 <HAL_UART_IRQHandler+0x1a4>
 800540e:	e21f      	b.n	8005850 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005410:	23a4      	movs	r3, #164	@ 0xa4
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2220      	movs	r2, #32
 8005418:	4013      	ands	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800541c:	23a0      	movs	r3, #160	@ 0xa0
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2220      	movs	r2, #32
 8005424:	4013      	ands	r3, r2
 8005426:	d008      	beq.n	800543a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	0010      	movs	r0, r2
 8005438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2284      	movs	r2, #132	@ 0x84
 800543e:	589b      	ldr	r3, [r3, r2]
 8005440:	2194      	movs	r1, #148	@ 0x94
 8005442:	187a      	adds	r2, r7, r1
 8005444:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2240      	movs	r2, #64	@ 0x40
 800544e:	4013      	ands	r3, r2
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d004      	beq.n	800545e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005454:	187b      	adds	r3, r7, r1
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2228      	movs	r2, #40	@ 0x28
 800545a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800545c:	d047      	beq.n	80054ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0018      	movs	r0, r3
 8005462:	f000 ff77 	bl	8006354 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2240      	movs	r2, #64	@ 0x40
 800546e:	4013      	ands	r3, r2
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	d137      	bne.n	80054e4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005474:	f3ef 8310 	mrs	r3, PRIMASK
 8005478:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800547a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547c:	2090      	movs	r0, #144	@ 0x90
 800547e:	183a      	adds	r2, r7, r0
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	2301      	movs	r3, #1
 8005484:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005488:	f383 8810 	msr	PRIMASK, r3
}
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2140      	movs	r1, #64	@ 0x40
 800549a:	438a      	bics	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	183b      	adds	r3, r7, r0
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b8:	4a14      	ldr	r2, [pc, #80]	@ (800550c <HAL_UART_IRQHandler+0x2a0>)
 80054ba:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c0:	0018      	movs	r0, r3
 80054c2:	f7fc febd 	bl	8002240 <HAL_DMA_Abort_IT>
 80054c6:	1e03      	subs	r3, r0, #0
 80054c8:	d01a      	beq.n	8005500 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d4:	0018      	movs	r0, r3
 80054d6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	e012      	b.n	8005500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f9e5 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e2:	e00d      	b.n	8005500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 f9e0 	bl	80058ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e008      	b.n	8005500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 f9db 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2284      	movs	r2, #132	@ 0x84
 80054fa:	2100      	movs	r1, #0
 80054fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80054fe:	e1a7      	b.n	8005850 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	46c0      	nop			@ (mov r8, r8)
    return;
 8005502:	e1a5      	b.n	8005850 <HAL_UART_IRQHandler+0x5e4>
 8005504:	0000080f 	.word	0x0000080f
 8005508:	04000120 	.word	0x04000120
 800550c:	0800673f 	.word	0x0800673f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005514:	2b01      	cmp	r3, #1
 8005516:	d000      	beq.n	800551a <HAL_UART_IRQHandler+0x2ae>
 8005518:	e159      	b.n	80057ce <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800551a:	23a4      	movs	r3, #164	@ 0xa4
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2210      	movs	r2, #16
 8005522:	4013      	ands	r3, r2
 8005524:	d100      	bne.n	8005528 <HAL_UART_IRQHandler+0x2bc>
 8005526:	e152      	b.n	80057ce <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005528:	23a0      	movs	r3, #160	@ 0xa0
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2210      	movs	r2, #16
 8005530:	4013      	ands	r3, r2
 8005532:	d100      	bne.n	8005536 <HAL_UART_IRQHandler+0x2ca>
 8005534:	e14b      	b.n	80057ce <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2240      	movs	r2, #64	@ 0x40
 8005546:	4013      	ands	r3, r2
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	d000      	beq.n	800554e <HAL_UART_IRQHandler+0x2e2>
 800554c:	e0bf      	b.n	80056ce <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	217e      	movs	r1, #126	@ 0x7e
 8005558:	187b      	adds	r3, r7, r1
 800555a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800555c:	187b      	adds	r3, r7, r1
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d100      	bne.n	8005566 <HAL_UART_IRQHandler+0x2fa>
 8005564:	e095      	b.n	8005692 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2258      	movs	r2, #88	@ 0x58
 800556a:	5a9b      	ldrh	r3, [r3, r2]
 800556c:	187a      	adds	r2, r7, r1
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d300      	bcc.n	8005576 <HAL_UART_IRQHandler+0x30a>
 8005574:	e08d      	b.n	8005692 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	187a      	adds	r2, r7, r1
 800557a:	215a      	movs	r1, #90	@ 0x5a
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2220      	movs	r2, #32
 800558a:	4013      	ands	r3, r2
 800558c:	d16f      	bne.n	800566e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005596:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005598:	2301      	movs	r3, #1
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	49ad      	ldr	r1, [pc, #692]	@ (8005864 <HAL_UART_IRQHandler+0x5f8>)
 80055b0:	400a      	ands	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c0:	f3ef 8310 	mrs	r3, PRIMASK
 80055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80055c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80055ca:	2301      	movs	r3, #1
 80055cc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	438a      	bics	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f2:	f3ef 8310 	mrs	r3, PRIMASK
 80055f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80055f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80055fc:	2301      	movs	r3, #1
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	438a      	bics	r2, r1
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800561a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800561e:	f383 8810 	msr	PRIMASK, r3
}
 8005622:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2280      	movs	r2, #128	@ 0x80
 8005628:	2120      	movs	r1, #32
 800562a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005632:	f3ef 8310 	mrs	r3, PRIMASK
 8005636:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800563c:	2301      	movs	r3, #1
 800563e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2110      	movs	r1, #16
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565e:	f383 8810 	msr	PRIMASK, r3
}
 8005662:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005668:	0018      	movs	r0, r3
 800566a:	f7fc fda9 	bl	80021c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2258      	movs	r2, #88	@ 0x58
 8005678:	5a9a      	ldrh	r2, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	215a      	movs	r1, #90	@ 0x5a
 800567e:	5a5b      	ldrh	r3, [r3, r1]
 8005680:	b29b      	uxth	r3, r3
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	0011      	movs	r1, r2
 800568a:	0018      	movs	r0, r3
 800568c:	f7fb f83a 	bl	8000704 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005690:	e0e0      	b.n	8005854 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2258      	movs	r2, #88	@ 0x58
 8005696:	5a9b      	ldrh	r3, [r3, r2]
 8005698:	227e      	movs	r2, #126	@ 0x7e
 800569a:	18ba      	adds	r2, r7, r2
 800569c:	8812      	ldrh	r2, [r2, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d000      	beq.n	80056a4 <HAL_UART_IRQHandler+0x438>
 80056a2:	e0d7      	b.n	8005854 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2220      	movs	r2, #32
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d000      	beq.n	80056b6 <HAL_UART_IRQHandler+0x44a>
 80056b4:	e0ce      	b.n	8005854 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2258      	movs	r2, #88	@ 0x58
 80056c0:	5a9a      	ldrh	r2, [r3, r2]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0011      	movs	r1, r2
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fb f81c 	bl	8000704 <HAL_UARTEx_RxEventCallback>
      return;
 80056cc:	e0c2      	b.n	8005854 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2258      	movs	r2, #88	@ 0x58
 80056d2:	5a99      	ldrh	r1, [r3, r2]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	225a      	movs	r2, #90	@ 0x5a
 80056d8:	5a9b      	ldrh	r3, [r3, r2]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	208e      	movs	r0, #142	@ 0x8e
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	1a8a      	subs	r2, r1, r2
 80056e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	225a      	movs	r2, #90	@ 0x5a
 80056e8:	5a9b      	ldrh	r3, [r3, r2]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d100      	bne.n	80056f2 <HAL_UART_IRQHandler+0x486>
 80056f0:	e0b2      	b.n	8005858 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 80056f2:	183b      	adds	r3, r7, r0
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d100      	bne.n	80056fc <HAL_UART_IRQHandler+0x490>
 80056fa:	e0ad      	b.n	8005858 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	60fb      	str	r3, [r7, #12]
  return(result);
 8005702:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005704:	2488      	movs	r4, #136	@ 0x88
 8005706:	193a      	adds	r2, r7, r4
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	2301      	movs	r3, #1
 800570c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4951      	ldr	r1, [pc, #324]	@ (8005868 <HAL_UART_IRQHandler+0x5fc>)
 8005722:	400a      	ands	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	193b      	adds	r3, r7, r4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	61bb      	str	r3, [r7, #24]
  return(result);
 800573a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	2484      	movs	r4, #132	@ 0x84
 800573e:	193a      	adds	r2, r7, r4
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	2301      	movs	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2101      	movs	r1, #1
 800575a:	438a      	bics	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	193b      	adds	r3, r7, r4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f383 8810 	msr	PRIMASK, r3
}
 800576a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2280      	movs	r2, #128	@ 0x80
 8005770:	2120      	movs	r1, #32
 8005772:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005788:	2480      	movs	r4, #128	@ 0x80
 800578a:	193a      	adds	r2, r7, r4
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	2301      	movs	r3, #1
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			@ (mov r8, r8)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2110      	movs	r1, #16
 80057a6:	438a      	bics	r2, r1
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	193b      	adds	r3, r7, r4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0011      	movs	r1, r2
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7fa ff9c 	bl	8000704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057cc:	e044      	b.n	8005858 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057ce:	23a4      	movs	r3, #164	@ 0xa4
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	035b      	lsls	r3, r3, #13
 80057d8:	4013      	ands	r3, r2
 80057da:	d010      	beq.n	80057fe <HAL_UART_IRQHandler+0x592>
 80057dc:	239c      	movs	r3, #156	@ 0x9c
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	2380      	movs	r3, #128	@ 0x80
 80057e4:	03db      	lsls	r3, r3, #15
 80057e6:	4013      	ands	r3, r2
 80057e8:	d009      	beq.n	80057fe <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2280      	movs	r2, #128	@ 0x80
 80057f0:	0352      	lsls	r2, r2, #13
 80057f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 ffdf 	bl	80067ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057fc:	e02f      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057fe:	23a4      	movs	r3, #164	@ 0xa4
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2280      	movs	r2, #128	@ 0x80
 8005806:	4013      	ands	r3, r2
 8005808:	d00f      	beq.n	800582a <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800580a:	23a0      	movs	r3, #160	@ 0xa0
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2280      	movs	r2, #128	@ 0x80
 8005812:	4013      	ands	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01e      	beq.n	800585c <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	0010      	movs	r0, r2
 8005826:	4798      	blx	r3
    }
    return;
 8005828:	e018      	b.n	800585c <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800582a:	23a4      	movs	r3, #164	@ 0xa4
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2240      	movs	r2, #64	@ 0x40
 8005832:	4013      	ands	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_UART_IRQHandler+0x5f2>
 8005836:	23a0      	movs	r3, #160	@ 0xa0
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2240      	movs	r2, #64	@ 0x40
 800583e:	4013      	ands	r3, r2
 8005840:	d00d      	beq.n	800585e <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	f000 ff8d 	bl	8006764 <UART_EndTransmit_IT>
    return;
 800584a:	e008      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
      return;
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	e006      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
    return;
 8005850:	46c0      	nop			@ (mov r8, r8)
 8005852:	e004      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
      return;
 8005854:	46c0      	nop			@ (mov r8, r8)
 8005856:	e002      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
      return;
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	e000      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
    return;
 800585c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800585e:	46bd      	mov	sp, r7
 8005860:	b02b      	add	sp, #172	@ 0xac
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	fffffeff 	.word	0xfffffeff
 8005868:	fffffedf 	.word	0xfffffedf

0800586c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005874:	46c0      	nop			@ (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b002      	add	sp, #8
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058b4:	46c0      	nop			@ (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2280      	movs	r2, #128	@ 0x80
 80058ce:	589b      	ldr	r3, [r3, r2]
 80058d0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b004      	add	sp, #16
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2284      	movs	r2, #132	@ 0x84
 80058ec:	589b      	ldr	r3, [r3, r2]
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b002      	add	sp, #8
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	b5b0      	push	{r4, r5, r7, lr}
 80058fa:	b08e      	sub	sp, #56	@ 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005900:	231a      	movs	r3, #26
 8005902:	2218      	movs	r2, #24
 8005904:	189b      	adds	r3, r3, r2
 8005906:	19db      	adds	r3, r3, r7
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	431a      	orrs	r2, r3
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	431a      	orrs	r2, r3
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4313      	orrs	r3, r2
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4ac3      	ldr	r2, [pc, #780]	@ (8005c38 <UART_SetConfig+0x340>)
 800592c:	4013      	ands	r3, r2
 800592e:	0019      	movs	r1, r3
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4abe      	ldr	r2, [pc, #760]	@ (8005c3c <UART_SetConfig+0x344>)
 8005942:	4013      	ands	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4ab8      	ldr	r2, [pc, #736]	@ (8005c40 <UART_SetConfig+0x348>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005968:	4313      	orrs	r3, r2
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4ab4      	ldr	r2, [pc, #720]	@ (8005c44 <UART_SetConfig+0x34c>)
 8005974:	4013      	ands	r3, r2
 8005976:	0019      	movs	r1, r3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4ab0      	ldr	r2, [pc, #704]	@ (8005c48 <UART_SetConfig+0x350>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d131      	bne.n	80059f0 <UART_SetConfig+0xf8>
 800598c:	4baf      	ldr	r3, [pc, #700]	@ (8005c4c <UART_SetConfig+0x354>)
 800598e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005990:	2203      	movs	r2, #3
 8005992:	4013      	ands	r3, r2
 8005994:	2b03      	cmp	r3, #3
 8005996:	d01d      	beq.n	80059d4 <UART_SetConfig+0xdc>
 8005998:	d823      	bhi.n	80059e2 <UART_SetConfig+0xea>
 800599a:	2b02      	cmp	r3, #2
 800599c:	d00c      	beq.n	80059b8 <UART_SetConfig+0xc0>
 800599e:	d820      	bhi.n	80059e2 <UART_SetConfig+0xea>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <UART_SetConfig+0xb2>
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d00e      	beq.n	80059c6 <UART_SetConfig+0xce>
 80059a8:	e01b      	b.n	80059e2 <UART_SetConfig+0xea>
 80059aa:	231b      	movs	r3, #27
 80059ac:	2218      	movs	r2, #24
 80059ae:	189b      	adds	r3, r3, r2
 80059b0:	19db      	adds	r3, r3, r7
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e0b4      	b.n	8005b22 <UART_SetConfig+0x22a>
 80059b8:	231b      	movs	r3, #27
 80059ba:	2218      	movs	r2, #24
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	19db      	adds	r3, r3, r7
 80059c0:	2202      	movs	r2, #2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e0ad      	b.n	8005b22 <UART_SetConfig+0x22a>
 80059c6:	231b      	movs	r3, #27
 80059c8:	2218      	movs	r2, #24
 80059ca:	189b      	adds	r3, r3, r2
 80059cc:	19db      	adds	r3, r3, r7
 80059ce:	2204      	movs	r2, #4
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e0a6      	b.n	8005b22 <UART_SetConfig+0x22a>
 80059d4:	231b      	movs	r3, #27
 80059d6:	2218      	movs	r2, #24
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	19db      	adds	r3, r3, r7
 80059dc:	2208      	movs	r2, #8
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e09f      	b.n	8005b22 <UART_SetConfig+0x22a>
 80059e2:	231b      	movs	r3, #27
 80059e4:	2218      	movs	r2, #24
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	19db      	adds	r3, r3, r7
 80059ea:	2210      	movs	r2, #16
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e098      	b.n	8005b22 <UART_SetConfig+0x22a>
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a96      	ldr	r2, [pc, #600]	@ (8005c50 <UART_SetConfig+0x358>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d131      	bne.n	8005a5e <UART_SetConfig+0x166>
 80059fa:	4b94      	ldr	r3, [pc, #592]	@ (8005c4c <UART_SetConfig+0x354>)
 80059fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fe:	220c      	movs	r2, #12
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b0c      	cmp	r3, #12
 8005a04:	d01d      	beq.n	8005a42 <UART_SetConfig+0x14a>
 8005a06:	d823      	bhi.n	8005a50 <UART_SetConfig+0x158>
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d00c      	beq.n	8005a26 <UART_SetConfig+0x12e>
 8005a0c:	d820      	bhi.n	8005a50 <UART_SetConfig+0x158>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <UART_SetConfig+0x120>
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d00e      	beq.n	8005a34 <UART_SetConfig+0x13c>
 8005a16:	e01b      	b.n	8005a50 <UART_SetConfig+0x158>
 8005a18:	231b      	movs	r3, #27
 8005a1a:	2218      	movs	r2, #24
 8005a1c:	189b      	adds	r3, r3, r2
 8005a1e:	19db      	adds	r3, r3, r7
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e07d      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a26:	231b      	movs	r3, #27
 8005a28:	2218      	movs	r2, #24
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	2202      	movs	r2, #2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e076      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a34:	231b      	movs	r3, #27
 8005a36:	2218      	movs	r2, #24
 8005a38:	189b      	adds	r3, r3, r2
 8005a3a:	19db      	adds	r3, r3, r7
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e06f      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a42:	231b      	movs	r3, #27
 8005a44:	2218      	movs	r2, #24
 8005a46:	189b      	adds	r3, r3, r2
 8005a48:	19db      	adds	r3, r3, r7
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e068      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a50:	231b      	movs	r3, #27
 8005a52:	2218      	movs	r2, #24
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	19db      	adds	r3, r3, r7
 8005a58:	2210      	movs	r2, #16
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e061      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a7c      	ldr	r2, [pc, #496]	@ (8005c54 <UART_SetConfig+0x35c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d106      	bne.n	8005a76 <UART_SetConfig+0x17e>
 8005a68:	231b      	movs	r3, #27
 8005a6a:	2218      	movs	r2, #24
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e055      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a77      	ldr	r2, [pc, #476]	@ (8005c58 <UART_SetConfig+0x360>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d106      	bne.n	8005a8e <UART_SetConfig+0x196>
 8005a80:	231b      	movs	r3, #27
 8005a82:	2218      	movs	r2, #24
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	19db      	adds	r3, r3, r7
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e049      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6b      	ldr	r2, [pc, #428]	@ (8005c40 <UART_SetConfig+0x348>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d13e      	bne.n	8005b16 <UART_SetConfig+0x21e>
 8005a98:	4b6c      	ldr	r3, [pc, #432]	@ (8005c4c <UART_SetConfig+0x354>)
 8005a9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a9c:	23c0      	movs	r3, #192	@ 0xc0
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	22c0      	movs	r2, #192	@ 0xc0
 8005aa4:	0112      	lsls	r2, r2, #4
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d027      	beq.n	8005afa <UART_SetConfig+0x202>
 8005aaa:	22c0      	movs	r2, #192	@ 0xc0
 8005aac:	0112      	lsls	r2, r2, #4
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d82a      	bhi.n	8005b08 <UART_SetConfig+0x210>
 8005ab2:	2280      	movs	r2, #128	@ 0x80
 8005ab4:	0112      	lsls	r2, r2, #4
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d011      	beq.n	8005ade <UART_SetConfig+0x1e6>
 8005aba:	2280      	movs	r2, #128	@ 0x80
 8005abc:	0112      	lsls	r2, r2, #4
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d822      	bhi.n	8005b08 <UART_SetConfig+0x210>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <UART_SetConfig+0x1d8>
 8005ac6:	2280      	movs	r2, #128	@ 0x80
 8005ac8:	00d2      	lsls	r2, r2, #3
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <UART_SetConfig+0x1f4>
 8005ace:	e01b      	b.n	8005b08 <UART_SetConfig+0x210>
 8005ad0:	231b      	movs	r3, #27
 8005ad2:	2218      	movs	r2, #24
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	19db      	adds	r3, r3, r7
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e021      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005ade:	231b      	movs	r3, #27
 8005ae0:	2218      	movs	r2, #24
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	19db      	adds	r3, r3, r7
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	e01a      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005aec:	231b      	movs	r3, #27
 8005aee:	2218      	movs	r2, #24
 8005af0:	189b      	adds	r3, r3, r2
 8005af2:	19db      	adds	r3, r3, r7
 8005af4:	2204      	movs	r2, #4
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e013      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005afa:	231b      	movs	r3, #27
 8005afc:	2218      	movs	r2, #24
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	19db      	adds	r3, r3, r7
 8005b02:	2208      	movs	r2, #8
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e00c      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005b08:	231b      	movs	r3, #27
 8005b0a:	2218      	movs	r2, #24
 8005b0c:	189b      	adds	r3, r3, r2
 8005b0e:	19db      	adds	r3, r3, r7
 8005b10:	2210      	movs	r2, #16
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x22a>
 8005b16:	231b      	movs	r3, #27
 8005b18:	2218      	movs	r2, #24
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	19db      	adds	r3, r3, r7
 8005b1e:	2210      	movs	r2, #16
 8005b20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a46      	ldr	r2, [pc, #280]	@ (8005c40 <UART_SetConfig+0x348>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d000      	beq.n	8005b2e <UART_SetConfig+0x236>
 8005b2c:	e09a      	b.n	8005c64 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b2e:	231b      	movs	r3, #27
 8005b30:	2218      	movs	r2, #24
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	19db      	adds	r3, r3, r7
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d01d      	beq.n	8005b78 <UART_SetConfig+0x280>
 8005b3c:	dc20      	bgt.n	8005b80 <UART_SetConfig+0x288>
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d015      	beq.n	8005b6e <UART_SetConfig+0x276>
 8005b42:	dc1d      	bgt.n	8005b80 <UART_SetConfig+0x288>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <UART_SetConfig+0x256>
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d005      	beq.n	8005b58 <UART_SetConfig+0x260>
 8005b4c:	e018      	b.n	8005b80 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4e:	f7fe fb89 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8005b52:	0003      	movs	r3, r0
 8005b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b56:	e01c      	b.n	8005b92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b58:	4b3c      	ldr	r3, [pc, #240]	@ (8005c4c <UART_SetConfig+0x354>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d002      	beq.n	8005b68 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b62:	4b3e      	ldr	r3, [pc, #248]	@ (8005c5c <UART_SetConfig+0x364>)
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b66:	e014      	b.n	8005b92 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005b68:	4b3d      	ldr	r3, [pc, #244]	@ (8005c60 <UART_SetConfig+0x368>)
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b6c:	e011      	b.n	8005b92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7fe fae9 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005b72:	0003      	movs	r3, r0
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b76:	e00c      	b.n	8005b92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b7e:	e008      	b.n	8005b92 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005b84:	231a      	movs	r3, #26
 8005b86:	2218      	movs	r2, #24
 8005b88:	189b      	adds	r3, r3, r2
 8005b8a:	19db      	adds	r3, r3, r7
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
        break;
 8005b90:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d100      	bne.n	8005b9a <UART_SetConfig+0x2a2>
 8005b98:	e133      	b.n	8005e02 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	0013      	movs	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d305      	bcc.n	8005bb6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d906      	bls.n	8005bc4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005bb6:	231a      	movs	r3, #26
 8005bb8:	2218      	movs	r2, #24
 8005bba:	189b      	adds	r3, r3, r2
 8005bbc:	19db      	adds	r3, r3, r7
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e11e      	b.n	8005e02 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	000b      	movs	r3, r1
 8005bd2:	0e1b      	lsrs	r3, r3, #24
 8005bd4:	0010      	movs	r0, r2
 8005bd6:	0205      	lsls	r5, r0, #8
 8005bd8:	431d      	orrs	r5, r3
 8005bda:	000b      	movs	r3, r1
 8005bdc:	021c      	lsls	r4, r3, #8
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	68b8      	ldr	r0, [r7, #8]
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	1900      	adds	r0, r0, r4
 8005bf0:	4169      	adcs	r1, r5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f7fa fb20 	bl	8000244 <__aeabi_uldivmod>
 8005c04:	0002      	movs	r2, r0
 8005c06:	000b      	movs	r3, r1
 8005c08:	0013      	movs	r3, r2
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c0e:	23c0      	movs	r3, #192	@ 0xc0
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d309      	bcc.n	8005c2a <UART_SetConfig+0x332>
 8005c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	035b      	lsls	r3, r3, #13
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d204      	bcs.n	8005c2a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c26:	60da      	str	r2, [r3, #12]
 8005c28:	e0eb      	b.n	8005e02 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005c2a:	231a      	movs	r3, #26
 8005c2c:	2218      	movs	r2, #24
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	19db      	adds	r3, r3, r7
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e0e4      	b.n	8005e02 <UART_SetConfig+0x50a>
 8005c38:	efff69f3 	.word	0xefff69f3
 8005c3c:	ffffcfff 	.word	0xffffcfff
 8005c40:	40004800 	.word	0x40004800
 8005c44:	fffff4ff 	.word	0xfffff4ff
 8005c48:	40013800 	.word	0x40013800
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40004400 	.word	0x40004400
 8005c54:	40004c00 	.word	0x40004c00
 8005c58:	40005000 	.word	0x40005000
 8005c5c:	003d0900 	.word	0x003d0900
 8005c60:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d000      	beq.n	8005c72 <UART_SetConfig+0x37a>
 8005c70:	e070      	b.n	8005d54 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005c72:	231b      	movs	r3, #27
 8005c74:	2218      	movs	r2, #24
 8005c76:	189b      	adds	r3, r3, r2
 8005c78:	19db      	adds	r3, r3, r7
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d822      	bhi.n	8005cc6 <UART_SetConfig+0x3ce>
 8005c80:	009a      	lsls	r2, r3, #2
 8005c82:	4b67      	ldr	r3, [pc, #412]	@ (8005e20 <UART_SetConfig+0x528>)
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8a:	f7fe faeb 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c92:	e021      	b.n	8005cd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe fafc 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c9c:	e01c      	b.n	8005cd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9e:	4b61      	ldr	r3, [pc, #388]	@ (8005e24 <UART_SetConfig+0x52c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d002      	beq.n	8005cae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8005e28 <UART_SetConfig+0x530>)
 8005caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cac:	e014      	b.n	8005cd8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005cae:	4b5f      	ldr	r3, [pc, #380]	@ (8005e2c <UART_SetConfig+0x534>)
 8005cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005cb2:	e011      	b.n	8005cd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb4:	f7fe fa46 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005cbc:	e00c      	b.n	8005cd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005cc4:	e008      	b.n	8005cd8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005cca:	231a      	movs	r3, #26
 8005ccc:	2218      	movs	r2, #24
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	19db      	adds	r3, r3, r7
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
        break;
 8005cd6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d100      	bne.n	8005ce0 <UART_SetConfig+0x3e8>
 8005cde:	e090      	b.n	8005e02 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	005a      	lsls	r2, r3, #1
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	18d2      	adds	r2, r2, r3
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	f7fa fa1a 	bl	800012c <__udivsi3>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d921      	bls.n	8005d46 <UART_SetConfig+0x44e>
 8005d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d04:	2380      	movs	r3, #128	@ 0x80
 8005d06:	025b      	lsls	r3, r3, #9
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d21c      	bcs.n	8005d46 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	200e      	movs	r0, #14
 8005d12:	2418      	movs	r4, #24
 8005d14:	1903      	adds	r3, r0, r4
 8005d16:	19db      	adds	r3, r3, r7
 8005d18:	210f      	movs	r1, #15
 8005d1a:	438a      	bics	r2, r1
 8005d1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2207      	movs	r2, #7
 8005d26:	4013      	ands	r3, r2
 8005d28:	b299      	uxth	r1, r3
 8005d2a:	1903      	adds	r3, r0, r4
 8005d2c:	19db      	adds	r3, r3, r7
 8005d2e:	1902      	adds	r2, r0, r4
 8005d30:	19d2      	adds	r2, r2, r7
 8005d32:	8812      	ldrh	r2, [r2, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	1902      	adds	r2, r0, r4
 8005d3e:	19d2      	adds	r2, r2, r7
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	e05d      	b.n	8005e02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005d46:	231a      	movs	r3, #26
 8005d48:	2218      	movs	r2, #24
 8005d4a:	189b      	adds	r3, r3, r2
 8005d4c:	19db      	adds	r3, r3, r7
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e056      	b.n	8005e02 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d54:	231b      	movs	r3, #27
 8005d56:	2218      	movs	r2, #24
 8005d58:	189b      	adds	r3, r3, r2
 8005d5a:	19db      	adds	r3, r3, r7
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d822      	bhi.n	8005da8 <UART_SetConfig+0x4b0>
 8005d62:	009a      	lsls	r2, r3, #2
 8005d64:	4b32      	ldr	r3, [pc, #200]	@ (8005e30 <UART_SetConfig+0x538>)
 8005d66:	18d3      	adds	r3, r2, r3
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7fe fa7a 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8005d70:	0003      	movs	r3, r0
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d74:	e021      	b.n	8005dba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d76:	f7fe fa8b 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 8005d7a:	0003      	movs	r3, r0
 8005d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d7e:	e01c      	b.n	8005dba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d80:	4b28      	ldr	r3, [pc, #160]	@ (8005e24 <UART_SetConfig+0x52c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2210      	movs	r2, #16
 8005d86:	4013      	ands	r3, r2
 8005d88:	d002      	beq.n	8005d90 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d8a:	4b27      	ldr	r3, [pc, #156]	@ (8005e28 <UART_SetConfig+0x530>)
 8005d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d8e:	e014      	b.n	8005dba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b26      	ldr	r3, [pc, #152]	@ (8005e2c <UART_SetConfig+0x534>)
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d94:	e011      	b.n	8005dba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fe f9d5 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d9e:	e00c      	b.n	8005dba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005da6:	e008      	b.n	8005dba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005dac:	231a      	movs	r3, #26
 8005dae:	2218      	movs	r2, #24
 8005db0:	189b      	adds	r3, r3, r2
 8005db2:	19db      	adds	r3, r3, r7
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
        break;
 8005db8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	085a      	lsrs	r2, r3, #1
 8005dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc8:	18d2      	adds	r2, r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	0019      	movs	r1, r3
 8005dd0:	0010      	movs	r0, r2
 8005dd2:	f7fa f9ab 	bl	800012c <__udivsi3>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d90a      	bls.n	8005df6 <UART_SetConfig+0x4fe>
 8005de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de2:	2380      	movs	r3, #128	@ 0x80
 8005de4:	025b      	lsls	r3, r3, #9
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d205      	bcs.n	8005df6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60da      	str	r2, [r3, #12]
 8005df4:	e005      	b.n	8005e02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005df6:	231a      	movs	r3, #26
 8005df8:	2218      	movs	r2, #24
 8005dfa:	189b      	adds	r3, r3, r2
 8005dfc:	19db      	adds	r3, r3, r7
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2200      	movs	r2, #0
 8005e06:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e0e:	231a      	movs	r3, #26
 8005e10:	2218      	movs	r2, #24
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	19db      	adds	r3, r3, r7
 8005e16:	781b      	ldrb	r3, [r3, #0]
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b00e      	add	sp, #56	@ 0x38
 8005e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e20:	08007c18 	.word	0x08007c18
 8005e24:	40021000 	.word	0x40021000
 8005e28:	003d0900 	.word	0x003d0900
 8005e2c:	00f42400 	.word	0x00f42400
 8005e30:	08007c3c 	.word	0x08007c3c

08005e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	2208      	movs	r2, #8
 8005e42:	4013      	ands	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f78 <UART_AdvFeatureConfig+0x144>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	2201      	movs	r2, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a43      	ldr	r2, [pc, #268]	@ (8005f7c <UART_AdvFeatureConfig+0x148>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	2202      	movs	r2, #2
 8005e86:	4013      	ands	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a3b      	ldr	r2, [pc, #236]	@ (8005f80 <UART_AdvFeatureConfig+0x14c>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4a34      	ldr	r2, [pc, #208]	@ (8005f84 <UART_AdvFeatureConfig+0x150>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	2210      	movs	r2, #16
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <UART_AdvFeatureConfig+0x154>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	2220      	movs	r2, #32
 8005eec:	4013      	ands	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <UART_AdvFeatureConfig+0x158>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	0019      	movs	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	2240      	movs	r2, #64	@ 0x40
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d01d      	beq.n	8005f4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	@ (8005f90 <UART_AdvFeatureConfig+0x15c>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f2e:	2380      	movs	r3, #128	@ 0x80
 8005f30:	035b      	lsls	r3, r3, #13
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10b      	bne.n	8005f4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <UART_AdvFeatureConfig+0x160>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	2280      	movs	r2, #128	@ 0x80
 8005f54:	4013      	ands	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f98 <UART_AdvFeatureConfig+0x164>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	ffff7fff 	.word	0xffff7fff
 8005f7c:	fffdffff 	.word	0xfffdffff
 8005f80:	fffeffff 	.word	0xfffeffff
 8005f84:	fffbffff 	.word	0xfffbffff
 8005f88:	ffffefff 	.word	0xffffefff
 8005f8c:	ffffdfff 	.word	0xffffdfff
 8005f90:	ffefffff 	.word	0xffefffff
 8005f94:	ff9fffff 	.word	0xff9fffff
 8005f98:	fff7ffff 	.word	0xfff7ffff

08005f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b092      	sub	sp, #72	@ 0x48
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2284      	movs	r2, #132	@ 0x84
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fac:	f7fb fefa 	bl	8001da4 <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d12c      	bne.n	800601c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc4:	2280      	movs	r2, #128	@ 0x80
 8005fc6:	0391      	lsls	r1, r2, #14
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4a46      	ldr	r2, [pc, #280]	@ (80060e4 <UART_CheckIdleState+0x148>)
 8005fcc:	9200      	str	r2, [sp, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f000 f88c 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d021      	beq.n	800601c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			@ (mov r8, r8)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2180      	movs	r1, #128	@ 0x80
 8005ffa:	438a      	bics	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	f383 8810 	msr	PRIMASK, r3
}
 8006008:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2278      	movs	r2, #120	@ 0x78
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e05f      	b.n	80060dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2204      	movs	r2, #4
 8006024:	4013      	ands	r3, r2
 8006026:	2b04      	cmp	r3, #4
 8006028:	d146      	bne.n	80060b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	2280      	movs	r2, #128	@ 0x80
 800602e:	03d1      	lsls	r1, r2, #15
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4a2c      	ldr	r2, [pc, #176]	@ (80060e4 <UART_CheckIdleState+0x148>)
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	f000 f858 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d03b      	beq.n	80060b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006040:	f3ef 8310 	mrs	r3, PRIMASK
 8006044:	60fb      	str	r3, [r7, #12]
  return(result);
 8006046:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
 800604a:	2301      	movs	r3, #1
 800604c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f383 8810 	msr	PRIMASK, r3
}
 8006054:	46c0      	nop			@ (mov r8, r8)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4921      	ldr	r1, [pc, #132]	@ (80060e8 <UART_CheckIdleState+0x14c>)
 8006062:	400a      	ands	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8810 	msr	PRIMASK, r3
}
 8006070:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	61bb      	str	r3, [r7, #24]
  return(result);
 8006078:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	633b      	str	r3, [r7, #48]	@ 0x30
 800607c:	2301      	movs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f383 8810 	msr	PRIMASK, r3
}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2101      	movs	r1, #1
 8006094:	438a      	bics	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2280      	movs	r2, #128	@ 0x80
 80060a8:	2120      	movs	r1, #32
 80060aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2278      	movs	r2, #120	@ 0x78
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e011      	b.n	80060dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2280      	movs	r2, #128	@ 0x80
 80060c2:	2120      	movs	r1, #32
 80060c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2278      	movs	r2, #120	@ 0x78
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b010      	add	sp, #64	@ 0x40
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	01ffffff 	.word	0x01ffffff
 80060e8:	fffffedf 	.word	0xfffffedf

080060ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	1dfb      	adds	r3, r7, #7
 80060fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	e051      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	3301      	adds	r3, #1
 8006102:	d04e      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006104:	f7fb fe4e 	bl	8001da4 <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e051      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2204      	movs	r2, #4
 8006126:	4013      	ands	r3, r2
 8006128:	d03b      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b80      	cmp	r3, #128	@ 0x80
 800612e:	d038      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b40      	cmp	r3, #64	@ 0x40
 8006134:	d035      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2208      	movs	r2, #8
 800613e:	4013      	ands	r3, r2
 8006140:	2b08      	cmp	r3, #8
 8006142:	d111      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	0018      	movs	r0, r3
 8006150:	f000 f900 	bl	8006354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2284      	movs	r2, #132	@ 0x84
 8006158:	2108      	movs	r1, #8
 800615a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2278      	movs	r2, #120	@ 0x78
 8006160:	2100      	movs	r1, #0
 8006162:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e02c      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	401a      	ands	r2, r3
 8006174:	2380      	movs	r3, #128	@ 0x80
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	429a      	cmp	r2, r3
 800617a:	d112      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2280      	movs	r2, #128	@ 0x80
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 f8e3 	bl	8006354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2284      	movs	r2, #132	@ 0x84
 8006192:	2120      	movs	r1, #32
 8006194:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2278      	movs	r2, #120	@ 0x78
 800619a:	2100      	movs	r1, #0
 800619c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	425a      	negs	r2, r3
 80061b2:	4153      	adcs	r3, r2
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	001a      	movs	r2, r3
 80061b8:	1dfb      	adds	r3, r7, #7
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d09e      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b004      	add	sp, #16
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b090      	sub	sp, #64	@ 0x40
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	1dbb      	adds	r3, r7, #6
 80061d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1dba      	adds	r2, r7, #6
 80061e4:	2158      	movs	r1, #88	@ 0x58
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2284      	movs	r2, #132	@ 0x84
 80061ee:	2100      	movs	r1, #0
 80061f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2280      	movs	r2, #128	@ 0x80
 80061f6:	2122      	movs	r1, #34	@ 0x22
 80061f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d028      	beq.n	8006254 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006206:	4a3e      	ldr	r2, [pc, #248]	@ (8006300 <UART_Start_Receive_DMA+0x134>)
 8006208:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620e:	4a3d      	ldr	r2, [pc, #244]	@ (8006304 <UART_Start_Receive_DMA+0x138>)
 8006210:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006216:	4a3c      	ldr	r2, [pc, #240]	@ (8006308 <UART_Start_Receive_DMA+0x13c>)
 8006218:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	2200      	movs	r2, #0
 8006220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3324      	adds	r3, #36	@ 0x24
 800622c:	0019      	movs	r1, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	001a      	movs	r2, r3
 8006234:	1dbb      	adds	r3, r7, #6
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	f7fb ff5c 	bl	80020f4 <HAL_DMA_Start_IT>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d009      	beq.n	8006254 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2284      	movs	r2, #132	@ 0x84
 8006244:	2110      	movs	r1, #16
 8006246:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2280      	movs	r2, #128	@ 0x80
 800624c:	2120      	movs	r1, #32
 800624e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e050      	b.n	80062f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d019      	beq.n	8006290 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006266:	2301      	movs	r3, #1
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2180      	movs	r1, #128	@ 0x80
 800627e:	0049      	lsls	r1, r1, #1
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	f383 8810 	msr	PRIMASK, r3
}
 800628e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	613b      	str	r3, [r7, #16]
  return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2101      	movs	r1, #1
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c2:	f3ef 8310 	mrs	r3, PRIMASK
 80062c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80062c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80062cc:	2301      	movs	r3, #1
 80062ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	f383 8810 	msr	PRIMASK, r3
}
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2140      	movs	r1, #64	@ 0x40
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	f383 8810 	msr	PRIMASK, r3
}
 80062f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b010      	add	sp, #64	@ 0x40
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	080064d5 	.word	0x080064d5
 8006304:	0800663d 	.word	0x0800663d
 8006308:	080066bb 	.word	0x080066bb

0800630c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006314:	f3ef 8310 	mrs	r3, PRIMASK
 8006318:	60bb      	str	r3, [r7, #8]
  return(result);
 800631a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	2301      	movs	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f383 8810 	msr	PRIMASK, r3
}
 8006328:	46c0      	nop			@ (mov r8, r8)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	21c0      	movs	r1, #192	@ 0xc0
 8006336:	438a      	bics	r2, r1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f383 8810 	msr	PRIMASK, r3
}
 8006344:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b006      	add	sp, #24
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	@ 0x38
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	617b      	str	r3, [r7, #20]
  return(result);
 8006362:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
 8006366:	2301      	movs	r3, #1
 8006368:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4926      	ldr	r1, [pc, #152]	@ (8006418 <UART_EndRxTransfer+0xc4>)
 800637e:	400a      	ands	r2, r1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f383 8810 	msr	PRIMASK, r3
}
 800638c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638e:	f3ef 8310 	mrs	r3, PRIMASK
 8006392:	623b      	str	r3, [r7, #32]
  return(result);
 8006394:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
 8006398:	2301      	movs	r3, #1
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	f383 8810 	msr	PRIMASK, r3
}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2101      	movs	r1, #1
 80063b0:	438a      	bics	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d118      	bne.n	80063fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c8:	f3ef 8310 	mrs	r3, PRIMASK
 80063cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d2:	2301      	movs	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f383 8810 	msr	PRIMASK, r3
}
 80063dc:	46c0      	nop			@ (mov r8, r8)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2110      	movs	r1, #16
 80063ea:	438a      	bics	r2, r1
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f383 8810 	msr	PRIMASK, r3
}
 80063f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2280      	movs	r2, #128	@ 0x80
 80063fe:	2120      	movs	r1, #32
 8006400:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b00e      	add	sp, #56	@ 0x38
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	fffffedf 	.word	0xfffffedf

0800641c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	@ 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2220      	movs	r2, #32
 8006432:	4013      	ands	r3, r2
 8006434:	d135      	bne.n	80064a2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2252      	movs	r2, #82	@ 0x52
 800643a:	2100      	movs	r1, #0
 800643c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	60fb      	str	r3, [r7, #12]
  return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006448:	2301      	movs	r3, #1
 800644a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f383 8810 	msr	PRIMASK, r3
}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2180      	movs	r1, #128	@ 0x80
 8006460:	438a      	bics	r2, r1
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006470:	f3ef 8310 	mrs	r3, PRIMASK
 8006474:	61bb      	str	r3, [r7, #24]
  return(result);
 8006476:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
 800647a:	2301      	movs	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f383 8810 	msr	PRIMASK, r3
}
 8006484:	46c0      	nop			@ (mov r8, r8)
 8006486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2140      	movs	r1, #64	@ 0x40
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f383 8810 	msr	PRIMASK, r3
}
 80064a0:	e004      	b.n	80064ac <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80064a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7ff f9e1 	bl	800586c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	46c0      	nop			@ (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b00c      	add	sp, #48	@ 0x30
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff f9d9 	bl	800587c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ca:	46c0      	nop			@ (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b004      	add	sp, #16
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b094      	sub	sp, #80	@ 0x50
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2220      	movs	r2, #32
 80064ea:	4013      	ands	r3, r2
 80064ec:	d16f      	bne.n	80065ce <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80064ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f0:	225a      	movs	r2, #90	@ 0x5a
 80064f2:	2100      	movs	r1, #0
 80064f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f6:	f3ef 8310 	mrs	r3, PRIMASK
 80064fa:	617b      	str	r3, [r7, #20]
  return(result);
 80064fc:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006500:	2301      	movs	r3, #1
 8006502:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f383 8810 	msr	PRIMASK, r3
}
 800650a:	46c0      	nop			@ (mov r8, r8)
 800650c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4948      	ldr	r1, [pc, #288]	@ (8006638 <UART_DMAReceiveCplt+0x164>)
 8006518:	400a      	ands	r2, r1
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800651e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f383 8810 	msr	PRIMASK, r3
}
 8006526:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006528:	f3ef 8310 	mrs	r3, PRIMASK
 800652c:	623b      	str	r3, [r7, #32]
  return(result);
 800652e:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	647b      	str	r3, [r7, #68]	@ 0x44
 8006532:	2301      	movs	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	f383 8810 	msr	PRIMASK, r3
}
 800653c:	46c0      	nop			@ (mov r8, r8)
 800653e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2101      	movs	r1, #1
 800654a:	438a      	bics	r2, r1
 800654c:	609a      	str	r2, [r3, #8]
 800654e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	f383 8810 	msr	PRIMASK, r3
}
 8006558:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655a:	f3ef 8310 	mrs	r3, PRIMASK
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	643b      	str	r3, [r7, #64]	@ 0x40
 8006564:	2301      	movs	r3, #1
 8006566:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	f383 8810 	msr	PRIMASK, r3
}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2140      	movs	r1, #64	@ 0x40
 800657c:	438a      	bics	r2, r1
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f383 8810 	msr	PRIMASK, r3
}
 800658a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800658c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800658e:	2280      	movs	r2, #128	@ 0x80
 8006590:	2120      	movs	r1, #32
 8006592:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006598:	2b01      	cmp	r3, #1
 800659a:	d118      	bne.n	80065ce <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659c:	f3ef 8310 	mrs	r3, PRIMASK
 80065a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065a2:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a6:	2301      	movs	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			@ (mov r8, r8)
 80065b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2110      	movs	r1, #16
 80065be:	438a      	bics	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f383 8810 	msr	PRIMASK, r3
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	2200      	movs	r2, #0
 80065d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d124      	bne.n	8006626 <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 80065dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065de:	225a      	movs	r2, #90	@ 0x5a
 80065e0:	2100      	movs	r1, #0
 80065e2:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	213a      	movs	r1, #58	@ 0x3a
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 80065f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f2:	2258      	movs	r2, #88	@ 0x58
 80065f4:	5a9b      	ldrh	r3, [r3, r2]
 80065f6:	187a      	adds	r2, r7, r1
 80065f8:	8812      	ldrh	r2, [r2, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d204      	bcs.n	8006608 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80065fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006600:	187a      	adds	r2, r7, r1
 8006602:	215a      	movs	r1, #90	@ 0x5a
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660a:	2258      	movs	r2, #88	@ 0x58
 800660c:	5a9a      	ldrh	r2, [r3, r2]
 800660e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006610:	215a      	movs	r1, #90	@ 0x5a
 8006612:	5a5b      	ldrh	r3, [r3, r1]
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29a      	uxth	r2, r3
 800661a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661c:	0011      	movs	r1, r2
 800661e:	0018      	movs	r0, r3
 8006620:	f7fa f870 	bl	8000704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006624:	e003      	b.n	800662e <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8006626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff f92f 	bl	800588c <HAL_UART_RxCpltCallback>
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b014      	add	sp, #80	@ 0x50
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	fffffeff 	.word	0xfffffeff

0800663c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006654:	2b01      	cmp	r3, #1
 8006656:	d128      	bne.n	80066aa <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2258      	movs	r2, #88	@ 0x58
 800665c:	5a9b      	ldrh	r3, [r3, r2]
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	b299      	uxth	r1, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	225a      	movs	r2, #90	@ 0x5a
 8006666:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	210a      	movs	r1, #10
 8006670:	187b      	adds	r3, r7, r1
 8006672:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2258      	movs	r2, #88	@ 0x58
 8006678:	5a9b      	ldrh	r3, [r3, r2]
 800667a:	187a      	adds	r2, r7, r1
 800667c:	8812      	ldrh	r2, [r2, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d804      	bhi.n	800668c <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	187a      	adds	r2, r7, r1
 8006686:	215a      	movs	r1, #90	@ 0x5a
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2258      	movs	r2, #88	@ 0x58
 8006690:	5a9a      	ldrh	r2, [r3, r2]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	215a      	movs	r1, #90	@ 0x5a
 8006696:	5a5b      	ldrh	r3, [r3, r1]
 8006698:	b29b      	uxth	r3, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	0011      	movs	r1, r2
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fa f82e 	bl	8000704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066a8:	e003      	b.n	80066b2 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f7ff f8f5 	bl	800589c <HAL_UART_RxHalfCpltCallback>
}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b004      	add	sp, #16
 80066b8:	bd80      	pop	{r7, pc}

080066ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2280      	movs	r2, #128	@ 0x80
 80066d2:	589b      	ldr	r3, [r3, r2]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2280      	movs	r2, #128	@ 0x80
 80066de:	4013      	ands	r3, r2
 80066e0:	2b80      	cmp	r3, #128	@ 0x80
 80066e2:	d10a      	bne.n	80066fa <UART_DMAError+0x40>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b21      	cmp	r3, #33	@ 0x21
 80066e8:	d107      	bne.n	80066fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2252      	movs	r2, #82	@ 0x52
 80066ee:	2100      	movs	r1, #0
 80066f0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff fe09 	bl	800630c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2240      	movs	r2, #64	@ 0x40
 8006702:	4013      	ands	r3, r2
 8006704:	2b40      	cmp	r3, #64	@ 0x40
 8006706:	d10a      	bne.n	800671e <UART_DMAError+0x64>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b22      	cmp	r3, #34	@ 0x22
 800670c:	d107      	bne.n	800671e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	225a      	movs	r2, #90	@ 0x5a
 8006712:	2100      	movs	r1, #0
 8006714:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	0018      	movs	r0, r3
 800671a:	f7ff fe1b 	bl	8006354 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2284      	movs	r2, #132	@ 0x84
 8006722:	589b      	ldr	r3, [r3, r2]
 8006724:	2210      	movs	r2, #16
 8006726:	431a      	orrs	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2184      	movs	r1, #132	@ 0x84
 800672c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	0018      	movs	r0, r3
 8006732:	f7ff f8bb 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006736:	46c0      	nop			@ (mov r8, r8)
 8006738:	46bd      	mov	sp, r7
 800673a:	b006      	add	sp, #24
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	225a      	movs	r2, #90	@ 0x5a
 8006750:	2100      	movs	r1, #0
 8006752:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	0018      	movs	r0, r3
 8006758:	f7ff f8a8 	bl	80058ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675c:	46c0      	nop			@ (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bd80      	pop	{r7, pc}

08006764 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800676c:	f3ef 8310 	mrs	r3, PRIMASK
 8006770:	60bb      	str	r3, [r7, #8]
  return(result);
 8006772:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	2301      	movs	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f383 8810 	msr	PRIMASK, r3
}
 8006780:	46c0      	nop			@ (mov r8, r8)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2140      	movs	r1, #64	@ 0x40
 800678e:	438a      	bics	r2, r1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f383 8810 	msr	PRIMASK, r3
}
 800679c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7ff f85d 	bl	800586c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b006      	add	sp, #24
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b002      	add	sp, #8
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ca:	b5b0      	push	{r4, r5, r7, lr}
 80067cc:	b08a      	sub	sp, #40	@ 0x28
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	1dbb      	adds	r3, r7, #6
 80067d6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2280      	movs	r2, #128	@ 0x80
 80067dc:	589b      	ldr	r3, [r3, r2]
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d156      	bne.n	8006890 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80067e8:	1dbb      	adds	r3, r7, #6
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e04e      	b.n	8006892 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	2380      	movs	r3, #128	@ 0x80
 80067fa:	015b      	lsls	r3, r3, #5
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d109      	bne.n	8006814 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2201      	movs	r2, #1
 800680c:	4013      	ands	r3, r2
 800680e:	d001      	beq.n	8006814 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e03e      	b.n	8006892 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006820:	2527      	movs	r5, #39	@ 0x27
 8006822:	197c      	adds	r4, r7, r5
 8006824:	1dbb      	adds	r3, r7, #6
 8006826:	881a      	ldrh	r2, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff fccd 	bl	80061cc <UART_Start_Receive_DMA>
 8006832:	0003      	movs	r3, r0
 8006834:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006836:	197b      	adds	r3, r7, r5
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d124      	bne.n	8006888 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006842:	2b01      	cmp	r3, #1
 8006844:	d11c      	bne.n	8006880 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2210      	movs	r2, #16
 800684c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800684e:	f3ef 8310 	mrs	r3, PRIMASK
 8006852:	617b      	str	r3, [r7, #20]
  return(result);
 8006854:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	2301      	movs	r3, #1
 800685a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f383 8810 	msr	PRIMASK, r3
}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2110      	movs	r1, #16
 8006870:	430a      	orrs	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f383 8810 	msr	PRIMASK, r3
}
 800687e:	e003      	b.n	8006888 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006880:	2327      	movs	r3, #39	@ 0x27
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	2201      	movs	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006888:	2327      	movs	r3, #39	@ 0x27
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	e000      	b.n	8006892 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b00a      	add	sp, #40	@ 0x28
 8006898:	bdb0      	pop	{r4, r5, r7, pc}

0800689a <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 fb11 	bl	8006ed0 <malloc>
 80068ae:	0003      	movs	r3, r0
 80068b0:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	0018      	movs	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b004      	add	sp, #16
 80068ba:	bd80      	pop	{r7, pc}

080068bc <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <ATC_Free+0x26>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d007      	beq.n	80068e2 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	0018      	movs	r0, r3
 80068d8:	f000 fb04 	bl	8006ee4 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
  }
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b002      	add	sp, #8
 80068e8:	bd80      	pop	{r7, pc}

080068ea <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8a9b      	ldrh	r3, [r3, #20]
 8006900:	001a      	movs	r2, r3
 8006902:	2100      	movs	r1, #0
 8006904:	f000 fbe0 	bl	80070c8 <memset>
}
 8006908:	46c0      	nop			@ (mov r8, r8)
 800690a:	46bd      	mov	sp, r7
 800690c:	b002      	add	sp, #8
 800690e:	bd80      	pop	{r7, pc}

08006910 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	1dbb      	adds	r3, r7, #6
 800691c:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 800691e:	2417      	movs	r4, #23
 8006920:	193b      	adds	r3, r7, r4
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1dba      	adds	r2, r7, #6
 800692a:	8812      	ldrh	r2, [r2, #0]
 800692c:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	1dbb      	adds	r3, r7, #6
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0019      	movs	r1, r3
 800693a:	f7fe faf3 	bl	8004f24 <HAL_UART_Transmit_DMA>
 800693e:	1e03      	subs	r3, r0, #0
 8006940:	d103      	bne.n	800694a <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 8006942:	193b      	adds	r3, r7, r4
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e000      	b.n	800694c <ATC_TxRaw+0x3c>
      break;
 800694a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 800694c:	2317      	movs	r3, #23
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	781b      	ldrb	r3, [r3, #0]
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b007      	add	sp, #28
 8006958:	bd90      	pop	{r4, r7, pc}

0800695a <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	0018      	movs	r0, r3
 8006968:	f7fe ffa8 	bl	80058bc <HAL_UART_GetState>
 800696c:	0003      	movs	r3, r0
 800696e:	2b21      	cmp	r3, #33	@ 0x21
 8006970:	d007      	beq.n	8006982 <ATC_TxBusy+0x28>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	0018      	movs	r0, r3
 8006978:	f7fe ffa0 	bl	80058bc <HAL_UART_GetState>
 800697c:	0003      	movs	r3, r0
 800697e:	2b23      	cmp	r3, #35	@ 0x23
 8006980:	d101      	bne.n	8006986 <ATC_TxBusy+0x2c>
  {
    return true;
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8006986:	2300      	movs	r3, #0
  }
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}

08006990 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800699a:	230f      	movs	r3, #15
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 80069a2:	f7fb f9ff 	bl	8001da4 <HAL_GetTick>
 80069a6:	0003      	movs	r3, r0
 80069a8:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80069aa:	2001      	movs	r0, #1
 80069ac:	f000 fa84 	bl	8006eb8 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fe ff81 	bl	80058bc <HAL_UART_GetState>
 80069ba:	0003      	movs	r3, r0
 80069bc:	2b22      	cmp	r3, #34	@ 0x22
 80069be:	d007      	beq.n	80069d0 <ATC_TxWait+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7fe ff79 	bl	80058bc <HAL_UART_GetState>
 80069ca:	0003      	movs	r3, r0
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d104      	bne.n	80069da <ATC_TxWait+0x4a>
    {
      answer = true;
 80069d0:	230f      	movs	r3, #15
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
      break;
 80069d8:	e01c      	b.n	8006a14 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	0018      	movs	r0, r3
 80069e0:	f7fe ff6c 	bl	80058bc <HAL_UART_GetState>
 80069e4:	0003      	movs	r3, r0
 80069e6:	2be0      	cmp	r3, #224	@ 0xe0
 80069e8:	d014      	beq.n	8006a14 <ATC_TxWait+0x84>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fe ff64 	bl	80058bc <HAL_UART_GetState>
 80069f4:	0003      	movs	r3, r0
 80069f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80069f8:	d00c      	beq.n	8006a14 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80069fa:	f7fb f9d3 	bl	8001da4 <HAL_GetTick>
 80069fe:	0002      	movs	r2, r0
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d8cf      	bhi.n	80069aa <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fe fb18 	bl	8005044 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8006a14:	230f      	movs	r3, #15
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	781b      	ldrb	r3, [r3, #0]
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b004      	add	sp, #16
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8b1b      	ldrh	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d027      	beq.n	8006a82 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e01b      	b.n	8006a70 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	0019      	movs	r1, r3
 8006a4a:	f000 fb52 	bl	80070f2 <strstr>
 8006a4e:	0003      	movs	r3, r0
 8006a50:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	18d3      	adds	r3, r2, r3
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	0010      	movs	r0, r2
 8006a68:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d3de      	bcc.n	8006a38 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff ff34 	bl	80068ea <ATC_RxFlush>
  }
}
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b004      	add	sp, #16
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8006a94:	230f      	movs	r3, #15
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8b1b      	ldrh	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d031      	beq.n	8006b08 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e025      	b.n	8006afa <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	881a      	ldrh	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	320a      	adds	r2, #10
 8006abc:	0092      	lsls	r2, r2, #2
 8006abe:	58d3      	ldr	r3, [r2, r3]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	f000 fb16 	bl	80070f2 <strstr>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00e      	beq.n	8006aee <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8006adc:	230c      	movs	r3, #12
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	230f      	movs	r3, #15
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	3201      	adds	r2, #1
 8006aea:	701a      	strb	r2, [r3, #0]
        break;
 8006aec:	e00c      	b.n	8006b08 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8006aee:	210c      	movs	r1, #12
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	881a      	ldrh	r2, [r3, #0]
 8006af4:	187b      	adds	r3, r7, r1
 8006af6:	3201      	adds	r2, #1
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8adb      	ldrh	r3, [r3, #22]
 8006afe:	220c      	movs	r2, #12
 8006b00:	18ba      	adds	r2, r7, r2
 8006b02:	8812      	ldrh	r2, [r2, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d3d2      	bcc.n	8006aae <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8006b08:	230f      	movs	r3, #15
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	781b      	ldrb	r3, [r3, #0]
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b004      	add	sp, #16
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7fe fedc 	bl	80058e0 <HAL_UART_GetError>
 8006b28:	1e03      	subs	r3, r0, #0
 8006b2a:	d01f      	beq.n	8006b6c <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2201      	movs	r2, #1
 8006b34:	4252      	negs	r2, r2
 8006b36:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7fe fae7 	bl	8005110 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69d9      	ldr	r1, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8a9b      	ldrh	r3, [r3, #20]
 8006b4e:	001a      	movs	r2, r3
 8006b50:	f7ff fe3b 	bl	80067ca <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2104      	movs	r1, #4
 8006b68:	438a      	bics	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7fe fea3 	bl	80058bc <HAL_UART_GetState>
 8006b76:	0003      	movs	r3, r0
 8006b78:	2b22      	cmp	r3, #34	@ 0x22
 8006b7a:	d027      	beq.n	8006bcc <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7fe fe9b 	bl	80058bc <HAL_UART_GetState>
 8006b86:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006b88:	2b23      	cmp	r3, #35	@ 0x23
 8006b8a:	d01f      	beq.n	8006bcc <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4252      	negs	r2, r2
 8006b96:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7fe fab7 	bl	8005110 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69d9      	ldr	r1, [r3, #28]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8a9b      	ldrh	r3, [r3, #20]
 8006bae:	001a      	movs	r2, r3
 8006bb0:	f7ff fe0b 	bl	80067ca <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	438a      	bics	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]
  }
}
 8006bcc:	46c0      	nop			@ (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7ff ff99 	bl	8006b16 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7ff ff1b 	bl	8006a22 <ATC_CheckEvents>
}
 8006bec:	46c0      	nop			@ (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b08c      	sub	sp, #48	@ 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7ff fea6 	bl	800695a <ATC_TxBusy>
 8006c0e:	1e03      	subs	r3, r0, #0
 8006c10:	d002      	beq.n	8006c18 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8006c12:	2304      	movs	r3, #4
 8006c14:	425b      	negs	r3, r3
 8006c16:	e0e3      	b.n	8006de0 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8006c18:	2344      	movs	r3, #68	@ 0x44
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d902      	bls.n	8006c28 <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8006c22:	2305      	movs	r3, #5
 8006c24:	425b      	negs	r3, r3
 8006c26:	e0db      	b.n	8006de0 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff ff73 	bl	8006b16 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8006c30:	2348      	movs	r3, #72	@ 0x48
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c3a:	e051      	b.n	8006ce0 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	617a      	str	r2, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7f9 fa5d 	bl	8000108 <strlen>
 8006c4e:	0003      	movs	r3, r0
 8006c50:	3301      	adds	r3, #1
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7ff fe21 	bl	800689a <ATC_Malloc>
 8006c58:	0001      	movs	r1, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c5e:	320a      	adds	r2, #10
 8006c60:	0092      	lsls	r2, r2, #2
 8006c62:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c68:	320a      	adds	r2, #10
 8006c6a:	0092      	lsls	r2, r2, #2
 8006c6c:	58d3      	ldr	r3, [r2, r3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11c      	bne.n	8006cac <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8006c72:	2327      	movs	r3, #39	@ 0x27
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e00e      	b.n	8006c9a <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8006c7c:	2427      	movs	r4, #39	@ 0x27
 8006c7e:	193b      	adds	r3, r7, r4
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	330a      	adds	r3, #10
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	18d3      	adds	r3, r2, r3
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7ff fe16 	bl	80068bc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8006c90:	193b      	adds	r3, r7, r4
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	3201      	adds	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	2327      	movs	r3, #39	@ 0x27
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	dcea      	bgt.n	8006c7c <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	425b      	negs	r3, r3
 8006caa:	e099      	b.n	8006de0 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb0:	320a      	adds	r2, #10
 8006cb2:	0092      	lsls	r2, r2, #2
 8006cb4:	58d3      	ldr	r3, [r2, r3]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0011      	movs	r1, r2
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f000 fa6e 	bl	800719c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc4:	320a      	adds	r2, #10
 8006cc6:	0092      	lsls	r2, r2, #2
 8006cc8:	58d4      	ldr	r4, [r2, r3]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f7f9 fa1b 	bl	8000108 <strlen>
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	18e3      	adds	r3, r4, r3
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	3301      	adds	r3, #1
 8006cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce0:	2344      	movs	r3, #68	@ 0x44
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	dba7      	blt.n	8006c3c <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7ff fdfb 	bl	80068ea <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7f9 fa06 	bl	8000108 <strlen>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7ff fe03 	bl	8006910 <ATC_TxRaw>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	001a      	movs	r2, r3
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4053      	eors	r3, r2
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	425b      	negs	r3, r3
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006d1e:	e010      	b.n	8006d42 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	0011      	movs	r1, r2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7ff fe32 	bl	8006990 <ATC_TxWait>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	001a      	movs	r2, r3
 8006d30:	2301      	movs	r3, #1
 8006d32:	4053      	eors	r3, r2
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006d40:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8006d42:	2444      	movs	r4, #68	@ 0x44
 8006d44:	193b      	adds	r3, r7, r4
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d029      	beq.n	8006da0 <ATC_SendReceive+0x1ac>
 8006d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d126      	bne.n	8006da0 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8006d52:	f7fb f827 	bl	8001da4 <HAL_GetTick>
 8006d56:	0003      	movs	r3, r0
 8006d58:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8006d5a:	193b      	adds	r3, r7, r4
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8006d64:	e014      	b.n	8006d90 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8006d66:	2001      	movs	r0, #1
 8006d68:	f000 f8a6 	bl	8006eb8 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8006d6c:	251f      	movs	r5, #31
 8006d6e:	197c      	adds	r4, r7, r5
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	0011      	movs	r1, r2
 8006d76:	0018      	movs	r0, r3
 8006d78:	f7ff fe87 	bl	8006a8a <ATC_CheckResponse>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8006d80:	197b      	adds	r3, r7, r5
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8006d88:	197b      	adds	r3, r7, r5
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d8e:	e007      	b.n	8006da0 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8006d90:	f7fb f808 	bl	8001da4 <HAL_GetTick>
 8006d94:	0002      	movs	r2, r0
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d8e2      	bhi.n	8006d66 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8006da6:	2326      	movs	r3, #38	@ 0x26
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e00e      	b.n	8006dce <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8006db0:	2426      	movs	r4, #38	@ 0x26
 8006db2:	193b      	adds	r3, r7, r4
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	330a      	adds	r3, #10
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f7ff fd7c 	bl	80068bc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8006dc4:	193b      	adds	r3, r7, r4
 8006dc6:	781a      	ldrb	r2, [r3, #0]
 8006dc8:	193b      	adds	r3, r7, r4
 8006dca:	3201      	adds	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	2326      	movs	r3, #38	@ 0x26
 8006dd0:	18fa      	adds	r2, r7, r3
 8006dd2:	2344      	movs	r3, #68	@ 0x44
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	7812      	ldrb	r2, [r2, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3e8      	bcc.n	8006db0 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b00c      	add	sp, #48	@ 0x30
 8006de6:	bdb0      	pop	{r4, r5, r7, pc}

08006de8 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	000a      	movs	r2, r1
 8006df2:	1cbb      	adds	r3, r7, #2
 8006df4:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8006df6:	1cbb      	adds	r3, r7, #2
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	8a9b      	ldrh	r3, [r3, #20]
 8006dfe:	0019      	movs	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8b1b      	ldrh	r3, [r3, #24]
 8006e04:	1acb      	subs	r3, r1, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dd06      	ble.n	8006e18 <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8a99      	ldrh	r1, [r3, #20]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8b1a      	ldrh	r2, [r3, #24]
 8006e12:	1cbb      	adds	r3, r7, #2
 8006e14:	1a8a      	subs	r2, r1, r2
 8006e16:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	8b12      	ldrh	r2, [r2, #24]
 8006e20:	1898      	adds	r0, r3, r2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69d9      	ldr	r1, [r3, #28]
 8006e26:	1cbb      	adds	r3, r7, #2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	f000 f9be 	bl	80071ac <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8b1a      	ldrh	r2, [r3, #24]
 8006e34:	1cbb      	adds	r3, r7, #2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69d9      	ldr	r1, [r3, #28]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8a9b      	ldrh	r3, [r3, #20]
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	f7ff fcbc 	bl	80067ca <HAL_UARTEx_ReceiveToIdle_DMA>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d10c      	bne.n	8006e70 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2104      	movs	r1, #4
 8006e6a:	438a      	bics	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8006e6e:	e01f      	b.n	8006eb0 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	4252      	negs	r2, r2
 8006e7a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7fe f945 	bl	8005110 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69d9      	ldr	r1, [r3, #28]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8a9b      	ldrh	r3, [r3, #20]
 8006e92:	001a      	movs	r2, r3
 8006e94:	f7ff fc99 	bl	80067ca <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2104      	movs	r1, #4
 8006eac:	438a      	bics	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7fa ff78 	bl	8001db8 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8006ec8:	46c0      	nop			@ (mov r8, r8)
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <malloc>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4b03      	ldr	r3, [pc, #12]	@ (8006ee0 <malloc+0x10>)
 8006ed4:	0001      	movs	r1, r0
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	f000 f830 	bl	8006f3c <_malloc_r>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	46c0      	nop			@ (mov r8, r8)
 8006ee0:	20000010 	.word	0x20000010

08006ee4 <free>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	4b03      	ldr	r3, [pc, #12]	@ (8006ef4 <free+0x10>)
 8006ee8:	0001      	movs	r1, r0
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	f000 f968 	bl	80071c0 <_free_r>
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	46c0      	nop			@ (mov r8, r8)
 8006ef4:	20000010 	.word	0x20000010

08006ef8 <sbrk_aligned>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	4e0f      	ldr	r6, [pc, #60]	@ (8006f38 <sbrk_aligned+0x40>)
 8006efc:	000d      	movs	r5, r1
 8006efe:	6831      	ldr	r1, [r6, #0]
 8006f00:	0004      	movs	r4, r0
 8006f02:	2900      	cmp	r1, #0
 8006f04:	d102      	bne.n	8006f0c <sbrk_aligned+0x14>
 8006f06:	f000 f90b 	bl	8007120 <_sbrk_r>
 8006f0a:	6030      	str	r0, [r6, #0]
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	0020      	movs	r0, r4
 8006f10:	f000 f906 	bl	8007120 <_sbrk_r>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d103      	bne.n	8006f20 <sbrk_aligned+0x28>
 8006f18:	2501      	movs	r5, #1
 8006f1a:	426d      	negs	r5, r5
 8006f1c:	0028      	movs	r0, r5
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	2303      	movs	r3, #3
 8006f22:	1cc5      	adds	r5, r0, #3
 8006f24:	439d      	bics	r5, r3
 8006f26:	42a8      	cmp	r0, r5
 8006f28:	d0f8      	beq.n	8006f1c <sbrk_aligned+0x24>
 8006f2a:	1a29      	subs	r1, r5, r0
 8006f2c:	0020      	movs	r0, r4
 8006f2e:	f000 f8f7 	bl	8007120 <_sbrk_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d1f2      	bne.n	8006f1c <sbrk_aligned+0x24>
 8006f36:	e7ef      	b.n	8006f18 <sbrk_aligned+0x20>
 8006f38:	20000274 	.word	0x20000274

08006f3c <_malloc_r>:
 8006f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f3e:	2203      	movs	r2, #3
 8006f40:	1ccb      	adds	r3, r1, #3
 8006f42:	4393      	bics	r3, r2
 8006f44:	3308      	adds	r3, #8
 8006f46:	0005      	movs	r5, r0
 8006f48:	001f      	movs	r7, r3
 8006f4a:	2b0c      	cmp	r3, #12
 8006f4c:	d234      	bcs.n	8006fb8 <_malloc_r+0x7c>
 8006f4e:	270c      	movs	r7, #12
 8006f50:	42b9      	cmp	r1, r7
 8006f52:	d833      	bhi.n	8006fbc <_malloc_r+0x80>
 8006f54:	0028      	movs	r0, r5
 8006f56:	f000 f871 	bl	800703c <__malloc_lock>
 8006f5a:	4e37      	ldr	r6, [pc, #220]	@ (8007038 <_malloc_r+0xfc>)
 8006f5c:	6833      	ldr	r3, [r6, #0]
 8006f5e:	001c      	movs	r4, r3
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	d12f      	bne.n	8006fc4 <_malloc_r+0x88>
 8006f64:	0039      	movs	r1, r7
 8006f66:	0028      	movs	r0, r5
 8006f68:	f7ff ffc6 	bl	8006ef8 <sbrk_aligned>
 8006f6c:	0004      	movs	r4, r0
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d15f      	bne.n	8007032 <_malloc_r+0xf6>
 8006f72:	6834      	ldr	r4, [r6, #0]
 8006f74:	9400      	str	r4, [sp, #0]
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d14a      	bne.n	8007012 <_malloc_r+0xd6>
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d052      	beq.n	8007026 <_malloc_r+0xea>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	0028      	movs	r0, r5
 8006f84:	18e3      	adds	r3, r4, r3
 8006f86:	9900      	ldr	r1, [sp, #0]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f000 f8c9 	bl	8007120 <_sbrk_r>
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	4283      	cmp	r3, r0
 8006f92:	d148      	bne.n	8007026 <_malloc_r+0xea>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	0028      	movs	r0, r5
 8006f98:	1aff      	subs	r7, r7, r3
 8006f9a:	0039      	movs	r1, r7
 8006f9c:	f7ff ffac 	bl	8006ef8 <sbrk_aligned>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d040      	beq.n	8007026 <_malloc_r+0xea>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	19db      	adds	r3, r3, r7
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	6833      	ldr	r3, [r6, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	d133      	bne.n	800701a <_malloc_r+0xde>
 8006fb2:	9b00      	ldr	r3, [sp, #0]
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	e019      	b.n	8006fec <_malloc_r+0xb0>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dac9      	bge.n	8006f50 <_malloc_r+0x14>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fc4:	6821      	ldr	r1, [r4, #0]
 8006fc6:	1bc9      	subs	r1, r1, r7
 8006fc8:	d420      	bmi.n	800700c <_malloc_r+0xd0>
 8006fca:	290b      	cmp	r1, #11
 8006fcc:	d90a      	bls.n	8006fe4 <_malloc_r+0xa8>
 8006fce:	19e2      	adds	r2, r4, r7
 8006fd0:	6027      	str	r7, [r4, #0]
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	d104      	bne.n	8006fe0 <_malloc_r+0xa4>
 8006fd6:	6032      	str	r2, [r6, #0]
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	6011      	str	r1, [r2, #0]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	e005      	b.n	8006fec <_malloc_r+0xb0>
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	e7f9      	b.n	8006fd8 <_malloc_r+0x9c>
 8006fe4:	6862      	ldr	r2, [r4, #4]
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	d10e      	bne.n	8007008 <_malloc_r+0xcc>
 8006fea:	6032      	str	r2, [r6, #0]
 8006fec:	0028      	movs	r0, r5
 8006fee:	f000 f82d 	bl	800704c <__malloc_unlock>
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	300b      	adds	r0, #11
 8006ff8:	1d23      	adds	r3, r4, #4
 8006ffa:	4390      	bics	r0, r2
 8006ffc:	1ac2      	subs	r2, r0, r3
 8006ffe:	4298      	cmp	r0, r3
 8007000:	d0df      	beq.n	8006fc2 <_malloc_r+0x86>
 8007002:	1a1b      	subs	r3, r3, r0
 8007004:	50a3      	str	r3, [r4, r2]
 8007006:	e7dc      	b.n	8006fc2 <_malloc_r+0x86>
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	e7ef      	b.n	8006fec <_malloc_r+0xb0>
 800700c:	0023      	movs	r3, r4
 800700e:	6864      	ldr	r4, [r4, #4]
 8007010:	e7a6      	b.n	8006f60 <_malloc_r+0x24>
 8007012:	9c00      	ldr	r4, [sp, #0]
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	e7ad      	b.n	8006f76 <_malloc_r+0x3a>
 800701a:	001a      	movs	r2, r3
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	42a3      	cmp	r3, r4
 8007020:	d1fb      	bne.n	800701a <_malloc_r+0xde>
 8007022:	2300      	movs	r3, #0
 8007024:	e7da      	b.n	8006fdc <_malloc_r+0xa0>
 8007026:	230c      	movs	r3, #12
 8007028:	0028      	movs	r0, r5
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f000 f80e 	bl	800704c <__malloc_unlock>
 8007030:	e7c6      	b.n	8006fc0 <_malloc_r+0x84>
 8007032:	6007      	str	r7, [r0, #0]
 8007034:	e7da      	b.n	8006fec <_malloc_r+0xb0>
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	20000278 	.word	0x20000278

0800703c <__malloc_lock>:
 800703c:	b510      	push	{r4, lr}
 800703e:	4802      	ldr	r0, [pc, #8]	@ (8007048 <__malloc_lock+0xc>)
 8007040:	f000 f8aa 	bl	8007198 <__retarget_lock_acquire_recursive>
 8007044:	bd10      	pop	{r4, pc}
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	200003b8 	.word	0x200003b8

0800704c <__malloc_unlock>:
 800704c:	b510      	push	{r4, lr}
 800704e:	4802      	ldr	r0, [pc, #8]	@ (8007058 <__malloc_unlock+0xc>)
 8007050:	f000 f8a3 	bl	800719a <__retarget_lock_release_recursive>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	200003b8 	.word	0x200003b8

0800705c <sniprintf>:
 800705c:	b40c      	push	{r2, r3}
 800705e:	b530      	push	{r4, r5, lr}
 8007060:	4b18      	ldr	r3, [pc, #96]	@ (80070c4 <sniprintf+0x68>)
 8007062:	000c      	movs	r4, r1
 8007064:	681d      	ldr	r5, [r3, #0]
 8007066:	b09d      	sub	sp, #116	@ 0x74
 8007068:	2900      	cmp	r1, #0
 800706a:	da08      	bge.n	800707e <sniprintf+0x22>
 800706c:	238b      	movs	r3, #139	@ 0x8b
 800706e:	2001      	movs	r0, #1
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	4240      	negs	r0, r0
 8007074:	b01d      	add	sp, #116	@ 0x74
 8007076:	bc30      	pop	{r4, r5}
 8007078:	bc08      	pop	{r3}
 800707a:	b002      	add	sp, #8
 800707c:	4718      	bx	r3
 800707e:	2382      	movs	r3, #130	@ 0x82
 8007080:	466a      	mov	r2, sp
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	8293      	strh	r3, [r2, #20]
 8007086:	2300      	movs	r3, #0
 8007088:	9002      	str	r0, [sp, #8]
 800708a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800708c:	9006      	str	r0, [sp, #24]
 800708e:	4299      	cmp	r1, r3
 8007090:	d000      	beq.n	8007094 <sniprintf+0x38>
 8007092:	1e4b      	subs	r3, r1, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	2301      	movs	r3, #1
 800709a:	466a      	mov	r2, sp
 800709c:	425b      	negs	r3, r3
 800709e:	82d3      	strh	r3, [r2, #22]
 80070a0:	0028      	movs	r0, r5
 80070a2:	ab21      	add	r3, sp, #132	@ 0x84
 80070a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80070a6:	a902      	add	r1, sp, #8
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	f000 f933 	bl	8007314 <_svfiprintf_r>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	da01      	bge.n	80070b6 <sniprintf+0x5a>
 80070b2:	238b      	movs	r3, #139	@ 0x8b
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d0dc      	beq.n	8007074 <sniprintf+0x18>
 80070ba:	2200      	movs	r2, #0
 80070bc:	9b02      	ldr	r3, [sp, #8]
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e7d8      	b.n	8007074 <sniprintf+0x18>
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	20000010 	.word	0x20000010

080070c8 <memset>:
 80070c8:	0003      	movs	r3, r0
 80070ca:	1882      	adds	r2, r0, r2
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d100      	bne.n	80070d2 <memset+0xa>
 80070d0:	4770      	bx	lr
 80070d2:	7019      	strb	r1, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	e7f9      	b.n	80070cc <memset+0x4>

080070d8 <strcat>:
 80070d8:	0002      	movs	r2, r0
 80070da:	b510      	push	{r4, lr}
 80070dc:	7813      	ldrb	r3, [r2, #0]
 80070de:	0014      	movs	r4, r2
 80070e0:	3201      	adds	r2, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1fa      	bne.n	80070dc <strcat+0x4>
 80070e6:	5cca      	ldrb	r2, [r1, r3]
 80070e8:	54e2      	strb	r2, [r4, r3]
 80070ea:	3301      	adds	r3, #1
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	d1fa      	bne.n	80070e6 <strcat+0xe>
 80070f0:	bd10      	pop	{r4, pc}

080070f2 <strstr>:
 80070f2:	780a      	ldrb	r2, [r1, #0]
 80070f4:	b530      	push	{r4, r5, lr}
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	d10c      	bne.n	8007114 <strstr+0x22>
 80070fa:	bd30      	pop	{r4, r5, pc}
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d108      	bne.n	8007112 <strstr+0x20>
 8007100:	2301      	movs	r3, #1
 8007102:	5ccc      	ldrb	r4, [r1, r3]
 8007104:	2c00      	cmp	r4, #0
 8007106:	d0f8      	beq.n	80070fa <strstr+0x8>
 8007108:	5cc5      	ldrb	r5, [r0, r3]
 800710a:	42a5      	cmp	r5, r4
 800710c:	d101      	bne.n	8007112 <strstr+0x20>
 800710e:	3301      	adds	r3, #1
 8007110:	e7f7      	b.n	8007102 <strstr+0x10>
 8007112:	3001      	adds	r0, #1
 8007114:	7803      	ldrb	r3, [r0, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <strstr+0xa>
 800711a:	0018      	movs	r0, r3
 800711c:	e7ed      	b.n	80070fa <strstr+0x8>
	...

08007120 <_sbrk_r>:
 8007120:	2300      	movs	r3, #0
 8007122:	b570      	push	{r4, r5, r6, lr}
 8007124:	4d06      	ldr	r5, [pc, #24]	@ (8007140 <_sbrk_r+0x20>)
 8007126:	0004      	movs	r4, r0
 8007128:	0008      	movs	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7f9 fe12 	bl	8000d54 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d103      	bne.n	800713c <_sbrk_r+0x1c>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d000      	beq.n	800713c <_sbrk_r+0x1c>
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	200003b4 	.word	0x200003b4

08007144 <__errno>:
 8007144:	4b01      	ldr	r3, [pc, #4]	@ (800714c <__errno+0x8>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	4770      	bx	lr
 800714a:	46c0      	nop			@ (mov r8, r8)
 800714c:	20000010 	.word	0x20000010

08007150 <__libc_init_array>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	2600      	movs	r6, #0
 8007154:	4c0c      	ldr	r4, [pc, #48]	@ (8007188 <__libc_init_array+0x38>)
 8007156:	4d0d      	ldr	r5, [pc, #52]	@ (800718c <__libc_init_array+0x3c>)
 8007158:	1b64      	subs	r4, r4, r5
 800715a:	10a4      	asrs	r4, r4, #2
 800715c:	42a6      	cmp	r6, r4
 800715e:	d109      	bne.n	8007174 <__libc_init_array+0x24>
 8007160:	2600      	movs	r6, #0
 8007162:	f000 fba7 	bl	80078b4 <_init>
 8007166:	4c0a      	ldr	r4, [pc, #40]	@ (8007190 <__libc_init_array+0x40>)
 8007168:	4d0a      	ldr	r5, [pc, #40]	@ (8007194 <__libc_init_array+0x44>)
 800716a:	1b64      	subs	r4, r4, r5
 800716c:	10a4      	asrs	r4, r4, #2
 800716e:	42a6      	cmp	r6, r4
 8007170:	d105      	bne.n	800717e <__libc_init_array+0x2e>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	00b3      	lsls	r3, r6, #2
 8007176:	58eb      	ldr	r3, [r5, r3]
 8007178:	4798      	blx	r3
 800717a:	3601      	adds	r6, #1
 800717c:	e7ee      	b.n	800715c <__libc_init_array+0xc>
 800717e:	00b3      	lsls	r3, r6, #2
 8007180:	58eb      	ldr	r3, [r5, r3]
 8007182:	4798      	blx	r3
 8007184:	3601      	adds	r6, #1
 8007186:	e7f2      	b.n	800716e <__libc_init_array+0x1e>
 8007188:	08007c9c 	.word	0x08007c9c
 800718c:	08007c9c 	.word	0x08007c9c
 8007190:	08007ca0 	.word	0x08007ca0
 8007194:	08007c9c 	.word	0x08007c9c

08007198 <__retarget_lock_acquire_recursive>:
 8007198:	4770      	bx	lr

0800719a <__retarget_lock_release_recursive>:
 800719a:	4770      	bx	lr

0800719c <strcpy>:
 800719c:	0003      	movs	r3, r0
 800719e:	780a      	ldrb	r2, [r1, #0]
 80071a0:	3101      	adds	r1, #1
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d1f9      	bne.n	800719e <strcpy+0x2>
 80071aa:	4770      	bx	lr

080071ac <memcpy>:
 80071ac:	2300      	movs	r3, #0
 80071ae:	b510      	push	{r4, lr}
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d100      	bne.n	80071b6 <memcpy+0xa>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	5ccc      	ldrb	r4, [r1, r3]
 80071b8:	54c4      	strb	r4, [r0, r3]
 80071ba:	3301      	adds	r3, #1
 80071bc:	e7f8      	b.n	80071b0 <memcpy+0x4>
	...

080071c0 <_free_r>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	0005      	movs	r5, r0
 80071c4:	1e0c      	subs	r4, r1, #0
 80071c6:	d010      	beq.n	80071ea <_free_r+0x2a>
 80071c8:	3c04      	subs	r4, #4
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da00      	bge.n	80071d2 <_free_r+0x12>
 80071d0:	18e4      	adds	r4, r4, r3
 80071d2:	0028      	movs	r0, r5
 80071d4:	f7ff ff32 	bl	800703c <__malloc_lock>
 80071d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <_free_r+0x90>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <_free_r+0x2c>
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	6014      	str	r4, [r2, #0]
 80071e4:	0028      	movs	r0, r5
 80071e6:	f7ff ff31 	bl	800704c <__malloc_unlock>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d908      	bls.n	8007202 <_free_r+0x42>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428b      	cmp	r3, r1
 80071f6:	d1f3      	bne.n	80071e0 <_free_r+0x20>
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1809      	adds	r1, r1, r0
 80071fe:	6021      	str	r1, [r4, #0]
 8007200:	e7ee      	b.n	80071e0 <_free_r+0x20>
 8007202:	001a      	movs	r2, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <_free_r+0x4e>
 800720a:	42a3      	cmp	r3, r4
 800720c:	d9f9      	bls.n	8007202 <_free_r+0x42>
 800720e:	6811      	ldr	r1, [r2, #0]
 8007210:	1850      	adds	r0, r2, r1
 8007212:	42a0      	cmp	r0, r4
 8007214:	d10b      	bne.n	800722e <_free_r+0x6e>
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1809      	adds	r1, r1, r0
 800721a:	1850      	adds	r0, r2, r1
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	4283      	cmp	r3, r0
 8007220:	d1e0      	bne.n	80071e4 <_free_r+0x24>
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	1841      	adds	r1, r0, r1
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	6053      	str	r3, [r2, #4]
 800722c:	e7da      	b.n	80071e4 <_free_r+0x24>
 800722e:	42a0      	cmp	r0, r4
 8007230:	d902      	bls.n	8007238 <_free_r+0x78>
 8007232:	230c      	movs	r3, #12
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	e7d5      	b.n	80071e4 <_free_r+0x24>
 8007238:	6820      	ldr	r0, [r4, #0]
 800723a:	1821      	adds	r1, r4, r0
 800723c:	428b      	cmp	r3, r1
 800723e:	d103      	bne.n	8007248 <_free_r+0x88>
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	1809      	adds	r1, r1, r0
 8007246:	6021      	str	r1, [r4, #0]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	6054      	str	r4, [r2, #4]
 800724c:	e7ca      	b.n	80071e4 <_free_r+0x24>
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	20000278 	.word	0x20000278

08007254 <__ssputs_r>:
 8007254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007256:	688e      	ldr	r6, [r1, #8]
 8007258:	b085      	sub	sp, #20
 800725a:	001f      	movs	r7, r3
 800725c:	000c      	movs	r4, r1
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	9002      	str	r0, [sp, #8]
 8007262:	9203      	str	r2, [sp, #12]
 8007264:	42be      	cmp	r6, r7
 8007266:	d830      	bhi.n	80072ca <__ssputs_r+0x76>
 8007268:	210c      	movs	r1, #12
 800726a:	5e62      	ldrsh	r2, [r4, r1]
 800726c:	2190      	movs	r1, #144	@ 0x90
 800726e:	00c9      	lsls	r1, r1, #3
 8007270:	420a      	tst	r2, r1
 8007272:	d028      	beq.n	80072c6 <__ssputs_r+0x72>
 8007274:	2003      	movs	r0, #3
 8007276:	6921      	ldr	r1, [r4, #16]
 8007278:	1a5b      	subs	r3, r3, r1
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	6963      	ldr	r3, [r4, #20]
 800727e:	4343      	muls	r3, r0
 8007280:	9801      	ldr	r0, [sp, #4]
 8007282:	0fdd      	lsrs	r5, r3, #31
 8007284:	18ed      	adds	r5, r5, r3
 8007286:	1c7b      	adds	r3, r7, #1
 8007288:	181b      	adds	r3, r3, r0
 800728a:	106d      	asrs	r5, r5, #1
 800728c:	42ab      	cmp	r3, r5
 800728e:	d900      	bls.n	8007292 <__ssputs_r+0x3e>
 8007290:	001d      	movs	r5, r3
 8007292:	0552      	lsls	r2, r2, #21
 8007294:	d528      	bpl.n	80072e8 <__ssputs_r+0x94>
 8007296:	0029      	movs	r1, r5
 8007298:	9802      	ldr	r0, [sp, #8]
 800729a:	f7ff fe4f 	bl	8006f3c <_malloc_r>
 800729e:	1e06      	subs	r6, r0, #0
 80072a0:	d02c      	beq.n	80072fc <__ssputs_r+0xa8>
 80072a2:	9a01      	ldr	r2, [sp, #4]
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	f7ff ff81 	bl	80071ac <memcpy>
 80072aa:	89a2      	ldrh	r2, [r4, #12]
 80072ac:	4b18      	ldr	r3, [pc, #96]	@ (8007310 <__ssputs_r+0xbc>)
 80072ae:	401a      	ands	r2, r3
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	4313      	orrs	r3, r2
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	6126      	str	r6, [r4, #16]
 80072ba:	18f6      	adds	r6, r6, r3
 80072bc:	6026      	str	r6, [r4, #0]
 80072be:	003e      	movs	r6, r7
 80072c0:	6165      	str	r5, [r4, #20]
 80072c2:	1aed      	subs	r5, r5, r3
 80072c4:	60a5      	str	r5, [r4, #8]
 80072c6:	42be      	cmp	r6, r7
 80072c8:	d900      	bls.n	80072cc <__ssputs_r+0x78>
 80072ca:	003e      	movs	r6, r7
 80072cc:	0032      	movs	r2, r6
 80072ce:	9903      	ldr	r1, [sp, #12]
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	f000 fa99 	bl	8007808 <memmove>
 80072d6:	2000      	movs	r0, #0
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	1b9b      	subs	r3, r3, r6
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	199b      	adds	r3, r3, r6
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	b005      	add	sp, #20
 80072e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e8:	002a      	movs	r2, r5
 80072ea:	9802      	ldr	r0, [sp, #8]
 80072ec:	f000 faa9 	bl	8007842 <_realloc_r>
 80072f0:	1e06      	subs	r6, r0, #0
 80072f2:	d1e0      	bne.n	80072b6 <__ssputs_r+0x62>
 80072f4:	6921      	ldr	r1, [r4, #16]
 80072f6:	9802      	ldr	r0, [sp, #8]
 80072f8:	f7ff ff62 	bl	80071c0 <_free_r>
 80072fc:	230c      	movs	r3, #12
 80072fe:	2001      	movs	r0, #1
 8007300:	9a02      	ldr	r2, [sp, #8]
 8007302:	4240      	negs	r0, r0
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	89a2      	ldrh	r2, [r4, #12]
 8007308:	3334      	adds	r3, #52	@ 0x34
 800730a:	4313      	orrs	r3, r2
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	e7e9      	b.n	80072e4 <__ssputs_r+0x90>
 8007310:	fffffb7f 	.word	0xfffffb7f

08007314 <_svfiprintf_r>:
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	b0a1      	sub	sp, #132	@ 0x84
 8007318:	9003      	str	r0, [sp, #12]
 800731a:	001d      	movs	r5, r3
 800731c:	898b      	ldrh	r3, [r1, #12]
 800731e:	000f      	movs	r7, r1
 8007320:	0016      	movs	r6, r2
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	d511      	bpl.n	800734a <_svfiprintf_r+0x36>
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10e      	bne.n	800734a <_svfiprintf_r+0x36>
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	f7ff fe05 	bl	8006f3c <_malloc_r>
 8007332:	6038      	str	r0, [r7, #0]
 8007334:	6138      	str	r0, [r7, #16]
 8007336:	2800      	cmp	r0, #0
 8007338:	d105      	bne.n	8007346 <_svfiprintf_r+0x32>
 800733a:	230c      	movs	r3, #12
 800733c:	9a03      	ldr	r2, [sp, #12]
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	2001      	movs	r0, #1
 8007342:	4240      	negs	r0, r0
 8007344:	e0cf      	b.n	80074e6 <_svfiprintf_r+0x1d2>
 8007346:	2340      	movs	r3, #64	@ 0x40
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	ac08      	add	r4, sp, #32
 800734e:	6163      	str	r3, [r4, #20]
 8007350:	3320      	adds	r3, #32
 8007352:	7663      	strb	r3, [r4, #25]
 8007354:	3310      	adds	r3, #16
 8007356:	76a3      	strb	r3, [r4, #26]
 8007358:	9507      	str	r5, [sp, #28]
 800735a:	0035      	movs	r5, r6
 800735c:	782b      	ldrb	r3, [r5, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <_svfiprintf_r+0x52>
 8007362:	2b25      	cmp	r3, #37	@ 0x25
 8007364:	d148      	bne.n	80073f8 <_svfiprintf_r+0xe4>
 8007366:	1bab      	subs	r3, r5, r6
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	42b5      	cmp	r5, r6
 800736c:	d00b      	beq.n	8007386 <_svfiprintf_r+0x72>
 800736e:	0032      	movs	r2, r6
 8007370:	0039      	movs	r1, r7
 8007372:	9803      	ldr	r0, [sp, #12]
 8007374:	f7ff ff6e 	bl	8007254 <__ssputs_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d100      	bne.n	800737e <_svfiprintf_r+0x6a>
 800737c:	e0ae      	b.n	80074dc <_svfiprintf_r+0x1c8>
 800737e:	6963      	ldr	r3, [r4, #20]
 8007380:	9a05      	ldr	r2, [sp, #20]
 8007382:	189b      	adds	r3, r3, r2
 8007384:	6163      	str	r3, [r4, #20]
 8007386:	782b      	ldrb	r3, [r5, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d100      	bne.n	800738e <_svfiprintf_r+0x7a>
 800738c:	e0a6      	b.n	80074dc <_svfiprintf_r+0x1c8>
 800738e:	2201      	movs	r2, #1
 8007390:	2300      	movs	r3, #0
 8007392:	4252      	negs	r2, r2
 8007394:	6062      	str	r2, [r4, #4]
 8007396:	a904      	add	r1, sp, #16
 8007398:	3254      	adds	r2, #84	@ 0x54
 800739a:	1852      	adds	r2, r2, r1
 800739c:	1c6e      	adds	r6, r5, #1
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	60e3      	str	r3, [r4, #12]
 80073a2:	60a3      	str	r3, [r4, #8]
 80073a4:	7013      	strb	r3, [r2, #0]
 80073a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80073a8:	4b54      	ldr	r3, [pc, #336]	@ (80074fc <_svfiprintf_r+0x1e8>)
 80073aa:	2205      	movs	r2, #5
 80073ac:	0018      	movs	r0, r3
 80073ae:	7831      	ldrb	r1, [r6, #0]
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	f000 fa3b 	bl	800782c <memchr>
 80073b6:	1c75      	adds	r5, r6, #1
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d11f      	bne.n	80073fc <_svfiprintf_r+0xe8>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	06d3      	lsls	r3, r2, #27
 80073c0:	d504      	bpl.n	80073cc <_svfiprintf_r+0xb8>
 80073c2:	2353      	movs	r3, #83	@ 0x53
 80073c4:	a904      	add	r1, sp, #16
 80073c6:	185b      	adds	r3, r3, r1
 80073c8:	2120      	movs	r1, #32
 80073ca:	7019      	strb	r1, [r3, #0]
 80073cc:	0713      	lsls	r3, r2, #28
 80073ce:	d504      	bpl.n	80073da <_svfiprintf_r+0xc6>
 80073d0:	2353      	movs	r3, #83	@ 0x53
 80073d2:	a904      	add	r1, sp, #16
 80073d4:	185b      	adds	r3, r3, r1
 80073d6:	212b      	movs	r1, #43	@ 0x2b
 80073d8:	7019      	strb	r1, [r3, #0]
 80073da:	7833      	ldrb	r3, [r6, #0]
 80073dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073de:	d016      	beq.n	800740e <_svfiprintf_r+0xfa>
 80073e0:	0035      	movs	r5, r6
 80073e2:	2100      	movs	r1, #0
 80073e4:	200a      	movs	r0, #10
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	782a      	ldrb	r2, [r5, #0]
 80073ea:	1c6e      	adds	r6, r5, #1
 80073ec:	3a30      	subs	r2, #48	@ 0x30
 80073ee:	2a09      	cmp	r2, #9
 80073f0:	d950      	bls.n	8007494 <_svfiprintf_r+0x180>
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d111      	bne.n	800741a <_svfiprintf_r+0x106>
 80073f6:	e017      	b.n	8007428 <_svfiprintf_r+0x114>
 80073f8:	3501      	adds	r5, #1
 80073fa:	e7af      	b.n	800735c <_svfiprintf_r+0x48>
 80073fc:	9b05      	ldr	r3, [sp, #20]
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	1ac0      	subs	r0, r0, r3
 8007402:	2301      	movs	r3, #1
 8007404:	4083      	lsls	r3, r0
 8007406:	4313      	orrs	r3, r2
 8007408:	002e      	movs	r6, r5
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	e7cc      	b.n	80073a8 <_svfiprintf_r+0x94>
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9107      	str	r1, [sp, #28]
 8007416:	2b00      	cmp	r3, #0
 8007418:	db01      	blt.n	800741e <_svfiprintf_r+0x10a>
 800741a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800741c:	e004      	b.n	8007428 <_svfiprintf_r+0x114>
 800741e:	425b      	negs	r3, r3
 8007420:	60e3      	str	r3, [r4, #12]
 8007422:	2302      	movs	r3, #2
 8007424:	4313      	orrs	r3, r2
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	782b      	ldrb	r3, [r5, #0]
 800742a:	2b2e      	cmp	r3, #46	@ 0x2e
 800742c:	d10c      	bne.n	8007448 <_svfiprintf_r+0x134>
 800742e:	786b      	ldrb	r3, [r5, #1]
 8007430:	2b2a      	cmp	r3, #42	@ 0x2a
 8007432:	d134      	bne.n	800749e <_svfiprintf_r+0x18a>
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	3502      	adds	r5, #2
 8007438:	1d1a      	adds	r2, r3, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da01      	bge.n	8007446 <_svfiprintf_r+0x132>
 8007442:	2301      	movs	r3, #1
 8007444:	425b      	negs	r3, r3
 8007446:	9309      	str	r3, [sp, #36]	@ 0x24
 8007448:	4e2d      	ldr	r6, [pc, #180]	@ (8007500 <_svfiprintf_r+0x1ec>)
 800744a:	2203      	movs	r2, #3
 800744c:	0030      	movs	r0, r6
 800744e:	7829      	ldrb	r1, [r5, #0]
 8007450:	f000 f9ec 	bl	800782c <memchr>
 8007454:	2800      	cmp	r0, #0
 8007456:	d006      	beq.n	8007466 <_svfiprintf_r+0x152>
 8007458:	2340      	movs	r3, #64	@ 0x40
 800745a:	1b80      	subs	r0, r0, r6
 800745c:	4083      	lsls	r3, r0
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	3501      	adds	r5, #1
 8007462:	4313      	orrs	r3, r2
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	7829      	ldrb	r1, [r5, #0]
 8007468:	2206      	movs	r2, #6
 800746a:	4826      	ldr	r0, [pc, #152]	@ (8007504 <_svfiprintf_r+0x1f0>)
 800746c:	1c6e      	adds	r6, r5, #1
 800746e:	7621      	strb	r1, [r4, #24]
 8007470:	f000 f9dc 	bl	800782c <memchr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d038      	beq.n	80074ea <_svfiprintf_r+0x1d6>
 8007478:	4b23      	ldr	r3, [pc, #140]	@ (8007508 <_svfiprintf_r+0x1f4>)
 800747a:	2b00      	cmp	r3, #0
 800747c:	d122      	bne.n	80074c4 <_svfiprintf_r+0x1b0>
 800747e:	2207      	movs	r2, #7
 8007480:	9b07      	ldr	r3, [sp, #28]
 8007482:	3307      	adds	r3, #7
 8007484:	4393      	bics	r3, r2
 8007486:	3308      	adds	r3, #8
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	6963      	ldr	r3, [r4, #20]
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	189b      	adds	r3, r3, r2
 8007490:	6163      	str	r3, [r4, #20]
 8007492:	e762      	b.n	800735a <_svfiprintf_r+0x46>
 8007494:	4343      	muls	r3, r0
 8007496:	0035      	movs	r5, r6
 8007498:	2101      	movs	r1, #1
 800749a:	189b      	adds	r3, r3, r2
 800749c:	e7a4      	b.n	80073e8 <_svfiprintf_r+0xd4>
 800749e:	2300      	movs	r3, #0
 80074a0:	200a      	movs	r0, #10
 80074a2:	0019      	movs	r1, r3
 80074a4:	3501      	adds	r5, #1
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	782a      	ldrb	r2, [r5, #0]
 80074aa:	1c6e      	adds	r6, r5, #1
 80074ac:	3a30      	subs	r2, #48	@ 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c8      	beq.n	8007448 <_svfiprintf_r+0x134>
 80074b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80074b8:	e7c6      	b.n	8007448 <_svfiprintf_r+0x134>
 80074ba:	4341      	muls	r1, r0
 80074bc:	0035      	movs	r5, r6
 80074be:	2301      	movs	r3, #1
 80074c0:	1889      	adds	r1, r1, r2
 80074c2:	e7f1      	b.n	80074a8 <_svfiprintf_r+0x194>
 80074c4:	aa07      	add	r2, sp, #28
 80074c6:	9200      	str	r2, [sp, #0]
 80074c8:	0021      	movs	r1, r4
 80074ca:	003a      	movs	r2, r7
 80074cc:	4b0f      	ldr	r3, [pc, #60]	@ (800750c <_svfiprintf_r+0x1f8>)
 80074ce:	9803      	ldr	r0, [sp, #12]
 80074d0:	e000      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074d2:	bf00      	nop
 80074d4:	9004      	str	r0, [sp, #16]
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	d1d6      	bne.n	800748a <_svfiprintf_r+0x176>
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80074e0:	065b      	lsls	r3, r3, #25
 80074e2:	d500      	bpl.n	80074e6 <_svfiprintf_r+0x1d2>
 80074e4:	e72c      	b.n	8007340 <_svfiprintf_r+0x2c>
 80074e6:	b021      	add	sp, #132	@ 0x84
 80074e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ea:	aa07      	add	r2, sp, #28
 80074ec:	9200      	str	r2, [sp, #0]
 80074ee:	0021      	movs	r1, r4
 80074f0:	003a      	movs	r2, r7
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <_svfiprintf_r+0x1f8>)
 80074f4:	9803      	ldr	r0, [sp, #12]
 80074f6:	f000 f87b 	bl	80075f0 <_printf_i>
 80074fa:	e7eb      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074fc:	08007c60 	.word	0x08007c60
 8007500:	08007c66 	.word	0x08007c66
 8007504:	08007c6a 	.word	0x08007c6a
 8007508:	00000000 	.word	0x00000000
 800750c:	08007255 	.word	0x08007255

08007510 <_printf_common>:
 8007510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007512:	0016      	movs	r6, r2
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	688a      	ldr	r2, [r1, #8]
 8007518:	690b      	ldr	r3, [r1, #16]
 800751a:	000c      	movs	r4, r1
 800751c:	9000      	str	r0, [sp, #0]
 800751e:	4293      	cmp	r3, r2
 8007520:	da00      	bge.n	8007524 <_printf_common+0x14>
 8007522:	0013      	movs	r3, r2
 8007524:	0022      	movs	r2, r4
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	3243      	adds	r2, #67	@ 0x43
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	2a00      	cmp	r2, #0
 800752e:	d001      	beq.n	8007534 <_printf_common+0x24>
 8007530:	3301      	adds	r3, #1
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	069b      	lsls	r3, r3, #26
 8007538:	d502      	bpl.n	8007540 <_printf_common+0x30>
 800753a:	6833      	ldr	r3, [r6, #0]
 800753c:	3302      	adds	r3, #2
 800753e:	6033      	str	r3, [r6, #0]
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	2306      	movs	r3, #6
 8007544:	0015      	movs	r5, r2
 8007546:	401d      	ands	r5, r3
 8007548:	421a      	tst	r2, r3
 800754a:	d027      	beq.n	800759c <_printf_common+0x8c>
 800754c:	0023      	movs	r3, r4
 800754e:	3343      	adds	r3, #67	@ 0x43
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	1e5a      	subs	r2, r3, #1
 8007554:	4193      	sbcs	r3, r2
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	0692      	lsls	r2, r2, #26
 800755a:	d430      	bmi.n	80075be <_printf_common+0xae>
 800755c:	0022      	movs	r2, r4
 800755e:	9901      	ldr	r1, [sp, #4]
 8007560:	9800      	ldr	r0, [sp, #0]
 8007562:	9d08      	ldr	r5, [sp, #32]
 8007564:	3243      	adds	r2, #67	@ 0x43
 8007566:	47a8      	blx	r5
 8007568:	3001      	adds	r0, #1
 800756a:	d025      	beq.n	80075b8 <_printf_common+0xa8>
 800756c:	2206      	movs	r2, #6
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	2500      	movs	r5, #0
 8007572:	4013      	ands	r3, r2
 8007574:	2b04      	cmp	r3, #4
 8007576:	d105      	bne.n	8007584 <_printf_common+0x74>
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	68e5      	ldr	r5, [r4, #12]
 800757c:	1aed      	subs	r5, r5, r3
 800757e:	43eb      	mvns	r3, r5
 8007580:	17db      	asrs	r3, r3, #31
 8007582:	401d      	ands	r5, r3
 8007584:	68a3      	ldr	r3, [r4, #8]
 8007586:	6922      	ldr	r2, [r4, #16]
 8007588:	4293      	cmp	r3, r2
 800758a:	dd01      	ble.n	8007590 <_printf_common+0x80>
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	18ed      	adds	r5, r5, r3
 8007590:	2600      	movs	r6, #0
 8007592:	42b5      	cmp	r5, r6
 8007594:	d120      	bne.n	80075d8 <_printf_common+0xc8>
 8007596:	2000      	movs	r0, #0
 8007598:	e010      	b.n	80075bc <_printf_common+0xac>
 800759a:	3501      	adds	r5, #1
 800759c:	68e3      	ldr	r3, [r4, #12]
 800759e:	6832      	ldr	r2, [r6, #0]
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	42ab      	cmp	r3, r5
 80075a4:	ddd2      	ble.n	800754c <_printf_common+0x3c>
 80075a6:	0022      	movs	r2, r4
 80075a8:	2301      	movs	r3, #1
 80075aa:	9901      	ldr	r1, [sp, #4]
 80075ac:	9800      	ldr	r0, [sp, #0]
 80075ae:	9f08      	ldr	r7, [sp, #32]
 80075b0:	3219      	adds	r2, #25
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	d1f0      	bne.n	800759a <_printf_common+0x8a>
 80075b8:	2001      	movs	r0, #1
 80075ba:	4240      	negs	r0, r0
 80075bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075be:	2030      	movs	r0, #48	@ 0x30
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	3143      	adds	r1, #67	@ 0x43
 80075c4:	7008      	strb	r0, [r1, #0]
 80075c6:	0021      	movs	r1, r4
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	3145      	adds	r1, #69	@ 0x45
 80075cc:	7809      	ldrb	r1, [r1, #0]
 80075ce:	18a2      	adds	r2, r4, r2
 80075d0:	3243      	adds	r2, #67	@ 0x43
 80075d2:	3302      	adds	r3, #2
 80075d4:	7011      	strb	r1, [r2, #0]
 80075d6:	e7c1      	b.n	800755c <_printf_common+0x4c>
 80075d8:	0022      	movs	r2, r4
 80075da:	2301      	movs	r3, #1
 80075dc:	9901      	ldr	r1, [sp, #4]
 80075de:	9800      	ldr	r0, [sp, #0]
 80075e0:	9f08      	ldr	r7, [sp, #32]
 80075e2:	321a      	adds	r2, #26
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0e6      	beq.n	80075b8 <_printf_common+0xa8>
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7d1      	b.n	8007592 <_printf_common+0x82>
	...

080075f0 <_printf_i>:
 80075f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f2:	b08b      	sub	sp, #44	@ 0x2c
 80075f4:	9206      	str	r2, [sp, #24]
 80075f6:	000a      	movs	r2, r1
 80075f8:	3243      	adds	r2, #67	@ 0x43
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	9005      	str	r0, [sp, #20]
 80075fe:	9203      	str	r2, [sp, #12]
 8007600:	7e0a      	ldrb	r2, [r1, #24]
 8007602:	000c      	movs	r4, r1
 8007604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007606:	2a78      	cmp	r2, #120	@ 0x78
 8007608:	d809      	bhi.n	800761e <_printf_i+0x2e>
 800760a:	2a62      	cmp	r2, #98	@ 0x62
 800760c:	d80b      	bhi.n	8007626 <_printf_i+0x36>
 800760e:	2a00      	cmp	r2, #0
 8007610:	d100      	bne.n	8007614 <_printf_i+0x24>
 8007612:	e0ba      	b.n	800778a <_printf_i+0x19a>
 8007614:	497a      	ldr	r1, [pc, #488]	@ (8007800 <_printf_i+0x210>)
 8007616:	9104      	str	r1, [sp, #16]
 8007618:	2a58      	cmp	r2, #88	@ 0x58
 800761a:	d100      	bne.n	800761e <_printf_i+0x2e>
 800761c:	e08e      	b.n	800773c <_printf_i+0x14c>
 800761e:	0025      	movs	r5, r4
 8007620:	3542      	adds	r5, #66	@ 0x42
 8007622:	702a      	strb	r2, [r5, #0]
 8007624:	e022      	b.n	800766c <_printf_i+0x7c>
 8007626:	0010      	movs	r0, r2
 8007628:	3863      	subs	r0, #99	@ 0x63
 800762a:	2815      	cmp	r0, #21
 800762c:	d8f7      	bhi.n	800761e <_printf_i+0x2e>
 800762e:	f7f8 fd73 	bl	8000118 <__gnu_thumb1_case_shi>
 8007632:	0016      	.short	0x0016
 8007634:	fff6001f 	.word	0xfff6001f
 8007638:	fff6fff6 	.word	0xfff6fff6
 800763c:	001ffff6 	.word	0x001ffff6
 8007640:	fff6fff6 	.word	0xfff6fff6
 8007644:	fff6fff6 	.word	0xfff6fff6
 8007648:	0036009f 	.word	0x0036009f
 800764c:	fff6007e 	.word	0xfff6007e
 8007650:	00b0fff6 	.word	0x00b0fff6
 8007654:	0036fff6 	.word	0x0036fff6
 8007658:	fff6fff6 	.word	0xfff6fff6
 800765c:	0082      	.short	0x0082
 800765e:	0025      	movs	r5, r4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	3542      	adds	r5, #66	@ 0x42
 8007664:	1d11      	adds	r1, r2, #4
 8007666:	6019      	str	r1, [r3, #0]
 8007668:	6813      	ldr	r3, [r2, #0]
 800766a:	702b      	strb	r3, [r5, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	e09e      	b.n	80077ae <_printf_i+0x1be>
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	6809      	ldr	r1, [r1, #0]
 8007674:	1d02      	adds	r2, r0, #4
 8007676:	060d      	lsls	r5, r1, #24
 8007678:	d50b      	bpl.n	8007692 <_printf_i+0xa2>
 800767a:	6806      	ldr	r6, [r0, #0]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	2e00      	cmp	r6, #0
 8007680:	da03      	bge.n	800768a <_printf_i+0x9a>
 8007682:	232d      	movs	r3, #45	@ 0x2d
 8007684:	9a03      	ldr	r2, [sp, #12]
 8007686:	4276      	negs	r6, r6
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	4b5d      	ldr	r3, [pc, #372]	@ (8007800 <_printf_i+0x210>)
 800768c:	270a      	movs	r7, #10
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	e018      	b.n	80076c4 <_printf_i+0xd4>
 8007692:	6806      	ldr	r6, [r0, #0]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	0649      	lsls	r1, r1, #25
 8007698:	d5f1      	bpl.n	800767e <_printf_i+0x8e>
 800769a:	b236      	sxth	r6, r6
 800769c:	e7ef      	b.n	800767e <_printf_i+0x8e>
 800769e:	6808      	ldr	r0, [r1, #0]
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	c940      	ldmia	r1!, {r6}
 80076a4:	0605      	lsls	r5, r0, #24
 80076a6:	d402      	bmi.n	80076ae <_printf_i+0xbe>
 80076a8:	0640      	lsls	r0, r0, #25
 80076aa:	d500      	bpl.n	80076ae <_printf_i+0xbe>
 80076ac:	b2b6      	uxth	r6, r6
 80076ae:	6019      	str	r1, [r3, #0]
 80076b0:	4b53      	ldr	r3, [pc, #332]	@ (8007800 <_printf_i+0x210>)
 80076b2:	270a      	movs	r7, #10
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80076b8:	d100      	bne.n	80076bc <_printf_i+0xcc>
 80076ba:	3f02      	subs	r7, #2
 80076bc:	0023      	movs	r3, r4
 80076be:	2200      	movs	r2, #0
 80076c0:	3343      	adds	r3, #67	@ 0x43
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	db06      	blt.n	80076da <_printf_i+0xea>
 80076cc:	2104      	movs	r1, #4
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	9d03      	ldr	r5, [sp, #12]
 80076d2:	438a      	bics	r2, r1
 80076d4:	6022      	str	r2, [r4, #0]
 80076d6:	4333      	orrs	r3, r6
 80076d8:	d00c      	beq.n	80076f4 <_printf_i+0x104>
 80076da:	9d03      	ldr	r5, [sp, #12]
 80076dc:	0030      	movs	r0, r6
 80076de:	0039      	movs	r1, r7
 80076e0:	f7f8 fdaa 	bl	8000238 <__aeabi_uidivmod>
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	3d01      	subs	r5, #1
 80076e8:	5c5b      	ldrb	r3, [r3, r1]
 80076ea:	702b      	strb	r3, [r5, #0]
 80076ec:	0033      	movs	r3, r6
 80076ee:	0006      	movs	r6, r0
 80076f0:	429f      	cmp	r7, r3
 80076f2:	d9f3      	bls.n	80076dc <_printf_i+0xec>
 80076f4:	2f08      	cmp	r7, #8
 80076f6:	d109      	bne.n	800770c <_printf_i+0x11c>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	07db      	lsls	r3, r3, #31
 80076fc:	d506      	bpl.n	800770c <_printf_i+0x11c>
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	dc02      	bgt.n	800770c <_printf_i+0x11c>
 8007706:	2330      	movs	r3, #48	@ 0x30
 8007708:	3d01      	subs	r5, #1
 800770a:	702b      	strb	r3, [r5, #0]
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	1b5b      	subs	r3, r3, r5
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	0021      	movs	r1, r4
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	9805      	ldr	r0, [sp, #20]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	aa09      	add	r2, sp, #36	@ 0x24
 800771e:	f7ff fef7 	bl	8007510 <_printf_common>
 8007722:	3001      	adds	r0, #1
 8007724:	d148      	bne.n	80077b8 <_printf_i+0x1c8>
 8007726:	2001      	movs	r0, #1
 8007728:	4240      	negs	r0, r0
 800772a:	b00b      	add	sp, #44	@ 0x2c
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	2220      	movs	r2, #32
 8007730:	6809      	ldr	r1, [r1, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	2278      	movs	r2, #120	@ 0x78
 8007738:	4932      	ldr	r1, [pc, #200]	@ (8007804 <_printf_i+0x214>)
 800773a:	9104      	str	r1, [sp, #16]
 800773c:	0021      	movs	r1, r4
 800773e:	3145      	adds	r1, #69	@ 0x45
 8007740:	700a      	strb	r2, [r1, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	c940      	ldmia	r1!, {r6}
 8007748:	0610      	lsls	r0, r2, #24
 800774a:	d402      	bmi.n	8007752 <_printf_i+0x162>
 800774c:	0650      	lsls	r0, r2, #25
 800774e:	d500      	bpl.n	8007752 <_printf_i+0x162>
 8007750:	b2b6      	uxth	r6, r6
 8007752:	6019      	str	r1, [r3, #0]
 8007754:	07d3      	lsls	r3, r2, #31
 8007756:	d502      	bpl.n	800775e <_printf_i+0x16e>
 8007758:	2320      	movs	r3, #32
 800775a:	4313      	orrs	r3, r2
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2e00      	cmp	r6, #0
 8007760:	d001      	beq.n	8007766 <_printf_i+0x176>
 8007762:	2710      	movs	r7, #16
 8007764:	e7aa      	b.n	80076bc <_printf_i+0xcc>
 8007766:	2220      	movs	r2, #32
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	4393      	bics	r3, r2
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	e7f8      	b.n	8007762 <_printf_i+0x172>
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	680d      	ldr	r5, [r1, #0]
 8007774:	1d10      	adds	r0, r2, #4
 8007776:	6949      	ldr	r1, [r1, #20]
 8007778:	6018      	str	r0, [r3, #0]
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	062e      	lsls	r6, r5, #24
 800777e:	d501      	bpl.n	8007784 <_printf_i+0x194>
 8007780:	6019      	str	r1, [r3, #0]
 8007782:	e002      	b.n	800778a <_printf_i+0x19a>
 8007784:	066d      	lsls	r5, r5, #25
 8007786:	d5fb      	bpl.n	8007780 <_printf_i+0x190>
 8007788:	8019      	strh	r1, [r3, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	9d03      	ldr	r5, [sp, #12]
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	e7bf      	b.n	8007712 <_printf_i+0x122>
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	1d11      	adds	r1, r2, #4
 8007796:	6019      	str	r1, [r3, #0]
 8007798:	6815      	ldr	r5, [r2, #0]
 800779a:	2100      	movs	r1, #0
 800779c:	0028      	movs	r0, r5
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	f000 f844 	bl	800782c <memchr>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d001      	beq.n	80077ac <_printf_i+0x1bc>
 80077a8:	1b40      	subs	r0, r0, r5
 80077aa:	6060      	str	r0, [r4, #4]
 80077ac:	6863      	ldr	r3, [r4, #4]
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	2300      	movs	r3, #0
 80077b2:	9a03      	ldr	r2, [sp, #12]
 80077b4:	7013      	strb	r3, [r2, #0]
 80077b6:	e7ac      	b.n	8007712 <_printf_i+0x122>
 80077b8:	002a      	movs	r2, r5
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	9906      	ldr	r1, [sp, #24]
 80077be:	9805      	ldr	r0, [sp, #20]
 80077c0:	9d07      	ldr	r5, [sp, #28]
 80077c2:	47a8      	blx	r5
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0ae      	beq.n	8007726 <_printf_i+0x136>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	079b      	lsls	r3, r3, #30
 80077cc:	d415      	bmi.n	80077fa <_printf_i+0x20a>
 80077ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d0:	68e0      	ldr	r0, [r4, #12]
 80077d2:	4298      	cmp	r0, r3
 80077d4:	daa9      	bge.n	800772a <_printf_i+0x13a>
 80077d6:	0018      	movs	r0, r3
 80077d8:	e7a7      	b.n	800772a <_printf_i+0x13a>
 80077da:	0022      	movs	r2, r4
 80077dc:	2301      	movs	r3, #1
 80077de:	9906      	ldr	r1, [sp, #24]
 80077e0:	9805      	ldr	r0, [sp, #20]
 80077e2:	9e07      	ldr	r6, [sp, #28]
 80077e4:	3219      	adds	r2, #25
 80077e6:	47b0      	blx	r6
 80077e8:	3001      	adds	r0, #1
 80077ea:	d09c      	beq.n	8007726 <_printf_i+0x136>
 80077ec:	3501      	adds	r5, #1
 80077ee:	68e3      	ldr	r3, [r4, #12]
 80077f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dcf0      	bgt.n	80077da <_printf_i+0x1ea>
 80077f8:	e7e9      	b.n	80077ce <_printf_i+0x1de>
 80077fa:	2500      	movs	r5, #0
 80077fc:	e7f7      	b.n	80077ee <_printf_i+0x1fe>
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	08007c71 	.word	0x08007c71
 8007804:	08007c82 	.word	0x08007c82

08007808 <memmove>:
 8007808:	b510      	push	{r4, lr}
 800780a:	4288      	cmp	r0, r1
 800780c:	d902      	bls.n	8007814 <memmove+0xc>
 800780e:	188b      	adds	r3, r1, r2
 8007810:	4298      	cmp	r0, r3
 8007812:	d308      	bcc.n	8007826 <memmove+0x1e>
 8007814:	2300      	movs	r3, #0
 8007816:	429a      	cmp	r2, r3
 8007818:	d007      	beq.n	800782a <memmove+0x22>
 800781a:	5ccc      	ldrb	r4, [r1, r3]
 800781c:	54c4      	strb	r4, [r0, r3]
 800781e:	3301      	adds	r3, #1
 8007820:	e7f9      	b.n	8007816 <memmove+0xe>
 8007822:	5c8b      	ldrb	r3, [r1, r2]
 8007824:	5483      	strb	r3, [r0, r2]
 8007826:	3a01      	subs	r2, #1
 8007828:	d2fb      	bcs.n	8007822 <memmove+0x1a>
 800782a:	bd10      	pop	{r4, pc}

0800782c <memchr>:
 800782c:	b2c9      	uxtb	r1, r1
 800782e:	1882      	adds	r2, r0, r2
 8007830:	4290      	cmp	r0, r2
 8007832:	d101      	bne.n	8007838 <memchr+0xc>
 8007834:	2000      	movs	r0, #0
 8007836:	4770      	bx	lr
 8007838:	7803      	ldrb	r3, [r0, #0]
 800783a:	428b      	cmp	r3, r1
 800783c:	d0fb      	beq.n	8007836 <memchr+0xa>
 800783e:	3001      	adds	r0, #1
 8007840:	e7f6      	b.n	8007830 <memchr+0x4>

08007842 <_realloc_r>:
 8007842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007844:	0006      	movs	r6, r0
 8007846:	000c      	movs	r4, r1
 8007848:	0015      	movs	r5, r2
 800784a:	2900      	cmp	r1, #0
 800784c:	d105      	bne.n	800785a <_realloc_r+0x18>
 800784e:	0011      	movs	r1, r2
 8007850:	f7ff fb74 	bl	8006f3c <_malloc_r>
 8007854:	0004      	movs	r4, r0
 8007856:	0020      	movs	r0, r4
 8007858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800785a:	2a00      	cmp	r2, #0
 800785c:	d103      	bne.n	8007866 <_realloc_r+0x24>
 800785e:	f7ff fcaf 	bl	80071c0 <_free_r>
 8007862:	002c      	movs	r4, r5
 8007864:	e7f7      	b.n	8007856 <_realloc_r+0x14>
 8007866:	f000 f81c 	bl	80078a2 <_malloc_usable_size_r>
 800786a:	0007      	movs	r7, r0
 800786c:	4285      	cmp	r5, r0
 800786e:	d802      	bhi.n	8007876 <_realloc_r+0x34>
 8007870:	0843      	lsrs	r3, r0, #1
 8007872:	42ab      	cmp	r3, r5
 8007874:	d3ef      	bcc.n	8007856 <_realloc_r+0x14>
 8007876:	0029      	movs	r1, r5
 8007878:	0030      	movs	r0, r6
 800787a:	f7ff fb5f 	bl	8006f3c <_malloc_r>
 800787e:	9001      	str	r0, [sp, #4]
 8007880:	2800      	cmp	r0, #0
 8007882:	d101      	bne.n	8007888 <_realloc_r+0x46>
 8007884:	9c01      	ldr	r4, [sp, #4]
 8007886:	e7e6      	b.n	8007856 <_realloc_r+0x14>
 8007888:	002a      	movs	r2, r5
 800788a:	42bd      	cmp	r5, r7
 800788c:	d900      	bls.n	8007890 <_realloc_r+0x4e>
 800788e:	003a      	movs	r2, r7
 8007890:	0021      	movs	r1, r4
 8007892:	9801      	ldr	r0, [sp, #4]
 8007894:	f7ff fc8a 	bl	80071ac <memcpy>
 8007898:	0021      	movs	r1, r4
 800789a:	0030      	movs	r0, r6
 800789c:	f7ff fc90 	bl	80071c0 <_free_r>
 80078a0:	e7f0      	b.n	8007884 <_realloc_r+0x42>

080078a2 <_malloc_usable_size_r>:
 80078a2:	1f0b      	subs	r3, r1, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	1f18      	subs	r0, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da01      	bge.n	80078b0 <_malloc_usable_size_r+0xe>
 80078ac:	580b      	ldr	r3, [r1, r0]
 80078ae:	18c0      	adds	r0, r0, r3
 80078b0:	4770      	bx	lr
	...

080078b4 <_init>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr

080078c0 <_fini>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	46c0      	nop			@ (mov r8, r8)
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr
